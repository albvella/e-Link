
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014154  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  080142e4  080142e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014978  08014978  000161cc  2**0
                  CONTENTS
  4 .ARM          00000008  08014978  08014978  00015978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014980  08014980  000161cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014980  08014980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014984  08014984  00015984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08014988  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005874  200001d0  08014b54  000161d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005a44  08014b54  00016a44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000161cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000371d7  00000000  00000000  000161fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ead  00000000  00000000  0004d3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002cb8  00000000  00000000  00053280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000022f1  00000000  00000000  00055f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003085b  00000000  00000000  00058229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034e04  00000000  00000000  00088a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001241f3  00000000  00000000  000bd888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e1a7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c99c  00000000  00000000  001e1ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001ee45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080142cc 	.word	0x080142cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	080142cc 	.word	0x080142cc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 80005cc:	b480      	push	{r7}
 80005ce:	b087      	sub	sp, #28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
 80005d8:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005e0:	d11a      	bne.n	8000618 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	005a      	lsls	r2, r3, #1
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	085b      	lsrs	r3, r3, #1
 80005ea:	441a      	add	r2, r3
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80005fc:	4013      	ands	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	085b      	lsrs	r3, r3, #1
 8000604:	b29b      	uxth	r3, r3
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	4313      	orrs	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000616:	e00a      	b.n	800062e <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	085a      	lsrs	r2, r3, #1
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	441a      	add	r2, r3
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	fbb2 f3f3 	udiv	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	60da      	str	r2, [r3, #12]
}
 800062e:	bf00      	nop
 8000630:	371c      	adds	r7, #28
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000642:	23f0      	movs	r3, #240	@ 0xf0
 8000644:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000648:	681c      	ldr	r4, [r3, #0]
 800064a:	f00d f987 	bl	800d95c <HAL_RCC_GetPCLK2Freq>
 800064e:	4601      	mov	r1, r0
 8000650:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000654:	2200      	movs	r2, #0
 8000656:	4620      	mov	r0, r4
 8000658:	f7ff ffb8 	bl	80005cc <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 800065c:	1df9      	adds	r1, r7, #7
 800065e:	2364      	movs	r3, #100	@ 0x64
 8000660:	2201      	movs	r2, #1
 8000662:	4813      	ldr	r0, [pc, #76]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000664:	f011 fa4c 	bl	8011b00 <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000668:	1df9      	adds	r1, r7, #7
 800066a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800066e:	2201      	movs	r2, #1
 8000670:	480f      	ldr	r0, [pc, #60]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000672:	f011 face 	bl	8011c12 <HAL_UART_Receive>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <Temp_Sensor_Init+0x44>
		while(1);
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000682:	681c      	ldr	r4, [r3, #0]
 8000684:	f00d f96a 	bl	800d95c <HAL_RCC_GetPCLK2Freq>
 8000688:	4601      	mov	r1, r0
 800068a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800068e:	2200      	movs	r2, #0
 8000690:	4620      	mov	r0, r4
 8000692:	f7ff ff9b 	bl	80005cc <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2bf0      	cmp	r3, #240	@ 0xf0
 800069a:	d101      	bne.n	80006a0 <Temp_Sensor_Init+0x64>
		while(1);
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 80006a0:	20cc      	movs	r0, #204	@ 0xcc
 80006a2:	f000 f807 	bl	80006b4 <Temp_Sensor_Write>
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd90      	pop	{r4, r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000057c 	.word	0x2000057c

080006b4 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	e017      	b.n	80006f4 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 80006c4:	79fa      	ldrb	r2, [r7, #7]
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	fa42 f303 	asr.w	r3, r2, r3
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d006      	beq.n	80006e2 <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 80006d4:	f107 020c 	add.w	r2, r7, #12
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	4413      	add	r3, r2
 80006dc:	22ff      	movs	r2, #255	@ 0xff
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	e005      	b.n	80006ee <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 80006e2:	f107 020c 	add.w	r2, r7, #12
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	4413      	add	r3, r2
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	2b07      	cmp	r3, #7
 80006f8:	dde4      	ble.n	80006c4 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 80006fa:	f107 010c 	add.w	r1, r7, #12
 80006fe:	2364      	movs	r3, #100	@ 0x64
 8000700:	2208      	movs	r2, #8
 8000702:	4803      	ldr	r0, [pc, #12]	@ (8000710 <Temp_Sensor_Write+0x5c>)
 8000704:	f011 f9fc 	bl	8011b00 <HAL_UART_Transmit>
}
 8000708:	bf00      	nop
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000057c 	.word	0x2000057c

08000714 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 800071e:	2300      	movs	r3, #0
 8000720:	71bb      	strb	r3, [r7, #6]
 8000722:	e00e      	b.n	8000742 <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	085b      	lsrs	r3, r3, #1
 8000728:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 800072a:	f000 f813 	bl	8000754 <Temp_Sensor_ReadBit>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d003      	beq.n	800073c <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800073a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	3301      	adds	r3, #1
 8000740:	71bb      	strb	r3, [r7, #6]
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	2b07      	cmp	r3, #7
 8000746:	d9ed      	bls.n	8000724 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000748:	79fb      	ldrb	r3, [r7, #7]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 800075a:	23ff      	movs	r3, #255	@ 0xff
 800075c:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 800075e:	1df9      	adds	r1, r7, #7
 8000760:	2301      	movs	r3, #1
 8000762:	2201      	movs	r2, #1
 8000764:	4808      	ldr	r0, [pc, #32]	@ (8000788 <Temp_Sensor_ReadBit+0x34>)
 8000766:	f011 f9cb 	bl	8011b00 <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 800076a:	1db9      	adds	r1, r7, #6
 800076c:	2301      	movs	r3, #1
 800076e:	2201      	movs	r2, #1
 8000770:	4805      	ldr	r0, [pc, #20]	@ (8000788 <Temp_Sensor_ReadBit+0x34>)
 8000772:	f011 fa4e 	bl	8011c12 <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000604 	.word	0x20000604

0800078c <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	80bb      	strh	r3, [r7, #4]
	
	Temp_Sensor_Init();
 800079e:	f7ff ff4d 	bl	800063c <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 80007a2:	20cc      	movs	r0, #204	@ 0xcc
 80007a4:	f7ff ff86 	bl	80006b4 <Temp_Sensor_Write>

	uint8_t status = Temp_Sensor_ReadBit();
 80007a8:	f7ff ffd4 	bl	8000754 <Temp_Sensor_ReadBit>
 80007ac:	4603      	mov	r3, r0
 80007ae:	70fb      	strb	r3, [r7, #3]

	if (status) 
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d01d      	beq.n	80007f2 <Read_Temperature+0x66>
	{
		Temp_Sensor_Write(0xBE);  // read Scratch-pad
 80007b6:	20be      	movs	r0, #190	@ 0xbe
 80007b8:	f7ff ff7c 	bl	80006b4 <Temp_Sensor_Write>
		Temp_LSB = Temp_Sensor_ReadByte();
 80007bc:	f7ff ffaa 	bl	8000714 <Temp_Sensor_ReadByte>
 80007c0:	4603      	mov	r3, r0
 80007c2:	71fb      	strb	r3, [r7, #7]
	    Temp_MSB = Temp_Sensor_ReadByte();
 80007c4:	f7ff ffa6 	bl	8000714 <Temp_Sensor_ReadByte>
 80007c8:	4603      	mov	r3, r0
 80007ca:	71bb      	strb	r3, [r7, #6]
		Temp_Sensor_Init();
 80007cc:	f7ff ff36 	bl	800063c <Temp_Sensor_Init>
		Temp_Sensor_Write(0xCC);  // skip ROM
 80007d0:	20cc      	movs	r0, #204	@ 0xcc
 80007d2:	f7ff ff6f 	bl	80006b4 <Temp_Sensor_Write>
		Temp_Sensor_Write(0x44);  // convert t
 80007d6:	2044      	movs	r0, #68	@ 0x44
 80007d8:	f7ff ff6c 	bl	80006b4 <Temp_Sensor_Write>
		Temp = ((Temp_MSB << 8)) | Temp_LSB;
 80007dc:	79bb      	ldrb	r3, [r7, #6]
 80007de:	b21b      	sxth	r3, r3
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	b21a      	sxth	r2, r3
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	80bb      	strh	r3, [r7, #4]
		return Temp;
 80007ee:	88bb      	ldrh	r3, [r7, #4]
 80007f0:	e000      	b.n	80007f4 <Read_Temperature+0x68>
	}
	
	return 0; 
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <INA3221_Init>:
#include "INA3221.h"
#include "INA3221_reg.h"
#include "peripherals.h"

void INA3221_Init()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 8000806:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f87a 	bl	8000904 <INA3221_write_reg>

	HAL_Delay(100);
 8000810:	2064      	movs	r0, #100	@ 0x64
 8000812:	f008 fe97 	bl	8009544 <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 8000816:	1dbb      	adds	r3, r7, #6
 8000818:	4619      	mov	r1, r3
 800081a:	20fe      	movs	r0, #254	@ 0xfe
 800081c:	f000 f83c 	bl	8000898 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	f245 4249 	movw	r2, #21577	@ 0x5449
 8000826:	4293      	cmp	r3, r2
 8000828:	d001      	beq.n	800082e <INA3221_Init+0x32>
		while(1);
 800082a:	bf00      	nop
 800082c:	e7fd      	b.n	800082a <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 800082e:	f647 5127 	movw	r1, #32039	@ 0x7d27
 8000832:	2000      	movs	r0, #0
 8000834:	f000 f866 	bl	8000904 <INA3221_write_reg>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4619      	mov	r1, r3
 800084c:	2002      	movs	r0, #2
 800084e:	f000 f823 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3302      	adds	r3, #2
 8000856:	4619      	mov	r1, r3
 8000858:	2004      	movs	r0, #4
 800085a:	f000 f81d 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3304      	adds	r3, #4
 8000862:	4619      	mov	r1, r3
 8000864:	2006      	movs	r0, #6
 8000866:	f000 f817 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3306      	adds	r3, #6
 800086e:	4619      	mov	r1, r3
 8000870:	2001      	movs	r0, #1
 8000872:	f000 f811 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3308      	adds	r3, #8
 800087a:	4619      	mov	r1, r3
 800087c:	2003      	movs	r0, #3
 800087e:	f000 f80b 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	330a      	adds	r3, #10
 8000886:	4619      	mov	r1, r3
 8000888:	2005      	movs	r0, #5
 800088a:	f000 f805 	bl	8000898 <INA3221_read_reg>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af02      	add	r7, sp, #8
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 80008aa:	2300      	movs	r3, #0
 80008ac:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 80008ae:	1dfa      	adds	r2, r7, #7
 80008b0:	2364      	movs	r3, #100	@ 0x64
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2301      	movs	r3, #1
 80008b6:	2180      	movs	r1, #128	@ 0x80
 80008b8:	4811      	ldr	r0, [pc, #68]	@ (8000900 <INA3221_read_reg+0x68>)
 80008ba:	f00b f8b3 	bl	800ba24 <HAL_I2C_Master_Transmit>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d118      	bne.n	80008f6 <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 80008c4:	f107 0208 	add.w	r2, r7, #8
 80008c8:	2364      	movs	r3, #100	@ 0x64
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2302      	movs	r3, #2
 80008ce:	2180      	movs	r1, #128	@ 0x80
 80008d0:	480b      	ldr	r0, [pc, #44]	@ (8000900 <INA3221_read_reg+0x68>)
 80008d2:	f00b f9bf 	bl	800bc54 <HAL_I2C_Master_Receive>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10c      	bne.n	80008f6 <INA3221_read_reg+0x5e>
		{
			result = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80008e0:	7a3b      	ldrb	r3, [r7, #8]
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7a7b      	ldrb	r3, [r7, #9]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200002c8 	.word	0x200002c8

08000904 <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af02      	add	r7, sp, #8
 800090a:	4603      	mov	r3, r0
 800090c:	460a      	mov	r2, r1
 800090e:	71fb      	strb	r3, [r7, #7]
 8000910:	4613      	mov	r3, r2
 8000912:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 8000914:	f04f 33ff 	mov.w	r3, #4294967295
 8000918:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 800091e:	88bb      	ldrh	r3, [r7, #4]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	b29b      	uxth	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 800092e:	f107 0208 	add.w	r2, r7, #8
 8000932:	2364      	movs	r3, #100	@ 0x64
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2303      	movs	r3, #3
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	4806      	ldr	r0, [pc, #24]	@ (8000954 <INA3221_write_reg+0x50>)
 800093c:	f00b f872 	bl	800ba24 <HAL_I2C_Master_Transmit>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d101      	bne.n	800094a <INA3221_write_reg+0x46>
    {
        result = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200002c8 	.word	0x200002c8

08000958 <RTC_Init>:
#include "RTC.h"


/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
	for (int retry = 0; retry < 3; retry++)
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	e00b      	b.n	800097c <RTC_Init+0x24>
	{
		if (Get_DateTime_From_Network())
 8000964:	f000 f814 	bl	8000990 <Get_DateTime_From_Network>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d10c      	bne.n	8000988 <RTC_Init+0x30>
		{
			return;
		}
		HAL_Delay(1000);
 800096e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000972:	f008 fde7 	bl	8009544 <HAL_Delay>
	for (int retry = 0; retry < 3; retry++)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3301      	adds	r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b02      	cmp	r3, #2
 8000980:	ddf0      	ble.n	8000964 <RTC_Init+0xc>
	}
	Set_Default_DateTime();
 8000982:	f000 f8f1 	bl	8000b68 <Set_Default_DateTime>
 8000986:	e000      	b.n	800098a <RTC_Init+0x32>
			return;
 8000988:	bf00      	nop
}
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <Get_DateTime_From_Network>:

/*-----SINCRONIZZAZIONE RTC DA RETE-----*/
int Get_DateTime_From_Network(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b0a2      	sub	sp, #136	@ 0x88
 8000994:	af00      	add	r7, sp, #0
	char response[100] = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2264      	movs	r2, #100	@ 0x64
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f012 fbc4 	bl	801312c <memset>
	RTC_DateTypeDef sDate = {0};
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 80009b6:	4869      	ldr	r0, [pc, #420]	@ (8000b5c <Get_DateTime_From_Network+0x1cc>)
 80009b8:	f000 fbba 	bl	8001130 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fbe1 	bl	8001188 <SIM_Receive_Response>

    char* cclk_pos = strstr(response, "+CCLK: \"");
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4965      	ldr	r1, [pc, #404]	@ (8000b60 <Get_DateTime_From_Network+0x1d0>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f012 fbe7 	bl	80131a0 <strstr>
 80009d2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (cclk_pos == NULL)
 80009d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <Get_DateTime_From_Network+0x52>
	{
        return 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	e0b8      	b.n	8000b54 <Get_DateTime_From_Network+0x1c4>
    }

    char* time_start = cclk_pos + 8;
 80009e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80009e6:	3308      	adds	r3, #8
 80009e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (strlen(time_start) < 17)
 80009ec:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80009f0:	f7ff fbf8 	bl	80001e4 <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b10      	cmp	r3, #16
 80009f8:	d801      	bhi.n	80009fe <Get_DateTime_From_Network+0x6e>
	{
		return 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e0aa      	b.n	8000b54 <Get_DateTime_From_Network+0x1c4>
	}

	sDate.Year = (time_start[0] - '0') * 10 + (time_start[1] - '0');
 80009fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	3b30      	subs	r3, #48	@ 0x30
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a16:	3301      	adds	r3, #1
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	3b30      	subs	r3, #48	@ 0x30
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (time_start[3] - '0') * 10 + (time_start[4] - '0');
 8000a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a28:	3303      	adds	r3, #3
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	3b30      	subs	r3, #48	@ 0x30
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a3e:	3304      	adds	r3, #4
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	3b30      	subs	r3, #48	@ 0x30
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	767b      	strb	r3, [r7, #25]
	sDate.Date = (time_start[6] - '0') * 10 + (time_start[7] - '0');
 8000a4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a50:	3306      	adds	r3, #6
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	3b30      	subs	r3, #48	@ 0x30
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	461a      	mov	r2, r3
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a66:	3307      	adds	r3, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	3b30      	subs	r3, #48	@ 0x30
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (time_start[9] - '0') * 10 + (time_start[10] - '0');
 8000a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a78:	3309      	adds	r3, #9
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3b30      	subs	r3, #48	@ 0x30
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a8e:	330a      	adds	r3, #10
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	3b30      	subs	r3, #48	@ 0x30
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (time_start[12] - '0') * 10 + (time_start[13] - '0');
 8000a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000aa0:	330c      	adds	r3, #12
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	3b30      	subs	r3, #48	@ 0x30
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ab6:	330d      	adds	r3, #13
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	3b30      	subs	r3, #48	@ 0x30
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (time_start[15] - '0') * 10 + (time_start[16] - '0');
 8000ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ac8:	330f      	adds	r3, #15
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	3b30      	subs	r3, #48	@ 0x30
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ade:	3310      	adds	r3, #16
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	3b30      	subs	r3, #48	@ 0x30
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	71bb      	strb	r3, [r7, #6]

	if (sDate.Month < 1 || sDate.Month > 12 ||
 8000aec:	7e7b      	ldrb	r3, [r7, #25]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d011      	beq.n	8000b16 <Get_DateTime_From_Network+0x186>
 8000af2:	7e7b      	ldrb	r3, [r7, #25]
 8000af4:	2b0c      	cmp	r3, #12
 8000af6:	d80e      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 8000af8:	7ebb      	ldrb	r3, [r7, #26]
	if (sDate.Month < 1 || sDate.Month > 12 ||
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00b      	beq.n	8000b16 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 8000afe:	7ebb      	ldrb	r3, [r7, #26]
 8000b00:	2b1f      	cmp	r3, #31
 8000b02:	d808      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 8000b04:	793b      	ldrb	r3, [r7, #4]
        sDate.Date < 1 || sDate.Date > 31 ||
 8000b06:	2b17      	cmp	r3, #23
 8000b08:	d805      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 8000b0a:	797b      	ldrb	r3, [r7, #5]
 8000b0c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000b0e:	d802      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	2b3b      	cmp	r3, #59	@ 0x3b
 8000b14:	d901      	bls.n	8000b1a <Get_DateTime_From_Network+0x18a>
        return 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e01c      	b.n	8000b54 <Get_DateTime_From_Network+0x1c4>
    }

	sDate.WeekDay = Calculate_Weekday(sDate.Year + 2000, sDate.Month, sDate.Date);
 8000b1a:	7efb      	ldrb	r3, [r7, #27]
 8000b1c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	7e79      	ldrb	r1, [r7, #25]
 8000b24:	7eba      	ldrb	r2, [r7, #26]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f850 	bl	8000bcc <Calculate_Weekday>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	763b      	strb	r3, [r7, #24]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4808      	ldr	r0, [pc, #32]	@ (8000b64 <Get_DateTime_From_Network+0x1d4>)
 8000b42:	f00d fdbe 	bl	800e6c2 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <Get_DateTime_From_Network+0x1d4>)
 8000b4e:	f00d fcbf 	bl	800e4d0 <HAL_RTC_SetTime>
	return 1;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3788      	adds	r7, #136	@ 0x88
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	080142e4 	.word	0x080142e4
 8000b60:	080142f0 	.word	0x080142f0
 8000b64:	20000360 	.word	0x20000360

08000b68 <Set_Default_DateTime>:

/*-----DATA E ORA DI DEFAULT 1/1/2020 00:00:00-----*/
void Set_Default_DateTime(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
    RTC_TimeTypeDef sTime = {0};
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

    // Default: 01/01/2020 00:00:00
    sDate.Year = 20;  // 2020
 8000b80:	2314      	movs	r3, #20
 8000b82:	75fb      	strb	r3, [r7, #23]
    sDate.Month = RTC_MONTH_JANUARY;
 8000b84:	2301      	movs	r3, #1
 8000b86:	757b      	strb	r3, [r7, #21]
    sDate.Date = 1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	75bb      	strb	r3, [r7, #22]
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // 1 Jan 2020 era mercoledì
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	753b      	strb	r3, [r7, #20]

    sTime.Hours = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	70bb      	strb	r3, [r7, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4619      	mov	r1, r3
 8000bac:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <Set_Default_DateTime+0x60>)
 8000bae:	f00d fd88 	bl	800e6c2 <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <Set_Default_DateTime+0x60>)
 8000bba:	f00d fc89 	bl	800e4d0 <HAL_RTC_SetTime>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000360 	.word	0x20000360

08000bcc <Calculate_Weekday>:

/*-----CALCOLO GIORNO SETTIMANA-----*/
uint8_t Calculate_Weekday(uint16_t year, uint8_t month, uint8_t day)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	717b      	strb	r3, [r7, #5]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	713b      	strb	r3, [r7, #4]
    // Algoritmo di Zeller per calcolo giorno settimana
    if (month < 3) {
 8000bde:	797b      	ldrb	r3, [r7, #5]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d805      	bhi.n	8000bf0 <Calculate_Weekday+0x24>
        month += 12;
 8000be4:	797b      	ldrb	r3, [r7, #5]
 8000be6:	330c      	adds	r3, #12
 8000be8:	717b      	strb	r3, [r7, #5]
        year--;
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	80fb      	strh	r3, [r7, #6]
    }
    uint8_t zeller_day = (day + ((13 * (month + 1)) / 5) + year + (year / 4) - (year / 100) + (year / 400)) % 7;
 8000bf0:	7939      	ldrb	r1, [r7, #4]
 8000bf2:	797b      	ldrb	r3, [r7, #5]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a1e      	ldr	r2, [pc, #120]	@ (8000c7c <Calculate_Weekday+0xb0>)
 8000c02:	fb82 0203 	smull	r0, r2, r2, r3
 8000c06:	1052      	asrs	r2, r2, #1
 8000c08:	17db      	asrs	r3, r3, #31
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	18ca      	adds	r2, r1, r3
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	4413      	add	r3, r2
 8000c12:	88fa      	ldrh	r2, [r7, #6]
 8000c14:	0892      	lsrs	r2, r2, #2
 8000c16:	b292      	uxth	r2, r2
 8000c18:	4413      	add	r3, r2
 8000c1a:	88fa      	ldrh	r2, [r7, #6]
 8000c1c:	4918      	ldr	r1, [pc, #96]	@ (8000c80 <Calculate_Weekday+0xb4>)
 8000c1e:	fba1 1202 	umull	r1, r2, r1, r2
 8000c22:	0952      	lsrs	r2, r2, #5
 8000c24:	b292      	uxth	r2, r2
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	88fa      	ldrh	r2, [r7, #6]
 8000c2a:	4915      	ldr	r1, [pc, #84]	@ (8000c80 <Calculate_Weekday+0xb4>)
 8000c2c:	fba1 1202 	umull	r1, r2, r1, r2
 8000c30:	09d2      	lsrs	r2, r2, #7
 8000c32:	b292      	uxth	r2, r2
 8000c34:	441a      	add	r2, r3
 8000c36:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <Calculate_Weekday+0xb8>)
 8000c38:	fb83 1302 	smull	r1, r3, r3, r2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	1099      	asrs	r1, r3, #2
 8000c40:	17d3      	asrs	r3, r2, #31
 8000c42:	1ac9      	subs	r1, r1, r3
 8000c44:	460b      	mov	r3, r1
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	1ad1      	subs	r1, r2, r3
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	73fb      	strb	r3, [r7, #15]

    uint8_t hal_weekday_map[] = {RTC_WEEKDAY_SATURDAY, RTC_WEEKDAY_SUNDAY, RTC_WEEKDAY_MONDAY,
 8000c50:	4a0d      	ldr	r2, [pc, #52]	@ (8000c88 <Calculate_Weekday+0xbc>)
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c5a:	6018      	str	r0, [r3, #0]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	8019      	strh	r1, [r3, #0]
 8000c60:	3302      	adds	r3, #2
 8000c62:	0c0a      	lsrs	r2, r1, #16
 8000c64:	701a      	strb	r2, [r3, #0]
                                 RTC_WEEKDAY_TUESDAY, RTC_WEEKDAY_WEDNESDAY, RTC_WEEKDAY_THURSDAY, RTC_WEEKDAY_FRIDAY};

    return hal_weekday_map[zeller_day];
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	3310      	adds	r3, #16
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	66666667 	.word	0x66666667
 8000c80:	51eb851f 	.word	0x51eb851f
 8000c84:	92492493 	.word	0x92492493
 8000c88:	080142fc 	.word	0x080142fc

08000c8c <SIM_Init>:
#include "DS18B20.h"
#include "process.h"

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
void SIM_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000c92:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "a");
 8000c94:	49bd      	ldr	r1, [pc, #756]	@ (8000f8c <SIM_Init+0x300>)
 8000c96:	48be      	ldr	r0, [pc, #760]	@ (8000f90 <SIM_Init+0x304>)
 8000c98:	f012 f9e8 	bl	801306c <siprintf>
	sprintf(sys.MQTT.clientID, "a");
 8000c9c:	49bb      	ldr	r1, [pc, #748]	@ (8000f8c <SIM_Init+0x300>)
 8000c9e:	48bd      	ldr	r0, [pc, #756]	@ (8000f94 <SIM_Init+0x308>)
 8000ca0:	f012 f9e4 	bl	801306c <siprintf>
	sprintf(sys.MQTT.server_name, "a");
 8000ca4:	49b9      	ldr	r1, [pc, #740]	@ (8000f8c <SIM_Init+0x300>)
 8000ca6:	48bc      	ldr	r0, [pc, #752]	@ (8000f98 <SIM_Init+0x30c>)
 8000ca8:	f012 f9e0 	bl	801306c <siprintf>
	sprintf(sys.MQTT.port, "a");
 8000cac:	49b7      	ldr	r1, [pc, #732]	@ (8000f8c <SIM_Init+0x300>)
 8000cae:	48bb      	ldr	r0, [pc, #748]	@ (8000f9c <SIM_Init+0x310>)
 8000cb0:	f012 f9dc 	bl	801306c <siprintf>
	sprintf(sys.MQTT.username, "a");
 8000cb4:	49b5      	ldr	r1, [pc, #724]	@ (8000f8c <SIM_Init+0x300>)
 8000cb6:	48ba      	ldr	r0, [pc, #744]	@ (8000fa0 <SIM_Init+0x314>)
 8000cb8:	f012 f9d8 	bl	801306c <siprintf>
	sprintf(sys.MQTT.password, "a");
 8000cbc:	49b3      	ldr	r1, [pc, #716]	@ (8000f8c <SIM_Init+0x300>)
 8000cbe:	48b9      	ldr	r0, [pc, #740]	@ (8000fa4 <SIM_Init+0x318>)
 8000cc0:	f012 f9d4 	bl	801306c <siprintf>
	sprintf(sys.TCP.IP_address, "a");
 8000cc4:	49b1      	ldr	r1, [pc, #708]	@ (8000f8c <SIM_Init+0x300>)
 8000cc6:	48b8      	ldr	r0, [pc, #736]	@ (8000fa8 <SIM_Init+0x31c>)
 8000cc8:	f012 f9d0 	bl	801306c <siprintf>
	sprintf(sys.TCP.Port, "a");
 8000ccc:	49af      	ldr	r1, [pc, #700]	@ (8000f8c <SIM_Init+0x300>)
 8000cce:	48b7      	ldr	r0, [pc, #732]	@ (8000fac <SIM_Init+0x320>)
 8000cd0:	f012 f9cc 	bl	801306c <siprintf>
	strcpy(sys.MQTT.Data_Topic, config.data_topic);
 8000cd4:	49b6      	ldr	r1, [pc, #728]	@ (8000fb0 <SIM_Init+0x324>)
 8000cd6:	48b7      	ldr	r0, [pc, #732]	@ (8000fb4 <SIM_Init+0x328>)
 8000cd8:	f012 faa4 	bl	8013224 <strcpy>
	strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8000cdc:	49b6      	ldr	r1, [pc, #728]	@ (8000fb8 <SIM_Init+0x32c>)
 8000cde:	48b7      	ldr	r0, [pc, #732]	@ (8000fbc <SIM_Init+0x330>)
 8000ce0:	f012 faa0 	bl	8013224 <strcpy>
	strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8000ce4:	49b6      	ldr	r1, [pc, #728]	@ (8000fc0 <SIM_Init+0x334>)
 8000ce6:	48b7      	ldr	r0, [pc, #732]	@ (8000fc4 <SIM_Init+0x338>)
 8000ce8:	f012 fa9c 	bl	8013224 <strcpy>
	strcpy(sys.MQTT.Info_Topic, config.info_topic);
 8000cec:	49b6      	ldr	r1, [pc, #728]	@ (8000fc8 <SIM_Init+0x33c>)
 8000cee:	48b7      	ldr	r0, [pc, #732]	@ (8000fcc <SIM_Init+0x340>)
 8000cf0:	f012 fa98 	bl	8013224 <strcpy>

	SIM_Power_On();
 8000cf4:	f000 fa06 	bl	8001104 <SIM_Power_On>
	HAL_Delay(5000);
 8000cf8:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000cfc:	f008 fc22 	bl	8009544 <HAL_Delay>

	SIM_Send_Command("AT\r");                                                                     //Verifica comunicazione
 8000d00:	48b3      	ldr	r0, [pc, #716]	@ (8000fd0 <SIM_Init+0x344>)
 8000d02:	f000 fa15 	bl	8001130 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fa3c 	bl	8001188 <SIM_Receive_Response>
	if(strstr(response, "OK") == NULL)
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	49af      	ldr	r1, [pc, #700]	@ (8000fd4 <SIM_Init+0x348>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f012 fa42 	bl	80131a0 <strstr>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <SIM_Init+0x9a>
	{
		while(1);
 8000d22:	bf00      	nop
 8000d24:	e7fd      	b.n	8000d22 <SIM_Init+0x96>
	}

	SIM_Send_Command("AT+IPR=921600\r");                                                          //Baudrate a 921600
 8000d26:	48ac      	ldr	r0, [pc, #688]	@ (8000fd8 <SIM_Init+0x34c>)
 8000d28:	f000 fa02 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000d2c:	48a9      	ldr	r0, [pc, #676]	@ (8000fd4 <SIM_Init+0x348>)
 8000d2e:	f000 fd2f 	bl	8001790 <SIM_Wait_Response>

	huart1.Init.BaudRate = 921600;
 8000d32:	4baa      	ldr	r3, [pc, #680]	@ (8000fdc <SIM_Init+0x350>)
 8000d34:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000d38:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(LTE_UART);
 8000d3a:	48a8      	ldr	r0, [pc, #672]	@ (8000fdc <SIM_Init+0x350>)
 8000d3c:	f010 fe3c 	bl	80119b8 <HAL_UART_Init>

	SIM_Send_Command("AT+CFUN=1\r");                                                              //Full functionality
 8000d40:	48a7      	ldr	r0, [pc, #668]	@ (8000fe0 <SIM_Init+0x354>)
 8000d42:	f000 f9f5 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000d46:	48a3      	ldr	r0, [pc, #652]	@ (8000fd4 <SIM_Init+0x348>)
 8000d48:	f000 fd22 	bl	8001790 <SIM_Wait_Response>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //Modalità solo LTE o NB-IoT
 8000d4c:	48a5      	ldr	r0, [pc, #660]	@ (8000fe4 <SIM_Init+0x358>)
 8000d4e:	f000 f9ef 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000d52:	48a0      	ldr	r0, [pc, #640]	@ (8000fd4 <SIM_Init+0x348>)
 8000d54:	f000 fd1c 	bl	8001790 <SIM_Wait_Response>

	SIM_Send_Command("AT+CMNB=2\r");                                                              //NB-IoT
 8000d58:	48a3      	ldr	r0, [pc, #652]	@ (8000fe8 <SIM_Init+0x35c>)
 8000d5a:	f000 f9e9 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000d5e:	489d      	ldr	r0, [pc, #628]	@ (8000fd4 <SIM_Init+0x348>)
 8000d60:	f000 fd16 	bl	8001790 <SIM_Wait_Response>

	SIM_Send_Command("AT+NBSC=1\r");                                                              //Abilitazione scrambling feature DA VEDERE SE L'OPERATORE LA RICHIEDE
 8000d64:	48a1      	ldr	r0, [pc, #644]	@ (8000fec <SIM_Init+0x360>)
 8000d66:	f000 f9e3 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000d6a:	489a      	ldr	r0, [pc, #616]	@ (8000fd4 <SIM_Init+0x348>)
 8000d6c:	f000 fd10 	bl	8001790 <SIM_Wait_Response>

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 8000d70:	489f      	ldr	r0, [pc, #636]	@ (8000ff0 <SIM_Init+0x364>)
 8000d72:	f000 f9dd 	bl	8001130 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fa04 	bl	8001188 <SIM_Receive_Response>
	int stat = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
	int n, stat_value;
	if(strstr(response, "+CEREG: ") != NULL)
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	499a      	ldr	r1, [pc, #616]	@ (8000ff4 <SIM_Init+0x368>)
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f012 fa07 	bl	80131a0 <strstr>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d03a      	beq.n	8000e0e <SIM_Init+0x182>
	{
		while(stat != 1)
 8000d98:	e035      	b.n	8000e06 <SIM_Init+0x17a>
		{
			if(sscanf(response, "+CEREG: %d,%d", &n, &stat_value) >= 2) 
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	f107 0208 	add.w	r2, r7, #8
 8000da0:	f107 000c 	add.w	r0, r7, #12
 8000da4:	4994      	ldr	r1, [pc, #592]	@ (8000ff8 <SIM_Init+0x36c>)
 8000da6:	f012 f983 	bl	80130b0 <siscanf>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	dd1e      	ble.n	8000dee <SIM_Init+0x162>
			{
				if(stat_value == 1 || stat_value == 5)
 8000db0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000db4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d006      	beq.n	8000dcc <SIM_Init+0x140>
 8000dbe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000dc2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b05      	cmp	r3, #5
 8000dca:	d103      	bne.n	8000dd4 <SIM_Init+0x148>
			    {
					 stat = 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000dd2:	e018      	b.n	8000e06 <SIM_Init+0x17a>
				}
				 else
				{
					SIM_Send_Command("AT+CEREG?\r");
 8000dd4:	4886      	ldr	r0, [pc, #536]	@ (8000ff0 <SIM_Init+0x364>)
 8000dd6:	f000 f9ab 	bl	8001130 <SIM_Send_Command>
					SIM_Receive_Response(response);
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f9d2 	bl	8001188 <SIM_Receive_Response>
					HAL_Delay(1000);
 8000de4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000de8:	f008 fbac 	bl	8009544 <HAL_Delay>
 8000dec:	e00b      	b.n	8000e06 <SIM_Init+0x17a>
				}
			}
			else  
			{
				SIM_Send_Command("AT+CEREG?\r");
 8000dee:	4880      	ldr	r0, [pc, #512]	@ (8000ff0 <SIM_Init+0x364>)
 8000df0:	f000 f99e 	bl	8001130 <SIM_Send_Command>
				SIM_Receive_Response(response);
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 f9c5 	bl	8001188 <SIM_Receive_Response>
				HAL_Delay(1000);
 8000dfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e02:	f008 fb9f 	bl	8009544 <HAL_Delay>
		while(stat != 1)
 8000e06:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d1c5      	bne.n	8000d9a <SIM_Init+0x10e>
			}
		}

	}

	sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                    //Configurazione APN
 8000e0e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e12:	4a5f      	ldr	r2, [pc, #380]	@ (8000f90 <SIM_Init+0x304>)
 8000e14:	4979      	ldr	r1, [pc, #484]	@ (8000ffc <SIM_Init+0x370>)
 8000e16:	4618      	mov	r0, r3
 8000e18:	f012 f928 	bl	801306c <siprintf>
	SIM_Send_Command(command);
 8000e1c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f985 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000e26:	486b      	ldr	r0, [pc, #428]	@ (8000fd4 <SIM_Init+0x348>)
 8000e28:	f000 fcb2 	bl	8001790 <SIM_Wait_Response>

	SIM_Send_Command("AT+CNACT=1\r");                                                             //Attivazione della rete
 8000e2c:	4874      	ldr	r0, [pc, #464]	@ (8001000 <SIM_Init+0x374>)
 8000e2e:	f000 f97f 	bl	8001130 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f9a6 	bl	8001188 <SIM_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	4970      	ldr	r1, [pc, #448]	@ (8001004 <SIM_Init+0x378>)
 8000e42:	4618      	mov	r0, r3
 8000e44:	f012 f9ac 	bl	80131a0 <strstr>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d115      	bne.n	8000e7a <SIM_Init+0x1ee>
	{
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000e4e:	e00b      	b.n	8000e68 <SIM_Init+0x1dc>
		{
			SIM_Send_Command("AT+CNACT=1\r");
 8000e50:	486b      	ldr	r0, [pc, #428]	@ (8001000 <SIM_Init+0x374>)
 8000e52:	f000 f96d 	bl	8001130 <SIM_Send_Command>
			SIM_Receive_Response(response);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f994 	bl	8001188 <SIM_Receive_Response>
			HAL_Delay(1000);
 8000e60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e64:	f008 fb6e 	bl	8009544 <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4965      	ldr	r1, [pc, #404]	@ (8001004 <SIM_Init+0x378>)
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f012 f996 	bl	80131a0 <strstr>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0ea      	beq.n	8000e50 <SIM_Init+0x1c4>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 8000e7a:	4863      	ldr	r0, [pc, #396]	@ (8001008 <SIM_Init+0x37c>)
 8000e7c:	f000 f958 	bl	8001130 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f97f 	bl	8001188 <SIM_Receive_Response>
	while(!SIM_Check_IP(response))
 8000e8a:	e00b      	b.n	8000ea4 <SIM_Init+0x218>
	{
		SIM_Send_Command("AT+CNACT?\r");
 8000e8c:	485e      	ldr	r0, [pc, #376]	@ (8001008 <SIM_Init+0x37c>)
 8000e8e:	f000 f94f 	bl	8001130 <SIM_Send_Command>
		SIM_Receive_Response(response);
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f976 	bl	8001188 <SIM_Receive_Response>
		HAL_Delay(1000);
 8000e9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ea0:	f008 fb50 	bl	8009544 <HAL_Delay>
	while(!SIM_Check_IP(response))
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f985 	bl	80011b8 <SIM_Check_IP>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0eb      	beq.n	8000e8c <SIM_Init+0x200>
	}

	sprintf(command, "AT+SMCONF=\"URL\",\"%s\",%s\r", sys.MQTT.server_name, sys.MQTT.port);       //Configurazione MQTT
 8000eb4:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8000eb8:	4b38      	ldr	r3, [pc, #224]	@ (8000f9c <SIM_Init+0x310>)
 8000eba:	4a37      	ldr	r2, [pc, #220]	@ (8000f98 <SIM_Init+0x30c>)
 8000ebc:	4953      	ldr	r1, [pc, #332]	@ (800100c <SIM_Init+0x380>)
 8000ebe:	f012 f8d5 	bl	801306c <siprintf>
	SIM_Send_Command(command);
 8000ec2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f932 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000ecc:	4841      	ldr	r0, [pc, #260]	@ (8000fd4 <SIM_Init+0x348>)
 8000ece:	f000 fc5f 	bl	8001790 <SIM_Wait_Response>

	sprintf(command, "AT+SMCONF=\"CLIENTID\",\"%s\"\r", sys.MQTT.clientID);
 8000ed2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8000f94 <SIM_Init+0x308>)
 8000ed8:	494d      	ldr	r1, [pc, #308]	@ (8001010 <SIM_Init+0x384>)
 8000eda:	4618      	mov	r0, r3
 8000edc:	f012 f8c6 	bl	801306c <siprintf>
	SIM_Send_Command(command);
 8000ee0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f923 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000eea:	483a      	ldr	r0, [pc, #232]	@ (8000fd4 <SIM_Init+0x348>)
 8000eec:	f000 fc50 	bl	8001790 <SIM_Wait_Response>

	SIM_Send_Command("AT+SMCONF=\"KEEPTIME\",60\r");
 8000ef0:	4848      	ldr	r0, [pc, #288]	@ (8001014 <SIM_Init+0x388>)
 8000ef2:	f000 f91d 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000ef6:	4837      	ldr	r0, [pc, #220]	@ (8000fd4 <SIM_Init+0x348>)
 8000ef8:	f000 fc4a 	bl	8001790 <SIM_Wait_Response>

	sprintf(command, "AT+SMCONF=\"USERNAME\",\"%s\"\r", sys.MQTT.username);
 8000efc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f00:	4a27      	ldr	r2, [pc, #156]	@ (8000fa0 <SIM_Init+0x314>)
 8000f02:	4945      	ldr	r1, [pc, #276]	@ (8001018 <SIM_Init+0x38c>)
 8000f04:	4618      	mov	r0, r3
 8000f06:	f012 f8b1 	bl	801306c <siprintf>
	SIM_Send_Command(command);
 8000f0a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f90e 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f14:	482f      	ldr	r0, [pc, #188]	@ (8000fd4 <SIM_Init+0x348>)
 8000f16:	f000 fc3b 	bl	8001790 <SIM_Wait_Response>

	sprintf(command, "AT+SMCONF=\"PASSWORD\",\"%s\"\r", sys.MQTT.password);
 8000f1a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f1e:	4a21      	ldr	r2, [pc, #132]	@ (8000fa4 <SIM_Init+0x318>)
 8000f20:	493e      	ldr	r1, [pc, #248]	@ (800101c <SIM_Init+0x390>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f012 f8a2 	bl	801306c <siprintf>
	SIM_Send_Command(command);
 8000f28:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f8ff 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f32:	4828      	ldr	r0, [pc, #160]	@ (8000fd4 <SIM_Init+0x348>)
 8000f34:	f000 fc2c 	bl	8001790 <SIM_Wait_Response>

	SIM_Send_Command("AT+SMCONF=\"QOS\",1\r");
 8000f38:	4839      	ldr	r0, [pc, #228]	@ (8001020 <SIM_Init+0x394>)
 8000f3a:	f000 f8f9 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f3e:	4825      	ldr	r0, [pc, #148]	@ (8000fd4 <SIM_Init+0x348>)
 8000f40:	f000 fc26 	bl	8001790 <SIM_Wait_Response>

	SIM_Send_Command("AT+SMCONF=\"RETAIN\",0\r");
 8000f44:	4837      	ldr	r0, [pc, #220]	@ (8001024 <SIM_Init+0x398>)
 8000f46:	f000 f8f3 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f4a:	4822      	ldr	r0, [pc, #136]	@ (8000fd4 <SIM_Init+0x348>)
 8000f4c:	f000 fc20 	bl	8001790 <SIM_Wait_Response>

	sprintf(command, "AT+SMCONF=\"TOPIC\",\"%s\"\r", sys.MQTT.Data_Topic);
 8000f50:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f54:	4a17      	ldr	r2, [pc, #92]	@ (8000fb4 <SIM_Init+0x328>)
 8000f56:	4934      	ldr	r1, [pc, #208]	@ (8001028 <SIM_Init+0x39c>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f012 f887 	bl	801306c <siprintf>
	SIM_Send_Command(command);
 8000f5e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f8e4 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f68:	481a      	ldr	r0, [pc, #104]	@ (8000fd4 <SIM_Init+0x348>)
 8000f6a:	f000 fc11 	bl	8001790 <SIM_Wait_Response>

	SIM_Send_Command("AT+SMCONN\r");                                                              //Connessione al broker MQTT
 8000f6e:	482f      	ldr	r0, [pc, #188]	@ (800102c <SIM_Init+0x3a0>)
 8000f70:	f000 f8de 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8000f74:	4817      	ldr	r0, [pc, #92]	@ (8000fd4 <SIM_Init+0x348>)
 8000f76:	f000 fc0b 	bl	8001790 <SIM_Wait_Response>

	SIM_Send_Command("AT+SMSTATE?\r");                                                            //Verifica connessione al broker MQTT
 8000f7a:	482d      	ldr	r0, [pc, #180]	@ (8001030 <SIM_Init+0x3a4>)
 8000f7c:	f000 f8d8 	bl	8001130 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f8ff 	bl	8001188 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response))
 8000f8a:	e05f      	b.n	800104c <SIM_Init+0x3c0>
 8000f8c:	08014304 	.word	0x08014304
 8000f90:	20001760 	.word	0x20001760
 8000f94:	20001970 	.word	0x20001970
 8000f98:	200017e0 	.word	0x200017e0
 8000f9c:	20001844 	.word	0x20001844
 8000fa0:	200018a8 	.word	0x200018a8
 8000fa4:	2000190c 	.word	0x2000190c
 8000fa8:	20001b64 	.word	0x20001b64
 8000fac:	20001bc8 	.word	0x20001bc8
 8000fb0:	20001c9c 	.word	0x20001c9c
 8000fb4:	200019d4 	.word	0x200019d4
 8000fb8:	20001cdc 	.word	0x20001cdc
 8000fbc:	20001a38 	.word	0x20001a38
 8000fc0:	20001d1c 	.word	0x20001d1c
 8000fc4:	20001a9c 	.word	0x20001a9c
 8000fc8:	20001d5c 	.word	0x20001d5c
 8000fcc:	20001b00 	.word	0x20001b00
 8000fd0:	08014308 	.word	0x08014308
 8000fd4:	0801430c 	.word	0x0801430c
 8000fd8:	08014310 	.word	0x08014310
 8000fdc:	20000604 	.word	0x20000604
 8000fe0:	08014320 	.word	0x08014320
 8000fe4:	0801432c 	.word	0x0801432c
 8000fe8:	08014338 	.word	0x08014338
 8000fec:	08014344 	.word	0x08014344
 8000ff0:	08014350 	.word	0x08014350
 8000ff4:	0801435c 	.word	0x0801435c
 8000ff8:	08014368 	.word	0x08014368
 8000ffc:	08014378 	.word	0x08014378
 8001000:	08014390 	.word	0x08014390
 8001004:	0801439c 	.word	0x0801439c
 8001008:	080143b0 	.word	0x080143b0
 800100c:	080143bc 	.word	0x080143bc
 8001010:	080143d8 	.word	0x080143d8
 8001014:	080143f4 	.word	0x080143f4
 8001018:	08014410 	.word	0x08014410
 800101c:	0801442c 	.word	0x0801442c
 8001020:	08014448 	.word	0x08014448
 8001024:	0801445c 	.word	0x0801445c
 8001028:	08014474 	.word	0x08014474
 800102c:	0801448c 	.word	0x0801448c
 8001030:	08014498 	.word	0x08014498
	{
		SIM_Send_Command("AT+SMSTATE?\r");
 8001034:	482a      	ldr	r0, [pc, #168]	@ (80010e0 <SIM_Init+0x454>)
 8001036:	f000 f87b 	bl	8001130 <SIM_Send_Command>
		SIM_Receive_Response(response);
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f8a2 	bl	8001188 <SIM_Receive_Response>
		HAL_Delay(1000);
 8001044:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001048:	f008 fa7c 	bl	8009544 <HAL_Delay>
	while(!SIM_Check_MQTT_State(response))
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f8db 	bl	800120c <SIM_Check_MQTT_State>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0eb      	beq.n	8001034 <SIM_Init+0x3a8>
	}

	sprintf(command, "AT+SMSUB=\"%s\",1\r", sys.MQTT.Command_Topic);                              //Iscrizione al topic per ricezione comandi dal server
 800105c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001060:	4a20      	ldr	r2, [pc, #128]	@ (80010e4 <SIM_Init+0x458>)
 8001062:	4921      	ldr	r1, [pc, #132]	@ (80010e8 <SIM_Init+0x45c>)
 8001064:	4618      	mov	r0, r3
 8001066:	f012 f801 	bl	801306c <siprintf>
	SIM_Send_Command(command);
 800106a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f85e 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("OK");
 8001074:	481d      	ldr	r0, [pc, #116]	@ (80010ec <SIM_Init+0x460>)
 8001076:	f000 fb8b 	bl	8001790 <SIM_Wait_Response>

	sprintf(command, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);        //Connessione TCP
 800107a:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 800107e:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <SIM_Init+0x464>)
 8001080:	4a1c      	ldr	r2, [pc, #112]	@ (80010f4 <SIM_Init+0x468>)
 8001082:	491d      	ldr	r1, [pc, #116]	@ (80010f8 <SIM_Init+0x46c>)
 8001084:	f011 fff2 	bl	801306c <siprintf>
	SIM_Send_Command(command);
 8001088:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f84f 	bl	8001130 <SIM_Send_Command>
	SIM_Wait_Response("CONNECT OK");
 8001092:	481a      	ldr	r0, [pc, #104]	@ (80010fc <SIM_Init+0x470>)
 8001094:	f000 fb7c 	bl	8001790 <SIM_Wait_Response>

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        //Verifica connessione al server TCP
 8001098:	4819      	ldr	r0, [pc, #100]	@ (8001100 <SIM_Init+0x474>)
 800109a:	f000 f849 	bl	8001130 <SIM_Send_Command>
	SIM_Receive_Response(response);
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f870 	bl	8001188 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response))
 80010a8:	e00b      	b.n	80010c2 <SIM_Init+0x436>
	{
		SIM_Send_Command("AT+CIPSTATUS=0\r");
 80010aa:	4815      	ldr	r0, [pc, #84]	@ (8001100 <SIM_Init+0x474>)
 80010ac:	f000 f840 	bl	8001130 <SIM_Send_Command>
		SIM_Receive_Response(response);
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f867 	bl	8001188 <SIM_Receive_Response>
		HAL_Delay(1000);
 80010ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010be:	f008 fa41 	bl	8009544 <HAL_Delay>
	while(!SIM_Check_TCP_State(response))
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f8c6 	bl	8001258 <SIM_Check_TCP_State>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0eb      	beq.n	80010aa <SIM_Init+0x41e>
	}

}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	08014498 	.word	0x08014498
 80010e4:	20001a38 	.word	0x20001a38
 80010e8:	080144a8 	.word	0x080144a8
 80010ec:	0801430c 	.word	0x0801430c
 80010f0:	20001bc8 	.word	0x20001bc8
 80010f4:	20001b64 	.word	0x20001b64
 80010f8:	080144bc 	.word	0x080144bc
 80010fc:	080144d8 	.word	0x080144d8
 8001100:	080144e4 	.word	0x080144e4

08001104 <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800110e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001112:	f00a fbd3 	bl	800b8bc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001116:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800111a:	f008 fa13 	bl	8009544 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001128:	f00a fbc8 	bl	800b8bc <HAL_GPIO_WritePin>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <SIM_Send_Command>:
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
}

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff f853 	bl	80001e4 <strlen>
 800113e:	4603      	mov	r3, r0
 8001140:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(LTE_UART, (uint8_t*)command, len, 100);
 8001142:	89fa      	ldrh	r2, [r7, #14]
 8001144:	2364      	movs	r3, #100	@ 0x64
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4803      	ldr	r0, [pc, #12]	@ (8001158 <SIM_Send_Command+0x28>)
 800114a:	f010 fcd9 	bl	8011b00 <HAL_UART_Transmit>
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000604 	.word	0x20000604

0800115c <SIM_Send_Command_DMA>:

/*------INVIO COMANDO AL MODULO LTE (DMA)------*/
void SIM_Send_Command_DMA(char* command)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff f83d 	bl	80001e4 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit_DMA(LTE_UART, (uint8_t*)command, len);
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	461a      	mov	r2, r3
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4803      	ldr	r0, [pc, #12]	@ (8001184 <SIM_Send_Command_DMA+0x28>)
 8001176:	f010 fe15 	bl	8011da4 <HAL_UART_Transmit_DMA>
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000604 	.word	0x20000604

08001188 <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
void SIM_Receive_Response(char* response)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af02      	add	r7, sp, #8
 800118e:	6078      	str	r0, [r7, #4]
	uint16_t max_size = 256;
 8001190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001194:	81fb      	strh	r3, [r7, #14]
	uint16_t RxLen = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	81bb      	strh	r3, [r7, #12]

	HAL_UARTEx_ReceiveToIdle(LTE_UART, (uint8_t *)response, max_size, &RxLen, 200);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	89fa      	ldrh	r2, [r7, #14]
 80011a0:	21c8      	movs	r1, #200	@ 0xc8
 80011a2:	9100      	str	r1, [sp, #0]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <SIM_Receive_Response+0x2c>)
 80011a8:	f011 fd7f 	bl	8012caa <HAL_UARTEx_ReceiveToIdle>
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000604 	.word	0x20000604

080011b8 <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 80011c0:	4910      	ldr	r1, [pc, #64]	@ (8001204 <SIM_Check_IP+0x4c>)
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f011 ffec 	bl	80131a0 <strstr>
 80011c8:	6178      	str	r0, [r7, #20]
    if(cnact_pos != NULL) {
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d014      	beq.n	80011fa <SIM_Check_IP+0x42>
        int context_id, status;
        if(sscanf(cnact_pos, "+CNACT: %d,%d", &context_id, &status) >= 2) {
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	f107 0210 	add.w	r2, r7, #16
 80011d8:	490b      	ldr	r1, [pc, #44]	@ (8001208 <SIM_Check_IP+0x50>)
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f011 ff68 	bl	80130b0 <siscanf>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	dd09      	ble.n	80011fa <SIM_Check_IP+0x42>
            return (context_id == 1 && status == 1) ? 1 : 0;
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d104      	bne.n	80011f6 <SIM_Check_IP+0x3e>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d101      	bne.n	80011f6 <SIM_Check_IP+0x3e>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e002      	b.n	80011fc <SIM_Check_IP+0x44>
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <SIM_Check_IP+0x44>
        }
    }
    return 0;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	080144f4 	.word	0x080144f4
 8001208:	080144fc 	.word	0x080144fc

0800120c <SIM_Check_MQTT_State>:

/*------CONTROLLO STATO CONNESSIONE MQTT------*/
int SIM_Check_MQTT_State(const char* response)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    char* smstate_pos = strstr(response, "+SMSTATE:");
 8001214:	490e      	ldr	r1, [pc, #56]	@ (8001250 <SIM_Check_MQTT_State+0x44>)
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f011 ffc2 	bl	80131a0 <strstr>
 800121c:	60f8      	str	r0, [r7, #12]
    if(smstate_pos != NULL) {
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d010      	beq.n	8001246 <SIM_Check_MQTT_State+0x3a>
        int mqtt_state;
        if(sscanf(smstate_pos, "+SMSTATE: %d", &mqtt_state) >= 1) {
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	461a      	mov	r2, r3
 800122a:	490a      	ldr	r1, [pc, #40]	@ (8001254 <SIM_Check_MQTT_State+0x48>)
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f011 ff3f 	bl	80130b0 <siscanf>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	dd06      	ble.n	8001246 <SIM_Check_MQTT_State+0x3a>
            return (mqtt_state == 1) ? 1 : 0;
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	2b01      	cmp	r3, #1
 800123c:	bf0c      	ite	eq
 800123e:	2301      	moveq	r3, #1
 8001240:	2300      	movne	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	e000      	b.n	8001248 <SIM_Check_MQTT_State+0x3c>
        }
    }
    return 0;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	0801450c 	.word	0x0801450c
 8001254:	08014518 	.word	0x08014518

08001258 <SIM_Check_TCP_State>:

/*------CONTROLLO STATO CONNESSIONE TCP------*/
int SIM_Check_TCP_State(const char* response)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    char* cipstatus_pos = strstr(response, "+CIPSTATUS: 0");
 8001260:	490a      	ldr	r1, [pc, #40]	@ (800128c <SIM_Check_TCP_State+0x34>)
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f011 ff9c 	bl	80131a0 <strstr>
 8001268:	60f8      	str	r0, [r7, #12]
    if(cipstatus_pos != NULL) {
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d008      	beq.n	8001282 <SIM_Check_TCP_State+0x2a>
        // Cerca "CONNECTED" nella stessa riga
        if(strstr(cipstatus_pos, "CONNECTED") != NULL) {
 8001270:	4907      	ldr	r1, [pc, #28]	@ (8001290 <SIM_Check_TCP_State+0x38>)
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f011 ff94 	bl	80131a0 <strstr>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SIM_Check_TCP_State+0x2a>
            return 1;
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <SIM_Check_TCP_State+0x2c>
        }
    }
    return 0;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	08014528 	.word	0x08014528
 8001290:	08014538 	.word	0x08014538

08001294 <SIM_Parse_Command>:

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Command(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
    char* buf = (char*)sim_rx_buffer;
 800129a:	4b69      	ldr	r3, [pc, #420]	@ (8001440 <SIM_Parse_Command+0x1ac>)
 800129c:	61fb      	str	r3, [r7, #28]

    if(strncmp(buf, "+SMSUB: ", 8) == 0)
 800129e:	2208      	movs	r2, #8
 80012a0:	4968      	ldr	r1, [pc, #416]	@ (8001444 <SIM_Parse_Command+0x1b0>)
 80012a2:	69f8      	ldr	r0, [r7, #28]
 80012a4:	f011 ff57 	bl	8013156 <strncmp>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f040 80c4 	bne.w	8001438 <SIM_Parse_Command+0x1a4>
    {
        char* pos = buf + 8;
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	3308      	adds	r3, #8
 80012b4:	61bb      	str	r3, [r7, #24]

        char* first_quote = strchr(pos, '"');
 80012b6:	2122      	movs	r1, #34	@ 0x22
 80012b8:	69b8      	ldr	r0, [r7, #24]
 80012ba:	f011 ff3f 	bl	801313c <strchr>
 80012be:	6178      	str	r0, [r7, #20]
        if(first_quote) {
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 80b8 	beq.w	8001438 <SIM_Parse_Command+0x1a4>
            char* second_quote = strchr(first_quote + 1, '"');
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3301      	adds	r3, #1
 80012cc:	2122      	movs	r1, #34	@ 0x22
 80012ce:	4618      	mov	r0, r3
 80012d0:	f011 ff34 	bl	801313c <strchr>
 80012d4:	6138      	str	r0, [r7, #16]

            if(second_quote) {
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80ad 	beq.w	8001438 <SIM_Parse_Command+0x1a4>
                char* third_quote = strchr(second_quote + 1, '"');
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	3301      	adds	r3, #1
 80012e2:	2122      	movs	r1, #34	@ 0x22
 80012e4:	4618      	mov	r0, r3
 80012e6:	f011 ff29 	bl	801313c <strchr>
 80012ea:	60f8      	str	r0, [r7, #12]

                if(third_quote) {
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 80a2 	beq.w	8001438 <SIM_Parse_Command+0x1a4>
                    char* cmd_pos = third_quote + 1;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3301      	adds	r3, #1
 80012f8:	60bb      	str	r3, [r7, #8]
                    char* fourth_quote = strchr(cmd_pos, '"');
 80012fa:	2122      	movs	r1, #34	@ 0x22
 80012fc:	68b8      	ldr	r0, [r7, #8]
 80012fe:	f011 ff1d 	bl	801313c <strchr>
 8001302:	6078      	str	r0, [r7, #4]

                    if(fourth_quote && (fourth_quote - cmd_pos) >= 3) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8096 	beq.w	8001438 <SIM_Parse_Command+0x1a4>
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	f340 8090 	ble.w	8001438 <SIM_Parse_Command+0x1a4>

                        uint32_t cmd_val = (cmd_pos[2] << 16) | (cmd_pos[1] << 8) | cmd_pos[0];
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	3302      	adds	r3, #2
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	041a      	lsls	r2, r3, #16
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	3301      	adds	r3, #1
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	4313      	orrs	r3, r2
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	7812      	ldrb	r2, [r2, #0]
 800132e:	4313      	orrs	r3, r2
 8001330:	603b      	str	r3, [r7, #0]

                        switch(cmd_val) {
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	4a44      	ldr	r2, [pc, #272]	@ (8001448 <SIM_Parse_Command+0x1b4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d076      	beq.n	8001428 <SIM_Parse_Command+0x194>
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	4a42      	ldr	r2, [pc, #264]	@ (8001448 <SIM_Parse_Command+0x1b4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d875      	bhi.n	800142e <SIM_Parse_Command+0x19a>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	4a41      	ldr	r2, [pc, #260]	@ (800144c <SIM_Parse_Command+0x1b8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d032      	beq.n	80013b0 <SIM_Parse_Command+0x11c>
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	4a40      	ldr	r2, [pc, #256]	@ (8001450 <SIM_Parse_Command+0x1bc>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d26d      	bcs.n	800142e <SIM_Parse_Command+0x19a>
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	4a3f      	ldr	r2, [pc, #252]	@ (8001454 <SIM_Parse_Command+0x1c0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d059      	beq.n	800140e <SIM_Parse_Command+0x17a>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	4a3e      	ldr	r2, [pc, #248]	@ (8001458 <SIM_Parse_Command+0x1c4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d265      	bcs.n	800142e <SIM_Parse_Command+0x19a>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	4a3d      	ldr	r2, [pc, #244]	@ (800145c <SIM_Parse_Command+0x1c8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d034      	beq.n	80013d4 <SIM_Parse_Command+0x140>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	4a3b      	ldr	r2, [pc, #236]	@ (800145c <SIM_Parse_Command+0x1c8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d85d      	bhi.n	800142e <SIM_Parse_Command+0x19a>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	4a3a      	ldr	r2, [pc, #232]	@ (8001460 <SIM_Parse_Command+0x1cc>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d014      	beq.n	80013a4 <SIM_Parse_Command+0x110>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	4a38      	ldr	r2, [pc, #224]	@ (8001460 <SIM_Parse_Command+0x1cc>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d855      	bhi.n	800142e <SIM_Parse_Command+0x19a>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	4a37      	ldr	r2, [pc, #220]	@ (8001464 <SIM_Parse_Command+0x1d0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d018      	beq.n	80013bc <SIM_Parse_Command+0x128>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	4a35      	ldr	r2, [pc, #212]	@ (8001464 <SIM_Parse_Command+0x1d0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d84d      	bhi.n	800142e <SIM_Parse_Command+0x19a>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	4a34      	ldr	r2, [pc, #208]	@ (8001468 <SIM_Parse_Command+0x1d4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d02f      	beq.n	80013fa <SIM_Parse_Command+0x166>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	4a33      	ldr	r2, [pc, #204]	@ (800146c <SIM_Parse_Command+0x1d8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d012      	beq.n	80013c8 <SIM_Parse_Command+0x134>
								}
							case 0x545352: // RST
								HAL_NVIC_SystemReset();
								break;
							default: 
								break;
 80013a2:	e044      	b.n	800142e <SIM_Parse_Command+0x19a>
								flags.CMD.Idle = 1; 
 80013a4:	4a32      	ldr	r2, [pc, #200]	@ (8001470 <SIM_Parse_Command+0x1dc>)
 80013a6:	7893      	ldrb	r3, [r2, #2]
 80013a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ac:	7093      	strb	r3, [r2, #2]
								break;    
 80013ae:	e043      	b.n	8001438 <SIM_Parse_Command+0x1a4>
								flags.CMD.Start_Meas = 1; 
 80013b0:	4a2f      	ldr	r2, [pc, #188]	@ (8001470 <SIM_Parse_Command+0x1dc>)
 80013b2:	7893      	ldrb	r3, [r2, #2]
 80013b4:	f043 0320 	orr.w	r3, r3, #32
 80013b8:	7093      	strb	r3, [r2, #2]
								break;
 80013ba:	e03d      	b.n	8001438 <SIM_Parse_Command+0x1a4>
								flags.CMD.Ping = 1; 
 80013bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001470 <SIM_Parse_Command+0x1dc>)
 80013be:	7893      	ldrb	r3, [r2, #2]
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	7093      	strb	r3, [r2, #2]
								break;
 80013c6:	e037      	b.n	8001438 <SIM_Parse_Command+0x1a4>
								flags.CMD.Data_Request = 1; 
 80013c8:	4a29      	ldr	r2, [pc, #164]	@ (8001470 <SIM_Parse_Command+0x1dc>)
 80013ca:	7893      	ldrb	r3, [r2, #2]
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	7093      	strb	r3, [r2, #2]
								break;
 80013d2:	e031      	b.n	8001438 <SIM_Parse_Command+0x1a4>
								if(!flags.CMD.Measure_Request)
 80013d4:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <SIM_Parse_Command+0x1dc>)
 80013d6:	789b      	ldrb	r3, [r3, #2]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d127      	bne.n	8001432 <SIM_Parse_Command+0x19e>
									Send_Measure_Addr = Saved_Bytes;
 80013e2:	4b24      	ldr	r3, [pc, #144]	@ (8001474 <SIM_Parse_Command+0x1e0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a24      	ldr	r2, [pc, #144]	@ (8001478 <SIM_Parse_Command+0x1e4>)
 80013e8:	6013      	str	r3, [r2, #0]
									flags.CMD.Measure_Request = 1; 
 80013ea:	4a21      	ldr	r2, [pc, #132]	@ (8001470 <SIM_Parse_Command+0x1dc>)
 80013ec:	7893      	ldrb	r3, [r2, #2]
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	7093      	strb	r3, [r2, #2]
									Switch_Buffer();
 80013f4:	f003 f948 	bl	8004688 <Switch_Buffer>
								break;
 80013f8:	e01b      	b.n	8001432 <SIM_Parse_Command+0x19e>
								if(state == IDLE)
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <SIM_Parse_Command+0x1e8>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d119      	bne.n	8001436 <SIM_Parse_Command+0x1a2>
									flags.CMD.Start_OTA = 1;
 8001402:	4a1b      	ldr	r2, [pc, #108]	@ (8001470 <SIM_Parse_Command+0x1dc>)
 8001404:	7893      	ldrb	r3, [r2, #2]
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	7093      	strb	r3, [r2, #2]
								break;
 800140c:	e013      	b.n	8001436 <SIM_Parse_Command+0x1a2>
								if(state == IDLE)
 800140e:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <SIM_Parse_Command+0x1e8>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d108      	bne.n	8001428 <SIM_Parse_Command+0x194>
									flags.CMD.Set_Config = 1;
 8001416:	4a16      	ldr	r2, [pc, #88]	@ (8001470 <SIM_Parse_Command+0x1dc>)
 8001418:	7893      	ldrb	r3, [r2, #2]
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	7093      	strb	r3, [r2, #2]
									SIM_Parse_Cfg(cmd_pos, fourth_quote);
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	68b8      	ldr	r0, [r7, #8]
 8001424:	f000 f82c 	bl	8001480 <SIM_Parse_Cfg>
								HAL_NVIC_SystemReset();
 8001428:	f009 fd65 	bl	800aef6 <HAL_NVIC_SystemReset>
								break;
 800142c:	e004      	b.n	8001438 <SIM_Parse_Command+0x1a4>
								break;
 800142e:	bf00      	nop
 8001430:	e002      	b.n	8001438 <SIM_Parse_Command+0x1a4>
								break;
 8001432:	bf00      	nop
 8001434:	e000      	b.n	8001438 <SIM_Parse_Command+0x1a4>
								break;
 8001436:	bf00      	nop
                    }
                }
            }
        }
    }
}
 8001438:	bf00      	nop
 800143a:	3720      	adds	r7, #32
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200054b4 	.word	0x200054b4
 8001444:	08014544 	.word	0x08014544
 8001448:	00545352 	.word	0x00545352
 800144c:	00545253 	.word	0x00545253
 8001450:	00545254 	.word	0x00545254
 8001454:	00544553 	.word	0x00544553
 8001458:	00544554 	.word	0x00544554
 800145c:	0052534d 	.word	0x0052534d
 8001460:	004c4449 	.word	0x004c4449
 8001464:	00474e50 	.word	0x00474e50
 8001468:	0041544f 	.word	0x0041544f
 800146c:	00444e53 	.word	0x00444e53
 8001470:	20001c30 	.word	0x20001c30
 8001474:	20004e80 	.word	0x20004e80
 8001478:	20004e88 	.word	0x20004e88
 800147c:	2000071c 	.word	0x2000071c

08001480 <SIM_Parse_Cfg>:

/*-----PARSING CONFIGURAZIONE-----*/
void SIM_Parse_Cfg(char* cmd_start, char* cmd_end)
{   
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
    memset(cfg_var, 0, sizeof(cfg_var));
 800148a:	2214      	movs	r2, #20
 800148c:	2100      	movs	r1, #0
 800148e:	4839      	ldr	r0, [pc, #228]	@ (8001574 <SIM_Parse_Cfg+0xf4>)
 8001490:	f011 fe4c 	bl	801312c <memset>
    memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001494:	220a      	movs	r2, #10
 8001496:	2100      	movs	r1, #0
 8001498:	4837      	ldr	r0, [pc, #220]	@ (8001578 <SIM_Parse_Cfg+0xf8>)
 800149a:	f011 fe47 	bl	801312c <memset>
    
    char* pos = cmd_start + 4; // Salta "SET,"
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3304      	adds	r3, #4
 80014a2:	61fb      	str	r3, [r7, #28]
    
    // Prima virgola (dopo SET)
    char* comma1 = strchr(pos, ',');
 80014a4:	212c      	movs	r1, #44	@ 0x2c
 80014a6:	69f8      	ldr	r0, [r7, #28]
 80014a8:	f011 fe48 	bl	801313c <strchr>
 80014ac:	61b8      	str	r0, [r7, #24]
    if(!comma1 || comma1 >= cmd_end) return;
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d056      	beq.n	8001562 <SIM_Parse_Cfg+0xe2>
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d252      	bcs.n	8001562 <SIM_Parse_Cfg+0xe2>
    
    // Seconda virgola
    char* comma2 = strchr(comma1 + 1, ',');
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	3301      	adds	r3, #1
 80014c0:	212c      	movs	r1, #44	@ 0x2c
 80014c2:	4618      	mov	r0, r3
 80014c4:	f011 fe3a 	bl	801313c <strchr>
 80014c8:	6178      	str	r0, [r7, #20]
    if(!comma2 || comma2 >= cmd_end) return;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d04a      	beq.n	8001566 <SIM_Parse_Cfg+0xe6>
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d246      	bcs.n	8001566 <SIM_Parse_Cfg+0xe6>
    
    // Terza virgola
    char* comma3 = strchr(comma2 + 1, ',');
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3301      	adds	r3, #1
 80014dc:	212c      	movs	r1, #44	@ 0x2c
 80014de:	4618      	mov	r0, r3
 80014e0:	f011 fe2c 	bl	801313c <strchr>
 80014e4:	6138      	str	r0, [r7, #16]
    if(!comma3 || comma3 >= cmd_end) return;
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d03e      	beq.n	800156a <SIM_Parse_Cfg+0xea>
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d23a      	bcs.n	800156a <SIM_Parse_Cfg+0xea>
    
    // Estrai cfg_var (tra SET, e prima virgola)
    int var_len = comma2 - comma1 - 1;
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	3b01      	subs	r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
    if(var_len > 0 && var_len < sizeof(cfg_var)) 
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	dd0e      	ble.n	8001522 <SIM_Parse_Cfg+0xa2>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b13      	cmp	r3, #19
 8001508:	d80b      	bhi.n	8001522 <SIM_Parse_Cfg+0xa2>
	{
        strncpy(cfg_var, comma1 + 1, var_len);
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	3301      	adds	r3, #1
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	4619      	mov	r1, r3
 8001512:	4818      	ldr	r0, [pc, #96]	@ (8001574 <SIM_Parse_Cfg+0xf4>)
 8001514:	f011 fe31 	bl	801317a <strncpy>
        cfg_var[var_len] = '\0';
 8001518:	4a16      	ldr	r2, [pc, #88]	@ (8001574 <SIM_Parse_Cfg+0xf4>)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4413      	add	r3, r2
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
    }
    
    // Estrai cfg_idx
    cfg_idx = atoi(comma2 + 1);
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	4618      	mov	r0, r3
 8001528:	f011 fd16 	bl	8012f58 <atoi>
 800152c:	4603      	mov	r3, r0
 800152e:	4a13      	ldr	r2, [pc, #76]	@ (800157c <SIM_Parse_Cfg+0xfc>)
 8001530:	6013      	str	r3, [r2, #0]
    
    // Estrai new_cfg_val
    int val_len = cmd_end - comma3 - 1;
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	3b01      	subs	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
    if(val_len > 0 && val_len < sizeof(new_cfg_val)) 
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	dd14      	ble.n	800156c <SIM_Parse_Cfg+0xec>
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b09      	cmp	r3, #9
 8001546:	d811      	bhi.n	800156c <SIM_Parse_Cfg+0xec>
	{
        strncpy(new_cfg_val, comma3 + 1, val_len);
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	3301      	adds	r3, #1
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	4619      	mov	r1, r3
 8001550:	4809      	ldr	r0, [pc, #36]	@ (8001578 <SIM_Parse_Cfg+0xf8>)
 8001552:	f011 fe12 	bl	801317a <strncpy>
        new_cfg_val[val_len] = '\0';
 8001556:	4a08      	ldr	r2, [pc, #32]	@ (8001578 <SIM_Parse_Cfg+0xf8>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4413      	add	r3, r2
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
 8001560:	e004      	b.n	800156c <SIM_Parse_Cfg+0xec>
    if(!comma1 || comma1 >= cmd_end) return;
 8001562:	bf00      	nop
 8001564:	e002      	b.n	800156c <SIM_Parse_Cfg+0xec>
    if(!comma2 || comma2 >= cmd_end) return;
 8001566:	bf00      	nop
 8001568:	e000      	b.n	800156c <SIM_Parse_Cfg+0xec>
    if(!comma3 || comma3 >= cmd_end) return;
 800156a:	bf00      	nop
    }
}
 800156c:	3720      	adds	r7, #32
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200058b4 	.word	0x200058b4
 8001578:	200058cc 	.word	0x200058cc
 800157c:	200058c8 	.word	0x200058c8

08001580 <SIM_publish_MQTT_Message>:

/*------PUBBLICAZIONE MESSAGGIO MQTT------*/
void SIM_publish_MQTT_Message(const char* topic, const char* message)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b0c4      	sub	sp, #272	@ 0x110
 8001584:	af00      	add	r7, sp, #0
 8001586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800158a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800158e:	6018      	str	r0, [r3, #0]
 8001590:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001594:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001598:	6019      	str	r1, [r3, #0]
    char command[256];
    uint16_t len = (uint16_t)strlen(message);
 800159a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800159e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	f7fe fe1e 	bl	80001e4 <strlen>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

    if(topic != NULL && strlen(topic) > 0)
 80015ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d014      	beq.n	80015e6 <SIM_publish_MQTT_Message+0x66>
 80015bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00c      	beq.n	80015e6 <SIM_publish_MQTT_Message+0x66>
	{
        sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 80015cc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80015d0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015d4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80015d8:	f107 000c 	add.w	r0, r7, #12
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	490b      	ldr	r1, [pc, #44]	@ (800160c <SIM_publish_MQTT_Message+0x8c>)
 80015e0:	f011 fd44 	bl	801306c <siprintf>
 80015e4:	e007      	b.n	80015f6 <SIM_publish_MQTT_Message+0x76>
    } 
	else 
	{
        sprintf(command, "AT+SMPUB=%d\r", len);
 80015e6:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	4908      	ldr	r1, [pc, #32]	@ (8001610 <SIM_publish_MQTT_Message+0x90>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f011 fd3b 	bl	801306c <siprintf>
    }
    
    SIM_Send_Command_DMA(command);
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fdae 	bl	800115c <SIM_Send_Command_DMA>
}
 8001600:	bf00      	nop
 8001602:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	08014550 	.word	0x08014550
 8001610:	08014568 	.word	0x08014568

08001614 <SIM_Send_TCP_Chunk_DMA>:
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
}

/*-----INVIO DATI AL SERVER TCP CON DMA-----*/
void SIM_Send_TCP_Chunk_DMA(uint8_t* data, uint16_t size)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b090      	sub	sp, #64	@ 0x40
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
    char cmd[50];

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 8001620:	887a      	ldrh	r2, [r7, #2]
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	490d      	ldr	r1, [pc, #52]	@ (800165c <SIM_Send_TCP_Chunk_DMA+0x48>)
 8001628:	4618      	mov	r0, r3
 800162a:	f011 fd1f 	bl	801306c <siprintf>
    SIM_Send_Command_DMA(cmd);
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fd92 	bl	800115c <SIM_Send_Command_DMA>

    SIM_Wait_Response(">");                                    // Attesa prompt '>'
 8001638:	4809      	ldr	r0, [pc, #36]	@ (8001660 <SIM_Send_TCP_Chunk_DMA+0x4c>)
 800163a:	f000 f8a9 	bl	8001790 <SIM_Wait_Response>

    HAL_UART_Transmit(LTE_UART, data, size, 1000);             // Invia dati binari
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4807      	ldr	r0, [pc, #28]	@ (8001664 <SIM_Send_TCP_Chunk_DMA+0x50>)
 8001648:	f010 fa5a 	bl	8011b00 <HAL_UART_Transmit>
    
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
 800164c:	4806      	ldr	r0, [pc, #24]	@ (8001668 <SIM_Send_TCP_Chunk_DMA+0x54>)
 800164e:	f000 f89f 	bl	8001790 <SIM_Wait_Response>
}
 8001652:	bf00      	nop
 8001654:	3740      	adds	r7, #64	@ 0x40
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	08014578 	.word	0x08014578
 8001660:	08014588 	.word	0x08014588
 8001664:	20000604 	.word	0x20000604
 8001668:	0801458c 	.word	0x0801458c

0800166c <SIM_Send_Infos>:

/*-----INVIO INFORMAZIONI AL SERVER MQTT-----*/
void SIM_Send_Infos(void)
{
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8001672:	af0a      	add	r7, sp, #40	@ 0x28
	uint16_t len = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	f8a7 3296 	strh.w	r3, [r7, #662]	@ 0x296
	char command[128];
	char infos[512];
	uint16_t Vbatt = 0;
 800167a:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800167e:	f2a3 2386 	subw	r3, r3, #646	@ 0x286
 8001682:	2200      	movs	r2, #0
 8001684:	801a      	strh	r2, [r3, #0]
	uint16_t new_temp = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	f8a7 3294 	strh.w	r3, [r7, #660]	@ 0x294

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 800168c:	f107 0312 	add.w	r3, r7, #18
 8001690:	4619      	mov	r1, r3
 8001692:	203b      	movs	r0, #59	@ 0x3b
 8001694:	f000 f972 	bl	800197c <BC_MultiRead_Reg>
	INA3221_Read_Measure(&Supply);
 8001698:	4834      	ldr	r0, [pc, #208]	@ (800176c <SIM_Send_Infos+0x100>)
 800169a:	f7ff f8d1 	bl	8000840 <INA3221_Read_Measure>
	if((new_temp = Read_Temperature()) != 0)
 800169e:	f7ff f875 	bl	800078c <Read_Temperature>
 80016a2:	4603      	mov	r3, r0
 80016a4:	f8a7 3294 	strh.w	r3, [r7, #660]	@ 0x294
 80016a8:	f8b7 3294 	ldrh.w	r3, [r7, #660]	@ 0x294
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <SIM_Send_Infos+0x4c>
	{
		Temperature = new_temp;
 80016b0:	4a2f      	ldr	r2, [pc, #188]	@ (8001770 <SIM_Send_Infos+0x104>)
 80016b2:	f8b7 3294 	ldrh.w	r3, [r7, #660]	@ 0x294
 80016b6:	8013      	strh	r3, [r2, #0]
	}

	sprintf(infos, "%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, Vbatt, config.samp_freq, config.buffering_secs, Supply.v1, Supply.v2, Supply.v3, Supply.i1, Supply.i2, Supply.i3, Temperature);
 80016b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001774 <SIM_Send_Infos+0x108>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	469c      	mov	ip, r3
 80016be:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80016c2:	f2a3 2386 	subw	r3, r3, #646	@ 0x286
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	469e      	mov	lr, r3
 80016ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <SIM_Send_Infos+0x108>)
 80016cc:	885b      	ldrh	r3, [r3, #2]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b28      	ldr	r3, [pc, #160]	@ (8001774 <SIM_Send_Infos+0x108>)
 80016d2:	791b      	ldrb	r3, [r3, #4]
 80016d4:	4619      	mov	r1, r3
 80016d6:	4b25      	ldr	r3, [pc, #148]	@ (800176c <SIM_Send_Infos+0x100>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	461c      	mov	r4, r3
 80016dc:	4b23      	ldr	r3, [pc, #140]	@ (800176c <SIM_Send_Infos+0x100>)
 80016de:	885b      	ldrh	r3, [r3, #2]
 80016e0:	461d      	mov	r5, r3
 80016e2:	4b22      	ldr	r3, [pc, #136]	@ (800176c <SIM_Send_Infos+0x100>)
 80016e4:	889b      	ldrh	r3, [r3, #4]
 80016e6:	461e      	mov	r6, r3
 80016e8:	4b20      	ldr	r3, [pc, #128]	@ (800176c <SIM_Send_Infos+0x100>)
 80016ea:	88db      	ldrh	r3, [r3, #6]
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <SIM_Send_Infos+0x100>)
 80016f0:	891b      	ldrh	r3, [r3, #8]
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <SIM_Send_Infos+0x100>)
 80016f6:	895b      	ldrh	r3, [r3, #10]
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001770 <SIM_Send_Infos+0x104>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	f107 0014 	add.w	r0, r7, #20
 8001702:	9308      	str	r3, [sp, #32]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	9307      	str	r3, [sp, #28]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	9306      	str	r3, [sp, #24]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	9305      	str	r3, [sp, #20]
 8001710:	9604      	str	r6, [sp, #16]
 8001712:	9503      	str	r5, [sp, #12]
 8001714:	9402      	str	r4, [sp, #8]
 8001716:	9101      	str	r1, [sp, #4]
 8001718:	9200      	str	r2, [sp, #0]
 800171a:	4673      	mov	r3, lr
 800171c:	4662      	mov	r2, ip
 800171e:	4916      	ldr	r1, [pc, #88]	@ (8001778 <SIM_Send_Infos+0x10c>)
 8001720:	f011 fca4 	bl	801306c <siprintf>
	len = (uint16_t)strlen(infos);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe fd5b 	bl	80001e4 <strlen>
 800172e:	4603      	mov	r3, r0
 8001730:	f8a7 3296 	strh.w	r3, [r7, #662]	@ 0x296

	sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", sys.MQTT.Info_Topic, len);
 8001734:	f8b7 3296 	ldrh.w	r3, [r7, #662]	@ 0x296
 8001738:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 800173c:	4a0f      	ldr	r2, [pc, #60]	@ (800177c <SIM_Send_Infos+0x110>)
 800173e:	4910      	ldr	r1, [pc, #64]	@ (8001780 <SIM_Send_Infos+0x114>)
 8001740:	f011 fc94 	bl	801306c <siprintf>
	SIM_Wait_Response(">"); 
 8001744:	480f      	ldr	r0, [pc, #60]	@ (8001784 <SIM_Send_Infos+0x118>)
 8001746:	f000 f823 	bl	8001790 <SIM_Wait_Response>
	HAL_UART_Transmit(LTE_UART, (uint8_t*)infos, len, 100);
 800174a:	f8b7 2296 	ldrh.w	r2, [r7, #662]	@ 0x296
 800174e:	f107 0114 	add.w	r1, r7, #20
 8001752:	2364      	movs	r3, #100	@ 0x64
 8001754:	480c      	ldr	r0, [pc, #48]	@ (8001788 <SIM_Send_Infos+0x11c>)
 8001756:	f010 f9d3 	bl	8011b00 <HAL_UART_Transmit>
	SIM_Wait_Response("OK");
 800175a:	480c      	ldr	r0, [pc, #48]	@ (800178c <SIM_Send_Infos+0x120>)
 800175c:	f000 f818 	bl	8001790 <SIM_Wait_Response>
}
 8001760:	bf00      	nop
 8001762:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 8001766:	46bd      	mov	sp, r7
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	bf00      	nop
 800176c:	20003e04 	.word	0x20003e04
 8001770:	200046e0 	.word	0x200046e0
 8001774:	20001c34 	.word	0x20001c34
 8001778:	08014594 	.word	0x08014594
 800177c:	20001b00 	.word	0x20001b00
 8001780:	08014550 	.word	0x08014550
 8001784:	08014588 	.word	0x08014588
 8001788:	20000604 	.word	0x20000604
 800178c:	0801430c 	.word	0x0801430c

08001790 <SIM_Wait_Response>:

/*-----ATTESA PROMPT-----*/
void SIM_Wait_Response(const char* expected)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b0c8      	sub	sp, #288	@ 0x120
 8001794:	af02      	add	r7, sp, #8
 8001796:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800179a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800179e:	6018      	str	r0, [r3, #0]
    char response[256];
    uint16_t timeout = 10000; // 10 secondi
 80017a0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80017a4:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    uint32_t start_time = HAL_GetTick();
 80017a8:	f007 fec0 	bl	800952c <HAL_GetTick>
 80017ac:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    
    while((HAL_GetTick() - start_time) < timeout)
 80017b0:	e028      	b.n	8001804 <SIM_Wait_Response+0x74>
    {
        uint16_t RxLen = 0;
 80017b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017b6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80017ba:	2200      	movs	r2, #0
 80017bc:	801a      	strh	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle(LTE_UART, (uint8_t*)response, sizeof(response), &RxLen, 500);
 80017be:	f107 030e 	add.w	r3, r7, #14
 80017c2:	f107 0110 	add.w	r1, r7, #16
 80017c6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80017ca:	9200      	str	r2, [sp, #0]
 80017cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017d0:	4813      	ldr	r0, [pc, #76]	@ (8001820 <SIM_Wait_Response+0x90>)
 80017d2:	f011 fa6a 	bl	8012caa <HAL_UARTEx_ReceiveToIdle>
        
        if(RxLen > 0 && strstr(response, expected) != NULL)
 80017d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017da:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00c      	beq.n	80017fe <SIM_Wait_Response+0x6e>
 80017e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017e8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017ec:	f107 0210 	add.w	r2, r7, #16
 80017f0:	6819      	ldr	r1, [r3, #0]
 80017f2:	4610      	mov	r0, r2
 80017f4:	f011 fcd4 	bl	80131a0 <strstr>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10c      	bne.n	8001818 <SIM_Wait_Response+0x88>
        {
            return; 
        }
        
        HAL_Delay(10);
 80017fe:	200a      	movs	r0, #10
 8001800:	f007 fea0 	bl	8009544 <HAL_Delay>
    while((HAL_GetTick() - start_time) < timeout)
 8001804:	f007 fe92 	bl	800952c <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800180e:	1ad2      	subs	r2, r2, r3
 8001810:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8001814:	429a      	cmp	r2, r3
 8001816:	d3cc      	bcc.n	80017b2 <SIM_Wait_Response+0x22>
    }
}
 8001818:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000604 	.word	0x20000604

08001824 <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 8001828:	211a      	movs	r1, #26
 800182a:	2000      	movs	r0, #0
 800182c:	f000 f830 	bl	8001890 <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 8001830:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 8001834:	2001      	movs	r0, #1
 8001836:	f000 f877 	bl	8001928 <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 800183a:	2164      	movs	r1, #100	@ 0x64
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f873 	bl	8001928 <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 8001842:	2185      	movs	r1, #133	@ 0x85
 8001844:	2010      	movs	r0, #16
 8001846:	f000 f823 	bl	8001890 <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 800184a:	2196      	movs	r1, #150	@ 0x96
 800184c:	2014      	movs	r0, #20
 800184e:	f000 f81f 	bl	8001890 <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 8001852:	21ab      	movs	r1, #171	@ 0xab
 8001854:	2015      	movs	r0, #21
 8001856:	f000 f81b 	bl	8001890 <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 800185a:	21e1      	movs	r1, #225	@ 0xe1
 800185c:	2028      	movs	r0, #40	@ 0x28
 800185e:	f000 f817 	bl	8001890 <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 8001862:	21d7      	movs	r1, #215	@ 0xd7
 8001864:	2029      	movs	r0, #41	@ 0x29
 8001866:	f000 f813 	bl	8001890 <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 800186a:	217f      	movs	r1, #127	@ 0x7f
 800186c:	202a      	movs	r0, #42	@ 0x2a
 800186e:	f000 f80f 	bl	8001890 <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 8001872:	211f      	movs	r1, #31
 8001874:	202b      	movs	r0, #43	@ 0x2b
 8001876:	f000 f80b 	bl	8001890 <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 800187a:	21fc      	movs	r1, #252	@ 0xfc
 800187c:	202c      	movs	r0, #44	@ 0x2c
 800187e:	f000 f807 	bl	8001890 <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 8001882:	21f4      	movs	r1, #244	@ 0xf4
 8001884:	202d      	movs	r0, #45	@ 0x2d
 8001886:	f000 f803 	bl	8001890 <BC_Write_Reg>
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af02      	add	r7, sp, #8
 8001896:	4603      	mov	r3, r0
 8001898:	460a      	mov	r2, r1
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	4613      	mov	r3, r2
 800189e:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 80018aa:	79bb      	ldrb	r3, [r7, #6]
 80018ac:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 80018ae:	f107 0208 	add.w	r2, r7, #8
 80018b2:	2364      	movs	r3, #100	@ 0x64
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2302      	movs	r3, #2
 80018b8:	21d6      	movs	r1, #214	@ 0xd6
 80018ba:	4806      	ldr	r0, [pc, #24]	@ (80018d4 <BC_Write_Reg+0x44>)
 80018bc:	f00a f8b2 	bl	800ba24 <HAL_I2C_Master_Transmit>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <BC_Write_Reg+0x3a>
	{
		result = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
	}

	return result;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200002c8 	.word	0x200002c8

080018d8 <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af02      	add	r7, sp, #8
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 80018ea:	1dfa      	adds	r2, r7, #7
 80018ec:	2364      	movs	r3, #100	@ 0x64
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2301      	movs	r3, #1
 80018f2:	21d6      	movs	r1, #214	@ 0xd6
 80018f4:	480b      	ldr	r0, [pc, #44]	@ (8001924 <BC_Read_Reg+0x4c>)
 80018f6:	f00a f895 	bl	800ba24 <HAL_I2C_Master_Transmit>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10c      	bne.n	800191a <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 8001900:	2364      	movs	r3, #100	@ 0x64
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2301      	movs	r3, #1
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	21d6      	movs	r1, #214	@ 0xd6
 800190a:	4806      	ldr	r0, [pc, #24]	@ (8001924 <BC_Read_Reg+0x4c>)
 800190c:	f00a f9a2 	bl	800bc54 <HAL_I2C_Master_Receive>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <BC_Read_Reg+0x42>
		{
			result = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200002c8 	.word	0x200002c8

08001928 <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af02      	add	r7, sp, #8
 800192e:	4603      	mov	r3, r0
 8001930:	460a      	mov	r2, r1
 8001932:	71fb      	strb	r3, [r7, #7]
 8001934:	4613      	mov	r3, r2
 8001936:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
 800193c:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 8001942:	88bb      	ldrh	r3, [r7, #4]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	b29b      	uxth	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 800194c:	88bb      	ldrh	r3, [r7, #4]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 8001952:	f107 0208 	add.w	r2, r7, #8
 8001956:	2364      	movs	r3, #100	@ 0x64
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2303      	movs	r3, #3
 800195c:	21d6      	movs	r1, #214	@ 0xd6
 800195e:	4806      	ldr	r0, [pc, #24]	@ (8001978 <BC_MultiWrite_Reg+0x50>)
 8001960:	f00a f860 	bl	800ba24 <HAL_I2C_Master_Transmit>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
	}

	return result;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200002c8 	.word	0x200002c8

0800197c <BC_MultiRead_Reg>:

/*------LETTURA REGISTRO 16 BIT------*/
int BC_MultiRead_Reg(uint8_t reg, uint16_t *rdata)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af02      	add	r7, sp, #8
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
 800198c:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 800198e:	2300      	movs	r3, #0
 8001990:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8001992:	1dfa      	adds	r2, r7, #7
 8001994:	2364      	movs	r3, #100	@ 0x64
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2301      	movs	r3, #1
 800199a:	21d6      	movs	r1, #214	@ 0xd6
 800199c:	4811      	ldr	r0, [pc, #68]	@ (80019e4 <BC_MultiRead_Reg+0x68>)
 800199e:	f00a f841 	bl	800ba24 <HAL_I2C_Master_Transmit>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d118      	bne.n	80019da <BC_MultiRead_Reg+0x5e>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, data, 2, 100) == HAL_OK)
 80019a8:	f107 0208 	add.w	r2, r7, #8
 80019ac:	2364      	movs	r3, #100	@ 0x64
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2302      	movs	r3, #2
 80019b2:	21d6      	movs	r1, #214	@ 0xd6
 80019b4:	480b      	ldr	r0, [pc, #44]	@ (80019e4 <BC_MultiRead_Reg+0x68>)
 80019b6:	f00a f94d 	bl	800bc54 <HAL_I2C_Master_Receive>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10c      	bne.n	80019da <BC_MultiRead_Reg+0x5e>
		{
			result = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80019c4:	7a3b      	ldrb	r3, [r7, #8]
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	7a7b      	ldrb	r3, [r7, #9]
 80019ce:	b21b      	sxth	r3, r3
 80019d0:	4313      	orrs	r3, r2
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200002c8 	.word	0x200002c8

080019e8 <BC_Read_Flags>:

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 80019e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019ec:	b09b      	sub	sp, #108	@ 0x6c
 80019ee:	af02      	add	r7, sp, #8
 80019f0:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int result = -1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
 80019f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t data[6] = {0};
 80019f8:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80019fc:	2300      	movs	r3, #0
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	8093      	strh	r3, [r2, #4]
	uint8_t reg = REG22_CHARGER_FLAG_0;
 8001a02:	2322      	movs	r3, #34	@ 0x22
 8001a04:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8001a08:	f107 0253 	add.w	r2, r7, #83	@ 0x53
 8001a0c:	2364      	movs	r3, #100	@ 0x64
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2301      	movs	r3, #1
 8001a12:	21d6      	movs	r1, #214	@ 0xd6
 8001a14:	484a      	ldr	r0, [pc, #296]	@ (8001b40 <BC_Read_Flags+0x158>)
 8001a16:	f00a f805 	bl	800ba24 <HAL_I2C_Master_Transmit>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f040 8089 	bne.w	8001b34 <BC_Read_Flags+0x14c>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 8001a22:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8001a26:	2364      	movs	r3, #100	@ 0x64
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	21d6      	movs	r1, #214	@ 0xd6
 8001a2e:	4844      	ldr	r0, [pc, #272]	@ (8001b40 <BC_Read_Flags+0x158>)
 8001a30:	f00a f910 	bl	800bc54 <HAL_I2C_Master_Receive>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d17c      	bne.n	8001b34 <BC_Read_Flags+0x14c>
		{
			result = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = ((uint64_t)data[0] << 40) | ((uint64_t)data[1] << 32) | ((uint64_t)data[2] << 24) | ((uint64_t)data[3] << 16) | ((uint64_t)data[4] << 8) | (uint64_t)data[5];
 8001a3e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2200      	movs	r2, #0
 8001a46:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a48:	647a      	str	r2, [r7, #68]	@ 0x44
 8001a4a:	f04f 0000 	mov.w	r0, #0
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a54:	0219      	lsls	r1, r3, #8
 8001a56:	2000      	movs	r0, #0
 8001a58:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2200      	movs	r2, #0
 8001a60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a62:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8001a6e:	0033      	movs	r3, r6
 8001a70:	2200      	movs	r2, #0
 8001a72:	ea40 0802 	orr.w	r8, r0, r2
 8001a76:	ea41 0903 	orr.w	r9, r1, r3
 8001a7a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2200      	movs	r2, #0
 8001a82:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a84:	637a      	str	r2, [r7, #52]	@ 0x34
 8001a86:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	0a1d      	lsrs	r5, r3, #8
 8001a8e:	460b      	mov	r3, r1
 8001a90:	061c      	lsls	r4, r3, #24
 8001a92:	ea48 0304 	orr.w	r3, r8, r4
 8001a96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a98:	ea49 0305 	orr.w	r3, r9, r5
 8001a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a9e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	623b      	str	r3, [r7, #32]
 8001aa8:	627a      	str	r2, [r7, #36]	@ 0x24
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	040b      	lsls	r3, r1, #16
 8001aba:	4621      	mov	r1, r4
 8001abc:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	040a      	lsls	r2, r1, #16
 8001ac4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001ac8:	4621      	mov	r1, r4
 8001aca:	4311      	orrs	r1, r2
 8001acc:	61b9      	str	r1, [r7, #24]
 8001ace:	4629      	mov	r1, r5
 8001ad0:	4319      	orrs	r1, r3
 8001ad2:	61f9      	str	r1, [r7, #28]
 8001ad4:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2200      	movs	r2, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	617a      	str	r2, [r7, #20]
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001aec:	4629      	mov	r1, r5
 8001aee:	020b      	lsls	r3, r1, #8
 8001af0:	4621      	mov	r1, r4
 8001af2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001af6:	4621      	mov	r1, r4
 8001af8:	020a      	lsls	r2, r1, #8
 8001afa:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001afe:	4621      	mov	r1, r4
 8001b00:	ea41 0a02 	orr.w	sl, r1, r2
 8001b04:	4629      	mov	r1, r5
 8001b06:	ea41 0b03 	orr.w	fp, r1, r3
 8001b0a:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2200      	movs	r2, #0
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	60fa      	str	r2, [r7, #12]
 8001b16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	ea4a 0303 	orr.w	r3, sl, r3
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	4613      	mov	r3, r2
 8001b24:	ea4b 0303 	orr.w	r3, fp, r3
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001b30:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 8001b34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3764      	adds	r7, #100	@ 0x64
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b40:	200002c8 	.word	0x200002c8

08001b44 <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 8001b44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 8001b50:	2100      	movs	r1, #0
 8001b52:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 8001b54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f401 5380 	and.w	r3, r1, #4096	@ 0x1000
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	d00c      	beq.n	8001b7c <BC_Manage_Interrupts+0x38>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8001b62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	0a0a      	lsrs	r2, r1, #8
 8001b70:	2300      	movs	r3, #0
 8001b72:	b2d3      	uxtb	r3, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	2022      	movs	r0, #34	@ 0x22
 8001b78:	f7ff fe8a 	bl	8001890 <BC_Write_Reg>
	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 8001b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b80:	f04f 0800 	mov.w	r8, #0
 8001b84:	f403 6980 	and.w	r9, r3, #1024	@ 0x400
 8001b88:	ea58 0309 	orrs.w	r3, r8, r9
 8001b8c:	d020      	beq.n	8001bd0 <BC_Manage_Interrupts+0x8c>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, &status);
 8001b8e:	f107 030f 	add.w	r3, r7, #15
 8001b92:	4619      	mov	r1, r3
 8001b94:	201b      	movs	r0, #27
 8001b96:	f7ff fe9f 	bl	80018d8 <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d004      	beq.n	8001bae <BC_Manage_Interrupts+0x6a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80);                //Usa Pannello
 8001ba4:	2180      	movs	r1, #128	@ 0x80
 8001ba6:	2013      	movs	r0, #19
 8001ba8:	f7ff fe72 	bl	8001890 <BC_Write_Reg>
 8001bac:	e003      	b.n	8001bb6 <BC_Manage_Interrupts+0x72>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40);                //Usa Turbina
 8001bae:	2140      	movs	r1, #64	@ 0x40
 8001bb0:	2013      	movs	r0, #19
 8001bb2:	f7ff fe6d 	bl	8001890 <BC_Write_Reg>
		}
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8001bb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	0a0a      	lsrs	r2, r1, #8
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	b2d3      	uxtb	r3, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	2022      	movs	r0, #34	@ 0x22
 8001bcc:	f7ff fe60 	bl	8001890 <BC_Write_Reg>
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 8001bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bd4:	2400      	movs	r4, #0
 8001bd6:	f403 7500 	and.w	r5, r3, #512	@ 0x200
 8001bda:	ea54 0305 	orrs.w	r3, r4, r5
 8001bde:	d00c      	beq.n	8001bfa <BC_Manage_Interrupts+0xb6>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8001be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	0a0a      	lsrs	r2, r1, #8
 8001bee:	2300      	movs	r3, #0
 8001bf0:	b2d3      	uxtb	r3, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	2022      	movs	r0, #34	@ 0x22
 8001bf6:	f7ff fe4b 	bl	8001890 <BC_Write_Reg>
	}

	flags = 0;
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	e9c7 2300 	strd	r2, r3, [r7]
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001c10 <HAL_UARTEx_RxEventCallback>:
	}
}

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
	if(huart == LTE_UART)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a31      	ldr	r2, [pc, #196]	@ (8001ce4 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d155      	bne.n	8001cd0 <HAL_UARTEx_RxEventCallback+0xc0>
	{
		if(*(uint8_t*)sim_rx_buffer == '>')
 8001c24:	4b30      	ldr	r3, [pc, #192]	@ (8001ce8 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c2a:	d120      	bne.n	8001c6e <HAL_UARTEx_RxEventCallback+0x5e>
		{
			if(flags.CMD.Measure_Request)
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cec <HAL_UARTEx_RxEventCallback+0xdc>)
 8001c2e:	789b      	ldrb	r3, [r3, #2]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <HAL_UARTEx_RxEventCallback+0x36>
			{
				flags.TCP_ReadytoSend = 1;
 8001c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001cec <HAL_UARTEx_RxEventCallback+0xdc>)
 8001c3c:	7853      	ldrb	r3, [r2, #1]
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	7053      	strb	r3, [r2, #1]
 8001c44:	e044      	b.n	8001cd0 <HAL_UARTEx_RxEventCallback+0xc0>
			}
			else if(flags.CMD.Data_Request)
 8001c46:	4b29      	ldr	r3, [pc, #164]	@ (8001cec <HAL_UARTEx_RxEventCallback+0xdc>)
 8001c48:	789b      	ldrb	r3, [r3, #2]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d03d      	beq.n	8001cd0 <HAL_UARTEx_RxEventCallback+0xc0>
			{
				flags.MQTT_ReadytoSend = 1;
 8001c54:	4a25      	ldr	r2, [pc, #148]	@ (8001cec <HAL_UARTEx_RxEventCallback+0xdc>)
 8001c56:	7853      	ldrb	r3, [r2, #1]
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 8001c5e:	4b24      	ldr	r3, [pc, #144]	@ (8001cf0 <HAL_UARTEx_RxEventCallback+0xe0>)
 8001c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c64:	461a      	mov	r2, r3
 8001c66:	2300      	movs	r3, #0
 8001c68:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
 8001c6c:	e030      	b.n	8001cd0 <HAL_UARTEx_RxEventCallback+0xc0>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a20      	ldr	r2, [pc, #128]	@ (8001cf4 <HAL_UARTEx_RxEventCallback+0xe4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d10a      	bne.n	8001c8e <HAL_UARTEx_RxEventCallback+0x7e>
				*(uint32_t*)(sim_rx_buffer + 4) == 0x203A4255)       // "UB: "
 8001c78:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf8 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cfc <HAL_UARTEx_RxEventCallback+0xec>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d105      	bne.n	8001c8e <HAL_UARTEx_RxEventCallback+0x7e>
		{     
			flags.MQTT_Message_Rx = 1;
 8001c82:	4a1a      	ldr	r2, [pc, #104]	@ (8001cec <HAL_UARTEx_RxEventCallback+0xdc>)
 8001c84:	7813      	ldrb	r3, [r2, #0]
 8001c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c8a:	7013      	strb	r3, [r2, #0]
 8001c8c:	e020      	b.n	8001cd0 <HAL_UARTEx_RxEventCallback+0xc0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&           // "SEND"
 8001c8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1b      	ldr	r2, [pc, #108]	@ (8001d00 <HAL_UARTEx_RxEventCallback+0xf0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d10a      	bne.n	8001cae <HAL_UARTEx_RxEventCallback+0x9e>
       			*(uint32_t*)(sim_rx_buffer + 4) == 0x004B204F)       // " OK\0"
 8001c98:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&           // "SEND"
 8001c9c:	4a19      	ldr	r2, [pc, #100]	@ (8001d04 <HAL_UARTEx_RxEventCallback+0xf4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d105      	bne.n	8001cae <HAL_UARTEx_RxEventCallback+0x9e>
		{
			flags.TCP_isSending = 0;
 8001ca2:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <HAL_UARTEx_RxEventCallback+0xdc>)
 8001ca4:	7853      	ldrb	r3, [r2, #1]
 8001ca6:	f023 0304 	bic.w	r3, r3, #4
 8001caa:	7053      	strb	r3, [r2, #1]
 8001cac:	e010      	b.n	8001cd0 <HAL_UARTEx_RxEventCallback+0xc0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x4552524F)            //"ERRO"
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a15      	ldr	r2, [pc, #84]	@ (8001d08 <HAL_UARTEx_RxEventCallback+0xf8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_UARTEx_RxEventCallback+0xc0>
		{
			flags.MQTT_ReadytoSend = 0;
 8001cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001cec <HAL_UARTEx_RxEventCallback+0xdc>)
 8001cba:	7853      	ldrb	r3, [r2, #1]
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	7053      	strb	r3, [r2, #1]
			sys.SIM_Prompt_Status = 0;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <HAL_UARTEx_RxEventCallback+0xe0>)
 8001cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
		}
	}
	
	HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8001cd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cd4:	4904      	ldr	r1, [pc, #16]	@ (8001ce8 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001cd6:	4803      	ldr	r0, [pc, #12]	@ (8001ce4 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001cd8:	f011 f8ea 	bl	8012eb0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000604 	.word	0x20000604
 8001ce8:	200054b4 	.word	0x200054b4
 8001cec:	20001c30 	.word	0x20001c30
 8001cf0:	20000720 	.word	0x20000720
 8001cf4:	534d532b 	.word	0x534d532b
 8001cf8:	200054b8 	.word	0x200054b8
 8001cfc:	203a4255 	.word	0x203a4255
 8001d00:	444e4553 	.word	0x444e4553
 8001d04:	004b204f 	.word	0x004b204f
 8001d08:	4552524f 	.word	0x4552524f

08001d0c <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	if (huart == LTE_UART)
	{

	}

}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_UART_TxCpltCallback>:

/* ------CALLBACK UART TX COMPLETE------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	if (huart == LTE_UART)
	{

	}

}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_ADC_ConvHalfCpltCallback>:

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a09      	ldr	r2, [pc, #36]	@ (8001d64 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d109      	bne.n	8001d58 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8001d44:	4a08      	ldr	r2, [pc, #32]	@ (8001d68 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001d46:	7813      	ldrb	r3, [r2, #0]
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 8001d4e:	4a06      	ldr	r2, [pc, #24]	@ (8001d68 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001d50:	7813      	ldrb	r3, [r2, #0]
 8001d52:	f043 0302 	orr.w	r3, r3, #2
 8001d56:	7013      	strb	r3, [r2, #0]
	}
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	200001f8 	.word	0x200001f8
 8001d68:	20001c30 	.word	0x20001c30

08001d6c <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a09      	ldr	r2, [pc, #36]	@ (8001d9c <HAL_ADC_ConvCpltCallback+0x30>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d109      	bne.n	8001d90 <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8001d7c:	4a08      	ldr	r2, [pc, #32]	@ (8001da0 <HAL_ADC_ConvCpltCallback+0x34>)
 8001d7e:	7813      	ldrb	r3, [r2, #0]
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 8001d86:	4a06      	ldr	r2, [pc, #24]	@ (8001da0 <HAL_ADC_ConvCpltCallback+0x34>)
 8001d88:	7813      	ldrb	r3, [r2, #0]
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	7013      	strb	r3, [r2, #0]
	}
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	200001f8 	.word	0x200001f8
 8001da0:	20001c30 	.word	0x20001c30

08001da4 <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b092      	sub	sp, #72	@ 0x48
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;
	RTC_AlarmTypeDef sAlarm = {0};
 8001dac:	f107 0308 	add.w	r3, r7, #8
 8001db0:	222c      	movs	r2, #44	@ 0x2c
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f011 f9b9 	bl	801312c <memset>

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 8001dba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f00c fc21 	bl	800e60a <HAL_RTC_GetTime>

	sys.Low_th = Low_TH_Array[gTime.Hours];
 8001dc8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b17      	ldr	r3, [pc, #92]	@ (8001e2c <HAL_RTC_AlarmAEventCallback+0x88>)
 8001dd0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001dd4:	4b16      	ldr	r3, [pc, #88]	@ (8001e30 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8001dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dda:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sys.High_th = High_TH_Array[gTime.Hours];
 8001ddc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <HAL_RTC_AlarmAEventCallback+0x90>)
 8001de4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001de8:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8001dea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dee:	861a      	strh	r2, [r3, #48]	@ 0x30

	sAlarm.AlarmTime.Hours = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <HAL_RTC_AlarmAEventCallback+0x94>)
 8001dfe:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	62bb      	str	r3, [r7, #40]	@ 0x28
    sAlarm.AlarmDateWeekDay = 1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    sAlarm.Alarm = RTC_ALARM_A;
 8001e0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e12:	633b      	str	r3, [r7, #48]	@ 0x30
    
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f00c fcd7 	bl	800e7d0 <HAL_RTC_SetAlarm_IT>
}
 8001e22:	bf00      	nop
 8001e24:	3748      	adds	r7, #72	@ 0x48
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20005474 	.word	0x20005474
 8001e30:	20000720 	.word	0x20000720
 8001e34:	20005444 	.word	0x20005444
 8001e38:	80800080 	.word	0x80800080

08001e3c <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e46:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <extflash_cs_set+0x14>)
 8001e48:	f009 fd38 	bl	800b8bc <HAL_GPIO_WritePin>
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	48000400 	.word	0x48000400

08001e54 <extflash_cs_reset>:

void extflash_cs_reset()
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e5e:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <extflash_cs_reset+0x14>)
 8001e60:	f009 fd2c 	bl	800b8bc <HAL_GPIO_WritePin>
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	48000400 	.word	0x48000400

08001e6c <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 8001e70:	2201      	movs	r2, #1
 8001e72:	2140      	movs	r1, #64	@ 0x40
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <extflash_wp_reset+0x14>)
 8001e76:	f009 fd21 	bl	800b8bc <HAL_GPIO_WritePin>
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	48000800 	.word	0x48000800

08001e84 <extflash_hard_reset>:


void extflash_hard_reset()
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2180      	movs	r1, #128	@ 0x80
 8001e8c:	4806      	ldr	r0, [pc, #24]	@ (8001ea8 <extflash_hard_reset+0x24>)
 8001e8e:	f009 fd15 	bl	800b8bc <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8001e92:	2032      	movs	r0, #50	@ 0x32
 8001e94:	f007 fb56 	bl	8009544 <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <extflash_hard_reset+0x24>)
 8001e9e:	f009 fd0d 	bl	800b8bc <HAL_GPIO_WritePin>

	return;
 8001ea2:	bf00      	nop
}
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	48000800 	.word	0x48000800

08001eac <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	785b      	ldrb	r3, [r3, #1]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00d      	beq.n	8001ef0 <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 8001ef0:	f7ff ffa4 	bl	8001e3c <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 8001ef4:	f107 010f 	add.w	r1, r7, #15
 8001ef8:	2364      	movs	r3, #100	@ 0x64
 8001efa:	2201      	movs	r2, #1
 8001efc:	4823      	ldr	r0, [pc, #140]	@ (8001f8c <extflash_send_cmd+0xe0>)
 8001efe:	f00c ff66 	bl	800edce <HAL_SPI_Transmit>

	if(command->address_en != 0)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	785b      	ldrb	r3, [r3, #1]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d006      	beq.n	8001f18 <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 8001f0a:	f107 0118 	add.w	r1, r7, #24
 8001f0e:	2364      	movs	r3, #100	@ 0x64
 8001f10:	2203      	movs	r2, #3
 8001f12:	481e      	ldr	r0, [pc, #120]	@ (8001f8c <extflash_send_cmd+0xe0>)
 8001f14:	f00c ff5b 	bl	800edce <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	88db      	ldrh	r3, [r3, #6]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00e      	beq.n	8001f3e <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	88db      	ldrh	r3, [r3, #6]
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	bf28      	it	cs
 8001f28:	2308      	movcs	r3, #8
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 8001f2e:	7ffb      	ldrb	r3, [r7, #31]
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	f107 0110 	add.w	r1, r7, #16
 8001f36:	2364      	movs	r3, #100	@ 0x64
 8001f38:	4814      	ldr	r0, [pc, #80]	@ (8001f8c <extflash_send_cmd+0xe0>)
 8001f3a:	f00c ff48 	bl	800edce <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	885b      	ldrh	r3, [r3, #2]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <extflash_send_cmd+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68d9      	ldr	r1, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	885a      	ldrh	r2, [r3, #2]
 8001f56:	2364      	movs	r3, #100	@ 0x64
 8001f58:	480c      	ldr	r0, [pc, #48]	@ (8001f8c <extflash_send_cmd+0xe0>)
 8001f5a:	f00c ff38 	bl	800edce <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	889b      	ldrh	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00b      	beq.n	8001f7e <extflash_send_cmd+0xd2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d007      	beq.n	8001f7e <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6919      	ldr	r1, [r3, #16]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	889a      	ldrh	r2, [r3, #4]
 8001f76:	2364      	movs	r3, #100	@ 0x64
 8001f78:	4804      	ldr	r0, [pc, #16]	@ (8001f8c <extflash_send_cmd+0xe0>)
 8001f7a:	f00d f89e 	bl	800f0ba <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 8001f7e:	f7ff ff69 	bl	8001e54 <extflash_cs_reset>

	return 0;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000384 	.word	0x20000384

08001f90 <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 8001fa8:	2381      	movs	r3, #129	@ 0x81
 8001faa:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 8001fbc:	f107 030c 	add.w	r3, r7, #12
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff73 	bl	8001eac <extflash_send_cmd>
 8001fc6:	4603      	mov	r3, r0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3720      	adds	r7, #32
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 8001fe4:	2382      	movs	r3, #130	@ 0x82
 8001fe6:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff5e 	bl	8001eac <extflash_send_cmd>
 8001ff0:	4603      	mov	r3, r0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b088      	sub	sp, #32
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <extflash_set_write_protection+0x24>
 800201a:	2306      	movs	r3, #6
 800201c:	e000      	b.n	8002020 <extflash_set_write_protection+0x26>
 800201e:	2304      	movs	r3, #4
 8002020:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ff40 	bl	8001eac <extflash_send_cmd>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b08a      	sub	sp, #40	@ 0x28
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	4613      	mov	r3, r2
 8002042:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 8002054:	235a      	movs	r3, #90	@ 0x5a
 8002056:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002058:	2301      	movs	r3, #1
 800205a:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002060:	2301      	movs	r3, #1
 8002062:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	b29b      	uxth	r3, r3
 8002068:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ff1a 	bl	8001eac <extflash_send_cmd>
 8002078:	4603      	mov	r3, r0

}
 800207a:	4618      	mov	r0, r3
 800207c:	3728      	adds	r7, #40	@ 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b08a      	sub	sp, #40	@ 0x28
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	4613      	mov	r3, r2
 800208e:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 80020a0:	230b      	movs	r3, #11
 80020a2:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 80020a4:	2301      	movs	r3, #1
 80020a6:	757b      	strb	r3, [r7, #21]
	command.address = address;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fef5 	bl	8001eac <extflash_send_cmd>
 80020c2:	4603      	mov	r3, r0

}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3728      	adds	r7, #40	@ 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 80020d4:	f107 030c 	add.w	r3, r7, #12
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 80020e4:	23d7      	movs	r3, #215	@ 0xd7
 80020e6:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 80020e8:	2301      	movs	r3, #1
 80020ea:	737b      	strb	r3, [r7, #13]
	command.address = address;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 80020f0:	f107 030c 	add.w	r3, r7, #12
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fed9 	bl	8001eac <extflash_send_cmd>
 80020fa:	4603      	mov	r3, r0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 800210e:	f107 030c 	add.w	r3, r7, #12
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 800212a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800212e:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff feb7 	bl	8001eac <extflash_send_cmd>
 800213e:	4603      	mov	r3, r0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	@ 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 800215c:	f007 f9e6 	bl	800952c <HAL_GetTick>
 8002160:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	031b      	lsls	r3, r3, #12
 800216a:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 800216c:	f107 0317 	add.w	r3, r7, #23
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff0d 	bl	8001f90 <extflash_read_extended_read_reg>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	da10      	bge.n	800219e <extflash_sector_read+0x56>
 800217c:	f04f 33ff 	mov.w	r3, #4294967295
 8002180:	e037      	b.n	80021f2 <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002182:	f107 0317 	add.w	r3, r7, #23
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ff02 	bl	8001f90 <extflash_read_extended_read_reg>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	da02      	bge.n	8002198 <extflash_sector_read+0x50>
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	e02c      	b.n	80021f2 <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002198:	2001      	movs	r0, #1
 800219a:	f007 f9d3 	bl	8009544 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <extflash_sector_read+0xa2>
 80021a8:	f007 f9c0 	bl	800952c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021b6:	d3e4      	bcc.n	8002182 <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 80021b8:	e017      	b.n	80021ea <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 80021ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021c0:	6a38      	ldr	r0, [r7, #32]
 80021c2:	f7ff ff5e 	bl	8002082 <extflash_raw_read>
 80021c6:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	da02      	bge.n	80021d4 <extflash_sector_read+0x8c>
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
 80021d2:	e00e      	b.n	80021f2 <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021da:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 80021dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e4      	bne.n	80021ba <extflash_sector_read+0x72>
	}

	return 0;
 80021f0:	2300      	movs	r3, #0

}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3728      	adds	r7, #40	@ 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 8002206:	f007 f991 	bl	800952c <HAL_GetTick>
 800220a:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 800220c:	f107 030b 	add.w	r3, r7, #11
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff febd 	bl	8001f90 <extflash_read_extended_read_reg>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	da10      	bge.n	800223e <extflash_wait_for_wop+0x44>
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
 8002220:	e023      	b.n	800226a <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002222:	f107 030b 	add.w	r3, r7, #11
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff feb2 	bl	8001f90 <extflash_read_extended_read_reg>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	da02      	bge.n	8002238 <extflash_wait_for_wop+0x3e>
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	e018      	b.n	800226a <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002238:	2001      	movs	r0, #1
 800223a:	f007 f983 	bl	8009544 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 800223e:	7afb      	ldrb	r3, [r7, #11]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <extflash_wait_for_wop+0x5e>
 8002248:	f007 f970 	bl	800952c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	d8e4      	bhi.n	8002222 <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 8002258:	7afb      	ldrb	r3, [r7, #11]
 800225a:	f003 030e 	and.w	r3, r3, #14
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 8002262:	f06f 0301 	mvn.w	r3, #1
 8002266:	e000      	b.n	800226a <extflash_wait_for_wop+0x70>
	}

	return 0;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b088      	sub	sp, #32
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
	int result = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	031b      	lsls	r3, r3, #12
 800228a:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 800228c:	f7ff fea0 	bl	8001fd0 <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 8002290:	e04e      	b.n	8002330 <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002292:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002296:	f7ff ffb0 	bl	80021fa <extflash_wait_for_wop>
 800229a:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db4a      	blt.n	8002338 <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f7ff fea9 	bl	8001ffa <extflash_set_write_protection>
 80022a8:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db45      	blt.n	800233c <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 80022b0:	69b8      	ldr	r0, [r7, #24]
 80022b2:	f7ff ff0b 	bl	80020cc <extflash_raw_erase>
 80022b6:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db40      	blt.n	8002340 <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 80022be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022c2:	f7ff ff9a 	bl	80021fa <extflash_wait_for_wop>
 80022c6:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	db3a      	blt.n	8002344 <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	e021      	b.n	8002318 <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff fe90 	bl	8001ffa <extflash_set_write_protection>
 80022da:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db1e      	blt.n	8002320 <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 80022e2:	69f9      	ldr	r1, [r7, #28]
 80022e4:	69b8      	ldr	r0, [r7, #24]
 80022e6:	f7ff ff0d 	bl	8002104 <extflash_raw_page_write>
 80022ea:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	db18      	blt.n	8002324 <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80022f8:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002300:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002302:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002306:	f7ff ff78 	bl	80021fa <extflash_wait_for_wop>
 800230a:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db0a      	blt.n	8002328 <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3301      	adds	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2b0f      	cmp	r3, #15
 800231c:	ddda      	ble.n	80022d4 <extflash_sector_write+0x62>
 800231e:	e004      	b.n	800232a <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002320:	bf00      	nop
 8002322:	e002      	b.n	800232a <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002324:	bf00      	nop
 8002326:	e000      	b.n	800232a <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002328:	bf00      	nop
		}

		nsectors--;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	3b01      	subs	r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1ad      	bne.n	8002292 <extflash_sector_write+0x20>
 8002336:	e006      	b.n	8002346 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002338:	bf00      	nop
 800233a:	e004      	b.n	8002346 <extflash_sector_write+0xd4>
		if(result < 0)break;
 800233c:	bf00      	nop
 800233e:	e002      	b.n	8002346 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002340:	bf00      	nop
 8002342:	e000      	b.n	8002346 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002344:	bf00      	nop
	}

	extflash_set_write_protection(1);
 8002346:	2001      	movs	r0, #1
 8002348:	f7ff fe57 	bl	8001ffa <extflash_set_write_protection>

	return 0;
 800234c:	2300      	movs	r3, #0

}
 800234e:	4618      	mov	r0, r3
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 800235a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 800236c:	4b03      	ldr	r3, [pc, #12]	@ (800237c <extflash_get_sector_count+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	200001f0 	.word	0x200001f0

08002380 <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
	return exflashInitDone;
 8002384:	4b03      	ldr	r3, [pc, #12]	@ (8002394 <extflash_is_initialized+0x14>)
 8002386:	781b      	ldrb	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	200001f4 	.word	0x200001f4

08002398 <extflash_init>:

int extflash_init()
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 800239e:	2300      	movs	r3, #0
 80023a0:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
 80023b0:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 80023b6:	4b26      	ldr	r3, [pc, #152]	@ (8002450 <extflash_init+0xb8>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 80023bc:	4b25      	ldr	r3, [pc, #148]	@ (8002454 <extflash_init+0xbc>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 80023c2:	f7ff fd5f 	bl	8001e84 <extflash_hard_reset>
	extflash_cs_reset();
 80023c6:	f7ff fd45 	bl	8001e54 <extflash_cs_reset>
	extflash_wp_reset();
 80023ca:	f7ff fd4f 	bl	8001e6c <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 80023ce:	2390      	movs	r3, #144	@ 0x90
 80023d0:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 80023da:	2302      	movs	r3, #2
 80023dc:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 80023de:	f107 031c 	add.w	r3, r7, #28
 80023e2:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fd5f 	bl	8001eac <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 80023ee:	7f3b      	ldrb	r3, [r7, #28]
 80023f0:	2b9d      	cmp	r3, #157	@ 0x9d
 80023f2:	d102      	bne.n	80023fa <extflash_init+0x62>
 80023f4:	7f7b      	ldrb	r3, [r7, #29]
 80023f6:	2b17      	cmp	r3, #23
 80023f8:	d002      	beq.n	8002400 <extflash_init+0x68>
	{
		return -1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	e022      	b.n	8002446 <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 8002400:	f107 0308 	add.w	r3, r7, #8
 8002404:	2214      	movs	r2, #20
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f010 fe8f 	bl	801312c <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	2204      	movs	r2, #4
 8002412:	4619      	mov	r1, r3
 8002414:	2034      	movs	r0, #52	@ 0x34
 8002416:	f7ff fe0e 	bl	8002036 <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a0e      	ldr	r2, [pc, #56]	@ (8002458 <extflash_init+0xc0>)
 800241e:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 8002420:	4b0d      	ldr	r3, [pc, #52]	@ (8002458 <extflash_init+0xc0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	4a0c      	ldr	r2, [pc, #48]	@ (8002458 <extflash_init+0xc0>)
 8002428:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 800242a:	4b0b      	ldr	r3, [pc, #44]	@ (8002458 <extflash_init+0xc0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	08db      	lsrs	r3, r3, #3
 8002430:	4a09      	ldr	r2, [pc, #36]	@ (8002458 <extflash_init+0xc0>)
 8002432:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 8002434:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <extflash_init+0xc0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0b1b      	lsrs	r3, r3, #12
 800243a:	4a06      	ldr	r2, [pc, #24]	@ (8002454 <extflash_init+0xbc>)
 800243c:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 800243e:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <extflash_init+0xb8>)
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]

	return 0;
 8002444:	2300      	movs	r3, #0

}
 8002446:	4618      	mov	r0, r3
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200001f4 	.word	0x200001f4
 8002454:	200001f0 	.word	0x200001f0
 8002458:	200001ec 	.word	0x200001ec

0800245c <System_Init>:
#include "lsm6dsv16x_rw.h"
#include "DS18B20.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 8002460:	4b1b      	ldr	r3, [pc, #108]	@ (80024d0 <System_Init+0x74>)
 8002462:	4a1c      	ldr	r2, [pc, #112]	@ (80024d4 <System_Init+0x78>)
 8002464:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 8002466:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <System_Init+0x74>)
 8002468:	4a1b      	ldr	r2, [pc, #108]	@ (80024d8 <System_Init+0x7c>)
 800246a:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 800246c:	4b18      	ldr	r3, [pc, #96]	@ (80024d0 <System_Init+0x74>)
 800246e:	4a1b      	ldr	r2, [pc, #108]	@ (80024dc <System_Init+0x80>)
 8002470:	60da      	str	r2, [r3, #12]

	LED_Start(ORG_LED, FAST);
 8002472:	2102      	movs	r1, #2
 8002474:	2000      	movs	r0, #0
 8002476:	f000 fa5f 	bl	8002938 <LED_Start>

	BC_Init();
 800247a:	f7ff f9d3 	bl	8001824 <BC_Init>
	INA3221_Init();
 800247e:	f7fe f9bd 	bl	80007fc <INA3221_Init>
	FatFS_Init();
 8002482:	f000 f833 	bl	80024ec <FatFS_Init>
	Config_Init();
 8002486:	f000 f979 	bl	800277c <Config_Init>
	Acc_Init(&acc);
 800248a:	4811      	ldr	r0, [pc, #68]	@ (80024d0 <System_Init+0x74>)
 800248c:	f000 f8ca 	bl	8002624 <Acc_Init>
	SIM_Init();
 8002490:	f7fe fbfc 	bl	8000c8c <SIM_Init>
	RTC_Init();
 8002494:	f7fe fa60 	bl	8000958 <RTC_Init>
	Temperature = Read_Temperature();
 8002498:	f7fe f978 	bl	800078c <Read_Temperature>
 800249c:	4603      	mov	r3, r0
 800249e:	461a      	mov	r2, r3
 80024a0:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <System_Init+0x84>)
 80024a2:	801a      	strh	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80024a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024a8:	490e      	ldr	r1, [pc, #56]	@ (80024e4 <System_Init+0x88>)
 80024aa:	480f      	ldr	r0, [pc, #60]	@ (80024e8 <System_Init+0x8c>)
 80024ac:	f010 fd00 	bl	8012eb0 <HAL_UARTEx_ReceiveToIdle_DMA>

	LED_Start(RED_LED, ON);
 80024b0:	2101      	movs	r1, #1
 80024b2:	2004      	movs	r0, #4
 80024b4:	f000 fa40 	bl	8002938 <LED_Start>
	HAL_Delay(9000);
 80024b8:	f242 3028 	movw	r0, #9000	@ 0x2328
 80024bc:	f007 f842 	bl	8009544 <HAL_Delay>

	LED_Stop(RED_LED);
 80024c0:	2004      	movs	r0, #4
 80024c2:	f000 faa9 	bl	8002a18 <LED_Stop>
	LED_Stop(ORG_LED);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f000 faa6 	bl	8002a18 <LED_Stop>
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	200054a4 	.word	0x200054a4
 80024d4:	0800323b 	.word	0x0800323b
 80024d8:	08003293 	.word	0x08003293
 80024dc:	200003e8 	.word	0x200003e8
 80024e0:	200046e0 	.word	0x200046e0
 80024e4:	200054b4 	.word	0x200054b4
 80024e8:	20000604 	.word	0x20000604

080024ec <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]

	do
	{
		sys.RAM_Mounted = 0;
 8002502:	4b41      	ldr	r3, [pc, #260]	@ (8002608 <FatFS_Init+0x11c>)
 8002504:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002508:	461a      	mov	r2, r3
 800250a:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800250e:	f023 0302 	bic.w	r3, r3, #2
 8002512:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		
		mkfs_opt.fmt = FM_FAT32;
 8002516:	2302      	movs	r3, #2
 8002518:	713b      	strb	r3, [r7, #4]
		mkfs_opt.au_size = 1024; 
 800251a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800251e:	613b      	str	r3, [r7, #16]
		mkfs_opt.n_fat = 1;
 8002520:	2301      	movs	r3, #1
 8002522:	717b      	strb	r3, [r7, #5]
		mkfs_opt.align = 1;
 8002524:	2301      	movs	r3, #1
 8002526:	60bb      	str	r3, [r7, #8]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 8002528:	1d39      	adds	r1, r7, #4
 800252a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800252e:	4a37      	ldr	r2, [pc, #220]	@ (800260c <FatFS_Init+0x120>)
 8002530:	4837      	ldr	r0, [pc, #220]	@ (8002610 <FatFS_Init+0x124>)
 8002532:	f006 fb19 	bl	8008b68 <f_mkfs>
 8002536:	4603      	mov	r3, r0
 8002538:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 800253a:	7dfb      	ldrb	r3, [r7, #23]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d114      	bne.n	800256a <FatFS_Init+0x7e>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 8002540:	2201      	movs	r2, #1
 8002542:	4933      	ldr	r1, [pc, #204]	@ (8002610 <FatFS_Init+0x124>)
 8002544:	4833      	ldr	r0, [pc, #204]	@ (8002614 <FatFS_Init+0x128>)
 8002546:	f005 fc8d 	bl	8007e64 <f_mount>
 800254a:	4603      	mov	r3, r0
 800254c:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10c      	bne.n	800256e <FatFS_Init+0x82>
		{
			break;
		}

		sys.RAM_Mounted = 1;
 8002554:	4b2c      	ldr	r3, [pc, #176]	@ (8002608 <FatFS_Init+0x11c>)
 8002556:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800255a:	461a      	mov	r2, r3
 800255c:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 8002568:	e002      	b.n	8002570 <FatFS_Init+0x84>
			break;
 800256a:	bf00      	nop
 800256c:	e000      	b.n	8002570 <FatFS_Init+0x84>
			break;
 800256e:	bf00      	nop
	} while (1);

	do
	{
		sys.FLASH_Mounted = 0;
 8002570:	4b25      	ldr	r3, [pc, #148]	@ (8002608 <FatFS_Init+0x11c>)
 8002572:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002576:	461a      	mov	r2, r3
 8002578:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800257c:	f023 0304 	bic.w	r3, r3, #4
 8002580:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		fRes = f_mount(&flash_fs, "/flash", 1);
 8002584:	2201      	movs	r2, #1
 8002586:	4924      	ldr	r1, [pc, #144]	@ (8002618 <FatFS_Init+0x12c>)
 8002588:	4824      	ldr	r0, [pc, #144]	@ (800261c <FatFS_Init+0x130>)
 800258a:	f005 fc6b 	bl	8007e64 <f_mount>
 800258e:	4603      	mov	r3, r0
 8002590:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 8002592:	7dfb      	ldrb	r3, [r7, #23]
 8002594:	2b0d      	cmp	r3, #13
 8002596:	d124      	bne.n	80025e2 <FatFS_Init+0xf6>
		{
			memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	2210      	movs	r2, #16
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f010 fdc4 	bl	801312c <memset>
			mkfs_opt.fmt = FM_FAT32;
 80025a4:	2302      	movs	r3, #2
 80025a6:	713b      	strb	r3, [r7, #4]
			mkfs_opt.au_size = 4096;    
 80025a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025ac:	613b      	str	r3, [r7, #16]
			mkfs_opt.n_fat = 1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	717b      	strb	r3, [r7, #5]
			mkfs_opt.align = 1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 80025b6:	1d39      	adds	r1, r7, #4
 80025b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025bc:	4a18      	ldr	r2, [pc, #96]	@ (8002620 <FatFS_Init+0x134>)
 80025be:	4816      	ldr	r0, [pc, #88]	@ (8002618 <FatFS_Init+0x12c>)
 80025c0:	f006 fad2 	bl	8008b68 <f_mkfs>
 80025c4:	4603      	mov	r3, r0
 80025c6:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d114      	bne.n	80025f8 <FatFS_Init+0x10c>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 80025ce:	2201      	movs	r2, #1
 80025d0:	4911      	ldr	r1, [pc, #68]	@ (8002618 <FatFS_Init+0x12c>)
 80025d2:	4812      	ldr	r0, [pc, #72]	@ (800261c <FatFS_Init+0x130>)
 80025d4:	f005 fc46 	bl	8007e64 <f_mount>
 80025d8:	4603      	mov	r3, r0
 80025da:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10c      	bne.n	80025fc <FatFS_Init+0x110>
			{
				break;
			}
		}

		sys.FLASH_Mounted = 1;
 80025e2:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <FatFS_Init+0x11c>)
 80025e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e8:	461a      	mov	r2, r3
 80025ea:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80025ee:	f043 0304 	orr.w	r3, r3, #4
 80025f2:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 80025f6:	e002      	b.n	80025fe <FatFS_Init+0x112>
				break;
 80025f8:	bf00      	nop
 80025fa:	e000      	b.n	80025fe <FatFS_Init+0x112>
				break;
 80025fc:	bf00      	nop
	} while (1);


}
 80025fe:	bf00      	nop
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000720 	.word	0x20000720
 800260c:	20001dd0 	.word	0x20001dd0
 8002610:	080145b8 	.word	0x080145b8
 8002614:	20001d9c 	.word	0x20001d9c
 8002618:	080145c0 	.word	0x080145c0
 800261c:	20002dd0 	.word	0x20002dd0
 8002620:	20002e04 	.word	0x20002e04

08002624 <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
void Acc_Init(stmdev_ctx_t* acc)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 800262c:	f107 0310 	add.w	r3, r7, #16
 8002630:	2100      	movs	r1, #0
 8002632:	460a      	mov	r2, r1
 8002634:	801a      	strh	r2, [r3, #0]
 8002636:	460a      	mov	r2, r1
 8002638:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 8002642:	7c3b      	ldrb	r3, [r7, #16]
 8002644:	f043 0308 	orr.w	r3, r3, #8
 8002648:	743b      	strb	r3, [r7, #16]


	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 800264a:	f107 030f 	add.w	r3, r7, #15
 800264e:	4619      	mov	r1, r3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fac5 	bl	8002be0 <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	2b70      	cmp	r3, #112	@ 0x70
 800265a:	d01f      	beq.n	800269c <Acc_Init+0x78>
		while (acc_whoamI != LSM6DSV16X_ID)
 800265c:	e01b      	b.n	8002696 <Acc_Init+0x72>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 800265e:	f107 030f 	add.w	r3, r7, #15
 8002662:	4619      	mov	r1, r3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fabb 	bl	8002be0 <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 800266a:	7dfb      	ldrb	r3, [r7, #23]
 800266c:	3301      	adds	r3, #1
 800266e:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b03      	cmp	r3, #3
 8002674:	d10f      	bne.n	8002696 <Acc_Init+0x72>
			{
				sys.ACC_Present = 0;
 8002676:	4b3e      	ldr	r3, [pc, #248]	@ (8002770 <Acc_Init+0x14c>)
 8002678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800267c:	461a      	mov	r2, r3
 800267e:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				flags.ACC_Complete = 1;
 800268a:	4a3a      	ldr	r2, [pc, #232]	@ (8002774 <Acc_Init+0x150>)
 800268c:	7813      	ldrb	r3, [r2, #0]
 800268e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002692:	7013      	strb	r3, [r2, #0]
 8002694:	e069      	b.n	800276a <Acc_Init+0x146>
		while (acc_whoamI != LSM6DSV16X_ID)
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	2b70      	cmp	r3, #112	@ 0x70
 800269a:	d1e0      	bne.n	800265e <Acc_Init+0x3a>
				return;
			}
		}
	sys.ACC_Present = 1;
 800269c:	4b34      	ldr	r3, [pc, #208]	@ (8002770 <Acc_Init+0x14c>)
 800269e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026a2:	461a      	mov	r2, r3
 80026a4:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 80026b0:	2101      	movs	r1, #1
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f9ee 	bl	8002a94 <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 80026b8:	f107 0316 	add.w	r3, r7, #22
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fa38 	bl	8002b34 <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 80026c4:	200a      	movs	r0, #10
 80026c6:	f006 ff3d 	bl	8009544 <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 80026ca:	7dbb      	ldrb	r3, [r7, #22]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f3      	bne.n	80026b8 <Acc_Init+0x94>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 80026d0:	2101      	movs	r1, #1
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fb81 	bl	8002dda <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 80026d8:	2101      	movs	r1, #1
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fd87 	bl	80031ee <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 80026e0:	2100      	movs	r1, #0
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fade 	bl	8002ca4 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 80026e8:	2100      	movs	r1, #0
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fb4f 	bl	8002d8e <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 80026f0:	2109      	movs	r1, #9
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fd09 	bl	800310a <lsm6dsv16x_fifo_xl_batch_set>
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 80026f8:	2100      	movs	r1, #0
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fd2b 	bl	8003156 <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 8002700:	2100      	movs	r1, #0
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fd4d 	bl	80031a2 <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8002708:	2100      	movs	r1, #0
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fa79 	bl	8002c02 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8002710:	2100      	movs	r1, #0
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 faec 	bl	8002cf0 <lsm6dsv16x_gy_data_rate_set>
	lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 8002718:	2110      	movs	r1, #16
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fb83 	bl	8002e26 <lsm6dsv16x_odr_trig_cfg_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 8002720:	2103      	movs	r1, #3
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fabe 	bl	8002ca4 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 8002728:	2103      	movs	r1, #3
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fb2f 	bl	8002d8e <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 8002730:	2101      	movs	r1, #1
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fca3 	bl	800307e <lsm6dsv16x_den_polarity_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 8002738:	2109      	movs	r1, #9
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fa61 	bl	8002c02 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 8002740:	2100      	movs	r1, #0
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fbbe 	bl	8002ec4 <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 8002748:	2104      	movs	r1, #4
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fb94 	bl	8002e78 <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 8002750:	21c8      	movs	r1, #200	@ 0xc8
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fcb9 	bl	80030ca <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	4619      	mov	r1, r3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fbd6 	bl	8002f10 <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 8002764:	4b04      	ldr	r3, [pc, #16]	@ (8002778 <Acc_Init+0x154>)
 8002766:	2204      	movs	r2, #4
 8002768:	615a      	str	r2, [r3, #20]
}
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000720 	.word	0x20000720
 8002774:	20001c30 	.word	0x20001c30
 8002778:	40010400 	.word	0x40010400

0800277c <Config_Init>:

/*-----INIZiALIZZAZIONE CONFIGURAZIONE-----*/
void Config_Init(void)
{
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
    FIL config_file;
    UINT bytes_read;
    UINT bytes_written;

    if (f_open(&config_file, APP_CONFIG_FILE, FA_READ) == FR_OK) 
 8002786:	f107 0318 	add.w	r3, r7, #24
 800278a:	3b0c      	subs	r3, #12
 800278c:	2201      	movs	r2, #1
 800278e:	4960      	ldr	r1, [pc, #384]	@ (8002910 <Config_Init+0x194>)
 8002790:	4618      	mov	r0, r3
 8002792:	f005 fbb1 	bl	8007ef8 <f_open>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d121      	bne.n	80027e0 <Config_Init+0x64>
	{
        if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 800279c:	f107 0318 	add.w	r3, r7, #24
 80027a0:	3b10      	subs	r3, #16
 80027a2:	f107 0018 	add.w	r0, r7, #24
 80027a6:	380c      	subs	r0, #12
 80027a8:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80027ac:	4959      	ldr	r1, [pc, #356]	@ (8002914 <Config_Init+0x198>)
 80027ae:	f005 fd3b 	bl	8008228 <f_read>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10d      	bne.n	80027d4 <Config_Init+0x58>
 80027b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80027bc:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80027c0:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80027c4:	d106      	bne.n	80027d4 <Config_Init+0x58>
		{
			f_close(&config_file);
 80027c6:	f107 0318 	add.w	r3, r7, #24
 80027ca:	3b0c      	subs	r3, #12
 80027cc:	4618      	mov	r0, r3
 80027ce:	f006 f887 	bl	80088e0 <f_close>
			return;
 80027d2:	e098      	b.n	8002906 <Config_Init+0x18a>
        }
        f_close(&config_file);
 80027d4:	f107 0318 	add.w	r3, r7, #24
 80027d8:	3b0c      	subs	r3, #12
 80027da:	4618      	mov	r0, r3
 80027dc:	f006 f880 	bl	80088e0 <f_close>
    }

    config.device_id = 0;
 80027e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002914 <Config_Init+0x198>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
	config.samp_freq = 800;
 80027e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002914 <Config_Init+0x198>)
 80027e8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80027ec:	805a      	strh	r2, [r3, #2]
	config.buffering_secs = 30;
 80027ee:	4b49      	ldr	r3, [pc, #292]	@ (8002914 <Config_Init+0x198>)
 80027f0:	221e      	movs	r2, #30
 80027f2:	711a      	strb	r2, [r3, #4]
	config.hammer_th = 2048;
 80027f4:	4b47      	ldr	r3, [pc, #284]	@ (8002914 <Config_Init+0x198>)
 80027f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027fa:	80da      	strh	r2, [r3, #6]
    for(int i = 0; i < 24; i++) 
 80027fc:	2300      	movs	r3, #0
 80027fe:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002802:	f102 0214 	add.w	r2, r2, #20
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	e01f      	b.n	800284a <Config_Init+0xce>
	{
        config.low_th[i] = 0;
 800280a:	4a42      	ldr	r2, [pc, #264]	@ (8002914 <Config_Init+0x198>)
 800280c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002810:	f103 0314 	add.w	r3, r3, #20
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3304      	adds	r3, #4
 8002818:	2100      	movs	r1, #0
 800281a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        config.high_th[i] = 4096;
 800281e:	4a3d      	ldr	r2, [pc, #244]	@ (8002914 <Config_Init+0x198>)
 8002820:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002824:	f103 0314 	add.w	r3, r3, #20
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	331c      	adds	r3, #28
 800282c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002830:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < 24; i++) 
 8002834:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002838:	f103 0314 	add.w	r3, r3, #20
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002844:	f102 0214 	add.w	r2, r2, #20
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800284e:	f103 0314 	add.w	r3, r3, #20
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b17      	cmp	r3, #23
 8002856:	ddd8      	ble.n	800280a <Config_Init+0x8e>
    }
    strcpy(config.data_topic, "Data_Topic");
 8002858:	4a2f      	ldr	r2, [pc, #188]	@ (8002918 <Config_Init+0x19c>)
 800285a:	4b30      	ldr	r3, [pc, #192]	@ (800291c <Config_Init+0x1a0>)
 800285c:	cb03      	ldmia	r3!, {r0, r1}
 800285e:	6010      	str	r0, [r2, #0]
 8002860:	6051      	str	r1, [r2, #4]
 8002862:	8819      	ldrh	r1, [r3, #0]
 8002864:	789b      	ldrb	r3, [r3, #2]
 8002866:	8111      	strh	r1, [r2, #8]
 8002868:	7293      	strb	r3, [r2, #10]
    strcpy(config.command_topic, "Command_Topic");  
 800286a:	4a2d      	ldr	r2, [pc, #180]	@ (8002920 <Config_Init+0x1a4>)
 800286c:	4b2d      	ldr	r3, [pc, #180]	@ (8002924 <Config_Init+0x1a8>)
 800286e:	4614      	mov	r4, r2
 8002870:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002872:	6020      	str	r0, [r4, #0]
 8002874:	6061      	str	r1, [r4, #4]
 8002876:	60a2      	str	r2, [r4, #8]
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	81a3      	strh	r3, [r4, #12]
    strcpy(config.ota_topic, "OTA_Topic");
 800287c:	4a2a      	ldr	r2, [pc, #168]	@ (8002928 <Config_Init+0x1ac>)
 800287e:	4b2b      	ldr	r3, [pc, #172]	@ (800292c <Config_Init+0x1b0>)
 8002880:	cb03      	ldmia	r3!, {r0, r1}
 8002882:	6010      	str	r0, [r2, #0]
 8002884:	6051      	str	r1, [r2, #4]
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	8113      	strh	r3, [r2, #8]
	strcpy(config.info_topic, "Info_Topic");
 800288a:	4a29      	ldr	r2, [pc, #164]	@ (8002930 <Config_Init+0x1b4>)
 800288c:	4b29      	ldr	r3, [pc, #164]	@ (8002934 <Config_Init+0x1b8>)
 800288e:	cb03      	ldmia	r3!, {r0, r1}
 8002890:	6010      	str	r0, [r2, #0]
 8002892:	6051      	str	r1, [r2, #4]
 8002894:	8819      	ldrh	r1, [r3, #0]
 8002896:	789b      	ldrb	r3, [r3, #2]
 8002898:	8111      	strh	r1, [r2, #8]
 800289a:	7293      	strb	r3, [r2, #10]
    
    if (f_open(&config_file, APP_CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 800289c:	f107 0318 	add.w	r3, r7, #24
 80028a0:	3b0c      	subs	r3, #12
 80028a2:	220a      	movs	r2, #10
 80028a4:	491a      	ldr	r1, [pc, #104]	@ (8002910 <Config_Init+0x194>)
 80028a6:	4618      	mov	r0, r3
 80028a8:	f005 fb26 	bl	8007ef8 <f_open>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d128      	bne.n	8002904 <Config_Init+0x188>
    {
        return;
    }

    if (f_write(&config_file, &config, sizeof(Config_Typedef), &bytes_written) != FR_OK || bytes_written != sizeof(Config_Typedef)) 
 80028b2:	f107 0318 	add.w	r3, r7, #24
 80028b6:	3b14      	subs	r3, #20
 80028b8:	f107 0018 	add.w	r0, r7, #24
 80028bc:	380c      	subs	r0, #12
 80028be:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80028c2:	4914      	ldr	r1, [pc, #80]	@ (8002914 <Config_Init+0x198>)
 80028c4:	f005 fe03 	bl	80084ce <f_write>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <Config_Init+0x160>
 80028ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028d2:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80028d6:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80028da:	d006      	beq.n	80028ea <Config_Init+0x16e>
	{
        f_close(&config_file);
 80028dc:	f107 0318 	add.w	r3, r7, #24
 80028e0:	3b0c      	subs	r3, #12
 80028e2:	4618      	mov	r0, r3
 80028e4:	f005 fffc 	bl	80088e0 <f_close>
        return;
 80028e8:	e00d      	b.n	8002906 <Config_Init+0x18a>
    }
    
    f_sync(&config_file);
 80028ea:	f107 0318 	add.w	r3, r7, #24
 80028ee:	3b0c      	subs	r3, #12
 80028f0:	4618      	mov	r0, r3
 80028f2:	f005 ff75 	bl	80087e0 <f_sync>
    f_close(&config_file);
 80028f6:	f107 0318 	add.w	r3, r7, #24
 80028fa:	3b0c      	subs	r3, #12
 80028fc:	4618      	mov	r0, r3
 80028fe:	f005 ffef 	bl	80088e0 <f_close>
 8002902:	e000      	b.n	8002906 <Config_Init+0x18a>
        return;
 8002904:	bf00      	nop
}
 8002906:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 800290a:	371c      	adds	r7, #28
 800290c:	46bd      	mov	sp, r7
 800290e:	bd90      	pop	{r4, r7, pc}
 8002910:	080145c8 	.word	0x080145c8
 8002914:	20001c34 	.word	0x20001c34
 8002918:	20001c9c 	.word	0x20001c9c
 800291c:	080145dc 	.word	0x080145dc
 8002920:	20001cdc 	.word	0x20001cdc
 8002924:	080145e8 	.word	0x080145e8
 8002928:	20001d1c 	.word	0x20001d1c
 800292c:	080145f8 	.word	0x080145f8
 8002930:	20001d5c 	.word	0x20001d5c
 8002934:	08014604 	.word	0x08014604

08002938 <LED_Start>:
#include "leds.h"
#include "peripherals.h"

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t mode)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	@ 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	70fb      	strb	r3, [r7, #3]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002944:	f107 030c 	add.w	r3, r7, #12
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
 8002954:	615a      	str	r2, [r3, #20]
 8002956:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002968:	2300      	movs	r3, #0
 800296a:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800296c:	2300      	movs	r3, #0
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24

	switch(mode)
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d00e      	beq.n	8002994 <LED_Start+0x5c>
 8002976:	2b03      	cmp	r3, #3
 8002978:	dc10      	bgt.n	800299c <LED_Start+0x64>
 800297a:	2b01      	cmp	r3, #1
 800297c:	d002      	beq.n	8002984 <LED_Start+0x4c>
 800297e:	2b02      	cmp	r3, #2
 8002980:	d004      	beq.n	800298c <LED_Start+0x54>
 8002982:	e00b      	b.n	800299c <LED_Start+0x64>
	{
	case ON:
		sConfigOC.Pulse = 49999;
 8002984:	f24c 334f 	movw	r3, #49999	@ 0xc34f
 8002988:	613b      	str	r3, [r7, #16]
		break;
 800298a:	e007      	b.n	800299c <LED_Start+0x64>
	case FAST:
		sConfigOC.Pulse = 24999;
 800298c:	f246 13a7 	movw	r3, #24999	@ 0x61a7
 8002990:	613b      	str	r3, [r7, #16]
		break;
 8002992:	e003      	b.n	800299c <LED_Start+0x64>
	case SLOW:
		sConfigOC.Pulse = 12499;
 8002994:	f243 03d3 	movw	r3, #12499	@ 0x30d3
 8002998:	613b      	str	r3, [r7, #16]
		break;
 800299a:	bf00      	nop
	}

	HAL_TIM_Base_Init(LED_TIMER);
 800299c:	481d      	ldr	r0, [pc, #116]	@ (8002a14 <LED_Start+0xdc>)
 800299e:	f00d f89f 	bl	800fae0 <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Init(LED_TIMER);
 80029a2:	481c      	ldr	r0, [pc, #112]	@ (8002a14 <LED_Start+0xdc>)
 80029a4:	f00d fb82 	bl	80100ac <HAL_TIM_PWM_Init>

	switch(LED)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d009      	beq.n	80029c2 <LED_Start+0x8a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d82a      	bhi.n	8002a0a <LED_Start+0xd2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01b      	beq.n	80029f2 <LED_Start+0xba>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d00c      	beq.n	80029da <LED_Start+0xa2>
	case ORG_LED:
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
		HAL_TIM_PWM_Start(LED_TIMER, LED);
		break;
	}
}
 80029c0:	e023      	b.n	8002a0a <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 80029c2:	f107 030c 	add.w	r3, r7, #12
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4619      	mov	r1, r3
 80029ca:	4812      	ldr	r0, [pc, #72]	@ (8002a14 <LED_Start+0xdc>)
 80029cc:	f00d feda 	bl	8010784 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4810      	ldr	r0, [pc, #64]	@ (8002a14 <LED_Start+0xdc>)
 80029d4:	f00d fbcc 	bl	8010170 <HAL_TIM_PWM_Start>
		break;
 80029d8:	e017      	b.n	8002a0a <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 80029da:	f107 030c 	add.w	r3, r7, #12
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4619      	mov	r1, r3
 80029e2:	480c      	ldr	r0, [pc, #48]	@ (8002a14 <LED_Start+0xdc>)
 80029e4:	f00d fece 	bl	8010784 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	480a      	ldr	r0, [pc, #40]	@ (8002a14 <LED_Start+0xdc>)
 80029ec:	f00d fbc0 	bl	8010170 <HAL_TIM_PWM_Start>
		break;
 80029f0:	e00b      	b.n	8002a0a <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 80029f2:	f107 030c 	add.w	r3, r7, #12
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	4619      	mov	r1, r3
 80029fa:	4806      	ldr	r0, [pc, #24]	@ (8002a14 <LED_Start+0xdc>)
 80029fc:	f00d fec2 	bl	8010784 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4804      	ldr	r0, [pc, #16]	@ (8002a14 <LED_Start+0xdc>)
 8002a04:	f00d fbb4 	bl	8010170 <HAL_TIM_PWM_Start>
		break;
 8002a08:	bf00      	nop
}
 8002a0a:	bf00      	nop
 8002a0c:	3728      	adds	r7, #40	@ 0x28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	2000044c 	.word	0x2000044c

08002a18 <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(LED_TIMER, LED);
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4803      	ldr	r0, [pc, #12]	@ (8002a30 <LED_Stop+0x18>)
 8002a24:	f00d fcaa 	bl	801037c <HAL_TIM_PWM_Stop>
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	2000044c 	.word	0x2000044c

08002a34 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	460b      	mov	r3, r1
 8002a42:	72fb      	strb	r3, [r7, #11]
 8002a44:	4613      	mov	r3, r2
 8002a46:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	685c      	ldr	r4, [r3, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	68d8      	ldr	r0, [r3, #12]
 8002a50:	893b      	ldrh	r3, [r7, #8]
 8002a52:	7af9      	ldrb	r1, [r7, #11]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	47a0      	blx	r4
 8002a58:	6178      	str	r0, [r7, #20]

  return ret;
 8002a5a:	697b      	ldr	r3, [r7, #20]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd90      	pop	{r4, r7, pc}

08002a64 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	460b      	mov	r3, r1
 8002a72:	72fb      	strb	r3, [r7, #11]
 8002a74:	4613      	mov	r3, r2
 8002a76:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681c      	ldr	r4, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	68d8      	ldr	r0, [r3, #12]
 8002a80:	893b      	ldrh	r3, [r7, #8]
 8002a82:	7af9      	ldrb	r1, [r7, #11]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	47a0      	blx	r4
 8002a88:	6178      	str	r0, [r7, #20]

  return ret;
 8002a8a:	697b      	ldr	r3, [r7, #20]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd90      	pop	{r4, r7, pc}

08002a94 <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002aa0:	f107 020c 	add.w	r2, r7, #12
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	2112      	movs	r1, #18
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ffc3 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002aae:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002ab0:	f107 0210 	add.w	r2, r7, #16
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff ffbb 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <lsm6dsv16x_reset_set+0x3c>
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	e02d      	b.n	8002b2c <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	7b3b      	ldrb	r3, [r7, #12]
 8002adc:	f362 13c7 	bfi	r3, r2, #7, #1
 8002ae0:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	085b      	lsrs	r3, r3, #1
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	7b3b      	ldrb	r3, [r7, #12]
 8002aee:	f362 0300 	bfi	r3, r2, #0, #1
 8002af2:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	7c3b      	ldrb	r3, [r7, #16]
 8002afe:	f362 0382 	bfi	r3, r2, #2, #1
 8002b02:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002b04:	f107 020c 	add.w	r2, r7, #12
 8002b08:	2301      	movs	r3, #1
 8002b0a:	2112      	movs	r1, #18
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff ffa9 	bl	8002a64 <lsm6dsv16x_write_reg>
 8002b12:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002b14:	f107 0210 	add.w	r2, r7, #16
 8002b18:	2301      	movs	r3, #1
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff ffa1 	bl	8002a64 <lsm6dsv16x_write_reg>
 8002b22:	4602      	mov	r2, r0
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	4413      	add	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  return ret;
 8002b2a:	697b      	ldr	r3, [r7, #20]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002b3e:	f107 020c 	add.w	r2, r7, #12
 8002b42:	2301      	movs	r3, #1
 8002b44:	2112      	movs	r1, #18
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ff74 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002b4c:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002b4e:	f107 0210 	add.w	r2, r7, #16
 8002b52:	2301      	movs	r3, #1
 8002b54:	2101      	movs	r1, #1
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff ff6c 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	4413      	add	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <lsm6dsv16x_reset_get+0x3a>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	e033      	b.n	8002bd6 <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 8002b6e:	7b3b      	ldrb	r3, [r7, #12]
 8002b70:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	009a      	lsls	r2, r3, #2
 8002b78:	7b3b      	ldrb	r3, [r7, #12]
 8002b7a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	7c3a      	ldrb	r2, [r7, #16]
 8002b86:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d81c      	bhi.n	8002bcc <lsm6dsv16x_reset_get+0x98>
 8002b92:	a201      	add	r2, pc, #4	@ (adr r2, 8002b98 <lsm6dsv16x_reset_get+0x64>)
 8002b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b98:	08002bad 	.word	0x08002bad
 8002b9c:	08002bb5 	.word	0x08002bb5
 8002ba0:	08002bbd 	.word	0x08002bbd
 8002ba4:	08002bcd 	.word	0x08002bcd
 8002ba8:	08002bc5 	.word	0x08002bc5
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
      break;
 8002bb2:	e00f      	b.n	8002bd4 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]
      break;
 8002bba:	e00b      	b.n	8002bd4 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	701a      	strb	r2, [r3, #0]
      break;
 8002bc2:	e007      	b.n	8002bd4 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	701a      	strb	r2, [r3, #0]
      break;
 8002bca:	e003      	b.n	8002bd4 <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]
      break;
 8002bd2:	bf00      	nop
  }

  return ret;
 8002bd4:	697b      	ldr	r3, [r7, #20]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop

08002be0 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 8002bea:	2301      	movs	r3, #1
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	210f      	movs	r1, #15
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff1f 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002bf6:	60f8      	str	r0, [r7, #12]

  return ret;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002c0e:	f107 0210 	add.w	r2, r7, #16
 8002c12:	2301      	movs	r3, #1
 8002c14:	2110      	movs	r1, #16
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff ff0c 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002c1c:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <lsm6dsv16x_xl_data_rate_set+0x26>
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	e039      	b.n	8002c9c <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	7c3b      	ldrb	r3, [r7, #16]
 8002c32:	f362 0303 	bfi	r3, r2, #0, #4
 8002c36:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002c38:	f107 0210 	add.w	r2, r7, #16
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	2110      	movs	r1, #16
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ff0f 	bl	8002a64 <lsm6dsv16x_write_reg>
 8002c46:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <lsm6dsv16x_xl_data_rate_set+0x50>
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	e024      	b.n	8002c9c <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8002c58:	7cfb      	ldrb	r3, [r7, #19]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d01d      	beq.n	8002c9a <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002c5e:	f107 020c 	add.w	r2, r7, #12
 8002c62:	2301      	movs	r3, #1
 8002c64:	2162      	movs	r1, #98	@ 0x62
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff fee4 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	4413      	add	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	7b3b      	ldrb	r3, [r7, #12]
 8002c7e:	f362 0301 	bfi	r3, r2, #0, #2
 8002c82:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002c84:	f107 020c 	add.w	r2, r7, #12
 8002c88:	2301      	movs	r3, #1
 8002c8a:	2162      	movs	r1, #98	@ 0x62
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff fee9 	bl	8002a64 <lsm6dsv16x_write_reg>
 8002c92:	4602      	mov	r2, r0
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	4413      	add	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002c9a:	697b      	ldr	r3, [r7, #20]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002cb0:	f107 0208 	add.w	r2, r7, #8
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	2110      	movs	r1, #16
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff febb 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002cbe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	7a3b      	ldrb	r3, [r7, #8]
 8002cd0:	f362 1306 	bfi	r3, r2, #4, #3
 8002cd4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002cd6:	f107 0208 	add.w	r2, r7, #8
 8002cda:	2301      	movs	r3, #1
 8002cdc:	2110      	movs	r1, #16
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fec0 	bl	8002a64 <lsm6dsv16x_write_reg>
 8002ce4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002cfc:	f107 0210 	add.w	r2, r7, #16
 8002d00:	2301      	movs	r3, #1
 8002d02:	2111      	movs	r1, #17
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff fe95 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002d0a:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	7c3b      	ldrb	r3, [r7, #16]
 8002d16:	f362 0303 	bfi	r3, r2, #0, #4
 8002d1a:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002d1c:	f107 0210 	add.w	r2, r7, #16
 8002d20:	2301      	movs	r3, #1
 8002d22:	2111      	movs	r1, #17
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff fe9d 	bl	8002a64 <lsm6dsv16x_write_reg>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	4413      	add	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <lsm6dsv16x_gy_data_rate_set+0x4c>
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	e024      	b.n	8002d86 <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8002d42:	7cfb      	ldrb	r3, [r7, #19]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01d      	beq.n	8002d84 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002d48:	f107 020c 	add.w	r2, r7, #12
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	2162      	movs	r1, #98	@ 0x62
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff fe6f 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002d56:	4602      	mov	r2, r0
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8002d5e:	7cfb      	ldrb	r3, [r7, #19]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	7b3b      	ldrb	r3, [r7, #12]
 8002d68:	f362 0301 	bfi	r3, r2, #0, #2
 8002d6c:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002d6e:	f107 020c 	add.w	r2, r7, #12
 8002d72:	2301      	movs	r3, #1
 8002d74:	2162      	movs	r1, #98	@ 0x62
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff fe74 	bl	8002a64 <lsm6dsv16x_write_reg>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	4413      	add	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002d84:	697b      	ldr	r3, [r7, #20]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002d9a:	f107 0208 	add.w	r2, r7, #8
 8002d9e:	2301      	movs	r3, #1
 8002da0:	2111      	movs	r1, #17
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff fe46 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002da8:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10f      	bne.n	8002dd0 <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	7a3b      	ldrb	r3, [r7, #8]
 8002dba:	f362 1306 	bfi	r3, r2, #4, #3
 8002dbe:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8002dc0:	f107 0208 	add.w	r2, r7, #8
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	2111      	movs	r1, #17
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff fe4b 	bl	8002a64 <lsm6dsv16x_write_reg>
 8002dce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	460b      	mov	r3, r1
 8002de4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002de6:	f107 0208 	add.w	r2, r7, #8
 8002dea:	2301      	movs	r3, #1
 8002dec:	2112      	movs	r1, #18
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff fe20 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002df4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10f      	bne.n	8002e1c <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	7a3b      	ldrb	r3, [r7, #8]
 8002e06:	f362 1386 	bfi	r3, r2, #6, #1
 8002e0a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002e0c:	f107 0208 	add.w	r2, r7, #8
 8002e10:	2301      	movs	r3, #1
 8002e12:	2112      	movs	r1, #18
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff fe25 	bl	8002a64 <lsm6dsv16x_write_reg>
 8002e1a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d802      	bhi.n	8002e44 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	e015      	b.n	8002e70 <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8002e44:	f107 0208 	add.w	r2, r7, #8
 8002e48:	2301      	movs	r3, #1
 8002e4a:	2106      	movs	r1, #6
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff fdf1 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002e52:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8002e5e:	f107 0208 	add.w	r2, r7, #8
 8002e62:	2301      	movs	r3, #1
 8002e64:	2106      	movs	r1, #6
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fdfc 	bl	8002a64 <lsm6dsv16x_write_reg>
 8002e6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8002e84:	f107 0208 	add.w	r2, r7, #8
 8002e88:	2301      	movs	r3, #1
 8002e8a:	2115      	movs	r1, #21
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff fdd1 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002e92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10f      	bne.n	8002eba <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	7a3b      	ldrb	r3, [r7, #8]
 8002ea4:	f362 0303 	bfi	r3, r2, #0, #4
 8002ea8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8002eaa:	f107 0208 	add.w	r2, r7, #8
 8002eae:	2301      	movs	r3, #1
 8002eb0:	2115      	movs	r1, #21
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff fdd6 	bl	8002a64 <lsm6dsv16x_write_reg>
 8002eb8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002eba:	68fb      	ldr	r3, [r7, #12]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8002ed0:	f107 0208 	add.w	r2, r7, #8
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	2117      	movs	r1, #23
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff fdab 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002ede:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10f      	bne.n	8002f06 <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	7a3b      	ldrb	r3, [r7, #8]
 8002ef0:	f362 0301 	bfi	r3, r2, #0, #2
 8002ef4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8002ef6:	f107 0208 	add.w	r2, r7, #8
 8002efa:	2301      	movs	r3, #1
 8002efc:	2117      	movs	r1, #23
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fdb0 	bl	8002a64 <lsm6dsv16x_write_reg>
 8002f04:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002f1a:	f107 0210 	add.w	r2, r7, #16
 8002f1e:	2301      	movs	r3, #1
 8002f20:	210d      	movs	r1, #13
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff fd86 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002f28:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <lsm6dsv16x_pin_int1_route_set+0x24>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	e0a0      	b.n	8003076 <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	7c3b      	ldrb	r3, [r7, #16]
 8002f40:	f362 0300 	bfi	r3, r2, #0, #1
 8002f44:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	7c3b      	ldrb	r3, [r7, #16]
 8002f52:	f362 0341 	bfi	r3, r2, #1, #1
 8002f56:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	7c3b      	ldrb	r3, [r7, #16]
 8002f64:	f362 03c3 	bfi	r3, r2, #3, #1
 8002f68:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	7c3b      	ldrb	r3, [r7, #16]
 8002f76:	f362 1304 	bfi	r3, r2, #4, #1
 8002f7a:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	7c3b      	ldrb	r3, [r7, #16]
 8002f88:	f362 1345 	bfi	r3, r2, #5, #1
 8002f8c:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	7c3b      	ldrb	r3, [r7, #16]
 8002f9a:	f362 1386 	bfi	r3, r2, #6, #1
 8002f9e:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002fa0:	f107 0210 	add.w	r2, r7, #16
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	210d      	movs	r1, #13
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff fd5b 	bl	8002a64 <lsm6dsv16x_write_reg>
 8002fae:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <lsm6dsv16x_pin_int1_route_set+0xaa>
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	e05d      	b.n	8003076 <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002fba:	f107 020c 	add.w	r2, r7, #12
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	215e      	movs	r1, #94	@ 0x5e
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fd36 	bl	8002a34 <lsm6dsv16x_read_reg>
 8002fc8:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <lsm6dsv16x_pin_int1_route_set+0xc4>
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	e050      	b.n	8003076 <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	785b      	ldrb	r3, [r3, #1]
 8002fd8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	7b3b      	ldrb	r3, [r7, #12]
 8002fe0:	f362 0300 	bfi	r3, r2, #0, #1
 8002fe4:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	785b      	ldrb	r3, [r3, #1]
 8002fea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	7b3b      	ldrb	r3, [r7, #12]
 8002ff2:	f362 0341 	bfi	r3, r2, #1, #1
 8002ff6:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	785b      	ldrb	r3, [r3, #1]
 8002ffc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003000:	b2da      	uxtb	r2, r3
 8003002:	7b3b      	ldrb	r3, [r7, #12]
 8003004:	f362 0382 	bfi	r3, r2, #2, #1
 8003008:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	785b      	ldrb	r3, [r3, #1]
 800300e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003012:	b2da      	uxtb	r2, r3
 8003014:	7b3b      	ldrb	r3, [r7, #12]
 8003016:	f362 1386 	bfi	r3, r2, #6, #1
 800301a:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	785b      	ldrb	r3, [r3, #1]
 8003020:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003024:	b2da      	uxtb	r2, r3
 8003026:	7b3b      	ldrb	r3, [r7, #12]
 8003028:	f362 03c3 	bfi	r3, r2, #3, #1
 800302c:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	785b      	ldrb	r3, [r3, #1]
 8003032:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003036:	b2da      	uxtb	r2, r3
 8003038:	7b3b      	ldrb	r3, [r7, #12]
 800303a:	f362 1345 	bfi	r3, r2, #5, #1
 800303e:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	785b      	ldrb	r3, [r3, #1]
 8003044:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003048:	b2da      	uxtb	r2, r3
 800304a:	7b3b      	ldrb	r3, [r7, #12]
 800304c:	f362 1304 	bfi	r3, r2, #4, #1
 8003050:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	789b      	ldrb	r3, [r3, #2]
 8003056:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800305a:	b2da      	uxtb	r2, r3
 800305c:	7b3b      	ldrb	r3, [r7, #12]
 800305e:	f362 13c7 	bfi	r3, r2, #7, #1
 8003062:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003064:	f107 020c 	add.w	r2, r7, #12
 8003068:	2301      	movs	r3, #1
 800306a:	215e      	movs	r1, #94	@ 0x5e
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff fcf9 	bl	8002a64 <lsm6dsv16x_write_reg>
 8003072:	6178      	str	r0, [r7, #20]

  return ret;
 8003074:	697b      	ldr	r3, [r7, #20]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b084      	sub	sp, #16
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	460b      	mov	r3, r1
 8003088:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 800308a:	f107 0208 	add.w	r2, r7, #8
 800308e:	2301      	movs	r3, #1
 8003090:	2113      	movs	r1, #19
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff fcce 	bl	8002a34 <lsm6dsv16x_read_reg>
 8003098:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10f      	bne.n	80030c0 <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	7a3b      	ldrb	r3, [r7, #8]
 80030aa:	f362 0300 	bfi	r3, r2, #0, #1
 80030ae:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 80030b0:	f107 0208 	add.w	r2, r7, #8
 80030b4:	2301      	movs	r3, #1
 80030b6:	2113      	movs	r1, #19
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff fcd3 	bl	8002a64 <lsm6dsv16x_write_reg>
 80030be:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80030c0:	68fb      	ldr	r3, [r7, #12]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 80030d6:	f107 0208 	add.w	r2, r7, #8
 80030da:	2301      	movs	r3, #1
 80030dc:	2107      	movs	r1, #7
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff fca8 	bl	8002a34 <lsm6dsv16x_read_reg>
 80030e4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d109      	bne.n	8003100 <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 80030f0:	f107 0208 	add.w	r2, r7, #8
 80030f4:	2301      	movs	r3, #1
 80030f6:	2107      	movs	r1, #7
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff fcb3 	bl	8002a64 <lsm6dsv16x_write_reg>
 80030fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	460b      	mov	r3, r1
 8003114:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003116:	f107 0208 	add.w	r2, r7, #8
 800311a:	2301      	movs	r3, #1
 800311c:	2109      	movs	r1, #9
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff fc88 	bl	8002a34 <lsm6dsv16x_read_reg>
 8003124:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10f      	bne.n	800314c <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	b2da      	uxtb	r2, r3
 8003134:	7a3b      	ldrb	r3, [r7, #8]
 8003136:	f362 0303 	bfi	r3, r2, #0, #4
 800313a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 800313c:	f107 0208 	add.w	r2, r7, #8
 8003140:	2301      	movs	r3, #1
 8003142:	2109      	movs	r1, #9
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff fc8d 	bl	8002a64 <lsm6dsv16x_write_reg>
 800314a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800314c:	68fb      	ldr	r3, [r7, #12]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003162:	f107 0208 	add.w	r2, r7, #8
 8003166:	2301      	movs	r3, #1
 8003168:	2109      	movs	r1, #9
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff fc62 	bl	8002a34 <lsm6dsv16x_read_reg>
 8003170:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10f      	bne.n	8003198 <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	b2da      	uxtb	r2, r3
 8003180:	7a3b      	ldrb	r3, [r7, #8]
 8003182:	f362 1307 	bfi	r3, r2, #4, #4
 8003186:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003188:	f107 0208 	add.w	r2, r7, #8
 800318c:	2301      	movs	r3, #1
 800318e:	2109      	movs	r1, #9
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff fc67 	bl	8002a64 <lsm6dsv16x_write_reg>
 8003196:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003198:	68fb      	ldr	r3, [r7, #12]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	460b      	mov	r3, r1
 80031ac:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 80031ae:	f107 0208 	add.w	r2, r7, #8
 80031b2:	2301      	movs	r3, #1
 80031b4:	210a      	movs	r1, #10
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fc3c 	bl	8002a34 <lsm6dsv16x_read_reg>
 80031bc:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10f      	bne.n	80031e4 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	7a3b      	ldrb	r3, [r7, #8]
 80031ce:	f362 0302 	bfi	r3, r2, #0, #3
 80031d2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 80031d4:	f107 0208 	add.w	r2, r7, #8
 80031d8:	2301      	movs	r3, #1
 80031da:	210a      	movs	r1, #10
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff fc41 	bl	8002a64 <lsm6dsv16x_write_reg>
 80031e2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031e4:	68fb      	ldr	r3, [r7, #12]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 80031fa:	f107 0208 	add.w	r2, r7, #8
 80031fe:	2301      	movs	r3, #1
 8003200:	2103      	movs	r1, #3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff fc16 	bl	8002a34 <lsm6dsv16x_read_reg>
 8003208:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10f      	bne.n	8003230 <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	b2da      	uxtb	r2, r3
 8003218:	7a3b      	ldrb	r3, [r7, #8]
 800321a:	f362 0300 	bfi	r3, r2, #0, #1
 800321e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8003220:	f107 0208 	add.w	r2, r7, #8
 8003224:	2301      	movs	r3, #1
 8003226:	2103      	movs	r1, #3
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff fc1b 	bl	8002a64 <lsm6dsv16x_write_reg>
 800322e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003230:	68fb      	ldr	r3, [r7, #12]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	461a      	mov	r2, r3
 8003246:	460b      	mov	r3, r1
 8003248:	72fb      	strb	r3, [r7, #11]
 800324a:	4613      	mov	r3, r2
 800324c:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 800324e:	2200      	movs	r2, #0
 8003250:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003258:	f008 fb30 	bl	800b8bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800325c:	f107 010b 	add.w	r1, r7, #11
 8003260:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003264:	2201      	movs	r2, #1
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f00b fdb1 	bl	800edce <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 800326c:	893a      	ldrh	r2, [r7, #8]
 800326e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f00b fdaa 	bl	800edce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 800327a:	2201      	movs	r2, #1
 800327c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003284:	f008 fb1a 	bl	800b8bc <HAL_GPIO_WritePin>
	return 0;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	461a      	mov	r2, r3
 800329e:	460b      	mov	r3, r1
 80032a0:	72fb      	strb	r3, [r7, #11]
 80032a2:	4613      	mov	r3, r2
 80032a4:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 80032a6:	7afb      	ldrb	r3, [r7, #11]
 80032a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 80032b0:	2200      	movs	r2, #0
 80032b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032ba:	f008 faff 	bl	800b8bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80032be:	f107 010b 	add.w	r1, r7, #11
 80032c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032c6:	2201      	movs	r2, #1
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f00b fd80 	bl	800edce <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 80032ce:	893a      	ldrh	r2, [r7, #8]
 80032d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f00b feef 	bl	800f0ba <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 80032dc:	2201      	movs	r2, #1
 80032de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032e6:	f008 fae9 	bl	800b8bc <HAL_GPIO_WritePin>
	return 0;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f6:	b091      	sub	sp, #68	@ 0x44
 80032f8:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032fa:	f006 f8ae 	bl	800945a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032fe:	f000 f9c7 	bl	8003690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003302:	f000 fe9b 	bl	800403c <MX_GPIO_Init>
  MX_DMA_Init();
 8003306:	f000 fe6b 	bl	8003fe0 <MX_DMA_Init>
  MX_QUADSPI_Init();
 800330a:	f000 faed 	bl	80038e8 <MX_QUADSPI_Init>
  MX_SPI2_Init();
 800330e:	f000 fba3 	bl	8003a58 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8003312:	f000 fe35 	bl	8003f80 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8003316:	f000 fa0d 	bl	8003734 <MX_ADC1_Init>
  MX_I2C3_Init();
 800331a:	f000 faa5 	bl	8003868 <MX_I2C3_Init>
  MX_TIM2_Init();
 800331e:	f000 fcbf 	bl	8003ca0 <MX_TIM2_Init>
  MX_UART4_Init();
 8003322:	f000 fdfd 	bl	8003f20 <MX_UART4_Init>
  MX_TIM1_Init();
 8003326:	f000 fc13 	bl	8003b50 <MX_TIM1_Init>
  MX_CRC_Init();
 800332a:	f000 fa7b 	bl	8003824 <MX_CRC_Init>
  MX_TIM4_Init();
 800332e:	f000 fd83 	bl	8003e38 <MX_TIM4_Init>
  MX_RTC_Init();
 8003332:	f000 faff 	bl	8003934 <MX_RTC_Init>
  MX_SPI3_Init();
 8003336:	f000 fbcd 	bl	8003ad4 <MX_SPI3_Init>
  MX_TIM3_Init();
 800333a:	f000 fd05 	bl	8003d48 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	System_Init();
 800333e:	f7ff f88d 	bl	800245c <System_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state)
 8003342:	4b83      	ldr	r3, [pc, #524]	@ (8003550 <main+0x25c>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b03      	cmp	r3, #3
 8003348:	f200 818f 	bhi.w	800366a <main+0x376>
 800334c:	a201      	add	r2, pc, #4	@ (adr r2, 8003354 <main+0x60>)
 800334e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003352:	bf00      	nop
 8003354:	08003365 	.word	0x08003365
 8003358:	080033ff 	.word	0x080033ff
 800335c:	0800340b 	.word	0x0800340b
 8003360:	0800366b 	.word	0x0800366b
		{
		case IDLE:
        if(flags.MQTT_Message_Rx)
 8003364:	4b7b      	ldr	r3, [pc, #492]	@ (8003554 <main+0x260>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <main+0x8c>
        {
            SIM_Parse_Command();
 8003372:	f7fd ff8f 	bl	8001294 <SIM_Parse_Command>
            flags.MQTT_Message_Rx = 0;
 8003376:	4a77      	ldr	r2, [pc, #476]	@ (8003554 <main+0x260>)
 8003378:	7813      	ldrb	r3, [r2, #0]
 800337a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800337e:	7013      	strb	r3, [r2, #0]
        }
        if(flags.CMD.Start_Meas)
 8003380:	4b74      	ldr	r3, [pc, #464]	@ (8003554 <main+0x260>)
 8003382:	789b      	ldrb	r3, [r3, #2]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d008      	beq.n	80033a0 <main+0xac>
        {
            state = MEASURE_INIT_STATE;
 800338e:	4b70      	ldr	r3, [pc, #448]	@ (8003550 <main+0x25c>)
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]
            flags.CMD.Start_Meas = 0;
 8003394:	4a6f      	ldr	r2, [pc, #444]	@ (8003554 <main+0x260>)
 8003396:	7893      	ldrb	r3, [r2, #2]
 8003398:	f023 0320 	bic.w	r3, r3, #32
 800339c:	7093      	strb	r3, [r2, #2]
        else if(flags.CMD.Ping)
        {
            SIM_Send_Infos();
            flags.CMD.Ping = 0;
        }
        break;
 800339e:	e166      	b.n	800366e <main+0x37a>
        else if(flags.CMD.Set_Config)
 80033a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003554 <main+0x260>)
 80033a2:	789b      	ldrb	r3, [r3, #2]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <main+0xca>
            Apply_Config();
 80033ae:	f001 fe47 	bl	8005040 <Apply_Config>
            flags.CMD.Set_Config = 0;
 80033b2:	4a68      	ldr	r2, [pc, #416]	@ (8003554 <main+0x260>)
 80033b4:	7893      	ldrb	r3, [r2, #2]
 80033b6:	f023 0310 	bic.w	r3, r3, #16
 80033ba:	7093      	strb	r3, [r2, #2]
        break;
 80033bc:	e157      	b.n	800366e <main+0x37a>
        else if(flags.CMD.Start_OTA)
 80033be:	4b65      	ldr	r3, [pc, #404]	@ (8003554 <main+0x260>)
 80033c0:	789b      	ldrb	r3, [r3, #2]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <main+0xea>
            state = OTA_STATE;
 80033cc:	4b60      	ldr	r3, [pc, #384]	@ (8003550 <main+0x25c>)
 80033ce:	2203      	movs	r2, #3
 80033d0:	701a      	strb	r2, [r3, #0]
            flags.CMD.Start_OTA = 0;
 80033d2:	4a60      	ldr	r2, [pc, #384]	@ (8003554 <main+0x260>)
 80033d4:	7893      	ldrb	r3, [r2, #2]
 80033d6:	f023 0304 	bic.w	r3, r3, #4
 80033da:	7093      	strb	r3, [r2, #2]
        break;
 80033dc:	e147      	b.n	800366e <main+0x37a>
        else if(flags.CMD.Ping)
 80033de:	4b5d      	ldr	r3, [pc, #372]	@ (8003554 <main+0x260>)
 80033e0:	789b      	ldrb	r3, [r3, #2]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8140 	beq.w	800366e <main+0x37a>
            SIM_Send_Infos();
 80033ee:	f7fe f93d 	bl	800166c <SIM_Send_Infos>
            flags.CMD.Ping = 0;
 80033f2:	4a58      	ldr	r2, [pc, #352]	@ (8003554 <main+0x260>)
 80033f4:	7893      	ldrb	r3, [r2, #2]
 80033f6:	f023 0308 	bic.w	r3, r3, #8
 80033fa:	7093      	strb	r3, [r2, #2]
        break;
 80033fc:	e137      	b.n	800366e <main+0x37a>

		case MEASURE_INIT_STATE:
			Start_Measure();
 80033fe:	f001 f997 	bl	8004730 <Start_Measure>
			state = MEASURING_STATE;
 8003402:	4b53      	ldr	r3, [pc, #332]	@ (8003550 <main+0x25c>)
 8003404:	2202      	movs	r2, #2
 8003406:	701a      	strb	r2, [r3, #0]
        break;
 8003408:	e134      	b.n	8003674 <main+0x380>

		case MEASURING_STATE:
        if(flags.ADC_Complete && flags.ACC_Complete)
 800340a:	4b52      	ldr	r3, [pc, #328]	@ (8003554 <main+0x260>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 812c 	beq.w	8003672 <main+0x37e>
 800341a:	4b4e      	ldr	r3, [pc, #312]	@ (8003554 <main+0x260>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8124 	beq.w	8003672 <main+0x37e>
        {
            Save_Data();
 800342a:	f000 ff03 	bl	8004234 <Save_Data>
            if(flags.BC_Interrupt)
 800342e:	4b49      	ldr	r3, [pc, #292]	@ (8003554 <main+0x260>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d010      	beq.n	800345e <main+0x16a>
            {
                BC_Read_Flags(&sys.BC_Flags);
 800343c:	4846      	ldr	r0, [pc, #280]	@ (8003558 <main+0x264>)
 800343e:	f7fe fad3 	bl	80019e8 <BC_Read_Flags>
                BC_Manage_Interrupts(sys.BC_Flags);
 8003442:	4b46      	ldr	r3, [pc, #280]	@ (800355c <main+0x268>)
 8003444:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8003448:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800344c:	4610      	mov	r0, r2
 800344e:	4619      	mov	r1, r3
 8003450:	f7fe fb78 	bl	8001b44 <BC_Manage_Interrupts>
                flags.BC_Interrupt = 0;
 8003454:	4a3f      	ldr	r2, [pc, #252]	@ (8003554 <main+0x260>)
 8003456:	7813      	ldrb	r3, [r2, #0]
 8003458:	f023 0320 	bic.w	r3, r3, #32
 800345c:	7013      	strb	r3, [r2, #0]
            }
            if(flags.MQTT_Message_Rx)
 800345e:	4b3d      	ldr	r3, [pc, #244]	@ (8003554 <main+0x260>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d006      	beq.n	800347a <main+0x186>
            {
                SIM_Parse_Command();
 800346c:	f7fd ff12 	bl	8001294 <SIM_Parse_Command>
                flags.MQTT_Message_Rx = 0;
 8003470:	4a38      	ldr	r2, [pc, #224]	@ (8003554 <main+0x260>)
 8003472:	7813      	ldrb	r3, [r2, #0]
 8003474:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003478:	7013      	strb	r3, [r2, #0]
            }
            if(flags.CMD.Data_Request)
 800347a:	4b36      	ldr	r3, [pc, #216]	@ (8003554 <main+0x260>)
 800347c:	789b      	ldrb	r3, [r3, #2]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d04c      	beq.n	8003522 <main+0x22e>
            {
                sprintf(MQTT_Logging, "%u:%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, Last_Pressure, Last_Volume, Last_Acceleration.x, Last_Acceleration.y, Last_Acceleration.z, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 8003488:	4b35      	ldr	r3, [pc, #212]	@ (8003560 <main+0x26c>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	469c      	mov	ip, r3
 800348e:	4b35      	ldr	r3, [pc, #212]	@ (8003564 <main+0x270>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	469e      	mov	lr, r3
 8003494:	4b34      	ldr	r3, [pc, #208]	@ (8003568 <main+0x274>)
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	4b34      	ldr	r3, [pc, #208]	@ (800356c <main+0x278>)
 800349c:	885b      	ldrh	r3, [r3, #2]
 800349e:	4619      	mov	r1, r3
 80034a0:	4b32      	ldr	r3, [pc, #200]	@ (800356c <main+0x278>)
 80034a2:	889b      	ldrh	r3, [r3, #4]
 80034a4:	4618      	mov	r0, r3
 80034a6:	4b31      	ldr	r3, [pc, #196]	@ (800356c <main+0x278>)
 80034a8:	88db      	ldrh	r3, [r3, #6]
 80034aa:	461c      	mov	r4, r3
 80034ac:	4b30      	ldr	r3, [pc, #192]	@ (8003570 <main+0x27c>)
 80034ae:	88db      	ldrh	r3, [r3, #6]
 80034b0:	461d      	mov	r5, r3
 80034b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003570 <main+0x27c>)
 80034b4:	891b      	ldrh	r3, [r3, #8]
 80034b6:	461e      	mov	r6, r3
 80034b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003570 <main+0x27c>)
 80034ba:	895b      	ldrh	r3, [r3, #10]
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	4b2c      	ldr	r3, [pc, #176]	@ (8003570 <main+0x27c>)
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003570 <main+0x27c>)
 80034c6:	885b      	ldrh	r3, [r3, #2]
 80034c8:	607b      	str	r3, [r7, #4]
 80034ca:	4b29      	ldr	r3, [pc, #164]	@ (8003570 <main+0x27c>)
 80034cc:	889b      	ldrh	r3, [r3, #4]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	4b28      	ldr	r3, [pc, #160]	@ (8003574 <main+0x280>)
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	9308      	str	r3, [sp, #32]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	9307      	str	r3, [sp, #28]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	9306      	str	r3, [sp, #24]
 80034e6:	9605      	str	r6, [sp, #20]
 80034e8:	9504      	str	r5, [sp, #16]
 80034ea:	9403      	str	r4, [sp, #12]
 80034ec:	9002      	str	r0, [sp, #8]
 80034ee:	9101      	str	r1, [sp, #4]
 80034f0:	9200      	str	r2, [sp, #0]
 80034f2:	4673      	mov	r3, lr
 80034f4:	4662      	mov	r2, ip
 80034f6:	4920      	ldr	r1, [pc, #128]	@ (8003578 <main+0x284>)
 80034f8:	4820      	ldr	r0, [pc, #128]	@ (800357c <main+0x288>)
 80034fa:	f00f fdb7 	bl	801306c <siprintf>
                SIM_publish_MQTT_Message(NULL, MQTT_Logging);
 80034fe:	491f      	ldr	r1, [pc, #124]	@ (800357c <main+0x288>)
 8003500:	2000      	movs	r0, #0
 8003502:	f7fe f83d 	bl	8001580 <SIM_publish_MQTT_Message>
                sys.SIM_Prompt_Status = HAL_GetTick();
 8003506:	f006 f811 	bl	800952c <HAL_GetTick>
 800350a:	4603      	mov	r3, r0
 800350c:	4a13      	ldr	r2, [pc, #76]	@ (800355c <main+0x268>)
 800350e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003512:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
                flags.CMD.Data_Request = 0;
 8003516:	4a0f      	ldr	r2, [pc, #60]	@ (8003554 <main+0x260>)
 8003518:	7893      	ldrb	r3, [r2, #2]
 800351a:	f023 0301 	bic.w	r3, r3, #1
 800351e:	7093      	strb	r3, [r2, #2]
 8003520:	e075      	b.n	800360e <main+0x31a>
            }
            else if(flags.CMD.Idle)
 8003522:	4b0c      	ldr	r3, [pc, #48]	@ (8003554 <main+0x260>)
 8003524:	789b      	ldrb	r3, [r3, #2]
 8003526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d02b      	beq.n	8003588 <main+0x294>
            {
                state = IDLE;
 8003530:	4b07      	ldr	r3, [pc, #28]	@ (8003550 <main+0x25c>)
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
                HAL_ADC_Stop_DMA(PRESSURE_ADC);
 8003536:	4812      	ldr	r0, [pc, #72]	@ (8003580 <main+0x28c>)
 8003538:	f006 fc58 	bl	8009dec <HAL_ADC_Stop_DMA>
                HAL_TIM_OC_Stop_IT(ADC_TIMER, TIM_CHANNEL_3);
 800353c:	2108      	movs	r1, #8
 800353e:	4811      	ldr	r0, [pc, #68]	@ (8003584 <main+0x290>)
 8003540:	f00c fcd0 	bl	800fee4 <HAL_TIM_OC_Stop_IT>
                flags.CMD.Idle = 0;
 8003544:	4a03      	ldr	r2, [pc, #12]	@ (8003554 <main+0x260>)
 8003546:	7893      	ldrb	r3, [r2, #2]
 8003548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800354c:	7093      	strb	r3, [r2, #2]
 800354e:	e05e      	b.n	800360e <main+0x31a>
 8003550:	2000071c 	.word	0x2000071c
 8003554:	20001c30 	.word	0x20001c30
 8003558:	20001758 	.word	0x20001758
 800355c:	20000720 	.word	0x20000720
 8003560:	20001c34 	.word	0x20001c34
 8003564:	200046d4 	.word	0x200046d4
 8003568:	200046d6 	.word	0x200046d6
 800356c:	200046d8 	.word	0x200046d8
 8003570:	20003e04 	.word	0x20003e04
 8003574:	200046e0 	.word	0x200046e0
 8003578:	08014610 	.word	0x08014610
 800357c:	200046e4 	.word	0x200046e4
 8003580:	200001f8 	.word	0x200001f8
 8003584:	20000530 	.word	0x20000530
            }
            else if(flags.CMD.Measure_Request)
 8003588:	4b3b      	ldr	r3, [pc, #236]	@ (8003678 <main+0x384>)
 800358a:	789b      	ldrb	r3, [r3, #2]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d03b      	beq.n	800360e <main+0x31a>
            {
                if(!flags.TCP_isSending)
 8003596:	4b38      	ldr	r3, [pc, #224]	@ (8003678 <main+0x384>)
 8003598:	785b      	ldrb	r3, [r3, #1]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d134      	bne.n	800360e <main+0x31a>
                {
                    Send_Measure_Addr = Send_Measure_Chunk(sys.RAM_Buffer_Base_tosend, sys.Inactive_RAM_Len, Send_Measure_Addr);
 80035a4:	4b35      	ldr	r3, [pc, #212]	@ (800367c <main+0x388>)
 80035a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035ae:	4a33      	ldr	r2, [pc, #204]	@ (800367c <main+0x388>)
 80035b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035b4:	f8d2 10b8 	ldr.w	r1, [r2, #184]	@ 0xb8
 80035b8:	4a31      	ldr	r2, [pc, #196]	@ (8003680 <main+0x38c>)
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 fa2d 	bl	8004a1c <Send_Measure_Chunk>
 80035c2:	4603      	mov	r3, r0
 80035c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003680 <main+0x38c>)
 80035c6:	6013      	str	r3, [r2, #0]
                    if(flags.TCP_ReadytoSend)
 80035c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003678 <main+0x384>)
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01b      	beq.n	800360e <main+0x31a>
                    {
                        SIM_Send_Command_DMA(MQTT_Logging);
 80035d6:	482b      	ldr	r0, [pc, #172]	@ (8003684 <main+0x390>)
 80035d8:	f7fd fdc0 	bl	800115c <SIM_Send_Command_DMA>
                        flags.TCP_isSending = 1;
 80035dc:	4a26      	ldr	r2, [pc, #152]	@ (8003678 <main+0x384>)
 80035de:	7853      	ldrb	r3, [r2, #1]
 80035e0:	f043 0304 	orr.w	r3, r3, #4
 80035e4:	7053      	strb	r3, [r2, #1]
                        flags.TCP_ReadytoSend = 0;
 80035e6:	4a24      	ldr	r2, [pc, #144]	@ (8003678 <main+0x384>)
 80035e8:	7853      	ldrb	r3, [r2, #1]
 80035ea:	f023 0302 	bic.w	r3, r3, #2
 80035ee:	7053      	strb	r3, [r2, #1]
                        if (Send_Measure_Addr == 0) 
 80035f0:	4b23      	ldr	r3, [pc, #140]	@ (8003680 <main+0x38c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <main+0x31a>
                        {
                            memset(tcp_chunk, 0, 1460);
 80035f8:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80035fc:	2100      	movs	r1, #0
 80035fe:	4822      	ldr	r0, [pc, #136]	@ (8003688 <main+0x394>)
 8003600:	f00f fd94 	bl	801312c <memset>
                            flags.CMD.Measure_Request = 0;
 8003604:	4a1c      	ldr	r2, [pc, #112]	@ (8003678 <main+0x384>)
 8003606:	7893      	ldrb	r3, [r2, #2]
 8003608:	f023 0302 	bic.w	r3, r3, #2
 800360c:	7093      	strb	r3, [r2, #2]
                        }
                    }
                }
            }
            if(flags.MQTT_ReadytoSend)
 800360e:	4b1a      	ldr	r3, [pc, #104]	@ (8003678 <main+0x384>)
 8003610:	785b      	ldrb	r3, [r3, #1]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d007      	beq.n	800362c <main+0x338>
            {
                SIM_Send_Command_DMA(MQTT_Logging);
 800361c:	4819      	ldr	r0, [pc, #100]	@ (8003684 <main+0x390>)
 800361e:	f7fd fd9d 	bl	800115c <SIM_Send_Command_DMA>
                flags.MQTT_ReadytoSend = 0;
 8003622:	4a15      	ldr	r2, [pc, #84]	@ (8003678 <main+0x384>)
 8003624:	7853      	ldrb	r3, [r2, #1]
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	7053      	strb	r3, [r2, #1]
            }
            if(sys.SIM_Prompt_Status > 0 && (HAL_GetTick() - sys.SIM_Prompt_Status) > SIM_PROMPT_TIMEOUT_MS)
 800362c:	4b13      	ldr	r3, [pc, #76]	@ (800367c <main+0x388>)
 800362e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003632:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01b      	beq.n	8003672 <main+0x37e>
 800363a:	f005 ff77 	bl	800952c <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	4b0e      	ldr	r3, [pc, #56]	@ (800367c <main+0x388>)
 8003642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003646:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003650:	4293      	cmp	r3, r2
 8003652:	d90e      	bls.n	8003672 <main+0x37e>
            {
                SIM_Send_Command_DMA("AT+SMCONN\r");
 8003654:	480d      	ldr	r0, [pc, #52]	@ (800368c <main+0x398>)
 8003656:	f7fd fd81 	bl	800115c <SIM_Send_Command_DMA>
                sys.SIM_Prompt_Status = 0;
 800365a:	4b08      	ldr	r3, [pc, #32]	@ (800367c <main+0x388>)
 800365c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003660:	461a      	mov	r2, r3
 8003662:	2300      	movs	r3, #0
 8003664:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc
            }
        }
        break;
 8003668:	e003      	b.n	8003672 <main+0x37e>

		case OTA_STATE:
        break;

		default:
			  break;
 800366a:	bf00      	nop
 800366c:	e669      	b.n	8003342 <main+0x4e>
        break;
 800366e:	bf00      	nop
 8003670:	e667      	b.n	8003342 <main+0x4e>
        break;
 8003672:	bf00      	nop
		switch(state)
 8003674:	e665      	b.n	8003342 <main+0x4e>
 8003676:	bf00      	nop
 8003678:	20001c30 	.word	0x20001c30
 800367c:	20000720 	.word	0x20000720
 8003680:	20004e88 	.word	0x20004e88
 8003684:	200046e4 	.word	0x200046e4
 8003688:	20004e8c 	.word	0x20004e8c
 800368c:	08014638 	.word	0x08014638

08003690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b096      	sub	sp, #88	@ 0x58
 8003694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003696:	f107 0314 	add.w	r3, r7, #20
 800369a:	2244      	movs	r2, #68	@ 0x44
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f00f fd44 	bl	801312c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036a4:	463b      	mov	r3, r7
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	605a      	str	r2, [r3, #4]
 80036ac:	609a      	str	r2, [r3, #8]
 80036ae:	60da      	str	r2, [r3, #12]
 80036b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80036b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80036b6:	f008 ff0f 	bl	800c4d8 <HAL_PWREx_ControlVoltageScaling>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80036c0:	f000 fdb2 	bl	8004228 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80036c4:	2309      	movs	r3, #9
 80036c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80036ce:	2301      	movs	r3, #1
 80036d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036d2:	2302      	movs	r3, #2
 80036d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036d6:	2303      	movs	r3, #3
 80036d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80036da:	2301      	movs	r3, #1
 80036dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80036de:	2314      	movs	r3, #20
 80036e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80036e2:	2307      	movs	r3, #7
 80036e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80036e6:	2302      	movs	r3, #2
 80036e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80036ea:	2302      	movs	r3, #2
 80036ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036ee:	f107 0314 	add.w	r3, r7, #20
 80036f2:	4618      	mov	r0, r3
 80036f4:	f009 fba8 	bl	800ce48 <HAL_RCC_OscConfig>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80036fe:	f000 fd93 	bl	8004228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003702:	230f      	movs	r3, #15
 8003704:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003706:	2303      	movs	r3, #3
 8003708:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003716:	463b      	mov	r3, r7
 8003718:	2104      	movs	r1, #4
 800371a:	4618      	mov	r0, r3
 800371c:	f009 ff70 	bl	800d600 <HAL_RCC_ClockConfig>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003726:	f000 fd7f 	bl	8004228 <Error_Handler>
  }
}
 800372a:	bf00      	nop
 800372c:	3758      	adds	r7, #88	@ 0x58
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	@ 0x28
 8003738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800373a:	f107 031c 	add.w	r3, r7, #28
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	611a      	str	r2, [r3, #16]
 8003754:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003756:	4b30      	ldr	r3, [pc, #192]	@ (8003818 <MX_ADC1_Init+0xe4>)
 8003758:	4a30      	ldr	r2, [pc, #192]	@ (800381c <MX_ADC1_Init+0xe8>)
 800375a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800375c:	4b2e      	ldr	r3, [pc, #184]	@ (8003818 <MX_ADC1_Init+0xe4>)
 800375e:	2200      	movs	r2, #0
 8003760:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003762:	4b2d      	ldr	r3, [pc, #180]	@ (8003818 <MX_ADC1_Init+0xe4>)
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003768:	4b2b      	ldr	r3, [pc, #172]	@ (8003818 <MX_ADC1_Init+0xe4>)
 800376a:	2200      	movs	r2, #0
 800376c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800376e:	4b2a      	ldr	r3, [pc, #168]	@ (8003818 <MX_ADC1_Init+0xe4>)
 8003770:	2200      	movs	r2, #0
 8003772:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003774:	4b28      	ldr	r3, [pc, #160]	@ (8003818 <MX_ADC1_Init+0xe4>)
 8003776:	2208      	movs	r2, #8
 8003778:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800377a:	4b27      	ldr	r3, [pc, #156]	@ (8003818 <MX_ADC1_Init+0xe4>)
 800377c:	2200      	movs	r2, #0
 800377e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003780:	4b25      	ldr	r3, [pc, #148]	@ (8003818 <MX_ADC1_Init+0xe4>)
 8003782:	2200      	movs	r2, #0
 8003784:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003786:	4b24      	ldr	r3, [pc, #144]	@ (8003818 <MX_ADC1_Init+0xe4>)
 8003788:	2201      	movs	r2, #1
 800378a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800378c:	4b22      	ldr	r3, [pc, #136]	@ (8003818 <MX_ADC1_Init+0xe4>)
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8003794:	4b20      	ldr	r3, [pc, #128]	@ (8003818 <MX_ADC1_Init+0xe4>)
 8003796:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800379a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800379c:	4b1e      	ldr	r3, [pc, #120]	@ (8003818 <MX_ADC1_Init+0xe4>)
 800379e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80037a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003818 <MX_ADC1_Init+0xe4>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80037ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <MX_ADC1_Init+0xe4>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80037b2:	4b19      	ldr	r3, [pc, #100]	@ (8003818 <MX_ADC1_Init+0xe4>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80037ba:	4817      	ldr	r0, [pc, #92]	@ (8003818 <MX_ADC1_Init+0xe4>)
 80037bc:	f006 f90a 	bl	80099d4 <HAL_ADC_Init>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80037c6:	f000 fd2f 	bl	8004228 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80037ce:	f107 031c 	add.w	r3, r7, #28
 80037d2:	4619      	mov	r1, r3
 80037d4:	4810      	ldr	r0, [pc, #64]	@ (8003818 <MX_ADC1_Init+0xe4>)
 80037d6:	f007 f9c3 	bl	800ab60 <HAL_ADCEx_MultiModeConfigChannel>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80037e0:	f000 fd22 	bl	8004228 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80037e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003820 <MX_ADC1_Init+0xec>)
 80037e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80037e8:	2306      	movs	r3, #6
 80037ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80037f0:	237f      	movs	r3, #127	@ 0x7f
 80037f2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80037f4:	2304      	movs	r3, #4
 80037f6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037fc:	1d3b      	adds	r3, r7, #4
 80037fe:	4619      	mov	r1, r3
 8003800:	4805      	ldr	r0, [pc, #20]	@ (8003818 <MX_ADC1_Init+0xe4>)
 8003802:	f006 fb5f 	bl	8009ec4 <HAL_ADC_ConfigChannel>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800380c:	f000 fd0c 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003810:	bf00      	nop
 8003812:	3728      	adds	r7, #40	@ 0x28
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	200001f8 	.word	0x200001f8
 800381c:	50040000 	.word	0x50040000
 8003820:	25b00200 	.word	0x25b00200

08003824 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003828:	4b0d      	ldr	r3, [pc, #52]	@ (8003860 <MX_CRC_Init+0x3c>)
 800382a:	4a0e      	ldr	r2, [pc, #56]	@ (8003864 <MX_CRC_Init+0x40>)
 800382c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800382e:	4b0c      	ldr	r3, [pc, #48]	@ (8003860 <MX_CRC_Init+0x3c>)
 8003830:	2200      	movs	r2, #0
 8003832:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003834:	4b0a      	ldr	r3, [pc, #40]	@ (8003860 <MX_CRC_Init+0x3c>)
 8003836:	2200      	movs	r2, #0
 8003838:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800383a:	4b09      	ldr	r3, [pc, #36]	@ (8003860 <MX_CRC_Init+0x3c>)
 800383c:	2200      	movs	r2, #0
 800383e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003840:	4b07      	ldr	r3, [pc, #28]	@ (8003860 <MX_CRC_Init+0x3c>)
 8003842:	2200      	movs	r2, #0
 8003844:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003846:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <MX_CRC_Init+0x3c>)
 8003848:	2201      	movs	r2, #1
 800384a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800384c:	4804      	ldr	r0, [pc, #16]	@ (8003860 <MX_CRC_Init+0x3c>)
 800384e:	f007 fb63 	bl	800af18 <HAL_CRC_Init>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003858:	f000 fce6 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800385c:	bf00      	nop
 800385e:	bd80      	pop	{r7, pc}
 8003860:	200002a4 	.word	0x200002a4
 8003864:	40023000 	.word	0x40023000

08003868 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800386c:	4b1b      	ldr	r3, [pc, #108]	@ (80038dc <MX_I2C3_Init+0x74>)
 800386e:	4a1c      	ldr	r2, [pc, #112]	@ (80038e0 <MX_I2C3_Init+0x78>)
 8003870:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8003872:	4b1a      	ldr	r3, [pc, #104]	@ (80038dc <MX_I2C3_Init+0x74>)
 8003874:	4a1b      	ldr	r2, [pc, #108]	@ (80038e4 <MX_I2C3_Init+0x7c>)
 8003876:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003878:	4b18      	ldr	r3, [pc, #96]	@ (80038dc <MX_I2C3_Init+0x74>)
 800387a:	2200      	movs	r2, #0
 800387c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800387e:	4b17      	ldr	r3, [pc, #92]	@ (80038dc <MX_I2C3_Init+0x74>)
 8003880:	2201      	movs	r2, #1
 8003882:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003884:	4b15      	ldr	r3, [pc, #84]	@ (80038dc <MX_I2C3_Init+0x74>)
 8003886:	2200      	movs	r2, #0
 8003888:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800388a:	4b14      	ldr	r3, [pc, #80]	@ (80038dc <MX_I2C3_Init+0x74>)
 800388c:	2200      	movs	r2, #0
 800388e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003890:	4b12      	ldr	r3, [pc, #72]	@ (80038dc <MX_I2C3_Init+0x74>)
 8003892:	2200      	movs	r2, #0
 8003894:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003896:	4b11      	ldr	r3, [pc, #68]	@ (80038dc <MX_I2C3_Init+0x74>)
 8003898:	2200      	movs	r2, #0
 800389a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800389c:	4b0f      	ldr	r3, [pc, #60]	@ (80038dc <MX_I2C3_Init+0x74>)
 800389e:	2200      	movs	r2, #0
 80038a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80038a2:	480e      	ldr	r0, [pc, #56]	@ (80038dc <MX_I2C3_Init+0x74>)
 80038a4:	f008 f822 	bl	800b8ec <HAL_I2C_Init>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80038ae:	f000 fcbb 	bl	8004228 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80038b2:	2100      	movs	r1, #0
 80038b4:	4809      	ldr	r0, [pc, #36]	@ (80038dc <MX_I2C3_Init+0x74>)
 80038b6:	f008 fd69 	bl	800c38c <HAL_I2CEx_ConfigAnalogFilter>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80038c0:	f000 fcb2 	bl	8004228 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80038c4:	2100      	movs	r1, #0
 80038c6:	4805      	ldr	r0, [pc, #20]	@ (80038dc <MX_I2C3_Init+0x74>)
 80038c8:	f008 fdab 	bl	800c422 <HAL_I2CEx_ConfigDigitalFilter>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80038d2:	f000 fca9 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	200002c8 	.word	0x200002c8
 80038e0:	40005c00 	.word	0x40005c00
 80038e4:	10909cec 	.word	0x10909cec

080038e8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80038ec:	4b0f      	ldr	r3, [pc, #60]	@ (800392c <MX_QUADSPI_Init+0x44>)
 80038ee:	4a10      	ldr	r2, [pc, #64]	@ (8003930 <MX_QUADSPI_Init+0x48>)
 80038f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80038f2:	4b0e      	ldr	r3, [pc, #56]	@ (800392c <MX_QUADSPI_Init+0x44>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80038f8:	4b0c      	ldr	r3, [pc, #48]	@ (800392c <MX_QUADSPI_Init+0x44>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80038fe:	4b0b      	ldr	r3, [pc, #44]	@ (800392c <MX_QUADSPI_Init+0x44>)
 8003900:	2200      	movs	r2, #0
 8003902:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8003904:	4b09      	ldr	r3, [pc, #36]	@ (800392c <MX_QUADSPI_Init+0x44>)
 8003906:	2201      	movs	r2, #1
 8003908:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800390a:	4b08      	ldr	r3, [pc, #32]	@ (800392c <MX_QUADSPI_Init+0x44>)
 800390c:	2200      	movs	r2, #0
 800390e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003910:	4b06      	ldr	r3, [pc, #24]	@ (800392c <MX_QUADSPI_Init+0x44>)
 8003912:	2200      	movs	r2, #0
 8003914:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003916:	4805      	ldr	r0, [pc, #20]	@ (800392c <MX_QUADSPI_Init+0x44>)
 8003918:	f008 fe34 	bl	800c584 <HAL_QSPI_Init>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8003922:	f000 fc81 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	2000031c 	.word	0x2000031c
 8003930:	a0001000 	.word	0xa0001000

08003934 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b092      	sub	sp, #72	@ 0x48
 8003938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800393a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	60da      	str	r2, [r3, #12]
 8003948:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800394a:	2300      	movs	r3, #0
 800394c:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800394e:	1d3b      	adds	r3, r7, #4
 8003950:	222c      	movs	r2, #44	@ 0x2c
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f00f fbe9 	bl	801312c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800395a:	4b3c      	ldr	r3, [pc, #240]	@ (8003a4c <MX_RTC_Init+0x118>)
 800395c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a50 <MX_RTC_Init+0x11c>)
 800395e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003960:	4b3a      	ldr	r3, [pc, #232]	@ (8003a4c <MX_RTC_Init+0x118>)
 8003962:	2200      	movs	r2, #0
 8003964:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003966:	4b39      	ldr	r3, [pc, #228]	@ (8003a4c <MX_RTC_Init+0x118>)
 8003968:	227f      	movs	r2, #127	@ 0x7f
 800396a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800396c:	4b37      	ldr	r3, [pc, #220]	@ (8003a4c <MX_RTC_Init+0x118>)
 800396e:	22ff      	movs	r2, #255	@ 0xff
 8003970:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003972:	4b36      	ldr	r3, [pc, #216]	@ (8003a4c <MX_RTC_Init+0x118>)
 8003974:	2200      	movs	r2, #0
 8003976:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003978:	4b34      	ldr	r3, [pc, #208]	@ (8003a4c <MX_RTC_Init+0x118>)
 800397a:	2200      	movs	r2, #0
 800397c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800397e:	4b33      	ldr	r3, [pc, #204]	@ (8003a4c <MX_RTC_Init+0x118>)
 8003980:	2200      	movs	r2, #0
 8003982:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003984:	4b31      	ldr	r3, [pc, #196]	@ (8003a4c <MX_RTC_Init+0x118>)
 8003986:	2200      	movs	r2, #0
 8003988:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800398a:	4830      	ldr	r0, [pc, #192]	@ (8003a4c <MX_RTC_Init+0x118>)
 800398c:	f00a fd18 	bl	800e3c0 <HAL_RTC_Init>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8003996:	f000 fc47 	bl	8004228 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80039ac:	2300      	movs	r3, #0
 80039ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80039b0:	2300      	movs	r3, #0
 80039b2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80039b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80039b8:	2200      	movs	r2, #0
 80039ba:	4619      	mov	r1, r3
 80039bc:	4823      	ldr	r0, [pc, #140]	@ (8003a4c <MX_RTC_Init+0x118>)
 80039be:	f00a fd87 	bl	800e4d0 <HAL_RTC_SetTime>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80039c8:	f000 fc2e 	bl	8004228 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 1;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80039e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80039e8:	2200      	movs	r2, #0
 80039ea:	4619      	mov	r1, r3
 80039ec:	4817      	ldr	r0, [pc, #92]	@ (8003a4c <MX_RTC_Init+0x118>)
 80039ee:	f00a fe68 	bl	800e6c2 <HAL_RTC_SetDate>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80039f8:	f000 fc16 	bl	8004228 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8003a14:	4b0f      	ldr	r3, [pc, #60]	@ (8003a54 <MX_RTC_Init+0x120>)
 8003a16:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8003a26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003a2c:	1d3b      	adds	r3, r7, #4
 8003a2e:	2200      	movs	r2, #0
 8003a30:	4619      	mov	r1, r3
 8003a32:	4806      	ldr	r0, [pc, #24]	@ (8003a4c <MX_RTC_Init+0x118>)
 8003a34:	f00a fecc 	bl	800e7d0 <HAL_RTC_SetAlarm_IT>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8003a3e:	f000 fbf3 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003a42:	bf00      	nop
 8003a44:	3748      	adds	r7, #72	@ 0x48
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000360 	.word	0x20000360
 8003a50:	40002800 	.word	0x40002800
 8003a54:	80800080 	.word	0x80800080

08003a58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003acc <MX_SPI2_Init+0x74>)
 8003a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad0 <MX_SPI2_Init+0x78>)
 8003a60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a62:	4b1a      	ldr	r3, [pc, #104]	@ (8003acc <MX_SPI2_Init+0x74>)
 8003a64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a6a:	4b18      	ldr	r3, [pc, #96]	@ (8003acc <MX_SPI2_Init+0x74>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a70:	4b16      	ldr	r3, [pc, #88]	@ (8003acc <MX_SPI2_Init+0x74>)
 8003a72:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003a76:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a78:	4b14      	ldr	r3, [pc, #80]	@ (8003acc <MX_SPI2_Init+0x74>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a7e:	4b13      	ldr	r3, [pc, #76]	@ (8003acc <MX_SPI2_Init+0x74>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a84:	4b11      	ldr	r3, [pc, #68]	@ (8003acc <MX_SPI2_Init+0x74>)
 8003a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a8a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <MX_SPI2_Init+0x74>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a92:	4b0e      	ldr	r3, [pc, #56]	@ (8003acc <MX_SPI2_Init+0x74>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a98:	4b0c      	ldr	r3, [pc, #48]	@ (8003acc <MX_SPI2_Init+0x74>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <MX_SPI2_Init+0x74>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003aa4:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <MX_SPI2_Init+0x74>)
 8003aa6:	2207      	movs	r2, #7
 8003aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003aaa:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <MX_SPI2_Init+0x74>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ab0:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <MX_SPI2_Init+0x74>)
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003ab6:	4805      	ldr	r0, [pc, #20]	@ (8003acc <MX_SPI2_Init+0x74>)
 8003ab8:	f00b f8e6 	bl	800ec88 <HAL_SPI_Init>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003ac2:	f000 fbb1 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000384 	.word	0x20000384
 8003ad0:	40003800 	.word	0x40003800

08003ad4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b48 <MX_SPI3_Init+0x74>)
 8003ada:	4a1c      	ldr	r2, [pc, #112]	@ (8003b4c <MX_SPI3_Init+0x78>)
 8003adc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003ade:	4b1a      	ldr	r3, [pc, #104]	@ (8003b48 <MX_SPI3_Init+0x74>)
 8003ae0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ae4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003ae6:	4b18      	ldr	r3, [pc, #96]	@ (8003b48 <MX_SPI3_Init+0x74>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003aec:	4b16      	ldr	r3, [pc, #88]	@ (8003b48 <MX_SPI3_Init+0x74>)
 8003aee:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003af2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003af4:	4b14      	ldr	r3, [pc, #80]	@ (8003b48 <MX_SPI3_Init+0x74>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003afa:	4b13      	ldr	r3, [pc, #76]	@ (8003b48 <MX_SPI3_Init+0x74>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003b00:	4b11      	ldr	r3, [pc, #68]	@ (8003b48 <MX_SPI3_Init+0x74>)
 8003b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b06:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b08:	4b0f      	ldr	r3, [pc, #60]	@ (8003b48 <MX_SPI3_Init+0x74>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b48 <MX_SPI3_Init+0x74>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b14:	4b0c      	ldr	r3, [pc, #48]	@ (8003b48 <MX_SPI3_Init+0x74>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <MX_SPI3_Init+0x74>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003b20:	4b09      	ldr	r3, [pc, #36]	@ (8003b48 <MX_SPI3_Init+0x74>)
 8003b22:	2207      	movs	r2, #7
 8003b24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b26:	4b08      	ldr	r3, [pc, #32]	@ (8003b48 <MX_SPI3_Init+0x74>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003b2c:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <MX_SPI3_Init+0x74>)
 8003b2e:	2208      	movs	r2, #8
 8003b30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003b32:	4805      	ldr	r0, [pc, #20]	@ (8003b48 <MX_SPI3_Init+0x74>)
 8003b34:	f00b f8a8 	bl	800ec88 <HAL_SPI_Init>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8003b3e:	f000 fb73 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200003e8 	.word	0x200003e8
 8003b4c:	40003c00 	.word	0x40003c00

08003b50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b096      	sub	sp, #88	@ 0x58
 8003b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b56:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	605a      	str	r2, [r3, #4]
 8003b60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b62:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	605a      	str	r2, [r3, #4]
 8003b6c:	609a      	str	r2, [r3, #8]
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	611a      	str	r2, [r3, #16]
 8003b72:	615a      	str	r2, [r3, #20]
 8003b74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	222c      	movs	r2, #44	@ 0x2c
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f00f fad5 	bl	801312c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b82:	4b45      	ldr	r3, [pc, #276]	@ (8003c98 <MX_TIM1_Init+0x148>)
 8003b84:	4a45      	ldr	r2, [pc, #276]	@ (8003c9c <MX_TIM1_Init+0x14c>)
 8003b86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8003b88:	4b43      	ldr	r3, [pc, #268]	@ (8003c98 <MX_TIM1_Init+0x148>)
 8003b8a:	f240 623f 	movw	r2, #1599	@ 0x63f
 8003b8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b90:	4b41      	ldr	r3, [pc, #260]	@ (8003c98 <MX_TIM1_Init+0x148>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8003b96:	4b40      	ldr	r3, [pc, #256]	@ (8003c98 <MX_TIM1_Init+0x148>)
 8003b98:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8003b9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c98 <MX_TIM1_Init+0x148>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8003c98 <MX_TIM1_Init+0x148>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003baa:	4b3b      	ldr	r3, [pc, #236]	@ (8003c98 <MX_TIM1_Init+0x148>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003bb0:	4839      	ldr	r0, [pc, #228]	@ (8003c98 <MX_TIM1_Init+0x148>)
 8003bb2:	f00b ffec 	bl	800fb8e <HAL_TIM_OC_Init>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8003bbc:	f000 fb34 	bl	8004228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003bcc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4831      	ldr	r0, [pc, #196]	@ (8003c98 <MX_TIM1_Init+0x148>)
 8003bd4:	f00d fdea 	bl	80117ac <HAL_TIMEx_MasterConfigSynchronization>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003bde:	f000 fb23 	bl	8004228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003be2:	2300      	movs	r3, #0
 8003be4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bea:	2300      	movs	r3, #0
 8003bec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bfe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003c02:	2200      	movs	r2, #0
 8003c04:	4619      	mov	r1, r3
 8003c06:	4824      	ldr	r0, [pc, #144]	@ (8003c98 <MX_TIM1_Init+0x148>)
 8003c08:	f00c fca6 	bl	8010558 <HAL_TIM_OC_ConfigChannel>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003c12:	f000 fb09 	bl	8004228 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c16:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	481e      	ldr	r0, [pc, #120]	@ (8003c98 <MX_TIM1_Init+0x148>)
 8003c20:	f00c fc9a 	bl	8010558 <HAL_TIM_OC_ConfigChannel>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8003c2a:	f000 fafd 	bl	8004228 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c2e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003c32:	2208      	movs	r2, #8
 8003c34:	4619      	mov	r1, r3
 8003c36:	4818      	ldr	r0, [pc, #96]	@ (8003c98 <MX_TIM1_Init+0x148>)
 8003c38:	f00c fc8e 	bl	8010558 <HAL_TIM_OC_ConfigChannel>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003c42:	f000 faf1 	bl	8004228 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003c68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c72:	2300      	movs	r3, #0
 8003c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c76:	1d3b      	adds	r3, r7, #4
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4807      	ldr	r0, [pc, #28]	@ (8003c98 <MX_TIM1_Init+0x148>)
 8003c7c:	f00d fe1e 	bl	80118bc <HAL_TIMEx_ConfigBreakDeadTime>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8003c86:	f000 facf 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003c8a:	4803      	ldr	r0, [pc, #12]	@ (8003c98 <MX_TIM1_Init+0x148>)
 8003c8c:	f002 f930 	bl	8005ef0 <HAL_TIM_MspPostInit>

}
 8003c90:	bf00      	nop
 8003c92:	3758      	adds	r7, #88	@ 0x58
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	2000044c 	.word	0x2000044c
 8003c9c:	40012c00 	.word	0x40012c00

08003ca0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ca6:	f107 0314 	add.w	r3, r7, #20
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	605a      	str	r2, [r3, #4]
 8003cb0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003cb2:	1d3b      	adds	r3, r7, #4
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003cbe:	4b21      	ldr	r3, [pc, #132]	@ (8003d44 <MX_TIM2_Init+0xa4>)
 8003cc0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003cc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d44 <MX_TIM2_Init+0xa4>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d44 <MX_TIM2_Init+0xa4>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d44 <MX_TIM2_Init+0xa4>)
 8003cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cda:	4b1a      	ldr	r3, [pc, #104]	@ (8003d44 <MX_TIM2_Init+0xa4>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ce0:	4b18      	ldr	r3, [pc, #96]	@ (8003d44 <MX_TIM2_Init+0xa4>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003ce6:	4817      	ldr	r0, [pc, #92]	@ (8003d44 <MX_TIM2_Init+0xa4>)
 8003ce8:	f00c fbde 	bl	80104a8 <HAL_TIM_IC_Init>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003cf2:	f000 fa99 	bl	8004228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003cfe:	f107 0314 	add.w	r3, r7, #20
 8003d02:	4619      	mov	r1, r3
 8003d04:	480f      	ldr	r0, [pc, #60]	@ (8003d44 <MX_TIM2_Init+0xa4>)
 8003d06:	f00d fd51 	bl	80117ac <HAL_TIMEx_MasterConfigSynchronization>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003d10:	f000 fa8a 	bl	8004228 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003d14:	2300      	movs	r3, #0
 8003d16:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003d24:	1d3b      	adds	r3, r7, #4
 8003d26:	2200      	movs	r2, #0
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4806      	ldr	r0, [pc, #24]	@ (8003d44 <MX_TIM2_Init+0xa4>)
 8003d2c:	f00c fc8e 	bl	801064c <HAL_TIM_IC_ConfigChannel>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003d36:	f000 fa77 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d3a:	bf00      	nop
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000498 	.word	0x20000498

08003d48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b090      	sub	sp, #64	@ 0x40
 8003d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003d4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	609a      	str	r2, [r3, #8]
 8003d5a:	60da      	str	r2, [r3, #12]
 8003d5c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d5e:	f107 0320 	add.w	r3, r7, #32
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	605a      	str	r2, [r3, #4]
 8003d68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d6a:	1d3b      	adds	r3, r7, #4
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	611a      	str	r2, [r3, #16]
 8003d78:	615a      	str	r2, [r3, #20]
 8003d7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8003e30 <MX_TIM3_Init+0xe8>)
 8003d7e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e34 <MX_TIM3_Init+0xec>)
 8003d80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003d82:	4b2b      	ldr	r3, [pc, #172]	@ (8003e30 <MX_TIM3_Init+0xe8>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d88:	4b29      	ldr	r3, [pc, #164]	@ (8003e30 <MX_TIM3_Init+0xe8>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 31;
 8003d8e:	4b28      	ldr	r3, [pc, #160]	@ (8003e30 <MX_TIM3_Init+0xe8>)
 8003d90:	221f      	movs	r2, #31
 8003d92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d94:	4b26      	ldr	r3, [pc, #152]	@ (8003e30 <MX_TIM3_Init+0xe8>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d9a:	4b25      	ldr	r3, [pc, #148]	@ (8003e30 <MX_TIM3_Init+0xe8>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003da0:	4823      	ldr	r0, [pc, #140]	@ (8003e30 <MX_TIM3_Init+0xe8>)
 8003da2:	f00b fe9d 	bl	800fae0 <HAL_TIM_Base_Init>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003dac:	f000 fa3c 	bl	8004228 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003db0:	481f      	ldr	r0, [pc, #124]	@ (8003e30 <MX_TIM3_Init+0xe8>)
 8003db2:	f00c f97b 	bl	80100ac <HAL_TIM_PWM_Init>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003dbc:	f000 fa34 	bl	8004228 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003dc0:	2307      	movs	r3, #7
 8003dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8003dc4:	2330      	movs	r3, #48	@ 0x30
 8003dc6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003dc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4818      	ldr	r0, [pc, #96]	@ (8003e30 <MX_TIM3_Init+0xe8>)
 8003dd0:	f00c feb5 	bl	8010b3e <HAL_TIM_SlaveConfigSynchro>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003dda:	f000 fa25 	bl	8004228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003de6:	f107 0320 	add.w	r3, r7, #32
 8003dea:	4619      	mov	r1, r3
 8003dec:	4810      	ldr	r0, [pc, #64]	@ (8003e30 <MX_TIM3_Init+0xe8>)
 8003dee:	f00d fcdd 	bl	80117ac <HAL_TIMEx_MasterConfigSynchronization>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003df8:	f000 fa16 	bl	8004228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dfc:	2360      	movs	r3, #96	@ 0x60
 8003dfe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 15;
 8003e00:	230f      	movs	r3, #15
 8003e02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e0c:	1d3b      	adds	r3, r7, #4
 8003e0e:	2208      	movs	r2, #8
 8003e10:	4619      	mov	r1, r3
 8003e12:	4807      	ldr	r0, [pc, #28]	@ (8003e30 <MX_TIM3_Init+0xe8>)
 8003e14:	f00c fcb6 	bl	8010784 <HAL_TIM_PWM_ConfigChannel>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8003e1e:	f000 fa03 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003e22:	4803      	ldr	r0, [pc, #12]	@ (8003e30 <MX_TIM3_Init+0xe8>)
 8003e24:	f002 f864 	bl	8005ef0 <HAL_TIM_MspPostInit>

}
 8003e28:	bf00      	nop
 8003e2a:	3740      	adds	r7, #64	@ 0x40
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	200004e4 	.word	0x200004e4
 8003e34:	40000400 	.word	0x40000400

08003e38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08e      	sub	sp, #56	@ 0x38
 8003e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e4c:	f107 031c 	add.w	r3, r7, #28
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e58:	463b      	mov	r3, r7
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	605a      	str	r2, [r3, #4]
 8003e60:	609a      	str	r2, [r3, #8]
 8003e62:	60da      	str	r2, [r3, #12]
 8003e64:	611a      	str	r2, [r3, #16]
 8003e66:	615a      	str	r2, [r3, #20]
 8003e68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8003f18 <MX_TIM4_Init+0xe0>)
 8003e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f1c <MX_TIM4_Init+0xe4>)
 8003e6e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8003e70:	4b29      	ldr	r3, [pc, #164]	@ (8003f18 <MX_TIM4_Init+0xe0>)
 8003e72:	2263      	movs	r2, #99	@ 0x63
 8003e74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e76:	4b28      	ldr	r3, [pc, #160]	@ (8003f18 <MX_TIM4_Init+0xe0>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003e7c:	4b26      	ldr	r3, [pc, #152]	@ (8003f18 <MX_TIM4_Init+0xe0>)
 8003e7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003e82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e84:	4b24      	ldr	r3, [pc, #144]	@ (8003f18 <MX_TIM4_Init+0xe0>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e8a:	4b23      	ldr	r3, [pc, #140]	@ (8003f18 <MX_TIM4_Init+0xe0>)
 8003e8c:	2280      	movs	r2, #128	@ 0x80
 8003e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003e90:	4821      	ldr	r0, [pc, #132]	@ (8003f18 <MX_TIM4_Init+0xe0>)
 8003e92:	f00b fe25 	bl	800fae0 <HAL_TIM_Base_Init>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003e9c:	f000 f9c4 	bl	8004228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ea0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003ea6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003eaa:	4619      	mov	r1, r3
 8003eac:	481a      	ldr	r0, [pc, #104]	@ (8003f18 <MX_TIM4_Init+0xe0>)
 8003eae:	f00c fd7d 	bl	80109ac <HAL_TIM_ConfigClockSource>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003eb8:	f000 f9b6 	bl	8004228 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003ebc:	4816      	ldr	r0, [pc, #88]	@ (8003f18 <MX_TIM4_Init+0xe0>)
 8003ebe:	f00b fe66 	bl	800fb8e <HAL_TIM_OC_Init>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003ec8:	f000 f9ae 	bl	8004228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ecc:	2320      	movs	r3, #32
 8003ece:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ed4:	f107 031c 	add.w	r3, r7, #28
 8003ed8:	4619      	mov	r1, r3
 8003eda:	480f      	ldr	r0, [pc, #60]	@ (8003f18 <MX_TIM4_Init+0xe0>)
 8003edc:	f00d fc66 	bl	80117ac <HAL_TIMEx_MasterConfigSynchronization>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003ee6:	f000 f99f 	bl	8004228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003eea:	2300      	movs	r3, #0
 8003eec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003efa:	463b      	mov	r3, r7
 8003efc:	2208      	movs	r2, #8
 8003efe:	4619      	mov	r1, r3
 8003f00:	4805      	ldr	r0, [pc, #20]	@ (8003f18 <MX_TIM4_Init+0xe0>)
 8003f02:	f00c fb29 	bl	8010558 <HAL_TIM_OC_ConfigChannel>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003f0c:	f000 f98c 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003f10:	bf00      	nop
 8003f12:	3738      	adds	r7, #56	@ 0x38
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000530 	.word	0x20000530
 8003f1c:	40000800 	.word	0x40000800

08003f20 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003f24:	4b14      	ldr	r3, [pc, #80]	@ (8003f78 <MX_UART4_Init+0x58>)
 8003f26:	4a15      	ldr	r2, [pc, #84]	@ (8003f7c <MX_UART4_Init+0x5c>)
 8003f28:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003f2a:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <MX_UART4_Init+0x58>)
 8003f2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f30:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003f32:	4b11      	ldr	r3, [pc, #68]	@ (8003f78 <MX_UART4_Init+0x58>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003f38:	4b0f      	ldr	r3, [pc, #60]	@ (8003f78 <MX_UART4_Init+0x58>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f78 <MX_UART4_Init+0x58>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003f44:	4b0c      	ldr	r3, [pc, #48]	@ (8003f78 <MX_UART4_Init+0x58>)
 8003f46:	220c      	movs	r2, #12
 8003f48:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f78 <MX_UART4_Init+0x58>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f50:	4b09      	ldr	r3, [pc, #36]	@ (8003f78 <MX_UART4_Init+0x58>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f56:	4b08      	ldr	r3, [pc, #32]	@ (8003f78 <MX_UART4_Init+0x58>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f5c:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <MX_UART4_Init+0x58>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8003f62:	4805      	ldr	r0, [pc, #20]	@ (8003f78 <MX_UART4_Init+0x58>)
 8003f64:	f00d fd76 	bl	8011a54 <HAL_HalfDuplex_Init>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8003f6e:	f000 f95b 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	2000057c 	.word	0x2000057c
 8003f7c:	40004c00 	.word	0x40004c00

08003f80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f84:	4b14      	ldr	r3, [pc, #80]	@ (8003fd8 <MX_USART1_UART_Init+0x58>)
 8003f86:	4a15      	ldr	r2, [pc, #84]	@ (8003fdc <MX_USART1_UART_Init+0x5c>)
 8003f88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f8a:	4b13      	ldr	r3, [pc, #76]	@ (8003fd8 <MX_USART1_UART_Init+0x58>)
 8003f8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f92:	4b11      	ldr	r3, [pc, #68]	@ (8003fd8 <MX_USART1_UART_Init+0x58>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f98:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd8 <MX_USART1_UART_Init+0x58>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd8 <MX_USART1_UART_Init+0x58>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd8 <MX_USART1_UART_Init+0x58>)
 8003fa6:	220c      	movs	r2, #12
 8003fa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003faa:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd8 <MX_USART1_UART_Init+0x58>)
 8003fac:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003fb0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fb2:	4b09      	ldr	r3, [pc, #36]	@ (8003fd8 <MX_USART1_UART_Init+0x58>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fb8:	4b07      	ldr	r3, [pc, #28]	@ (8003fd8 <MX_USART1_UART_Init+0x58>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fbe:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <MX_USART1_UART_Init+0x58>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fc4:	4804      	ldr	r0, [pc, #16]	@ (8003fd8 <MX_USART1_UART_Init+0x58>)
 8003fc6:	f00d fcf7 	bl	80119b8 <HAL_UART_Init>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8003fd0:	f000 f92a 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003fd4:	bf00      	nop
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20000604 	.word	0x20000604
 8003fdc:	40013800 	.word	0x40013800

08003fe0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003fe6:	4b14      	ldr	r3, [pc, #80]	@ (8004038 <MX_DMA_Init+0x58>)
 8003fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fea:	4a13      	ldr	r2, [pc, #76]	@ (8004038 <MX_DMA_Init+0x58>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6493      	str	r3, [r2, #72]	@ 0x48
 8003ff2:	4b11      	ldr	r3, [pc, #68]	@ (8004038 <MX_DMA_Init+0x58>)
 8003ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	607b      	str	r3, [r7, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003ffe:	2200      	movs	r2, #0
 8004000:	2100      	movs	r1, #0
 8004002:	200b      	movs	r0, #11
 8004004:	f006 ff4d 	bl	800aea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004008:	200b      	movs	r0, #11
 800400a:	f006 ff66 	bl	800aeda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800400e:	2200      	movs	r2, #0
 8004010:	2100      	movs	r1, #0
 8004012:	200e      	movs	r0, #14
 8004014:	f006 ff45 	bl	800aea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004018:	200e      	movs	r0, #14
 800401a:	f006 ff5e 	bl	800aeda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800401e:	2200      	movs	r2, #0
 8004020:	2100      	movs	r1, #0
 8004022:	200f      	movs	r0, #15
 8004024:	f006 ff3d 	bl	800aea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004028:	200f      	movs	r0, #15
 800402a:	f006 ff56 	bl	800aeda <HAL_NVIC_EnableIRQ>

}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000

0800403c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	@ 0x28
 8004040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004042:	f107 0314 	add.w	r3, r7, #20
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	605a      	str	r2, [r3, #4]
 800404c:	609a      	str	r2, [r3, #8]
 800404e:	60da      	str	r2, [r3, #12]
 8004050:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004052:	4b71      	ldr	r3, [pc, #452]	@ (8004218 <MX_GPIO_Init+0x1dc>)
 8004054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004056:	4a70      	ldr	r2, [pc, #448]	@ (8004218 <MX_GPIO_Init+0x1dc>)
 8004058:	f043 0304 	orr.w	r3, r3, #4
 800405c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800405e:	4b6e      	ldr	r3, [pc, #440]	@ (8004218 <MX_GPIO_Init+0x1dc>)
 8004060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800406a:	4b6b      	ldr	r3, [pc, #428]	@ (8004218 <MX_GPIO_Init+0x1dc>)
 800406c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800406e:	4a6a      	ldr	r2, [pc, #424]	@ (8004218 <MX_GPIO_Init+0x1dc>)
 8004070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004076:	4b68      	ldr	r3, [pc, #416]	@ (8004218 <MX_GPIO_Init+0x1dc>)
 8004078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800407a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004082:	4b65      	ldr	r3, [pc, #404]	@ (8004218 <MX_GPIO_Init+0x1dc>)
 8004084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004086:	4a64      	ldr	r2, [pc, #400]	@ (8004218 <MX_GPIO_Init+0x1dc>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800408e:	4b62      	ldr	r3, [pc, #392]	@ (8004218 <MX_GPIO_Init+0x1dc>)
 8004090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800409a:	4b5f      	ldr	r3, [pc, #380]	@ (8004218 <MX_GPIO_Init+0x1dc>)
 800409c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409e:	4a5e      	ldr	r2, [pc, #376]	@ (8004218 <MX_GPIO_Init+0x1dc>)
 80040a0:	f043 0302 	orr.w	r3, r3, #2
 80040a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040a6:	4b5c      	ldr	r3, [pc, #368]	@ (8004218 <MX_GPIO_Init+0x1dc>)
 80040a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	607b      	str	r3, [r7, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040b2:	4b59      	ldr	r3, [pc, #356]	@ (8004218 <MX_GPIO_Init+0x1dc>)
 80040b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b6:	4a58      	ldr	r2, [pc, #352]	@ (8004218 <MX_GPIO_Init+0x1dc>)
 80040b8:	f043 0308 	orr.w	r3, r3, #8
 80040bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040be:	4b56      	ldr	r3, [pc, #344]	@ (8004218 <MX_GPIO_Init+0x1dc>)
 80040c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 80040ca:	2200      	movs	r2, #0
 80040cc:	2108      	movs	r1, #8
 80040ce:	4853      	ldr	r0, [pc, #332]	@ (800421c <MX_GPIO_Init+0x1e0>)
 80040d0:	f007 fbf4 	bl	800b8bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 80040d4:	2201      	movs	r2, #1
 80040d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040da:	4851      	ldr	r0, [pc, #324]	@ (8004220 <MX_GPIO_Init+0x1e4>)
 80040dc:	f007 fbee 	bl	800b8bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 80040e0:	2201      	movs	r2, #1
 80040e2:	21c0      	movs	r1, #192	@ 0xc0
 80040e4:	484d      	ldr	r0, [pc, #308]	@ (800421c <MX_GPIO_Init+0x1e0>)
 80040e6:	f007 fbe9 	bl	800b8bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin, GPIO_PIN_SET);
 80040ea:	2201      	movs	r2, #1
 80040ec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80040f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040f4:	f007 fbe2 	bl	800b8bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 80040f8:	2200      	movs	r2, #0
 80040fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004102:	f007 fbdb 	bl	800b8bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 8004106:	2200      	movs	r2, #0
 8004108:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800410c:	4844      	ldr	r0, [pc, #272]	@ (8004220 <MX_GPIO_Init+0x1e4>)
 800410e:	f007 fbd5 	bl	800b8bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_BTN_Pin PC4 */
  GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 8004112:	f242 0310 	movw	r3, #8208	@ 0x2010
 8004116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004118:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800411c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004122:	f107 0314 	add.w	r3, r7, #20
 8004126:	4619      	mov	r1, r3
 8004128:	483c      	ldr	r0, [pc, #240]	@ (800421c <MX_GPIO_Init+0x1e0>)
 800412a:	f007 fa1d 	bl	800b568 <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
  GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 800412e:	23c8      	movs	r3, #200	@ 0xc8
 8004130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004132:	2301      	movs	r3, #1
 8004134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800413a:	2300      	movs	r3, #0
 800413c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800413e:	f107 0314 	add.w	r3, r7, #20
 8004142:	4619      	mov	r1, r3
 8004144:	4835      	ldr	r0, [pc, #212]	@ (800421c <MX_GPIO_Init+0x1e0>)
 8004146:	f007 fa0f 	bl	800b568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800414a:	2308      	movs	r3, #8
 800414c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800414e:	2300      	movs	r3, #0
 8004150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004156:	f107 0314 	add.w	r3, r7, #20
 800415a:	4619      	mov	r1, r3
 800415c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004160:	f007 fa02 	bl	800b568 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
  GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 8004164:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8004168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800416a:	2301      	movs	r3, #1
 800416c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004172:	2300      	movs	r3, #0
 8004174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004176:	f107 0314 	add.w	r3, r7, #20
 800417a:	4619      	mov	r1, r3
 800417c:	4828      	ldr	r0, [pc, #160]	@ (8004220 <MX_GPIO_Init+0x1e4>)
 800417e:	f007 f9f3 	bl	800b568 <HAL_GPIO_Init>

  /*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin */
  GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin;
 8004182:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004188:	2311      	movs	r3, #17
 800418a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418c:	2300      	movs	r3, #0
 800418e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004190:	2300      	movs	r3, #0
 8004192:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	4619      	mov	r1, r3
 800419a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800419e:	f007 f9e3 	bl	800b568 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_nCS_Pin */
  GPIO_InitStruct.Pin = ACC_nCS_Pin;
 80041a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041a8:	2301      	movs	r3, #1
 80041aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b0:	2300      	movs	r3, #0
 80041b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACC_nCS_GPIO_Port, &GPIO_InitStruct);
 80041b4:	f107 0314 	add.w	r3, r7, #20
 80041b8:	4619      	mov	r1, r3
 80041ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041be:	f007 f9d3 	bl	800b568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80041c2:	2304      	movs	r3, #4
 80041c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80041ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041d0:	f107 0314 	add.w	r3, r7, #20
 80041d4:	4619      	mov	r1, r3
 80041d6:	4813      	ldr	r0, [pc, #76]	@ (8004224 <MX_GPIO_Init+0x1e8>)
 80041d8:	f007 f9c6 	bl	800b568 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCD_Pin */
  GPIO_InitStruct.Pin = DCD_Pin;
 80041dc:	2320      	movs	r3, #32
 80041de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 80041e8:	f107 0314 	add.w	r3, r7, #20
 80041ec:	4619      	mov	r1, r3
 80041ee:	480c      	ldr	r0, [pc, #48]	@ (8004220 <MX_GPIO_Init+0x1e4>)
 80041f0:	f007 f9ba 	bl	800b568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80041fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004204:	f107 0314 	add.w	r3, r7, #20
 8004208:	4619      	mov	r1, r3
 800420a:	4805      	ldr	r0, [pc, #20]	@ (8004220 <MX_GPIO_Init+0x1e4>)
 800420c:	f007 f9ac 	bl	800b568 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8004210:	bf00      	nop
 8004212:	3728      	adds	r7, #40	@ 0x28
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40021000 	.word	0x40021000
 800421c:	48000800 	.word	0x48000800
 8004220:	48000400 	.word	0x48000400
 8004224:	48000c00 	.word	0x48000c00

08004228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800422c:	b672      	cpsid	i
}
 800422e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004230:	bf00      	nop
 8004232:	e7fd      	b.n	8004230 <Error_Handler+0x8>

08004234 <Save_Data>:
#include "stdlib.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	f2ad 4ddc 	subw	sp, sp, #1244	@ 0x4dc
 800423a:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 800423c:	4b77      	ldr	r3, [pc, #476]	@ (800441c <Save_Data+0x1e8>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d037      	beq.n	80042ba <Save_Data+0x86>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[0], PRESS_HALF_LEN);
 800424a:	4b75      	ldr	r3, [pc, #468]	@ (8004420 <Save_Data+0x1ec>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	4b74      	ldr	r3, [pc, #464]	@ (8004424 <Save_Data+0x1f0>)
 8004252:	4413      	add	r3, r2
 8004254:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8004258:	4973      	ldr	r1, [pc, #460]	@ (8004428 <Save_Data+0x1f4>)
 800425a:	4618      	mov	r0, r3
 800425c:	f00e ffea 	bl	8013234 <memcpy>
		Last_Pressure = 0;
 8004260:	4b72      	ldr	r3, [pc, #456]	@ (800442c <Save_Data+0x1f8>)
 8004262:	2200      	movs	r2, #0
 8004264:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8004266:	2300      	movs	r3, #0
 8004268:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 800426c:	e00f      	b.n	800428e <Save_Data+0x5a>
		{
			Last_Pressure += Pressure[i];
 800426e:	4a6e      	ldr	r2, [pc, #440]	@ (8004428 <Save_Data+0x1f4>)
 8004270:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8004274:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004278:	4b6c      	ldr	r3, [pc, #432]	@ (800442c <Save_Data+0x1f8>)
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	4413      	add	r3, r2
 800427e:	b29a      	uxth	r2, r3
 8004280:	4b6a      	ldr	r3, [pc, #424]	@ (800442c <Save_Data+0x1f8>)
 8004282:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8004284:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8004288:	3301      	adds	r3, #1
 800428a:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 800428e:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8004292:	2bc7      	cmp	r3, #199	@ 0xc7
 8004294:	ddeb      	ble.n	800426e <Save_Data+0x3a>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8004296:	4b65      	ldr	r3, [pc, #404]	@ (800442c <Save_Data+0x1f8>)
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	4a65      	ldr	r2, [pc, #404]	@ (8004430 <Save_Data+0x1fc>)
 800429c:	fba2 2303 	umull	r2, r3, r2, r3
 80042a0:	099b      	lsrs	r3, r3, #6
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	4b61      	ldr	r3, [pc, #388]	@ (800442c <Save_Data+0x1f8>)
 80042a6:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 80042a8:	485f      	ldr	r0, [pc, #380]	@ (8004428 <Save_Data+0x1f4>)
 80042aa:	f000 faf1 	bl	8004890 <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 80042ae:	4a5b      	ldr	r2, [pc, #364]	@ (800441c <Save_Data+0x1e8>)
 80042b0:	7813      	ldrb	r3, [r2, #0]
 80042b2:	f023 0302 	bic.w	r3, r3, #2
 80042b6:	7013      	strb	r3, [r2, #0]
 80042b8:	e03e      	b.n	8004338 <Save_Data+0x104>
	}
	else if(flags.ADC_Full_Buffer)
 80042ba:	4b58      	ldr	r3, [pc, #352]	@ (800441c <Save_Data+0x1e8>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d037      	beq.n	8004338 <Save_Data+0x104>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_HALF_LEN);
 80042c8:	4b55      	ldr	r3, [pc, #340]	@ (8004420 <Save_Data+0x1ec>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	4b55      	ldr	r3, [pc, #340]	@ (8004424 <Save_Data+0x1f0>)
 80042d0:	4413      	add	r3, r2
 80042d2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80042d6:	4957      	ldr	r1, [pc, #348]	@ (8004434 <Save_Data+0x200>)
 80042d8:	4618      	mov	r0, r3
 80042da:	f00e ffab 	bl	8013234 <memcpy>
		Last_Pressure = 0;
 80042de:	4b53      	ldr	r3, [pc, #332]	@ (800442c <Save_Data+0x1f8>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 80042e4:	23c8      	movs	r3, #200	@ 0xc8
 80042e6:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 80042ea:	e00f      	b.n	800430c <Save_Data+0xd8>
		{
			Last_Pressure += Pressure[i];
 80042ec:	4a4e      	ldr	r2, [pc, #312]	@ (8004428 <Save_Data+0x1f4>)
 80042ee:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 80042f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80042f6:	4b4d      	ldr	r3, [pc, #308]	@ (800442c <Save_Data+0x1f8>)
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	4413      	add	r3, r2
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	4b4b      	ldr	r3, [pc, #300]	@ (800442c <Save_Data+0x1f8>)
 8004300:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8004302:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8004306:	3301      	adds	r3, #1
 8004308:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 800430c:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8004310:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004314:	dbea      	blt.n	80042ec <Save_Data+0xb8>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8004316:	4b45      	ldr	r3, [pc, #276]	@ (800442c <Save_Data+0x1f8>)
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	4a45      	ldr	r2, [pc, #276]	@ (8004430 <Save_Data+0x1fc>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	099b      	lsrs	r3, r3, #6
 8004322:	b29a      	uxth	r2, r3
 8004324:	4b41      	ldr	r3, [pc, #260]	@ (800442c <Save_Data+0x1f8>)
 8004326:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 8004328:	4842      	ldr	r0, [pc, #264]	@ (8004434 <Save_Data+0x200>)
 800432a:	f000 fab1 	bl	8004890 <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 800432e:	4a3b      	ldr	r2, [pc, #236]	@ (800441c <Save_Data+0x1e8>)
 8004330:	7813      	ldrb	r3, [r2, #0]
 8004332:	f023 0304 	bic.w	r3, r3, #4
 8004336:	7013      	strb	r3, [r2, #0]
	}
	flags.ADC_Complete = 0;
 8004338:	4a38      	ldr	r2, [pc, #224]	@ (800441c <Save_Data+0x1e8>)
 800433a:	7813      	ldrb	r3, [r2, #0]
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	7013      	strb	r3, [r2, #0]
	Address_Offset += PRESS_HALF_LEN;
 8004342:	4b37      	ldr	r3, [pc, #220]	@ (8004420 <Save_Data+0x1ec>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800434a:	4a35      	ldr	r2, [pc, #212]	@ (8004420 <Save_Data+0x1ec>)
 800434c:	6013      	str	r3, [r2, #0]

	memcpy(Saving_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 800434e:	4b34      	ldr	r3, [pc, #208]	@ (8004420 <Save_Data+0x1ec>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	4b33      	ldr	r3, [pc, #204]	@ (8004424 <Save_Data+0x1f0>)
 8004356:	4413      	add	r3, r2
 8004358:	2228      	movs	r2, #40	@ 0x28
 800435a:	4937      	ldr	r1, [pc, #220]	@ (8004438 <Save_Data+0x204>)
 800435c:	4618      	mov	r0, r3
 800435e:	f00e ff69 	bl	8013234 <memcpy>
	uint8_t current_period_cnt = Period_cnt;
 8004362:	4b36      	ldr	r3, [pc, #216]	@ (800443c <Save_Data+0x208>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	Last_Volume = 0;
 800436a:	4b35      	ldr	r3, [pc, #212]	@ (8004440 <Save_Data+0x20c>)
 800436c:	2200      	movs	r2, #0
 800436e:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8004370:	2300      	movs	r3, #0
 8004372:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8004376:	e00f      	b.n	8004398 <Save_Data+0x164>
	{
		Last_Volume += Volume_Period[i];
 8004378:	4a2f      	ldr	r2, [pc, #188]	@ (8004438 <Save_Data+0x204>)
 800437a:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800437e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004382:	4b2f      	ldr	r3, [pc, #188]	@ (8004440 <Save_Data+0x20c>)
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	4413      	add	r3, r2
 8004388:	b29a      	uxth	r2, r3
 800438a:	4b2d      	ldr	r3, [pc, #180]	@ (8004440 <Save_Data+0x20c>)
 800438c:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 800438e:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8004392:	3301      	adds	r3, #1
 8004394:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8004398:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800439c:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 80043a0:	429a      	cmp	r2, r3
 80043a2:	dbe9      	blt.n	8004378 <Save_Data+0x144>
	}
	Last_Volume = (uint16_t)(Last_Volume / current_period_cnt);
 80043a4:	4b26      	ldr	r3, [pc, #152]	@ (8004440 <Save_Data+0x20c>)
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 80043ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	4b22      	ldr	r3, [pc, #136]	@ (8004440 <Save_Data+0x20c>)
 80043b6:	801a      	strh	r2, [r3, #0]
	memset(Volume_Period, 0, sizeof(Volume_Period));
 80043b8:	2228      	movs	r2, #40	@ 0x28
 80043ba:	2100      	movs	r1, #0
 80043bc:	481e      	ldr	r0, [pc, #120]	@ (8004438 <Save_Data+0x204>)
 80043be:	f00e feb5 	bl	801312c <memset>
	Period_cnt = 0;
 80043c2:	4b1e      	ldr	r3, [pc, #120]	@ (800443c <Save_Data+0x208>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
	Address_Offset += MAX_VOLUME_LEN;
 80043c8:	4b15      	ldr	r3, [pc, #84]	@ (8004420 <Save_Data+0x1ec>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3328      	adds	r3, #40	@ 0x28
 80043ce:	4a14      	ldr	r2, [pc, #80]	@ (8004420 <Save_Data+0x1ec>)
 80043d0:	6013      	str	r3, [r2, #0]

	if(sys.ACC_Present)
 80043d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004444 <Save_Data+0x210>)
 80043d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043d8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80a3 	beq.w	800452e <Save_Data+0x2fa>
	{
		memcpy(Saving_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 80043e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004420 <Save_Data+0x1ec>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004424 <Save_Data+0x1f0>)
 80043f0:	4413      	add	r3, r2
 80043f2:	4a15      	ldr	r2, [pc, #84]	@ (8004448 <Save_Data+0x214>)
 80043f4:	4618      	mov	r0, r3
 80043f6:	4611      	mov	r1, r2
 80043f8:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 80043fc:	461a      	mov	r2, r3
 80043fe:	f00e ff19 	bl	8013234 <memcpy>
		Last_Acceleration.x = 0;
 8004402:	4b12      	ldr	r3, [pc, #72]	@ (800444c <Save_Data+0x218>)
 8004404:	2200      	movs	r2, #0
 8004406:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = 0;
 8004408:	4b10      	ldr	r3, [pc, #64]	@ (800444c <Save_Data+0x218>)
 800440a:	2200      	movs	r2, #0
 800440c:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = 0;
 800440e:	4b0f      	ldr	r3, [pc, #60]	@ (800444c <Save_Data+0x218>)
 8004410:	2200      	movs	r2, #0
 8004412:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8004414:	2300      	movs	r3, #0
 8004416:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 800441a:	e063      	b.n	80044e4 <Save_Data+0x2b0>
 800441c:	20001c30 	.word	0x20001c30
 8004420:	20004e78 	.word	0x20004e78
 8004424:	20004748 	.word	0x20004748
 8004428:	20003e14 	.word	0x20003e14
 800442c:	200046d4 	.word	0x200046d4
 8004430:	51eb851f 	.word	0x51eb851f
 8004434:	20003fa4 	.word	0x20003fa4
 8004438:	20004134 	.word	0x20004134
 800443c:	20003e10 	.word	0x20003e10
 8004440:	200046d6 	.word	0x200046d6
 8004444:	20000720 	.word	0x20000720
 8004448:	2000415c 	.word	0x2000415c
 800444c:	200046d8 	.word	0x200046d8
		{
			Last_Acceleration.x += Acceleration[i+1] | (Acceleration[i+2] << 8); 
 8004450:	4b81      	ldr	r3, [pc, #516]	@ (8004658 <Save_Data+0x424>)
 8004452:	885a      	ldrh	r2, [r3, #2]
 8004454:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004458:	3301      	adds	r3, #1
 800445a:	4980      	ldr	r1, [pc, #512]	@ (800465c <Save_Data+0x428>)
 800445c:	5ccb      	ldrb	r3, [r1, r3]
 800445e:	b219      	sxth	r1, r3
 8004460:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004464:	3302      	adds	r3, #2
 8004466:	487d      	ldr	r0, [pc, #500]	@ (800465c <Save_Data+0x428>)
 8004468:	5cc3      	ldrb	r3, [r0, r3]
 800446a:	b21b      	sxth	r3, r3
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	b21b      	sxth	r3, r3
 8004470:	430b      	orrs	r3, r1
 8004472:	b21b      	sxth	r3, r3
 8004474:	b29b      	uxth	r3, r3
 8004476:	4413      	add	r3, r2
 8004478:	b29a      	uxth	r2, r3
 800447a:	4b77      	ldr	r3, [pc, #476]	@ (8004658 <Save_Data+0x424>)
 800447c:	805a      	strh	r2, [r3, #2]
			Last_Acceleration.y += Acceleration[i+3] | (Acceleration[i+4] << 8); 
 800447e:	4b76      	ldr	r3, [pc, #472]	@ (8004658 <Save_Data+0x424>)
 8004480:	889a      	ldrh	r2, [r3, #4]
 8004482:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004486:	3303      	adds	r3, #3
 8004488:	4974      	ldr	r1, [pc, #464]	@ (800465c <Save_Data+0x428>)
 800448a:	5ccb      	ldrb	r3, [r1, r3]
 800448c:	b219      	sxth	r1, r3
 800448e:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004492:	3304      	adds	r3, #4
 8004494:	4871      	ldr	r0, [pc, #452]	@ (800465c <Save_Data+0x428>)
 8004496:	5cc3      	ldrb	r3, [r0, r3]
 8004498:	b21b      	sxth	r3, r3
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	b21b      	sxth	r3, r3
 800449e:	430b      	orrs	r3, r1
 80044a0:	b21b      	sxth	r3, r3
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	4413      	add	r3, r2
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	4b6b      	ldr	r3, [pc, #428]	@ (8004658 <Save_Data+0x424>)
 80044aa:	809a      	strh	r2, [r3, #4]
			Last_Acceleration.z += Acceleration[i+5] | (Acceleration[i+6] << 8); 
 80044ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004658 <Save_Data+0x424>)
 80044ae:	88da      	ldrh	r2, [r3, #6]
 80044b0:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80044b4:	3305      	adds	r3, #5
 80044b6:	4969      	ldr	r1, [pc, #420]	@ (800465c <Save_Data+0x428>)
 80044b8:	5ccb      	ldrb	r3, [r1, r3]
 80044ba:	b219      	sxth	r1, r3
 80044bc:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80044c0:	3306      	adds	r3, #6
 80044c2:	4866      	ldr	r0, [pc, #408]	@ (800465c <Save_Data+0x428>)
 80044c4:	5cc3      	ldrb	r3, [r0, r3]
 80044c6:	b21b      	sxth	r3, r3
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	b21b      	sxth	r3, r3
 80044cc:	430b      	orrs	r3, r1
 80044ce:	b21b      	sxth	r3, r3
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	4b60      	ldr	r3, [pc, #384]	@ (8004658 <Save_Data+0x424>)
 80044d8:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 80044da:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80044de:	3307      	adds	r3, #7
 80044e0:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 80044e4:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80044e8:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 80044ec:	dbb0      	blt.n	8004450 <Save_Data+0x21c>
		}
		Last_Acceleration.x = (uint16_t)(Last_Acceleration.x / (ACCELERATION_LEN / 7));
 80044ee:	4b5a      	ldr	r3, [pc, #360]	@ (8004658 <Save_Data+0x424>)
 80044f0:	885b      	ldrh	r3, [r3, #2]
 80044f2:	4a5b      	ldr	r2, [pc, #364]	@ (8004660 <Save_Data+0x42c>)
 80044f4:	fba2 2303 	umull	r2, r3, r2, r3
 80044f8:	099b      	lsrs	r3, r3, #6
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	4b56      	ldr	r3, [pc, #344]	@ (8004658 <Save_Data+0x424>)
 80044fe:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = (uint16_t)(Last_Acceleration.y / (ACCELERATION_LEN / 7));
 8004500:	4b55      	ldr	r3, [pc, #340]	@ (8004658 <Save_Data+0x424>)
 8004502:	889b      	ldrh	r3, [r3, #4]
 8004504:	4a56      	ldr	r2, [pc, #344]	@ (8004660 <Save_Data+0x42c>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	099b      	lsrs	r3, r3, #6
 800450c:	b29a      	uxth	r2, r3
 800450e:	4b52      	ldr	r3, [pc, #328]	@ (8004658 <Save_Data+0x424>)
 8004510:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = (uint16_t)(Last_Acceleration.z / (ACCELERATION_LEN / 7));
 8004512:	4b51      	ldr	r3, [pc, #324]	@ (8004658 <Save_Data+0x424>)
 8004514:	88db      	ldrh	r3, [r3, #6]
 8004516:	4a52      	ldr	r2, [pc, #328]	@ (8004660 <Save_Data+0x42c>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	099b      	lsrs	r3, r3, #6
 800451e:	b29a      	uxth	r2, r3
 8004520:	4b4d      	ldr	r3, [pc, #308]	@ (8004658 <Save_Data+0x424>)
 8004522:	80da      	strh	r2, [r3, #6]
		flags.ACC_Complete = 0;
 8004524:	4a4f      	ldr	r2, [pc, #316]	@ (8004664 <Save_Data+0x430>)
 8004526:	7813      	ldrb	r3, [r2, #0]
 8004528:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800452c:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += ACCELERATION_LEN;
 800452e:	4b4e      	ldr	r3, [pc, #312]	@ (8004668 <Save_Data+0x434>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8004536:	4a4c      	ldr	r2, [pc, #304]	@ (8004668 <Save_Data+0x434>)
 8004538:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 800453a:	484c      	ldr	r0, [pc, #304]	@ (800466c <Save_Data+0x438>)
 800453c:	f7fc f980 	bl	8000840 <INA3221_Read_Measure>
	uint16_t new_temp = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
	if((new_temp = Read_Temperature()) != 0)
 8004546:	f7fc f921 	bl	800078c <Read_Temperature>
 800454a:	4603      	mov	r3, r0
 800454c:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
 8004550:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <Save_Data+0x32c>
	{
		Temperature = new_temp;
 8004558:	4a45      	ldr	r2, [pc, #276]	@ (8004670 <Save_Data+0x43c>)
 800455a:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 800455e:	8013      	strh	r3, [r2, #0]
	}

	uint8_t compressed_data[MAX_COMPRESSED_SIZE];
	Compressed_Sample_Typedef sample;
    sample.compressed_size = Compress_Sample(Saving_Buffer, SAVING_BUFFER_LEN, compressed_data);
 8004560:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8004564:	f2a3 44cc 	subw	r4, r3, #1228	@ 0x4cc
 8004568:	4638      	mov	r0, r7
 800456a:	f107 0314 	add.w	r3, r7, #20
 800456e:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 8004572:	4940      	ldr	r1, [pc, #256]	@ (8004674 <Save_Data+0x440>)
 8004574:	f000 faf0 	bl	8004b58 <Compress_Sample>
 8004578:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 800457c:	f5a3 629b 	sub.w	r2, r3, #1240	@ 0x4d8
 8004580:	4623      	mov	r3, r4
 8004582:	6810      	ldr	r0, [r2, #0]
 8004584:	6018      	str	r0, [r3, #0]
 8004586:	8892      	ldrh	r2, [r2, #4]
 8004588:	809a      	strh	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800458a:	b672      	cpsid	i
}
 800458c:	bf00      	nop

	__disable_irq();
	RAM_Save_Measure(&sample, compressed_data);
 800458e:	f107 0214 	add.w	r2, r7, #20
 8004592:	f107 030c 	add.w	r3, r7, #12
 8004596:	4611      	mov	r1, r2
 8004598:	4618      	mov	r0, r3
 800459a:	f000 f9dd 	bl	8004958 <RAM_Save_Measure>
  __ASM volatile ("cpsie i" : : : "memory");
 800459e:	b662      	cpsie	i
}
 80045a0:	bf00      	nop
	__enable_irq();

	Address_Offset = 0;
 80045a2:	4b31      	ldr	r3, [pc, #196]	@ (8004668 <Save_Data+0x434>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 80045a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004664 <Save_Data+0x430>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <Save_Data+0x390>
 80045b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004664 <Save_Data+0x430>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	f003 0310 	and.w	r3, r3, #16
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d043      	beq.n	800464c <Save_Data+0x418>
	{
		Cycles_After_Warning++;
 80045c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004678 <Save_Data+0x444>)
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004678 <Save_Data+0x444>)
 80045ce:	801a      	strh	r2, [r3, #0]
		if(Cycles_After_Warning >= config.buffering_secs * (config.samp_freq / ACC_FIFO_WATERMARK))
 80045d0:	4b29      	ldr	r3, [pc, #164]	@ (8004678 <Save_Data+0x444>)
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	4619      	mov	r1, r3
 80045d6:	4b29      	ldr	r3, [pc, #164]	@ (800467c <Save_Data+0x448>)
 80045d8:	791b      	ldrb	r3, [r3, #4]
 80045da:	4618      	mov	r0, r3
 80045dc:	4b27      	ldr	r3, [pc, #156]	@ (800467c <Save_Data+0x448>)
 80045de:	885b      	ldrh	r3, [r3, #2]
 80045e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004660 <Save_Data+0x42c>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	099b      	lsrs	r3, r3, #6
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	fb00 f303 	mul.w	r3, r0, r3
 80045ee:	4299      	cmp	r1, r3
 80045f0:	db2c      	blt.n	800464c <Save_Data+0x418>
		{
			if(!flags.CMD.Measure_Request)
 80045f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004664 <Save_Data+0x430>)
 80045f4:	789b      	ldrb	r3, [r3, #2]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d125      	bne.n	800464c <Save_Data+0x418>
			{
				Switch_Buffer();
 8004600:	f000 f842 	bl	8004688 <Switch_Buffer>
				flags.CMD.Measure_Request = 1;
 8004604:	4a17      	ldr	r2, [pc, #92]	@ (8004664 <Save_Data+0x430>)
 8004606:	7893      	ldrb	r3, [r2, #2]
 8004608:	f043 0302 	orr.w	r3, r3, #2
 800460c:	7093      	strb	r3, [r2, #2]
				Send_Measure_Addr = Saved_Bytes;
 800460e:	4b1c      	ldr	r3, [pc, #112]	@ (8004680 <Save_Data+0x44c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1c      	ldr	r2, [pc, #112]	@ (8004684 <Save_Data+0x450>)
 8004614:	6013      	str	r3, [r2, #0]
				Cycles_After_Warning = 0;
 8004616:	4b18      	ldr	r3, [pc, #96]	@ (8004678 <Save_Data+0x444>)
 8004618:	2200      	movs	r2, #0
 800461a:	801a      	strh	r2, [r3, #0]
				if(flags.Hammer_Detected)
 800461c:	4b11      	ldr	r3, [pc, #68]	@ (8004664 <Save_Data+0x430>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d004      	beq.n	8004634 <Save_Data+0x400>
				{
					flags.Hammer_Detected = 0;
 800462a:	4a0e      	ldr	r2, [pc, #56]	@ (8004664 <Save_Data+0x430>)
 800462c:	7813      	ldrb	r3, [r2, #0]
 800462e:	f023 0308 	bic.w	r3, r3, #8
 8004632:	7013      	strb	r3, [r2, #0]
				}
				if(flags.Threshold_Detected)
 8004634:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <Save_Data+0x430>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d004      	beq.n	800464c <Save_Data+0x418>
				{
					flags.Threshold_Detected = 0;
 8004642:	4a08      	ldr	r2, [pc, #32]	@ (8004664 <Save_Data+0x430>)
 8004644:	7813      	ldrb	r3, [r2, #0]
 8004646:	f023 0310 	bic.w	r3, r3, #16
 800464a:	7013      	strb	r3, [r2, #0]
				}
			}
		}
	}

}
 800464c:	bf00      	nop
 800464e:	f207 47dc 	addw	r7, r7, #1244	@ 0x4dc
 8004652:	46bd      	mov	sp, r7
 8004654:	bd90      	pop	{r4, r7, pc}
 8004656:	bf00      	nop
 8004658:	200046d8 	.word	0x200046d8
 800465c:	2000415c 	.word	0x2000415c
 8004660:	51eb851f 	.word	0x51eb851f
 8004664:	20001c30 	.word	0x20001c30
 8004668:	20004e78 	.word	0x20004e78
 800466c:	20003e04 	.word	0x20003e04
 8004670:	200046e0 	.word	0x200046e0
 8004674:	20004748 	.word	0x20004748
 8004678:	20004e7c 	.word	0x20004e7c
 800467c:	20001c34 	.word	0x20001c34
 8004680:	20004e80 	.word	0x20004e80
 8004684:	20004e88 	.word	0x20004e88

08004688 <Switch_Buffer>:

/*-----CAMBIO BUFFER-----*/
void Switch_Buffer(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
    sys.Inactive_RAM_Len = sys.Current_RAM_Len;
 800468c:	4b23      	ldr	r3, [pc, #140]	@ (800471c <Switch_Buffer+0x94>)
 800468e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004692:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004696:	4a21      	ldr	r2, [pc, #132]	@ (800471c <Switch_Buffer+0x94>)
 8004698:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800469c:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8

    if (sys.Active_RAM_Buffer == 0) 
 80046a0:	4b1e      	ldr	r3, [pc, #120]	@ (800471c <Switch_Buffer+0x94>)
 80046a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046a6:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d116      	bne.n	80046dc <Switch_Buffer+0x54>
	{
		sys.RAM_Buffer_Base_tosend = RAM_SECOND_BUFFER_ADD;
 80046ae:	4b1b      	ldr	r3, [pc, #108]	@ (800471c <Switch_Buffer+0x94>)
 80046b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046b4:	461a      	mov	r2, r3
 80046b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80046ba:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
        sys.Active_RAM_Buffer = 1;
 80046be:	4b17      	ldr	r3, [pc, #92]	@ (800471c <Switch_Buffer+0x94>)
 80046c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
        sys.Current_RAM_Base = RAM_SECOND_BUFFER_ADD;
 80046ca:	4b14      	ldr	r3, [pc, #80]	@ (800471c <Switch_Buffer+0x94>)
 80046cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d0:	461a      	mov	r2, r3
 80046d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80046d6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
 80046da:	e013      	b.n	8004704 <Switch_Buffer+0x7c>
    } 
	else 
	{
		sys.RAM_Buffer_Base_tosend = RAM_FIRST_BUFFER_ADD;
 80046dc:	4b0f      	ldr	r3, [pc, #60]	@ (800471c <Switch_Buffer+0x94>)
 80046de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046e2:	461a      	mov	r2, r3
 80046e4:	2300      	movs	r3, #0
 80046e6:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
        sys.Active_RAM_Buffer = 0;
 80046ea:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <Switch_Buffer+0x94>)
 80046ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
        sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 80046f6:	4b09      	ldr	r3, [pc, #36]	@ (800471c <Switch_Buffer+0x94>)
 80046f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046fc:	461a      	mov	r2, r3
 80046fe:	2300      	movs	r3, #0
 8004700:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
    }

    sys.Current_RAM_Len = 0;
 8004704:	4b05      	ldr	r3, [pc, #20]	@ (800471c <Switch_Buffer+0x94>)
 8004706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800470a:	461a      	mov	r2, r3
 800470c:	2300      	movs	r3, #0
 800470e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
}
 8004712:	bf00      	nop
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	20000720 	.word	0x20000720

08004720 <Erase_RAM_Data>:

/*-----CANCELLAZIONE DATI RAM-----*/
void Erase_RAM_Data(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
	//cancella tutti i dati della ram esterna partendo dall'indirizzo 0
}
 8004724:	bf00      	nop
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <Start_Measure>:


/*-----AVVIO MISURA-----*/
void Start_Measure(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
	Erase_RAM_Data();
 8004734:	f7ff fff4 	bl	8004720 <Erase_RAM_Data>
	sys.RAM_Samples_Number = (config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * 2;
 8004738:	4b45      	ldr	r3, [pc, #276]	@ (8004850 <Start_Measure+0x120>)
 800473a:	885b      	ldrh	r3, [r3, #2]
 800473c:	4a45      	ldr	r2, [pc, #276]	@ (8004854 <Start_Measure+0x124>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	099b      	lsrs	r3, r3, #6
 8004744:	b29b      	uxth	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	4b41      	ldr	r3, [pc, #260]	@ (8004850 <Start_Measure+0x120>)
 800474a:	791b      	ldrb	r3, [r3, #4]
 800474c:	fb02 f303 	mul.w	r3, r2, r3
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	461a      	mov	r2, r3
 8004754:	4b40      	ldr	r3, [pc, #256]	@ (8004858 <Start_Measure+0x128>)
 8004756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800475a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	sys.Active_RAM_Buffer = 0;
 800475e:	4b3e      	ldr	r3, [pc, #248]	@ (8004858 <Start_Measure+0x128>)
 8004760:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004764:	2200      	movs	r2, #0
 8004766:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	sys.Inactive_RAM_Len = 0;
 800476a:	4b3b      	ldr	r3, [pc, #236]	@ (8004858 <Start_Measure+0x128>)
 800476c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004770:	461a      	mov	r2, r3
 8004772:	2300      	movs	r3, #0
 8004774:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
	sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8004778:	4b37      	ldr	r3, [pc, #220]	@ (8004858 <Start_Measure+0x128>)
 800477a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800477e:	461a      	mov	r2, r3
 8004780:	2300      	movs	r3, #0
 8004782:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
	sys.Current_RAM_Len = 0;
 8004786:	4b34      	ldr	r3, [pc, #208]	@ (8004858 <Start_Measure+0x128>)
 8004788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800478c:	461a      	mov	r2, r3
 800478e:	2300      	movs	r3, #0
 8004790:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
	memset(Pressure, 0, sizeof(Pressure));
 8004794:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8004798:	2100      	movs	r1, #0
 800479a:	4830      	ldr	r0, [pc, #192]	@ (800485c <Start_Measure+0x12c>)
 800479c:	f00e fcc6 	bl	801312c <memset>
	memset(Volume_Period, 0, sizeof(Volume_Period));
 80047a0:	2228      	movs	r2, #40	@ 0x28
 80047a2:	2100      	movs	r1, #0
 80047a4:	482e      	ldr	r0, [pc, #184]	@ (8004860 <Start_Measure+0x130>)
 80047a6:	f00e fcc1 	bl	801312c <memset>
	memset(Acceleration, 0, sizeof(Acceleration));
 80047aa:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 80047ae:	2100      	movs	r1, #0
 80047b0:	482c      	ldr	r0, [pc, #176]	@ (8004864 <Start_Measure+0x134>)
 80047b2:	f00e fcbb 	bl	801312c <memset>
	memset(&Supply, 0, sizeof(Supply));
 80047b6:	220c      	movs	r2, #12
 80047b8:	2100      	movs	r1, #0
 80047ba:	482b      	ldr	r0, [pc, #172]	@ (8004868 <Start_Measure+0x138>)
 80047bc:	f00e fcb6 	bl	801312c <memset>
	Temperature = 0;
 80047c0:	4b2a      	ldr	r3, [pc, #168]	@ (800486c <Start_Measure+0x13c>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	801a      	strh	r2, [r3, #0]
	Saved_Bytes = 0;
 80047c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004870 <Start_Measure+0x140>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
	Saved_Samples = 0;
 80047cc:	4b29      	ldr	r3, [pc, #164]	@ (8004874 <Start_Measure+0x144>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	801a      	strh	r2, [r3, #0]
	Address_Offset = 0;
 80047d2:	4b29      	ldr	r3, [pc, #164]	@ (8004878 <Start_Measure+0x148>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
	Cycles_After_Warning = 0;
 80047d8:	4b28      	ldr	r3, [pc, #160]	@ (800487c <Start_Measure+0x14c>)
 80047da:	2200      	movs	r2, #0
 80047dc:	801a      	strh	r2, [r3, #0]
	Clear_Flags();
 80047de:	f000 fdb5 	bl	800534c <Clear_Flags>

	ADC_TIMER->Instance->PSC = 100 - 1;
 80047e2:	4b27      	ldr	r3, [pc, #156]	@ (8004880 <Start_Measure+0x150>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2263      	movs	r2, #99	@ 0x63
 80047e8:	629a      	str	r2, [r3, #40]	@ 0x28
	ADC_TIMER->Instance->ARR = (uint32_t)(SystemCoreClock / (ADC_TIMER->Instance->PSC * config.samp_freq)) - 1;
 80047ea:	4b26      	ldr	r3, [pc, #152]	@ (8004884 <Start_Measure+0x154>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b24      	ldr	r3, [pc, #144]	@ (8004880 <Start_Measure+0x150>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f4:	4916      	ldr	r1, [pc, #88]	@ (8004850 <Start_Measure+0x120>)
 80047f6:	8849      	ldrh	r1, [r1, #2]
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004800:	4b1f      	ldr	r3, [pc, #124]	@ (8004880 <Start_Measure+0x150>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3a01      	subs	r2, #1
 8004806:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->ARR = (uint32_t)(config.samp_freq / 25) - 1;
 8004808:	4b11      	ldr	r3, [pc, #68]	@ (8004850 <Start_Measure+0x120>)
 800480a:	885b      	ldrh	r3, [r3, #2]
 800480c:	4a11      	ldr	r2, [pc, #68]	@ (8004854 <Start_Measure+0x124>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	08db      	lsrs	r3, r3, #3
 8004814:	b29b      	uxth	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <Start_Measure+0x158>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3a01      	subs	r2, #1
 800481e:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->CCR3 = (uint32_t)((ACC_TIMER->Instance->ARR + 1) / 2);
 8004820:	4b19      	ldr	r3, [pc, #100]	@ (8004888 <Start_Measure+0x158>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	4b17      	ldr	r3, [pc, #92]	@ (8004888 <Start_Measure+0x158>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	0852      	lsrs	r2, r2, #1
 800482e:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 8004830:	2108      	movs	r1, #8
 8004832:	4815      	ldr	r0, [pc, #84]	@ (8004888 <Start_Measure+0x158>)
 8004834:	f00b fc9c 	bl	8010170 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 8004838:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800483c:	4907      	ldr	r1, [pc, #28]	@ (800485c <Start_Measure+0x12c>)
 800483e:	4813      	ldr	r0, [pc, #76]	@ (800488c <Start_Measure+0x15c>)
 8004840:	f005 fa18 	bl	8009c74 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start_IT(ADC_TIMER, TIM_CHANNEL_3);
 8004844:	2108      	movs	r1, #8
 8004846:	480e      	ldr	r0, [pc, #56]	@ (8004880 <Start_Measure+0x150>)
 8004848:	f00b f9f8 	bl	800fc3c <HAL_TIM_OC_Start_IT>
}
 800484c:	bf00      	nop
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20001c34 	.word	0x20001c34
 8004854:	51eb851f 	.word	0x51eb851f
 8004858:	20000720 	.word	0x20000720
 800485c:	20003e14 	.word	0x20003e14
 8004860:	20004134 	.word	0x20004134
 8004864:	2000415c 	.word	0x2000415c
 8004868:	20003e04 	.word	0x20003e04
 800486c:	200046e0 	.word	0x200046e0
 8004870:	20004e80 	.word	0x20004e80
 8004874:	20004e84 	.word	0x20004e84
 8004878:	20004e78 	.word	0x20004e78
 800487c:	20004e7c 	.word	0x20004e7c
 8004880:	20000530 	.word	0x20000530
 8004884:	20000168 	.word	0x20000168
 8004888:	200004e4 	.word	0x200004e4
 800488c:	200001f8 	.word	0x200001f8

08004890 <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 80048a4:	2301      	movs	r3, #1
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	e03a      	b.n	8004920 <Warning_Detection+0x90>
	{
		if(Data[i] > max)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	89fa      	ldrh	r2, [r7, #14]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d206      	bcs.n	80048c8 <Warning_Detection+0x38>
		{
			max = Data[i];
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	4413      	add	r3, r2
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	81fb      	strh	r3, [r7, #14]
 80048c6:	e00d      	b.n	80048e4 <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	4413      	add	r3, r2
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	89ba      	ldrh	r2, [r7, #12]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d905      	bls.n	80048e4 <Warning_Detection+0x54>
		{
			min = Data[i];
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	4413      	add	r3, r2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	4413      	add	r3, r2
 80048ec:	881a      	ldrh	r2, [r3, #0]
 80048ee:	4b17      	ldr	r3, [pc, #92]	@ (800494c <Warning_Detection+0xbc>)
 80048f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d30a      	bcc.n	8004910 <Warning_Detection+0x80>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	4413      	add	r3, r2
 8004902:	881a      	ldrh	r2, [r3, #0]
 8004904:	4b11      	ldr	r3, [pc, #68]	@ (800494c <Warning_Detection+0xbc>)
 8004906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800490a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800490c:	429a      	cmp	r2, r3
 800490e:	d904      	bls.n	800491a <Warning_Detection+0x8a>
		{
			flags.Threshold_Detected= 1;
 8004910:	4a0f      	ldr	r2, [pc, #60]	@ (8004950 <Warning_Detection+0xc0>)
 8004912:	7813      	ldrb	r3, [r2, #0]
 8004914:	f043 0310 	orr.w	r3, r3, #16
 8004918:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	3301      	adds	r3, #1
 800491e:	60bb      	str	r3, [r7, #8]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2bc7      	cmp	r3, #199	@ 0xc7
 8004924:	ddc1      	ble.n	80048aa <Warning_Detection+0x1a>
		}
	}

	if(max - min >= Hammer_Th)
 8004926:	89fa      	ldrh	r2, [r7, #14]
 8004928:	89bb      	ldrh	r3, [r7, #12]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	4a09      	ldr	r2, [pc, #36]	@ (8004954 <Warning_Detection+0xc4>)
 800492e:	8812      	ldrh	r2, [r2, #0]
 8004930:	4293      	cmp	r3, r2
 8004932:	db04      	blt.n	800493e <Warning_Detection+0xae>
	{
		flags.Hammer_Detected = 1;
 8004934:	4a06      	ldr	r2, [pc, #24]	@ (8004950 <Warning_Detection+0xc0>)
 8004936:	7813      	ldrb	r3, [r2, #0]
 8004938:	f043 0308 	orr.w	r3, r3, #8
 800493c:	7013      	strb	r3, [r2, #0]
	}

}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20000720 	.word	0x20000720
 8004950:	20001c30 	.word	0x20001c30
 8004954:	20005440 	.word	0x20005440

08004958 <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(Compressed_Sample_Typedef* sample, uint8_t* compressed_data)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	461a      	mov	r2, r3
                            sample->compressed_size.volume_size +
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	885b      	ldrh	r3, [r3, #2]
 800496e:	b29b      	uxth	r3, r3
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8004970:	4413      	add	r3, r2
                            sample->compressed_size.acceleration_size;
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	8892      	ldrh	r2, [r2, #4]
 8004976:	b292      	uxth	r2, r2
                            sample->compressed_size.volume_size +
 8004978:	4413      	add	r3, r2
    uint32_t samples_size = sample->compressed_size.pressure_size +
 800497a:	613b      	str	r3, [r7, #16]
    uint32_t total_size = METADATA_SIZE + samples_size;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	3306      	adds	r3, #6
 8004980:	60fb      	str	r3, [r7, #12]
    uint32_t address = sys.Current_RAM_Base + sys.Current_RAM_Len;
 8004982:	4b23      	ldr	r3, [pc, #140]	@ (8004a10 <RAM_Save_Measure+0xb8>)
 8004984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004988:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800498c:	4b20      	ldr	r3, [pc, #128]	@ (8004a10 <RAM_Save_Measure+0xb8>)
 800498e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004992:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004996:	4413      	add	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

	if(Saved_Samples >= sys.RAM_Samples_Number) 
 800499a:	4b1e      	ldr	r3, [pc, #120]	@ (8004a14 <RAM_Save_Measure+0xbc>)
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a10 <RAM_Save_Measure+0xb8>)
 80049a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d312      	bcc.n	80049d4 <RAM_Save_Measure+0x7c>
	{
		sys.Current_RAM_Len = Saved_Bytes;
 80049ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004a18 <RAM_Save_Measure+0xc0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a17      	ldr	r2, [pc, #92]	@ (8004a10 <RAM_Save_Measure+0xb8>)
 80049b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80049b8:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
		Saved_Bytes = 0;
 80049bc:	4b16      	ldr	r3, [pc, #88]	@ (8004a18 <RAM_Save_Measure+0xc0>)
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
		Saved_Samples = 0;
 80049c2:	4b14      	ldr	r3, [pc, #80]	@ (8004a14 <RAM_Save_Measure+0xbc>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	801a      	strh	r2, [r3, #0]
		address = sys.Current_RAM_Base;
 80049c8:	4b11      	ldr	r3, [pc, #68]	@ (8004a10 <RAM_Save_Measure+0xb8>)
 80049ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80049d2:	617b      	str	r3, [r7, #20]
    }

	RAM_Write(address, METADATA_SIZE, (uint8_t*)sample);
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	2106      	movs	r1, #6
 80049d8:	6978      	ldr	r0, [r7, #20]
 80049da:	f000 ff09 	bl	80057f0 <RAM_Write>
    address += METADATA_SIZE;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	3306      	adds	r3, #6
 80049e2:	617b      	str	r3, [r7, #20]

	RAM_Write(address, samples_size, compressed_data);
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	6939      	ldr	r1, [r7, #16]
 80049e8:	6978      	ldr	r0, [r7, #20]
 80049ea:	f000 ff01 	bl	80057f0 <RAM_Write>
    
    Saved_Bytes += total_size;
 80049ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <RAM_Save_Measure+0xc0>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4413      	add	r3, r2
 80049f6:	4a08      	ldr	r2, [pc, #32]	@ (8004a18 <RAM_Save_Measure+0xc0>)
 80049f8:	6013      	str	r3, [r2, #0]
	Saved_Samples++;
 80049fa:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <RAM_Save_Measure+0xbc>)
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	3301      	adds	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	4b04      	ldr	r3, [pc, #16]	@ (8004a14 <RAM_Save_Measure+0xbc>)
 8004a04:	801a      	strh	r2, [r3, #0]
}
 8004a06:	bf00      	nop
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000720 	.word	0x20000720
 8004a14:	20004e84 	.word	0x20004e84
 8004a18:	20004e80 	.word	0x20004e80

08004a1c <Send_Measure_Chunk>:

/*-----INVIO CHUNK MISURA-----*/
uint32_t Send_Measure_Chunk(uint32_t buffer_base, uint32_t buffer_len, uint32_t start_address)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08c      	sub	sp, #48	@ 0x30
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
    uint32_t chunk_fill = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t address = start_address;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t end_address = start_address; // Per fermarsi quando si torna al punto di partenza
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	623b      	str	r3, [r7, #32]
    uint8_t first_loop = 1;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (buffer_len == 0) 
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <Send_Measure_Chunk+0x28>
	{
        return 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	e083      	b.n	8004b4c <Send_Measure_Chunk+0x130>
    }

    do {
        // Gestione wrap-around circolare
        if (address >= buffer_base + buffer_len) 
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4413      	add	r3, r2
 8004a4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d301      	bcc.n	8004a54 <Send_Measure_Chunk+0x38>
		{
            address = buffer_base;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Controlla se c'è spazio per i metadata
        if ((buffer_base + buffer_len - address) < METADATA_SIZE && address < buffer_base + buffer_len) 
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	441a      	add	r2, r3
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b05      	cmp	r3, #5
 8004a60:	d805      	bhi.n	8004a6e <Send_Measure_Chunk+0x52>
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4413      	add	r3, r2
 8004a68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d357      	bcc.n	8004b1e <Send_Measure_Chunk+0x102>
		{
            break;
        }
        if ((chunk_fill + METADATA_SIZE) > sizeof(tcp_chunk)) 
 8004a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a70:	3306      	adds	r3, #6
 8004a72:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d853      	bhi.n	8004b22 <Send_Measure_Chunk+0x106>
            break;
        }

        // Leggi header sample
        Compressed_Sample_Typedef sample_header;
        RAM_Read(address, METADATA_SIZE, (uint8_t*)&sample_header);
 8004a7a:	f107 0310 	add.w	r3, r7, #16
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2106      	movs	r1, #6
 8004a82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a84:	f000 fec5 	bl	8005812 <RAM_Read>

        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8004a88:	8a3b      	ldrh	r3, [r7, #16]
 8004a8a:	461a      	mov	r2, r3
                               sample_header.compressed_size.volume_size +
 8004a8c:	8a7b      	ldrh	r3, [r7, #18]
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8004a8e:	4413      	add	r3, r2
                               sample_header.compressed_size.acceleration_size;
 8004a90:	8aba      	ldrh	r2, [r7, #20]
                               sample_header.compressed_size.volume_size +
 8004a92:	4413      	add	r3, r2
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8004a94:	61fb      	str	r3, [r7, #28]
        uint32_t sample_total_size = METADATA_SIZE + sample_size;
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	3306      	adds	r3, #6
 8004a9a:	61bb      	str	r3, [r7, #24]

        if ((chunk_fill + sample_total_size) > sizeof(tcp_chunk)) 
 8004a9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d83d      	bhi.n	8004b26 <Send_Measure_Chunk+0x10a>
		{
            break;
        }

        RAM_Read(address, METADATA_SIZE, tcp_chunk + chunk_fill);
 8004aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aac:	4a29      	ldr	r2, [pc, #164]	@ (8004b54 <Send_Measure_Chunk+0x138>)
 8004aae:	4413      	add	r3, r2
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	2106      	movs	r1, #6
 8004ab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ab6:	f000 feac 	bl	8005812 <RAM_Read>
        chunk_fill += METADATA_SIZE;
 8004aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004abc:	3306      	adds	r3, #6
 8004abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        address += METADATA_SIZE;
 8004ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac2:	3306      	adds	r3, #6
 8004ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (address >= buffer_base + buffer_len) address = buffer_base;
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4413      	add	r3, r2
 8004acc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d301      	bcc.n	8004ad6 <Send_Measure_Chunk+0xba>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	62bb      	str	r3, [r7, #40]	@ 0x28

        RAM_Read(address, sample_size, tcp_chunk + chunk_fill);
 8004ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b54 <Send_Measure_Chunk+0x138>)
 8004ada:	4413      	add	r3, r2
 8004adc:	461a      	mov	r2, r3
 8004ade:	69f9      	ldr	r1, [r7, #28]
 8004ae0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ae2:	f000 fe96 	bl	8005812 <RAM_Read>
        chunk_fill += sample_size;
 8004ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        address += sample_size;
 8004aee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	4413      	add	r3, r2
 8004af4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (address >= buffer_base + buffer_len) address = buffer_base;
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4413      	add	r3, r2
 8004afc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d301      	bcc.n	8004b06 <Send_Measure_Chunk+0xea>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Fermati se hai completato il giro
        if (address == end_address && !first_loop) 
 8004b06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d103      	bne.n	8004b16 <Send_Measure_Chunk+0xfa>
 8004b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <Send_Measure_Chunk+0x10e>
		{
            break;
        }
        first_loop = 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    do {
 8004b1c:	e792      	b.n	8004a44 <Send_Measure_Chunk+0x28>
            break;
 8004b1e:	bf00      	nop
 8004b20:	e004      	b.n	8004b2c <Send_Measure_Chunk+0x110>
            break;
 8004b22:	bf00      	nop
 8004b24:	e002      	b.n	8004b2c <Send_Measure_Chunk+0x110>
            break;
 8004b26:	bf00      	nop
 8004b28:	e000      	b.n	8004b2c <Send_Measure_Chunk+0x110>
            break;
 8004b2a:	bf00      	nop
    } while (1);

    if (chunk_fill > 0) 
 8004b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <Send_Measure_Chunk+0x122>
	{
        SIM_Send_TCP_Chunk_DMA(tcp_chunk, chunk_fill);
 8004b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	4619      	mov	r1, r3
 8004b38:	4806      	ldr	r0, [pc, #24]	@ (8004b54 <Send_Measure_Chunk+0x138>)
 8004b3a:	f7fc fd6b 	bl	8001614 <SIM_Send_TCP_Chunk_DMA>
    }

    // Se hai completato il giro, ritorna 0
    if (address == end_address) 
 8004b3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d101      	bne.n	8004b4a <Send_Measure_Chunk+0x12e>
	{
        return 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e000      	b.n	8004b4c <Send_Measure_Chunk+0x130>
    }
    return address;
 8004b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3730      	adds	r7, #48	@ 0x30
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20004e8c 	.word	0x20004e8c

08004b58 <Compress_Sample>:

/*-----COMPRESSIONE DATI-----*/
Compressed_Sizes_Typedef Compress_Sample(uint8_t *input, uint16_t input_len, uint8_t *output)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b09a      	sub	sp, #104	@ 0x68
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	80fb      	strh	r3, [r7, #6]
	uint16_t out_idx = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	uint8_t packed_byte = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	Compressed_Sizes_Typedef sizes = {0, 0, 0};
 8004b74:	2300      	movs	r3, #0
 8004b76:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004b78:	2300      	movs	r3, #0
 8004b7a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	853b      	strh	r3, [r7, #40]	@ 0x28

    AdpcmState_Typedef press_state = {0, 0}, flow_state = {0, 0};
 8004b80:	2300      	movs	r3, #0
 8004b82:	843b      	strh	r3, [r7, #32]
 8004b84:	2300      	movs	r3, #0
 8004b86:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	83bb      	strh	r3, [r7, #28]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	77bb      	strb	r3, [r7, #30]
    AdpcmState_Typedef acc_x_state = {0, 0}, acc_y_state = {0, 0}, acc_z_state = {0, 0};
 8004b92:	2300      	movs	r3, #0
 8004b94:	833b      	strh	r3, [r7, #24]
 8004b96:	2300      	movs	r3, #0
 8004b98:	76bb      	strb	r3, [r7, #26]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	82bb      	strh	r3, [r7, #20]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	75bb      	strb	r3, [r7, #22]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	823b      	strh	r3, [r7, #16]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	74bb      	strb	r3, [r7, #18]

	// --- 1. Pressione ---
	uint16_t *adc = (uint16_t*)input;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	653b      	str	r3, [r7, #80]	@ 0x50
	uint16_t pressure_start = out_idx;
 8004bae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004bb2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

	output[out_idx++] = adc[0] & 0xFF;
 8004bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bb8:	881a      	ldrh	r2, [r3, #0]
 8004bba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004bbe:	1c59      	adds	r1, r3, #1
 8004bc0:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	440b      	add	r3, r1
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = adc[0] >> 8;
 8004bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	0a1b      	lsrs	r3, r3, #8
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004bda:	1c59      	adds	r1, r3, #1
 8004bdc:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8004be0:	4619      	mov	r1, r3
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	440b      	add	r3, r1
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]
	press_state.previous_value = adc[0];
 8004bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	b21b      	sxth	r3, r3
 8004bf0:	843b      	strh	r3, [r7, #32]
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bf6:	e033      	b.n	8004c60 <Compress_Sample+0x108>
	{
		uint8_t nibble = ADPCM_Compression(adc[i], &press_state, step_size_table_12bit);
 8004bf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004bfe:	4413      	add	r3, r2
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	b21b      	sxth	r3, r3
 8004c04:	f107 0120 	add.w	r1, r7, #32
 8004c08:	4a76      	ldr	r2, [pc, #472]	@ (8004de4 <Compress_Sample+0x28c>)
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 f98c 	bl	8004f28 <ADPCM_Compression>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		if (i % 2 != 0) 
 8004c16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d004      	beq.n	8004c2a <Compress_Sample+0xd2>
		{
			packed_byte = nibble;
 8004c20:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004c24:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8004c28:	e017      	b.n	8004c5a <Compress_Sample+0x102>
		} else 
		{
			packed_byte |= (nibble << 4);
 8004c2a:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	b25a      	sxtb	r2, r3
 8004c32:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8004c36:	4313      	orrs	r3, r2
 8004c38:	b25b      	sxtb	r3, r3
 8004c3a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			output[out_idx++] = packed_byte;
 8004c3e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8004c48:	461a      	mov	r2, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8004c52:	701a      	strb	r2, [r3, #0]
			packed_byte = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 8004c5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c62:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c64:	ddc8      	ble.n	8004bf8 <Compress_Sample+0xa0>
	if (PRESS_HALF_SAMPLES % 2 != 0) 
	{
		output[out_idx++] = packed_byte;
		packed_byte = 0;
	}
	sizes.pressure_size = out_idx - pressure_start;
 8004c66:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8004c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	84bb      	strh	r3, [r7, #36]	@ 0x24

	// --- 2. Flusso ---
	uint16_t *counter = (uint16_t*)(input + PRESS_HALF_LEN);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8004c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint16_t volume_start = out_idx;
 8004c7c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004c80:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	output[out_idx++] = counter[0] & 0xFF;
 8004c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c86:	881a      	ldrh	r2, [r3, #0]
 8004c88:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004c8c:	1c59      	adds	r1, r3, #1
 8004c8e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8004c92:	4619      	mov	r1, r3
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	440b      	add	r3, r1
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = counter[0] >> 8;
 8004c9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004ca8:	1c59      	adds	r1, r3, #1
 8004caa:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8004cae:	4619      	mov	r1, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	440b      	add	r3, r1
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	701a      	strb	r2, [r3, #0]
	flow_state.previous_value = counter[0];
 8004cb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b21b      	sxth	r3, r3
 8004cbe:	83bb      	strh	r3, [r7, #28]
	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++)
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cc4:	e033      	b.n	8004d2e <Compress_Sample+0x1d6>
	{
		uint8_t nibble = ADPCM_Compression(counter[i], &flow_state, step_size_table_16bit);
 8004cc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b21b      	sxth	r3, r3
 8004cd2:	f107 011c 	add.w	r1, r7, #28
 8004cd6:	4a44      	ldr	r2, [pc, #272]	@ (8004de8 <Compress_Sample+0x290>)
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f925 	bl	8004f28 <ADPCM_Compression>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		if (i % 2 != 0) 
 8004ce4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d004      	beq.n	8004cf8 <Compress_Sample+0x1a0>
		{
			packed_byte = nibble;
 8004cee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004cf2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8004cf6:	e017      	b.n	8004d28 <Compress_Sample+0x1d0>
		} else {
			packed_byte |= (nibble << 4);
 8004cf8:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	b25a      	sxtb	r2, r3
 8004d00:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8004d04:	4313      	orrs	r3, r2
 8004d06:	b25b      	sxtb	r3, r3
 8004d08:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			output[out_idx++] = packed_byte;
 8004d0c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8004d16:	461a      	mov	r2, r3
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8004d20:	701a      	strb	r2, [r3, #0]
			packed_byte = 0;
 8004d22:	2300      	movs	r3, #0
 8004d24:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++)
 8004d28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d30:	2b13      	cmp	r3, #19
 8004d32:	ddc8      	ble.n	8004cc6 <Compress_Sample+0x16e>
	if (MAX_VOLUME_SAMPLES % 2 != 0) 
	{
		output[out_idx++] = packed_byte;
		packed_byte = 0;
	}
	sizes.volume_size = out_idx - volume_start;
 8004d34:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8004d38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	84fb      	strh	r3, [r7, #38]	@ 0x26

	// --- 3. Accelerometro (3 canali separati) ---
	uint8_t *accel = input + PRESS_HALF_LEN + MAX_VOLUME_LEN;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004d48:	643b      	str	r3, [r7, #64]	@ 0x40
	uint16_t accel_start = out_idx;
 8004d4a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004d4e:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	uint16_t x0 = accel[1] | (accel[2] << 8);
 8004d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d52:	3301      	adds	r3, #1
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	b21a      	sxth	r2, r3
 8004d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d5a:	3302      	adds	r3, #2
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	b21b      	sxth	r3, r3
 8004d60:	021b      	lsls	r3, r3, #8
 8004d62:	b21b      	sxth	r3, r3
 8004d64:	4313      	orrs	r3, r2
 8004d66:	b21b      	sxth	r3, r3
 8004d68:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	uint16_t y0 = accel[3] | (accel[4] << 8);
 8004d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d6c:	3303      	adds	r3, #3
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	b21a      	sxth	r2, r3
 8004d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d74:	3304      	adds	r3, #4
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	b21b      	sxth	r3, r3
 8004d7a:	021b      	lsls	r3, r3, #8
 8004d7c:	b21b      	sxth	r3, r3
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	b21b      	sxth	r3, r3
 8004d82:	877b      	strh	r3, [r7, #58]	@ 0x3a
	uint16_t z0 = accel[5] | (accel[6] << 8);
 8004d84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d86:	3305      	adds	r3, #5
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	b21a      	sxth	r2, r3
 8004d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d8e:	3306      	adds	r3, #6
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	b21b      	sxth	r3, r3
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	b21b      	sxth	r3, r3
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	b21b      	sxth	r3, r3
 8004d9c:	873b      	strh	r3, [r7, #56]	@ 0x38
	acc_x_state.previous_value = x0;
 8004d9e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8004da2:	833b      	strh	r3, [r7, #24]
	acc_y_state.previous_value = y0;
 8004da4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8004da8:	82bb      	strh	r3, [r7, #20]
	acc_z_state.previous_value = z0;
 8004daa:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8004dae:	823b      	strh	r3, [r7, #16]
	for(int k=0; k<7; ++k) output[out_idx++] = accel[k];
 8004db0:	2300      	movs	r3, #0
 8004db2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004db4:	e00f      	b.n	8004dd6 <Compress_Sample+0x27e>
 8004db6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004db8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dba:	441a      	add	r2, r3
 8004dbc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004dc0:	1c59      	adds	r1, r3, #1
 8004dc2:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	440b      	add	r3, r1
 8004dcc:	7812      	ldrb	r2, [r2, #0]
 8004dce:	701a      	strb	r2, [r3, #0]
 8004dd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004dd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dd8:	2b06      	cmp	r3, #6
 8004dda:	ddec      	ble.n	8004db6 <Compress_Sample+0x25e>
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 8004ddc:	2301      	movs	r3, #1
 8004dde:	657b      	str	r3, [r7, #84]	@ 0x54
 8004de0:	e08a      	b.n	8004ef8 <Compress_Sample+0x3a0>
 8004de2:	bf00      	nop
 8004de4:	200000b0 	.word	0x200000b0
 8004de8:	20000000 	.word	0x20000000
	{
		uint16_t x = accel[i*7+1] | (accel[i*7+2] << 8);
 8004dec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004dee:	4613      	mov	r3, r2
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	1a9b      	subs	r3, r3, r2
 8004df4:	3301      	adds	r3, #1
 8004df6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004df8:	4413      	add	r3, r2
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	b219      	sxth	r1, r3
 8004dfe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e00:	4613      	mov	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	3302      	adds	r3, #2
 8004e08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e0a:	4413      	add	r3, r2
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b21b      	sxth	r3, r3
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	b21b      	sxth	r3, r3
 8004e14:	430b      	orrs	r3, r1
 8004e16:	b21b      	sxth	r3, r3
 8004e18:	86fb      	strh	r3, [r7, #54]	@ 0x36
		uint16_t y = accel[i*7+3] | (accel[i*7+4] << 8);
 8004e1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	3303      	adds	r3, #3
 8004e24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e26:	4413      	add	r3, r2
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	b219      	sxth	r1, r3
 8004e2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	3304      	adds	r3, #4
 8004e36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e38:	4413      	add	r3, r2
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	b21b      	sxth	r3, r3
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	b21b      	sxth	r3, r3
 8004e42:	430b      	orrs	r3, r1
 8004e44:	b21b      	sxth	r3, r3
 8004e46:	86bb      	strh	r3, [r7, #52]	@ 0x34
		uint16_t z = accel[i*7+5] | (accel[i*7+6] << 8);
 8004e48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	3305      	adds	r3, #5
 8004e52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e54:	4413      	add	r3, r2
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	b219      	sxth	r1, r3
 8004e5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	1a9b      	subs	r3, r3, r2
 8004e62:	3306      	adds	r3, #6
 8004e64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e66:	4413      	add	r3, r2
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	b21b      	sxth	r3, r3
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	b21b      	sxth	r3, r3
 8004e70:	430b      	orrs	r3, r1
 8004e72:	b21b      	sxth	r3, r3
 8004e74:	867b      	strh	r3, [r7, #50]	@ 0x32
		uint8_t nibble_x = ADPCM_Compression(x, &acc_x_state, step_size_table_16bit);
 8004e76:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004e7a:	f107 0118 	add.w	r1, r7, #24
 8004e7e:	4a29      	ldr	r2, [pc, #164]	@ (8004f24 <Compress_Sample+0x3cc>)
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 f851 	bl	8004f28 <ADPCM_Compression>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		uint8_t nibble_y = ADPCM_Compression(y, &acc_y_state, step_size_table_16bit);
 8004e8c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8004e90:	f107 0114 	add.w	r1, r7, #20
 8004e94:	4a23      	ldr	r2, [pc, #140]	@ (8004f24 <Compress_Sample+0x3cc>)
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f846 	bl	8004f28 <ADPCM_Compression>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		uint8_t nibble_z = ADPCM_Compression(z, &acc_z_state, step_size_table_16bit);
 8004ea2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8004ea6:	f107 0110 	add.w	r1, r7, #16
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8004f24 <Compress_Sample+0x3cc>)
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 f83b 	bl	8004f28 <ADPCM_Compression>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		output[out_idx++] = nibble_x | (nibble_y << 4);
 8004eb8:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	b25a      	sxtb	r2, r3
 8004ec0:	f997 3031 	ldrsb.w	r3, [r7, #49]	@ 0x31
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	b25a      	sxtb	r2, r3
 8004ec8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004ecc:	1c59      	adds	r1, r3, #1
 8004ece:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	440b      	add	r3, r1
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	701a      	strb	r2, [r3, #0]
		output[out_idx++] = nibble_z;
 8004edc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	4413      	add	r3, r2
 8004eec:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004ef0:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 8004ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efa:	2bc7      	cmp	r3, #199	@ 0xc7
 8004efc:	f77f af76 	ble.w	8004dec <Compress_Sample+0x294>
	}
	sizes.acceleration_size = out_idx - accel_start;
 8004f00:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8004f04:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	853b      	strh	r3, [r7, #40]	@ 0x28

	return sizes;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	6010      	str	r0, [r2, #0]
 8004f18:	889b      	ldrh	r3, [r3, #4]
 8004f1a:	8093      	strh	r3, [r2, #4]
}
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	3768      	adds	r7, #104	@ 0x68
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20000000 	.word	0x20000000

08004f28 <ADPCM_Compression>:

/*-----FUNZIONE DI COMPRESSIONE ADPCM-----*/
uint8_t ADPCM_Compression(int16_t sample, AdpcmState_Typedef* state, uint16_t* step_size_table) 
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b08b      	sub	sp, #44	@ 0x2c
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	81fb      	strh	r3, [r7, #14]
    int32_t diff = (int32_t)sample - state->previous_value;
 8004f36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t step = step_size_table[state->step_index];
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	4413      	add	r3, r2
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	837b      	strh	r3, [r7, #26]
    uint8_t nibble = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if (diff < 0) 
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	da05      	bge.n	8004f6c <ADPCM_Compression+0x44>
	{
        nibble = 8; // Bit di segno
 8004f60:	2308      	movs	r3, #8
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        diff = -diff;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	425b      	negs	r3, r3
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calcola il nibble quantizzato
    uint32_t temp = (uint32_t)diff * 4;
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	617b      	str	r3, [r7, #20]
    if (temp < step) 
 8004f72:	8b7b      	ldrh	r3, [r7, #26]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d312      	bcc.n	8004fa0 <ADPCM_Compression+0x78>
	{
        nibble |= 0;
    } 
	else 
	{
        nibble |= (uint8_t)((temp / step > 7) ? 7 : (temp / step));
 8004f7a:	8b7b      	ldrh	r3, [r7, #26]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f82:	2b07      	cmp	r3, #7
 8004f84:	d805      	bhi.n	8004f92 <ADPCM_Compression+0x6a>
 8004f86:	8b7b      	ldrh	r3, [r7, #26]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	b25b      	sxtb	r3, r3
 8004f90:	e000      	b.n	8004f94 <ADPCM_Compression+0x6c>
 8004f92:	2307      	movs	r3, #7
 8004f94:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	b25b      	sxtb	r3, r3
 8004f9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    // Ricostruisci il valore per la predizione successiva (usando solo il nibble)
    int32_t reconstructed_diff = (step * (nibble & 7)) / 4 + step / 8;
 8004fa0:	8b7b      	ldrh	r3, [r7, #26]
 8004fa2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004fa6:	f002 0207 	and.w	r2, r2, #7
 8004faa:	fb02 f303 	mul.w	r3, r2, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	da00      	bge.n	8004fb4 <ADPCM_Compression+0x8c>
 8004fb2:	3303      	adds	r3, #3
 8004fb4:	109b      	asrs	r3, r3, #2
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	8b7b      	ldrh	r3, [r7, #26]
 8004fba:	08db      	lsrs	r3, r3, #3
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	61fb      	str	r3, [r7, #28]
    if (nibble & 8) {
 8004fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <ADPCM_Compression+0xac>
        reconstructed_diff = -reconstructed_diff;
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	425b      	negs	r3, r3
 8004fd2:	61fb      	str	r3, [r7, #28]
    }
    
    state->previous_value += reconstructed_diff;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	b21a      	sxth	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	801a      	strh	r2, [r3, #0]
    // Clamp del valore predetto
    if (state->previous_value > 32767) state->previous_value = 32767;
    if (state->previous_value < -32768) state->previous_value = -32768;

    // Aggiorna l'indice dello step
    state->step_index += index_adjustment_table[nibble & 7];
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	4910      	ldr	r1, [pc, #64]	@ (800503c <ADPCM_Compression+0x114>)
 8004ffc:	56cb      	ldrsb	r3, [r1, r3]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	4413      	add	r3, r2
 8005002:	b2db      	uxtb	r3, r3
 8005004:	b25a      	sxtb	r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	709a      	strb	r2, [r3, #2]
    if (state->step_index < 0) state->step_index = 0;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005010:	2b00      	cmp	r3, #0
 8005012:	da02      	bge.n	800501a <ADPCM_Compression+0xf2>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2200      	movs	r2, #0
 8005018:	709a      	strb	r2, [r3, #2]
    if (state->step_index > 87) state->step_index = 87;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005020:	2b57      	cmp	r3, #87	@ 0x57
 8005022:	dd02      	ble.n	800502a <ADPCM_Compression+0x102>
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2257      	movs	r2, #87	@ 0x57
 8005028:	709a      	strb	r2, [r3, #2]

    return nibble;
 800502a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800502e:	4618      	mov	r0, r3
 8005030:	372c      	adds	r7, #44	@ 0x2c
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	20000160 	.word	0x20000160

08005040 <Apply_Config>:


/*-----APPLICA VALORI CONFIGURAZIONE-----*/
void Apply_Config(void)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
	FIL config_file;
	UINT bytes_written;
	
	if(strcmp(cfg_var, "DEVICE_ID") == 0) 
 800504a:	49a8      	ldr	r1, [pc, #672]	@ (80052ec <Apply_Config+0x2ac>)
 800504c:	48a8      	ldr	r0, [pc, #672]	@ (80052f0 <Apply_Config+0x2b0>)
 800504e:	f7fb f8bf 	bl	80001d0 <strcmp>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d107      	bne.n	8005068 <Apply_Config+0x28>
	{
		config.device_id = (uint8_t)atoi(new_cfg_val);
 8005058:	48a6      	ldr	r0, [pc, #664]	@ (80052f4 <Apply_Config+0x2b4>)
 800505a:	f00d ff7d 	bl	8012f58 <atoi>
 800505e:	4603      	mov	r3, r0
 8005060:	b2da      	uxtb	r2, r3
 8005062:	4ba5      	ldr	r3, [pc, #660]	@ (80052f8 <Apply_Config+0x2b8>)
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	e10a      	b.n	800527e <Apply_Config+0x23e>
    }
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8005068:	49a4      	ldr	r1, [pc, #656]	@ (80052fc <Apply_Config+0x2bc>)
 800506a:	48a1      	ldr	r0, [pc, #644]	@ (80052f0 <Apply_Config+0x2b0>)
 800506c:	f7fb f8b0 	bl	80001d0 <strcmp>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d132      	bne.n	80050dc <Apply_Config+0x9c>
	{
		if((uint16_t)atoi(new_cfg_val) != 800 && (uint16_t)atoi(new_cfg_val) != 1600)
 8005076:	489f      	ldr	r0, [pc, #636]	@ (80052f4 <Apply_Config+0x2b4>)
 8005078:	f00d ff6e 	bl	8012f58 <atoi>
 800507c:	4603      	mov	r3, r0
 800507e:	b29b      	uxth	r3, r3
 8005080:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8005084:	d008      	beq.n	8005098 <Apply_Config+0x58>
 8005086:	489b      	ldr	r0, [pc, #620]	@ (80052f4 <Apply_Config+0x2b4>)
 8005088:	f00d ff66 	bl	8012f58 <atoi>
 800508c:	4603      	mov	r3, r0
 800508e:	b29b      	uxth	r3, r3
 8005090:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005094:	f040 811d 	bne.w	80052d2 <Apply_Config+0x292>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 8005098:	4b97      	ldr	r3, [pc, #604]	@ (80052f8 <Apply_Config+0x2b8>)
 800509a:	885b      	ldrh	r3, [r3, #2]
 800509c:	4a98      	ldr	r2, [pc, #608]	@ (8005300 <Apply_Config+0x2c0>)
 800509e:	fba2 2303 	umull	r2, r3, r2, r3
 80050a2:	099b      	lsrs	r3, r3, #6
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	4b93      	ldr	r3, [pc, #588]	@ (80052f8 <Apply_Config+0x2b8>)
 80050aa:	791b      	ldrb	r3, [r3, #4]
 80050ac:	fb02 f303 	mul.w	r3, r2, r3
 80050b0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80050b4:	fb02 f303 	mul.w	r3, r2, r3
 80050b8:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	461c      	mov	r4, r3
 80050c0:	f000 fbda 	bl	8005878 <psram_get_size>
 80050c4:	4603      	mov	r3, r0
 80050c6:	429c      	cmp	r4, r3
 80050c8:	f240 80d9 	bls.w	800527e <Apply_Config+0x23e>
			{
				config.samp_freq = (uint16_t)atoi(new_cfg_val);
 80050cc:	4889      	ldr	r0, [pc, #548]	@ (80052f4 <Apply_Config+0x2b4>)
 80050ce:	f00d ff43 	bl	8012f58 <atoi>
 80050d2:	4603      	mov	r3, r0
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	4b88      	ldr	r3, [pc, #544]	@ (80052f8 <Apply_Config+0x2b8>)
 80050d8:	805a      	strh	r2, [r3, #2]
 80050da:	e0d0      	b.n	800527e <Apply_Config+0x23e>
			}
		}
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 80050dc:	4989      	ldr	r1, [pc, #548]	@ (8005304 <Apply_Config+0x2c4>)
 80050de:	4884      	ldr	r0, [pc, #528]	@ (80052f0 <Apply_Config+0x2b0>)
 80050e0:	f7fb f876 	bl	80001d0 <strcmp>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d131      	bne.n	800514e <Apply_Config+0x10e>
	{
		if((uint8_t)atoi(new_cfg_val) < 5 || (uint8_t)atoi(new_cfg_val) > 30)
 80050ea:	4882      	ldr	r0, [pc, #520]	@ (80052f4 <Apply_Config+0x2b4>)
 80050ec:	f00d ff34 	bl	8012f58 <atoi>
 80050f0:	4603      	mov	r3, r0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	f240 80ee 	bls.w	80052d6 <Apply_Config+0x296>
 80050fa:	487e      	ldr	r0, [pc, #504]	@ (80052f4 <Apply_Config+0x2b4>)
 80050fc:	f00d ff2c 	bl	8012f58 <atoi>
 8005100:	4603      	mov	r3, r0
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b1e      	cmp	r3, #30
 8005106:	f200 80e6 	bhi.w	80052d6 <Apply_Config+0x296>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 800510a:	4b7b      	ldr	r3, [pc, #492]	@ (80052f8 <Apply_Config+0x2b8>)
 800510c:	885b      	ldrh	r3, [r3, #2]
 800510e:	4a7c      	ldr	r2, [pc, #496]	@ (8005300 <Apply_Config+0x2c0>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	099b      	lsrs	r3, r3, #6
 8005116:	b29b      	uxth	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	4b77      	ldr	r3, [pc, #476]	@ (80052f8 <Apply_Config+0x2b8>)
 800511c:	791b      	ldrb	r3, [r3, #4]
 800511e:	fb02 f303 	mul.w	r3, r2, r3
 8005122:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005126:	fb02 f303 	mul.w	r3, r2, r3
 800512a:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	461c      	mov	r4, r3
 8005132:	f000 fba1 	bl	8005878 <psram_get_size>
 8005136:	4603      	mov	r3, r0
 8005138:	429c      	cmp	r4, r3
 800513a:	f240 80a0 	bls.w	800527e <Apply_Config+0x23e>
			{
				config.buffering_secs = (uint8_t)atoi(new_cfg_val);
 800513e:	486d      	ldr	r0, [pc, #436]	@ (80052f4 <Apply_Config+0x2b4>)
 8005140:	f00d ff0a 	bl	8012f58 <atoi>
 8005144:	4603      	mov	r3, r0
 8005146:	b2da      	uxtb	r2, r3
 8005148:	4b6b      	ldr	r3, [pc, #428]	@ (80052f8 <Apply_Config+0x2b8>)
 800514a:	711a      	strb	r2, [r3, #4]
 800514c:	e097      	b.n	800527e <Apply_Config+0x23e>
			}
		}
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 800514e:	496e      	ldr	r1, [pc, #440]	@ (8005308 <Apply_Config+0x2c8>)
 8005150:	4867      	ldr	r0, [pc, #412]	@ (80052f0 <Apply_Config+0x2b0>)
 8005152:	f7fb f83d 	bl	80001d0 <strcmp>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d107      	bne.n	800516c <Apply_Config+0x12c>
	{
		config.hammer_th = (uint16_t)atoi(new_cfg_val);
 800515c:	4865      	ldr	r0, [pc, #404]	@ (80052f4 <Apply_Config+0x2b4>)
 800515e:	f00d fefb 	bl	8012f58 <atoi>
 8005162:	4603      	mov	r3, r0
 8005164:	b29a      	uxth	r2, r3
 8005166:	4b64      	ldr	r3, [pc, #400]	@ (80052f8 <Apply_Config+0x2b8>)
 8005168:	80da      	strh	r2, [r3, #6]
 800516a:	e088      	b.n	800527e <Apply_Config+0x23e>
	}
    else if(strcmp(cfg_var, "HIGH_TH") == 0) 
 800516c:	4967      	ldr	r1, [pc, #412]	@ (800530c <Apply_Config+0x2cc>)
 800516e:	4860      	ldr	r0, [pc, #384]	@ (80052f0 <Apply_Config+0x2b0>)
 8005170:	f7fb f82e 	bl	80001d0 <strcmp>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d113      	bne.n	80051a2 <Apply_Config+0x162>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 800517a:	4b65      	ldr	r3, [pc, #404]	@ (8005310 <Apply_Config+0x2d0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	db7d      	blt.n	800527e <Apply_Config+0x23e>
 8005182:	4b63      	ldr	r3, [pc, #396]	@ (8005310 <Apply_Config+0x2d0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b17      	cmp	r3, #23
 8005188:	dc79      	bgt.n	800527e <Apply_Config+0x23e>
		{
            config.high_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 800518a:	485a      	ldr	r0, [pc, #360]	@ (80052f4 <Apply_Config+0x2b4>)
 800518c:	f00d fee4 	bl	8012f58 <atoi>
 8005190:	4602      	mov	r2, r0
 8005192:	4b5f      	ldr	r3, [pc, #380]	@ (8005310 <Apply_Config+0x2d0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	b291      	uxth	r1, r2
 8005198:	4a57      	ldr	r2, [pc, #348]	@ (80052f8 <Apply_Config+0x2b8>)
 800519a:	331c      	adds	r3, #28
 800519c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80051a0:	e06d      	b.n	800527e <Apply_Config+0x23e>
        }
    }
    else if(strcmp(cfg_var, "LOW_TH") == 0) 
 80051a2:	495c      	ldr	r1, [pc, #368]	@ (8005314 <Apply_Config+0x2d4>)
 80051a4:	4852      	ldr	r0, [pc, #328]	@ (80052f0 <Apply_Config+0x2b0>)
 80051a6:	f7fb f813 	bl	80001d0 <strcmp>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d113      	bne.n	80051d8 <Apply_Config+0x198>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 80051b0:	4b57      	ldr	r3, [pc, #348]	@ (8005310 <Apply_Config+0x2d0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	db62      	blt.n	800527e <Apply_Config+0x23e>
 80051b8:	4b55      	ldr	r3, [pc, #340]	@ (8005310 <Apply_Config+0x2d0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b17      	cmp	r3, #23
 80051be:	dc5e      	bgt.n	800527e <Apply_Config+0x23e>
		{
            config.low_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 80051c0:	484c      	ldr	r0, [pc, #304]	@ (80052f4 <Apply_Config+0x2b4>)
 80051c2:	f00d fec9 	bl	8012f58 <atoi>
 80051c6:	4602      	mov	r2, r0
 80051c8:	4b51      	ldr	r3, [pc, #324]	@ (8005310 <Apply_Config+0x2d0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	b291      	uxth	r1, r2
 80051ce:	4a4a      	ldr	r2, [pc, #296]	@ (80052f8 <Apply_Config+0x2b8>)
 80051d0:	3304      	adds	r3, #4
 80051d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80051d6:	e052      	b.n	800527e <Apply_Config+0x23e>
        }
    }
    else if(strcmp(cfg_var, "DATA_TOPIC") == 0) 
 80051d8:	494f      	ldr	r1, [pc, #316]	@ (8005318 <Apply_Config+0x2d8>)
 80051da:	4845      	ldr	r0, [pc, #276]	@ (80052f0 <Apply_Config+0x2b0>)
 80051dc:	f7fa fff8 	bl	80001d0 <strcmp>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10d      	bne.n	8005202 <Apply_Config+0x1c2>
	{
        strncpy(config.data_topic, new_cfg_val, sizeof(config.data_topic) - 1);
 80051e6:	223f      	movs	r2, #63	@ 0x3f
 80051e8:	4942      	ldr	r1, [pc, #264]	@ (80052f4 <Apply_Config+0x2b4>)
 80051ea:	484c      	ldr	r0, [pc, #304]	@ (800531c <Apply_Config+0x2dc>)
 80051ec:	f00d ffc5 	bl	801317a <strncpy>
        config.data_topic[sizeof(config.data_topic) - 1] = '\0';
 80051f0:	4b41      	ldr	r3, [pc, #260]	@ (80052f8 <Apply_Config+0x2b8>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
		strcpy(sys.MQTT.Data_Topic, config.data_topic);
 80051f8:	4948      	ldr	r1, [pc, #288]	@ (800531c <Apply_Config+0x2dc>)
 80051fa:	4849      	ldr	r0, [pc, #292]	@ (8005320 <Apply_Config+0x2e0>)
 80051fc:	f00e f812 	bl	8013224 <strcpy>
 8005200:	e03d      	b.n	800527e <Apply_Config+0x23e>
    }
    else if(strcmp(cfg_var, "CMD_TOPIC") == 0) 
 8005202:	4948      	ldr	r1, [pc, #288]	@ (8005324 <Apply_Config+0x2e4>)
 8005204:	483a      	ldr	r0, [pc, #232]	@ (80052f0 <Apply_Config+0x2b0>)
 8005206:	f7fa ffe3 	bl	80001d0 <strcmp>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10d      	bne.n	800522c <Apply_Config+0x1ec>
	{
        strncpy(config.command_topic, new_cfg_val, sizeof(config.command_topic) - 1);
 8005210:	223f      	movs	r2, #63	@ 0x3f
 8005212:	4938      	ldr	r1, [pc, #224]	@ (80052f4 <Apply_Config+0x2b4>)
 8005214:	4844      	ldr	r0, [pc, #272]	@ (8005328 <Apply_Config+0x2e8>)
 8005216:	f00d ffb0 	bl	801317a <strncpy>
        config.command_topic[sizeof(config.command_topic) - 1] = '\0';
 800521a:	4b37      	ldr	r3, [pc, #220]	@ (80052f8 <Apply_Config+0x2b8>)
 800521c:	2200      	movs	r2, #0
 800521e:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
		strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8005222:	4941      	ldr	r1, [pc, #260]	@ (8005328 <Apply_Config+0x2e8>)
 8005224:	4841      	ldr	r0, [pc, #260]	@ (800532c <Apply_Config+0x2ec>)
 8005226:	f00d fffd 	bl	8013224 <strcpy>
 800522a:	e028      	b.n	800527e <Apply_Config+0x23e>
    }
	else if(strcmp(cfg_var, "INFO_TOPIC") == 0)
 800522c:	4940      	ldr	r1, [pc, #256]	@ (8005330 <Apply_Config+0x2f0>)
 800522e:	4830      	ldr	r0, [pc, #192]	@ (80052f0 <Apply_Config+0x2b0>)
 8005230:	f7fa ffce 	bl	80001d0 <strcmp>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10d      	bne.n	8005256 <Apply_Config+0x216>
	{
		strncpy(config.info_topic, new_cfg_val, sizeof(config.info_topic) - 1);
 800523a:	223f      	movs	r2, #63	@ 0x3f
 800523c:	492d      	ldr	r1, [pc, #180]	@ (80052f4 <Apply_Config+0x2b4>)
 800523e:	483d      	ldr	r0, [pc, #244]	@ (8005334 <Apply_Config+0x2f4>)
 8005240:	f00d ff9b 	bl	801317a <strncpy>
		config.info_topic[sizeof(config.info_topic) - 1] = '\0';
 8005244:	4b2c      	ldr	r3, [pc, #176]	@ (80052f8 <Apply_Config+0x2b8>)
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2167 	strb.w	r2, [r3, #359]	@ 0x167
		strcpy(sys.MQTT.Info_Topic, config.info_topic);
 800524c:	4939      	ldr	r1, [pc, #228]	@ (8005334 <Apply_Config+0x2f4>)
 800524e:	483a      	ldr	r0, [pc, #232]	@ (8005338 <Apply_Config+0x2f8>)
 8005250:	f00d ffe8 	bl	8013224 <strcpy>
 8005254:	e013      	b.n	800527e <Apply_Config+0x23e>
	}
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 8005256:	4939      	ldr	r1, [pc, #228]	@ (800533c <Apply_Config+0x2fc>)
 8005258:	4825      	ldr	r0, [pc, #148]	@ (80052f0 <Apply_Config+0x2b0>)
 800525a:	f7fa ffb9 	bl	80001d0 <strcmp>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d13a      	bne.n	80052da <Apply_Config+0x29a>
	{
		strncpy(config.ota_topic, new_cfg_val, sizeof(config.ota_topic) - 1);
 8005264:	223f      	movs	r2, #63	@ 0x3f
 8005266:	4923      	ldr	r1, [pc, #140]	@ (80052f4 <Apply_Config+0x2b4>)
 8005268:	4835      	ldr	r0, [pc, #212]	@ (8005340 <Apply_Config+0x300>)
 800526a:	f00d ff86 	bl	801317a <strncpy>
		config.ota_topic[sizeof(config.ota_topic) - 1] = '\0';
 800526e:	4b22      	ldr	r3, [pc, #136]	@ (80052f8 <Apply_Config+0x2b8>)
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
		strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8005276:	4932      	ldr	r1, [pc, #200]	@ (8005340 <Apply_Config+0x300>)
 8005278:	4832      	ldr	r0, [pc, #200]	@ (8005344 <Apply_Config+0x304>)
 800527a:	f00d ffd3 	bl	8013224 <strcpy>
	else
	{
		return;
	}

	if (f_open(&config_file, APP_CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 800527e:	f107 0310 	add.w	r3, r7, #16
 8005282:	3b08      	subs	r3, #8
 8005284:	220a      	movs	r2, #10
 8005286:	4930      	ldr	r1, [pc, #192]	@ (8005348 <Apply_Config+0x308>)
 8005288:	4618      	mov	r0, r3
 800528a:	f002 fe35 	bl	8007ef8 <f_open>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d124      	bne.n	80052de <Apply_Config+0x29e>
	{
		f_write(&config_file, &config, sizeof(config), &bytes_written);
 8005294:	f107 0310 	add.w	r3, r7, #16
 8005298:	3b0c      	subs	r3, #12
 800529a:	f107 0010 	add.w	r0, r7, #16
 800529e:	3808      	subs	r0, #8
 80052a0:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80052a4:	4914      	ldr	r1, [pc, #80]	@ (80052f8 <Apply_Config+0x2b8>)
 80052a6:	f003 f912 	bl	80084ce <f_write>
		f_close(&config_file);
 80052aa:	f107 0310 	add.w	r3, r7, #16
 80052ae:	3b08      	subs	r3, #8
 80052b0:	4618      	mov	r0, r3
 80052b2:	f003 fb15 	bl	80088e0 <f_close>
	else
	{
		return;
	}
	
	memset(cfg_var, 0, sizeof(cfg_var));
 80052b6:	2214      	movs	r2, #20
 80052b8:	2100      	movs	r1, #0
 80052ba:	480d      	ldr	r0, [pc, #52]	@ (80052f0 <Apply_Config+0x2b0>)
 80052bc:	f00d ff36 	bl	801312c <memset>
	cfg_idx = 0;
 80052c0:	4b13      	ldr	r3, [pc, #76]	@ (8005310 <Apply_Config+0x2d0>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 80052c6:	220a      	movs	r2, #10
 80052c8:	2100      	movs	r1, #0
 80052ca:	480a      	ldr	r0, [pc, #40]	@ (80052f4 <Apply_Config+0x2b4>)
 80052cc:	f00d ff2e 	bl	801312c <memset>
 80052d0:	e006      	b.n	80052e0 <Apply_Config+0x2a0>
			return;
 80052d2:	bf00      	nop
 80052d4:	e004      	b.n	80052e0 <Apply_Config+0x2a0>
			return;
 80052d6:	bf00      	nop
 80052d8:	e002      	b.n	80052e0 <Apply_Config+0x2a0>
		return;
 80052da:	bf00      	nop
 80052dc:	e000      	b.n	80052e0 <Apply_Config+0x2a0>
		return;
 80052de:	bf00      	nop
}
 80052e0:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd90      	pop	{r4, r7, pc}
 80052ea:	bf00      	nop
 80052ec:	08014644 	.word	0x08014644
 80052f0:	200058b4 	.word	0x200058b4
 80052f4:	200058cc 	.word	0x200058cc
 80052f8:	20001c34 	.word	0x20001c34
 80052fc:	08014650 	.word	0x08014650
 8005300:	51eb851f 	.word	0x51eb851f
 8005304:	0801465c 	.word	0x0801465c
 8005308:	08014668 	.word	0x08014668
 800530c:	08014674 	.word	0x08014674
 8005310:	200058c8 	.word	0x200058c8
 8005314:	0801467c 	.word	0x0801467c
 8005318:	08014684 	.word	0x08014684
 800531c:	20001c9c 	.word	0x20001c9c
 8005320:	200019d4 	.word	0x200019d4
 8005324:	08014690 	.word	0x08014690
 8005328:	20001cdc 	.word	0x20001cdc
 800532c:	20001a38 	.word	0x20001a38
 8005330:	0801469c 	.word	0x0801469c
 8005334:	20001d5c 	.word	0x20001d5c
 8005338:	20001b00 	.word	0x20001b00
 800533c:	080146a8 	.word	0x080146a8
 8005340:	20001d1c 	.word	0x20001d1c
 8005344:	20001a9c 	.word	0x20001a9c
 8005348:	080146b4 	.word	0x080146b4

0800534c <Clear_Flags>:

/*-----AZZERAMENTO FLAG-----*/
void Clear_Flags(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
	memset(&sys, 0, sizeof(sys));
 8005350:	f241 5210 	movw	r2, #5392	@ 0x1510
 8005354:	2100      	movs	r1, #0
 8005356:	480c      	ldr	r0, [pc, #48]	@ (8005388 <Clear_Flags+0x3c>)
 8005358:	f00d fee8 	bl	801312c <memset>
	if(!sys.ACC_Present)
 800535c:	4b0a      	ldr	r3, [pc, #40]	@ (8005388 <Clear_Flags+0x3c>)
 800535e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005362:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d109      	bne.n	8005384 <Clear_Flags+0x38>
	{
		sys.ACC_Present = 1;
 8005370:	4b05      	ldr	r3, [pc, #20]	@ (8005388 <Clear_Flags+0x3c>)
 8005372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005376:	461a      	mov	r2, r3
 8005378:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	}
}
 8005384:	bf00      	nop
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20000720 	.word	0x20000720

0800538c <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08e      	sub	sp, #56	@ 0x38
 8005390:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 8005392:	463b      	mov	r3, r7
 8005394:	2238      	movs	r2, #56	@ 0x38
 8005396:	2100      	movs	r1, #0
 8005398:	4618      	mov	r0, r3
 800539a:	f00d fec7 	bl	801312c <memset>

	sCommand.Instruction = 0x66;
 800539e:	2366      	movs	r3, #102	@ 0x66
 80053a0:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80053a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80053a6:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053b0:	463b      	mov	r3, r7
 80053b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b6:	4619      	mov	r1, r3
 80053b8:	480e      	ldr	r0, [pc, #56]	@ (80053f4 <psram_reset+0x68>)
 80053ba:	f007 f959 	bl	800c670 <HAL_QSPI_Command>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <psram_reset+0x3e>
	{
		return -1;
 80053c4:	f04f 33ff 	mov.w	r3, #4294967295
 80053c8:	e00f      	b.n	80053ea <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 80053ca:	2399      	movs	r3, #153	@ 0x99
 80053cc:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053ce:	463b      	mov	r3, r7
 80053d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053d4:	4619      	mov	r1, r3
 80053d6:	4807      	ldr	r0, [pc, #28]	@ (80053f4 <psram_reset+0x68>)
 80053d8:	f007 f94a 	bl	800c670 <HAL_QSPI_Command>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <psram_reset+0x5c>
	{
		return -1;
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	e000      	b.n	80053ea <psram_reset+0x5e>
	}

	return 0;
 80053e8:	2300      	movs	r3, #0

}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3738      	adds	r7, #56	@ 0x38
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	2000031c 	.word	0x2000031c

080053f8 <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b090      	sub	sp, #64	@ 0x40
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	4603      	mov	r3, r0
 8005400:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 8005402:	f107 0308 	add.w	r3, r7, #8
 8005406:	2238      	movs	r2, #56	@ 0x38
 8005408:	2100      	movs	r1, #0
 800540a:	4618      	mov	r0, r3
 800540c:	f00d fe8e 	bl	801312c <memset>

	if(!psramInitDone)return -1;
 8005410:	4b1c      	ldr	r3, [pc, #112]	@ (8005484 <psram_qpi_mode+0x8c>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d102      	bne.n	800541e <psram_qpi_mode+0x26>
 8005418:	f04f 33ff 	mov.w	r3, #4294967295
 800541c:	e02d      	b.n	800547a <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 800541e:	4b1a      	ldr	r3, [pc, #104]	@ (8005488 <psram_qpi_mode+0x90>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d108      	bne.n	8005438 <psram_qpi_mode+0x40>
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d105      	bne.n	8005438 <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 800542c:	23f5      	movs	r3, #245	@ 0xf5
 800542e:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8005430:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005434:	623b      	str	r3, [r7, #32]
 8005436:	e00e      	b.n	8005456 <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8005438:	4b13      	ldr	r3, [pc, #76]	@ (8005488 <psram_qpi_mode+0x90>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d108      	bne.n	8005452 <psram_qpi_mode+0x5a>
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d105      	bne.n	8005452 <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 8005446:	2335      	movs	r3, #53	@ 0x35
 8005448:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800544a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800544e:	623b      	str	r3, [r7, #32]
 8005450:	e001      	b.n	8005456 <psram_qpi_mode+0x5e>

	}else{

		return 0;
 8005452:	2300      	movs	r3, #0
 8005454:	e011      	b.n	800547a <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005456:	f107 0308 	add.w	r3, r7, #8
 800545a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800545e:	4619      	mov	r1, r3
 8005460:	480a      	ldr	r0, [pc, #40]	@ (800548c <psram_qpi_mode+0x94>)
 8005462:	f007 f905 	bl	800c670 <HAL_QSPI_Command>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <psram_qpi_mode+0x7a>
	{
		return -1;
 800546c:	f04f 33ff 	mov.w	r3, #4294967295
 8005470:	e003      	b.n	800547a <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 8005472:	4a05      	ldr	r2, [pc, #20]	@ (8005488 <psram_qpi_mode+0x90>)
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	7013      	strb	r3, [r2, #0]

	return 0;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3740      	adds	r7, #64	@ 0x40
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	200058d6 	.word	0x200058d6
 8005488:	200058d7 	.word	0x200058d7
 800548c:	2000031c 	.word	0x2000031c

08005490 <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b090      	sub	sp, #64	@ 0x40
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 800549a:	f107 0308 	add.w	r3, r7, #8
 800549e:	2238      	movs	r2, #56	@ 0x38
 80054a0:	2100      	movs	r1, #0
 80054a2:	4618      	mov	r0, r3
 80054a4:	f00d fe42 	bl	801312c <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <psram_read_id+0x24>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b07      	cmp	r3, #7
 80054b2:	dc02      	bgt.n	80054ba <psram_read_id+0x2a>
 80054b4:	f06f 0301 	mvn.w	r3, #1
 80054b8:	e034      	b.n	8005524 <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 80054ba:	239f      	movs	r3, #159	@ 0x9f
 80054bc:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80054be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054c2:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80054c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80054cc:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80054ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054d2:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 80054d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 80054da:	2308      	movs	r3, #8
 80054dc:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80054de:	2300      	movs	r3, #0
 80054e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80054e2:	2300      	movs	r3, #0
 80054e4:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80054e6:	2300      	movs	r3, #0
 80054e8:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80054ea:	2300      	movs	r3, #0
 80054ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80054ee:	f107 0308 	add.w	r3, r7, #8
 80054f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f6:	4619      	mov	r1, r3
 80054f8:	480c      	ldr	r0, [pc, #48]	@ (800552c <psram_read_id+0x9c>)
 80054fa:	f007 f8b9 	bl	800c670 <HAL_QSPI_Command>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <psram_read_id+0x7a>
	{
		return -1;
 8005504:	f04f 33ff 	mov.w	r3, #4294967295
 8005508:	e00c      	b.n	8005524 <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800550a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	4806      	ldr	r0, [pc, #24]	@ (800552c <psram_read_id+0x9c>)
 8005512:	f007 f9a2 	bl	800c85a <HAL_QSPI_Receive>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <psram_read_id+0x92>
	{
		return -1;
 800551c:	f04f 33ff 	mov.w	r3, #4294967295
 8005520:	e000      	b.n	8005524 <psram_read_id+0x94>
	}


	return 0;
 8005522:	2300      	movs	r3, #0

}
 8005524:	4618      	mov	r0, r3
 8005526:	3740      	adds	r7, #64	@ 0x40
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	2000031c 	.word	0x2000031c

08005530 <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b092      	sub	sp, #72	@ 0x48
 8005534:	af00      	add	r7, sp, #0
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	607b      	str	r3, [r7, #4]
 800553a:	4603      	mov	r3, r0
 800553c:	73fb      	strb	r3, [r7, #15]
 800553e:	4613      	mov	r3, r2
 8005540:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 8005542:	f107 0310 	add.w	r3, r7, #16
 8005546:	2238      	movs	r2, #56	@ 0x38
 8005548:	2100      	movs	r1, #0
 800554a:	4618      	mov	r0, r3
 800554c:	f00d fdee 	bl	801312c <memset>

	sCommand.Address = address;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005554:	2300      	movs	r3, #0
 8005556:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005558:	2300      	movs	r3, #0
 800555a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800555c:	2300      	movs	r3, #0
 800555e:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005560:	2300      	movs	r3, #0
 8005562:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 8005564:	89bb      	ldrh	r3, [r7, #12]
 8005566:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 8005568:	4b33      	ldr	r3, [pc, #204]	@ (8005638 <psram_internal_read_write+0x108>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01a      	beq.n	80055a6 <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <psram_internal_read_write+0x4a>
 8005576:	2338      	movs	r3, #56	@ 0x38
 8005578:	e000      	b.n	800557c <psram_internal_read_write+0x4c>
 800557a:	23eb      	movs	r3, #235	@ 0xeb
 800557c:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 800557e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005582:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8005584:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005588:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 800558a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800558e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 8005590:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005594:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <psram_internal_read_write+0x70>
 800559c:	2300      	movs	r3, #0
 800559e:	e000      	b.n	80055a2 <psram_internal_read_write+0x72>
 80055a0:	2306      	movs	r3, #6
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80055a4:	e019      	b.n	80055da <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <psram_internal_read_write+0x80>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e000      	b.n	80055b2 <psram_internal_read_write+0x82>
 80055b0:	230b      	movs	r3, #11
 80055b2:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80055b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80055ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80055be:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80055c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 80055c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055ca:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <psram_internal_read_write+0xa6>
 80055d2:	2300      	movs	r3, #0
 80055d4:	e000      	b.n	80055d8 <psram_internal_read_write+0xa8>
 80055d6:	2308      	movs	r3, #8
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80055da:	f107 0310 	add.w	r3, r7, #16
 80055de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e2:	4619      	mov	r1, r3
 80055e4:	4815      	ldr	r0, [pc, #84]	@ (800563c <psram_internal_read_write+0x10c>)
 80055e6:	f007 f843 	bl	800c670 <HAL_QSPI_Command>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <psram_internal_read_write+0xc6>
	{
		return -1;
 80055f0:	f04f 33ff 	mov.w	r3, #4294967295
 80055f4:	e01b      	b.n	800562e <psram_internal_read_write+0xfe>
	}

	if(write)
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00b      	beq.n	8005614 <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80055fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	480e      	ldr	r0, [pc, #56]	@ (800563c <psram_internal_read_write+0x10c>)
 8005604:	f007 f892 	bl	800c72c <HAL_QSPI_Transmit>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00e      	beq.n	800562c <psram_internal_read_write+0xfc>
		{
			return -1;
 800560e:	f04f 33ff 	mov.w	r3, #4294967295
 8005612:	e00c      	b.n	800562e <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	4808      	ldr	r0, [pc, #32]	@ (800563c <psram_internal_read_write+0x10c>)
 800561c:	f007 f91d 	bl	800c85a <HAL_QSPI_Receive>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <psram_internal_read_write+0xfc>
		{
			return -1;
 8005626:	f04f 33ff 	mov.w	r3, #4294967295
 800562a:	e000      	b.n	800562e <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3748      	adds	r7, #72	@ 0x48
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	200058d7 	.word	0x200058d7
 800563c:	2000031c 	.word	0x2000031c

08005640 <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
 800564a:	603b      	str	r3, [r7, #0]
 800564c:	4603      	mov	r3, r0
 800564e:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	029b      	lsls	r3, r3, #10
 800565c:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 800565e:	e018      	b.n	8005692 <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 8005660:	7bf8      	ldrb	r0, [r7, #15]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005668:	69b9      	ldr	r1, [r7, #24]
 800566a:	f7ff ff61 	bl	8005530 <psram_internal_read_write>
 800566e:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2b00      	cmp	r3, #0
 8005674:	da02      	bge.n	800567c <psram_sector_read_write+0x3c>
 8005676:	f04f 33ff 	mov.w	r3, #4294967295
 800567a:	e00e      	b.n	800569a <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005682:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800568a:	61fb      	str	r3, [r7, #28]
		nsectors--;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3b01      	subs	r3, #1
 8005690:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e3      	bne.n	8005660 <psram_sector_read_write+0x20>
	}

	return 0;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3720      	adds	r7, #32
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <psram_read_write>:



int psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	607a      	str	r2, [r7, #4]
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	4603      	mov	r3, r0
 80056b2:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	61bb      	str	r3, [r7, #24]
	uint32_t trBytes = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	61fb      	str	r3, [r7, #28]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 80056c0:	4b1e      	ldr	r3, [pc, #120]	@ (800573c <psram_read_write+0x98>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <psram_read_write+0x2a>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d102      	bne.n	80056d4 <psram_read_write+0x30>
 80056ce:	f04f 33ff 	mov.w	r3, #4294967295
 80056d2:	e02e      	b.n	8005732 <psram_read_write+0x8e>
	if(address + nbytes >= psramSize)return -2;
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	441a      	add	r2, r3
 80056da:	4b19      	ldr	r3, [pc, #100]	@ (8005740 <psram_read_write+0x9c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d323      	bcc.n	800572a <psram_read_write+0x86>
 80056e2:	f06f 0301 	mvn.w	r3, #1
 80056e6:	e024      	b.n	8005732 <psram_read_write+0x8e>

	while(nbytes > 0)
	{
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ee:	bf28      	it	cs
 80056f0:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80056f4:	617b      	str	r3, [r7, #20]
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	7bf8      	ldrb	r0, [r7, #15]
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	68b9      	ldr	r1, [r7, #8]
 8005700:	f7ff ff16 	bl	8005530 <psram_internal_read_write>
 8005704:	61b8      	str	r0, [r7, #24]

		if(result < 0)return -1;
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	da02      	bge.n	8005712 <psram_read_write+0x6e>
 800570c:	f04f 33ff 	mov.w	r3, #4294967295
 8005710:	e00f      	b.n	8005732 <psram_read_write+0x8e>

		address += trBytes;
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	4413      	add	r3, r2
 8005718:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	4413      	add	r3, r2
 8005720:	61fb      	str	r3, [r7, #28]
		nbytes -= trBytes;
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	607b      	str	r3, [r7, #4]
	while(nbytes > 0)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1db      	bne.n	80056e8 <psram_read_write+0x44>
	}

	return 0;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	200058d6 	.word	0x200058d6
 8005740:	200058e0 	.word	0x200058e0

08005744 <raw_psram_read_write>:

int raw_psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	4603      	mov	r3, r0
 8005752:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
	uint32_t trBytes = 0;
 8005758:	2300      	movs	r3, #0
 800575a:	61fb      	str	r3, [r7, #28]
	uint8_t *wPtr = pBuffer;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	61bb      	str	r3, [r7, #24]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8005760:	4b21      	ldr	r3, [pc, #132]	@ (80057e8 <raw_psram_read_write+0xa4>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <raw_psram_read_write+0x2a>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <raw_psram_read_write+0x30>
 800576e:	f04f 33ff 	mov.w	r3, #4294967295
 8005772:	e035      	b.n	80057e0 <raw_psram_read_write+0x9c>
	if(address + nbytes >= psramSize)return -2;
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	441a      	add	r2, r3
 800577a:	4b1c      	ldr	r3, [pc, #112]	@ (80057ec <raw_psram_read_write+0xa8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d302      	bcc.n	8005788 <raw_psram_read_write+0x44>
 8005782:	f06f 0301 	mvn.w	r3, #1
 8005786:	e02b      	b.n	80057e0 <raw_psram_read_write+0x9c>

	trBytes = 1024 - address % 1024;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800578e:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8005792:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8005794:	e020      	b.n	80057d8 <raw_psram_read_write+0x94>
	{
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	b29a      	uxth	r2, r3
 800579a:	7bf8      	ldrb	r0, [r7, #15]
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	f7ff fec6 	bl	8005530 <psram_internal_read_write>
 80057a4:	6178      	str	r0, [r7, #20]

		if(result < 0)return -1;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	da02      	bge.n	80057b2 <raw_psram_read_write+0x6e>
 80057ac:	f04f 33ff 	mov.w	r3, #4294967295
 80057b0:	e016      	b.n	80057e0 <raw_psram_read_write+0x9c>

		address += trBytes;
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	4413      	add	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
		nbytes -= trBytes;
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	607b      	str	r3, [r7, #4]
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d0:	bf28      	it	cs
 80057d2:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80057d6:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1db      	bne.n	8005796 <raw_psram_read_write+0x52>
	}

	return 0;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3720      	adds	r7, #32
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	200058d6 	.word	0x200058d6
 80057ec:	200058e0 	.word	0x200058e0

080057f0 <RAM_Write>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int RAM_Write(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
	return raw_psram_read_write(1, address, nbytes, pBuffer);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	68f9      	ldr	r1, [r7, #12]
 8005802:	2001      	movs	r0, #1
 8005804:	f7ff ff9e 	bl	8005744 <raw_psram_read_write>
 8005808:	4603      	mov	r3, r0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <RAM_Read>:

int RAM_Read(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
	return psram_read_write(0, address, nbytes, pBuffer);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	68f9      	ldr	r1, [r7, #12]
 8005824:	2000      	movs	r0, #0
 8005826:	f7ff ff3d 	bl	80056a4 <psram_read_write>
 800582a:	4603      	mov	r3, r0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <psram_is_initialized>:


int psram_is_initialized()
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
	return psramInitDone;
 8005838:	4b03      	ldr	r3, [pc, #12]	@ (8005848 <psram_is_initialized+0x14>)
 800583a:	781b      	ldrb	r3, [r3, #0]
}
 800583c:	4618      	mov	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	200058d6 	.word	0x200058d6

0800584c <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 8005850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 8005854:	4618      	mov	r0, r3
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
	...

08005860 <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
	return psramNumPages;
 8005864:	4b03      	ldr	r3, [pc, #12]	@ (8005874 <psram_get_sector_count+0x14>)
 8005866:	681b      	ldr	r3, [r3, #0]
}
 8005868:	4618      	mov	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	200058e4 	.word	0x200058e4

08005878 <psram_get_size>:

unsigned int psram_get_size()
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
	return psramSize;
 800587c:	4b03      	ldr	r3, [pc, #12]	@ (800588c <psram_get_size+0x14>)
 800587e:	681b      	ldr	r3, [r3, #0]
}
 8005880:	4618      	mov	r0, r3
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	200058e0 	.word	0x200058e0

08005890 <psram_init>:

int psram_init()
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 8005896:	23ff      	movs	r3, #255	@ 0xff
 8005898:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 800589a:	4b20      	ldr	r3, [pc, #128]	@ (800591c <psram_init+0x8c>)
 800589c:	2200      	movs	r2, #0
 800589e:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 80058a0:	f7ff fd74 	bl	800538c <psram_reset>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	da02      	bge.n	80058b0 <psram_init+0x20>
 80058aa:	f04f 33ff 	mov.w	r3, #4294967295
 80058ae:	e030      	b.n	8005912 <psram_init+0x82>

	memset(psramId, 0xFF, sizeof(psramId));
 80058b0:	2208      	movs	r2, #8
 80058b2:	21ff      	movs	r1, #255	@ 0xff
 80058b4:	481a      	ldr	r0, [pc, #104]	@ (8005920 <psram_init+0x90>)
 80058b6:	f00d fc39 	bl	801312c <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 80058ba:	2108      	movs	r1, #8
 80058bc:	4818      	ldr	r0, [pc, #96]	@ (8005920 <psram_init+0x90>)
 80058be:	f7ff fde7 	bl	8005490 <psram_read_id>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	da02      	bge.n	80058ce <psram_init+0x3e>
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295
 80058cc:	e021      	b.n	8005912 <psram_init+0x82>

	density = psramId[2] >> 5;
 80058ce:	4b14      	ldr	r3, [pc, #80]	@ (8005920 <psram_init+0x90>)
 80058d0:	789b      	ldrb	r3, [r3, #2]
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_64MB)
 80058d6:	4b12      	ldr	r3, [pc, #72]	@ (8005920 <psram_init+0x90>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b0d      	cmp	r3, #13
 80058dc:	d117      	bne.n	800590e <psram_init+0x7e>
 80058de:	4b10      	ldr	r3, [pc, #64]	@ (8005920 <psram_init+0x90>)
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	2b5d      	cmp	r3, #93	@ 0x5d
 80058e4:	d113      	bne.n	800590e <psram_init+0x7e>
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d810      	bhi.n	800590e <psram_init+0x7e>
	{
		psramSize = PSRAM_DENSITY_64MB_EADDR;
 80058ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005924 <psram_init+0x94>)
 80058ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80058f2:	601a      	str	r2, [r3, #0]
		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 80058f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005924 <psram_init+0x94>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	0a9b      	lsrs	r3, r3, #10
 80058fa:	4a0b      	ldr	r2, [pc, #44]	@ (8005928 <psram_init+0x98>)
 80058fc:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 80058fe:	2001      	movs	r0, #1
 8005900:	f7ff fd7a 	bl	80053f8 <psram_qpi_mode>

		psramInitDone = 1;
 8005904:	4b05      	ldr	r3, [pc, #20]	@ (800591c <psram_init+0x8c>)
 8005906:	2201      	movs	r2, #1
 8005908:	701a      	strb	r2, [r3, #0]
		return 0;
 800590a:	2300      	movs	r3, #0
 800590c:	e001      	b.n	8005912 <psram_init+0x82>
	}else{
		return -1;
 800590e:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	200058d6 	.word	0x200058d6
 8005920:	200058d8 	.word	0x200058d8
 8005924:	200058e0 	.word	0x200058e0
 8005928:	200058e4 	.word	0x200058e4

0800592c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005932:	4b0f      	ldr	r3, [pc, #60]	@ (8005970 <HAL_MspInit+0x44>)
 8005934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005936:	4a0e      	ldr	r2, [pc, #56]	@ (8005970 <HAL_MspInit+0x44>)
 8005938:	f043 0301 	orr.w	r3, r3, #1
 800593c:	6613      	str	r3, [r2, #96]	@ 0x60
 800593e:	4b0c      	ldr	r3, [pc, #48]	@ (8005970 <HAL_MspInit+0x44>)
 8005940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	607b      	str	r3, [r7, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800594a:	4b09      	ldr	r3, [pc, #36]	@ (8005970 <HAL_MspInit+0x44>)
 800594c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594e:	4a08      	ldr	r2, [pc, #32]	@ (8005970 <HAL_MspInit+0x44>)
 8005950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005954:	6593      	str	r3, [r2, #88]	@ 0x58
 8005956:	4b06      	ldr	r3, [pc, #24]	@ (8005970 <HAL_MspInit+0x44>)
 8005958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800595a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40021000 	.word	0x40021000

08005974 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b0ac      	sub	sp, #176	@ 0xb0
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800597c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	609a      	str	r2, [r3, #8]
 8005988:	60da      	str	r2, [r3, #12]
 800598a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800598c:	f107 0314 	add.w	r3, r7, #20
 8005990:	2288      	movs	r2, #136	@ 0x88
 8005992:	2100      	movs	r1, #0
 8005994:	4618      	mov	r0, r3
 8005996:	f00d fbc9 	bl	801312c <memset>
  if(hadc->Instance==ADC1)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a3d      	ldr	r2, [pc, #244]	@ (8005a94 <HAL_ADC_MspInit+0x120>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d172      	bne.n	8005a8a <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80059a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80059a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80059aa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80059ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80059b2:	2303      	movs	r3, #3
 80059b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80059b6:	2301      	movs	r3, #1
 80059b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80059ba:	2308      	movs	r3, #8
 80059bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80059be:	2307      	movs	r3, #7
 80059c0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80059c2:	2302      	movs	r3, #2
 80059c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80059c6:	2302      	movs	r3, #2
 80059c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80059ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059ce:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80059d0:	f107 0314 	add.w	r3, r7, #20
 80059d4:	4618      	mov	r0, r3
 80059d6:	f008 f837 	bl	800da48 <HAL_RCCEx_PeriphCLKConfig>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80059e0:	f7fe fc22 	bl	8004228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80059e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005a98 <HAL_ADC_MspInit+0x124>)
 80059e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005a98 <HAL_ADC_MspInit+0x124>)
 80059ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80059ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059f0:	4b29      	ldr	r3, [pc, #164]	@ (8005a98 <HAL_ADC_MspInit+0x124>)
 80059f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059f8:	613b      	str	r3, [r7, #16]
 80059fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059fc:	4b26      	ldr	r3, [pc, #152]	@ (8005a98 <HAL_ADC_MspInit+0x124>)
 80059fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a00:	4a25      	ldr	r2, [pc, #148]	@ (8005a98 <HAL_ADC_MspInit+0x124>)
 8005a02:	f043 0301 	orr.w	r3, r3, #1
 8005a06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a08:	4b23      	ldr	r3, [pc, #140]	@ (8005a98 <HAL_ADC_MspInit+0x124>)
 8005a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005a14:	2310      	movs	r3, #16
 8005a16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8005a1a:	230b      	movs	r3, #11
 8005a1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a26:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005a30:	f005 fd9a 	bl	800b568 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005a34:	4b19      	ldr	r3, [pc, #100]	@ (8005a9c <HAL_ADC_MspInit+0x128>)
 8005a36:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa0 <HAL_ADC_MspInit+0x12c>)
 8005a38:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8005a3a:	4b18      	ldr	r3, [pc, #96]	@ (8005a9c <HAL_ADC_MspInit+0x128>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a40:	4b16      	ldr	r3, [pc, #88]	@ (8005a9c <HAL_ADC_MspInit+0x128>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a46:	4b15      	ldr	r3, [pc, #84]	@ (8005a9c <HAL_ADC_MspInit+0x128>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005a4c:	4b13      	ldr	r3, [pc, #76]	@ (8005a9c <HAL_ADC_MspInit+0x128>)
 8005a4e:	2280      	movs	r2, #128	@ 0x80
 8005a50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005a52:	4b12      	ldr	r3, [pc, #72]	@ (8005a9c <HAL_ADC_MspInit+0x128>)
 8005a54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005a5a:	4b10      	ldr	r3, [pc, #64]	@ (8005a9c <HAL_ADC_MspInit+0x128>)
 8005a5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005a62:	4b0e      	ldr	r3, [pc, #56]	@ (8005a9c <HAL_ADC_MspInit+0x128>)
 8005a64:	2220      	movs	r2, #32
 8005a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005a68:	4b0c      	ldr	r3, [pc, #48]	@ (8005a9c <HAL_ADC_MspInit+0x128>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005a6e:	480b      	ldr	r0, [pc, #44]	@ (8005a9c <HAL_ADC_MspInit+0x128>)
 8005a70:	f005 fb44 	bl	800b0fc <HAL_DMA_Init>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8005a7a:	f7fe fbd5 	bl	8004228 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a06      	ldr	r2, [pc, #24]	@ (8005a9c <HAL_ADC_MspInit+0x128>)
 8005a82:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005a84:	4a05      	ldr	r2, [pc, #20]	@ (8005a9c <HAL_ADC_MspInit+0x128>)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8005a8a:	bf00      	nop
 8005a8c:	37b0      	adds	r7, #176	@ 0xb0
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	50040000 	.word	0x50040000
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	2000025c 	.word	0x2000025c
 8005aa0:	40020008 	.word	0x40020008

08005aa4 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8005adc <HAL_CRC_MspInit+0x38>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d10b      	bne.n	8005ace <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae0 <HAL_CRC_MspInit+0x3c>)
 8005ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aba:	4a09      	ldr	r2, [pc, #36]	@ (8005ae0 <HAL_CRC_MspInit+0x3c>)
 8005abc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ac0:	6493      	str	r3, [r2, #72]	@ 0x48
 8005ac2:	4b07      	ldr	r3, [pc, #28]	@ (8005ae0 <HAL_CRC_MspInit+0x3c>)
 8005ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8005ace:	bf00      	nop
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40023000 	.word	0x40023000
 8005ae0:	40021000 	.word	0x40021000

08005ae4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b0ac      	sub	sp, #176	@ 0xb0
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	605a      	str	r2, [r3, #4]
 8005af6:	609a      	str	r2, [r3, #8]
 8005af8:	60da      	str	r2, [r3, #12]
 8005afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005afc:	f107 0314 	add.w	r3, r7, #20
 8005b00:	2288      	movs	r2, #136	@ 0x88
 8005b02:	2100      	movs	r1, #0
 8005b04:	4618      	mov	r0, r3
 8005b06:	f00d fb11 	bl	801312c <memset>
  if(hi2c->Instance==I2C3)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a21      	ldr	r2, [pc, #132]	@ (8005b94 <HAL_I2C_MspInit+0xb0>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d13b      	bne.n	8005b8c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8005b14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b18:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b1e:	f107 0314 	add.w	r3, r7, #20
 8005b22:	4618      	mov	r0, r3
 8005b24:	f007 ff90 	bl	800da48 <HAL_RCCEx_PeriphCLKConfig>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005b2e:	f7fe fb7b 	bl	8004228 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b32:	4b19      	ldr	r3, [pc, #100]	@ (8005b98 <HAL_I2C_MspInit+0xb4>)
 8005b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b36:	4a18      	ldr	r2, [pc, #96]	@ (8005b98 <HAL_I2C_MspInit+0xb4>)
 8005b38:	f043 0304 	orr.w	r3, r3, #4
 8005b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b3e:	4b16      	ldr	r3, [pc, #88]	@ (8005b98 <HAL_I2C_MspInit+0xb4>)
 8005b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b50:	2312      	movs	r3, #18
 8005b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005b62:	2304      	movs	r3, #4
 8005b64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	480b      	ldr	r0, [pc, #44]	@ (8005b9c <HAL_I2C_MspInit+0xb8>)
 8005b70:	f005 fcfa 	bl	800b568 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005b74:	4b08      	ldr	r3, [pc, #32]	@ (8005b98 <HAL_I2C_MspInit+0xb4>)
 8005b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b78:	4a07      	ldr	r2, [pc, #28]	@ (8005b98 <HAL_I2C_MspInit+0xb4>)
 8005b7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b80:	4b05      	ldr	r3, [pc, #20]	@ (8005b98 <HAL_I2C_MspInit+0xb4>)
 8005b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8005b8c:	bf00      	nop
 8005b8e:	37b0      	adds	r7, #176	@ 0xb0
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40005c00 	.word	0x40005c00
 8005b98:	40021000 	.word	0x40021000
 8005b9c:	48000800 	.word	0x48000800

08005ba0 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08a      	sub	sp, #40	@ 0x28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ba8:	f107 0314 	add.w	r3, r7, #20
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	605a      	str	r2, [r3, #4]
 8005bb2:	609a      	str	r2, [r3, #8]
 8005bb4:	60da      	str	r2, [r3, #12]
 8005bb6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a26      	ldr	r2, [pc, #152]	@ (8005c58 <HAL_QSPI_MspInit+0xb8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d145      	bne.n	8005c4e <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005bc2:	4b26      	ldr	r3, [pc, #152]	@ (8005c5c <HAL_QSPI_MspInit+0xbc>)
 8005bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc6:	4a25      	ldr	r2, [pc, #148]	@ (8005c5c <HAL_QSPI_MspInit+0xbc>)
 8005bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bcc:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bce:	4b23      	ldr	r3, [pc, #140]	@ (8005c5c <HAL_QSPI_MspInit+0xbc>)
 8005bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bda:	4b20      	ldr	r3, [pc, #128]	@ (8005c5c <HAL_QSPI_MspInit+0xbc>)
 8005bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bde:	4a1f      	ldr	r2, [pc, #124]	@ (8005c5c <HAL_QSPI_MspInit+0xbc>)
 8005be0:	f043 0301 	orr.w	r3, r3, #1
 8005be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005be6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c5c <HAL_QSPI_MspInit+0xbc>)
 8005be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c5c <HAL_QSPI_MspInit+0xbc>)
 8005bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bf6:	4a19      	ldr	r2, [pc, #100]	@ (8005c5c <HAL_QSPI_MspInit+0xbc>)
 8005bf8:	f043 0302 	orr.w	r3, r3, #2
 8005bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bfe:	4b17      	ldr	r3, [pc, #92]	@ (8005c5c <HAL_QSPI_MspInit+0xbc>)
 8005c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	60bb      	str	r3, [r7, #8]
 8005c08:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c0a:	23c0      	movs	r3, #192	@ 0xc0
 8005c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c0e:	2302      	movs	r3, #2
 8005c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c16:	2303      	movs	r3, #3
 8005c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8005c1a:	230a      	movs	r3, #10
 8005c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c1e:	f107 0314 	add.w	r3, r7, #20
 8005c22:	4619      	mov	r1, r3
 8005c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005c28:	f005 fc9e 	bl	800b568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8005c2c:	f640 4303 	movw	r3, #3075	@ 0xc03
 8005c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c32:	2302      	movs	r3, #2
 8005c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8005c3e:	230a      	movs	r3, #10
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c42:	f107 0314 	add.w	r3, r7, #20
 8005c46:	4619      	mov	r1, r3
 8005c48:	4805      	ldr	r0, [pc, #20]	@ (8005c60 <HAL_QSPI_MspInit+0xc0>)
 8005c4a:	f005 fc8d 	bl	800b568 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8005c4e:	bf00      	nop
 8005c50:	3728      	adds	r7, #40	@ 0x28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	a0001000 	.word	0xa0001000
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	48000400 	.word	0x48000400

08005c64 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b0a4      	sub	sp, #144	@ 0x90
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c6c:	f107 0308 	add.w	r3, r7, #8
 8005c70:	2288      	movs	r2, #136	@ 0x88
 8005c72:	2100      	movs	r1, #0
 8005c74:	4618      	mov	r0, r3
 8005c76:	f00d fa59 	bl	801312c <memset>
  if(hrtc->Instance==RTC)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a14      	ldr	r2, [pc, #80]	@ (8005cd0 <HAL_RTC_MspInit+0x6c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d120      	bne.n	8005cc6 <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005c84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c88:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005c8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c92:	f107 0308 	add.w	r3, r7, #8
 8005c96:	4618      	mov	r0, r3
 8005c98:	f007 fed6 	bl	800da48 <HAL_RCCEx_PeriphCLKConfig>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8005ca2:	f7fe fac1 	bl	8004228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd4 <HAL_RTC_MspInit+0x70>)
 8005ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cac:	4a09      	ldr	r2, [pc, #36]	@ (8005cd4 <HAL_RTC_MspInit+0x70>)
 8005cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2100      	movs	r1, #0
 8005cba:	2029      	movs	r0, #41	@ 0x29
 8005cbc:	f005 f8f1 	bl	800aea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8005cc0:	2029      	movs	r0, #41	@ 0x29
 8005cc2:	f005 f90a 	bl	800aeda <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8005cc6:	bf00      	nop
 8005cc8:	3790      	adds	r7, #144	@ 0x90
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	40002800 	.word	0x40002800
 8005cd4:	40021000 	.word	0x40021000

08005cd8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08c      	sub	sp, #48	@ 0x30
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ce0:	f107 031c 	add.w	r3, r7, #28
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	605a      	str	r2, [r3, #4]
 8005cea:	609a      	str	r2, [r3, #8]
 8005cec:	60da      	str	r2, [r3, #12]
 8005cee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8005db4 <HAL_SPI_MspInit+0xdc>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d129      	bne.n	8005d4e <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8005db8 <HAL_SPI_MspInit+0xe0>)
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfe:	4a2e      	ldr	r2, [pc, #184]	@ (8005db8 <HAL_SPI_MspInit+0xe0>)
 8005d00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d04:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d06:	4b2c      	ldr	r3, [pc, #176]	@ (8005db8 <HAL_SPI_MspInit+0xe0>)
 8005d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d0e:	61bb      	str	r3, [r7, #24]
 8005d10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d12:	4b29      	ldr	r3, [pc, #164]	@ (8005db8 <HAL_SPI_MspInit+0xe0>)
 8005d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d16:	4a28      	ldr	r2, [pc, #160]	@ (8005db8 <HAL_SPI_MspInit+0xe0>)
 8005d18:	f043 0302 	orr.w	r3, r3, #2
 8005d1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d1e:	4b26      	ldr	r3, [pc, #152]	@ (8005db8 <HAL_SPI_MspInit+0xe0>)
 8005d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005d2a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8005d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d30:	2302      	movs	r3, #2
 8005d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d34:	2300      	movs	r3, #0
 8005d36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005d3c:	2305      	movs	r3, #5
 8005d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d40:	f107 031c 	add.w	r3, r7, #28
 8005d44:	4619      	mov	r1, r3
 8005d46:	481d      	ldr	r0, [pc, #116]	@ (8005dbc <HAL_SPI_MspInit+0xe4>)
 8005d48:	f005 fc0e 	bl	800b568 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005d4c:	e02d      	b.n	8005daa <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1b      	ldr	r2, [pc, #108]	@ (8005dc0 <HAL_SPI_MspInit+0xe8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d128      	bne.n	8005daa <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005d58:	4b17      	ldr	r3, [pc, #92]	@ (8005db8 <HAL_SPI_MspInit+0xe0>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d5c:	4a16      	ldr	r2, [pc, #88]	@ (8005db8 <HAL_SPI_MspInit+0xe0>)
 8005d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d64:	4b14      	ldr	r3, [pc, #80]	@ (8005db8 <HAL_SPI_MspInit+0xe0>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d70:	4b11      	ldr	r3, [pc, #68]	@ (8005db8 <HAL_SPI_MspInit+0xe0>)
 8005d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d74:	4a10      	ldr	r2, [pc, #64]	@ (8005db8 <HAL_SPI_MspInit+0xe0>)
 8005d76:	f043 0304 	orr.w	r3, r3, #4
 8005d7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005db8 <HAL_SPI_MspInit+0xe0>)
 8005d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005d88:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8005d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d8e:	2302      	movs	r3, #2
 8005d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d96:	2303      	movs	r3, #3
 8005d98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005d9a:	2306      	movs	r3, #6
 8005d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d9e:	f107 031c 	add.w	r3, r7, #28
 8005da2:	4619      	mov	r1, r3
 8005da4:	4807      	ldr	r0, [pc, #28]	@ (8005dc4 <HAL_SPI_MspInit+0xec>)
 8005da6:	f005 fbdf 	bl	800b568 <HAL_GPIO_Init>
}
 8005daa:	bf00      	nop
 8005dac:	3730      	adds	r7, #48	@ 0x30
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40003800 	.word	0x40003800
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	48000400 	.word	0x48000400
 8005dc0:	40003c00 	.word	0x40003c00
 8005dc4:	48000800 	.word	0x48000800

08005dc8 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8005e00 <HAL_TIM_OC_MspInit+0x38>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d10b      	bne.n	8005df2 <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005dda:	4b0a      	ldr	r3, [pc, #40]	@ (8005e04 <HAL_TIM_OC_MspInit+0x3c>)
 8005ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dde:	4a09      	ldr	r2, [pc, #36]	@ (8005e04 <HAL_TIM_OC_MspInit+0x3c>)
 8005de0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005de4:	6613      	str	r3, [r2, #96]	@ 0x60
 8005de6:	4b07      	ldr	r3, [pc, #28]	@ (8005e04 <HAL_TIM_OC_MspInit+0x3c>)
 8005de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40012c00 	.word	0x40012c00
 8005e04:	40021000 	.word	0x40021000

08005e08 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	@ 0x28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e10:	f107 0314 	add.w	r3, r7, #20
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	609a      	str	r2, [r3, #8]
 8005e1c:	60da      	str	r2, [r3, #12]
 8005e1e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e28:	d128      	bne.n	8005e7c <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e2a:	4b16      	ldr	r3, [pc, #88]	@ (8005e84 <HAL_TIM_IC_MspInit+0x7c>)
 8005e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e2e:	4a15      	ldr	r2, [pc, #84]	@ (8005e84 <HAL_TIM_IC_MspInit+0x7c>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e36:	4b13      	ldr	r3, [pc, #76]	@ (8005e84 <HAL_TIM_IC_MspInit+0x7c>)
 8005e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	613b      	str	r3, [r7, #16]
 8005e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e42:	4b10      	ldr	r3, [pc, #64]	@ (8005e84 <HAL_TIM_IC_MspInit+0x7c>)
 8005e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e46:	4a0f      	ldr	r2, [pc, #60]	@ (8005e84 <HAL_TIM_IC_MspInit+0x7c>)
 8005e48:	f043 0301 	orr.w	r3, r3, #1
 8005e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e84 <HAL_TIM_IC_MspInit+0x7c>)
 8005e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005e5a:	2320      	movs	r3, #32
 8005e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e5e:	2302      	movs	r3, #2
 8005e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e62:	2301      	movs	r3, #1
 8005e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e66:	2300      	movs	r3, #0
 8005e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e6e:	f107 0314 	add.w	r3, r7, #20
 8005e72:	4619      	mov	r1, r3
 8005e74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005e78:	f005 fb76 	bl	800b568 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8005e7c:	bf00      	nop
 8005e7e:	3728      	adds	r7, #40	@ 0x28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40021000 	.word	0x40021000

08005e88 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a13      	ldr	r2, [pc, #76]	@ (8005ee4 <HAL_TIM_Base_MspInit+0x5c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d10c      	bne.n	8005eb4 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005e9a:	4b13      	ldr	r3, [pc, #76]	@ (8005ee8 <HAL_TIM_Base_MspInit+0x60>)
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9e:	4a12      	ldr	r2, [pc, #72]	@ (8005ee8 <HAL_TIM_Base_MspInit+0x60>)
 8005ea0:	f043 0302 	orr.w	r3, r3, #2
 8005ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ea6:	4b10      	ldr	r3, [pc, #64]	@ (8005ee8 <HAL_TIM_Base_MspInit+0x60>)
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005eb2:	e010      	b.n	8005ed6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8005eec <HAL_TIM_Base_MspInit+0x64>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d10b      	bne.n	8005ed6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee8 <HAL_TIM_Base_MspInit+0x60>)
 8005ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec2:	4a09      	ldr	r2, [pc, #36]	@ (8005ee8 <HAL_TIM_Base_MspInit+0x60>)
 8005ec4:	f043 0304 	orr.w	r3, r3, #4
 8005ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005eca:	4b07      	ldr	r3, [pc, #28]	@ (8005ee8 <HAL_TIM_Base_MspInit+0x60>)
 8005ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	60bb      	str	r3, [r7, #8]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
}
 8005ed6:	bf00      	nop
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	40000800 	.word	0x40000800

08005ef0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08a      	sub	sp, #40	@ 0x28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef8:	f107 0314 	add.w	r3, r7, #20
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	605a      	str	r2, [r3, #4]
 8005f02:	609a      	str	r2, [r3, #8]
 8005f04:	60da      	str	r2, [r3, #12]
 8005f06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a23      	ldr	r2, [pc, #140]	@ (8005f9c <HAL_TIM_MspPostInit+0xac>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d11e      	bne.n	8005f50 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f12:	4b23      	ldr	r3, [pc, #140]	@ (8005fa0 <HAL_TIM_MspPostInit+0xb0>)
 8005f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f16:	4a22      	ldr	r2, [pc, #136]	@ (8005fa0 <HAL_TIM_MspPostInit+0xb0>)
 8005f18:	f043 0301 	orr.w	r3, r3, #1
 8005f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f1e:	4b20      	ldr	r3, [pc, #128]	@ (8005fa0 <HAL_TIM_MspPostInit+0xb0>)
 8005f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	613b      	str	r3, [r7, #16]
 8005f28:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005f2a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8005f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f30:	2302      	movs	r3, #2
 8005f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f40:	f107 0314 	add.w	r3, r7, #20
 8005f44:	4619      	mov	r1, r3
 8005f46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005f4a:	f005 fb0d 	bl	800b568 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005f4e:	e021      	b.n	8005f94 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a13      	ldr	r2, [pc, #76]	@ (8005fa4 <HAL_TIM_MspPostInit+0xb4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d11c      	bne.n	8005f94 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f5a:	4b11      	ldr	r3, [pc, #68]	@ (8005fa0 <HAL_TIM_MspPostInit+0xb0>)
 8005f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f5e:	4a10      	ldr	r2, [pc, #64]	@ (8005fa0 <HAL_TIM_MspPostInit+0xb0>)
 8005f60:	f043 0304 	orr.w	r3, r3, #4
 8005f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f66:	4b0e      	ldr	r3, [pc, #56]	@ (8005fa0 <HAL_TIM_MspPostInit+0xb0>)
 8005f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f6a:	f003 0304 	and.w	r3, r3, #4
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005f72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f80:	2300      	movs	r3, #0
 8005f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005f84:	2302      	movs	r3, #2
 8005f86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f88:	f107 0314 	add.w	r3, r7, #20
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4806      	ldr	r0, [pc, #24]	@ (8005fa8 <HAL_TIM_MspPostInit+0xb8>)
 8005f90:	f005 faea 	bl	800b568 <HAL_GPIO_Init>
}
 8005f94:	bf00      	nop
 8005f96:	3728      	adds	r7, #40	@ 0x28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40012c00 	.word	0x40012c00
 8005fa0:	40021000 	.word	0x40021000
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	48000800 	.word	0x48000800

08005fac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b0ae      	sub	sp, #184	@ 0xb8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fb4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	605a      	str	r2, [r3, #4]
 8005fbe:	609a      	str	r2, [r3, #8]
 8005fc0:	60da      	str	r2, [r3, #12]
 8005fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005fc4:	f107 031c 	add.w	r3, r7, #28
 8005fc8:	2288      	movs	r2, #136	@ 0x88
 8005fca:	2100      	movs	r1, #0
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f00d f8ad 	bl	801312c <memset>
  if(huart->Instance==UART4)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a6b      	ldr	r2, [pc, #428]	@ (8006184 <HAL_UART_MspInit+0x1d8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d13c      	bne.n	8006056 <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005fdc:	2308      	movs	r3, #8
 8005fde:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005fe4:	f107 031c 	add.w	r3, r7, #28
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f007 fd2d 	bl	800da48 <HAL_RCCEx_PeriphCLKConfig>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005ff4:	f7fe f918 	bl	8004228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005ff8:	4b63      	ldr	r3, [pc, #396]	@ (8006188 <HAL_UART_MspInit+0x1dc>)
 8005ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ffc:	4a62      	ldr	r2, [pc, #392]	@ (8006188 <HAL_UART_MspInit+0x1dc>)
 8005ffe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006002:	6593      	str	r3, [r2, #88]	@ 0x58
 8006004:	4b60      	ldr	r3, [pc, #384]	@ (8006188 <HAL_UART_MspInit+0x1dc>)
 8006006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006008:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006010:	4b5d      	ldr	r3, [pc, #372]	@ (8006188 <HAL_UART_MspInit+0x1dc>)
 8006012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006014:	4a5c      	ldr	r2, [pc, #368]	@ (8006188 <HAL_UART_MspInit+0x1dc>)
 8006016:	f043 0301 	orr.w	r3, r3, #1
 800601a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800601c:	4b5a      	ldr	r3, [pc, #360]	@ (8006188 <HAL_UART_MspInit+0x1dc>)
 800601e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006028:	2301      	movs	r3, #1
 800602a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800602e:	2312      	movs	r3, #18
 8006030:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006034:	2301      	movs	r3, #1
 8006036:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800603a:	2303      	movs	r3, #3
 800603c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006040:	2308      	movs	r3, #8
 8006042:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006046:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800604a:	4619      	mov	r1, r3
 800604c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006050:	f005 fa8a 	bl	800b568 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8006054:	e092      	b.n	800617c <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART1)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a4c      	ldr	r2, [pc, #304]	@ (800618c <HAL_UART_MspInit+0x1e0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	f040 808d 	bne.w	800617c <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006062:	2301      	movs	r3, #1
 8006064:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006066:	2300      	movs	r3, #0
 8006068:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800606a:	f107 031c 	add.w	r3, r7, #28
 800606e:	4618      	mov	r0, r3
 8006070:	f007 fcea 	bl	800da48 <HAL_RCCEx_PeriphCLKConfig>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800607a:	f7fe f8d5 	bl	8004228 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800607e:	4b42      	ldr	r3, [pc, #264]	@ (8006188 <HAL_UART_MspInit+0x1dc>)
 8006080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006082:	4a41      	ldr	r2, [pc, #260]	@ (8006188 <HAL_UART_MspInit+0x1dc>)
 8006084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006088:	6613      	str	r3, [r2, #96]	@ 0x60
 800608a:	4b3f      	ldr	r3, [pc, #252]	@ (8006188 <HAL_UART_MspInit+0x1dc>)
 800608c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800608e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006096:	4b3c      	ldr	r3, [pc, #240]	@ (8006188 <HAL_UART_MspInit+0x1dc>)
 8006098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800609a:	4a3b      	ldr	r2, [pc, #236]	@ (8006188 <HAL_UART_MspInit+0x1dc>)
 800609c:	f043 0302 	orr.w	r3, r3, #2
 80060a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060a2:	4b39      	ldr	r3, [pc, #228]	@ (8006188 <HAL_UART_MspInit+0x1dc>)
 80060a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80060ae:	23d8      	movs	r3, #216	@ 0xd8
 80060b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b4:	2302      	movs	r3, #2
 80060b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060c0:	2303      	movs	r3, #3
 80060c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80060c6:	2307      	movs	r3, #7
 80060c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060cc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80060d0:	4619      	mov	r1, r3
 80060d2:	482f      	ldr	r0, [pc, #188]	@ (8006190 <HAL_UART_MspInit+0x1e4>)
 80060d4:	f005 fa48 	bl	800b568 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80060d8:	4b2e      	ldr	r3, [pc, #184]	@ (8006194 <HAL_UART_MspInit+0x1e8>)
 80060da:	4a2f      	ldr	r2, [pc, #188]	@ (8006198 <HAL_UART_MspInit+0x1ec>)
 80060dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80060de:	4b2d      	ldr	r3, [pc, #180]	@ (8006194 <HAL_UART_MspInit+0x1e8>)
 80060e0:	2202      	movs	r2, #2
 80060e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006194 <HAL_UART_MspInit+0x1e8>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006194 <HAL_UART_MspInit+0x1e8>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80060f0:	4b28      	ldr	r3, [pc, #160]	@ (8006194 <HAL_UART_MspInit+0x1e8>)
 80060f2:	2280      	movs	r2, #128	@ 0x80
 80060f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060f6:	4b27      	ldr	r3, [pc, #156]	@ (8006194 <HAL_UART_MspInit+0x1e8>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060fc:	4b25      	ldr	r3, [pc, #148]	@ (8006194 <HAL_UART_MspInit+0x1e8>)
 80060fe:	2200      	movs	r2, #0
 8006100:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006102:	4b24      	ldr	r3, [pc, #144]	@ (8006194 <HAL_UART_MspInit+0x1e8>)
 8006104:	2200      	movs	r2, #0
 8006106:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006108:	4b22      	ldr	r3, [pc, #136]	@ (8006194 <HAL_UART_MspInit+0x1e8>)
 800610a:	2200      	movs	r2, #0
 800610c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800610e:	4821      	ldr	r0, [pc, #132]	@ (8006194 <HAL_UART_MspInit+0x1e8>)
 8006110:	f004 fff4 	bl	800b0fc <HAL_DMA_Init>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <HAL_UART_MspInit+0x172>
      Error_Handler();
 800611a:	f7fe f885 	bl	8004228 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a1c      	ldr	r2, [pc, #112]	@ (8006194 <HAL_UART_MspInit+0x1e8>)
 8006122:	675a      	str	r2, [r3, #116]	@ 0x74
 8006124:	4a1b      	ldr	r2, [pc, #108]	@ (8006194 <HAL_UART_MspInit+0x1e8>)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800612a:	4b1c      	ldr	r3, [pc, #112]	@ (800619c <HAL_UART_MspInit+0x1f0>)
 800612c:	4a1c      	ldr	r2, [pc, #112]	@ (80061a0 <HAL_UART_MspInit+0x1f4>)
 800612e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8006130:	4b1a      	ldr	r3, [pc, #104]	@ (800619c <HAL_UART_MspInit+0x1f0>)
 8006132:	2202      	movs	r2, #2
 8006134:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006136:	4b19      	ldr	r3, [pc, #100]	@ (800619c <HAL_UART_MspInit+0x1f0>)
 8006138:	2210      	movs	r2, #16
 800613a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800613c:	4b17      	ldr	r3, [pc, #92]	@ (800619c <HAL_UART_MspInit+0x1f0>)
 800613e:	2200      	movs	r2, #0
 8006140:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006142:	4b16      	ldr	r3, [pc, #88]	@ (800619c <HAL_UART_MspInit+0x1f0>)
 8006144:	2280      	movs	r2, #128	@ 0x80
 8006146:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006148:	4b14      	ldr	r3, [pc, #80]	@ (800619c <HAL_UART_MspInit+0x1f0>)
 800614a:	2200      	movs	r2, #0
 800614c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800614e:	4b13      	ldr	r3, [pc, #76]	@ (800619c <HAL_UART_MspInit+0x1f0>)
 8006150:	2200      	movs	r2, #0
 8006152:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006154:	4b11      	ldr	r3, [pc, #68]	@ (800619c <HAL_UART_MspInit+0x1f0>)
 8006156:	2200      	movs	r2, #0
 8006158:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800615a:	4b10      	ldr	r3, [pc, #64]	@ (800619c <HAL_UART_MspInit+0x1f0>)
 800615c:	2200      	movs	r2, #0
 800615e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006160:	480e      	ldr	r0, [pc, #56]	@ (800619c <HAL_UART_MspInit+0x1f0>)
 8006162:	f004 ffcb 	bl	800b0fc <HAL_DMA_Init>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 800616c:	f7fe f85c 	bl	8004228 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a0a      	ldr	r2, [pc, #40]	@ (800619c <HAL_UART_MspInit+0x1f0>)
 8006174:	671a      	str	r2, [r3, #112]	@ 0x70
 8006176:	4a09      	ldr	r2, [pc, #36]	@ (800619c <HAL_UART_MspInit+0x1f0>)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800617c:	bf00      	nop
 800617e:	37b8      	adds	r7, #184	@ 0xb8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40004c00 	.word	0x40004c00
 8006188:	40021000 	.word	0x40021000
 800618c:	40013800 	.word	0x40013800
 8006190:	48000400 	.word	0x48000400
 8006194:	2000068c 	.word	0x2000068c
 8006198:	40020058 	.word	0x40020058
 800619c:	200006d4 	.word	0x200006d4
 80061a0:	40020044 	.word	0x40020044

080061a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80061a8:	bf00      	nop
 80061aa:	e7fd      	b.n	80061a8 <NMI_Handler+0x4>

080061ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80061b0:	bf00      	nop
 80061b2:	e7fd      	b.n	80061b0 <HardFault_Handler+0x4>

080061b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80061b8:	bf00      	nop
 80061ba:	e7fd      	b.n	80061b8 <MemManage_Handler+0x4>

080061bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80061c0:	bf00      	nop
 80061c2:	e7fd      	b.n	80061c0 <BusFault_Handler+0x4>

080061c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80061c8:	bf00      	nop
 80061ca:	e7fd      	b.n	80061c8 <UsageFault_Handler+0x4>

080061cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80061d0:	bf00      	nop
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061da:	b480      	push	{r7}
 80061dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061de:	bf00      	nop
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061ec:	bf00      	nop
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80061fa:	f003 f983 	bl	8009504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80061fe:	bf00      	nop
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006208:	4802      	ldr	r0, [pc, #8]	@ (8006214 <DMA1_Channel1_IRQHandler+0x10>)
 800620a:	f005 f8cd 	bl	800b3a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800620e:	bf00      	nop
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	2000025c 	.word	0x2000025c

08006218 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800621c:	4802      	ldr	r0, [pc, #8]	@ (8006228 <DMA1_Channel4_IRQHandler+0x10>)
 800621e:	f005 f8c3 	bl	800b3a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006222:	bf00      	nop
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	200006d4 	.word	0x200006d4

0800622c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006230:	4802      	ldr	r0, [pc, #8]	@ (800623c <DMA1_Channel5_IRQHandler+0x10>)
 8006232:	f005 f8b9 	bl	800b3a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006236:	bf00      	nop
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	2000068c 	.word	0x2000068c

08006240 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8006244:	4802      	ldr	r0, [pc, #8]	@ (8006250 <RTC_Alarm_IRQHandler+0x10>)
 8006246:	f008 fbff 	bl	800ea48 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800624a:	bf00      	nop
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000360 	.word	0x20000360

08006254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800625c:	4a14      	ldr	r2, [pc, #80]	@ (80062b0 <_sbrk+0x5c>)
 800625e:	4b15      	ldr	r3, [pc, #84]	@ (80062b4 <_sbrk+0x60>)
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006268:	4b13      	ldr	r3, [pc, #76]	@ (80062b8 <_sbrk+0x64>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d102      	bne.n	8006276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006270:	4b11      	ldr	r3, [pc, #68]	@ (80062b8 <_sbrk+0x64>)
 8006272:	4a12      	ldr	r2, [pc, #72]	@ (80062bc <_sbrk+0x68>)
 8006274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006276:	4b10      	ldr	r3, [pc, #64]	@ (80062b8 <_sbrk+0x64>)
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	429a      	cmp	r2, r3
 8006282:	d207      	bcs.n	8006294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006284:	f00c ffa2 	bl	80131cc <__errno>
 8006288:	4603      	mov	r3, r0
 800628a:	220c      	movs	r2, #12
 800628c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800628e:	f04f 33ff 	mov.w	r3, #4294967295
 8006292:	e009      	b.n	80062a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006294:	4b08      	ldr	r3, [pc, #32]	@ (80062b8 <_sbrk+0x64>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800629a:	4b07      	ldr	r3, [pc, #28]	@ (80062b8 <_sbrk+0x64>)
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4413      	add	r3, r2
 80062a2:	4a05      	ldr	r2, [pc, #20]	@ (80062b8 <_sbrk+0x64>)
 80062a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80062a6:	68fb      	ldr	r3, [r7, #12]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	20018000 	.word	0x20018000
 80062b4:	00000400 	.word	0x00000400
 80062b8:	200058e8 	.word	0x200058e8
 80062bc:	20005a48 	.word	0x20005a48

080062c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80062c4:	4b06      	ldr	r3, [pc, #24]	@ (80062e0 <SystemInit+0x20>)
 80062c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ca:	4a05      	ldr	r2, [pc, #20]	@ (80062e0 <SystemInit+0x20>)
 80062cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80062d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80062d4:	bf00      	nop
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	e000ed00 	.word	0xe000ed00

080062e4 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	4603      	mov	r3, r0
 80062ec:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <disk_status+0x16>
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d00c      	beq.n	8006312 <disk_status+0x2e>
 80062f8:	e017      	b.n	800632a <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 80062fa:	f7ff fa9b 	bl	8005834 <psram_is_initialized>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d102      	bne.n	800630a <disk_status+0x26>
		{
			stat = STA_NOINIT;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
 8006308:	e001      	b.n	800630e <disk_status+0x2a>
		}else{
			stat = 0;
 800630a:	2300      	movs	r3, #0
 800630c:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	e00c      	b.n	800632c <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8006312:	f7fc f835 	bl	8002380 <extflash_is_initialized>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
 8006320:	e001      	b.n	8006326 <disk_status+0x42>
		}else{
			stat = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	e000      	b.n	800632c <disk_status+0x48>

	}
	return STA_NOINIT;
 800632a:	2301      	movs	r3, #1
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <disk_initialize+0x16>
 8006344:	2b01      	cmp	r3, #1
 8006346:	d00c      	beq.n	8006362 <disk_initialize+0x2e>
 8006348:	e017      	b.n	800637a <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 800634a:	f7ff faa1 	bl	8005890 <psram_init>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	da02      	bge.n	800635a <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 8006354:	2302      	movs	r3, #2
 8006356:	73fb      	strb	r3, [r7, #15]
 8006358:	e001      	b.n	800635e <disk_initialize+0x2a>
		}else{
			stat = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	e00c      	b.n	800637c <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 8006362:	f7fc f819 	bl	8002398 <extflash_init>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	da02      	bge.n	8006372 <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 800636c:	2302      	movs	r3, #2
 800636e:	73fb      	strb	r3, [r7, #15]
 8006370:	e001      	b.n	8006376 <disk_initialize+0x42>
		}else{
			stat = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	e000      	b.n	800637c <disk_initialize+0x48>

	}
	return STA_NOINIT;
 800637a:	2301      	movs	r3, #1
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	4603      	mov	r3, r0
 8006392:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <disk_read+0x1c>
 800639a:	2b01      	cmp	r3, #1
 800639c:	d010      	beq.n	80063c0 <disk_read+0x3c>
 800639e:	e01e      	b.n	80063de <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	2000      	movs	r0, #0
 80063a8:	f7ff f94a 	bl	8005640 <psram_sector_read_write>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	da02      	bge.n	80063b8 <disk_read+0x34>
		{
			res = RES_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	75fb      	strb	r3, [r7, #23]
 80063b6:	e001      	b.n	80063bc <disk_read+0x38>
		}else{

			res = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
 80063be:	e00f      	b.n	80063e0 <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7fb febf 	bl	8002148 <extflash_sector_read>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	da02      	bge.n	80063d6 <disk_read+0x52>
		{
			res = RES_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	75fb      	strb	r3, [r7, #23]
 80063d4:	e001      	b.n	80063da <disk_read+0x56>
		}else{

			res = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 80063da:	7dfb      	ldrb	r3, [r7, #23]
 80063dc:	e000      	b.n	80063e0 <disk_read+0x5c>

	}

	return RES_PARERR;
 80063de:	2304      	movs	r3, #4
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	4603      	mov	r3, r0
 80063f6:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <disk_write+0x20>
 8006402:	2b01      	cmp	r3, #1
 8006404:	d010      	beq.n	8006428 <disk_write+0x40>
 8006406:	e01e      	b.n	8006446 <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	2001      	movs	r0, #1
 8006410:	f7ff f916 	bl	8005640 <psram_sector_read_write>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	da02      	bge.n	8006420 <disk_write+0x38>
		{
			res = RES_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	75fb      	strb	r3, [r7, #23]
 800641e:	e001      	b.n	8006424 <disk_write+0x3c>
		}else{

			res = 0;
 8006420:	2300      	movs	r3, #0
 8006422:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	e00f      	b.n	8006448 <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f7fb ff20 	bl	8002272 <extflash_sector_write>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	da02      	bge.n	800643e <disk_write+0x56>
		{
			res = RES_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	75fb      	strb	r3, [r7, #23]
 800643c:	e001      	b.n	8006442 <disk_write+0x5a>
		}else{

			res = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8006442:	7dfb      	ldrb	r3, [r7, #23]
 8006444:	e000      	b.n	8006448 <disk_write+0x60>

	}

	return RES_PARERR;
 8006446:	2304      	movs	r3, #4
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	4603      	mov	r3, r0
 8006458:	603a      	str	r2, [r7, #0]
 800645a:	71fb      	strb	r3, [r7, #7]
 800645c:	460b      	mov	r3, r1
 800645e:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 8006460:	2304      	movs	r3, #4
 8006462:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <disk_ioctl+0x20>
 800646a:	2b01      	cmp	r3, #1
 800646c:	d036      	beq.n	80064dc <disk_ioctl+0x8c>
 800646e:	e06b      	b.n	8006548 <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 8006470:	f7ff f9e0 	bl	8005834 <psram_is_initialized>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <disk_ioctl+0x2e>
 800647a:	2303      	movs	r3, #3
 800647c:	e065      	b.n	800654a <disk_ioctl+0xfa>

		switch(cmd)
 800647e:	79bb      	ldrb	r3, [r7, #6]
 8006480:	2b04      	cmp	r3, #4
 8006482:	d826      	bhi.n	80064d2 <disk_ioctl+0x82>
 8006484:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <disk_ioctl+0x3c>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	080064cd 	.word	0x080064cd
 8006490:	080064a1 	.word	0x080064a1
 8006494:	080064b1 	.word	0x080064b1
 8006498:	080064c1 	.word	0x080064c1
 800649c:	080064cd 	.word	0x080064cd
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 80064a0:	f7ff f9de 	bl	8005860 <psram_get_sector_count>
 80064a4:	4602      	mov	r2, r0
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	601a      	str	r2, [r3, #0]
				res = 0;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73fb      	strb	r3, [r7, #15]
				break;
 80064ae:	e013      	b.n	80064d8 <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 80064b0:	f7ff f9cc 	bl	800584c <psram_get_sector_size>
 80064b4:	4602      	mov	r2, r0
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	601a      	str	r2, [r3, #0]
				res = 0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	73fb      	strb	r3, [r7, #15]
				break;
 80064be:	e00b      	b.n	80064d8 <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2201      	movs	r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
				res = 0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	73fb      	strb	r3, [r7, #15]
				break;
 80064ca:	e005      	b.n	80064d8 <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	73fb      	strb	r3, [r7, #15]
				break;
 80064d0:	e002      	b.n	80064d8 <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 80064d2:	2304      	movs	r3, #4
 80064d4:	73fb      	strb	r3, [r7, #15]
				break;
 80064d6:	bf00      	nop
		}

		return res;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
 80064da:	e036      	b.n	800654a <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 80064dc:	f7fb ff50 	bl	8002380 <extflash_is_initialized>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <disk_ioctl+0x9a>
 80064e6:	2303      	movs	r3, #3
 80064e8:	e02f      	b.n	800654a <disk_ioctl+0xfa>

		switch(cmd)
 80064ea:	79bb      	ldrb	r3, [r7, #6]
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	d826      	bhi.n	800653e <disk_ioctl+0xee>
 80064f0:	a201      	add	r2, pc, #4	@ (adr r2, 80064f8 <disk_ioctl+0xa8>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	08006539 	.word	0x08006539
 80064fc:	0800650d 	.word	0x0800650d
 8006500:	0800651d 	.word	0x0800651d
 8006504:	0800652d 	.word	0x0800652d
 8006508:	08006539 	.word	0x08006539
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 800650c:	f7fb ff2c 	bl	8002368 <extflash_get_sector_count>
 8006510:	4602      	mov	r2, r0
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	601a      	str	r2, [r3, #0]
				res = 0;
 8006516:	2300      	movs	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
				break;
 800651a:	e013      	b.n	8006544 <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 800651c:	f7fb ff1b 	bl	8002356 <extflash_get_sector_size>
 8006520:	4602      	mov	r2, r0
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	601a      	str	r2, [r3, #0]
				res = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	73fb      	strb	r3, [r7, #15]
				break;
 800652a:	e00b      	b.n	8006544 <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2201      	movs	r2, #1
 8006530:	601a      	str	r2, [r3, #0]
				res = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	73fb      	strb	r3, [r7, #15]
				break;
 8006536:	e005      	b.n	8006544 <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]
				break;
 800653c:	e002      	b.n	8006544 <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 800653e:	2304      	movs	r3, #4
 8006540:	73fb      	strb	r3, [r7, #15]
				break;
 8006542:	bf00      	nop
		}

		return res;
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	e000      	b.n	800654a <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 8006548:	2304      	movs	r3, #4
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop

08006554 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3301      	adds	r3, #1
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006564:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	b21a      	sxth	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	b21b      	sxth	r3, r3
 8006572:	4313      	orrs	r3, r2
 8006574:	b21b      	sxth	r3, r3
 8006576:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006578:	89fb      	ldrh	r3, [r7, #14]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3303      	adds	r3, #3
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	021b      	lsls	r3, r3, #8
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	3202      	adds	r2, #2
 800659e:	7812      	ldrb	r2, [r2, #0]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	3201      	adds	r2, #1
 80065ac:	7812      	ldrb	r2, [r2, #0]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	021b      	lsls	r3, r3, #8
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	7812      	ldrb	r2, [r2, #0]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
	return rv;
 80065be:	68fb      	ldr	r3, [r7, #12]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	607a      	str	r2, [r7, #4]
 80065de:	887a      	ldrh	r2, [r7, #2]
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	887b      	ldrh	r3, [r7, #2]
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	887a      	ldrh	r2, [r7, #2]
 80065f2:	b2d2      	uxtb	r2, r2
 80065f4:	701a      	strb	r2, [r3, #0]
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	0a1b      	lsrs	r3, r3, #8
 800661c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	0a1b      	lsrs	r3, r3, #8
 800662e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	607a      	str	r2, [r7, #4]
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	0a1b      	lsrs	r3, r3, #8
 8006640:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	4603      	mov	r3, r0
 8006662:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <dbc_1st+0x14>
 800666a:	2300      	movs	r3, #0
 800666c:	e000      	b.n	8006670 <dbc_1st+0x16>
#endif
	return 0;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	4603      	mov	r3, r0
 8006684:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8006686:	79fb      	ldrb	r3, [r7, #7]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <dbc_2nd+0x14>
 800668c:	2300      	movs	r3, #0
 800668e:	e000      	b.n	8006692 <dbc_2nd+0x16>
#endif
	return 0;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	791b      	ldrb	r3, [r3, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d02c      	beq.n	800670c <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	7858      	ldrb	r0, [r3, #1]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066c0:	2301      	movs	r3, #1
 80066c2:	f7ff fe91 	bl	80063e8 <disk_write>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d11d      	bne.n	8006708 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066da:	1ad2      	subs	r2, r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d213      	bcs.n	800670c <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	78db      	ldrb	r3, [r3, #3]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d10f      	bne.n	800670c <sync_window+0x6e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	7858      	ldrb	r0, [r3, #1]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	441a      	add	r2, r3
 8006700:	2301      	movs	r3, #1
 8006702:	f7ff fe71 	bl	80063e8 <disk_write>
 8006706:	e001      	b.n	800670c <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8006708:	2301      	movs	r3, #1
 800670a:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d01b      	beq.n	8006766 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff ffb5 	bl	800669e <sync_window>
 8006734:	4603      	mov	r3, r0
 8006736:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d113      	bne.n	8006766 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	7858      	ldrb	r0, [r3, #1]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006748:	2301      	movs	r3, #1
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	f7ff fe1a 	bl	8006384 <disk_read>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8006756:	f04f 33ff 	mov.w	r3, #4294967295
 800675a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800675c:	2301      	movs	r3, #1
 800675e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8006766:	7bfb      	ldrb	r3, [r7, #15]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff ff90 	bl	800669e <sync_window>
 800677e:	4603      	mov	r3, r0
 8006780:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d158      	bne.n	800683a <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b03      	cmp	r3, #3
 800678e:	d148      	bne.n	8006822 <sync_fs+0xb2>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	795b      	ldrb	r3, [r3, #5]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d144      	bne.n	8006822 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3334      	adds	r3, #52	@ 0x34
 800679c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80067a0:	2100      	movs	r1, #0
 80067a2:	4618      	mov	r0, r3
 80067a4:	f00c fcc2 	bl	801312c <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3334      	adds	r3, #52	@ 0x34
 80067ac:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80067b0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff ff09 	bl	80065cc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3334      	adds	r3, #52	@ 0x34
 80067be:	4921      	ldr	r1, [pc, #132]	@ (8006844 <sync_fs+0xd4>)
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff ff1e 	bl	8006602 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3334      	adds	r3, #52	@ 0x34
 80067ca:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80067ce:	491e      	ldr	r1, [pc, #120]	@ (8006848 <sync_fs+0xd8>)
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff ff16 	bl	8006602 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3334      	adds	r3, #52	@ 0x34
 80067da:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	4619      	mov	r1, r3
 80067e4:	4610      	mov	r0, r2
 80067e6:	f7ff ff0c 	bl	8006602 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3334      	adds	r3, #52	@ 0x34
 80067ee:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	4619      	mov	r1, r3
 80067f8:	4610      	mov	r0, r2
 80067fa:	f7ff ff02 	bl	8006602 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	7858      	ldrb	r0, [r3, #1]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006816:	2301      	movs	r3, #1
 8006818:	f7ff fde6 	bl	80063e8 <disk_write>
			fs->fsi_flag = 0;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	785b      	ldrb	r3, [r3, #1]
 8006826:	2200      	movs	r2, #0
 8006828:	2100      	movs	r1, #0
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff fe10 	bl	8006450 <disk_ioctl>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <sync_fs+0xca>
 8006836:	2301      	movs	r3, #1
 8006838:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800683a:	7bfb      	ldrb	r3, [r7, #15]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	41615252 	.word	0x41615252
 8006848:	61417272 	.word	0x61417272

0800684c <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	3b02      	subs	r3, #2
 800685a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	3b02      	subs	r3, #2
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d301      	bcc.n	800686c <clst2sect+0x20>
 8006868:	2300      	movs	r3, #0
 800686a:	e008      	b.n	800687e <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	895b      	ldrh	r3, [r3, #10]
 8006874:	4619      	mov	r1, r3
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	fb01 f303 	mul.w	r3, r1, r3
 800687c:	4413      	add	r3, r2
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b086      	sub	sp, #24
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d904      	bls.n	80068aa <get_fat+0x20>
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d302      	bcc.n	80068b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80068aa:	2301      	movs	r3, #1
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	e0ba      	b.n	8006a26 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80068b0:	f04f 33ff 	mov.w	r3, #4294967295
 80068b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	f000 8082 	beq.w	80069c4 <get_fat+0x13a>
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	f300 80a6 	bgt.w	8006a12 <get_fat+0x188>
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d002      	beq.n	80068d0 <get_fat+0x46>
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d055      	beq.n	800697a <get_fat+0xf0>
 80068ce:	e0a0      	b.n	8006a12 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	085b      	lsrs	r3, r3, #1
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4413      	add	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	899b      	ldrh	r3, [r3, #12]
 80068e6:	4619      	mov	r1, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80068ee:	4413      	add	r3, r2
 80068f0:	4619      	mov	r1, r3
 80068f2:	6938      	ldr	r0, [r7, #16]
 80068f4:	f7ff ff0f 	bl	8006716 <move_window>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f040 808c 	bne.w	8006a18 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	60fa      	str	r2, [r7, #12]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	8992      	ldrh	r2, [r2, #12]
 800690a:	fbb3 f1f2 	udiv	r1, r3, r2
 800690e:	fb01 f202 	mul.w	r2, r1, r2
 8006912:	1a9b      	subs	r3, r3, r2
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4413      	add	r3, r2
 8006918:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800691c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	899b      	ldrh	r3, [r3, #12]
 8006926:	4619      	mov	r1, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	fbb3 f3f1 	udiv	r3, r3, r1
 800692e:	4413      	add	r3, r2
 8006930:	4619      	mov	r1, r3
 8006932:	6938      	ldr	r0, [r7, #16]
 8006934:	f7ff feef 	bl	8006716 <move_window>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d16e      	bne.n	8006a1c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	899b      	ldrh	r3, [r3, #12]
 8006942:	461a      	mov	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	fbb3 f1f2 	udiv	r1, r3, r2
 800694a:	fb01 f202 	mul.w	r2, r1, r2
 800694e:	1a9b      	subs	r3, r3, r2
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4413      	add	r3, r2
 8006954:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	4313      	orrs	r3, r2
 800695e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <get_fat+0xe6>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	091b      	lsrs	r3, r3, #4
 800696e:	e002      	b.n	8006976 <get_fat+0xec>
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006976:	617b      	str	r3, [r7, #20]
			break;
 8006978:	e055      	b.n	8006a26 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	899b      	ldrh	r3, [r3, #12]
 8006982:	085b      	lsrs	r3, r3, #1
 8006984:	b29b      	uxth	r3, r3
 8006986:	4619      	mov	r1, r3
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	fbb3 f3f1 	udiv	r3, r3, r1
 800698e:	4413      	add	r3, r2
 8006990:	4619      	mov	r1, r3
 8006992:	6938      	ldr	r0, [r7, #16]
 8006994:	f7ff febf 	bl	8006716 <move_window>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d140      	bne.n	8006a20 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	8992      	ldrh	r2, [r2, #12]
 80069ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80069b0:	fb00 f202 	mul.w	r2, r0, r2
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	440b      	add	r3, r1
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff fdcb 	bl	8006554 <ld_word>
 80069be:	4603      	mov	r3, r0
 80069c0:	617b      	str	r3, [r7, #20]
			break;
 80069c2:	e030      	b.n	8006a26 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	899b      	ldrh	r3, [r3, #12]
 80069cc:	089b      	lsrs	r3, r3, #2
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	4619      	mov	r1, r3
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80069d8:	4413      	add	r3, r2
 80069da:	4619      	mov	r1, r3
 80069dc:	6938      	ldr	r0, [r7, #16]
 80069de:	f7ff fe9a 	bl	8006716 <move_window>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d11d      	bne.n	8006a24 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	8992      	ldrh	r2, [r2, #12]
 80069f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80069fa:	fb00 f202 	mul.w	r2, r0, r2
 80069fe:	1a9b      	subs	r3, r3, r2
 8006a00:	440b      	add	r3, r1
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff fdbf 	bl	8006586 <ld_dword>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006a0e:	617b      	str	r3, [r7, #20]
			break;
 8006a10:	e009      	b.n	8006a26 <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 8006a12:	2301      	movs	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	e006      	b.n	8006a26 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a18:	bf00      	nop
 8006a1a:	e004      	b.n	8006a26 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a1c:	bf00      	nop
 8006a1e:	e002      	b.n	8006a26 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a20:	bf00      	nop
 8006a22:	e000      	b.n	8006a26 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a24:	bf00      	nop
		}
	}

	return val;
 8006a26:	697b      	ldr	r3, [r7, #20]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006a30:	b590      	push	{r4, r7, lr}
 8006a32:	b089      	sub	sp, #36	@ 0x24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	f240 8109 	bls.w	8006c5a <put_fat+0x22a>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	f080 8103 	bcs.w	8006c5a <put_fat+0x22a>
		switch (fs->fs_type) {
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	f000 80b6 	beq.w	8006bca <put_fat+0x19a>
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	f300 80fb 	bgt.w	8006c5a <put_fat+0x22a>
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d003      	beq.n	8006a70 <put_fat+0x40>
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	f000 8083 	beq.w	8006b74 <put_fat+0x144>
 8006a6e:	e0f4      	b.n	8006c5a <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	085b      	lsrs	r3, r3, #1
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	899b      	ldrh	r3, [r3, #12]
 8006a86:	4619      	mov	r1, r3
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a8e:	4413      	add	r3, r2
 8006a90:	4619      	mov	r1, r3
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f7ff fe3f 	bl	8006716 <move_window>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a9c:	7ffb      	ldrb	r3, [r7, #31]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 80d4 	bne.w	8006c4c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	61ba      	str	r2, [r7, #24]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	8992      	ldrh	r2, [r2, #12]
 8006ab4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ab8:	fb00 f202 	mul.w	r2, r0, r2
 8006abc:	1a9b      	subs	r3, r3, r2
 8006abe:	440b      	add	r3, r1
 8006ac0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00d      	beq.n	8006ae8 <put_fat+0xb8>
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	b25b      	sxtb	r3, r3
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	b25a      	sxtb	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	b25b      	sxtb	r3, r3
 8006adc:	011b      	lsls	r3, r3, #4
 8006ade:	b25b      	sxtb	r3, r3
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	b25b      	sxtb	r3, r3
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	e001      	b.n	8006aec <put_fat+0xbc>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2201      	movs	r2, #1
 8006af4:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	899b      	ldrh	r3, [r3, #12]
 8006afe:	4619      	mov	r1, r3
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b06:	4413      	add	r3, r2
 8006b08:	4619      	mov	r1, r3
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff fe03 	bl	8006716 <move_window>
 8006b10:	4603      	mov	r3, r0
 8006b12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b14:	7ffb      	ldrb	r3, [r7, #31]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f040 809a 	bne.w	8006c50 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	899b      	ldrh	r3, [r3, #12]
 8006b26:	461a      	mov	r2, r3
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b2e:	fb00 f202 	mul.w	r2, r0, r2
 8006b32:	1a9b      	subs	r3, r3, r2
 8006b34:	440b      	add	r3, r1
 8006b36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <put_fat+0x11a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	091b      	lsrs	r3, r3, #4
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	e00e      	b.n	8006b68 <put_fat+0x138>
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	b25b      	sxtb	r3, r3
 8006b50:	f023 030f 	bic.w	r3, r3, #15
 8006b54:	b25a      	sxtb	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	0a1b      	lsrs	r3, r3, #8
 8006b5a:	b25b      	sxtb	r3, r3
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	b25b      	sxtb	r3, r3
 8006b62:	4313      	orrs	r3, r2
 8006b64:	b25b      	sxtb	r3, r3
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	711a      	strb	r2, [r3, #4]
			break;
 8006b72:	e072      	b.n	8006c5a <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	899b      	ldrh	r3, [r3, #12]
 8006b7c:	085b      	lsrs	r3, r3, #1
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	4619      	mov	r1, r3
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b88:	4413      	add	r3, r2
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7ff fdc2 	bl	8006716 <move_window>
 8006b92:	4603      	mov	r3, r0
 8006b94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b96:	7ffb      	ldrb	r3, [r7, #31]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d15b      	bne.n	8006c54 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	8992      	ldrh	r2, [r2, #12]
 8006baa:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bae:	fb00 f202 	mul.w	r2, r0, r2
 8006bb2:	1a9b      	subs	r3, r3, r2
 8006bb4:	440b      	add	r3, r1
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	b292      	uxth	r2, r2
 8006bba:	4611      	mov	r1, r2
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7ff fd05 	bl	80065cc <st_word>
			fs->wflag = 1;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	711a      	strb	r2, [r3, #4]
			break;
 8006bc8:	e047      	b.n	8006c5a <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	899b      	ldrh	r3, [r3, #12]
 8006bd2:	089b      	lsrs	r3, r3, #2
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bde:	4413      	add	r3, r2
 8006be0:	4619      	mov	r1, r3
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f7ff fd97 	bl	8006716 <move_window>
 8006be8:	4603      	mov	r3, r0
 8006bea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bec:	7ffb      	ldrb	r3, [r7, #31]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d132      	bne.n	8006c58 <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	8992      	ldrh	r2, [r2, #12]
 8006c06:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c0a:	fb00 f202 	mul.w	r2, r0, r2
 8006c0e:	1a9b      	subs	r3, r3, r2
 8006c10:	440b      	add	r3, r1
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff fcb7 	bl	8006586 <ld_dword>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006c1e:	4323      	orrs	r3, r4
 8006c20:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	8992      	ldrh	r2, [r2, #12]
 8006c30:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c34:	fb00 f202 	mul.w	r2, r0, r2
 8006c38:	1a9b      	subs	r3, r3, r2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff fcdf 	bl	8006602 <st_dword>
			fs->wflag = 1;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2201      	movs	r2, #1
 8006c48:	711a      	strb	r2, [r3, #4]
			break;
 8006c4a:	e006      	b.n	8006c5a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006c4c:	bf00      	nop
 8006c4e:	e004      	b.n	8006c5a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006c50:	bf00      	nop
 8006c52:	e002      	b.n	8006c5a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006c54:	bf00      	nop
 8006c56:	e000      	b.n	8006c5a <put_fat+0x22a>
			if (res != FR_OK) break;
 8006c58:	bf00      	nop
		}
	}
	return res;
 8006c5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3724      	adds	r7, #36	@ 0x24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd90      	pop	{r4, r7, pc}

08006c64 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d904      	bls.n	8006c8a <remove_chain+0x26>
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d301      	bcc.n	8006c8e <remove_chain+0x2a>
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	e04b      	b.n	8006d26 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00c      	beq.n	8006cae <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006c94:	f04f 32ff 	mov.w	r2, #4294967295
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	69b8      	ldr	r0, [r7, #24]
 8006c9c:	f7ff fec8 	bl	8006a30 <put_fat>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006ca4:	7ffb      	ldrb	r3, [r7, #31]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <remove_chain+0x4a>
 8006caa:	7ffb      	ldrb	r3, [r7, #31]
 8006cac:	e03b      	b.n	8006d26 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006cae:	68b9      	ldr	r1, [r7, #8]
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f7ff fdea 	bl	800688a <get_fat>
 8006cb6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d031      	beq.n	8006d22 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <remove_chain+0x64>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e02e      	b.n	8006d26 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cce:	d101      	bne.n	8006cd4 <remove_chain+0x70>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e028      	b.n	8006d26 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	68b9      	ldr	r1, [r7, #8]
 8006cd8:	69b8      	ldr	r0, [r7, #24]
 8006cda:	f7ff fea9 	bl	8006a30 <put_fat>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006ce2:	7ffb      	ldrb	r3, [r7, #31]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <remove_chain+0x88>
 8006ce8:	7ffb      	ldrb	r3, [r7, #31]
 8006cea:	e01c      	b.n	8006d26 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	695a      	ldr	r2, [r3, #20]
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	3b02      	subs	r3, #2
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d20b      	bcs.n	8006d12 <remove_chain+0xae>
			fs->free_clst++;
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	795b      	ldrb	r3, [r3, #5]
 8006d08:	f043 0301 	orr.w	r3, r3, #1
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d3c6      	bcc.n	8006cae <remove_chain+0x4a>
 8006d20:	e000      	b.n	8006d24 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006d22:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3720      	adds	r7, #32
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b088      	sub	sp, #32
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10d      	bne.n	8006d60 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <create_chain+0x2c>
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d31b      	bcc.n	8006d92 <create_chain+0x64>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	61bb      	str	r3, [r7, #24]
 8006d5e:	e018      	b.n	8006d92 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7ff fd91 	bl	800688a <get_fat>
 8006d68:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d801      	bhi.n	8006d74 <create_chain+0x46>
 8006d70:	2301      	movs	r3, #1
 8006d72:	e0a9      	b.n	8006ec8 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7a:	d101      	bne.n	8006d80 <create_chain+0x52>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	e0a3      	b.n	8006ec8 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d201      	bcs.n	8006d8e <create_chain+0x60>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	e09c      	b.n	8006ec8 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <create_chain+0x70>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e094      	b.n	8006ec8 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d129      	bne.n	8006dfe <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	3301      	adds	r3, #1
 8006dae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	69fa      	ldr	r2, [r7, #28]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d301      	bcc.n	8006dbe <create_chain+0x90>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8006dbe:	69f9      	ldr	r1, [r7, #28]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff fd62 	bl	800688a <get_fat>
 8006dc6:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d003      	beq.n	8006dd6 <create_chain+0xa8>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd4:	d101      	bne.n	8006dda <create_chain+0xac>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	e076      	b.n	8006ec8 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00e      	beq.n	8006dfe <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d906      	bls.n	8006dfa <create_chain+0xcc>
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d201      	bcs.n	8006dfa <create_chain+0xcc>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d129      	bne.n	8006e58 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d307      	bcc.n	8006e28 <create_chain+0xfa>
					ncl = 2;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d901      	bls.n	8006e28 <create_chain+0xfa>
 8006e24:	2300      	movs	r3, #0
 8006e26:	e04f      	b.n	8006ec8 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006e28:	69f9      	ldr	r1, [r7, #28]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff fd2d 	bl	800688a <get_fat>
 8006e30:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00e      	beq.n	8006e56 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d003      	beq.n	8006e46 <create_chain+0x118>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d101      	bne.n	8006e4a <create_chain+0x11c>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	e03e      	b.n	8006ec8 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8006e4a:	69fa      	ldr	r2, [r7, #28]
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d1da      	bne.n	8006e08 <create_chain+0xda>
 8006e52:	2300      	movs	r3, #0
 8006e54:	e038      	b.n	8006ec8 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8006e56:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8006e58:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5c:	69f9      	ldr	r1, [r7, #28]
 8006e5e:	6938      	ldr	r0, [r7, #16]
 8006e60:	f7ff fde6 	bl	8006a30 <put_fat>
 8006e64:	4603      	mov	r3, r0
 8006e66:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d109      	bne.n	8006e82 <create_chain+0x154>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d006      	beq.n	8006e82 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6938      	ldr	r0, [r7, #16]
 8006e7a:	f7ff fdd9 	bl	8006a30 <put_fat>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d116      	bne.n	8006eb6 <create_chain+0x188>
		fs->last_clst = ncl;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	69fa      	ldr	r2, [r7, #28]
 8006e8c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	695a      	ldr	r2, [r3, #20]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	3b02      	subs	r3, #2
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d804      	bhi.n	8006ea6 <create_chain+0x178>
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	1e5a      	subs	r2, r3, #1
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	795b      	ldrb	r3, [r3, #5]
 8006eaa:	f043 0301 	orr.w	r3, r3, #1
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	715a      	strb	r2, [r3, #5]
 8006eb4:	e007      	b.n	8006ec6 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d102      	bne.n	8006ec2 <create_chain+0x194>
 8006ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec0:	e000      	b.n	8006ec4 <create_chain+0x196>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006ec6:	69fb      	ldr	r3, [r7, #28]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3720      	adds	r7, #32
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff fbdf 	bl	800669e <sync_window>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <dir_clear+0x1a>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e036      	b.n	8006f58 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff fcad 	bl	800684c <clst2sect>
 8006ef2:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3334      	adds	r3, #52	@ 0x34
 8006efe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006f02:	2100      	movs	r1, #0
 8006f04:	4618      	mov	r0, r3
 8006f06:	f00c f911 	bl	801312c <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3334      	adds	r3, #52	@ 0x34
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	2301      	movs	r3, #1
 8006f12:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8006f14:	2300      	movs	r3, #0
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	e003      	b.n	8006f22 <dir_clear+0x52>
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	4413      	add	r3, r2
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	895b      	ldrh	r3, [r3, #10]
 8006f26:	461a      	mov	r2, r3
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d20b      	bcs.n	8006f46 <dir_clear+0x76>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	7858      	ldrb	r0, [r3, #1]
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	441a      	add	r2, r3
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	f7ff fa54 	bl	80063e8 <disk_write>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0e9      	beq.n	8006f1a <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	895b      	ldrh	r3, [r3, #10]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	bf14      	ite	ne
 8006f52:	2301      	movne	r3, #1
 8006f54:	2300      	moveq	r3, #0
 8006f56:	b2db      	uxtb	r3, r3
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f76:	d204      	bcs.n	8006f82 <dir_sdi+0x22>
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	f003 031f 	and.w	r3, r3, #31
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006f82:	2302      	movs	r3, #2
 8006f84:	e071      	b.n	800706a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d106      	bne.n	8006fa6 <dir_sdi+0x46>
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d902      	bls.n	8006fa6 <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa4:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10c      	bne.n	8006fc6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	095b      	lsrs	r3, r3, #5
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	8912      	ldrh	r2, [r2, #8]
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d301      	bcc.n	8006fbc <dir_sdi+0x5c>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e056      	b.n	800706a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	619a      	str	r2, [r3, #24]
 8006fc4:	e02d      	b.n	8007022 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	895b      	ldrh	r3, [r3, #10]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	899b      	ldrh	r3, [r3, #12]
 8006fd0:	fb02 f303 	mul.w	r3, r2, r3
 8006fd4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006fd6:	e019      	b.n	800700c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6979      	ldr	r1, [r7, #20]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff fc54 	bl	800688a <get_fat>
 8006fe2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fea:	d101      	bne.n	8006ff0 <dir_sdi+0x90>
 8006fec:	2301      	movs	r3, #1
 8006fee:	e03c      	b.n	800706a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d904      	bls.n	8007000 <dir_sdi+0xa0>
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d301      	bcc.n	8007004 <dir_sdi+0xa4>
 8007000:	2302      	movs	r3, #2
 8007002:	e032      	b.n	800706a <dir_sdi+0x10a>
			ofs -= csz;
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	429a      	cmp	r2, r3
 8007012:	d2e1      	bcs.n	8006fd8 <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 8007014:	6979      	ldr	r1, [r7, #20]
 8007016:	6938      	ldr	r0, [r7, #16]
 8007018:	f7ff fc18 	bl	800684c <clst2sect>
 800701c:	4602      	mov	r2, r0
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <dir_sdi+0xd4>
 8007030:	2302      	movs	r3, #2
 8007032:	e01a      	b.n	800706a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	699a      	ldr	r2, [r3, #24]
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	899b      	ldrh	r3, [r3, #12]
 800703c:	4619      	mov	r1, r3
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	fbb3 f3f1 	udiv	r3, r3, r1
 8007044:	441a      	add	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	899b      	ldrh	r3, [r3, #12]
 8007054:	461a      	mov	r2, r3
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	fbb3 f0f2 	udiv	r0, r3, r2
 800705c:	fb00 f202 	mul.w	r2, r0, r2
 8007060:	1a9b      	subs	r3, r3, r2
 8007062:	18ca      	adds	r2, r1, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b086      	sub	sp, #24
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	3320      	adds	r3, #32
 8007088:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007090:	d302      	bcc.n	8007098 <dir_next+0x26>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <dir_next+0x32>
 80070a0:	2304      	movs	r3, #4
 80070a2:	e088      	b.n	80071b6 <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	899b      	ldrh	r3, [r3, #12]
 80070a8:	461a      	mov	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80070b0:	fb01 f202 	mul.w	r2, r1, r2
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d16a      	bne.n	8007190 <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	095b      	lsrs	r3, r3, #5
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	8912      	ldrh	r2, [r2, #8]
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d35b      	bcc.n	8007190 <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	619a      	str	r2, [r3, #24]
 80070de:	2304      	movs	r3, #4
 80070e0:	e069      	b.n	80071b6 <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	899b      	ldrh	r3, [r3, #12]
 80070e6:	461a      	mov	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	8952      	ldrh	r2, [r2, #10]
 80070f2:	3a01      	subs	r2, #1
 80070f4:	4013      	ands	r3, r2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d14a      	bne.n	8007190 <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	4619      	mov	r1, r3
 8007102:	4610      	mov	r0, r2
 8007104:	f7ff fbc1 	bl	800688a <get_fat>
 8007108:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d801      	bhi.n	8007114 <dir_next+0xa2>
 8007110:	2302      	movs	r3, #2
 8007112:	e050      	b.n	80071b6 <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711a:	d101      	bne.n	8007120 <dir_next+0xae>
 800711c:	2301      	movs	r3, #1
 800711e:	e04a      	b.n	80071b6 <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	429a      	cmp	r2, r3
 8007128:	d328      	bcc.n	800717c <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	619a      	str	r2, [r3, #24]
 8007136:	2304      	movs	r3, #4
 8007138:	e03d      	b.n	80071b6 <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	4619      	mov	r1, r3
 8007142:	4610      	mov	r0, r2
 8007144:	f7ff fdf3 	bl	8006d2e <create_chain>
 8007148:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <dir_next+0xe2>
 8007150:	2307      	movs	r3, #7
 8007152:	e030      	b.n	80071b6 <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d101      	bne.n	800715e <dir_next+0xec>
 800715a:	2302      	movs	r3, #2
 800715c:	e02b      	b.n	80071b6 <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007164:	d101      	bne.n	800716a <dir_next+0xf8>
 8007166:	2301      	movs	r3, #1
 8007168:	e025      	b.n	80071b6 <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800716a:	6979      	ldr	r1, [r7, #20]
 800716c:	6938      	ldr	r0, [r7, #16]
 800716e:	f7ff feaf 	bl	8006ed0 <dir_clear>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <dir_next+0x10a>
 8007178:	2301      	movs	r3, #1
 800717a:	e01c      	b.n	80071b6 <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8007182:	6979      	ldr	r1, [r7, #20]
 8007184:	6938      	ldr	r0, [r7, #16]
 8007186:	f7ff fb61 	bl	800684c <clst2sect>
 800718a:	4602      	mov	r2, r0
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	899b      	ldrh	r3, [r3, #12]
 80071a0:	461a      	mov	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80071a8:	fb00 f202 	mul.w	r2, r0, r2
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	18ca      	adds	r2, r1, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b086      	sub	sp, #24
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80071ce:	2100      	movs	r1, #0
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7ff fec5 	bl	8006f60 <dir_sdi>
 80071d6:	4603      	mov	r3, r0
 80071d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80071da:	7dfb      	ldrb	r3, [r7, #23]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d12b      	bne.n	8007238 <dir_alloc+0x7a>
		n = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	4619      	mov	r1, r3
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f7ff fa93 	bl	8006716 <move_window>
 80071f0:	4603      	mov	r3, r0
 80071f2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d11d      	bne.n	8007236 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	2be5      	cmp	r3, #229	@ 0xe5
 8007202:	d004      	beq.n	800720e <dir_alloc+0x50>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d107      	bne.n	800721e <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3301      	adds	r3, #1
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	429a      	cmp	r2, r3
 800721a:	d102      	bne.n	8007222 <dir_alloc+0x64>
 800721c:	e00c      	b.n	8007238 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 800721e:	2300      	movs	r3, #0
 8007220:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8007222:	2101      	movs	r1, #1
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7ff ff24 	bl	8007072 <dir_next>
 800722a:	4603      	mov	r3, r0
 800722c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0d7      	beq.n	80071e4 <dir_alloc+0x26>
 8007234:	e000      	b.n	8007238 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007236:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007238:	7dfb      	ldrb	r3, [r7, #23]
 800723a:	2b04      	cmp	r3, #4
 800723c:	d101      	bne.n	8007242 <dir_alloc+0x84>
 800723e:	2307      	movs	r3, #7
 8007240:	75fb      	strb	r3, [r7, #23]
	return res;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	331a      	adds	r3, #26
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff f97a 	bl	8006554 <ld_word>
 8007260:	4603      	mov	r3, r0
 8007262:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	2b03      	cmp	r3, #3
 800726a:	d109      	bne.n	8007280 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	3314      	adds	r3, #20
 8007270:	4618      	mov	r0, r3
 8007272:	f7ff f96f 	bl	8006554 <ld_word>
 8007276:	4603      	mov	r3, r0
 8007278:	041b      	lsls	r3, r3, #16
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	4313      	orrs	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007280:	68fb      	ldr	r3, [r7, #12]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	60b9      	str	r1, [r7, #8]
 8007294:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	331a      	adds	r3, #26
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	b292      	uxth	r2, r2
 800729e:	4611      	mov	r1, r2
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff f993 	bl	80065cc <st_word>
	if (fs->fs_type == FS_FAT32) {
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d109      	bne.n	80072c2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f103 0214 	add.w	r2, r3, #20
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	0c1b      	lsrs	r3, r3, #16
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	4619      	mov	r1, r3
 80072bc:	4610      	mov	r0, r2
 80072be:	f7ff f985 	bl	80065cc <st_word>
	}
}
 80072c2:	bf00      	nop
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b086      	sub	sp, #24
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80072d8:	2100      	movs	r1, #0
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff fe40 	bl	8006f60 <dir_sdi>
 80072e0:	4603      	mov	r3, r0
 80072e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <dir_find+0x24>
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	e03e      	b.n	800736c <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6938      	ldr	r0, [r7, #16]
 80072f6:	f7ff fa0e 	bl	8006716 <move_window>
 80072fa:	4603      	mov	r3, r0
 80072fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d12f      	bne.n	8007364 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d102      	bne.n	8007318 <dir_find+0x4e>
 8007312:	2304      	movs	r3, #4
 8007314:	75fb      	strb	r3, [r7, #23]
 8007316:	e028      	b.n	800736a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	330b      	adds	r3, #11
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007324:	b2da      	uxtb	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	330b      	adds	r3, #11
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	f003 0308 	and.w	r3, r3, #8
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10a      	bne.n	8007350 <dir_find+0x86>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69d8      	ldr	r0, [r3, #28]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3320      	adds	r3, #32
 8007342:	220b      	movs	r2, #11
 8007344:	4619      	mov	r1, r3
 8007346:	f00b fee1 	bl	801310c <memcmp>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00b      	beq.n	8007368 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007350:	2100      	movs	r1, #0
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7ff fe8d 	bl	8007072 <dir_next>
 8007358:	4603      	mov	r3, r0
 800735a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0c5      	beq.n	80072ee <dir_find+0x24>
 8007362:	e002      	b.n	800736a <dir_find+0xa0>
		if (res != FR_OK) break;
 8007364:	bf00      	nop
 8007366:	e000      	b.n	800736a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007368:	bf00      	nop

	return res;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007382:	2101      	movs	r1, #1
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff ff1a 	bl	80071be <dir_alloc>
 800738a:	4603      	mov	r3, r0
 800738c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d11c      	bne.n	80073ce <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	4619      	mov	r1, r3
 800739a:	68b8      	ldr	r0, [r7, #8]
 800739c:	f7ff f9bb 	bl	8006716 <move_window>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d111      	bne.n	80073ce <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	2220      	movs	r2, #32
 80073b0:	2100      	movs	r1, #0
 80073b2:	4618      	mov	r0, r3
 80073b4:	f00b feba 	bl	801312c <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	69d8      	ldr	r0, [r3, #28]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3320      	adds	r3, #32
 80073c0:	220b      	movs	r2, #11
 80073c2:	4619      	mov	r1, r3
 80073c4:	f00b ff36 	bl	8013234 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2201      	movs	r2, #1
 80073cc:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08a      	sub	sp, #40	@ 0x28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3320      	adds	r3, #32
 80073ec:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 80073ee:	220b      	movs	r2, #11
 80073f0:	2120      	movs	r1, #32
 80073f2:	6938      	ldr	r0, [r7, #16]
 80073f4:	f00b fe9a 	bl	801312c <memset>
	si = i = 0; ni = 8;
 80073f8:	2300      	movs	r3, #0
 80073fa:	61bb      	str	r3, [r7, #24]
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	61fb      	str	r3, [r7, #28]
 8007400:	2308      	movs	r3, #8
 8007402:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	61fa      	str	r2, [r7, #28]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	4413      	add	r3, r2
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007418:	2b20      	cmp	r3, #32
 800741a:	f240 8089 	bls.w	8007530 <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 800741e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007422:	2b2f      	cmp	r3, #47	@ 0x2f
 8007424:	d007      	beq.n	8007436 <create_name+0x5e>
 8007426:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800742a:	2b5c      	cmp	r3, #92	@ 0x5c
 800742c:	d110      	bne.n	8007450 <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 800742e:	e002      	b.n	8007436 <create_name+0x5e>
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	3301      	adds	r3, #1
 8007434:	61fb      	str	r3, [r7, #28]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	4413      	add	r3, r2
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007440:	d0f6      	beq.n	8007430 <create_name+0x58>
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	4413      	add	r3, r2
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b5c      	cmp	r3, #92	@ 0x5c
 800744c:	d0f0      	beq.n	8007430 <create_name+0x58>
			break;
 800744e:	e070      	b.n	8007532 <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8007450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007454:	2b2e      	cmp	r3, #46	@ 0x2e
 8007456:	d003      	beq.n	8007460 <create_name+0x88>
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	429a      	cmp	r2, r3
 800745e:	d30d      	bcc.n	800747c <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	2b0b      	cmp	r3, #11
 8007464:	d003      	beq.n	800746e <create_name+0x96>
 8007466:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800746a:	2b2e      	cmp	r3, #46	@ 0x2e
 800746c:	d001      	beq.n	8007472 <create_name+0x9a>
 800746e:	2306      	movs	r3, #6
 8007470:	e081      	b.n	8007576 <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 8007472:	2308      	movs	r3, #8
 8007474:	61bb      	str	r3, [r7, #24]
 8007476:	230b      	movs	r3, #11
 8007478:	623b      	str	r3, [r7, #32]
			continue;
 800747a:	e058      	b.n	800752e <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 800747c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007480:	2b00      	cmp	r3, #0
 8007482:	da07      	bge.n	8007494 <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8007484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800748c:	4a3c      	ldr	r2, [pc, #240]	@ (8007580 <create_name+0x1a8>)
 800748e:	5cd3      	ldrb	r3, [r2, r3]
 8007490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8007494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff f8de 	bl	800665a <dbc_1st>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d024      	beq.n	80074ee <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	61fa      	str	r2, [r7, #28]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	4413      	add	r3, r2
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff f8e1 	bl	800667c <dbc_2nd>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d004      	beq.n	80074ca <create_name+0xf2>
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d301      	bcc.n	80074ce <create_name+0xf6>
 80074ca:	2306      	movs	r3, #6
 80074cc:	e053      	b.n	8007576 <create_name+0x19e>
			sfn[i++] = c;
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	61ba      	str	r2, [r7, #24]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	4413      	add	r3, r2
 80074d8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80074dc:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	61ba      	str	r2, [r7, #24]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	4413      	add	r3, r2
 80074e8:	7bfa      	ldrb	r2, [r7, #15]
 80074ea:	701a      	strb	r2, [r3, #0]
 80074ec:	e78a      	b.n	8007404 <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80074ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074f2:	4619      	mov	r1, r3
 80074f4:	4823      	ldr	r0, [pc, #140]	@ (8007584 <create_name+0x1ac>)
 80074f6:	f00b fe21 	bl	801313c <strchr>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <create_name+0x12c>
 8007500:	2306      	movs	r3, #6
 8007502:	e038      	b.n	8007576 <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007508:	2b60      	cmp	r3, #96	@ 0x60
 800750a:	d908      	bls.n	800751e <create_name+0x146>
 800750c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007510:	2b7a      	cmp	r3, #122	@ 0x7a
 8007512:	d804      	bhi.n	800751e <create_name+0x146>
 8007514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007518:	3b20      	subs	r3, #32
 800751a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	61ba      	str	r2, [r7, #24]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4413      	add	r3, r2
 8007528:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800752c:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 800752e:	e769      	b.n	8007404 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007530:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	441a      	add	r2, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <create_name+0x16e>
 8007542:	2306      	movs	r3, #6
 8007544:	e017      	b.n	8007576 <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2be5      	cmp	r3, #229	@ 0xe5
 800754c:	d102      	bne.n	8007554 <create_name+0x17c>
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2205      	movs	r2, #5
 8007552:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8007554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007558:	2b20      	cmp	r3, #32
 800755a:	d905      	bls.n	8007568 <create_name+0x190>
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	4413      	add	r3, r2
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b20      	cmp	r3, #32
 8007566:	d801      	bhi.n	800756c <create_name+0x194>
 8007568:	2204      	movs	r2, #4
 800756a:	e000      	b.n	800756e <create_name+0x196>
 800756c:	2200      	movs	r2, #0
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	330b      	adds	r3, #11
 8007572:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007574:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8007576:	4618      	mov	r0, r3
 8007578:	3728      	adds	r7, #40	@ 0x28
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	08014778 	.word	0x08014778
 8007584:	080146d4 	.word	0x080146d4

08007588 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8007598:	e002      	b.n	80075a0 <follow_path+0x18>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	3301      	adds	r3, #1
 800759e:	603b      	str	r3, [r7, #0]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80075a6:	d0f8      	beq.n	800759a <follow_path+0x12>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80075ae:	d0f4      	beq.n	800759a <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b1f      	cmp	r3, #31
 80075bc:	d80a      	bhi.n	80075d4 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2280      	movs	r2, #128	@ 0x80
 80075c2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 80075c6:	2100      	movs	r1, #0
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff fcc9 	bl	8006f60 <dir_sdi>
 80075ce:	4603      	mov	r3, r0
 80075d0:	75fb      	strb	r3, [r7, #23]
 80075d2:	e048      	b.n	8007666 <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80075d4:	463b      	mov	r3, r7
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7ff fefd 	bl	80073d8 <create_name>
 80075de:	4603      	mov	r3, r0
 80075e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d139      	bne.n	800765c <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff fe6e 	bl	80072ca <dir_find>
 80075ee:	4603      	mov	r3, r0
 80075f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80075f8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00a      	beq.n	8007616 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	2b04      	cmp	r3, #4
 8007604:	d12c      	bne.n	8007660 <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b00      	cmp	r3, #0
 800760e:	d127      	bne.n	8007660 <follow_path+0xd8>
 8007610:	2305      	movs	r3, #5
 8007612:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007614:	e024      	b.n	8007660 <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	d121      	bne.n	8007664 <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	799b      	ldrb	r3, [r3, #6]
 8007624:	f003 0310 	and.w	r3, r3, #16
 8007628:	2b00      	cmp	r3, #0
 800762a:	d102      	bne.n	8007632 <follow_path+0xaa>
				res = FR_NO_PATH; break;
 800762c:	2305      	movs	r3, #5
 800762e:	75fb      	strb	r3, [r7, #23]
 8007630:	e019      	b.n	8007666 <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	8992      	ldrh	r2, [r2, #12]
 8007640:	fbb3 f0f2 	udiv	r0, r3, r2
 8007644:	fb00 f202 	mul.w	r2, r0, r2
 8007648:	1a9b      	subs	r3, r3, r2
 800764a:	440b      	add	r3, r1
 800764c:	4619      	mov	r1, r3
 800764e:	6938      	ldr	r0, [r7, #16]
 8007650:	f7ff fdfc 	bl	800724c <ld_clust>
 8007654:	4602      	mov	r2, r0
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800765a:	e7bb      	b.n	80075d4 <follow_path+0x4c>
			if (res != FR_OK) break;
 800765c:	bf00      	nop
 800765e:	e002      	b.n	8007666 <follow_path+0xde>
				break;
 8007660:	bf00      	nop
 8007662:	e000      	b.n	8007666 <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8007664:	bf00      	nop
			}
		}
	}

	return res;
 8007666:	7dfb      	ldrb	r3, [r7, #23]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8007670:	b480      	push	{r7}
 8007672:	b08b      	sub	sp, #44	@ 0x2c
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8007678:	f04f 33ff 	mov.w	r3, #4294967295
 800767c:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	627b      	str	r3, [r7, #36]	@ 0x24
 8007684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007686:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <get_ldnumber+0x22>
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	e080      	b.n	8007794 <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	623a      	str	r2, [r7, #32]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 800769c:	7ffb      	ldrb	r3, [r7, #31]
 800769e:	2b20      	cmp	r3, #32
 80076a0:	d902      	bls.n	80076a8 <get_ldnumber+0x38>
 80076a2:	7ffb      	ldrb	r3, [r7, #31]
 80076a4:	2b3a      	cmp	r3, #58	@ 0x3a
 80076a6:	d1f4      	bne.n	8007692 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 80076a8:	7ffb      	ldrb	r3, [r7, #31]
 80076aa:	2b3a      	cmp	r3, #58	@ 0x3a
 80076ac:	d11c      	bne.n	80076e8 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 80076ae:	2302      	movs	r3, #2
 80076b0:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80076b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80076b8:	d90c      	bls.n	80076d4 <get_ldnumber+0x64>
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b39      	cmp	r3, #57	@ 0x39
 80076c0:	d808      	bhi.n	80076d4 <get_ldnumber+0x64>
 80076c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c4:	3302      	adds	r3, #2
 80076c6:	6a3a      	ldr	r2, [r7, #32]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d103      	bne.n	80076d4 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	3b30      	subs	r3, #48	@ 0x30
 80076d2:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	dc04      	bgt.n	80076e4 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a3a      	ldr	r2, [r7, #32]
 80076e2:	601a      	str	r2, [r3, #0]
		}
		return vol;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	e055      	b.n	8007794 <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 80076e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80076ee:	d14e      	bne.n	800778e <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 80076f0:	e002      	b.n	80076f8 <get_ldnumber+0x88>
 80076f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f4:	3301      	adds	r3, #1
 80076f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fa:	3301      	adds	r3, #1
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8007700:	d0f7      	beq.n	80076f2 <get_ldnumber+0x82>
		i = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	623b      	str	r3, [r7, #32]
 800770a:	4a25      	ldr	r2, [pc, #148]	@ (80077a0 <get_ldnumber+0x130>)
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007712:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	613a      	str	r2, [r7, #16]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	73fb      	strb	r3, [r7, #15]
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	3301      	adds	r3, #1
 8007722:	623b      	str	r3, [r7, #32]
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	2b60      	cmp	r3, #96	@ 0x60
 800772e:	d905      	bls.n	800773c <get_ldnumber+0xcc>
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	2b7a      	cmp	r3, #122	@ 0x7a
 8007734:	d802      	bhi.n	800773c <get_ldnumber+0xcc>
 8007736:	7bfb      	ldrb	r3, [r7, #15]
 8007738:	3b20      	subs	r3, #32
 800773a:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 800773c:	7ffb      	ldrb	r3, [r7, #31]
 800773e:	2b60      	cmp	r3, #96	@ 0x60
 8007740:	d905      	bls.n	800774e <get_ldnumber+0xde>
 8007742:	7ffb      	ldrb	r3, [r7, #31]
 8007744:	2b7a      	cmp	r3, #122	@ 0x7a
 8007746:	d802      	bhi.n	800774e <get_ldnumber+0xde>
 8007748:	7ffb      	ldrb	r3, [r7, #31]
 800774a:	3b20      	subs	r3, #32
 800774c:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <get_ldnumber+0xec>
 8007754:	7bfa      	ldrb	r2, [r7, #15]
 8007756:	7ffb      	ldrb	r3, [r7, #31]
 8007758:	429a      	cmp	r2, r3
 800775a:	d0db      	beq.n	8007714 <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 800775c:	7bfb      	ldrb	r3, [r7, #15]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d105      	bne.n	800776e <get_ldnumber+0xfe>
 8007762:	7ffb      	ldrb	r3, [r7, #31]
 8007764:	2b2f      	cmp	r3, #47	@ 0x2f
 8007766:	d008      	beq.n	800777a <get_ldnumber+0x10a>
 8007768:	7ffb      	ldrb	r3, [r7, #31]
 800776a:	2b20      	cmp	r3, #32
 800776c:	d905      	bls.n	800777a <get_ldnumber+0x10a>
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	3301      	adds	r3, #1
 8007772:	61bb      	str	r3, [r7, #24]
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	2b01      	cmp	r3, #1
 8007778:	ddc5      	ble.n	8007706 <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b01      	cmp	r3, #1
 800777e:	dc04      	bgt.n	800778a <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a3a      	ldr	r2, [r7, #32]
 8007788:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	e002      	b.n	8007794 <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8007792:	697b      	ldr	r3, [r7, #20]
}
 8007794:	4618      	mov	r0, r3
 8007796:	372c      	adds	r7, #44	@ 0x2c
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	2000016c 	.word	0x2000016c

080077a4 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	711a      	strb	r2, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ba:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7fe ffa9 	bl	8006716 <move_window>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <check_fs+0x2a>
 80077ca:	2304      	movs	r3, #4
 80077cc:	e088      	b.n	80078e0 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3334      	adds	r3, #52	@ 0x34
 80077d2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe febc 	bl	8006554 <ld_word>
 80077dc:	4603      	mov	r3, r0
 80077de:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80077e6:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 80077e8:	7b7b      	ldrb	r3, [r7, #13]
 80077ea:	2beb      	cmp	r3, #235	@ 0xeb
 80077ec:	d005      	beq.n	80077fa <check_fs+0x56>
 80077ee:	7b7b      	ldrb	r3, [r7, #13]
 80077f0:	2be9      	cmp	r3, #233	@ 0xe9
 80077f2:	d002      	beq.n	80077fa <check_fs+0x56>
 80077f4:	7b7b      	ldrb	r3, [r7, #13]
 80077f6:	2be8      	cmp	r3, #232	@ 0xe8
 80077f8:	d16a      	bne.n	80078d0 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 80077fa:	89fb      	ldrh	r3, [r7, #14]
 80077fc:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8007800:	4293      	cmp	r3, r2
 8007802:	d10c      	bne.n	800781e <check_fs+0x7a>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3334      	adds	r3, #52	@ 0x34
 8007808:	3352      	adds	r3, #82	@ 0x52
 800780a:	2208      	movs	r2, #8
 800780c:	4936      	ldr	r1, [pc, #216]	@ (80078e8 <check_fs+0x144>)
 800780e:	4618      	mov	r0, r3
 8007810:	f00b fc7c 	bl	801310c <memcmp>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 800781a:	2300      	movs	r3, #0
 800781c:	e060      	b.n	80078e0 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3334      	adds	r3, #52	@ 0x34
 8007822:	330b      	adds	r3, #11
 8007824:	4618      	mov	r0, r3
 8007826:	f7fe fe95 	bl	8006554 <ld_word>
 800782a:	4603      	mov	r3, r0
 800782c:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007834:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8007836:	897a      	ldrh	r2, [r7, #10]
 8007838:	897b      	ldrh	r3, [r7, #10]
 800783a:	3b01      	subs	r3, #1
 800783c:	4013      	ands	r3, r2
 800783e:	2b00      	cmp	r3, #0
 8007840:	d146      	bne.n	80078d0 <check_fs+0x12c>
 8007842:	897b      	ldrh	r3, [r7, #10]
 8007844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007848:	d342      	bcc.n	80078d0 <check_fs+0x12c>
 800784a:	897b      	ldrh	r3, [r7, #10]
 800784c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007850:	d83e      	bhi.n	80078d0 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8007852:	7b7b      	ldrb	r3, [r7, #13]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d03b      	beq.n	80078d0 <check_fs+0x12c>
 8007858:	7b7a      	ldrb	r2, [r7, #13]
 800785a:	7b7b      	ldrb	r3, [r7, #13]
 800785c:	3b01      	subs	r3, #1
 800785e:	4013      	ands	r3, r2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d135      	bne.n	80078d0 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3334      	adds	r3, #52	@ 0x34
 8007868:	330e      	adds	r3, #14
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe fe72 	bl	8006554 <ld_word>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d02c      	beq.n	80078d0 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800787c:	3b01      	subs	r3, #1
 800787e:	2b01      	cmp	r3, #1
 8007880:	d826      	bhi.n	80078d0 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3334      	adds	r3, #52	@ 0x34
 8007886:	3311      	adds	r3, #17
 8007888:	4618      	mov	r0, r3
 800788a:	f7fe fe63 	bl	8006554 <ld_word>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01d      	beq.n	80078d0 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3334      	adds	r3, #52	@ 0x34
 8007898:	3313      	adds	r3, #19
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fe5a 	bl	8006554 <ld_word>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80078a4:	d809      	bhi.n	80078ba <check_fs+0x116>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3334      	adds	r3, #52	@ 0x34
 80078aa:	3320      	adds	r3, #32
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fe fe6a 	bl	8006586 <ld_dword>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078b8:	d30a      	bcc.n	80078d0 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3334      	adds	r3, #52	@ 0x34
 80078be:	3316      	adds	r3, #22
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe fe47 	bl	8006554 <ld_word>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 80078cc:	2300      	movs	r3, #0
 80078ce:	e007      	b.n	80078e0 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 80078d0:	89fb      	ldrh	r3, [r7, #14]
 80078d2:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d101      	bne.n	80078de <check_fs+0x13a>
 80078da:	2302      	movs	r3, #2
 80078dc:	e000      	b.n	80078e0 <check_fs+0x13c>
 80078de:	2303      	movs	r3, #3
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	080146e4 	.word	0x080146e4

080078ec <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b088      	sub	sp, #32
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 80078f6:	2100      	movs	r1, #0
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff ff53 	bl	80077a4 <check_fs>
 80078fe:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	2b02      	cmp	r3, #2
 8007904:	d007      	beq.n	8007916 <find_volume+0x2a>
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	2b02      	cmp	r3, #2
 800790a:	d802      	bhi.n	8007912 <find_volume+0x26>
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <find_volume+0x2a>
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	e045      	b.n	80079a2 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8007916:	2300      	movs	r3, #0
 8007918:	61fb      	str	r3, [r7, #28]
 800791a:	e014      	b.n	8007946 <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	011b      	lsls	r3, r3, #4
 8007926:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 800792a:	4413      	add	r3, r2
 800792c:	4618      	mov	r0, r3
 800792e:	f7fe fe2a 	bl	8006586 <ld_dword>
 8007932:	4602      	mov	r2, r0
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	3320      	adds	r3, #32
 800793a:	443b      	add	r3, r7
 800793c:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	3301      	adds	r3, #1
 8007944:	61fb      	str	r3, [r7, #28]
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	2b03      	cmp	r3, #3
 800794a:	d9e7      	bls.n	800791c <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <find_volume+0x6c>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	3b01      	subs	r3, #1
 8007956:	e000      	b.n	800795a <find_volume+0x6e>
 8007958:	2300      	movs	r3, #0
 800795a:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	3320      	adds	r3, #32
 8007962:	443b      	add	r3, r7
 8007964:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <find_volume+0x98>
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	3320      	adds	r3, #32
 8007972:	443b      	add	r3, r7
 8007974:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff ff12 	bl	80077a4 <check_fs>
 8007980:	4603      	mov	r3, r0
 8007982:	e000      	b.n	8007986 <find_volume+0x9a>
 8007984:	2303      	movs	r3, #3
 8007986:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d108      	bne.n	80079a0 <find_volume+0xb4>
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d905      	bls.n	80079a0 <find_volume+0xb4>
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	3301      	adds	r3, #1
 8007998:	61fb      	str	r3, [r7, #28]
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	2b03      	cmp	r3, #3
 800799e:	d9dd      	bls.n	800795c <find_volume+0x70>
	return fmt;
 80079a0:	69bb      	ldr	r3, [r7, #24]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3720      	adds	r7, #32
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b090      	sub	sp, #64	@ 0x40
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	4613      	mov	r3, r2
 80079b8:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2200      	movs	r2, #0
 80079be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f7ff fe55 	bl	8007670 <get_ldnumber>
 80079c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 80079c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	da01      	bge.n	80079d2 <mount_volume+0x26>
 80079ce:	230b      	movs	r3, #11
 80079d0:	e207      	b.n	8007de2 <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80079d2:	4aa2      	ldr	r2, [pc, #648]	@ (8007c5c <mount_volume+0x2b0>)
 80079d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079da:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80079dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <mount_volume+0x3a>
 80079e2:	230c      	movs	r3, #12
 80079e4:	e1fd      	b.n	8007de2 <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079ea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	f023 0301 	bic.w	r3, r3, #1
 80079f2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80079f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01a      	beq.n	8007a32 <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 80079fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fe fc6f 	bl	80062e4 <disk_status>
 8007a06:	4603      	mov	r3, r0
 8007a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10c      	bne.n	8007a32 <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d007      	beq.n	8007a2e <mount_volume+0x82>
 8007a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a22:	f003 0304 	and.w	r3, r3, #4
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007a2a:	230a      	movs	r3, #10
 8007a2c:	e1d9      	b.n	8007de2 <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8007a2e:	2300      	movs	r3, #0
 8007a30:	e1d7      	b.n	8007de2 <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8007a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a34:	2200      	movs	r2, #0
 8007a36:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8007a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3a:	785b      	ldrb	r3, [r3, #1]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fe fc79 	bl	8006334 <disk_initialize>
 8007a42:	4603      	mov	r3, r0
 8007a44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007a48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007a54:	2303      	movs	r3, #3
 8007a56:	e1c4      	b.n	8007de2 <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007a58:	79fb      	ldrb	r3, [r7, #7]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d007      	beq.n	8007a6e <mount_volume+0xc2>
 8007a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a62:	f003 0304 	and.w	r3, r3, #4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 8007a6a:	230a      	movs	r3, #10
 8007a6c:	e1b9      	b.n	8007de2 <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a70:	7858      	ldrb	r0, [r3, #1]
 8007a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a74:	330c      	adds	r3, #12
 8007a76:	461a      	mov	r2, r3
 8007a78:	2102      	movs	r1, #2
 8007a7a:	f7fe fce9 	bl	8006450 <disk_ioctl>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <mount_volume+0xdc>
 8007a84:	2301      	movs	r3, #1
 8007a86:	e1ac      	b.n	8007de2 <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8a:	899b      	ldrh	r3, [r3, #12]
 8007a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a90:	d80d      	bhi.n	8007aae <mount_volume+0x102>
 8007a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a94:	899b      	ldrh	r3, [r3, #12]
 8007a96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a9a:	d308      	bcc.n	8007aae <mount_volume+0x102>
 8007a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a9e:	899b      	ldrh	r3, [r3, #12]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa4:	899b      	ldrh	r3, [r3, #12]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <mount_volume+0x106>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e197      	b.n	8007de2 <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ab6:	f7ff ff19 	bl	80078ec <find_volume>
 8007aba:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 8007abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d101      	bne.n	8007ac6 <mount_volume+0x11a>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e18d      	b.n	8007de2 <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d901      	bls.n	8007ad0 <mount_volume+0x124>
 8007acc:	230d      	movs	r3, #13
 8007ace:	e188      	b.n	8007de2 <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8007ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad4:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad8:	3334      	adds	r3, #52	@ 0x34
 8007ada:	330b      	adds	r3, #11
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7fe fd39 	bl	8006554 <ld_word>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae8:	899b      	ldrh	r3, [r3, #12]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d001      	beq.n	8007af2 <mount_volume+0x146>
 8007aee:	230d      	movs	r3, #13
 8007af0:	e177      	b.n	8007de2 <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af4:	3334      	adds	r3, #52	@ 0x34
 8007af6:	3316      	adds	r3, #22
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fe fd2b 	bl	8006554 <ld_word>
 8007afe:	4603      	mov	r3, r0
 8007b00:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d106      	bne.n	8007b16 <mount_volume+0x16a>
 8007b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0a:	3334      	adds	r3, #52	@ 0x34
 8007b0c:	3324      	adds	r3, #36	@ 0x24
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe fd39 	bl	8006586 <ld_dword>
 8007b14:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 8007b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b1a:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b24:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b28:	78db      	ldrb	r3, [r3, #3]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d005      	beq.n	8007b3a <mount_volume+0x18e>
 8007b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b30:	78db      	ldrb	r3, [r3, #3]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d001      	beq.n	8007b3a <mount_volume+0x18e>
 8007b36:	230d      	movs	r3, #13
 8007b38:	e153      	b.n	8007de2 <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3c:	78db      	ldrb	r3, [r3, #3]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b42:	fb02 f303 	mul.w	r3, r2, r3
 8007b46:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b52:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b56:	895b      	ldrh	r3, [r3, #10]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d008      	beq.n	8007b6e <mount_volume+0x1c2>
 8007b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5e:	895b      	ldrh	r3, [r3, #10]
 8007b60:	461a      	mov	r2, r3
 8007b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b64:	895b      	ldrh	r3, [r3, #10]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	4013      	ands	r3, r2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <mount_volume+0x1c6>
 8007b6e:	230d      	movs	r3, #13
 8007b70:	e137      	b.n	8007de2 <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b74:	3334      	adds	r3, #52	@ 0x34
 8007b76:	3311      	adds	r3, #17
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fe fceb 	bl	8006554 <ld_word>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	461a      	mov	r2, r3
 8007b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b84:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b88:	891b      	ldrh	r3, [r3, #8]
 8007b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b8c:	8992      	ldrh	r2, [r2, #12]
 8007b8e:	0952      	lsrs	r2, r2, #5
 8007b90:	b292      	uxth	r2, r2
 8007b92:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b96:	fb01 f202 	mul.w	r2, r1, r2
 8007b9a:	1a9b      	subs	r3, r3, r2
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <mount_volume+0x1fa>
 8007ba2:	230d      	movs	r3, #13
 8007ba4:	e11d      	b.n	8007de2 <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba8:	3334      	adds	r3, #52	@ 0x34
 8007baa:	3313      	adds	r3, #19
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fe fcd1 	bl	8006554 <ld_word>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d106      	bne.n	8007bca <mount_volume+0x21e>
 8007bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bbe:	3334      	adds	r3, #52	@ 0x34
 8007bc0:	3320      	adds	r3, #32
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fe fcdf 	bl	8006586 <ld_dword>
 8007bc8:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bcc:	3334      	adds	r3, #52	@ 0x34
 8007bce:	330e      	adds	r3, #14
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fe fcbf 	bl	8006554 <ld_word>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007bda:	8bfb      	ldrh	r3, [r7, #30]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <mount_volume+0x238>
 8007be0:	230d      	movs	r3, #13
 8007be2:	e0fe      	b.n	8007de2 <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007be4:	8bfa      	ldrh	r2, [r7, #30]
 8007be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be8:	4413      	add	r3, r2
 8007bea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bec:	8911      	ldrh	r1, [r2, #8]
 8007bee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bf0:	8992      	ldrh	r2, [r2, #12]
 8007bf2:	0952      	lsrs	r2, r2, #5
 8007bf4:	b292      	uxth	r2, r2
 8007bf6:	fbb1 f2f2 	udiv	r2, r1, r2
 8007bfa:	b292      	uxth	r2, r2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007c00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d201      	bcs.n	8007c0c <mount_volume+0x260>
 8007c08:	230d      	movs	r3, #13
 8007c0a:	e0ea      	b.n	8007de2 <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007c0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c14:	8952      	ldrh	r2, [r2, #10]
 8007c16:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c1a:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <mount_volume+0x27a>
 8007c22:	230d      	movs	r3, #13
 8007c24:	e0dd      	b.n	8007de2 <mount_volume+0x436>
		fmt = 0;
 8007c26:	2300      	movs	r3, #0
 8007c28:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	4a0c      	ldr	r2, [pc, #48]	@ (8007c60 <mount_volume+0x2b4>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d801      	bhi.n	8007c36 <mount_volume+0x28a>
 8007c32:	2303      	movs	r3, #3
 8007c34:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d801      	bhi.n	8007c44 <mount_volume+0x298>
 8007c40:	2302      	movs	r3, #2
 8007c42:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d801      	bhi.n	8007c52 <mount_volume+0x2a6>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8007c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d105      	bne.n	8007c64 <mount_volume+0x2b8>
 8007c58:	230d      	movs	r3, #13
 8007c5a:	e0c2      	b.n	8007de2 <mount_volume+0x436>
 8007c5c:	200058ec 	.word	0x200058ec
 8007c60:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	1c9a      	adds	r2, r3, #2
 8007c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6e:	6a3a      	ldr	r2, [r7, #32]
 8007c70:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007c72:	8bfa      	ldrh	r2, [r7, #30]
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	441a      	add	r2, r3
 8007c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007c7c:	6a3a      	ldr	r2, [r7, #32]
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	441a      	add	r2, r3
 8007c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c84:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8007c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d11e      	bne.n	8007cca <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8e:	3334      	adds	r3, #52	@ 0x34
 8007c90:	332a      	adds	r3, #42	@ 0x2a
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe fc5e 	bl	8006554 <ld_word>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <mount_volume+0x2f6>
 8007c9e:	230d      	movs	r3, #13
 8007ca0:	e09f      	b.n	8007de2 <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	891b      	ldrh	r3, [r3, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <mount_volume+0x302>
 8007caa:	230d      	movs	r3, #13
 8007cac:	e099      	b.n	8007de2 <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb0:	3334      	adds	r3, #52	@ 0x34
 8007cb2:	332c      	adds	r3, #44	@ 0x2c
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fe fc66 	bl	8006586 <ld_dword>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbe:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cc8:	e01e      	b.n	8007d08 <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ccc:	891b      	ldrh	r3, [r3, #8]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <mount_volume+0x32a>
 8007cd2:	230d      	movs	r3, #13
 8007cd4:	e085      	b.n	8007de2 <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cdc:	441a      	add	r2, r3
 8007cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d103      	bne.n	8007cf0 <mount_volume+0x344>
 8007ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	e00a      	b.n	8007d06 <mount_volume+0x35a>
 8007cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf2:	699a      	ldr	r2, [r3, #24]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	005b      	lsls	r3, r3, #1
 8007cf8:	4413      	add	r3, r2
 8007cfa:	085a      	lsrs	r2, r3, #1
 8007cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007d06:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0a:	69da      	ldr	r2, [r3, #28]
 8007d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0e:	899b      	ldrh	r3, [r3, #12]
 8007d10:	4619      	mov	r1, r3
 8007d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d14:	440b      	add	r3, r1
 8007d16:	3b01      	subs	r3, #1
 8007d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d1a:	8989      	ldrh	r1, [r1, #12]
 8007d1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d201      	bcs.n	8007d28 <mount_volume+0x37c>
 8007d24:	230d      	movs	r3, #13
 8007d26:	e05c      	b.n	8007de2 <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2e:	615a      	str	r2, [r3, #20]
 8007d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d32:	695a      	ldr	r2, [r3, #20]
 8007d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d36:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3a:	2280      	movs	r2, #128	@ 0x80
 8007d3c:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d40:	2b03      	cmp	r3, #3
 8007d42:	d13f      	bne.n	8007dc4 <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d46:	3334      	adds	r3, #52	@ 0x34
 8007d48:	3330      	adds	r3, #48	@ 0x30
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe fc02 	bl	8006554 <ld_word>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d136      	bne.n	8007dc4 <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d5e:	f7fe fcda 	bl	8006716 <move_window>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d12d      	bne.n	8007dc4 <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 8007d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8007d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d70:	3334      	adds	r3, #52	@ 0x34
 8007d72:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe fbec 	bl	8006554 <ld_word>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d11d      	bne.n	8007dc4 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d8a:	3334      	adds	r3, #52	@ 0x34
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fe fbfa 	bl	8006586 <ld_dword>
 8007d92:	4603      	mov	r3, r0
 8007d94:	4a15      	ldr	r2, [pc, #84]	@ (8007dec <mount_volume+0x440>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d114      	bne.n	8007dc4 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9c:	3334      	adds	r3, #52	@ 0x34
 8007d9e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe fbef 	bl	8006586 <ld_dword>
 8007da8:	4603      	mov	r3, r0
 8007daa:	4a11      	ldr	r2, [pc, #68]	@ (8007df0 <mount_volume+0x444>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d109      	bne.n	8007dc4 <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db2:	3334      	adds	r3, #52	@ 0x34
 8007db4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fe fbe4 	bl	8006586 <ld_dword>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dca:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8007dcc:	4b09      	ldr	r3, [pc, #36]	@ (8007df4 <mount_volume+0x448>)
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	4b07      	ldr	r3, [pc, #28]	@ (8007df4 <mount_volume+0x448>)
 8007dd6:	801a      	strh	r2, [r3, #0]
 8007dd8:	4b06      	ldr	r3, [pc, #24]	@ (8007df4 <mount_volume+0x448>)
 8007dda:	881a      	ldrh	r2, [r3, #0]
 8007ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dde:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3740      	adds	r7, #64	@ 0x40
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	41615252 	.word	0x41615252
 8007df0:	61417272 	.word	0x61417272
 8007df4:	200058f4 	.word	0x200058f4

08007df8 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007e02:	2309      	movs	r3, #9
 8007e04:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01c      	beq.n	8007e46 <validate+0x4e>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d018      	beq.n	8007e46 <validate+0x4e>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d013      	beq.n	8007e46 <validate+0x4e>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	889a      	ldrh	r2, [r3, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	88db      	ldrh	r3, [r3, #6]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d10c      	bne.n	8007e46 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	785b      	ldrb	r3, [r3, #1]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fe fa56 	bl	80062e4 <disk_status>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <validate+0x4e>
			res = FR_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d102      	bne.n	8007e52 <validate+0x5a>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	e000      	b.n	8007e54 <validate+0x5c>
 8007e52:	2300      	movs	r3, #0
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	6013      	str	r3, [r2, #0]
	return res;
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b088      	sub	sp, #32
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8007e76:	f107 0310 	add.w	r3, r7, #16
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7ff fbf8 	bl	8007670 <get_ldnumber>
 8007e80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	da01      	bge.n	8007e8c <f_mount+0x28>
 8007e88:	230b      	movs	r3, #11
 8007e8a:	e02e      	b.n	8007eea <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8007e8c:	4a19      	ldr	r2, [pc, #100]	@ (8007ef4 <f_mount+0x90>)
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e94:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d007      	beq.n	8007eac <f_mount+0x48>
		FatFs[vol] = 0;
 8007e9c:	4a15      	ldr	r2, [pc, #84]	@ (8007ef4 <f_mount+0x90>)
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00b      	beq.n	8007eca <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	69fa      	ldr	r2, [r7, #28]
 8007eb6:	b2d2      	uxtb	r2, r2
 8007eb8:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	490c      	ldr	r1, [pc, #48]	@ (8007ef4 <f_mount+0x90>)
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <f_mount+0x70>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	e00a      	b.n	8007eea <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007ed4:	f107 010c 	add.w	r1, r7, #12
 8007ed8:	f107 0308 	add.w	r3, r7, #8
 8007edc:	2200      	movs	r2, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7ff fd64 	bl	80079ac <mount_volume>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3720      	adds	r7, #32
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	200058ec 	.word	0x200058ec

08007ef8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b098      	sub	sp, #96	@ 0x60
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	4613      	mov	r3, r2
 8007f04:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <f_open+0x18>
 8007f0c:	2309      	movs	r3, #9
 8007f0e:	e184      	b.n	800821a <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f16:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 8007f18:	79fa      	ldrb	r2, [r7, #7]
 8007f1a:	f107 0114 	add.w	r1, r7, #20
 8007f1e:	f107 0308 	add.w	r3, r7, #8
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff fd42 	bl	80079ac <mount_volume>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007f2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f040 8168 	bne.w	8008208 <f_open+0x310>
		dj.obj.fs = fs;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	f107 0318 	add.w	r3, r7, #24
 8007f42:	4611      	mov	r1, r2
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7ff fb1f 	bl	8007588 <follow_path>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8007f50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d107      	bne.n	8007f68 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007f58:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f5c:	b25b      	sxtb	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	da02      	bge.n	8007f68 <f_open+0x70>
				res = FR_INVALID_NAME;
 8007f62:	2306      	movs	r3, #6
 8007f64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	f003 031c 	and.w	r3, r3, #28
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d077      	beq.n	8008062 <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 8007f72:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d010      	beq.n	8007f9c <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007f7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d107      	bne.n	8007f92 <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8007f82:	f107 0318 	add.w	r3, r7, #24
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff f9f4 	bl	8007374 <dir_register>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	f043 0308 	orr.w	r3, r3, #8
 8007f98:	71fb      	strb	r3, [r7, #7]
 8007f9a:	e010      	b.n	8007fbe <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007f9c:	7fbb      	ldrb	r3, [r7, #30]
 8007f9e:	f003 0311 	and.w	r3, r3, #17
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <f_open+0xb6>
					res = FR_DENIED;
 8007fa6:	2307      	movs	r3, #7
 8007fa8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007fac:	e007      	b.n	8007fbe <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <f_open+0xc6>
 8007fb8:	2308      	movs	r3, #8
 8007fba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8007fbe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d167      	bne.n	8008096 <f_open+0x19e>
 8007fc6:	79fb      	ldrb	r3, [r7, #7]
 8007fc8:	f003 0308 	and.w	r3, r3, #8
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d062      	beq.n	8008096 <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 8007fd0:	4b94      	ldr	r3, [pc, #592]	@ (8008224 <f_open+0x32c>)
 8007fd2:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 8007fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd6:	330e      	adds	r3, #14
 8007fd8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fe fb11 	bl	8006602 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 8007fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe2:	3316      	adds	r3, #22
 8007fe4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe fb0b 	bl	8006602 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff f92a 	bl	800724c <ld_clust>
 8007ff8:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ffc:	330b      	adds	r3, #11
 8007ffe:	2220      	movs	r2, #32
 8008000:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008006:	2200      	movs	r2, #0
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff f93e 	bl	800728a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800800e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008010:	331c      	adds	r3, #28
 8008012:	2100      	movs	r1, #0
 8008014:	4618      	mov	r0, r3
 8008016:	f7fe faf4 	bl	8006602 <st_dword>
					fs->wflag = 1;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2201      	movs	r2, #1
 800801e:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8008020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d037      	beq.n	8008096 <f_open+0x19e>
						sc = fs->winsect;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802a:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 800802c:	f107 0318 	add.w	r3, r7, #24
 8008030:	2200      	movs	r2, #0
 8008032:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008034:	4618      	mov	r0, r3
 8008036:	f7fe fe15 	bl	8006c64 <remove_chain>
 800803a:	4603      	mov	r3, r0
 800803c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008040:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008044:	2b00      	cmp	r3, #0
 8008046:	d126      	bne.n	8008096 <f_open+0x19e>
							res = move_window(fs, sc);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800804c:	4618      	mov	r0, r3
 800804e:	f7fe fb62 	bl	8006716 <move_window>
 8008052:	4603      	mov	r3, r0
 8008054:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800805c:	3a01      	subs	r2, #1
 800805e:	611a      	str	r2, [r3, #16]
 8008060:	e019      	b.n	8008096 <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8008062:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008066:	2b00      	cmp	r3, #0
 8008068:	d115      	bne.n	8008096 <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800806a:	7fbb      	ldrb	r3, [r7, #30]
 800806c:	f003 0310 	and.w	r3, r3, #16
 8008070:	2b00      	cmp	r3, #0
 8008072:	d003      	beq.n	800807c <f_open+0x184>
					res = FR_NO_FILE;
 8008074:	2304      	movs	r3, #4
 8008076:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800807a:	e00c      	b.n	8008096 <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d007      	beq.n	8008096 <f_open+0x19e>
 8008086:	7fbb      	ldrb	r3, [r7, #30]
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <f_open+0x19e>
						res = FR_DENIED;
 8008090:	2307      	movs	r3, #7
 8008092:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008096:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10f      	bne.n	80080be <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800809e:	79fb      	ldrb	r3, [r7, #7]
 80080a0:	f003 0308 	and.w	r3, r3, #8
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <f_open+0x1b8>
 80080a8:	79fb      	ldrb	r3, [r7, #7]
 80080aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ae:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80080b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80080be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f040 80a0 	bne.w	8008208 <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080cc:	4611      	mov	r1, r2
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7ff f8bc 	bl	800724c <ld_clust>
 80080d4:	4602      	mov	r2, r0
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80080da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080dc:	331c      	adds	r3, #28
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe fa51 	bl	8006586 <ld_dword>
 80080e4:	4602      	mov	r2, r0
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	88da      	ldrh	r2, [r3, #6]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	79fa      	ldrb	r2, [r7, #7]
 80080fc:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3328      	adds	r3, #40	@ 0x28
 8008114:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008118:	2100      	movs	r1, #0
 800811a:	4618      	mov	r0, r3
 800811c:	f00b f806 	bl	801312c <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008120:	79fb      	ldrb	r3, [r7, #7]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d06e      	beq.n	8008208 <f_open+0x310>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d06a      	beq.n	8008208 <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	68da      	ldr	r2, [r3, #12]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	895b      	ldrh	r3, [r3, #10]
 800813e:	461a      	mov	r2, r3
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	899b      	ldrh	r3, [r3, #12]
 8008144:	fb02 f303 	mul.w	r3, r2, r3
 8008148:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	657b      	str	r3, [r7, #84]	@ 0x54
 8008156:	e016      	b.n	8008186 <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800815c:	4618      	mov	r0, r3
 800815e:	f7fe fb94 	bl	800688a <get_fat>
 8008162:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008164:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008166:	2b01      	cmp	r3, #1
 8008168:	d802      	bhi.n	8008170 <f_open+0x278>
 800816a:	2302      	movs	r3, #2
 800816c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008170:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008176:	d102      	bne.n	800817e <f_open+0x286>
 8008178:	2301      	movs	r3, #1
 800817a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800817e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	657b      	str	r3, [r7, #84]	@ 0x54
 8008186:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800818a:	2b00      	cmp	r3, #0
 800818c:	d103      	bne.n	8008196 <f_open+0x29e>
 800818e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008192:	429a      	cmp	r2, r3
 8008194:	d8e0      	bhi.n	8008158 <f_open+0x260>
				}
				fp->clust = clst;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800819a:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800819c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d131      	bne.n	8008208 <f_open+0x310>
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	899b      	ldrh	r3, [r3, #12]
 80081a8:	461a      	mov	r2, r3
 80081aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80081b0:	fb01 f202 	mul.w	r2, r1, r2
 80081b4:	1a9b      	subs	r3, r3, r2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d026      	beq.n	8008208 <f_open+0x310>
					sc = clst2sect(fs, clst);
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe fb44 	bl	800684c <clst2sect>
 80081c4:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 80081c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d103      	bne.n	80081d4 <f_open+0x2dc>
						res = FR_INT_ERR;
 80081cc:	2302      	movs	r3, #2
 80081ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80081d2:	e019      	b.n	8008208 <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	899b      	ldrh	r3, [r3, #12]
 80081d8:	461a      	mov	r2, r3
 80081da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80081e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081e2:	441a      	add	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	7858      	ldrb	r0, [r3, #1]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	69da      	ldr	r2, [r3, #28]
 80081f6:	2301      	movs	r3, #1
 80081f8:	f7fe f8c4 	bl	8006384 <disk_read>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d002      	beq.n	8008208 <f_open+0x310>
 8008202:	2301      	movs	r3, #1
 8008204:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008208:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <f_open+0x31e>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008216:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800821a:	4618      	mov	r0, r3
 800821c:	3760      	adds	r7, #96	@ 0x60
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	54210000 	.word	0x54210000

08008228 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08e      	sub	sp, #56	@ 0x38
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2200      	movs	r2, #0
 800823e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f107 0214 	add.w	r2, r7, #20
 8008246:	4611      	mov	r1, r2
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff fdd5 	bl	8007df8 <validate>
 800824e:	4603      	mov	r3, r0
 8008250:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008254:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008258:	2b00      	cmp	r3, #0
 800825a:	d107      	bne.n	800826c <f_read+0x44>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	7c5b      	ldrb	r3, [r3, #17]
 8008260:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008264:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <f_read+0x4a>
 800826c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008270:	e129      	b.n	80084c6 <f_read+0x29e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	7c1b      	ldrb	r3, [r3, #16]
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <f_read+0x5a>
 800827e:	2307      	movs	r3, #7
 8008280:	e121      	b.n	80084c6 <f_read+0x29e>
	remain = fp->obj.objsize - fp->fptr;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	429a      	cmp	r2, r3
 8008294:	f240 8112 	bls.w	80084bc <f_read+0x294>
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800829c:	e10e      	b.n	80084bc <f_read+0x294>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	8992      	ldrh	r2, [r2, #12]
 80082a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80082aa:	fb01 f202 	mul.w	r2, r1, r2
 80082ae:	1a9b      	subs	r3, r3, r2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f040 80c9 	bne.w	8008448 <f_read+0x220>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	8992      	ldrh	r2, [r2, #12]
 80082be:	fbb3 f3f2 	udiv	r3, r3, r2
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	8952      	ldrh	r2, [r2, #10]
 80082c6:	3a01      	subs	r2, #1
 80082c8:	4013      	ands	r3, r2
 80082ca:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d123      	bne.n	800831a <f_read+0xf2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d103      	bne.n	80082e2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	633b      	str	r3, [r7, #48]	@ 0x30
 80082e0:	e007      	b.n	80082f2 <f_read+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	4619      	mov	r1, r3
 80082ea:	4610      	mov	r0, r2
 80082ec:	f7fe facd 	bl	800688a <get_fat>
 80082f0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80082f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d804      	bhi.n	8008302 <f_read+0xda>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2202      	movs	r2, #2
 80082fc:	745a      	strb	r2, [r3, #17]
 80082fe:	2302      	movs	r3, #2
 8008300:	e0e1      	b.n	80084c6 <f_read+0x29e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008308:	d104      	bne.n	8008314 <f_read+0xec>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2201      	movs	r2, #1
 800830e:	745a      	strb	r2, [r3, #17]
 8008310:	2301      	movs	r3, #1
 8008312:	e0d8      	b.n	80084c6 <f_read+0x29e>
				fp->clust = clst;				/* Update current cluster */
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008318:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f7fe fa92 	bl	800684c <clst2sect>
 8008328:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d104      	bne.n	800833a <f_read+0x112>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2202      	movs	r2, #2
 8008334:	745a      	strb	r2, [r3, #17]
 8008336:	2302      	movs	r3, #2
 8008338:	e0c5      	b.n	80084c6 <f_read+0x29e>
			sect += csect;
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	4413      	add	r3, r2
 8008340:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	899b      	ldrh	r3, [r3, #12]
 8008346:	461a      	mov	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	fbb3 f3f2 	udiv	r3, r3, r2
 800834e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8008350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008352:	2b00      	cmp	r3, #0
 8008354:	d041      	beq.n	80083da <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008356:	69fa      	ldr	r2, [r7, #28]
 8008358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835a:	4413      	add	r3, r2
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	8952      	ldrh	r2, [r2, #10]
 8008360:	4293      	cmp	r3, r2
 8008362:	d905      	bls.n	8008370 <f_read+0x148>
					cc = fs->csize - csect;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	895b      	ldrh	r3, [r3, #10]
 8008368:	461a      	mov	r2, r3
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	7858      	ldrb	r0, [r3, #1]
 8008374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008376:	69ba      	ldr	r2, [r7, #24]
 8008378:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800837a:	f7fe f803 	bl	8006384 <disk_read>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d004      	beq.n	800838e <f_read+0x166>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2201      	movs	r2, #1
 8008388:	745a      	strb	r2, [r3, #17]
 800838a:	2301      	movs	r3, #1
 800838c:	e09b      	b.n	80084c6 <f_read+0x29e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	7c1b      	ldrb	r3, [r3, #16]
 8008392:	b25b      	sxtb	r3, r3
 8008394:	2b00      	cmp	r3, #0
 8008396:	da18      	bge.n	80083ca <f_read+0x1a2>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	69da      	ldr	r2, [r3, #28]
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d911      	bls.n	80083ca <f_read+0x1a2>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	69da      	ldr	r2, [r3, #28]
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	8992      	ldrh	r2, [r2, #12]
 80083b2:	fb02 f303 	mul.w	r3, r2, r3
 80083b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083b8:	18d0      	adds	r0, r2, r3
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	899b      	ldrh	r3, [r3, #12]
 80083c4:	461a      	mov	r2, r3
 80083c6:	f00a ff35 	bl	8013234 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	899b      	ldrh	r3, [r3, #12]
 80083ce:	461a      	mov	r2, r3
 80083d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d2:	fb02 f303 	mul.w	r3, r2, r3
 80083d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80083d8:	e05c      	b.n	8008494 <f_read+0x26c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d02e      	beq.n	8008442 <f_read+0x21a>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	7c1b      	ldrb	r3, [r3, #16]
 80083e8:	b25b      	sxtb	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	da18      	bge.n	8008420 <f_read+0x1f8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	7858      	ldrb	r0, [r3, #1]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	69da      	ldr	r2, [r3, #28]
 80083fc:	2301      	movs	r3, #1
 80083fe:	f7fd fff3 	bl	80063e8 <disk_write>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d004      	beq.n	8008412 <f_read+0x1ea>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2201      	movs	r2, #1
 800840c:	745a      	strb	r2, [r3, #17]
 800840e:	2301      	movs	r3, #1
 8008410:	e059      	b.n	80084c6 <f_read+0x29e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	7c1b      	ldrb	r3, [r3, #16]
 8008416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800841a:	b2da      	uxtb	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	7858      	ldrb	r0, [r3, #1]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800842a:	2301      	movs	r3, #1
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	f7fd ffa9 	bl	8006384 <disk_read>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d004      	beq.n	8008442 <f_read+0x21a>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2201      	movs	r2, #1
 800843c:	745a      	strb	r2, [r3, #17]
 800843e:	2301      	movs	r3, #1
 8008440:	e041      	b.n	80084c6 <f_read+0x29e>
			}
#endif
			fp->sect = sect;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	899b      	ldrh	r3, [r3, #12]
 800844c:	4618      	mov	r0, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	8992      	ldrh	r2, [r2, #12]
 8008456:	fbb3 f1f2 	udiv	r1, r3, r2
 800845a:	fb01 f202 	mul.w	r2, r1, r2
 800845e:	1a9b      	subs	r3, r3, r2
 8008460:	1ac3      	subs	r3, r0, r3
 8008462:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	429a      	cmp	r2, r3
 800846a:	d901      	bls.n	8008470 <f_read+0x248>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	8992      	ldrh	r2, [r2, #12]
 800847e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008482:	fb00 f202 	mul.w	r2, r0, r2
 8008486:	1a9b      	subs	r3, r3, r2
 8008488:	440b      	add	r3, r1
 800848a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800848c:	4619      	mov	r1, r3
 800848e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008490:	f00a fed0 	bl	8013234 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	607b      	str	r3, [r7, #4]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a2:	441a      	add	r2, r3
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ac:	4413      	add	r3, r2
 80084ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	695a      	ldr	r2, [r3, #20]
 80084b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b6:	441a      	add	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	615a      	str	r2, [r3, #20]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f47f aeed 	bne.w	800829e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3738      	adds	r7, #56	@ 0x38
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b08c      	sub	sp, #48	@ 0x30
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	607a      	str	r2, [r7, #4]
 80084da:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2200      	movs	r2, #0
 80084e4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f107 0210 	add.w	r2, r7, #16
 80084ec:	4611      	mov	r1, r2
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7ff fc82 	bl	8007df8 <validate>
 80084f4:	4603      	mov	r3, r0
 80084f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80084fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d107      	bne.n	8008512 <f_write+0x44>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	7c5b      	ldrb	r3, [r3, #17]
 8008506:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800850a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <f_write+0x4a>
 8008512:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008516:	e15e      	b.n	80087d6 <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	7c1b      	ldrb	r3, [r3, #16]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <f_write+0x5a>
 8008524:	2307      	movs	r3, #7
 8008526:	e156      	b.n	80087d6 <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	695a      	ldr	r2, [r3, #20]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	441a      	add	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	429a      	cmp	r2, r3
 8008536:	f080 8140 	bcs.w	80087ba <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	43db      	mvns	r3, r3
 8008540:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8008542:	e13a      	b.n	80087ba <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	8992      	ldrh	r2, [r2, #12]
 800854c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008550:	fb01 f202 	mul.w	r2, r1, r2
 8008554:	1a9b      	subs	r3, r3, r2
 8008556:	2b00      	cmp	r3, #0
 8008558:	f040 80e5 	bne.w	8008726 <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	8992      	ldrh	r2, [r2, #12]
 8008564:	fbb3 f3f2 	udiv	r3, r3, r2
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	8952      	ldrh	r2, [r2, #10]
 800856c:	3a01      	subs	r2, #1
 800856e:	4013      	ands	r3, r2
 8008570:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d137      	bne.n	80085e8 <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10c      	bne.n	800859a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10e      	bne.n	80085aa <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2100      	movs	r1, #0
 8008590:	4618      	mov	r0, r3
 8008592:	f7fe fbcc 	bl	8006d2e <create_chain>
 8008596:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008598:	e007      	b.n	80085aa <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	4619      	mov	r1, r3
 80085a2:	4610      	mov	r0, r2
 80085a4:	f7fe fbc3 	bl	8006d2e <create_chain>
 80085a8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80085aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 8109 	beq.w	80087c4 <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80085b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d104      	bne.n	80085c2 <f_write+0xf4>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2202      	movs	r2, #2
 80085bc:	745a      	strb	r2, [r3, #17]
 80085be:	2302      	movs	r3, #2
 80085c0:	e109      	b.n	80087d6 <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80085c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c8:	d104      	bne.n	80085d4 <f_write+0x106>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2201      	movs	r2, #1
 80085ce:	745a      	strb	r2, [r3, #17]
 80085d0:	2301      	movs	r3, #1
 80085d2:	e100      	b.n	80087d6 <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085d8:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d102      	bne.n	80085e8 <f_write+0x11a>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085e6:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	7c1b      	ldrb	r3, [r3, #16]
 80085ec:	b25b      	sxtb	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	da18      	bge.n	8008624 <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	7858      	ldrb	r0, [r3, #1]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	69da      	ldr	r2, [r3, #28]
 8008600:	2301      	movs	r3, #1
 8008602:	f7fd fef1 	bl	80063e8 <disk_write>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d004      	beq.n	8008616 <f_write+0x148>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2201      	movs	r2, #1
 8008610:	745a      	strb	r2, [r3, #17]
 8008612:	2301      	movs	r3, #1
 8008614:	e0df      	b.n	80087d6 <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	7c1b      	ldrb	r3, [r3, #16]
 800861a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800861e:	b2da      	uxtb	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	4619      	mov	r1, r3
 800862c:	4610      	mov	r0, r2
 800862e:	f7fe f90d 	bl	800684c <clst2sect>
 8008632:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d104      	bne.n	8008644 <f_write+0x176>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2202      	movs	r2, #2
 800863e:	745a      	strb	r2, [r3, #17]
 8008640:	2302      	movs	r3, #2
 8008642:	e0c8      	b.n	80087d6 <f_write+0x308>
			sect += csect;
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	4413      	add	r3, r2
 800864a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	899b      	ldrh	r3, [r3, #12]
 8008650:	461a      	mov	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	fbb3 f3f2 	udiv	r3, r3, r2
 8008658:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800865a:	6a3b      	ldr	r3, [r7, #32]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d043      	beq.n	80086e8 <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	4413      	add	r3, r2
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	8952      	ldrh	r2, [r2, #10]
 800866a:	4293      	cmp	r3, r2
 800866c:	d905      	bls.n	800867a <f_write+0x1ac>
					cc = fs->csize - csect;
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	895b      	ldrh	r3, [r3, #10]
 8008672:	461a      	mov	r2, r3
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	7858      	ldrb	r0, [r3, #1]
 800867e:	6a3b      	ldr	r3, [r7, #32]
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	69f9      	ldr	r1, [r7, #28]
 8008684:	f7fd feb0 	bl	80063e8 <disk_write>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d004      	beq.n	8008698 <f_write+0x1ca>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2201      	movs	r2, #1
 8008692:	745a      	strb	r2, [r3, #17]
 8008694:	2301      	movs	r3, #1
 8008696:	e09e      	b.n	80087d6 <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	69da      	ldr	r2, [r3, #28]
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	6a3a      	ldr	r2, [r7, #32]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d918      	bls.n	80086d8 <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	69da      	ldr	r2, [r3, #28]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	8992      	ldrh	r2, [r2, #12]
 80086b8:	fb02 f303 	mul.w	r3, r2, r3
 80086bc:	69fa      	ldr	r2, [r7, #28]
 80086be:	18d1      	adds	r1, r2, r3
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	899b      	ldrh	r3, [r3, #12]
 80086c4:	461a      	mov	r2, r3
 80086c6:	f00a fdb5 	bl	8013234 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	7c1b      	ldrb	r3, [r3, #16]
 80086ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	899b      	ldrh	r3, [r3, #12]
 80086dc:	461a      	mov	r2, r3
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	fb02 f303 	mul.w	r3, r2, r3
 80086e4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80086e6:	e04b      	b.n	8008780 <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d016      	beq.n	8008720 <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	695a      	ldr	r2, [r3, #20]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d210      	bcs.n	8008720 <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	7858      	ldrb	r0, [r3, #1]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008708:	2301      	movs	r3, #1
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	f7fd fe3a 	bl	8006384 <disk_read>
 8008710:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008712:	2b00      	cmp	r3, #0
 8008714:	d004      	beq.n	8008720 <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2201      	movs	r2, #1
 800871a:	745a      	strb	r2, [r3, #17]
 800871c:	2301      	movs	r3, #1
 800871e:	e05a      	b.n	80087d6 <f_write+0x308>
			}
#endif
			fp->sect = sect;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	899b      	ldrh	r3, [r3, #12]
 800872a:	4618      	mov	r0, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	8992      	ldrh	r2, [r2, #12]
 8008734:	fbb3 f1f2 	udiv	r1, r3, r2
 8008738:	fb01 f202 	mul.w	r2, r1, r2
 800873c:	1a9b      	subs	r3, r3, r2
 800873e:	1ac3      	subs	r3, r0, r3
 8008740:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	429a      	cmp	r2, r3
 8008748:	d901      	bls.n	800874e <f_write+0x280>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	8992      	ldrh	r2, [r2, #12]
 800875c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008760:	fb00 f202 	mul.w	r2, r0, r2
 8008764:	1a9b      	subs	r3, r3, r2
 8008766:	440b      	add	r3, r1
 8008768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800876a:	69f9      	ldr	r1, [r7, #28]
 800876c:	4618      	mov	r0, r3
 800876e:	f00a fd61 	bl	8013234 <memcpy>
		fp->flag |= FA_DIRTY;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	7c1b      	ldrb	r3, [r3, #16]
 8008776:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800877a:	b2da      	uxtb	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	607b      	str	r3, [r7, #4]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878e:	441a      	add	r2, r3
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	69fa      	ldr	r2, [r7, #28]
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	4413      	add	r3, r2
 800879a:	61fb      	str	r3, [r7, #28]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	695a      	ldr	r2, [r3, #20]
 80087a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a2:	441a      	add	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	615a      	str	r2, [r3, #20]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	68da      	ldr	r2, [r3, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	bf38      	it	cc
 80087b4:	461a      	movcc	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	60da      	str	r2, [r3, #12]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f47f aec1 	bne.w	8008544 <f_write+0x76>
 80087c2:	e000      	b.n	80087c6 <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80087c4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	7c1b      	ldrb	r3, [r3, #16]
 80087ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3730      	adds	r7, #48	@ 0x30
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
	...

080087e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f107 0208 	add.w	r2, r7, #8
 80087ee:	4611      	mov	r1, r2
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7ff fb01 	bl	8007df8 <validate>
 80087f6:	4603      	mov	r3, r0
 80087f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d167      	bne.n	80088d0 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	7c1b      	ldrb	r3, [r3, #16]
 8008804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008808:	2b00      	cmp	r3, #0
 800880a:	d061      	beq.n	80088d0 <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	7c1b      	ldrb	r3, [r3, #16]
 8008810:	b25b      	sxtb	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	da15      	bge.n	8008842 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	7858      	ldrb	r0, [r3, #1]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	69da      	ldr	r2, [r3, #28]
 8008824:	2301      	movs	r3, #1
 8008826:	f7fd fddf 	bl	80063e8 <disk_write>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <f_sync+0x54>
 8008830:	2301      	movs	r3, #1
 8008832:	e04e      	b.n	80088d2 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	7c1b      	ldrb	r3, [r3, #16]
 8008838:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800883c:	b2da      	uxtb	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008842:	4b26      	ldr	r3, [pc, #152]	@ (80088dc <f_sync+0xfc>)
 8008844:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a1b      	ldr	r3, [r3, #32]
 800884c:	4619      	mov	r1, r3
 800884e:	4610      	mov	r0, r2
 8008850:	f7fd ff61 	bl	8006716 <move_window>
 8008854:	4603      	mov	r3, r0
 8008856:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008858:	7dfb      	ldrb	r3, [r7, #23]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d138      	bne.n	80088d0 <f_sync+0xf0>
					dir = fp->dir_ptr;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008862:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	330b      	adds	r3, #11
 8008868:	781a      	ldrb	r2, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	330b      	adds	r3, #11
 800886e:	f042 0220 	orr.w	r2, r2, #32
 8008872:	b2d2      	uxtb	r2, r2
 8008874:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	461a      	mov	r2, r3
 8008880:	68f9      	ldr	r1, [r7, #12]
 8008882:	f7fe fd02 	bl	800728a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f103 021c 	add.w	r2, r3, #28
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	4619      	mov	r1, r3
 8008892:	4610      	mov	r0, r2
 8008894:	f7fd feb5 	bl	8006602 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	3316      	adds	r3, #22
 800889c:	6939      	ldr	r1, [r7, #16]
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fd feaf 	bl	8006602 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3312      	adds	r3, #18
 80088a8:	2100      	movs	r1, #0
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fd fe8e 	bl	80065cc <st_word>
					fs->wflag = 1;
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2201      	movs	r2, #1
 80088b4:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fd ff59 	bl	8006770 <sync_fs>
 80088be:	4603      	mov	r3, r0
 80088c0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	7c1b      	ldrb	r3, [r3, #16]
 80088c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3718      	adds	r7, #24
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	54210000 	.word	0x54210000

080088e0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7ff ff79 	bl	80087e0 <f_sync>
 80088ee:	4603      	mov	r3, r0
 80088f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10e      	bne.n	8008916 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f107 0208 	add.w	r2, r7, #8
 80088fe:	4611      	mov	r1, r2
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff fa79 	bl	8007df8 <validate>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d102      	bne.n	8008916 <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008916:	7bfb      	ldrb	r3, [r7, #15]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08e      	sub	sp, #56	@ 0x38
 8008924:	af00      	add	r7, sp, #0
 8008926:	60b9      	str	r1, [r7, #8]
 8008928:	607b      	str	r3, [r7, #4]
 800892a:	4603      	mov	r3, r0
 800892c:	73fb      	strb	r3, [r7, #15]
 800892e:	4613      	mov	r3, r2
 8008930:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8008932:	f107 0210 	add.w	r2, r7, #16
 8008936:	7bfb      	ldrb	r3, [r7, #15]
 8008938:	2101      	movs	r1, #1
 800893a:	4618      	mov	r0, r3
 800893c:	f7fd fd88 	bl	8006450 <disk_ioctl>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <create_partition+0x2a>
 8008946:	2301      	movs	r3, #1
 8008948:	e108      	b.n	8008b5c <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800894e:	233f      	movs	r3, #63	@ 0x3f
 8008950:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8008952:	2308      	movs	r3, #8
 8008954:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008958:	e004      	b.n	8008964 <create_partition+0x44>
 800895a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800895e:	005b      	lsls	r3, r3, #1
 8008960:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00a      	beq.n	8008982 <create_partition+0x62>
 800896c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008970:	6a3a      	ldr	r2, [r7, #32]
 8008972:	fbb2 f2f3 	udiv	r2, r2, r3
 8008976:	7ffb      	ldrb	r3, [r7, #31]
 8008978:	fbb2 f3f3 	udiv	r3, r2, r3
 800897c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008980:	d8eb      	bhi.n	800895a <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 8008982:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008986:	2b00      	cmp	r3, #0
 8008988:	d102      	bne.n	8008990 <create_partition+0x70>
 800898a:	23ff      	movs	r3, #255	@ 0xff
 800898c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 8008990:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008994:	2100      	movs	r1, #0
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f00a fbc8 	bl	801312c <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80089a2:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80089a4:	2300      	movs	r3, #0
 80089a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80089a8:	7ffb      	ldrb	r3, [r7, #31]
 80089aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80089ac:	e0b5      	b.n	8008b1a <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 80089ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	4413      	add	r3, r2
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 80089ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089bc:	2b64      	cmp	r3, #100	@ 0x64
 80089be:	d80d      	bhi.n	80089dc <create_partition+0xbc>
 80089c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c2:	2b64      	cmp	r3, #100	@ 0x64
 80089c4:	d008      	beq.n	80089d8 <create_partition+0xb8>
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	4a66      	ldr	r2, [pc, #408]	@ (8008b64 <create_partition+0x244>)
 80089ca:	fba2 2303 	umull	r2, r3, r2, r3
 80089ce:	095b      	lsrs	r3, r3, #5
 80089d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089d2:	fb02 f303 	mul.w	r3, r2, r3
 80089d6:	e000      	b.n	80089da <create_partition+0xba>
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 80089dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e0:	4413      	add	r3, r2
 80089e2:	6a3a      	ldr	r2, [r7, #32]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d305      	bcc.n	80089f4 <create_partition+0xd4>
 80089e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ec:	4413      	add	r3, r2
 80089ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d903      	bls.n	80089fc <create_partition+0xdc>
 80089f4:	6a3a      	ldr	r2, [r7, #32]
 80089f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 80089fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f000 8097 	beq.w	8008b32 <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 8008a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a06:	3308      	adds	r3, #8
 8008a08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fd fdf9 	bl	8006602 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 8008a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a12:	330c      	adds	r3, #12
 8008a14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fd fdf3 	bl	8006602 <st_dword>
			pte[PTE_System] = sys;					/* System type */
 8008a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1e:	3304      	adds	r3, #4
 8008a20:	7bba      	ldrb	r2, [r7, #14]
 8008a22:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 8008a24:	7ffb      	ldrb	r3, [r7, #31]
 8008a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a34:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 8008a36:	7ffb      	ldrb	r3, [r7, #31]
 8008a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a3e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008a42:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a46:	fb01 f202 	mul.w	r2, r1, r2
 8008a4a:	1a9b      	subs	r3, r3, r2
 8008a4c:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 8008a4e:	7ffa      	ldrb	r2, [r7, #31]
 8008a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a52:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a56:	fb01 f202 	mul.w	r2, r1, r2
 8008a5a:	1a9b      	subs	r3, r3, r2
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	3301      	adds	r3, #1
 8008a60:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 8008a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a64:	3301      	adds	r3, #1
 8008a66:	7dfa      	ldrb	r2, [r7, #23]
 8008a68:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	089b      	lsrs	r3, r3, #2
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008a74:	b2d9      	uxtb	r1, r3
 8008a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a78:	3302      	adds	r3, #2
 8008a7a:	7dba      	ldrb	r2, [r7, #22]
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	b2d2      	uxtb	r2, r2
 8008a80:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 8008a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a84:	3303      	adds	r3, #3
 8008a86:	69ba      	ldr	r2, [r7, #24]
 8008a88:	b2d2      	uxtb	r2, r2
 8008a8a:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 8008a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a90:	4413      	add	r3, r2
 8008a92:	1e5a      	subs	r2, r3, #1
 8008a94:	7ffb      	ldrb	r3, [r7, #31]
 8008a96:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa2:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 8008aa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa8:	4413      	add	r3, r2
 8008aaa:	1e5a      	subs	r2, r3, #1
 8008aac:	7ffb      	ldrb	r3, [r7, #31]
 8008aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008ab6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008aba:	fb01 f202 	mul.w	r2, r1, r2
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 8008ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac6:	4413      	add	r3, r2
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	7ffa      	ldrb	r2, [r7, #31]
 8008acc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ad0:	fb01 f202 	mul.w	r2, r1, r2
 8008ad4:	1a9b      	subs	r3, r3, r2
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	3301      	adds	r3, #1
 8008ada:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 8008adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ade:	3305      	adds	r3, #5
 8008ae0:	7dfa      	ldrb	r2, [r7, #23]
 8008ae2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	089b      	lsrs	r3, r3, #2
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008aee:	b2d9      	uxtb	r1, r3
 8008af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af2:	3306      	adds	r3, #6
 8008af4:	7dba      	ldrb	r2, [r7, #22]
 8008af6:	430a      	orrs	r2, r1
 8008af8:	b2d2      	uxtb	r2, r2
 8008afa:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 8008afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afe:	3307      	adds	r3, #7
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	b2d2      	uxtb	r2, r2
 8008b04:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 8008b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b08:	3310      	adds	r3, #16
 8008b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8008b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0e:	3301      	adds	r3, #1
 8008b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b16:	4413      	add	r3, r2
 8008b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d809      	bhi.n	8008b34 <create_partition+0x214>
 8008b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d006      	beq.n	8008b34 <create_partition+0x214>
 8008b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	f4ff af3f 	bcc.w	80089ae <create_partition+0x8e>
 8008b30:	e000      	b.n	8008b34 <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 8008b32:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008b3a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fd fd44 	bl	80065cc <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8008b44:	7bf8      	ldrb	r0, [r7, #15]
 8008b46:	2301      	movs	r3, #1
 8008b48:	2200      	movs	r2, #0
 8008b4a:	6879      	ldr	r1, [r7, #4]
 8008b4c:	f7fd fc4c 	bl	80063e8 <disk_write>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <create_partition+0x23a>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e000      	b.n	8008b5c <create_partition+0x23c>
	}

	return FR_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3738      	adds	r7, #56	@ 0x38
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	51eb851f 	.word	0x51eb851f

08008b68 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b09e      	sub	sp, #120	@ 0x78
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
 8008b74:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8008b76:	f107 030c 	add.w	r3, r7, #12
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fe fd78 	bl	8007670 <get_ldnumber>
 8008b80:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 8008b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	da02      	bge.n	8008b8e <f_mkfs+0x26>
 8008b88:	230b      	movs	r3, #11
 8008b8a:	f000 bc39 	b.w	8009400 <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 8008b8e:	4a90      	ldr	r2, [pc, #576]	@ (8008dd0 <f_mkfs+0x268>)
 8008b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d005      	beq.n	8008ba6 <f_mkfs+0x3e>
 8008b9a:	4a8d      	ldr	r2, [pc, #564]	@ (8008dd0 <f_mkfs+0x268>)
 8008b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8008ba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ba8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 8008bac:	2300      	movs	r3, #0
 8008bae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 8008bb2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fd fbbc 	bl	8006334 <disk_initialize>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 8008bc2:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d002      	beq.n	8008bd4 <f_mkfs+0x6c>
 8008bce:	2303      	movs	r3, #3
 8008bd0:	f000 bc16 	b.w	8009400 <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 8008bd4:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8008bd8:	f003 0304 	and.w	r3, r3, #4
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <f_mkfs+0x7e>
 8008be0:	230a      	movs	r3, #10
 8008be2:	f000 bc0d 	b.w	8009400 <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <f_mkfs+0x88>
 8008bec:	4b79      	ldr	r3, [pc, #484]	@ (8008dd4 <f_mkfs+0x26c>)
 8008bee:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d107      	bne.n	8008c0c <f_mkfs+0xa4>
 8008bfc:	f107 021c 	add.w	r2, r7, #28
 8008c00:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c04:	2103      	movs	r1, #3
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fd fc22 	bl	8006450 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d009      	beq.n	8008c26 <f_mkfs+0xbe>
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c18:	d805      	bhi.n	8008c26 <f_mkfs+0xbe>
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	1e5a      	subs	r2, r3, #1
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	4013      	ands	r3, r2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <f_mkfs+0xc2>
 8008c26:	2301      	movs	r3, #1
 8008c28:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 8008c2a:	f107 0220 	add.w	r2, r7, #32
 8008c2e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c32:	2102      	movs	r1, #2
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fd fc0b 	bl	8006450 <disk_ioctl>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <f_mkfs+0xdc>
 8008c40:	2301      	movs	r3, #1
 8008c42:	e3dd      	b.n	8009400 <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 8008c44:	8c3b      	ldrh	r3, [r7, #32]
 8008c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c4a:	d80a      	bhi.n	8008c62 <f_mkfs+0xfa>
 8008c4c:	8c3b      	ldrh	r3, [r7, #32]
 8008c4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c52:	d306      	bcc.n	8008c62 <f_mkfs+0xfa>
 8008c54:	8c3b      	ldrh	r3, [r7, #32]
 8008c56:	461a      	mov	r2, r3
 8008c58:	8c3b      	ldrh	r3, [r7, #32]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <f_mkfs+0xfe>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e3cc      	b.n	8009400 <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	f003 030f 	and.w	r3, r3, #15
 8008c6e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	785b      	ldrb	r3, [r3, #1]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d006      	beq.n	8008c88 <f_mkfs+0x120>
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	785b      	ldrb	r3, [r3, #1]
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d802      	bhi.n	8008c88 <f_mkfs+0x120>
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	785b      	ldrb	r3, [r3, #1]
 8008c86:	e000      	b.n	8008c8a <f_mkfs+0x122>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d013      	beq.n	8008cbc <f_mkfs+0x154>
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c9c:	d80e      	bhi.n	8008cbc <f_mkfs+0x154>
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	8c3a      	ldrh	r2, [r7, #32]
 8008ca4:	0952      	lsrs	r2, r2, #5
 8008ca6:	b292      	uxth	r2, r2
 8008ca8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cac:	fb01 f202 	mul.w	r2, r1, r2
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d102      	bne.n	8008cbc <f_mkfs+0x154>
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	e001      	b.n	8008cc0 <f_mkfs+0x158>
 8008cbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cca:	d80a      	bhi.n	8008ce2 <f_mkfs+0x17a>
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	68da      	ldr	r2, [r3, #12]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d102      	bne.n	8008ce2 <f_mkfs+0x17a>
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	e000      	b.n	8008ce4 <f_mkfs+0x17c>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 8008ce6:	8c3b      	ldrh	r3, [r7, #32]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 8008cf2:	8c3b      	ldrh	r3, [r7, #32]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cfc:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8008cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <f_mkfs+0x1a0>
 8008d04:	2311      	movs	r3, #17
 8008d06:	e37b      	b.n	8009400 <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <f_mkfs+0x1ae>
 8008d12:	2311      	movs	r3, #17
 8008d14:	e374      	b.n	8009400 <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	61bb      	str	r3, [r7, #24]
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8008d1e:	f107 0218 	add.w	r2, r7, #24
 8008d22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d26:	2101      	movs	r1, #1
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fd fb91 	bl	8006450 <disk_ioctl>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <f_mkfs+0x1d0>
 8008d34:	2301      	movs	r3, #1
 8008d36:	e363      	b.n	8009400 <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 8008d38:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008d3c:	f003 0308 	and.w	r3, r3, #8
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d108      	bne.n	8008d56 <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	2b3f      	cmp	r3, #63	@ 0x3f
 8008d48:	d905      	bls.n	8008d56 <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 8008d4a:	233f      	movs	r3, #63	@ 0x3f
 8008d4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	2b7f      	cmp	r3, #127	@ 0x7f
 8008d5a:	d801      	bhi.n	8008d60 <f_mkfs+0x1f8>
 8008d5c:	230e      	movs	r3, #14
 8008d5e:	e34f      	b.n	8009400 <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 8008d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d62:	2b80      	cmp	r3, #128	@ 0x80
 8008d64:	d901      	bls.n	8008d6a <f_mkfs+0x202>
 8008d66:	2380      	movs	r3, #128	@ 0x80
 8008d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 8008d6a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d009      	beq.n	8008d8a <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 8008d76:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d103      	bne.n	8008d8a <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 8008d82:	2303      	movs	r3, #3
 8008d84:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8008d88:	e00a      	b.n	8008da0 <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8008d8a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <f_mkfs+0x232>
 8008d96:	2313      	movs	r3, #19
 8008d98:	e332      	b.n	8009400 <f_mkfs+0x898>
		fsty = FS_FAT16;
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 8008da6:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 8008daa:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 8008dac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dae:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 8008db0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d141      	bne.n	8008e3c <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 8008db8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d120      	bne.n	8008e00 <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	0c5b      	lsrs	r3, r3, #17
 8008dc2:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dc8:	2301      	movs	r3, #1
 8008dca:	663b      	str	r3, [r7, #96]	@ 0x60
 8008dcc:	e00a      	b.n	8008de4 <f_mkfs+0x27c>
 8008dce:	bf00      	nop
 8008dd0:	200058ec 	.word	0x200058ec
 8008dd4:	080147f8 	.word	0x080147f8
 8008dd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dda:	3301      	adds	r3, #1
 8008ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008de0:	005b      	lsls	r3, r3, #1
 8008de2:	663b      	str	r3, [r7, #96]	@ 0x60
 8008de4:	4a95      	ldr	r2, [pc, #596]	@ (800903c <f_mkfs+0x4d4>)
 8008de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d007      	beq.n	8008e00 <f_mkfs+0x298>
 8008df0:	4a92      	ldr	r2, [pc, #584]	@ (800903c <f_mkfs+0x4d4>)
 8008df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008df8:	461a      	mov	r2, r3
 8008dfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d2eb      	bcs.n	8008dd8 <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e08:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8008e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0c:	3302      	adds	r3, #2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	8c3a      	ldrh	r2, [r7, #32]
 8008e12:	4413      	add	r3, r2
 8008e14:	3b01      	subs	r3, #1
 8008e16:	8c3a      	ldrh	r2, [r7, #32]
 8008e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e1c:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 8008e1e:	2320      	movs	r3, #32
 8008e20:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 8008e22:	2300      	movs	r3, #0
 8008e24:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8008e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e28:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d903      	bls.n	8008e38 <f_mkfs+0x2d0>
 8008e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e32:	4a83      	ldr	r2, [pc, #524]	@ (8009040 <f_mkfs+0x4d8>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d94b      	bls.n	8008ed0 <f_mkfs+0x368>
 8008e38:	230e      	movs	r3, #14
 8008e3a:	e2e1      	b.n	8009400 <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 8008e3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d11b      	bne.n	8008e7a <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	0b1b      	lsrs	r3, r3, #12
 8008e46:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8008e48:	2300      	movs	r3, #0
 8008e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e50:	e005      	b.n	8008e5e <f_mkfs+0x2f6>
 8008e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e54:	3301      	adds	r3, #1
 8008e56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e5a:	005b      	lsls	r3, r3, #1
 8008e5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e5e:	4a79      	ldr	r2, [pc, #484]	@ (8009044 <f_mkfs+0x4dc>)
 8008e60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d007      	beq.n	8008e7a <f_mkfs+0x312>
 8008e6a:	4a76      	ldr	r2, [pc, #472]	@ (8009044 <f_mkfs+0x4dc>)
 8008e6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e72:	461a      	mov	r2, r3
 8008e74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d2eb      	bcs.n	8008e52 <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e82:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 8008e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e86:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d904      	bls.n	8008e98 <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8008e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e90:	3302      	adds	r3, #2
 8008e92:	005b      	lsls	r3, r3, #1
 8008e94:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e96:	e00a      	b.n	8008eae <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8008e9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	4413      	add	r3, r2
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	085b      	lsrs	r3, r3, #1
 8008eaa:	3303      	adds	r3, #3
 8008eac:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8008eae:	8c3b      	ldrh	r3, [r7, #32]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008eb4:	4413      	add	r3, r2
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	8c3a      	ldrh	r2, [r7, #32]
 8008eba:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ebe:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec6:	015b      	lsls	r3, r3, #5
 8008ec8:	8c3a      	ldrh	r2, [r7, #32]
 8008eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ece:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8008ed0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ed2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ed4:	4413      	add	r3, r2
 8008ed6:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 8008ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008eda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008edc:	fb03 f202 	mul.w	r2, r3, r2
 8008ee0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ee2:	4413      	add	r3, r2
 8008ee4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ee6:	4413      	add	r3, r2
 8008ee8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8008eea:	69fa      	ldr	r2, [r7, #28]
 8008eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eee:	4413      	add	r3, r2
 8008ef0:	1e5a      	subs	r2, r3, #1
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	425b      	negs	r3, r3
 8008ef6:	401a      	ands	r2, r3
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 8008efe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	d108      	bne.n	8008f18 <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 8008f06:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008f08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f0a:	4413      	add	r3, r2
 8008f0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8008f0e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f12:	4413      	add	r3, r2
 8008f14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f16:	e019      	b.n	8008f4c <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 8008f18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008f1c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f22:	fb01 f202 	mul.w	r2, r1, r2
 8008f26:	1a9b      	subs	r3, r3, r2
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d008      	beq.n	8008f3e <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 8008f2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f34:	3301      	adds	r3, #1
 8008f36:	677b      	str	r3, [r7, #116]	@ 0x74
 8008f38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 8008f3e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008f48:	4413      	add	r3, r2
 8008f4a:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8008f4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f4e:	011a      	lsls	r2, r3, #4
 8008f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f52:	441a      	add	r2, r3
 8008f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f56:	1ad2      	subs	r2, r2, r3
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d901      	bls.n	8008f62 <f_mkfs+0x3fa>
 8008f5e:	230e      	movs	r3, #14
 8008f60:	e24e      	b.n	8009400 <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 8008f62:	69ba      	ldr	r2, [r7, #24]
 8008f64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f66:	1ad2      	subs	r2, r2, r3
 8008f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f6c:	fb01 f303 	mul.w	r3, r1, r3
 8008f70:	1ad2      	subs	r2, r2, r3
 8008f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f74:	1ad2      	subs	r2, r2, r3
 8008f76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 8008f7e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	d10f      	bne.n	8008fa6 <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 8008f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f88:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d80a      	bhi.n	8008fa6 <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8008f90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d105      	bne.n	8008fa2 <f_mkfs+0x43a>
 8008f96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f98:	085b      	lsrs	r3, r3, #1
 8008f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d145      	bne.n	800902e <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8008fa2:	230e      	movs	r3, #14
 8008fa4:	e22c      	b.n	8009400 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 8008fa6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d134      	bne.n	8009018 <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8008fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d91f      	bls.n	8008ff8 <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 8008fb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d107      	bne.n	8008fce <f_mkfs+0x466>
 8008fbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fc0:	005b      	lsls	r3, r3, #1
 8008fc2:	2b40      	cmp	r3, #64	@ 0x40
 8008fc4:	d803      	bhi.n	8008fce <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 8008fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fcc:	e034      	b.n	8009038 <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 8008fce:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008fd2:	f003 0302 	and.w	r3, r3, #2
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8008fda:	2303      	movs	r3, #3
 8008fdc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8008fe0:	e02a      	b.n	8009038 <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d105      	bne.n	8008ff4 <f_mkfs+0x48c>
 8008fe8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fea:	005b      	lsls	r3, r3, #1
 8008fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ff0:	2b80      	cmp	r3, #128	@ 0x80
 8008ff2:	d91e      	bls.n	8009032 <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8008ff4:	230e      	movs	r3, #14
 8008ff6:	e203      	b.n	8009400 <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8008ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d80a      	bhi.n	8009018 <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009004:	2b00      	cmp	r3, #0
 8009006:	d105      	bne.n	8009014 <f_mkfs+0x4ac>
 8009008:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800900e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009010:	2b80      	cmp	r3, #128	@ 0x80
 8009012:	d910      	bls.n	8009036 <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8009014:	230e      	movs	r3, #14
 8009016:	e1f3      	b.n	8009400 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 8009018:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800901c:	2b01      	cmp	r3, #1
 800901e:	d113      	bne.n	8009048 <f_mkfs+0x4e0>
 8009020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009022:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009026:	4293      	cmp	r3, r2
 8009028:	d90e      	bls.n	8009048 <f_mkfs+0x4e0>
 800902a:	230e      	movs	r3, #14
 800902c:	e1e8      	b.n	8009400 <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800902e:	bf00      	nop
 8009030:	e6bc      	b.n	8008dac <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009032:	bf00      	nop
 8009034:	e6ba      	b.n	8008dac <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009036:	bf00      	nop
			pau = sz_au;
 8009038:	e6b8      	b.n	8008dac <f_mkfs+0x244>
 800903a:	bf00      	nop
 800903c:	08014808 	.word	0x08014808
 8009040:	0ffffff5 	.word	0x0ffffff5
 8009044:	08014818 	.word	0x08014818

			/* Ok, it is the valid cluster configuration */
			break;
 8009048:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800904a:	8c3b      	ldrh	r3, [r7, #32]
 800904c:	461a      	mov	r2, r3
 800904e:	2100      	movs	r1, #0
 8009050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009052:	f00a f86b 	bl	801312c <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8009056:	220b      	movs	r2, #11
 8009058:	49b1      	ldr	r1, [pc, #708]	@ (8009320 <f_mkfs+0x7b8>)
 800905a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800905c:	f00a f8ea 	bl	8013234 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8009060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009062:	330b      	adds	r3, #11
 8009064:	8c3a      	ldrh	r2, [r7, #32]
 8009066:	4611      	mov	r1, r2
 8009068:	4618      	mov	r0, r3
 800906a:	f7fd faaf 	bl	80065cc <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800906e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009070:	330d      	adds	r3, #13
 8009072:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009074:	b2d2      	uxtb	r2, r2
 8009076:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8009078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907a:	330e      	adds	r3, #14
 800907c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800907e:	b292      	uxth	r2, r2
 8009080:	4611      	mov	r1, r2
 8009082:	4618      	mov	r0, r3
 8009084:	f7fd faa2 	bl	80065cc <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8009088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908a:	3310      	adds	r3, #16
 800908c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800908e:	b2d2      	uxtb	r2, r2
 8009090:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 8009092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009094:	f103 0211 	add.w	r2, r3, #17
 8009098:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800909c:	2b03      	cmp	r3, #3
 800909e:	d002      	beq.n	80090a6 <f_mkfs+0x53e>
 80090a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	e000      	b.n	80090a8 <f_mkfs+0x540>
 80090a6:	2300      	movs	r3, #0
 80090a8:	4619      	mov	r1, r3
 80090aa:	4610      	mov	r0, r2
 80090ac:	f7fd fa8e 	bl	80065cc <st_word>
		if (sz_vol < 0x10000) {
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090b6:	d208      	bcs.n	80090ca <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	3313      	adds	r3, #19
 80090bc:	69ba      	ldr	r2, [r7, #24]
 80090be:	b292      	uxth	r2, r2
 80090c0:	4611      	mov	r1, r2
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fd fa82 	bl	80065cc <st_word>
 80090c8:	e006      	b.n	80090d8 <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 80090ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090cc:	3320      	adds	r3, #32
 80090ce:	69ba      	ldr	r2, [r7, #24]
 80090d0:	4611      	mov	r1, r2
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fd fa95 	bl	8006602 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80090d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090da:	3315      	adds	r3, #21
 80090dc:	22f8      	movs	r2, #248	@ 0xf8
 80090de:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80090e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e2:	3318      	adds	r3, #24
 80090e4:	213f      	movs	r1, #63	@ 0x3f
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fd fa70 	bl	80065cc <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80090ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ee:	331a      	adds	r3, #26
 80090f0:	21ff      	movs	r1, #255	@ 0xff
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fd fa6a 	bl	80065cc <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 80090f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fa:	331c      	adds	r3, #28
 80090fc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fd fa7f 	bl	8006602 <st_dword>
		if (fsty == FS_FAT32) {
 8009104:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009108:	2b03      	cmp	r3, #3
 800910a:	d12d      	bne.n	8009168 <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800910c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910e:	3343      	adds	r3, #67	@ 0x43
 8009110:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009112:	4618      	mov	r0, r3
 8009114:	f7fd fa75 	bl	8006602 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8009118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911a:	3324      	adds	r3, #36	@ 0x24
 800911c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800911e:	4618      	mov	r0, r3
 8009120:	f7fd fa6f 	bl	8006602 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8009124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009126:	332c      	adds	r3, #44	@ 0x2c
 8009128:	2102      	movs	r1, #2
 800912a:	4618      	mov	r0, r3
 800912c:	f7fd fa69 	bl	8006602 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8009130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009132:	3330      	adds	r3, #48	@ 0x30
 8009134:	2101      	movs	r1, #1
 8009136:	4618      	mov	r0, r3
 8009138:	f7fd fa48 	bl	80065cc <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800913c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913e:	3332      	adds	r3, #50	@ 0x32
 8009140:	2106      	movs	r1, #6
 8009142:	4618      	mov	r0, r3
 8009144:	f7fd fa42 	bl	80065cc <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8009148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914a:	3340      	adds	r3, #64	@ 0x40
 800914c:	2280      	movs	r2, #128	@ 0x80
 800914e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8009150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009152:	3342      	adds	r3, #66	@ 0x42
 8009154:	2229      	movs	r2, #41	@ 0x29
 8009156:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8009158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915a:	3347      	adds	r3, #71	@ 0x47
 800915c:	2213      	movs	r2, #19
 800915e:	4971      	ldr	r1, [pc, #452]	@ (8009324 <f_mkfs+0x7bc>)
 8009160:	4618      	mov	r0, r3
 8009162:	f00a f867 	bl	8013234 <memcpy>
 8009166:	e01c      	b.n	80091a2 <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	3327      	adds	r3, #39	@ 0x27
 800916c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800916e:	4618      	mov	r0, r3
 8009170:	f7fd fa47 	bl	8006602 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8009174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009176:	3316      	adds	r3, #22
 8009178:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800917a:	b292      	uxth	r2, r2
 800917c:	4611      	mov	r1, r2
 800917e:	4618      	mov	r0, r3
 8009180:	f7fd fa24 	bl	80065cc <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8009184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009186:	3324      	adds	r3, #36	@ 0x24
 8009188:	2280      	movs	r2, #128	@ 0x80
 800918a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800918c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918e:	3326      	adds	r3, #38	@ 0x26
 8009190:	2229      	movs	r2, #41	@ 0x29
 8009192:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8009194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009196:	332b      	adds	r3, #43	@ 0x2b
 8009198:	2213      	movs	r2, #19
 800919a:	4963      	ldr	r1, [pc, #396]	@ (8009328 <f_mkfs+0x7c0>)
 800919c:	4618      	mov	r0, r3
 800919e:	f00a f849 	bl	8013234 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80091a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80091a8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fd fa0d 	bl	80065cc <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 80091b2:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 80091b6:	2301      	movs	r3, #1
 80091b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80091ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80091bc:	f7fd f914 	bl	80063e8 <disk_write>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <f_mkfs+0x662>
 80091c6:	2301      	movs	r3, #1
 80091c8:	e11a      	b.n	8009400 <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 80091ca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	d140      	bne.n	8009254 <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80091d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091d4:	1d9a      	adds	r2, r3, #6
 80091d6:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 80091da:	2301      	movs	r3, #1
 80091dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80091de:	f7fd f903 	bl	80063e8 <disk_write>
			memset(buf, 0, ss);
 80091e2:	8c3b      	ldrh	r3, [r7, #32]
 80091e4:	461a      	mov	r2, r3
 80091e6:	2100      	movs	r1, #0
 80091e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091ea:	f009 ff9f 	bl	801312c <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80091ee:	494f      	ldr	r1, [pc, #316]	@ (800932c <f_mkfs+0x7c4>)
 80091f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091f2:	f7fd fa06 	bl	8006602 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80091f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80091fc:	494c      	ldr	r1, [pc, #304]	@ (8009330 <f_mkfs+0x7c8>)
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fd f9ff 	bl	8006602 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8009204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009206:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800920a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800920c:	3b01      	subs	r3, #1
 800920e:	4619      	mov	r1, r3
 8009210:	4610      	mov	r0, r2
 8009212:	f7fd f9f6 	bl	8006602 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8009216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009218:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800921c:	2102      	movs	r1, #2
 800921e:	4618      	mov	r0, r3
 8009220:	f7fd f9ef 	bl	8006602 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8009224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009226:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800922a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800922e:	4618      	mov	r0, r3
 8009230:	f7fd f9cc 	bl	80065cc <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8009234:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009236:	1dda      	adds	r2, r3, #7
 8009238:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800923c:	2301      	movs	r3, #1
 800923e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009240:	f7fd f8d2 	bl	80063e8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8009244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800924c:	2301      	movs	r3, #1
 800924e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009250:	f7fd f8ca 	bl	80063e8 <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 8009254:	8c3b      	ldrh	r3, [r7, #32]
 8009256:	461a      	mov	r2, r3
 8009258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800925a:	fb02 f303 	mul.w	r3, r2, r3
 800925e:	461a      	mov	r2, r3
 8009260:	2100      	movs	r1, #0
 8009262:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009264:	f009 ff62 	bl	801312c <memset>
		sect = b_fat;		/* FAT start sector */
 8009268:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800926a:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800926c:	2300      	movs	r3, #0
 800926e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009270:	e04b      	b.n	800930a <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 8009272:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009276:	2b03      	cmp	r3, #3
 8009278:	d113      	bne.n	80092a2 <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800927a:	f06f 0107 	mvn.w	r1, #7
 800927e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009280:	f7fd f9bf 	bl	8006602 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 8009284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009286:	3304      	adds	r3, #4
 8009288:	f04f 31ff 	mov.w	r1, #4294967295
 800928c:	4618      	mov	r0, r3
 800928e:	f7fd f9b8 	bl	8006602 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 8009292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009294:	3308      	adds	r3, #8
 8009296:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800929a:	4618      	mov	r0, r3
 800929c:	f7fd f9b1 	bl	8006602 <st_dword>
 80092a0:	e00b      	b.n	80092ba <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 80092a2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d101      	bne.n	80092ae <f_mkfs+0x746>
 80092aa:	4b22      	ldr	r3, [pc, #136]	@ (8009334 <f_mkfs+0x7cc>)
 80092ac:	e001      	b.n	80092b2 <f_mkfs+0x74a>
 80092ae:	f06f 0307 	mvn.w	r3, #7
 80092b2:	4619      	mov	r1, r3
 80092b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80092b6:	f7fd f9a4 	bl	8006602 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80092ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80092be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80092c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c2:	4293      	cmp	r3, r2
 80092c4:	bf28      	it	cs
 80092c6:	4613      	movcs	r3, r2
 80092c8:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80092ca:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 80092ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092d0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80092d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80092d4:	f7fd f888 	bl	80063e8 <disk_write>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <f_mkfs+0x77a>
 80092de:	2301      	movs	r3, #1
 80092e0:	e08e      	b.n	8009400 <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 80092e2:	8c3b      	ldrh	r3, [r7, #32]
 80092e4:	461a      	mov	r2, r3
 80092e6:	2100      	movs	r1, #0
 80092e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80092ea:	f009 ff1f 	bl	801312c <memset>
				sect += n; nsect -= n;
 80092ee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80092f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092f2:	4413      	add	r3, r2
 80092f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80092f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80092f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 80092fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1dc      	bne.n	80092be <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8009304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009306:	3301      	adds	r3, #1
 8009308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800930a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800930c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800930e:	429a      	cmp	r2, r3
 8009310:	d3af      	bcc.n	8009272 <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8009312:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009316:	2b03      	cmp	r3, #3
 8009318:	d10e      	bne.n	8009338 <f_mkfs+0x7d0>
 800931a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800931c:	e00d      	b.n	800933a <f_mkfs+0x7d2>
 800931e:	bf00      	nop
 8009320:	080146f0 	.word	0x080146f0
 8009324:	080146fc 	.word	0x080146fc
 8009328:	08014710 	.word	0x08014710
 800932c:	41615252 	.word	0x41615252
 8009330:	61417272 	.word	0x61417272
 8009334:	00fffff8 	.word	0x00fffff8
 8009338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800933a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800933c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800933e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009340:	4293      	cmp	r3, r2
 8009342:	bf28      	it	cs
 8009344:	4613      	movcs	r3, r2
 8009346:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8009348:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800934c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800934e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009350:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009352:	f7fd f849 	bl	80063e8 <disk_write>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <f_mkfs+0x7f8>
 800935c:	2301      	movs	r3, #1
 800935e:	e04f      	b.n	8009400 <f_mkfs+0x898>
			sect += n; nsect -= n;
 8009360:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009362:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009364:	4413      	add	r3, r2
 8009366:	673b      	str	r3, [r7, #112]	@ 0x70
 8009368:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800936a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 8009370:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e2      	bne.n	800933c <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 8009376:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800937a:	2b03      	cmp	r3, #3
 800937c:	d103      	bne.n	8009386 <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 800937e:	230c      	movs	r3, #12
 8009380:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8009384:	e012      	b.n	80093ac <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800938c:	d303      	bcc.n	8009396 <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 800938e:	2306      	movs	r3, #6
 8009390:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8009394:	e00a      	b.n	80093ac <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 8009396:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800939a:	2b02      	cmp	r3, #2
 800939c:	d103      	bne.n	80093a6 <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 800939e:	2304      	movs	r3, #4
 80093a0:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 80093a4:	e002      	b.n	80093ac <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 80093a6:	2301      	movs	r3, #1
 80093a8:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 80093ac:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80093b0:	f003 0308 	and.w	r3, r3, #8
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d116      	bne.n	80093e6 <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	613b      	str	r3, [r7, #16]
 80093bc:	2300      	movs	r3, #0
 80093be:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 80093c0:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 80093c4:	f107 0110 	add.w	r1, r7, #16
 80093c8:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 80093cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ce:	f7ff faa7 	bl	8008920 <create_partition>
 80093d2:	4603      	mov	r3, r0
 80093d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 80093d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <f_mkfs+0x87e>
 80093e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80093e4:	e00c      	b.n	8009400 <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80093e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80093ea:	2200      	movs	r2, #0
 80093ec:	2100      	movs	r1, #0
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fd f82e 	bl	8006450 <disk_ioctl>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <f_mkfs+0x896>
 80093fa:	2301      	movs	r3, #1
 80093fc:	e000      	b.n	8009400 <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3778      	adds	r7, #120	@ 0x78
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009408:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009440 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800940c:	f7fc ff58 	bl	80062c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009410:	480c      	ldr	r0, [pc, #48]	@ (8009444 <LoopForever+0x6>)
  ldr r1, =_edata
 8009412:	490d      	ldr	r1, [pc, #52]	@ (8009448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009414:	4a0d      	ldr	r2, [pc, #52]	@ (800944c <LoopForever+0xe>)
  movs r3, #0
 8009416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009418:	e002      	b.n	8009420 <LoopCopyDataInit>

0800941a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800941a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800941c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800941e:	3304      	adds	r3, #4

08009420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009424:	d3f9      	bcc.n	800941a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009426:	4a0a      	ldr	r2, [pc, #40]	@ (8009450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009428:	4c0a      	ldr	r4, [pc, #40]	@ (8009454 <LoopForever+0x16>)
  movs r3, #0
 800942a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800942c:	e001      	b.n	8009432 <LoopFillZerobss>

0800942e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800942e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009430:	3204      	adds	r2, #4

08009432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009434:	d3fb      	bcc.n	800942e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009436:	f009 fecf 	bl	80131d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800943a:	f7f9 ff5b 	bl	80032f4 <main>

0800943e <LoopForever>:

LoopForever:
    b LoopForever
 800943e:	e7fe      	b.n	800943e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009440:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8009444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009448:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 800944c:	08014988 	.word	0x08014988
  ldr r2, =_sbss
 8009450:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8009454:	20005a44 	.word	0x20005a44

08009458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009458:	e7fe      	b.n	8009458 <ADC1_2_IRQHandler>

0800945a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b082      	sub	sp, #8
 800945e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009464:	2003      	movs	r0, #3
 8009466:	f001 fd11 	bl	800ae8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800946a:	200f      	movs	r0, #15
 800946c:	f000 f80e 	bl	800948c <HAL_InitTick>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	71fb      	strb	r3, [r7, #7]
 800947a:	e001      	b.n	8009480 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800947c:	f7fc fa56 	bl	800592c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009480:	79fb      	ldrb	r3, [r7, #7]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8009498:	4b17      	ldr	r3, [pc, #92]	@ (80094f8 <HAL_InitTick+0x6c>)
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d023      	beq.n	80094e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80094a0:	4b16      	ldr	r3, [pc, #88]	@ (80094fc <HAL_InitTick+0x70>)
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	4b14      	ldr	r3, [pc, #80]	@ (80094f8 <HAL_InitTick+0x6c>)
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	4619      	mov	r1, r3
 80094aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80094ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80094b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094b6:	4618      	mov	r0, r3
 80094b8:	f001 fd21 	bl	800aefe <HAL_SYSTICK_Config>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10f      	bne.n	80094e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b0f      	cmp	r3, #15
 80094c6:	d809      	bhi.n	80094dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80094c8:	2200      	movs	r2, #0
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	f04f 30ff 	mov.w	r0, #4294967295
 80094d0:	f001 fce7 	bl	800aea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80094d4:	4a0a      	ldr	r2, [pc, #40]	@ (8009500 <HAL_InitTick+0x74>)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	e007      	b.n	80094ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	73fb      	strb	r3, [r7, #15]
 80094e0:	e004      	b.n	80094ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	73fb      	strb	r3, [r7, #15]
 80094e6:	e001      	b.n	80094ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20000178 	.word	0x20000178
 80094fc:	20000168 	.word	0x20000168
 8009500:	20000174 	.word	0x20000174

08009504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009504:	b480      	push	{r7}
 8009506:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009508:	4b06      	ldr	r3, [pc, #24]	@ (8009524 <HAL_IncTick+0x20>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	461a      	mov	r2, r3
 800950e:	4b06      	ldr	r3, [pc, #24]	@ (8009528 <HAL_IncTick+0x24>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4413      	add	r3, r2
 8009514:	4a04      	ldr	r2, [pc, #16]	@ (8009528 <HAL_IncTick+0x24>)
 8009516:	6013      	str	r3, [r2, #0]
}
 8009518:	bf00      	nop
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	20000178 	.word	0x20000178
 8009528:	200058f8 	.word	0x200058f8

0800952c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800952c:	b480      	push	{r7}
 800952e:	af00      	add	r7, sp, #0
  return uwTick;
 8009530:	4b03      	ldr	r3, [pc, #12]	@ (8009540 <HAL_GetTick+0x14>)
 8009532:	681b      	ldr	r3, [r3, #0]
}
 8009534:	4618      	mov	r0, r3
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	200058f8 	.word	0x200058f8

08009544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800954c:	f7ff ffee 	bl	800952c <HAL_GetTick>
 8009550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955c:	d005      	beq.n	800956a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800955e:	4b0a      	ldr	r3, [pc, #40]	@ (8009588 <HAL_Delay+0x44>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	4413      	add	r3, r2
 8009568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800956a:	bf00      	nop
 800956c:	f7ff ffde 	bl	800952c <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	429a      	cmp	r2, r3
 800957a:	d8f7      	bhi.n	800956c <HAL_Delay+0x28>
  {
  }
}
 800957c:	bf00      	nop
 800957e:	bf00      	nop
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20000178 	.word	0x20000178

0800958c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	431a      	orrs	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	609a      	str	r2, [r3, #8]
}
 80095a6:	bf00      	nop
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80095b2:	b480      	push	{r7}
 80095b4:	b083      	sub	sp, #12
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	431a      	orrs	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	609a      	str	r2, [r3, #8]
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3360      	adds	r3, #96	@ 0x60
 8009606:	461a      	mov	r2, r3
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	4b08      	ldr	r3, [pc, #32]	@ (8009638 <LL_ADC_SetOffset+0x44>)
 8009616:	4013      	ands	r3, r2
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	430a      	orrs	r2, r1
 8009622:	4313      	orrs	r3, r2
 8009624:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800962c:	bf00      	nop
 800962e:	371c      	adds	r7, #28
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	03fff000 	.word	0x03fff000

0800963c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3360      	adds	r3, #96	@ 0x60
 800964a:	461a      	mov	r2, r3
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4413      	add	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800965c:	4618      	mov	r0, r3
 800965e:	3714      	adds	r7, #20
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009668:	b480      	push	{r7}
 800966a:	b087      	sub	sp, #28
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	3360      	adds	r3, #96	@ 0x60
 8009678:	461a      	mov	r2, r3
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	431a      	orrs	r2, r3
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009692:	bf00      	nop
 8009694:	371c      	adds	r7, #28
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800969e:	b480      	push	{r7}
 80096a0:	b083      	sub	sp, #12
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d101      	bne.n	80096b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80096b2:	2301      	movs	r3, #1
 80096b4:	e000      	b.n	80096b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	3330      	adds	r3, #48	@ 0x30
 80096d4:	461a      	mov	r2, r3
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	0a1b      	lsrs	r3, r3, #8
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	f003 030c 	and.w	r3, r3, #12
 80096e0:	4413      	add	r3, r2
 80096e2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	f003 031f 	and.w	r3, r3, #31
 80096ee:	211f      	movs	r1, #31
 80096f0:	fa01 f303 	lsl.w	r3, r1, r3
 80096f4:	43db      	mvns	r3, r3
 80096f6:	401a      	ands	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	0e9b      	lsrs	r3, r3, #26
 80096fc:	f003 011f 	and.w	r1, r3, #31
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	f003 031f 	and.w	r3, r3, #31
 8009706:	fa01 f303 	lsl.w	r3, r1, r3
 800970a:	431a      	orrs	r2, r3
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009710:	bf00      	nop
 8009712:	371c      	adds	r7, #28
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	3314      	adds	r3, #20
 800972c:	461a      	mov	r2, r3
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	0e5b      	lsrs	r3, r3, #25
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	4413      	add	r3, r2
 800973a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	0d1b      	lsrs	r3, r3, #20
 8009744:	f003 031f 	and.w	r3, r3, #31
 8009748:	2107      	movs	r1, #7
 800974a:	fa01 f303 	lsl.w	r3, r1, r3
 800974e:	43db      	mvns	r3, r3
 8009750:	401a      	ands	r2, r3
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	0d1b      	lsrs	r3, r3, #20
 8009756:	f003 031f 	and.w	r3, r3, #31
 800975a:	6879      	ldr	r1, [r7, #4]
 800975c:	fa01 f303 	lsl.w	r3, r1, r3
 8009760:	431a      	orrs	r2, r3
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009766:	bf00      	nop
 8009768:	371c      	adds	r7, #28
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
	...

08009774 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800978c:	43db      	mvns	r3, r3
 800978e:	401a      	ands	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f003 0318 	and.w	r3, r3, #24
 8009796:	4908      	ldr	r1, [pc, #32]	@ (80097b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009798:	40d9      	lsrs	r1, r3
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	400b      	ands	r3, r1
 800979e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097a2:	431a      	orrs	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80097aa:	bf00      	nop
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	0007ffff 	.word	0x0007ffff

080097bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	f003 031f 	and.w	r3, r3, #31
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80097e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	6093      	str	r3, [r2, #8]
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800980c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009810:	d101      	bne.n	8009816 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009812:	2301      	movs	r3, #1
 8009814:	e000      	b.n	8009818 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8009834:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009838:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800985c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009860:	d101      	bne.n	8009866 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009862:	2301      	movs	r3, #1
 8009864:	e000      	b.n	8009868 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009884:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009888:	f043 0201 	orr.w	r2, r3, #1
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80098b0:	f043 0202 	orr.w	r2, r3, #2
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d101      	bne.n	80098dc <LL_ADC_IsEnabled+0x18>
 80098d8:	2301      	movs	r3, #1
 80098da:	e000      	b.n	80098de <LL_ADC_IsEnabled+0x1a>
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b083      	sub	sp, #12
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	f003 0302 	and.w	r3, r3, #2
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d101      	bne.n	8009902 <LL_ADC_IsDisableOngoing+0x18>
 80098fe:	2301      	movs	r3, #1
 8009900:	e000      	b.n	8009904 <LL_ADC_IsDisableOngoing+0x1a>
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009920:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009924:	f043 0204 	orr.w	r2, r3, #4
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009948:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800994c:	f043 0210 	orr.w	r2, r3, #16
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	f003 0304 	and.w	r3, r3, #4
 8009970:	2b04      	cmp	r3, #4
 8009972:	d101      	bne.n	8009978 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009974:	2301      	movs	r3, #1
 8009976:	e000      	b.n	800997a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8009986:	b480      	push	{r7}
 8009988:	b083      	sub	sp, #12
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009996:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800999a:	f043 0220 	orr.w	r2, r3, #32
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80099a2:	bf00      	nop
 80099a4:	370c      	adds	r7, #12
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b083      	sub	sp, #12
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f003 0308 	and.w	r3, r3, #8
 80099be:	2b08      	cmp	r3, #8
 80099c0:	d101      	bne.n	80099c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80099c2:	2301      	movs	r3, #1
 80099c4:	e000      	b.n	80099c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80099d4:	b590      	push	{r4, r7, lr}
 80099d6:	b089      	sub	sp, #36	@ 0x24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80099e0:	2300      	movs	r3, #0
 80099e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d101      	bne.n	80099ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e130      	b.n	8009c50 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d109      	bne.n	8009a10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7fb ffb9 	bl	8005974 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7ff fef1 	bl	80097fc <LL_ADC_IsDeepPowerDownEnabled>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d004      	beq.n	8009a2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7ff fed7 	bl	80097d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7ff ff0c 	bl	800984c <LL_ADC_IsInternalRegulatorEnabled>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d115      	bne.n	8009a66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7ff fef0 	bl	8009824 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009a44:	4b84      	ldr	r3, [pc, #528]	@ (8009c58 <HAL_ADC_Init+0x284>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	099b      	lsrs	r3, r3, #6
 8009a4a:	4a84      	ldr	r2, [pc, #528]	@ (8009c5c <HAL_ADC_Init+0x288>)
 8009a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a50:	099b      	lsrs	r3, r3, #6
 8009a52:	3301      	adds	r3, #1
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009a58:	e002      	b.n	8009a60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1f9      	bne.n	8009a5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff feee 	bl	800984c <LL_ADC_IsInternalRegulatorEnabled>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10d      	bne.n	8009a92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a7a:	f043 0210 	orr.w	r2, r3, #16
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a86:	f043 0201 	orr.w	r2, r3, #1
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7ff ff62 	bl	8009960 <LL_ADC_REG_IsConversionOngoing>
 8009a9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aa2:	f003 0310 	and.w	r3, r3, #16
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f040 80c9 	bne.w	8009c3e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f040 80c5 	bne.w	8009c3e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ab8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009abc:	f043 0202 	orr.w	r2, r3, #2
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7ff fefb 	bl	80098c4 <LL_ADC_IsEnabled>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d115      	bne.n	8009b00 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009ad4:	4862      	ldr	r0, [pc, #392]	@ (8009c60 <HAL_ADC_Init+0x28c>)
 8009ad6:	f7ff fef5 	bl	80098c4 <LL_ADC_IsEnabled>
 8009ada:	4604      	mov	r4, r0
 8009adc:	4861      	ldr	r0, [pc, #388]	@ (8009c64 <HAL_ADC_Init+0x290>)
 8009ade:	f7ff fef1 	bl	80098c4 <LL_ADC_IsEnabled>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	431c      	orrs	r4, r3
 8009ae6:	4860      	ldr	r0, [pc, #384]	@ (8009c68 <HAL_ADC_Init+0x294>)
 8009ae8:	f7ff feec 	bl	80098c4 <LL_ADC_IsEnabled>
 8009aec:	4603      	mov	r3, r0
 8009aee:	4323      	orrs	r3, r4
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d105      	bne.n	8009b00 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	4619      	mov	r1, r3
 8009afa:	485c      	ldr	r0, [pc, #368]	@ (8009c6c <HAL_ADC_Init+0x298>)
 8009afc:	f7ff fd46 	bl	800958c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	7e5b      	ldrb	r3, [r3, #25]
 8009b04:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009b0a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8009b10:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8009b16:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b1e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009b20:	4313      	orrs	r3, r2
 8009b22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d106      	bne.n	8009b3c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b32:	3b01      	subs	r3, #1
 8009b34:	045b      	lsls	r3, r3, #17
 8009b36:	69ba      	ldr	r2, [r7, #24]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d009      	beq.n	8009b58 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b48:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b50:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68da      	ldr	r2, [r3, #12]
 8009b5e:	4b44      	ldr	r3, [pc, #272]	@ (8009c70 <HAL_ADC_Init+0x29c>)
 8009b60:	4013      	ands	r3, r2
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	6812      	ldr	r2, [r2, #0]
 8009b66:	69b9      	ldr	r1, [r7, #24]
 8009b68:	430b      	orrs	r3, r1
 8009b6a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7ff ff1c 	bl	80099ae <LL_ADC_INJ_IsConversionOngoing>
 8009b76:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d13d      	bne.n	8009bfa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d13a      	bne.n	8009bfa <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009b88:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009b90:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009b92:	4313      	orrs	r3, r2
 8009b94:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ba0:	f023 0302 	bic.w	r3, r3, #2
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	6812      	ldr	r2, [r2, #0]
 8009ba8:	69b9      	ldr	r1, [r7, #24]
 8009baa:	430b      	orrs	r3, r1
 8009bac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d118      	bne.n	8009bea <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009bc2:	f023 0304 	bic.w	r3, r3, #4
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009bce:	4311      	orrs	r1, r2
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009bd4:	4311      	orrs	r1, r2
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009bda:	430a      	orrs	r2, r1
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f042 0201 	orr.w	r2, r2, #1
 8009be6:	611a      	str	r2, [r3, #16]
 8009be8:	e007      	b.n	8009bfa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	691a      	ldr	r2, [r3, #16]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f022 0201 	bic.w	r2, r2, #1
 8009bf8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d10c      	bne.n	8009c1c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c08:	f023 010f 	bic.w	r1, r3, #15
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	69db      	ldr	r3, [r3, #28]
 8009c10:	1e5a      	subs	r2, r3, #1
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	430a      	orrs	r2, r1
 8009c18:	631a      	str	r2, [r3, #48]	@ 0x30
 8009c1a:	e007      	b.n	8009c2c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f022 020f 	bic.w	r2, r2, #15
 8009c2a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c30:	f023 0303 	bic.w	r3, r3, #3
 8009c34:	f043 0201 	orr.w	r2, r3, #1
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8009c3c:	e007      	b.n	8009c4e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c42:	f043 0210 	orr.w	r2, r3, #16
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009c4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3724      	adds	r7, #36	@ 0x24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd90      	pop	{r4, r7, pc}
 8009c58:	20000168 	.word	0x20000168
 8009c5c:	053e2d63 	.word	0x053e2d63
 8009c60:	50040000 	.word	0x50040000
 8009c64:	50040100 	.word	0x50040100
 8009c68:	50040200 	.word	0x50040200
 8009c6c:	50040300 	.word	0x50040300
 8009c70:	fff0c007 	.word	0xfff0c007

08009c74 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009c80:	4853      	ldr	r0, [pc, #332]	@ (8009dd0 <HAL_ADC_Start_DMA+0x15c>)
 8009c82:	f7ff fd9b 	bl	80097bc <LL_ADC_GetMultimode>
 8009c86:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7ff fe67 	bl	8009960 <LL_ADC_REG_IsConversionOngoing>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f040 8093 	bne.w	8009dc0 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d101      	bne.n	8009ca8 <HAL_ADC_Start_DMA+0x34>
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	e08e      	b.n	8009dc6 <HAL_ADC_Start_DMA+0x152>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a47      	ldr	r2, [pc, #284]	@ (8009dd4 <HAL_ADC_Start_DMA+0x160>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d008      	beq.n	8009ccc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d005      	beq.n	8009ccc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	2b05      	cmp	r3, #5
 8009cc4:	d002      	beq.n	8009ccc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	2b09      	cmp	r3, #9
 8009cca:	d172      	bne.n	8009db2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f000 fda7 	bl	800a820 <ADC_Enable>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d165      	bne.n	8009da8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ce0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009ce4:	f023 0301 	bic.w	r3, r3, #1
 8009ce8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a38      	ldr	r2, [pc, #224]	@ (8009dd8 <HAL_ADC_Start_DMA+0x164>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d002      	beq.n	8009d00 <HAL_ADC_Start_DMA+0x8c>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	e000      	b.n	8009d02 <HAL_ADC_Start_DMA+0x8e>
 8009d00:	4b36      	ldr	r3, [pc, #216]	@ (8009ddc <HAL_ADC_Start_DMA+0x168>)
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	6812      	ldr	r2, [r2, #0]
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d002      	beq.n	8009d10 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d105      	bne.n	8009d1c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d006      	beq.n	8009d36 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d2c:	f023 0206 	bic.w	r2, r3, #6
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	659a      	str	r2, [r3, #88]	@ 0x58
 8009d34:	e002      	b.n	8009d3c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d40:	4a27      	ldr	r2, [pc, #156]	@ (8009de0 <HAL_ADC_Start_DMA+0x16c>)
 8009d42:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d48:	4a26      	ldr	r2, [pc, #152]	@ (8009de4 <HAL_ADC_Start_DMA+0x170>)
 8009d4a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d50:	4a25      	ldr	r2, [pc, #148]	@ (8009de8 <HAL_ADC_Start_DMA+0x174>)
 8009d52:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	221c      	movs	r2, #28
 8009d5a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685a      	ldr	r2, [r3, #4]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f042 0210 	orr.w	r2, r2, #16
 8009d72:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68da      	ldr	r2, [r3, #12]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f042 0201 	orr.w	r2, r2, #1
 8009d82:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3340      	adds	r3, #64	@ 0x40
 8009d8e:	4619      	mov	r1, r3
 8009d90:	68ba      	ldr	r2, [r7, #8]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f001 fa6a 	bl	800b26c <HAL_DMA_Start_IT>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7ff fdb5 	bl	8009910 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009da6:	e00d      	b.n	8009dc4 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8009db0:	e008      	b.n	8009dc4 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8009dbe:	e001      	b.n	8009dc4 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3718      	adds	r7, #24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	50040300 	.word	0x50040300
 8009dd4:	50040200 	.word	0x50040200
 8009dd8:	50040100 	.word	0x50040100
 8009ddc:	50040000 	.word	0x50040000
 8009de0:	0800a9eb 	.word	0x0800a9eb
 8009de4:	0800aac3 	.word	0x0800aac3
 8009de8:	0800aadf 	.word	0x0800aadf

08009dec <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d101      	bne.n	8009e02 <HAL_ADC_Stop_DMA+0x16>
 8009dfe:	2302      	movs	r3, #2
 8009e00:	e051      	b.n	8009ea6 <HAL_ADC_Stop_DMA+0xba>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8009e0a:	2103      	movs	r1, #3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fc4b 	bl	800a6a8 <ADC_ConversionStop>
 8009e12:	4603      	mov	r3, r0
 8009e14:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d13f      	bne.n	8009e9c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68da      	ldr	r2, [r3, #12]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f022 0201 	bic.w	r2, r2, #1
 8009e2a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e30:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d10f      	bne.n	8009e5a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f001 fa74 	bl	800b32c <HAL_DMA_Abort>
 8009e44:	4603      	mov	r3, r0
 8009e46:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8009e48:	7bfb      	ldrb	r3, [r7, #15]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d005      	beq.n	8009e5a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f022 0210 	bic.w	r2, r2, #16
 8009e68:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d105      	bne.n	8009e7c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fd5b 	bl	800a92c <ADC_Disable>
 8009e76:	4603      	mov	r3, r0
 8009e78:	73fb      	strb	r3, [r7, #15]
 8009e7a:	e002      	b.n	8009e82 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fd55 	bl	800a92c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d109      	bne.n	8009e9c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e8c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8009e90:	f023 0301 	bic.w	r3, r3, #1
 8009e94:	f043 0201 	orr.w	r2, r3, #1
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b083      	sub	sp, #12
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009eb6:	bf00      	nop
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
	...

08009ec4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b0b6      	sub	sp, #216	@ 0xd8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d101      	bne.n	8009ee6 <HAL_ADC_ConfigChannel+0x22>
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	e3c9      	b.n	800a67a <HAL_ADC_ConfigChannel+0x7b6>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7ff fd34 	bl	8009960 <LL_ADC_REG_IsConversionOngoing>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f040 83aa 	bne.w	800a654 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	2b05      	cmp	r3, #5
 8009f0e:	d824      	bhi.n	8009f5a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	3b02      	subs	r3, #2
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d81b      	bhi.n	8009f52 <HAL_ADC_ConfigChannel+0x8e>
 8009f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f20 <HAL_ADC_ConfigChannel+0x5c>)
 8009f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f20:	08009f31 	.word	0x08009f31
 8009f24:	08009f39 	.word	0x08009f39
 8009f28:	08009f41 	.word	0x08009f41
 8009f2c:	08009f49 	.word	0x08009f49
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8009f30:	230c      	movs	r3, #12
 8009f32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009f36:	e010      	b.n	8009f5a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8009f38:	2312      	movs	r3, #18
 8009f3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009f3e:	e00c      	b.n	8009f5a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8009f40:	2318      	movs	r3, #24
 8009f42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009f46:	e008      	b.n	8009f5a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8009f48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009f50:	e003      	b.n	8009f5a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8009f52:	2306      	movs	r3, #6
 8009f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009f58:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6818      	ldr	r0, [r3, #0]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	461a      	mov	r2, r3
 8009f64:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8009f68:	f7ff fbac 	bl	80096c4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7ff fcf5 	bl	8009960 <LL_ADC_REG_IsConversionOngoing>
 8009f76:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7ff fd15 	bl	80099ae <LL_ADC_INJ_IsConversionOngoing>
 8009f84:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f040 81a4 	bne.w	800a2da <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f040 819f 	bne.w	800a2da <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6818      	ldr	r0, [r3, #0]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	6819      	ldr	r1, [r3, #0]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	f7ff fbb7 	bl	800971c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	695a      	ldr	r2, [r3, #20]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	08db      	lsrs	r3, r3, #3
 8009fba:	f003 0303 	and.w	r3, r3, #3
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	2b04      	cmp	r3, #4
 8009fce:	d00a      	beq.n	8009fe6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6818      	ldr	r0, [r3, #0]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	6919      	ldr	r1, [r3, #16]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009fe0:	f7ff fb08 	bl	80095f4 <LL_ADC_SetOffset>
 8009fe4:	e179      	b.n	800a2da <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2100      	movs	r1, #0
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7ff fb25 	bl	800963c <LL_ADC_GetOffsetChannel>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10a      	bne.n	800a012 <HAL_ADC_ConfigChannel+0x14e>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2100      	movs	r1, #0
 800a002:	4618      	mov	r0, r3
 800a004:	f7ff fb1a 	bl	800963c <LL_ADC_GetOffsetChannel>
 800a008:	4603      	mov	r3, r0
 800a00a:	0e9b      	lsrs	r3, r3, #26
 800a00c:	f003 021f 	and.w	r2, r3, #31
 800a010:	e01e      	b.n	800a050 <HAL_ADC_ConfigChannel+0x18c>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2100      	movs	r1, #0
 800a018:	4618      	mov	r0, r3
 800a01a:	f7ff fb0f 	bl	800963c <LL_ADC_GetOffsetChannel>
 800a01e:	4603      	mov	r3, r0
 800a020:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a024:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a028:	fa93 f3a3 	rbit	r3, r3
 800a02c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a030:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a038:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800a040:	2320      	movs	r3, #32
 800a042:	e004      	b.n	800a04e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800a044:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a048:	fab3 f383 	clz	r3, r3
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d105      	bne.n	800a068 <HAL_ADC_ConfigChannel+0x1a4>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	0e9b      	lsrs	r3, r3, #26
 800a062:	f003 031f 	and.w	r3, r3, #31
 800a066:	e018      	b.n	800a09a <HAL_ADC_ConfigChannel+0x1d6>
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a074:	fa93 f3a3 	rbit	r3, r3
 800a078:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800a07c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800a084:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d101      	bne.n	800a090 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800a08c:	2320      	movs	r3, #32
 800a08e:	e004      	b.n	800a09a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800a090:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a094:	fab3 f383 	clz	r3, r3
 800a098:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d106      	bne.n	800a0ac <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff fade 	bl	8009668 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2101      	movs	r1, #1
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7ff fac2 	bl	800963c <LL_ADC_GetOffsetChannel>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10a      	bne.n	800a0d8 <HAL_ADC_ConfigChannel+0x214>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2101      	movs	r1, #1
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7ff fab7 	bl	800963c <LL_ADC_GetOffsetChannel>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	0e9b      	lsrs	r3, r3, #26
 800a0d2:	f003 021f 	and.w	r2, r3, #31
 800a0d6:	e01e      	b.n	800a116 <HAL_ADC_ConfigChannel+0x252>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2101      	movs	r1, #1
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7ff faac 	bl	800963c <LL_ADC_GetOffsetChannel>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a0ee:	fa93 f3a3 	rbit	r3, r3
 800a0f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800a0f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a0fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800a0fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a102:	2b00      	cmp	r3, #0
 800a104:	d101      	bne.n	800a10a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800a106:	2320      	movs	r3, #32
 800a108:	e004      	b.n	800a114 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800a10a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a10e:	fab3 f383 	clz	r3, r3
 800a112:	b2db      	uxtb	r3, r3
 800a114:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d105      	bne.n	800a12e <HAL_ADC_ConfigChannel+0x26a>
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	0e9b      	lsrs	r3, r3, #26
 800a128:	f003 031f 	and.w	r3, r3, #31
 800a12c:	e018      	b.n	800a160 <HAL_ADC_ConfigChannel+0x29c>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a136:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a13a:	fa93 f3a3 	rbit	r3, r3
 800a13e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800a142:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a146:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800a14a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a152:	2320      	movs	r3, #32
 800a154:	e004      	b.n	800a160 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800a156:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a15a:	fab3 f383 	clz	r3, r3
 800a15e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a160:	429a      	cmp	r2, r3
 800a162:	d106      	bne.n	800a172 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2200      	movs	r2, #0
 800a16a:	2101      	movs	r1, #1
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7ff fa7b 	bl	8009668 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2102      	movs	r1, #2
 800a178:	4618      	mov	r0, r3
 800a17a:	f7ff fa5f 	bl	800963c <LL_ADC_GetOffsetChannel>
 800a17e:	4603      	mov	r3, r0
 800a180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10a      	bne.n	800a19e <HAL_ADC_ConfigChannel+0x2da>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2102      	movs	r1, #2
 800a18e:	4618      	mov	r0, r3
 800a190:	f7ff fa54 	bl	800963c <LL_ADC_GetOffsetChannel>
 800a194:	4603      	mov	r3, r0
 800a196:	0e9b      	lsrs	r3, r3, #26
 800a198:	f003 021f 	and.w	r2, r3, #31
 800a19c:	e01e      	b.n	800a1dc <HAL_ADC_ConfigChannel+0x318>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2102      	movs	r1, #2
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7ff fa49 	bl	800963c <LL_ADC_GetOffsetChannel>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a1b4:	fa93 f3a3 	rbit	r3, r3
 800a1b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800a1bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a1c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800a1c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d101      	bne.n	800a1d0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800a1cc:	2320      	movs	r3, #32
 800a1ce:	e004      	b.n	800a1da <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800a1d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1d4:	fab3 f383 	clz	r3, r3
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d105      	bne.n	800a1f4 <HAL_ADC_ConfigChannel+0x330>
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	0e9b      	lsrs	r3, r3, #26
 800a1ee:	f003 031f 	and.w	r3, r3, #31
 800a1f2:	e014      	b.n	800a21e <HAL_ADC_ConfigChannel+0x35a>
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a1fc:	fa93 f3a3 	rbit	r3, r3
 800a200:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800a202:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800a208:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800a210:	2320      	movs	r3, #32
 800a212:	e004      	b.n	800a21e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800a214:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a218:	fab3 f383 	clz	r3, r3
 800a21c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a21e:	429a      	cmp	r2, r3
 800a220:	d106      	bne.n	800a230 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2200      	movs	r2, #0
 800a228:	2102      	movs	r1, #2
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7ff fa1c 	bl	8009668 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2103      	movs	r1, #3
 800a236:	4618      	mov	r0, r3
 800a238:	f7ff fa00 	bl	800963c <LL_ADC_GetOffsetChannel>
 800a23c:	4603      	mov	r3, r0
 800a23e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10a      	bne.n	800a25c <HAL_ADC_ConfigChannel+0x398>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2103      	movs	r1, #3
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7ff f9f5 	bl	800963c <LL_ADC_GetOffsetChannel>
 800a252:	4603      	mov	r3, r0
 800a254:	0e9b      	lsrs	r3, r3, #26
 800a256:	f003 021f 	and.w	r2, r3, #31
 800a25a:	e017      	b.n	800a28c <HAL_ADC_ConfigChannel+0x3c8>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2103      	movs	r1, #3
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff f9ea 	bl	800963c <LL_ADC_GetOffsetChannel>
 800a268:	4603      	mov	r3, r0
 800a26a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a26c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a26e:	fa93 f3a3 	rbit	r3, r3
 800a272:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800a274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a276:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800a278:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800a27e:	2320      	movs	r3, #32
 800a280:	e003      	b.n	800a28a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800a282:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a284:	fab3 f383 	clz	r3, r3
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a294:	2b00      	cmp	r3, #0
 800a296:	d105      	bne.n	800a2a4 <HAL_ADC_ConfigChannel+0x3e0>
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	0e9b      	lsrs	r3, r3, #26
 800a29e:	f003 031f 	and.w	r3, r3, #31
 800a2a2:	e011      	b.n	800a2c8 <HAL_ADC_ConfigChannel+0x404>
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a2ac:	fa93 f3a3 	rbit	r3, r3
 800a2b0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800a2b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a2b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800a2b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800a2bc:	2320      	movs	r3, #32
 800a2be:	e003      	b.n	800a2c8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800a2c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a2c2:	fab3 f383 	clz	r3, r3
 800a2c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d106      	bne.n	800a2da <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	2103      	movs	r1, #3
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7ff f9c7 	bl	8009668 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7ff faf0 	bl	80098c4 <LL_ADC_IsEnabled>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f040 8140 	bne.w	800a56c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6818      	ldr	r0, [r3, #0]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	6819      	ldr	r1, [r3, #0]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	f7ff fa3b 	bl	8009774 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	4a8f      	ldr	r2, [pc, #572]	@ (800a540 <HAL_ADC_ConfigChannel+0x67c>)
 800a304:	4293      	cmp	r3, r2
 800a306:	f040 8131 	bne.w	800a56c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10b      	bne.n	800a332 <HAL_ADC_ConfigChannel+0x46e>
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	0e9b      	lsrs	r3, r3, #26
 800a320:	3301      	adds	r3, #1
 800a322:	f003 031f 	and.w	r3, r3, #31
 800a326:	2b09      	cmp	r3, #9
 800a328:	bf94      	ite	ls
 800a32a:	2301      	movls	r3, #1
 800a32c:	2300      	movhi	r3, #0
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	e019      	b.n	800a366 <HAL_ADC_ConfigChannel+0x4a2>
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a338:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a33a:	fa93 f3a3 	rbit	r3, r3
 800a33e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800a340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a342:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800a344:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d101      	bne.n	800a34e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800a34a:	2320      	movs	r3, #32
 800a34c:	e003      	b.n	800a356 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800a34e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a350:	fab3 f383 	clz	r3, r3
 800a354:	b2db      	uxtb	r3, r3
 800a356:	3301      	adds	r3, #1
 800a358:	f003 031f 	and.w	r3, r3, #31
 800a35c:	2b09      	cmp	r3, #9
 800a35e:	bf94      	ite	ls
 800a360:	2301      	movls	r3, #1
 800a362:	2300      	movhi	r3, #0
 800a364:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a366:	2b00      	cmp	r3, #0
 800a368:	d079      	beq.n	800a45e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a372:	2b00      	cmp	r3, #0
 800a374:	d107      	bne.n	800a386 <HAL_ADC_ConfigChannel+0x4c2>
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	0e9b      	lsrs	r3, r3, #26
 800a37c:	3301      	adds	r3, #1
 800a37e:	069b      	lsls	r3, r3, #26
 800a380:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a384:	e015      	b.n	800a3b2 <HAL_ADC_ConfigChannel+0x4ee>
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a38c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a38e:	fa93 f3a3 	rbit	r3, r3
 800a392:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800a394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a396:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800a398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800a39e:	2320      	movs	r3, #32
 800a3a0:	e003      	b.n	800a3aa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800a3a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3a4:	fab3 f383 	clz	r3, r3
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	069b      	lsls	r3, r3, #26
 800a3ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d109      	bne.n	800a3d2 <HAL_ADC_ConfigChannel+0x50e>
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	0e9b      	lsrs	r3, r3, #26
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	f003 031f 	and.w	r3, r3, #31
 800a3ca:	2101      	movs	r1, #1
 800a3cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a3d0:	e017      	b.n	800a402 <HAL_ADC_ConfigChannel+0x53e>
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3da:	fa93 f3a3 	rbit	r3, r3
 800a3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800a3e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3e2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800a3e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d101      	bne.n	800a3ee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800a3ea:	2320      	movs	r3, #32
 800a3ec:	e003      	b.n	800a3f6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800a3ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3f0:	fab3 f383 	clz	r3, r3
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	f003 031f 	and.w	r3, r3, #31
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a402:	ea42 0103 	orr.w	r1, r2, r3
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10a      	bne.n	800a428 <HAL_ADC_ConfigChannel+0x564>
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	0e9b      	lsrs	r3, r3, #26
 800a418:	3301      	adds	r3, #1
 800a41a:	f003 021f 	and.w	r2, r3, #31
 800a41e:	4613      	mov	r3, r2
 800a420:	005b      	lsls	r3, r3, #1
 800a422:	4413      	add	r3, r2
 800a424:	051b      	lsls	r3, r3, #20
 800a426:	e018      	b.n	800a45a <HAL_ADC_ConfigChannel+0x596>
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a42e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a430:	fa93 f3a3 	rbit	r3, r3
 800a434:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800a436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a438:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800a43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d101      	bne.n	800a444 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800a440:	2320      	movs	r3, #32
 800a442:	e003      	b.n	800a44c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800a444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a446:	fab3 f383 	clz	r3, r3
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	3301      	adds	r3, #1
 800a44e:	f003 021f 	and.w	r2, r3, #31
 800a452:	4613      	mov	r3, r2
 800a454:	005b      	lsls	r3, r3, #1
 800a456:	4413      	add	r3, r2
 800a458:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a45a:	430b      	orrs	r3, r1
 800a45c:	e081      	b.n	800a562 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a466:	2b00      	cmp	r3, #0
 800a468:	d107      	bne.n	800a47a <HAL_ADC_ConfigChannel+0x5b6>
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	0e9b      	lsrs	r3, r3, #26
 800a470:	3301      	adds	r3, #1
 800a472:	069b      	lsls	r3, r3, #26
 800a474:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a478:	e015      	b.n	800a4a6 <HAL_ADC_ConfigChannel+0x5e2>
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a482:	fa93 f3a3 	rbit	r3, r3
 800a486:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800a488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800a48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d101      	bne.n	800a496 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800a492:	2320      	movs	r3, #32
 800a494:	e003      	b.n	800a49e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800a496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a498:	fab3 f383 	clz	r3, r3
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	3301      	adds	r3, #1
 800a4a0:	069b      	lsls	r3, r3, #26
 800a4a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d109      	bne.n	800a4c6 <HAL_ADC_ConfigChannel+0x602>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	0e9b      	lsrs	r3, r3, #26
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	f003 031f 	and.w	r3, r3, #31
 800a4be:	2101      	movs	r1, #1
 800a4c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a4c4:	e017      	b.n	800a4f6 <HAL_ADC_ConfigChannel+0x632>
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	fa93 f3a3 	rbit	r3, r3
 800a4d2:	61bb      	str	r3, [r7, #24]
  return result;
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d101      	bne.n	800a4e2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800a4de:	2320      	movs	r3, #32
 800a4e0:	e003      	b.n	800a4ea <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800a4e2:	6a3b      	ldr	r3, [r7, #32]
 800a4e4:	fab3 f383 	clz	r3, r3
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	f003 031f 	and.w	r3, r3, #31
 800a4f0:	2101      	movs	r1, #1
 800a4f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4f6:	ea42 0103 	orr.w	r1, r2, r3
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10d      	bne.n	800a522 <HAL_ADC_ConfigChannel+0x65e>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	0e9b      	lsrs	r3, r3, #26
 800a50c:	3301      	adds	r3, #1
 800a50e:	f003 021f 	and.w	r2, r3, #31
 800a512:	4613      	mov	r3, r2
 800a514:	005b      	lsls	r3, r3, #1
 800a516:	4413      	add	r3, r2
 800a518:	3b1e      	subs	r3, #30
 800a51a:	051b      	lsls	r3, r3, #20
 800a51c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a520:	e01e      	b.n	800a560 <HAL_ADC_ConfigChannel+0x69c>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	fa93 f3a3 	rbit	r3, r3
 800a52e:	60fb      	str	r3, [r7, #12]
  return result;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d104      	bne.n	800a544 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800a53a:	2320      	movs	r3, #32
 800a53c:	e006      	b.n	800a54c <HAL_ADC_ConfigChannel+0x688>
 800a53e:	bf00      	nop
 800a540:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	fab3 f383 	clz	r3, r3
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	3301      	adds	r3, #1
 800a54e:	f003 021f 	and.w	r2, r3, #31
 800a552:	4613      	mov	r3, r2
 800a554:	005b      	lsls	r3, r3, #1
 800a556:	4413      	add	r3, r2
 800a558:	3b1e      	subs	r3, #30
 800a55a:	051b      	lsls	r3, r3, #20
 800a55c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a560:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a566:	4619      	mov	r1, r3
 800a568:	f7ff f8d8 	bl	800971c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	4b44      	ldr	r3, [pc, #272]	@ (800a684 <HAL_ADC_ConfigChannel+0x7c0>)
 800a572:	4013      	ands	r3, r2
 800a574:	2b00      	cmp	r3, #0
 800a576:	d07a      	beq.n	800a66e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a578:	4843      	ldr	r0, [pc, #268]	@ (800a688 <HAL_ADC_ConfigChannel+0x7c4>)
 800a57a:	f7ff f82d 	bl	80095d8 <LL_ADC_GetCommonPathInternalCh>
 800a57e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a41      	ldr	r2, [pc, #260]	@ (800a68c <HAL_ADC_ConfigChannel+0x7c8>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d12c      	bne.n	800a5e6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a58c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a590:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a594:	2b00      	cmp	r3, #0
 800a596:	d126      	bne.n	800a5e6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a3c      	ldr	r2, [pc, #240]	@ (800a690 <HAL_ADC_ConfigChannel+0x7cc>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d004      	beq.n	800a5ac <HAL_ADC_ConfigChannel+0x6e8>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a3b      	ldr	r2, [pc, #236]	@ (800a694 <HAL_ADC_ConfigChannel+0x7d0>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d15d      	bne.n	800a668 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a5ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a5b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4834      	ldr	r0, [pc, #208]	@ (800a688 <HAL_ADC_ConfigChannel+0x7c4>)
 800a5b8:	f7fe fffb 	bl	80095b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a5bc:	4b36      	ldr	r3, [pc, #216]	@ (800a698 <HAL_ADC_ConfigChannel+0x7d4>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	099b      	lsrs	r3, r3, #6
 800a5c2:	4a36      	ldr	r2, [pc, #216]	@ (800a69c <HAL_ADC_ConfigChannel+0x7d8>)
 800a5c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c8:	099b      	lsrs	r3, r3, #6
 800a5ca:	1c5a      	adds	r2, r3, #1
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	4413      	add	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a5d6:	e002      	b.n	800a5de <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1f9      	bne.n	800a5d8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a5e4:	e040      	b.n	800a668 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a2d      	ldr	r2, [pc, #180]	@ (800a6a0 <HAL_ADC_ConfigChannel+0x7dc>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d118      	bne.n	800a622 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a5f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a5f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d112      	bne.n	800a622 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a23      	ldr	r2, [pc, #140]	@ (800a690 <HAL_ADC_ConfigChannel+0x7cc>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d004      	beq.n	800a610 <HAL_ADC_ConfigChannel+0x74c>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a22      	ldr	r2, [pc, #136]	@ (800a694 <HAL_ADC_ConfigChannel+0x7d0>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d12d      	bne.n	800a66c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a610:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a614:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a618:	4619      	mov	r1, r3
 800a61a:	481b      	ldr	r0, [pc, #108]	@ (800a688 <HAL_ADC_ConfigChannel+0x7c4>)
 800a61c:	f7fe ffc9 	bl	80095b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a620:	e024      	b.n	800a66c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a1f      	ldr	r2, [pc, #124]	@ (800a6a4 <HAL_ADC_ConfigChannel+0x7e0>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d120      	bne.n	800a66e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a62c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a630:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a634:	2b00      	cmp	r3, #0
 800a636:	d11a      	bne.n	800a66e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a14      	ldr	r2, [pc, #80]	@ (800a690 <HAL_ADC_ConfigChannel+0x7cc>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d115      	bne.n	800a66e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a642:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a646:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a64a:	4619      	mov	r1, r3
 800a64c:	480e      	ldr	r0, [pc, #56]	@ (800a688 <HAL_ADC_ConfigChannel+0x7c4>)
 800a64e:	f7fe ffb0 	bl	80095b2 <LL_ADC_SetCommonPathInternalCh>
 800a652:	e00c      	b.n	800a66e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a658:	f043 0220 	orr.w	r2, r3, #32
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800a666:	e002      	b.n	800a66e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a668:	bf00      	nop
 800a66a:	e000      	b.n	800a66e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a66c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800a676:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	37d8      	adds	r7, #216	@ 0xd8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	80080000 	.word	0x80080000
 800a688:	50040300 	.word	0x50040300
 800a68c:	c7520000 	.word	0xc7520000
 800a690:	50040000 	.word	0x50040000
 800a694:	50040200 	.word	0x50040200
 800a698:	20000168 	.word	0x20000168
 800a69c:	053e2d63 	.word	0x053e2d63
 800a6a0:	cb840000 	.word	0xcb840000
 800a6a4:	80000001 	.word	0x80000001

0800a6a8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b088      	sub	sp, #32
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7ff f94e 	bl	8009960 <LL_ADC_REG_IsConversionOngoing>
 800a6c4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7ff f96f 	bl	80099ae <LL_ADC_INJ_IsConversionOngoing>
 800a6d0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d103      	bne.n	800a6e0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f000 8098 	beq.w	800a810 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d02a      	beq.n	800a744 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	7e5b      	ldrb	r3, [r3, #25]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d126      	bne.n	800a744 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	7e1b      	ldrb	r3, [r3, #24]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d122      	bne.n	800a744 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800a6fe:	2301      	movs	r3, #1
 800a700:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a702:	e014      	b.n	800a72e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	4a45      	ldr	r2, [pc, #276]	@ (800a81c <ADC_ConversionStop+0x174>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d90d      	bls.n	800a728 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a710:	f043 0210 	orr.w	r2, r3, #16
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a71c:	f043 0201 	orr.w	r2, r3, #1
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	e074      	b.n	800a812 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	3301      	adds	r3, #1
 800a72c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a738:	2b40      	cmp	r3, #64	@ 0x40
 800a73a:	d1e3      	bne.n	800a704 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2240      	movs	r2, #64	@ 0x40
 800a742:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	2b02      	cmp	r3, #2
 800a748:	d014      	beq.n	800a774 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4618      	mov	r0, r3
 800a750:	f7ff f906 	bl	8009960 <LL_ADC_REG_IsConversionOngoing>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00c      	beq.n	800a774 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4618      	mov	r0, r3
 800a760:	f7ff f8c3 	bl	80098ea <LL_ADC_IsDisableOngoing>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d104      	bne.n	800a774 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4618      	mov	r0, r3
 800a770:	f7ff f8e2 	bl	8009938 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	2b01      	cmp	r3, #1
 800a778:	d014      	beq.n	800a7a4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4618      	mov	r0, r3
 800a780:	f7ff f915 	bl	80099ae <LL_ADC_INJ_IsConversionOngoing>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00c      	beq.n	800a7a4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4618      	mov	r0, r3
 800a790:	f7ff f8ab 	bl	80098ea <LL_ADC_IsDisableOngoing>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d104      	bne.n	800a7a4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7ff f8f1 	bl	8009986 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d005      	beq.n	800a7b6 <ADC_ConversionStop+0x10e>
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	2b03      	cmp	r3, #3
 800a7ae:	d105      	bne.n	800a7bc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800a7b0:	230c      	movs	r3, #12
 800a7b2:	617b      	str	r3, [r7, #20]
        break;
 800a7b4:	e005      	b.n	800a7c2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800a7b6:	2308      	movs	r3, #8
 800a7b8:	617b      	str	r3, [r7, #20]
        break;
 800a7ba:	e002      	b.n	800a7c2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800a7bc:	2304      	movs	r3, #4
 800a7be:	617b      	str	r3, [r7, #20]
        break;
 800a7c0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800a7c2:	f7fe feb3 	bl	800952c <HAL_GetTick>
 800a7c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a7c8:	e01b      	b.n	800a802 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800a7ca:	f7fe feaf 	bl	800952c <HAL_GetTick>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	2b05      	cmp	r3, #5
 800a7d6:	d914      	bls.n	800a802 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	689a      	ldr	r2, [r3, #8]
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	4013      	ands	r3, r2
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00d      	beq.n	800a802 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ea:	f043 0210 	orr.w	r2, r3, #16
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7f6:	f043 0201 	orr.w	r2, r3, #1
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e007      	b.n	800a812 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	689a      	ldr	r2, [r3, #8]
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	4013      	ands	r3, r2
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1dc      	bne.n	800a7ca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3720      	adds	r7, #32
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	a33fffff 	.word	0xa33fffff

0800a820 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a828:	2300      	movs	r3, #0
 800a82a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4618      	mov	r0, r3
 800a832:	f7ff f847 	bl	80098c4 <LL_ADC_IsEnabled>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d169      	bne.n	800a910 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	689a      	ldr	r2, [r3, #8]
 800a842:	4b36      	ldr	r3, [pc, #216]	@ (800a91c <ADC_Enable+0xfc>)
 800a844:	4013      	ands	r3, r2
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00d      	beq.n	800a866 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a84e:	f043 0210 	orr.w	r2, r3, #16
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a85a:	f043 0201 	orr.w	r2, r3, #1
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e055      	b.n	800a912 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7ff f802 	bl	8009874 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a870:	482b      	ldr	r0, [pc, #172]	@ (800a920 <ADC_Enable+0x100>)
 800a872:	f7fe feb1 	bl	80095d8 <LL_ADC_GetCommonPathInternalCh>
 800a876:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a878:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d013      	beq.n	800a8a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a880:	4b28      	ldr	r3, [pc, #160]	@ (800a924 <ADC_Enable+0x104>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	099b      	lsrs	r3, r3, #6
 800a886:	4a28      	ldr	r2, [pc, #160]	@ (800a928 <ADC_Enable+0x108>)
 800a888:	fba2 2303 	umull	r2, r3, r2, r3
 800a88c:	099b      	lsrs	r3, r3, #6
 800a88e:	1c5a      	adds	r2, r3, #1
 800a890:	4613      	mov	r3, r2
 800a892:	005b      	lsls	r3, r3, #1
 800a894:	4413      	add	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a89a:	e002      	b.n	800a8a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	3b01      	subs	r3, #1
 800a8a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1f9      	bne.n	800a89c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a8a8:	f7fe fe40 	bl	800952c <HAL_GetTick>
 800a8ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a8ae:	e028      	b.n	800a902 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff f805 	bl	80098c4 <LL_ADC_IsEnabled>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d104      	bne.n	800a8ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fe ffd5 	bl	8009874 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a8ca:	f7fe fe2f 	bl	800952c <HAL_GetTick>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d914      	bls.n	800a902 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 0301 	and.w	r3, r3, #1
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d00d      	beq.n	800a902 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8ea:	f043 0210 	orr.w	r2, r3, #16
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8f6:	f043 0201 	orr.w	r2, r3, #1
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e007      	b.n	800a912 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 0301 	and.w	r3, r3, #1
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d1cf      	bne.n	800a8b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	8000003f 	.word	0x8000003f
 800a920:	50040300 	.word	0x50040300
 800a924:	20000168 	.word	0x20000168
 800a928:	053e2d63 	.word	0x053e2d63

0800a92c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fe ffd6 	bl	80098ea <LL_ADC_IsDisableOngoing>
 800a93e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4618      	mov	r0, r3
 800a946:	f7fe ffbd 	bl	80098c4 <LL_ADC_IsEnabled>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d047      	beq.n	800a9e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d144      	bne.n	800a9e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	f003 030d 	and.w	r3, r3, #13
 800a960:	2b01      	cmp	r3, #1
 800a962:	d10c      	bne.n	800a97e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4618      	mov	r0, r3
 800a96a:	f7fe ff97 	bl	800989c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2203      	movs	r2, #3
 800a974:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a976:	f7fe fdd9 	bl	800952c <HAL_GetTick>
 800a97a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a97c:	e029      	b.n	800a9d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a982:	f043 0210 	orr.w	r2, r3, #16
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a98e:	f043 0201 	orr.w	r2, r3, #1
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e023      	b.n	800a9e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a99a:	f7fe fdc7 	bl	800952c <HAL_GetTick>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	d914      	bls.n	800a9d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00d      	beq.n	800a9d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9ba:	f043 0210 	orr.w	r2, r3, #16
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9c6:	f043 0201 	orr.w	r2, r3, #1
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e007      	b.n	800a9e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d1dc      	bne.n	800a99a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d14b      	bne.n	800aa9c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0308 	and.w	r3, r3, #8
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d021      	beq.n	800aa62 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fe3b 	bl	800969e <LL_ADC_REG_IsTriggerSourceSWStart>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d032      	beq.n	800aa94 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d12b      	bne.n	800aa94 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d11f      	bne.n	800aa94 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa58:	f043 0201 	orr.w	r2, r3, #1
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	655a      	str	r2, [r3, #84]	@ 0x54
 800aa60:	e018      	b.n	800aa94 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d111      	bne.n	800aa94 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d105      	bne.n	800aa94 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa8c:	f043 0201 	orr.w	r2, r3, #1
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800aa94:	68f8      	ldr	r0, [r7, #12]
 800aa96:	f7f7 f969 	bl	8001d6c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800aa9a:	e00e      	b.n	800aaba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaa0:	f003 0310 	and.w	r3, r3, #16
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d003      	beq.n	800aab0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f7ff fa00 	bl	8009eae <HAL_ADC_ErrorCallback>
}
 800aaae:	e004      	b.n	800aaba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	4798      	blx	r3
}
 800aaba:	bf00      	nop
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aace:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f7f7 f92f 	bl	8001d34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800aad6:	bf00      	nop
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b084      	sub	sp, #16
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaf0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aafc:	f043 0204 	orr.w	r2, r3, #4
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f7ff f9d2 	bl	8009eae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ab0a:	bf00      	nop
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <LL_ADC_IsEnabled>:
{
 800ab12:	b480      	push	{r7}
 800ab14:	b083      	sub	sp, #12
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	f003 0301 	and.w	r3, r3, #1
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d101      	bne.n	800ab2a <LL_ADC_IsEnabled+0x18>
 800ab26:	2301      	movs	r3, #1
 800ab28:	e000      	b.n	800ab2c <LL_ADC_IsEnabled+0x1a>
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <LL_ADC_REG_IsConversionOngoing>:
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	f003 0304 	and.w	r3, r3, #4
 800ab48:	2b04      	cmp	r3, #4
 800ab4a:	d101      	bne.n	800ab50 <LL_ADC_REG_IsConversionOngoing+0x18>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e000      	b.n	800ab52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
	...

0800ab60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800ab60:	b590      	push	{r4, r7, lr}
 800ab62:	b09f      	sub	sp, #124	@ 0x7c
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d101      	bne.n	800ab7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800ab7a:	2302      	movs	r3, #2
 800ab7c:	e093      	b.n	800aca6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800ab86:	2300      	movs	r3, #0
 800ab88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a47      	ldr	r2, [pc, #284]	@ (800acb0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d102      	bne.n	800ab9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800ab98:	4b46      	ldr	r3, [pc, #280]	@ (800acb4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800ab9a:	60bb      	str	r3, [r7, #8]
 800ab9c:	e001      	b.n	800aba2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10b      	bne.n	800abc0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abac:	f043 0220 	orr.w	r2, r3, #32
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800abbc:	2301      	movs	r3, #1
 800abbe:	e072      	b.n	800aca6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7ff ffb8 	bl	800ab38 <LL_ADC_REG_IsConversionOngoing>
 800abc8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4618      	mov	r0, r3
 800abd0:	f7ff ffb2 	bl	800ab38 <LL_ADC_REG_IsConversionOngoing>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d154      	bne.n	800ac84 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800abda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d151      	bne.n	800ac84 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800abe0:	4b35      	ldr	r3, [pc, #212]	@ (800acb8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800abe2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d02c      	beq.n	800ac46 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800abec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	6859      	ldr	r1, [r3, #4]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800abfe:	035b      	lsls	r3, r3, #13
 800ac00:	430b      	orrs	r3, r1
 800ac02:	431a      	orrs	r2, r3
 800ac04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ac08:	4829      	ldr	r0, [pc, #164]	@ (800acb0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800ac0a:	f7ff ff82 	bl	800ab12 <LL_ADC_IsEnabled>
 800ac0e:	4604      	mov	r4, r0
 800ac10:	4828      	ldr	r0, [pc, #160]	@ (800acb4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800ac12:	f7ff ff7e 	bl	800ab12 <LL_ADC_IsEnabled>
 800ac16:	4603      	mov	r3, r0
 800ac18:	431c      	orrs	r4, r3
 800ac1a:	4828      	ldr	r0, [pc, #160]	@ (800acbc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800ac1c:	f7ff ff79 	bl	800ab12 <LL_ADC_IsEnabled>
 800ac20:	4603      	mov	r3, r0
 800ac22:	4323      	orrs	r3, r4
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d137      	bne.n	800ac98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800ac28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800ac30:	f023 030f 	bic.w	r3, r3, #15
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	6811      	ldr	r1, [r2, #0]
 800ac38:	683a      	ldr	r2, [r7, #0]
 800ac3a:	6892      	ldr	r2, [r2, #8]
 800ac3c:	430a      	orrs	r2, r1
 800ac3e:	431a      	orrs	r2, r3
 800ac40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac42:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ac44:	e028      	b.n	800ac98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800ac46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ac4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac50:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ac52:	4817      	ldr	r0, [pc, #92]	@ (800acb0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800ac54:	f7ff ff5d 	bl	800ab12 <LL_ADC_IsEnabled>
 800ac58:	4604      	mov	r4, r0
 800ac5a:	4816      	ldr	r0, [pc, #88]	@ (800acb4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800ac5c:	f7ff ff59 	bl	800ab12 <LL_ADC_IsEnabled>
 800ac60:	4603      	mov	r3, r0
 800ac62:	431c      	orrs	r4, r3
 800ac64:	4815      	ldr	r0, [pc, #84]	@ (800acbc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800ac66:	f7ff ff54 	bl	800ab12 <LL_ADC_IsEnabled>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	4323      	orrs	r3, r4
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d112      	bne.n	800ac98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800ac72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800ac7a:	f023 030f 	bic.w	r3, r3, #15
 800ac7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ac80:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ac82:	e009      	b.n	800ac98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac88:	f043 0220 	orr.w	r2, r3, #32
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800ac96:	e000      	b.n	800ac9a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ac98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800aca2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	377c      	adds	r7, #124	@ 0x7c
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd90      	pop	{r4, r7, pc}
 800acae:	bf00      	nop
 800acb0:	50040000 	.word	0x50040000
 800acb4:	50040100 	.word	0x50040100
 800acb8:	50040300 	.word	0x50040300
 800acbc:	50040200 	.word	0x50040200

0800acc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b085      	sub	sp, #20
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f003 0307 	and.w	r3, r3, #7
 800acce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800acd0:	4b0c      	ldr	r3, [pc, #48]	@ (800ad04 <__NVIC_SetPriorityGrouping+0x44>)
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800acdc:	4013      	ands	r3, r2
 800acde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ace8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800acec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800acf2:	4a04      	ldr	r2, [pc, #16]	@ (800ad04 <__NVIC_SetPriorityGrouping+0x44>)
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	60d3      	str	r3, [r2, #12]
}
 800acf8:	bf00      	nop
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr
 800ad04:	e000ed00 	.word	0xe000ed00

0800ad08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ad0c:	4b04      	ldr	r3, [pc, #16]	@ (800ad20 <__NVIC_GetPriorityGrouping+0x18>)
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	0a1b      	lsrs	r3, r3, #8
 800ad12:	f003 0307 	and.w	r3, r3, #7
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	e000ed00 	.word	0xe000ed00

0800ad24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	db0b      	blt.n	800ad4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ad36:	79fb      	ldrb	r3, [r7, #7]
 800ad38:	f003 021f 	and.w	r2, r3, #31
 800ad3c:	4907      	ldr	r1, [pc, #28]	@ (800ad5c <__NVIC_EnableIRQ+0x38>)
 800ad3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad42:	095b      	lsrs	r3, r3, #5
 800ad44:	2001      	movs	r0, #1
 800ad46:	fa00 f202 	lsl.w	r2, r0, r2
 800ad4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800ad4e:	bf00      	nop
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	e000e100 	.word	0xe000e100

0800ad60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	4603      	mov	r3, r0
 800ad68:	6039      	str	r1, [r7, #0]
 800ad6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	db0a      	blt.n	800ad8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	490c      	ldr	r1, [pc, #48]	@ (800adac <__NVIC_SetPriority+0x4c>)
 800ad7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad7e:	0112      	lsls	r2, r2, #4
 800ad80:	b2d2      	uxtb	r2, r2
 800ad82:	440b      	add	r3, r1
 800ad84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ad88:	e00a      	b.n	800ada0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	4908      	ldr	r1, [pc, #32]	@ (800adb0 <__NVIC_SetPriority+0x50>)
 800ad90:	79fb      	ldrb	r3, [r7, #7]
 800ad92:	f003 030f 	and.w	r3, r3, #15
 800ad96:	3b04      	subs	r3, #4
 800ad98:	0112      	lsls	r2, r2, #4
 800ad9a:	b2d2      	uxtb	r2, r2
 800ad9c:	440b      	add	r3, r1
 800ad9e:	761a      	strb	r2, [r3, #24]
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	e000e100 	.word	0xe000e100
 800adb0:	e000ed00 	.word	0xe000ed00

0800adb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b089      	sub	sp, #36	@ 0x24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f003 0307 	and.w	r3, r3, #7
 800adc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	f1c3 0307 	rsb	r3, r3, #7
 800adce:	2b04      	cmp	r3, #4
 800add0:	bf28      	it	cs
 800add2:	2304      	movcs	r3, #4
 800add4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	3304      	adds	r3, #4
 800adda:	2b06      	cmp	r3, #6
 800addc:	d902      	bls.n	800ade4 <NVIC_EncodePriority+0x30>
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	3b03      	subs	r3, #3
 800ade2:	e000      	b.n	800ade6 <NVIC_EncodePriority+0x32>
 800ade4:	2300      	movs	r3, #0
 800ade6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ade8:	f04f 32ff 	mov.w	r2, #4294967295
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	fa02 f303 	lsl.w	r3, r2, r3
 800adf2:	43da      	mvns	r2, r3
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	401a      	ands	r2, r3
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800adfc:	f04f 31ff 	mov.w	r1, #4294967295
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	fa01 f303 	lsl.w	r3, r1, r3
 800ae06:	43d9      	mvns	r1, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ae0c:	4313      	orrs	r3, r2
         );
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3724      	adds	r7, #36	@ 0x24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
	...

0800ae1c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800ae20:	f3bf 8f4f 	dsb	sy
}
 800ae24:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ae26:	4b06      	ldr	r3, [pc, #24]	@ (800ae40 <__NVIC_SystemReset+0x24>)
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ae2e:	4904      	ldr	r1, [pc, #16]	@ (800ae40 <__NVIC_SystemReset+0x24>)
 800ae30:	4b04      	ldr	r3, [pc, #16]	@ (800ae44 <__NVIC_SystemReset+0x28>)
 800ae32:	4313      	orrs	r3, r2
 800ae34:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ae36:	f3bf 8f4f 	dsb	sy
}
 800ae3a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800ae3c:	bf00      	nop
 800ae3e:	e7fd      	b.n	800ae3c <__NVIC_SystemReset+0x20>
 800ae40:	e000ed00 	.word	0xe000ed00
 800ae44:	05fa0004 	.word	0x05fa0004

0800ae48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	3b01      	subs	r3, #1
 800ae54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae58:	d301      	bcc.n	800ae5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e00f      	b.n	800ae7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ae5e:	4a0a      	ldr	r2, [pc, #40]	@ (800ae88 <SysTick_Config+0x40>)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	3b01      	subs	r3, #1
 800ae64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ae66:	210f      	movs	r1, #15
 800ae68:	f04f 30ff 	mov.w	r0, #4294967295
 800ae6c:	f7ff ff78 	bl	800ad60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ae70:	4b05      	ldr	r3, [pc, #20]	@ (800ae88 <SysTick_Config+0x40>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ae76:	4b04      	ldr	r3, [pc, #16]	@ (800ae88 <SysTick_Config+0x40>)
 800ae78:	2207      	movs	r2, #7
 800ae7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	e000e010 	.word	0xe000e010

0800ae8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f7ff ff13 	bl	800acc0 <__NVIC_SetPriorityGrouping>
}
 800ae9a:	bf00      	nop
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b086      	sub	sp, #24
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	4603      	mov	r3, r0
 800aeaa:	60b9      	str	r1, [r7, #8]
 800aeac:	607a      	str	r2, [r7, #4]
 800aeae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800aeb4:	f7ff ff28 	bl	800ad08 <__NVIC_GetPriorityGrouping>
 800aeb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	68b9      	ldr	r1, [r7, #8]
 800aebe:	6978      	ldr	r0, [r7, #20]
 800aec0:	f7ff ff78 	bl	800adb4 <NVIC_EncodePriority>
 800aec4:	4602      	mov	r2, r0
 800aec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeca:	4611      	mov	r1, r2
 800aecc:	4618      	mov	r0, r3
 800aece:	f7ff ff47 	bl	800ad60 <__NVIC_SetPriority>
}
 800aed2:	bf00      	nop
 800aed4:	3718      	adds	r7, #24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b082      	sub	sp, #8
 800aede:	af00      	add	r7, sp, #0
 800aee0:	4603      	mov	r3, r0
 800aee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7ff ff1b 	bl	800ad24 <__NVIC_EnableIRQ>
}
 800aeee:	bf00      	nop
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800aefa:	f7ff ff8f 	bl	800ae1c <__NVIC_SystemReset>

0800aefe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b082      	sub	sp, #8
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f7ff ff9e 	bl	800ae48 <SysTick_Config>
 800af0c:	4603      	mov	r3, r0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d101      	bne.n	800af2a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	e054      	b.n	800afd4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	7f5b      	ldrb	r3, [r3, #29]
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	2b00      	cmp	r3, #0
 800af32:	d105      	bne.n	800af40 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f7fa fdb2 	bl	8005aa4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2202      	movs	r2, #2
 800af44:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	791b      	ldrb	r3, [r3, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10c      	bne.n	800af68 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a22      	ldr	r2, [pc, #136]	@ (800afdc <HAL_CRC_Init+0xc4>)
 800af54:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	689a      	ldr	r2, [r3, #8]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f022 0218 	bic.w	r2, r2, #24
 800af64:	609a      	str	r2, [r3, #8]
 800af66:	e00c      	b.n	800af82 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6899      	ldr	r1, [r3, #8]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	461a      	mov	r2, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f834 	bl	800afe0 <HAL_CRCEx_Polynomial_Set>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d001      	beq.n	800af82 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	e028      	b.n	800afd4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	795b      	ldrb	r3, [r3, #5]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d105      	bne.n	800af96 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f04f 32ff 	mov.w	r2, #4294967295
 800af92:	611a      	str	r2, [r3, #16]
 800af94:	e004      	b.n	800afa0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	6912      	ldr	r2, [r2, #16]
 800af9e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	695a      	ldr	r2, [r3, #20]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	430a      	orrs	r2, r1
 800afb4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	699a      	ldr	r2, [r3, #24]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	430a      	orrs	r2, r1
 800afca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	04c11db7 	.word	0x04c11db7

0800afe0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b087      	sub	sp, #28
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800aff0:	231f      	movs	r3, #31
 800aff2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	2b00      	cmp	r3, #0
 800affc:	d102      	bne.n	800b004 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	75fb      	strb	r3, [r7, #23]
 800b002:	e063      	b.n	800b0cc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800b004:	bf00      	nop
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	1e5a      	subs	r2, r3, #1
 800b00a:	613a      	str	r2, [r7, #16]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d009      	beq.n	800b024 <HAL_CRCEx_Polynomial_Set+0x44>
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	f003 031f 	and.w	r3, r3, #31
 800b016:	68ba      	ldr	r2, [r7, #8]
 800b018:	fa22 f303 	lsr.w	r3, r2, r3
 800b01c:	f003 0301 	and.w	r3, r3, #1
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0f0      	beq.n	800b006 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b18      	cmp	r3, #24
 800b028:	d846      	bhi.n	800b0b8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800b02a:	a201      	add	r2, pc, #4	@ (adr r2, 800b030 <HAL_CRCEx_Polynomial_Set+0x50>)
 800b02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b030:	0800b0bf 	.word	0x0800b0bf
 800b034:	0800b0b9 	.word	0x0800b0b9
 800b038:	0800b0b9 	.word	0x0800b0b9
 800b03c:	0800b0b9 	.word	0x0800b0b9
 800b040:	0800b0b9 	.word	0x0800b0b9
 800b044:	0800b0b9 	.word	0x0800b0b9
 800b048:	0800b0b9 	.word	0x0800b0b9
 800b04c:	0800b0b9 	.word	0x0800b0b9
 800b050:	0800b0ad 	.word	0x0800b0ad
 800b054:	0800b0b9 	.word	0x0800b0b9
 800b058:	0800b0b9 	.word	0x0800b0b9
 800b05c:	0800b0b9 	.word	0x0800b0b9
 800b060:	0800b0b9 	.word	0x0800b0b9
 800b064:	0800b0b9 	.word	0x0800b0b9
 800b068:	0800b0b9 	.word	0x0800b0b9
 800b06c:	0800b0b9 	.word	0x0800b0b9
 800b070:	0800b0a1 	.word	0x0800b0a1
 800b074:	0800b0b9 	.word	0x0800b0b9
 800b078:	0800b0b9 	.word	0x0800b0b9
 800b07c:	0800b0b9 	.word	0x0800b0b9
 800b080:	0800b0b9 	.word	0x0800b0b9
 800b084:	0800b0b9 	.word	0x0800b0b9
 800b088:	0800b0b9 	.word	0x0800b0b9
 800b08c:	0800b0b9 	.word	0x0800b0b9
 800b090:	0800b095 	.word	0x0800b095
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	2b06      	cmp	r3, #6
 800b098:	d913      	bls.n	800b0c2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800b09e:	e010      	b.n	800b0c2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	2b07      	cmp	r3, #7
 800b0a4:	d90f      	bls.n	800b0c6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800b0aa:	e00c      	b.n	800b0c6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	2b0f      	cmp	r3, #15
 800b0b0:	d90b      	bls.n	800b0ca <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800b0b6:	e008      	b.n	800b0ca <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	75fb      	strb	r3, [r7, #23]
        break;
 800b0bc:	e006      	b.n	800b0cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800b0be:	bf00      	nop
 800b0c0:	e004      	b.n	800b0cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800b0c2:	bf00      	nop
 800b0c4:	e002      	b.n	800b0cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800b0c6:	bf00      	nop
 800b0c8:	e000      	b.n	800b0cc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800b0ca:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800b0cc:	7dfb      	ldrb	r3, [r7, #23]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d10d      	bne.n	800b0ee <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	68ba      	ldr	r2, [r7, #8]
 800b0d8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	f023 0118 	bic.w	r1, r3, #24
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	430a      	orrs	r2, r1
 800b0ec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800b0ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	371c      	adds	r7, #28
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d101      	bne.n	800b10e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	e098      	b.n	800b240 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	461a      	mov	r2, r3
 800b114:	4b4d      	ldr	r3, [pc, #308]	@ (800b24c <HAL_DMA_Init+0x150>)
 800b116:	429a      	cmp	r2, r3
 800b118:	d80f      	bhi.n	800b13a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	4b4b      	ldr	r3, [pc, #300]	@ (800b250 <HAL_DMA_Init+0x154>)
 800b122:	4413      	add	r3, r2
 800b124:	4a4b      	ldr	r2, [pc, #300]	@ (800b254 <HAL_DMA_Init+0x158>)
 800b126:	fba2 2303 	umull	r2, r3, r2, r3
 800b12a:	091b      	lsrs	r3, r3, #4
 800b12c:	009a      	lsls	r2, r3, #2
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a48      	ldr	r2, [pc, #288]	@ (800b258 <HAL_DMA_Init+0x15c>)
 800b136:	641a      	str	r2, [r3, #64]	@ 0x40
 800b138:	e00e      	b.n	800b158 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	4b46      	ldr	r3, [pc, #280]	@ (800b25c <HAL_DMA_Init+0x160>)
 800b142:	4413      	add	r3, r2
 800b144:	4a43      	ldr	r2, [pc, #268]	@ (800b254 <HAL_DMA_Init+0x158>)
 800b146:	fba2 2303 	umull	r2, r3, r2, r3
 800b14a:	091b      	lsrs	r3, r3, #4
 800b14c:	009a      	lsls	r2, r3, #2
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a42      	ldr	r2, [pc, #264]	@ (800b260 <HAL_DMA_Init+0x164>)
 800b156:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2202      	movs	r2, #2
 800b15c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b16e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b172:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b17c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	699b      	ldr	r3, [r3, #24]
 800b18e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a1b      	ldr	r3, [r3, #32]
 800b19a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b1b2:	d039      	beq.n	800b228 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1b8:	4a27      	ldr	r2, [pc, #156]	@ (800b258 <HAL_DMA_Init+0x15c>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d11a      	bne.n	800b1f4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800b1be:	4b29      	ldr	r3, [pc, #164]	@ (800b264 <HAL_DMA_Init+0x168>)
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1c6:	f003 031c 	and.w	r3, r3, #28
 800b1ca:	210f      	movs	r1, #15
 800b1cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b1d0:	43db      	mvns	r3, r3
 800b1d2:	4924      	ldr	r1, [pc, #144]	@ (800b264 <HAL_DMA_Init+0x168>)
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800b1d8:	4b22      	ldr	r3, [pc, #136]	@ (800b264 <HAL_DMA_Init+0x168>)
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6859      	ldr	r1, [r3, #4]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1e4:	f003 031c 	and.w	r3, r3, #28
 800b1e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ec:	491d      	ldr	r1, [pc, #116]	@ (800b264 <HAL_DMA_Init+0x168>)
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	600b      	str	r3, [r1, #0]
 800b1f2:	e019      	b.n	800b228 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800b1f4:	4b1c      	ldr	r3, [pc, #112]	@ (800b268 <HAL_DMA_Init+0x16c>)
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1fc:	f003 031c 	and.w	r3, r3, #28
 800b200:	210f      	movs	r1, #15
 800b202:	fa01 f303 	lsl.w	r3, r1, r3
 800b206:	43db      	mvns	r3, r3
 800b208:	4917      	ldr	r1, [pc, #92]	@ (800b268 <HAL_DMA_Init+0x16c>)
 800b20a:	4013      	ands	r3, r2
 800b20c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800b20e:	4b16      	ldr	r3, [pc, #88]	@ (800b268 <HAL_DMA_Init+0x16c>)
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6859      	ldr	r1, [r3, #4]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b21a:	f003 031c 	and.w	r3, r3, #28
 800b21e:	fa01 f303 	lsl.w	r3, r1, r3
 800b222:	4911      	ldr	r1, [pc, #68]	@ (800b268 <HAL_DMA_Init+0x16c>)
 800b224:	4313      	orrs	r3, r2
 800b226:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr
 800b24c:	40020407 	.word	0x40020407
 800b250:	bffdfff8 	.word	0xbffdfff8
 800b254:	cccccccd 	.word	0xcccccccd
 800b258:	40020000 	.word	0x40020000
 800b25c:	bffdfbf8 	.word	0xbffdfbf8
 800b260:	40020400 	.word	0x40020400
 800b264:	400200a8 	.word	0x400200a8
 800b268:	400204a8 	.word	0x400204a8

0800b26c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b086      	sub	sp, #24
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]
 800b278:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b27a:	2300      	movs	r3, #0
 800b27c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b284:	2b01      	cmp	r3, #1
 800b286:	d101      	bne.n	800b28c <HAL_DMA_Start_IT+0x20>
 800b288:	2302      	movs	r3, #2
 800b28a:	e04b      	b.n	800b324 <HAL_DMA_Start_IT+0xb8>
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d13a      	bne.n	800b316 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f022 0201 	bic.w	r2, r2, #1
 800b2bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	68b9      	ldr	r1, [r7, #8]
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f000 f91e 	bl	800b506 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d008      	beq.n	800b2e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f042 020e 	orr.w	r2, r2, #14
 800b2e0:	601a      	str	r2, [r3, #0]
 800b2e2:	e00f      	b.n	800b304 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f022 0204 	bic.w	r2, r2, #4
 800b2f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f042 020a 	orr.w	r2, r2, #10
 800b302:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f042 0201 	orr.w	r2, r2, #1
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	e005      	b.n	800b322 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b31e:	2302      	movs	r3, #2
 800b320:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b322:	7dfb      	ldrb	r3, [r7, #23]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3718      	adds	r7, #24
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b334:	2300      	movs	r3, #0
 800b336:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	2b02      	cmp	r3, #2
 800b342:	d008      	beq.n	800b356 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2204      	movs	r2, #4
 800b348:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	e022      	b.n	800b39c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f022 020e 	bic.w	r2, r2, #14
 800b364:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f022 0201 	bic.w	r2, r2, #1
 800b374:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b37a:	f003 021c 	and.w	r2, r3, #28
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b382:	2101      	movs	r1, #1
 800b384:	fa01 f202 	lsl.w	r2, r1, r2
 800b388:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2201      	movs	r2, #1
 800b38e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3714      	adds	r7, #20
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3c4:	f003 031c 	and.w	r3, r3, #28
 800b3c8:	2204      	movs	r2, #4
 800b3ca:	409a      	lsls	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d026      	beq.n	800b422 <HAL_DMA_IRQHandler+0x7a>
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	f003 0304 	and.w	r3, r3, #4
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d021      	beq.n	800b422 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 0320 	and.w	r3, r3, #32
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d107      	bne.n	800b3fc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f022 0204 	bic.w	r2, r2, #4
 800b3fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b400:	f003 021c 	and.w	r2, r3, #28
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b408:	2104      	movs	r1, #4
 800b40a:	fa01 f202 	lsl.w	r2, r1, r2
 800b40e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b414:	2b00      	cmp	r3, #0
 800b416:	d071      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800b420:	e06c      	b.n	800b4fc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b426:	f003 031c 	and.w	r3, r3, #28
 800b42a:	2202      	movs	r2, #2
 800b42c:	409a      	lsls	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	4013      	ands	r3, r2
 800b432:	2b00      	cmp	r3, #0
 800b434:	d02e      	beq.n	800b494 <HAL_DMA_IRQHandler+0xec>
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	f003 0302 	and.w	r3, r3, #2
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d029      	beq.n	800b494 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 0320 	and.w	r3, r3, #32
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10b      	bne.n	800b466 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f022 020a 	bic.w	r2, r2, #10
 800b45c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2201      	movs	r2, #1
 800b462:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b46a:	f003 021c 	and.w	r2, r3, #28
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b472:	2102      	movs	r1, #2
 800b474:	fa01 f202 	lsl.w	r2, r1, r2
 800b478:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b486:	2b00      	cmp	r3, #0
 800b488:	d038      	beq.n	800b4fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800b492:	e033      	b.n	800b4fc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b498:	f003 031c 	and.w	r3, r3, #28
 800b49c:	2208      	movs	r2, #8
 800b49e:	409a      	lsls	r2, r3
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	4013      	ands	r3, r2
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d02a      	beq.n	800b4fe <HAL_DMA_IRQHandler+0x156>
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	f003 0308 	and.w	r3, r3, #8
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d025      	beq.n	800b4fe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f022 020e 	bic.w	r2, r2, #14
 800b4c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4c6:	f003 021c 	and.w	r2, r3, #28
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4ce:	2101      	movs	r1, #1
 800b4d0:	fa01 f202 	lsl.w	r2, r1, r2
 800b4d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d004      	beq.n	800b4fe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b4fc:	bf00      	nop
 800b4fe:	bf00      	nop
}
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b506:	b480      	push	{r7}
 800b508:	b085      	sub	sp, #20
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	60f8      	str	r0, [r7, #12]
 800b50e:	60b9      	str	r1, [r7, #8]
 800b510:	607a      	str	r2, [r7, #4]
 800b512:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b518:	f003 021c 	and.w	r2, r3, #28
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b520:	2101      	movs	r1, #1
 800b522:	fa01 f202 	lsl.w	r2, r1, r2
 800b526:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	683a      	ldr	r2, [r7, #0]
 800b52e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	2b10      	cmp	r3, #16
 800b536:	d108      	bne.n	800b54a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	68ba      	ldr	r2, [r7, #8]
 800b546:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b548:	e007      	b.n	800b55a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	68ba      	ldr	r2, [r7, #8]
 800b550:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	60da      	str	r2, [r3, #12]
}
 800b55a:	bf00      	nop
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
	...

0800b568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b568:	b480      	push	{r7}
 800b56a:	b087      	sub	sp, #28
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b572:	2300      	movs	r3, #0
 800b574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b576:	e17f      	b.n	800b878 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	2101      	movs	r1, #1
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	fa01 f303 	lsl.w	r3, r1, r3
 800b584:	4013      	ands	r3, r2
 800b586:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f000 8171 	beq.w	800b872 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	f003 0303 	and.w	r3, r3, #3
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d005      	beq.n	800b5a8 <HAL_GPIO_Init+0x40>
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	f003 0303 	and.w	r3, r3, #3
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d130      	bne.n	800b60a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	005b      	lsls	r3, r3, #1
 800b5b2:	2203      	movs	r2, #3
 800b5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5b8:	43db      	mvns	r3, r3
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	4013      	ands	r3, r2
 800b5be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	68da      	ldr	r2, [r3, #12]
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	005b      	lsls	r3, r3, #1
 800b5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	693a      	ldr	r2, [r7, #16]
 800b5d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b5de:	2201      	movs	r2, #1
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b5e6:	43db      	mvns	r3, r3
 800b5e8:	693a      	ldr	r2, [r7, #16]
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	091b      	lsrs	r3, r3, #4
 800b5f4:	f003 0201 	and.w	r2, r3, #1
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fe:	693a      	ldr	r2, [r7, #16]
 800b600:	4313      	orrs	r3, r2
 800b602:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	693a      	ldr	r2, [r7, #16]
 800b608:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	f003 0303 	and.w	r3, r3, #3
 800b612:	2b03      	cmp	r3, #3
 800b614:	d118      	bne.n	800b648 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b61a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800b61c:	2201      	movs	r2, #1
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	fa02 f303 	lsl.w	r3, r2, r3
 800b624:	43db      	mvns	r3, r3
 800b626:	693a      	ldr	r2, [r7, #16]
 800b628:	4013      	ands	r3, r2
 800b62a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	08db      	lsrs	r3, r3, #3
 800b632:	f003 0201 	and.w	r2, r3, #1
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	fa02 f303 	lsl.w	r3, r2, r3
 800b63c:	693a      	ldr	r2, [r7, #16]
 800b63e:	4313      	orrs	r3, r2
 800b640:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	693a      	ldr	r2, [r7, #16]
 800b646:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	f003 0303 	and.w	r3, r3, #3
 800b650:	2b03      	cmp	r3, #3
 800b652:	d017      	beq.n	800b684 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	005b      	lsls	r3, r3, #1
 800b65e:	2203      	movs	r2, #3
 800b660:	fa02 f303 	lsl.w	r3, r2, r3
 800b664:	43db      	mvns	r3, r3
 800b666:	693a      	ldr	r2, [r7, #16]
 800b668:	4013      	ands	r3, r2
 800b66a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	689a      	ldr	r2, [r3, #8]
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	fa02 f303 	lsl.w	r3, r2, r3
 800b678:	693a      	ldr	r2, [r7, #16]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	f003 0303 	and.w	r3, r3, #3
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d123      	bne.n	800b6d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	08da      	lsrs	r2, r3, #3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3208      	adds	r2, #8
 800b698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b69c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f003 0307 	and.w	r3, r3, #7
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	220f      	movs	r2, #15
 800b6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ac:	43db      	mvns	r3, r3
 800b6ae:	693a      	ldr	r2, [r7, #16]
 800b6b0:	4013      	ands	r3, r2
 800b6b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	691a      	ldr	r2, [r3, #16]
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	f003 0307 	and.w	r3, r3, #7
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6c4:	693a      	ldr	r2, [r7, #16]
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	08da      	lsrs	r2, r3, #3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	3208      	adds	r2, #8
 800b6d2:	6939      	ldr	r1, [r7, #16]
 800b6d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	005b      	lsls	r3, r3, #1
 800b6e2:	2203      	movs	r2, #3
 800b6e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e8:	43db      	mvns	r3, r3
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	4013      	ands	r3, r2
 800b6ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	f003 0203 	and.w	r2, r3, #3
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	4313      	orrs	r3, r2
 800b704:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	693a      	ldr	r2, [r7, #16]
 800b70a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b714:	2b00      	cmp	r3, #0
 800b716:	f000 80ac 	beq.w	800b872 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b71a:	4b5f      	ldr	r3, [pc, #380]	@ (800b898 <HAL_GPIO_Init+0x330>)
 800b71c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b71e:	4a5e      	ldr	r2, [pc, #376]	@ (800b898 <HAL_GPIO_Init+0x330>)
 800b720:	f043 0301 	orr.w	r3, r3, #1
 800b724:	6613      	str	r3, [r2, #96]	@ 0x60
 800b726:	4b5c      	ldr	r3, [pc, #368]	@ (800b898 <HAL_GPIO_Init+0x330>)
 800b728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b72a:	f003 0301 	and.w	r3, r3, #1
 800b72e:	60bb      	str	r3, [r7, #8]
 800b730:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b732:	4a5a      	ldr	r2, [pc, #360]	@ (800b89c <HAL_GPIO_Init+0x334>)
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	089b      	lsrs	r3, r3, #2
 800b738:	3302      	adds	r3, #2
 800b73a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b73e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	f003 0303 	and.w	r3, r3, #3
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	220f      	movs	r2, #15
 800b74a:	fa02 f303 	lsl.w	r3, r2, r3
 800b74e:	43db      	mvns	r3, r3
 800b750:	693a      	ldr	r2, [r7, #16]
 800b752:	4013      	ands	r3, r2
 800b754:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800b75c:	d025      	beq.n	800b7aa <HAL_GPIO_Init+0x242>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a4f      	ldr	r2, [pc, #316]	@ (800b8a0 <HAL_GPIO_Init+0x338>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d01f      	beq.n	800b7a6 <HAL_GPIO_Init+0x23e>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a4e      	ldr	r2, [pc, #312]	@ (800b8a4 <HAL_GPIO_Init+0x33c>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d019      	beq.n	800b7a2 <HAL_GPIO_Init+0x23a>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a4d      	ldr	r2, [pc, #308]	@ (800b8a8 <HAL_GPIO_Init+0x340>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d013      	beq.n	800b79e <HAL_GPIO_Init+0x236>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a4c      	ldr	r2, [pc, #304]	@ (800b8ac <HAL_GPIO_Init+0x344>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d00d      	beq.n	800b79a <HAL_GPIO_Init+0x232>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a4b      	ldr	r2, [pc, #300]	@ (800b8b0 <HAL_GPIO_Init+0x348>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d007      	beq.n	800b796 <HAL_GPIO_Init+0x22e>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a4a      	ldr	r2, [pc, #296]	@ (800b8b4 <HAL_GPIO_Init+0x34c>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d101      	bne.n	800b792 <HAL_GPIO_Init+0x22a>
 800b78e:	2306      	movs	r3, #6
 800b790:	e00c      	b.n	800b7ac <HAL_GPIO_Init+0x244>
 800b792:	2307      	movs	r3, #7
 800b794:	e00a      	b.n	800b7ac <HAL_GPIO_Init+0x244>
 800b796:	2305      	movs	r3, #5
 800b798:	e008      	b.n	800b7ac <HAL_GPIO_Init+0x244>
 800b79a:	2304      	movs	r3, #4
 800b79c:	e006      	b.n	800b7ac <HAL_GPIO_Init+0x244>
 800b79e:	2303      	movs	r3, #3
 800b7a0:	e004      	b.n	800b7ac <HAL_GPIO_Init+0x244>
 800b7a2:	2302      	movs	r3, #2
 800b7a4:	e002      	b.n	800b7ac <HAL_GPIO_Init+0x244>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e000      	b.n	800b7ac <HAL_GPIO_Init+0x244>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	f002 0203 	and.w	r2, r2, #3
 800b7b2:	0092      	lsls	r2, r2, #2
 800b7b4:	4093      	lsls	r3, r2
 800b7b6:	693a      	ldr	r2, [r7, #16]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b7bc:	4937      	ldr	r1, [pc, #220]	@ (800b89c <HAL_GPIO_Init+0x334>)
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	089b      	lsrs	r3, r3, #2
 800b7c2:	3302      	adds	r3, #2
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b7ca:	4b3b      	ldr	r3, [pc, #236]	@ (800b8b8 <HAL_GPIO_Init+0x350>)
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	43db      	mvns	r3, r3
 800b7d4:	693a      	ldr	r2, [r7, #16]
 800b7d6:	4013      	ands	r3, r2
 800b7d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800b7e6:	693a      	ldr	r2, [r7, #16]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b7ee:	4a32      	ldr	r2, [pc, #200]	@ (800b8b8 <HAL_GPIO_Init+0x350>)
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b7f4:	4b30      	ldr	r3, [pc, #192]	@ (800b8b8 <HAL_GPIO_Init+0x350>)
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	43db      	mvns	r3, r3
 800b7fe:	693a      	ldr	r2, [r7, #16]
 800b800:	4013      	ands	r3, r2
 800b802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d003      	beq.n	800b818 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	4313      	orrs	r3, r2
 800b816:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b818:	4a27      	ldr	r2, [pc, #156]	@ (800b8b8 <HAL_GPIO_Init+0x350>)
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800b81e:	4b26      	ldr	r3, [pc, #152]	@ (800b8b8 <HAL_GPIO_Init+0x350>)
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	43db      	mvns	r3, r3
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	4013      	ands	r3, r2
 800b82c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b836:	2b00      	cmp	r3, #0
 800b838:	d003      	beq.n	800b842 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800b83a:	693a      	ldr	r2, [r7, #16]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	4313      	orrs	r3, r2
 800b840:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b842:	4a1d      	ldr	r2, [pc, #116]	@ (800b8b8 <HAL_GPIO_Init+0x350>)
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800b848:	4b1b      	ldr	r3, [pc, #108]	@ (800b8b8 <HAL_GPIO_Init+0x350>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	43db      	mvns	r3, r3
 800b852:	693a      	ldr	r2, [r7, #16]
 800b854:	4013      	ands	r3, r2
 800b856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b860:	2b00      	cmp	r3, #0
 800b862:	d003      	beq.n	800b86c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800b864:	693a      	ldr	r2, [r7, #16]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	4313      	orrs	r3, r2
 800b86a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b86c:	4a12      	ldr	r2, [pc, #72]	@ (800b8b8 <HAL_GPIO_Init+0x350>)
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	3301      	adds	r3, #1
 800b876:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	fa22 f303 	lsr.w	r3, r2, r3
 800b882:	2b00      	cmp	r3, #0
 800b884:	f47f ae78 	bne.w	800b578 <HAL_GPIO_Init+0x10>
  }
}
 800b888:	bf00      	nop
 800b88a:	bf00      	nop
 800b88c:	371c      	adds	r7, #28
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	40021000 	.word	0x40021000
 800b89c:	40010000 	.word	0x40010000
 800b8a0:	48000400 	.word	0x48000400
 800b8a4:	48000800 	.word	0x48000800
 800b8a8:	48000c00 	.word	0x48000c00
 800b8ac:	48001000 	.word	0x48001000
 800b8b0:	48001400 	.word	0x48001400
 800b8b4:	48001800 	.word	0x48001800
 800b8b8:	40010400 	.word	0x40010400

0800b8bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	807b      	strh	r3, [r7, #2]
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b8cc:	787b      	ldrb	r3, [r7, #1]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d003      	beq.n	800b8da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b8d2:	887a      	ldrh	r2, [r7, #2]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b8d8:	e002      	b.n	800b8e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b8da:	887a      	ldrh	r2, [r7, #2]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b8e0:	bf00      	nop
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d101      	bne.n	800b8fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e08d      	b.n	800ba1a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b00      	cmp	r3, #0
 800b908:	d106      	bne.n	800b918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7fa f8e6 	bl	8005ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2224      	movs	r2, #36	@ 0x24
 800b91c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f022 0201 	bic.w	r2, r2, #1
 800b92e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685a      	ldr	r2, [r3, #4]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b93c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	689a      	ldr	r2, [r3, #8]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b94c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d107      	bne.n	800b966 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	689a      	ldr	r2, [r3, #8]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b962:	609a      	str	r2, [r3, #8]
 800b964:	e006      	b.n	800b974 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	689a      	ldr	r2, [r3, #8]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b972:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	2b02      	cmp	r3, #2
 800b97a:	d108      	bne.n	800b98e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	685a      	ldr	r2, [r3, #4]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b98a:	605a      	str	r2, [r3, #4]
 800b98c:	e007      	b.n	800b99e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	685a      	ldr	r2, [r3, #4]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b99c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	6812      	ldr	r2, [r2, #0]
 800b9a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b9ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	68da      	ldr	r2, [r3, #12]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b9c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	691a      	ldr	r2, [r3, #16]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	695b      	ldr	r3, [r3, #20]
 800b9ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	430a      	orrs	r2, r1
 800b9da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	69d9      	ldr	r1, [r3, #28]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a1a      	ldr	r2, [r3, #32]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	430a      	orrs	r2, r1
 800b9ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f042 0201 	orr.w	r2, r2, #1
 800b9fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2220      	movs	r2, #32
 800ba06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
	...

0800ba24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b088      	sub	sp, #32
 800ba28:	af02      	add	r7, sp, #8
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	607a      	str	r2, [r7, #4]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	460b      	mov	r3, r1
 800ba32:	817b      	strh	r3, [r7, #10]
 800ba34:	4613      	mov	r3, r2
 800ba36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	2b20      	cmp	r3, #32
 800ba42:	f040 80fd 	bne.w	800bc40 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d101      	bne.n	800ba54 <HAL_I2C_Master_Transmit+0x30>
 800ba50:	2302      	movs	r3, #2
 800ba52:	e0f6      	b.n	800bc42 <HAL_I2C_Master_Transmit+0x21e>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ba5c:	f7fd fd66 	bl	800952c <HAL_GetTick>
 800ba60:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	9300      	str	r3, [sp, #0]
 800ba66:	2319      	movs	r3, #25
 800ba68:	2201      	movs	r2, #1
 800ba6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f000 fa0a 	bl	800be88 <I2C_WaitOnFlagUntilTimeout>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d001      	beq.n	800ba7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e0e1      	b.n	800bc42 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2221      	movs	r2, #33	@ 0x21
 800ba82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2210      	movs	r2, #16
 800ba8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2200      	movs	r2, #0
 800ba92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	893a      	ldrh	r2, [r7, #8]
 800ba9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800baaa:	b29b      	uxth	r3, r3
 800baac:	2bff      	cmp	r3, #255	@ 0xff
 800baae:	d906      	bls.n	800babe <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	22ff      	movs	r2, #255	@ 0xff
 800bab4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800bab6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800baba:	617b      	str	r3, [r7, #20]
 800babc:	e007      	b.n	800bace <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800bac8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bacc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d024      	beq.n	800bb20 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bada:	781a      	ldrb	r2, [r3, #0]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae6:	1c5a      	adds	r2, r3, #1
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	3b01      	subs	r3, #1
 800baf4:	b29a      	uxth	r2, r3
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bafe:	3b01      	subs	r3, #1
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	8979      	ldrh	r1, [r7, #10]
 800bb12:	4b4e      	ldr	r3, [pc, #312]	@ (800bc4c <HAL_I2C_Master_Transmit+0x228>)
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	f000 fc05 	bl	800c328 <I2C_TransferConfig>
 800bb1e:	e066      	b.n	800bbee <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	8979      	ldrh	r1, [r7, #10]
 800bb28:	4b48      	ldr	r3, [pc, #288]	@ (800bc4c <HAL_I2C_Master_Transmit+0x228>)
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f000 fbfa 	bl	800c328 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800bb34:	e05b      	b.n	800bbee <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb36:	693a      	ldr	r2, [r7, #16]
 800bb38:	6a39      	ldr	r1, [r7, #32]
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f000 f9fd 	bl	800bf3a <I2C_WaitOnTXISFlagUntilTimeout>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d001      	beq.n	800bb4a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	e07b      	b.n	800bc42 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb4e:	781a      	ldrb	r2, [r3, #0]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb5a:	1c5a      	adds	r2, r3, #1
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	3b01      	subs	r3, #1
 800bb68:	b29a      	uxth	r2, r3
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb72:	3b01      	subs	r3, #1
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d034      	beq.n	800bbee <HAL_I2C_Master_Transmit+0x1ca>
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d130      	bne.n	800bbee <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	9300      	str	r3, [sp, #0]
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	2200      	movs	r2, #0
 800bb94:	2180      	movs	r1, #128	@ 0x80
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f000 f976 	bl	800be88 <I2C_WaitOnFlagUntilTimeout>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d001      	beq.n	800bba6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	e04d      	b.n	800bc42 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	2bff      	cmp	r3, #255	@ 0xff
 800bbae:	d90e      	bls.n	800bbce <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	22ff      	movs	r2, #255	@ 0xff
 800bbb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bbba:	b2da      	uxtb	r2, r3
 800bbbc:	8979      	ldrh	r1, [r7, #10]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f000 fbae 	bl	800c328 <I2C_TransferConfig>
 800bbcc:	e00f      	b.n	800bbee <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	8979      	ldrh	r1, [r7, #10]
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f000 fb9d 	bl	800c328 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d19e      	bne.n	800bb36 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbf8:	693a      	ldr	r2, [r7, #16]
 800bbfa:	6a39      	ldr	r1, [r7, #32]
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f000 f9e3 	bl	800bfc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d001      	beq.n	800bc0c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e01a      	b.n	800bc42 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2220      	movs	r2, #32
 800bc12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	6859      	ldr	r1, [r3, #4]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	4b0c      	ldr	r3, [pc, #48]	@ (800bc50 <HAL_I2C_Master_Transmit+0x22c>)
 800bc20:	400b      	ands	r3, r1
 800bc22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2220      	movs	r2, #32
 800bc28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	e000      	b.n	800bc42 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800bc40:	2302      	movs	r3, #2
  }
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3718      	adds	r7, #24
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	80002000 	.word	0x80002000
 800bc50:	fe00e800 	.word	0xfe00e800

0800bc54 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b088      	sub	sp, #32
 800bc58:	af02      	add	r7, sp, #8
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	607a      	str	r2, [r7, #4]
 800bc5e:	461a      	mov	r2, r3
 800bc60:	460b      	mov	r3, r1
 800bc62:	817b      	strh	r3, [r7, #10]
 800bc64:	4613      	mov	r3, r2
 800bc66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	2b20      	cmp	r3, #32
 800bc72:	f040 80db 	bne.w	800be2c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d101      	bne.n	800bc84 <HAL_I2C_Master_Receive+0x30>
 800bc80:	2302      	movs	r3, #2
 800bc82:	e0d4      	b.n	800be2e <HAL_I2C_Master_Receive+0x1da>
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bc8c:	f7fd fc4e 	bl	800952c <HAL_GetTick>
 800bc90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	9300      	str	r3, [sp, #0]
 800bc96:	2319      	movs	r3, #25
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f000 f8f2 	bl	800be88 <I2C_WaitOnFlagUntilTimeout>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d001      	beq.n	800bcae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e0bf      	b.n	800be2e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2222      	movs	r2, #34	@ 0x22
 800bcb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2210      	movs	r2, #16
 800bcba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	893a      	ldrh	r2, [r7, #8]
 800bcce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	2bff      	cmp	r3, #255	@ 0xff
 800bcde:	d90e      	bls.n	800bcfe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2201      	movs	r2, #1
 800bce4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcea:	b2da      	uxtb	r2, r3
 800bcec:	8979      	ldrh	r1, [r7, #10]
 800bcee:	4b52      	ldr	r3, [pc, #328]	@ (800be38 <HAL_I2C_Master_Receive+0x1e4>)
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f000 fb16 	bl	800c328 <I2C_TransferConfig>
 800bcfc:	e06d      	b.n	800bdda <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd02:	b29a      	uxth	r2, r3
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd0c:	b2da      	uxtb	r2, r3
 800bd0e:	8979      	ldrh	r1, [r7, #10]
 800bd10:	4b49      	ldr	r3, [pc, #292]	@ (800be38 <HAL_I2C_Master_Receive+0x1e4>)
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	f000 fb05 	bl	800c328 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800bd1e:	e05c      	b.n	800bdda <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd20:	697a      	ldr	r2, [r7, #20]
 800bd22:	6a39      	ldr	r1, [r7, #32]
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f000 f993 	bl	800c050 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d001      	beq.n	800bd34 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e07c      	b.n	800be2e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd3e:	b2d2      	uxtb	r2, r2
 800bd40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd46:	1c5a      	adds	r2, r3, #1
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd50:	3b01      	subs	r3, #1
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d034      	beq.n	800bdda <HAL_I2C_Master_Receive+0x186>
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d130      	bne.n	800bdda <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	6a3b      	ldr	r3, [r7, #32]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	2180      	movs	r1, #128	@ 0x80
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f000 f880 	bl	800be88 <I2C_WaitOnFlagUntilTimeout>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e04d      	b.n	800be2e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	2bff      	cmp	r3, #255	@ 0xff
 800bd9a:	d90e      	bls.n	800bdba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	22ff      	movs	r2, #255	@ 0xff
 800bda0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bda6:	b2da      	uxtb	r2, r3
 800bda8:	8979      	ldrh	r1, [r7, #10]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f000 fab8 	bl	800c328 <I2C_TransferConfig>
 800bdb8:	e00f      	b.n	800bdda <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bdc8:	b2da      	uxtb	r2, r3
 800bdca:	8979      	ldrh	r1, [r7, #10]
 800bdcc:	2300      	movs	r3, #0
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bdd4:	68f8      	ldr	r0, [r7, #12]
 800bdd6:	f000 faa7 	bl	800c328 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d19d      	bne.n	800bd20 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bde4:	697a      	ldr	r2, [r7, #20]
 800bde6:	6a39      	ldr	r1, [r7, #32]
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	f000 f8ed 	bl	800bfc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d001      	beq.n	800bdf8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e01a      	b.n	800be2e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2220      	movs	r2, #32
 800bdfe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	6859      	ldr	r1, [r3, #4]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	4b0c      	ldr	r3, [pc, #48]	@ (800be3c <HAL_I2C_Master_Receive+0x1e8>)
 800be0c:	400b      	ands	r3, r1
 800be0e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2220      	movs	r2, #32
 800be14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2200      	movs	r2, #0
 800be24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800be28:	2300      	movs	r3, #0
 800be2a:	e000      	b.n	800be2e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800be2c:	2302      	movs	r3, #2
  }
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3718      	adds	r7, #24
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	80002400 	.word	0x80002400
 800be3c:	fe00e800 	.word	0xfe00e800

0800be40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	699b      	ldr	r3, [r3, #24]
 800be4e:	f003 0302 	and.w	r3, r3, #2
 800be52:	2b02      	cmp	r3, #2
 800be54:	d103      	bne.n	800be5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2200      	movs	r2, #0
 800be5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	699b      	ldr	r3, [r3, #24]
 800be64:	f003 0301 	and.w	r3, r3, #1
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d007      	beq.n	800be7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	699a      	ldr	r2, [r3, #24]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f042 0201 	orr.w	r2, r2, #1
 800be7a:	619a      	str	r2, [r3, #24]
  }
}
 800be7c:	bf00      	nop
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	603b      	str	r3, [r7, #0]
 800be94:	4613      	mov	r3, r2
 800be96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be98:	e03b      	b.n	800bf12 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800be9a:	69ba      	ldr	r2, [r7, #24]
 800be9c:	6839      	ldr	r1, [r7, #0]
 800be9e:	68f8      	ldr	r0, [r7, #12]
 800bea0:	f000 f962 	bl	800c168 <I2C_IsErrorOccurred>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d001      	beq.n	800beae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800beaa:	2301      	movs	r3, #1
 800beac:	e041      	b.n	800bf32 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb4:	d02d      	beq.n	800bf12 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800beb6:	f7fd fb39 	bl	800952c <HAL_GetTick>
 800beba:	4602      	mov	r2, r0
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	1ad3      	subs	r3, r2, r3
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d302      	bcc.n	800becc <I2C_WaitOnFlagUntilTimeout+0x44>
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d122      	bne.n	800bf12 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	699a      	ldr	r2, [r3, #24]
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	4013      	ands	r3, r2
 800bed6:	68ba      	ldr	r2, [r7, #8]
 800bed8:	429a      	cmp	r2, r3
 800beda:	bf0c      	ite	eq
 800bedc:	2301      	moveq	r3, #1
 800bede:	2300      	movne	r3, #0
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	461a      	mov	r2, r3
 800bee4:	79fb      	ldrb	r3, [r7, #7]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d113      	bne.n	800bf12 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beee:	f043 0220 	orr.w	r2, r3, #32
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2220      	movs	r2, #32
 800befa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e00f      	b.n	800bf32 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	699a      	ldr	r2, [r3, #24]
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	bf0c      	ite	eq
 800bf22:	2301      	moveq	r3, #1
 800bf24:	2300      	movne	r3, #0
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	461a      	mov	r2, r3
 800bf2a:	79fb      	ldrb	r3, [r7, #7]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d0b4      	beq.n	800be9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b084      	sub	sp, #16
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	60f8      	str	r0, [r7, #12]
 800bf42:	60b9      	str	r1, [r7, #8]
 800bf44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bf46:	e033      	b.n	800bfb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	68b9      	ldr	r1, [r7, #8]
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f000 f90b 	bl	800c168 <I2C_IsErrorOccurred>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d001      	beq.n	800bf5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e031      	b.n	800bfc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf62:	d025      	beq.n	800bfb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf64:	f7fd fae2 	bl	800952c <HAL_GetTick>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	1ad3      	subs	r3, r2, r3
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d302      	bcc.n	800bf7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d11a      	bne.n	800bfb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	699b      	ldr	r3, [r3, #24]
 800bf80:	f003 0302 	and.w	r3, r3, #2
 800bf84:	2b02      	cmp	r3, #2
 800bf86:	d013      	beq.n	800bfb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf8c:	f043 0220 	orr.w	r2, r3, #32
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2220      	movs	r2, #32
 800bf98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bfac:	2301      	movs	r3, #1
 800bfae:	e007      	b.n	800bfc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	699b      	ldr	r3, [r3, #24]
 800bfb6:	f003 0302 	and.w	r3, r3, #2
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d1c4      	bne.n	800bf48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bfd4:	e02f      	b.n	800c036 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	68b9      	ldr	r1, [r7, #8]
 800bfda:	68f8      	ldr	r0, [r7, #12]
 800bfdc:	f000 f8c4 	bl	800c168 <I2C_IsErrorOccurred>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d001      	beq.n	800bfea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e02d      	b.n	800c046 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfea:	f7fd fa9f 	bl	800952c <HAL_GetTick>
 800bfee:	4602      	mov	r2, r0
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	1ad3      	subs	r3, r2, r3
 800bff4:	68ba      	ldr	r2, [r7, #8]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d302      	bcc.n	800c000 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d11a      	bne.n	800c036 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	699b      	ldr	r3, [r3, #24]
 800c006:	f003 0320 	and.w	r3, r3, #32
 800c00a:	2b20      	cmp	r3, #32
 800c00c:	d013      	beq.n	800c036 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c012:	f043 0220 	orr.w	r2, r3, #32
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2220      	movs	r2, #32
 800c01e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2200      	movs	r2, #0
 800c026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2200      	movs	r2, #0
 800c02e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800c032:	2301      	movs	r3, #1
 800c034:	e007      	b.n	800c046 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	699b      	ldr	r3, [r3, #24]
 800c03c:	f003 0320 	and.w	r3, r3, #32
 800c040:	2b20      	cmp	r3, #32
 800c042:	d1c8      	bne.n	800bfd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c044:	2300      	movs	r3, #0
}
 800c046:	4618      	mov	r0, r3
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
	...

0800c050 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	60f8      	str	r0, [r7, #12]
 800c058:	60b9      	str	r1, [r7, #8]
 800c05a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c05c:	2300      	movs	r3, #0
 800c05e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800c060:	e071      	b.n	800c146 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	68b9      	ldr	r1, [r7, #8]
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f000 f87e 	bl	800c168 <I2C_IsErrorOccurred>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d001      	beq.n	800c076 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	699b      	ldr	r3, [r3, #24]
 800c07c:	f003 0320 	and.w	r3, r3, #32
 800c080:	2b20      	cmp	r3, #32
 800c082:	d13b      	bne.n	800c0fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800c084:	7dfb      	ldrb	r3, [r7, #23]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d138      	bne.n	800c0fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	699b      	ldr	r3, [r3, #24]
 800c090:	f003 0304 	and.w	r3, r3, #4
 800c094:	2b04      	cmp	r3, #4
 800c096:	d105      	bne.n	800c0a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d001      	beq.n	800c0a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	f003 0310 	and.w	r3, r3, #16
 800c0ae:	2b10      	cmp	r3, #16
 800c0b0:	d121      	bne.n	800c0f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2210      	movs	r2, #16
 800c0b8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2204      	movs	r2, #4
 800c0be:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2220      	movs	r2, #32
 800c0c6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	6859      	ldr	r1, [r3, #4]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	4b24      	ldr	r3, [pc, #144]	@ (800c164 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800c0d4:	400b      	ands	r3, r1
 800c0d6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2220      	movs	r2, #32
 800c0dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	75fb      	strb	r3, [r7, #23]
 800c0f4:	e002      	b.n	800c0fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800c0fc:	f7fd fa16 	bl	800952c <HAL_GetTick>
 800c100:	4602      	mov	r2, r0
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	1ad3      	subs	r3, r2, r3
 800c106:	68ba      	ldr	r2, [r7, #8]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d302      	bcc.n	800c112 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d119      	bne.n	800c146 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800c112:	7dfb      	ldrb	r3, [r7, #23]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d116      	bne.n	800c146 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	699b      	ldr	r3, [r3, #24]
 800c11e:	f003 0304 	and.w	r3, r3, #4
 800c122:	2b04      	cmp	r3, #4
 800c124:	d00f      	beq.n	800c146 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c12a:	f043 0220 	orr.w	r2, r3, #32
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2220      	movs	r2, #32
 800c136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	699b      	ldr	r3, [r3, #24]
 800c14c:	f003 0304 	and.w	r3, r3, #4
 800c150:	2b04      	cmp	r3, #4
 800c152:	d002      	beq.n	800c15a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800c154:	7dfb      	ldrb	r3, [r7, #23]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d083      	beq.n	800c062 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800c15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3718      	adds	r7, #24
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	fe00e800 	.word	0xfe00e800

0800c168 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08a      	sub	sp, #40	@ 0x28
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c174:	2300      	movs	r3, #0
 800c176:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c182:	2300      	movs	r3, #0
 800c184:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	f003 0310 	and.w	r3, r3, #16
 800c190:	2b00      	cmp	r3, #0
 800c192:	d068      	beq.n	800c266 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2210      	movs	r2, #16
 800c19a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c19c:	e049      	b.n	800c232 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a4:	d045      	beq.n	800c232 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c1a6:	f7fd f9c1 	bl	800952c <HAL_GetTick>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	68ba      	ldr	r2, [r7, #8]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d302      	bcc.n	800c1bc <I2C_IsErrorOccurred+0x54>
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d13a      	bne.n	800c232 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c1c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c1ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	699b      	ldr	r3, [r3, #24]
 800c1d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c1da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1de:	d121      	bne.n	800c224 <I2C_IsErrorOccurred+0xbc>
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c1e6:	d01d      	beq.n	800c224 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c1e8:	7cfb      	ldrb	r3, [r7, #19]
 800c1ea:	2b20      	cmp	r3, #32
 800c1ec:	d01a      	beq.n	800c224 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	685a      	ldr	r2, [r3, #4]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c1fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c1fe:	f7fd f995 	bl	800952c <HAL_GetTick>
 800c202:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c204:	e00e      	b.n	800c224 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c206:	f7fd f991 	bl	800952c <HAL_GetTick>
 800c20a:	4602      	mov	r2, r0
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	1ad3      	subs	r3, r2, r3
 800c210:	2b19      	cmp	r3, #25
 800c212:	d907      	bls.n	800c224 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c214:	6a3b      	ldr	r3, [r7, #32]
 800c216:	f043 0320 	orr.w	r3, r3, #32
 800c21a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c21c:	2301      	movs	r3, #1
 800c21e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800c222:	e006      	b.n	800c232 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	699b      	ldr	r3, [r3, #24]
 800c22a:	f003 0320 	and.w	r3, r3, #32
 800c22e:	2b20      	cmp	r3, #32
 800c230:	d1e9      	bne.n	800c206 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	699b      	ldr	r3, [r3, #24]
 800c238:	f003 0320 	and.w	r3, r3, #32
 800c23c:	2b20      	cmp	r3, #32
 800c23e:	d003      	beq.n	800c248 <I2C_IsErrorOccurred+0xe0>
 800c240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c244:	2b00      	cmp	r3, #0
 800c246:	d0aa      	beq.n	800c19e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d103      	bne.n	800c258 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2220      	movs	r2, #32
 800c256:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c258:	6a3b      	ldr	r3, [r7, #32]
 800c25a:	f043 0304 	orr.w	r3, r3, #4
 800c25e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c260:	2301      	movs	r3, #1
 800c262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00b      	beq.n	800c290 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c278:	6a3b      	ldr	r3, [r7, #32]
 800c27a:	f043 0301 	orr.w	r3, r3, #1
 800c27e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c288:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c28a:	2301      	movs	r3, #1
 800c28c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00b      	beq.n	800c2b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c29a:	6a3b      	ldr	r3, [r7, #32]
 800c29c:	f043 0308 	orr.w	r3, r3, #8
 800c2a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c2aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d00b      	beq.n	800c2d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c2bc:	6a3b      	ldr	r3, [r7, #32]
 800c2be:	f043 0302 	orr.w	r3, r3, #2
 800c2c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800c2d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d01c      	beq.n	800c316 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f7ff fdaf 	bl	800be40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	6859      	ldr	r1, [r3, #4]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	4b0d      	ldr	r3, [pc, #52]	@ (800c324 <I2C_IsErrorOccurred+0x1bc>)
 800c2ee:	400b      	ands	r3, r1
 800c2f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c2f6:	6a3b      	ldr	r3, [r7, #32]
 800c2f8:	431a      	orrs	r2, r3
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2220      	movs	r2, #32
 800c302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2200      	movs	r2, #0
 800c30a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2200      	movs	r2, #0
 800c312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800c316:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3728      	adds	r7, #40	@ 0x28
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	fe00e800 	.word	0xfe00e800

0800c328 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c328:	b480      	push	{r7}
 800c32a:	b087      	sub	sp, #28
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	607b      	str	r3, [r7, #4]
 800c332:	460b      	mov	r3, r1
 800c334:	817b      	strh	r3, [r7, #10]
 800c336:	4613      	mov	r3, r2
 800c338:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c33a:	897b      	ldrh	r3, [r7, #10]
 800c33c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c340:	7a7b      	ldrb	r3, [r7, #9]
 800c342:	041b      	lsls	r3, r3, #16
 800c344:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c348:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c34e:	6a3b      	ldr	r3, [r7, #32]
 800c350:	4313      	orrs	r3, r2
 800c352:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c356:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	685a      	ldr	r2, [r3, #4]
 800c35e:	6a3b      	ldr	r3, [r7, #32]
 800c360:	0d5b      	lsrs	r3, r3, #21
 800c362:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800c366:	4b08      	ldr	r3, [pc, #32]	@ (800c388 <I2C_TransferConfig+0x60>)
 800c368:	430b      	orrs	r3, r1
 800c36a:	43db      	mvns	r3, r3
 800c36c:	ea02 0103 	and.w	r1, r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	697a      	ldr	r2, [r7, #20]
 800c376:	430a      	orrs	r2, r1
 800c378:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c37a:	bf00      	nop
 800c37c:	371c      	adds	r7, #28
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	03ff63ff 	.word	0x03ff63ff

0800c38c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	2b20      	cmp	r3, #32
 800c3a0:	d138      	bne.n	800c414 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d101      	bne.n	800c3b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	e032      	b.n	800c416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2224      	movs	r2, #36	@ 0x24
 800c3bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f022 0201 	bic.w	r2, r2, #1
 800c3ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c3de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	6819      	ldr	r1, [r3, #0]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	683a      	ldr	r2, [r7, #0]
 800c3ec:	430a      	orrs	r2, r1
 800c3ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f042 0201 	orr.w	r2, r2, #1
 800c3fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2220      	movs	r2, #32
 800c404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	e000      	b.n	800c416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c414:	2302      	movs	r3, #2
  }
}
 800c416:	4618      	mov	r0, r3
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr

0800c422 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c422:	b480      	push	{r7}
 800c424:	b085      	sub	sp, #20
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c432:	b2db      	uxtb	r3, r3
 800c434:	2b20      	cmp	r3, #32
 800c436:	d139      	bne.n	800c4ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d101      	bne.n	800c446 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c442:	2302      	movs	r3, #2
 800c444:	e033      	b.n	800c4ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2201      	movs	r2, #1
 800c44a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2224      	movs	r2, #36	@ 0x24
 800c452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f022 0201 	bic.w	r2, r2, #1
 800c464:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c474:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	021b      	lsls	r3, r3, #8
 800c47a:	68fa      	ldr	r2, [r7, #12]
 800c47c:	4313      	orrs	r3, r2
 800c47e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f042 0201 	orr.w	r2, r2, #1
 800c496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2220      	movs	r2, #32
 800c49c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	e000      	b.n	800c4ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c4ac:	2302      	movs	r3, #2
  }
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3714      	adds	r7, #20
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr
	...

0800c4bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800c4c0:	4b04      	ldr	r3, [pc, #16]	@ (800c4d4 <HAL_PWREx_GetVoltageRange+0x18>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	40007000 	.word	0x40007000

0800c4d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4e6:	d130      	bne.n	800c54a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800c4e8:	4b23      	ldr	r3, [pc, #140]	@ (800c578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c4f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4f4:	d038      	beq.n	800c568 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c4f6:	4b20      	ldr	r3, [pc, #128]	@ (800c578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c4fe:	4a1e      	ldr	r2, [pc, #120]	@ (800c578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c500:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c504:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c506:	4b1d      	ldr	r3, [pc, #116]	@ (800c57c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2232      	movs	r2, #50	@ 0x32
 800c50c:	fb02 f303 	mul.w	r3, r2, r3
 800c510:	4a1b      	ldr	r2, [pc, #108]	@ (800c580 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800c512:	fba2 2303 	umull	r2, r3, r2, r3
 800c516:	0c9b      	lsrs	r3, r3, #18
 800c518:	3301      	adds	r3, #1
 800c51a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c51c:	e002      	b.n	800c524 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	3b01      	subs	r3, #1
 800c522:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c524:	4b14      	ldr	r3, [pc, #80]	@ (800c578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c526:	695b      	ldr	r3, [r3, #20]
 800c528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c52c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c530:	d102      	bne.n	800c538 <HAL_PWREx_ControlVoltageScaling+0x60>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1f2      	bne.n	800c51e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c538:	4b0f      	ldr	r3, [pc, #60]	@ (800c578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c53a:	695b      	ldr	r3, [r3, #20]
 800c53c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c544:	d110      	bne.n	800c568 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800c546:	2303      	movs	r3, #3
 800c548:	e00f      	b.n	800c56a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800c54a:	4b0b      	ldr	r3, [pc, #44]	@ (800c578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c556:	d007      	beq.n	800c568 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c558:	4b07      	ldr	r3, [pc, #28]	@ (800c578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c560:	4a05      	ldr	r2, [pc, #20]	@ (800c578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c562:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c566:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3714      	adds	r7, #20
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	40007000 	.word	0x40007000
 800c57c:	20000168 	.word	0x20000168
 800c580:	431bde83 	.word	0x431bde83

0800c584 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b086      	sub	sp, #24
 800c588:	af02      	add	r7, sp, #8
 800c58a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c58c:	f7fc ffce 	bl	800952c <HAL_GetTick>
 800c590:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d101      	bne.n	800c59c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	e063      	b.n	800c664 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10b      	bne.n	800c5c0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f7f9 faf5 	bl	8005ba0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800c5b6:	f241 3188 	movw	r1, #5000	@ 0x1388
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fa68 	bl	800ca90 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	021a      	lsls	r2, r3, #8
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	430a      	orrs	r2, r1
 800c5d8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5de:	9300      	str	r3, [sp, #0]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	2120      	movs	r1, #32
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fa60 	bl	800caac <QSPI_WaitFlagStateUntilTimeout>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800c5f0:	7afb      	ldrb	r3, [r7, #11]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d131      	bne.n	800c65a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c600:	f023 0310 	bic.w	r3, r3, #16
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	6852      	ldr	r2, [r2, #4]
 800c608:	0611      	lsls	r1, r2, #24
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	68d2      	ldr	r2, [r2, #12]
 800c60e:	4311      	orrs	r1, r2
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	6812      	ldr	r2, [r2, #0]
 800c614:	430b      	orrs	r3, r1
 800c616:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	685a      	ldr	r2, [r3, #4]
 800c61e:	4b13      	ldr	r3, [pc, #76]	@ (800c66c <HAL_QSPI_Init+0xe8>)
 800c620:	4013      	ands	r3, r2
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	6912      	ldr	r2, [r2, #16]
 800c626:	0411      	lsls	r1, r2, #16
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	6952      	ldr	r2, [r2, #20]
 800c62c:	4311      	orrs	r1, r2
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	6992      	ldr	r2, [r2, #24]
 800c632:	4311      	orrs	r1, r2
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	6812      	ldr	r2, [r2, #0]
 800c638:	430b      	orrs	r3, r1
 800c63a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f042 0201 	orr.w	r2, r2, #1
 800c64a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2201      	movs	r2, #1
 800c656:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2200      	movs	r2, #0
 800c65e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800c662:	7afb      	ldrb	r3, [r7, #11]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	ffe0f8fe 	.word	0xffe0f8fe

0800c670 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b088      	sub	sp, #32
 800c674:	af02      	add	r7, sp, #8
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c67c:	f7fc ff56 	bl	800952c <HAL_GetTick>
 800c680:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d101      	bne.n	800c692 <HAL_QSPI_Command+0x22>
 800c68e:	2302      	movs	r3, #2
 800c690:	e048      	b.n	800c724 <HAL_QSPI_Command+0xb4>
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2201      	movs	r2, #1
 800c696:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d137      	bne.n	800c716 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2202      	movs	r2, #2
 800c6b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	2120      	movs	r1, #32
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f000 f9f4 	bl	800caac <QSPI_WaitFlagStateUntilTimeout>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c6c8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d125      	bne.n	800c71a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	68b9      	ldr	r1, [r7, #8]
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f000 fa21 	bl	800cb1a <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d115      	bne.n	800c70c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	2102      	movs	r1, #2
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f000 f9de 	bl	800caac <QSPI_WaitFlagStateUntilTimeout>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800c6f4:	7dfb      	ldrb	r3, [r7, #23]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d10f      	bne.n	800c71a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2202      	movs	r2, #2
 800c700:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2201      	movs	r2, #1
 800c706:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c70a:	e006      	b.n	800c71a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2201      	movs	r2, #1
 800c710:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c714:	e001      	b.n	800c71a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c716:	2302      	movs	r3, #2
 800c718:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2200      	movs	r2, #0
 800c71e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800c722:	7dfb      	ldrb	r3, [r7, #23]
}
 800c724:	4618      	mov	r0, r3
 800c726:	3718      	adds	r7, #24
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08a      	sub	sp, #40	@ 0x28
 800c730:	af02      	add	r7, sp, #8
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c738:	2300      	movs	r3, #0
 800c73a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c73c:	f7fc fef6 	bl	800952c <HAL_GetTick>
 800c740:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	3320      	adds	r3, #32
 800c748:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c750:	b2db      	uxtb	r3, r3
 800c752:	2b01      	cmp	r3, #1
 800c754:	d101      	bne.n	800c75a <HAL_QSPI_Transmit+0x2e>
 800c756:	2302      	movs	r3, #2
 800c758:	e07b      	b.n	800c852 <HAL_QSPI_Transmit+0x126>
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2201      	movs	r2, #1
 800c75e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d16a      	bne.n	800c844 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2200      	movs	r2, #0
 800c772:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d05b      	beq.n	800c832 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2212      	movs	r2, #18
 800c77e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	1c5a      	adds	r2, r3, #1
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	691b      	ldr	r3, [r3, #16]
 800c794:	1c5a      	adds	r2, r3, #1
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	695a      	ldr	r2, [r3, #20]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800c7ae:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800c7b0:	e01b      	b.n	800c7ea <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	9300      	str	r3, [sp, #0]
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	2104      	movs	r1, #4
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f000 f975 	bl	800caac <QSPI_WaitFlagStateUntilTimeout>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800c7c6:	7ffb      	ldrb	r3, [r7, #31]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d113      	bne.n	800c7f4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	69db      	ldr	r3, [r3, #28]
 800c7d0:	781a      	ldrb	r2, [r3, #0]
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	69db      	ldr	r3, [r3, #28]
 800c7da:	1c5a      	adds	r2, r3, #1
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e4:	1e5a      	subs	r2, r3, #1
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1df      	bne.n	800c7b2 <HAL_QSPI_Transmit+0x86>
 800c7f2:	e000      	b.n	800c7f6 <HAL_QSPI_Transmit+0xca>
          break;
 800c7f4:	bf00      	nop
      }

      if (status == HAL_OK)
 800c7f6:	7ffb      	ldrb	r3, [r7, #31]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d115      	bne.n	800c828 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	2201      	movs	r2, #1
 800c804:	2102      	movs	r1, #2
 800c806:	68f8      	ldr	r0, [r7, #12]
 800c808:	f000 f950 	bl	800caac <QSPI_WaitFlagStateUntilTimeout>
 800c80c:	4603      	mov	r3, r0
 800c80e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800c810:	7ffb      	ldrb	r3, [r7, #31]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d108      	bne.n	800c828 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2202      	movs	r2, #2
 800c81c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800c81e:	68f8      	ldr	r0, [r7, #12]
 800c820:	f000 f8bd 	bl	800c99e <HAL_QSPI_Abort>
 800c824:	4603      	mov	r3, r0
 800c826:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2201      	movs	r2, #1
 800c82c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c830:	e00a      	b.n	800c848 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c836:	f043 0208 	orr.w	r2, r3, #8
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800c83e:	2301      	movs	r3, #1
 800c840:	77fb      	strb	r3, [r7, #31]
 800c842:	e001      	b.n	800c848 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c844:	2302      	movs	r3, #2
 800c846:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800c850:	7ffb      	ldrb	r3, [r7, #31]
}
 800c852:	4618      	mov	r0, r3
 800c854:	3720      	adds	r7, #32
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b08a      	sub	sp, #40	@ 0x28
 800c85e:	af02      	add	r7, sp, #8
 800c860:	60f8      	str	r0, [r7, #12]
 800c862:	60b9      	str	r1, [r7, #8]
 800c864:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c866:	2300      	movs	r3, #0
 800c868:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c86a:	f7fc fe5f 	bl	800952c <HAL_GetTick>
 800c86e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	699b      	ldr	r3, [r3, #24]
 800c876:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	3320      	adds	r3, #32
 800c87e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c886:	b2db      	uxtb	r3, r3
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d101      	bne.n	800c890 <HAL_QSPI_Receive+0x36>
 800c88c:	2302      	movs	r3, #2
 800c88e:	e082      	b.n	800c996 <HAL_QSPI_Receive+0x13c>
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d171      	bne.n	800c988 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d062      	beq.n	800c976 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2222      	movs	r2, #34	@ 0x22
 800c8b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	691b      	ldr	r3, [r3, #16]
 800c8be:	1c5a      	adds	r2, r3, #1
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	691b      	ldr	r3, [r3, #16]
 800c8ca:	1c5a      	adds	r2, r3, #1
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	695b      	ldr	r3, [r3, #20]
 800c8dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800c8e8:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800c8f2:	e01c      	b.n	800c92e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	69bb      	ldr	r3, [r7, #24]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	2106      	movs	r1, #6
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f000 f8d4 	bl	800caac <QSPI_WaitFlagStateUntilTimeout>
 800c904:	4603      	mov	r3, r0
 800c906:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800c908:	7ffb      	ldrb	r3, [r7, #31]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d114      	bne.n	800c938 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	7812      	ldrb	r2, [r2, #0]
 800c916:	b2d2      	uxtb	r2, r2
 800c918:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c91e:	1c5a      	adds	r2, r3, #1
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c928:	1e5a      	subs	r2, r3, #1
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1de      	bne.n	800c8f4 <HAL_QSPI_Receive+0x9a>
 800c936:	e000      	b.n	800c93a <HAL_QSPI_Receive+0xe0>
          break;
 800c938:	bf00      	nop
      }

      if (status == HAL_OK)
 800c93a:	7ffb      	ldrb	r3, [r7, #31]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d115      	bne.n	800c96c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	2201      	movs	r2, #1
 800c948:	2102      	movs	r1, #2
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	f000 f8ae 	bl	800caac <QSPI_WaitFlagStateUntilTimeout>
 800c950:	4603      	mov	r3, r0
 800c952:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800c954:	7ffb      	ldrb	r3, [r7, #31]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d108      	bne.n	800c96c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2202      	movs	r2, #2
 800c960:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f000 f81b 	bl	800c99e <HAL_QSPI_Abort>
 800c968:	4603      	mov	r3, r0
 800c96a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c974:	e00a      	b.n	800c98c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c97a:	f043 0208 	orr.w	r2, r3, #8
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800c982:	2301      	movs	r3, #1
 800c984:	77fb      	strb	r3, [r7, #31]
 800c986:	e001      	b.n	800c98c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c988:	2302      	movs	r3, #2
 800c98a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2200      	movs	r2, #0
 800c990:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800c994:	7ffb      	ldrb	r3, [r7, #31]
}
 800c996:	4618      	mov	r0, r3
 800c998:	3720      	adds	r7, #32
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b086      	sub	sp, #24
 800c9a2:	af02      	add	r7, sp, #8
 800c9a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800c9aa:	f7fc fdbf 	bl	800952c <HAL_GetTick>
 800c9ae:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	f003 0302 	and.w	r3, r3, #2
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d062      	beq.n	800ca86 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f003 0304 	and.w	r3, r3, #4
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d017      	beq.n	800ca06 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f022 0204 	bic.w	r2, r2, #4
 800c9e4:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7fe fc9e 	bl	800b32c <HAL_DMA_Abort>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800c9f4:	7bfb      	ldrb	r3, [r7, #15]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d005      	beq.n	800ca06 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9fe:	f043 0204 	orr.w	r2, r3, #4
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	f003 0320 	and.w	r3, r3, #32
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d034      	beq.n	800ca7e <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f042 0202 	orr.w	r2, r2, #2
 800ca22:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca28:	9300      	str	r3, [sp, #0]
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	2102      	movs	r1, #2
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 f83b 	bl	800caac <QSPI_WaitFlagStateUntilTimeout>
 800ca36:	4603      	mov	r3, r0
 800ca38:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800ca3a:	7bfb      	ldrb	r3, [r7, #15]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10e      	bne.n	800ca5e <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2202      	movs	r2, #2
 800ca46:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	2200      	movs	r2, #0
 800ca52:	2120      	movs	r1, #32
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 f829 	bl	800caac <QSPI_WaitFlagStateUntilTimeout>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800ca5e:	7bfb      	ldrb	r3, [r7, #15]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d110      	bne.n	800ca86 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	695a      	ldr	r2, [r3, #20]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800ca72:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ca7c:	e003      	b.n	800ca86 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2201      	movs	r2, #1
 800ca82:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800ca86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3710      	adds	r7, #16
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	683a      	ldr	r2, [r7, #0]
 800ca9e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800caa0:	bf00      	nop
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr

0800caac <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	603b      	str	r3, [r7, #0]
 800cab8:	4613      	mov	r3, r2
 800caba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cabc:	e01a      	b.n	800caf4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac4:	d016      	beq.n	800caf4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cac6:	f7fc fd31 	bl	800952c <HAL_GetTick>
 800caca:	4602      	mov	r2, r0
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	1ad3      	subs	r3, r2, r3
 800cad0:	69ba      	ldr	r2, [r7, #24]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d302      	bcc.n	800cadc <QSPI_WaitFlagStateUntilTimeout+0x30>
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d10b      	bne.n	800caf4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2204      	movs	r2, #4
 800cae0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cae8:	f043 0201 	orr.w	r2, r3, #1
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800caf0:	2301      	movs	r3, #1
 800caf2:	e00e      	b.n	800cb12 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	689a      	ldr	r2, [r3, #8]
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	4013      	ands	r3, r2
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	bf14      	ite	ne
 800cb02:	2301      	movne	r3, #1
 800cb04:	2300      	moveq	r3, #0
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	461a      	mov	r2, r3
 800cb0a:	79fb      	ldrb	r3, [r7, #7]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d1d6      	bne.n	800cabe <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800cb1a:	b480      	push	{r7}
 800cb1c:	b085      	sub	sp, #20
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	60f8      	str	r0, [r7, #12]
 800cb22:	60b9      	str	r1, [r7, #8]
 800cb24:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d009      	beq.n	800cb42 <QSPI_Config+0x28>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cb34:	d005      	beq.n	800cb42 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	3a01      	subs	r2, #1
 800cb40:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	699b      	ldr	r3, [r3, #24]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	f000 80c1 	beq.w	800ccce <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	6a1b      	ldr	r3, [r3, #32]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d063      	beq.n	800cc1c <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	68ba      	ldr	r2, [r7, #8]
 800cb5a:	6892      	ldr	r2, [r2, #8]
 800cb5c:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	69db      	ldr	r3, [r3, #28]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d031      	beq.n	800cbca <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb6e:	431a      	orrs	r2, r3
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb74:	431a      	orrs	r2, r3
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb7a:	431a      	orrs	r2, r3
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	695b      	ldr	r3, [r3, #20]
 800cb80:	049b      	lsls	r3, r3, #18
 800cb82:	431a      	orrs	r2, r3
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	691b      	ldr	r3, [r3, #16]
 800cb88:	431a      	orrs	r2, r3
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	6a1b      	ldr	r3, [r3, #32]
 800cb8e:	431a      	orrs	r2, r3
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	431a      	orrs	r2, r3
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	69db      	ldr	r3, [r3, #28]
 800cb9a:	431a      	orrs	r2, r3
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	699b      	ldr	r3, [r3, #24]
 800cba0:	431a      	orrs	r2, r3
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	ea42 0103 	orr.w	r1, r2, r3
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	430a      	orrs	r2, r1
 800cbb2:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cbba:	f000 813f 	beq.w	800ce3c <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	6852      	ldr	r2, [r2, #4]
 800cbc6:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800cbc8:	e138      	b.n	800ce3c <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbd2:	431a      	orrs	r2, r3
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbd8:	431a      	orrs	r2, r3
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbde:	431a      	orrs	r2, r3
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	695b      	ldr	r3, [r3, #20]
 800cbe4:	049b      	lsls	r3, r3, #18
 800cbe6:	431a      	orrs	r2, r3
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	691b      	ldr	r3, [r3, #16]
 800cbec:	431a      	orrs	r2, r3
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	6a1b      	ldr	r3, [r3, #32]
 800cbf2:	431a      	orrs	r2, r3
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	69db      	ldr	r3, [r3, #28]
 800cbf8:	431a      	orrs	r2, r3
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	699b      	ldr	r3, [r3, #24]
 800cbfe:	431a      	orrs	r2, r3
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	ea42 0103 	orr.w	r1, r2, r3
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	430a      	orrs	r2, r1
 800cc10:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2200      	movs	r2, #0
 800cc18:	619a      	str	r2, [r3, #24]
}
 800cc1a:	e10f      	b.n	800ce3c <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	69db      	ldr	r3, [r3, #28]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d02e      	beq.n	800cc82 <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc2c:	431a      	orrs	r2, r3
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc32:	431a      	orrs	r2, r3
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc38:	431a      	orrs	r2, r3
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	695b      	ldr	r3, [r3, #20]
 800cc3e:	049b      	lsls	r3, r3, #18
 800cc40:	431a      	orrs	r2, r3
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	6a1b      	ldr	r3, [r3, #32]
 800cc46:	431a      	orrs	r2, r3
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	431a      	orrs	r2, r3
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	69db      	ldr	r3, [r3, #28]
 800cc52:	431a      	orrs	r2, r3
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	699b      	ldr	r3, [r3, #24]
 800cc58:	431a      	orrs	r2, r3
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	ea42 0103 	orr.w	r1, r2, r3
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	430a      	orrs	r2, r1
 800cc6a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cc72:	f000 80e3 	beq.w	800ce3c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	68ba      	ldr	r2, [r7, #8]
 800cc7c:	6852      	ldr	r2, [r2, #4]
 800cc7e:	619a      	str	r2, [r3, #24]
}
 800cc80:	e0dc      	b.n	800ce3c <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc8a:	431a      	orrs	r2, r3
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc90:	431a      	orrs	r2, r3
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc96:	431a      	orrs	r2, r3
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	695b      	ldr	r3, [r3, #20]
 800cc9c:	049b      	lsls	r3, r3, #18
 800cc9e:	431a      	orrs	r2, r3
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	6a1b      	ldr	r3, [r3, #32]
 800cca4:	431a      	orrs	r2, r3
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	69db      	ldr	r3, [r3, #28]
 800ccaa:	431a      	orrs	r2, r3
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	699b      	ldr	r3, [r3, #24]
 800ccb0:	431a      	orrs	r2, r3
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	ea42 0103 	orr.w	r1, r2, r3
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	430a      	orrs	r2, r1
 800ccc2:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	619a      	str	r2, [r3, #24]
}
 800cccc:	e0b6      	b.n	800ce3c <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	6a1b      	ldr	r3, [r3, #32]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d05d      	beq.n	800cd92 <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	6892      	ldr	r2, [r2, #8]
 800ccde:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	69db      	ldr	r3, [r3, #28]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d02e      	beq.n	800cd46 <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccf0:	431a      	orrs	r2, r3
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccf6:	431a      	orrs	r2, r3
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccfc:	431a      	orrs	r2, r3
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	695b      	ldr	r3, [r3, #20]
 800cd02:	049b      	lsls	r3, r3, #18
 800cd04:	431a      	orrs	r2, r3
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	691b      	ldr	r3, [r3, #16]
 800cd0a:	431a      	orrs	r2, r3
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	6a1b      	ldr	r3, [r3, #32]
 800cd10:	431a      	orrs	r2, r3
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	431a      	orrs	r2, r3
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	69db      	ldr	r3, [r3, #28]
 800cd1c:	431a      	orrs	r2, r3
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	699b      	ldr	r3, [r3, #24]
 800cd22:	ea42 0103 	orr.w	r1, r2, r3
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	430a      	orrs	r2, r1
 800cd2e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cd36:	f000 8081 	beq.w	800ce3c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	68ba      	ldr	r2, [r7, #8]
 800cd40:	6852      	ldr	r2, [r2, #4]
 800cd42:	619a      	str	r2, [r3, #24]
}
 800cd44:	e07a      	b.n	800ce3c <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd4e:	431a      	orrs	r2, r3
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd54:	431a      	orrs	r2, r3
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd5a:	431a      	orrs	r2, r3
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	695b      	ldr	r3, [r3, #20]
 800cd60:	049b      	lsls	r3, r3, #18
 800cd62:	431a      	orrs	r2, r3
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	691b      	ldr	r3, [r3, #16]
 800cd68:	431a      	orrs	r2, r3
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	6a1b      	ldr	r3, [r3, #32]
 800cd6e:	431a      	orrs	r2, r3
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	69db      	ldr	r3, [r3, #28]
 800cd74:	431a      	orrs	r2, r3
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	699b      	ldr	r3, [r3, #24]
 800cd7a:	ea42 0103 	orr.w	r1, r2, r3
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	430a      	orrs	r2, r1
 800cd86:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	619a      	str	r2, [r3, #24]
}
 800cd90:	e054      	b.n	800ce3c <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	69db      	ldr	r3, [r3, #28]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d02a      	beq.n	800cdf0 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cda2:	431a      	orrs	r2, r3
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cda8:	431a      	orrs	r2, r3
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdae:	431a      	orrs	r2, r3
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	695b      	ldr	r3, [r3, #20]
 800cdb4:	049b      	lsls	r3, r3, #18
 800cdb6:	431a      	orrs	r2, r3
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	6a1b      	ldr	r3, [r3, #32]
 800cdbc:	431a      	orrs	r2, r3
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	431a      	orrs	r2, r3
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	69db      	ldr	r3, [r3, #28]
 800cdc8:	431a      	orrs	r2, r3
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	699b      	ldr	r3, [r3, #24]
 800cdce:	ea42 0103 	orr.w	r1, r2, r3
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	430a      	orrs	r2, r1
 800cdda:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800cde2:	d02b      	beq.n	800ce3c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	6852      	ldr	r2, [r2, #4]
 800cdec:	619a      	str	r2, [r3, #24]
}
 800cdee:	e025      	b.n	800ce3c <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d021      	beq.n	800ce3c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce00:	431a      	orrs	r2, r3
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce06:	431a      	orrs	r2, r3
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce0c:	431a      	orrs	r2, r3
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	695b      	ldr	r3, [r3, #20]
 800ce12:	049b      	lsls	r3, r3, #18
 800ce14:	431a      	orrs	r2, r3
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	6a1b      	ldr	r3, [r3, #32]
 800ce1a:	431a      	orrs	r2, r3
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	69db      	ldr	r3, [r3, #28]
 800ce20:	431a      	orrs	r2, r3
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	699b      	ldr	r3, [r3, #24]
 800ce26:	ea42 0103 	orr.w	r1, r2, r3
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	430a      	orrs	r2, r1
 800ce32:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	619a      	str	r2, [r3, #24]
}
 800ce3c:	bf00      	nop
 800ce3e:	3714      	adds	r7, #20
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b088      	sub	sp, #32
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d101      	bne.n	800ce5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ce56:	2301      	movs	r3, #1
 800ce58:	e3ca      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ce5a:	4b97      	ldr	r3, [pc, #604]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	f003 030c 	and.w	r3, r3, #12
 800ce62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ce64:	4b94      	ldr	r3, [pc, #592]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	f003 0303 	and.w	r3, r3, #3
 800ce6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f003 0310 	and.w	r3, r3, #16
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	f000 80e4 	beq.w	800d044 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d007      	beq.n	800ce92 <HAL_RCC_OscConfig+0x4a>
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	2b0c      	cmp	r3, #12
 800ce86:	f040 808b 	bne.w	800cfa0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	f040 8087 	bne.w	800cfa0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ce92:	4b89      	ldr	r3, [pc, #548]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f003 0302 	and.w	r3, r3, #2
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d005      	beq.n	800ceaa <HAL_RCC_OscConfig+0x62>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	699b      	ldr	r3, [r3, #24]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d101      	bne.n	800ceaa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800cea6:	2301      	movs	r3, #1
 800cea8:	e3a2      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a1a      	ldr	r2, [r3, #32]
 800ceae:	4b82      	ldr	r3, [pc, #520]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f003 0308 	and.w	r3, r3, #8
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d004      	beq.n	800cec4 <HAL_RCC_OscConfig+0x7c>
 800ceba:	4b7f      	ldr	r3, [pc, #508]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cec2:	e005      	b.n	800ced0 <HAL_RCC_OscConfig+0x88>
 800cec4:	4b7c      	ldr	r3, [pc, #496]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ceca:	091b      	lsrs	r3, r3, #4
 800cecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d223      	bcs.n	800cf1c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6a1b      	ldr	r3, [r3, #32]
 800ced8:	4618      	mov	r0, r3
 800ceda:	f000 fd55 	bl	800d988 <RCC_SetFlashLatencyFromMSIRange>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d001      	beq.n	800cee8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800cee4:	2301      	movs	r3, #1
 800cee6:	e383      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cee8:	4b73      	ldr	r3, [pc, #460]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a72      	ldr	r2, [pc, #456]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800ceee:	f043 0308 	orr.w	r3, r3, #8
 800cef2:	6013      	str	r3, [r2, #0]
 800cef4:	4b70      	ldr	r3, [pc, #448]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6a1b      	ldr	r3, [r3, #32]
 800cf00:	496d      	ldr	r1, [pc, #436]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cf02:	4313      	orrs	r3, r2
 800cf04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cf06:	4b6c      	ldr	r3, [pc, #432]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	69db      	ldr	r3, [r3, #28]
 800cf12:	021b      	lsls	r3, r3, #8
 800cf14:	4968      	ldr	r1, [pc, #416]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cf16:	4313      	orrs	r3, r2
 800cf18:	604b      	str	r3, [r1, #4]
 800cf1a:	e025      	b.n	800cf68 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cf1c:	4b66      	ldr	r3, [pc, #408]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a65      	ldr	r2, [pc, #404]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cf22:	f043 0308 	orr.w	r3, r3, #8
 800cf26:	6013      	str	r3, [r2, #0]
 800cf28:	4b63      	ldr	r3, [pc, #396]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6a1b      	ldr	r3, [r3, #32]
 800cf34:	4960      	ldr	r1, [pc, #384]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cf36:	4313      	orrs	r3, r2
 800cf38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cf3a:	4b5f      	ldr	r3, [pc, #380]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	69db      	ldr	r3, [r3, #28]
 800cf46:	021b      	lsls	r3, r3, #8
 800cf48:	495b      	ldr	r1, [pc, #364]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d109      	bne.n	800cf68 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6a1b      	ldr	r3, [r3, #32]
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f000 fd15 	bl	800d988 <RCC_SetFlashLatencyFromMSIRange>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d001      	beq.n	800cf68 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800cf64:	2301      	movs	r3, #1
 800cf66:	e343      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cf68:	f000 fc4a 	bl	800d800 <HAL_RCC_GetSysClockFreq>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	4b52      	ldr	r3, [pc, #328]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	091b      	lsrs	r3, r3, #4
 800cf74:	f003 030f 	and.w	r3, r3, #15
 800cf78:	4950      	ldr	r1, [pc, #320]	@ (800d0bc <HAL_RCC_OscConfig+0x274>)
 800cf7a:	5ccb      	ldrb	r3, [r1, r3]
 800cf7c:	f003 031f 	and.w	r3, r3, #31
 800cf80:	fa22 f303 	lsr.w	r3, r2, r3
 800cf84:	4a4e      	ldr	r2, [pc, #312]	@ (800d0c0 <HAL_RCC_OscConfig+0x278>)
 800cf86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800cf88:	4b4e      	ldr	r3, [pc, #312]	@ (800d0c4 <HAL_RCC_OscConfig+0x27c>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7fc fa7d 	bl	800948c <HAL_InitTick>
 800cf92:	4603      	mov	r3, r0
 800cf94:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800cf96:	7bfb      	ldrb	r3, [r7, #15]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d052      	beq.n	800d042 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800cf9c:	7bfb      	ldrb	r3, [r7, #15]
 800cf9e:	e327      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	699b      	ldr	r3, [r3, #24]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d032      	beq.n	800d00e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800cfa8:	4b43      	ldr	r3, [pc, #268]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a42      	ldr	r2, [pc, #264]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cfae:	f043 0301 	orr.w	r3, r3, #1
 800cfb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800cfb4:	f7fc faba 	bl	800952c <HAL_GetTick>
 800cfb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cfba:	e008      	b.n	800cfce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cfbc:	f7fc fab6 	bl	800952c <HAL_GetTick>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	1ad3      	subs	r3, r2, r3
 800cfc6:	2b02      	cmp	r3, #2
 800cfc8:	d901      	bls.n	800cfce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800cfca:	2303      	movs	r3, #3
 800cfcc:	e310      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cfce:	4b3a      	ldr	r3, [pc, #232]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f003 0302 	and.w	r3, r3, #2
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d0f0      	beq.n	800cfbc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cfda:	4b37      	ldr	r3, [pc, #220]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a36      	ldr	r2, [pc, #216]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cfe0:	f043 0308 	orr.w	r3, r3, #8
 800cfe4:	6013      	str	r3, [r2, #0]
 800cfe6:	4b34      	ldr	r3, [pc, #208]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6a1b      	ldr	r3, [r3, #32]
 800cff2:	4931      	ldr	r1, [pc, #196]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cff4:	4313      	orrs	r3, r2
 800cff6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800cff8:	4b2f      	ldr	r3, [pc, #188]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	69db      	ldr	r3, [r3, #28]
 800d004:	021b      	lsls	r3, r3, #8
 800d006:	492c      	ldr	r1, [pc, #176]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800d008:	4313      	orrs	r3, r2
 800d00a:	604b      	str	r3, [r1, #4]
 800d00c:	e01a      	b.n	800d044 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d00e:	4b2a      	ldr	r3, [pc, #168]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4a29      	ldr	r2, [pc, #164]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800d014:	f023 0301 	bic.w	r3, r3, #1
 800d018:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d01a:	f7fc fa87 	bl	800952c <HAL_GetTick>
 800d01e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d020:	e008      	b.n	800d034 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d022:	f7fc fa83 	bl	800952c <HAL_GetTick>
 800d026:	4602      	mov	r2, r0
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	1ad3      	subs	r3, r2, r3
 800d02c:	2b02      	cmp	r3, #2
 800d02e:	d901      	bls.n	800d034 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800d030:	2303      	movs	r3, #3
 800d032:	e2dd      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d034:	4b20      	ldr	r3, [pc, #128]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f003 0302 	and.w	r3, r3, #2
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d1f0      	bne.n	800d022 <HAL_RCC_OscConfig+0x1da>
 800d040:	e000      	b.n	800d044 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d042:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f003 0301 	and.w	r3, r3, #1
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d074      	beq.n	800d13a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800d050:	69bb      	ldr	r3, [r7, #24]
 800d052:	2b08      	cmp	r3, #8
 800d054:	d005      	beq.n	800d062 <HAL_RCC_OscConfig+0x21a>
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	2b0c      	cmp	r3, #12
 800d05a:	d10e      	bne.n	800d07a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	2b03      	cmp	r3, #3
 800d060:	d10b      	bne.n	800d07a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d062:	4b15      	ldr	r3, [pc, #84]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d064      	beq.n	800d138 <HAL_RCC_OscConfig+0x2f0>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d160      	bne.n	800d138 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	e2ba      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d082:	d106      	bne.n	800d092 <HAL_RCC_OscConfig+0x24a>
 800d084:	4b0c      	ldr	r3, [pc, #48]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a0b      	ldr	r2, [pc, #44]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800d08a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d08e:	6013      	str	r3, [r2, #0]
 800d090:	e026      	b.n	800d0e0 <HAL_RCC_OscConfig+0x298>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d09a:	d115      	bne.n	800d0c8 <HAL_RCC_OscConfig+0x280>
 800d09c:	4b06      	ldr	r3, [pc, #24]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a05      	ldr	r2, [pc, #20]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800d0a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d0a6:	6013      	str	r3, [r2, #0]
 800d0a8:	4b03      	ldr	r3, [pc, #12]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a02      	ldr	r2, [pc, #8]	@ (800d0b8 <HAL_RCC_OscConfig+0x270>)
 800d0ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d0b2:	6013      	str	r3, [r2, #0]
 800d0b4:	e014      	b.n	800d0e0 <HAL_RCC_OscConfig+0x298>
 800d0b6:	bf00      	nop
 800d0b8:	40021000 	.word	0x40021000
 800d0bc:	08014730 	.word	0x08014730
 800d0c0:	20000168 	.word	0x20000168
 800d0c4:	20000174 	.word	0x20000174
 800d0c8:	4ba0      	ldr	r3, [pc, #640]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a9f      	ldr	r2, [pc, #636]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d0ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d0d2:	6013      	str	r3, [r2, #0]
 800d0d4:	4b9d      	ldr	r3, [pc, #628]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a9c      	ldr	r2, [pc, #624]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d0da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d0de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d013      	beq.n	800d110 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0e8:	f7fc fa20 	bl	800952c <HAL_GetTick>
 800d0ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d0ee:	e008      	b.n	800d102 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d0f0:	f7fc fa1c 	bl	800952c <HAL_GetTick>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	2b64      	cmp	r3, #100	@ 0x64
 800d0fc:	d901      	bls.n	800d102 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800d0fe:	2303      	movs	r3, #3
 800d100:	e276      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d102:	4b92      	ldr	r3, [pc, #584]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d0f0      	beq.n	800d0f0 <HAL_RCC_OscConfig+0x2a8>
 800d10e:	e014      	b.n	800d13a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d110:	f7fc fa0c 	bl	800952c <HAL_GetTick>
 800d114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d116:	e008      	b.n	800d12a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d118:	f7fc fa08 	bl	800952c <HAL_GetTick>
 800d11c:	4602      	mov	r2, r0
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	1ad3      	subs	r3, r2, r3
 800d122:	2b64      	cmp	r3, #100	@ 0x64
 800d124:	d901      	bls.n	800d12a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d126:	2303      	movs	r3, #3
 800d128:	e262      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d12a:	4b88      	ldr	r3, [pc, #544]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1f0      	bne.n	800d118 <HAL_RCC_OscConfig+0x2d0>
 800d136:	e000      	b.n	800d13a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f003 0302 	and.w	r3, r3, #2
 800d142:	2b00      	cmp	r3, #0
 800d144:	d060      	beq.n	800d208 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	2b04      	cmp	r3, #4
 800d14a:	d005      	beq.n	800d158 <HAL_RCC_OscConfig+0x310>
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	2b0c      	cmp	r3, #12
 800d150:	d119      	bne.n	800d186 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	2b02      	cmp	r3, #2
 800d156:	d116      	bne.n	800d186 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d158:	4b7c      	ldr	r3, [pc, #496]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d160:	2b00      	cmp	r3, #0
 800d162:	d005      	beq.n	800d170 <HAL_RCC_OscConfig+0x328>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d101      	bne.n	800d170 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800d16c:	2301      	movs	r3, #1
 800d16e:	e23f      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d170:	4b76      	ldr	r3, [pc, #472]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	691b      	ldr	r3, [r3, #16]
 800d17c:	061b      	lsls	r3, r3, #24
 800d17e:	4973      	ldr	r1, [pc, #460]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d180:	4313      	orrs	r3, r2
 800d182:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d184:	e040      	b.n	800d208 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d023      	beq.n	800d1d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d18e:	4b6f      	ldr	r3, [pc, #444]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	4a6e      	ldr	r2, [pc, #440]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d19a:	f7fc f9c7 	bl	800952c <HAL_GetTick>
 800d19e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d1a0:	e008      	b.n	800d1b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d1a2:	f7fc f9c3 	bl	800952c <HAL_GetTick>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	1ad3      	subs	r3, r2, r3
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	d901      	bls.n	800d1b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800d1b0:	2303      	movs	r3, #3
 800d1b2:	e21d      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d1b4:	4b65      	ldr	r3, [pc, #404]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d0f0      	beq.n	800d1a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d1c0:	4b62      	ldr	r3, [pc, #392]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	691b      	ldr	r3, [r3, #16]
 800d1cc:	061b      	lsls	r3, r3, #24
 800d1ce:	495f      	ldr	r1, [pc, #380]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	604b      	str	r3, [r1, #4]
 800d1d4:	e018      	b.n	800d208 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d1d6:	4b5d      	ldr	r3, [pc, #372]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a5c      	ldr	r2, [pc, #368]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d1dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d1e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1e2:	f7fc f9a3 	bl	800952c <HAL_GetTick>
 800d1e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d1e8:	e008      	b.n	800d1fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d1ea:	f7fc f99f 	bl	800952c <HAL_GetTick>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	2b02      	cmp	r3, #2
 800d1f6:	d901      	bls.n	800d1fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800d1f8:	2303      	movs	r3, #3
 800d1fa:	e1f9      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d1fc:	4b53      	ldr	r3, [pc, #332]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d204:	2b00      	cmp	r3, #0
 800d206:	d1f0      	bne.n	800d1ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f003 0308 	and.w	r3, r3, #8
 800d210:	2b00      	cmp	r3, #0
 800d212:	d03c      	beq.n	800d28e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	695b      	ldr	r3, [r3, #20]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d01c      	beq.n	800d256 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d21c:	4b4b      	ldr	r3, [pc, #300]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d21e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d222:	4a4a      	ldr	r2, [pc, #296]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d224:	f043 0301 	orr.w	r3, r3, #1
 800d228:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d22c:	f7fc f97e 	bl	800952c <HAL_GetTick>
 800d230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d232:	e008      	b.n	800d246 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d234:	f7fc f97a 	bl	800952c <HAL_GetTick>
 800d238:	4602      	mov	r2, r0
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	1ad3      	subs	r3, r2, r3
 800d23e:	2b02      	cmp	r3, #2
 800d240:	d901      	bls.n	800d246 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800d242:	2303      	movs	r3, #3
 800d244:	e1d4      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d246:	4b41      	ldr	r3, [pc, #260]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d24c:	f003 0302 	and.w	r3, r3, #2
 800d250:	2b00      	cmp	r3, #0
 800d252:	d0ef      	beq.n	800d234 <HAL_RCC_OscConfig+0x3ec>
 800d254:	e01b      	b.n	800d28e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d256:	4b3d      	ldr	r3, [pc, #244]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d258:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d25c:	4a3b      	ldr	r2, [pc, #236]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d25e:	f023 0301 	bic.w	r3, r3, #1
 800d262:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d266:	f7fc f961 	bl	800952c <HAL_GetTick>
 800d26a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d26c:	e008      	b.n	800d280 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d26e:	f7fc f95d 	bl	800952c <HAL_GetTick>
 800d272:	4602      	mov	r2, r0
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	1ad3      	subs	r3, r2, r3
 800d278:	2b02      	cmp	r3, #2
 800d27a:	d901      	bls.n	800d280 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800d27c:	2303      	movs	r3, #3
 800d27e:	e1b7      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d280:	4b32      	ldr	r3, [pc, #200]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d286:	f003 0302 	and.w	r3, r3, #2
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d1ef      	bne.n	800d26e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f003 0304 	and.w	r3, r3, #4
 800d296:	2b00      	cmp	r3, #0
 800d298:	f000 80a6 	beq.w	800d3e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d29c:	2300      	movs	r3, #0
 800d29e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800d2a0:	4b2a      	ldr	r3, [pc, #168]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d2a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10d      	bne.n	800d2c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d2ac:	4b27      	ldr	r3, [pc, #156]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d2ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2b0:	4a26      	ldr	r2, [pc, #152]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d2b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d2b6:	6593      	str	r3, [r2, #88]	@ 0x58
 800d2b8:	4b24      	ldr	r3, [pc, #144]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d2ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d2c0:	60bb      	str	r3, [r7, #8]
 800d2c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d2c8:	4b21      	ldr	r3, [pc, #132]	@ (800d350 <HAL_RCC_OscConfig+0x508>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d118      	bne.n	800d306 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d2d4:	4b1e      	ldr	r3, [pc, #120]	@ (800d350 <HAL_RCC_OscConfig+0x508>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4a1d      	ldr	r2, [pc, #116]	@ (800d350 <HAL_RCC_OscConfig+0x508>)
 800d2da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d2de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d2e0:	f7fc f924 	bl	800952c <HAL_GetTick>
 800d2e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d2e6:	e008      	b.n	800d2fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d2e8:	f7fc f920 	bl	800952c <HAL_GetTick>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d901      	bls.n	800d2fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800d2f6:	2303      	movs	r3, #3
 800d2f8:	e17a      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d2fa:	4b15      	ldr	r3, [pc, #84]	@ (800d350 <HAL_RCC_OscConfig+0x508>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d302:	2b00      	cmp	r3, #0
 800d304:	d0f0      	beq.n	800d2e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d108      	bne.n	800d320 <HAL_RCC_OscConfig+0x4d8>
 800d30e:	4b0f      	ldr	r3, [pc, #60]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d314:	4a0d      	ldr	r2, [pc, #52]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d316:	f043 0301 	orr.w	r3, r3, #1
 800d31a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d31e:	e029      	b.n	800d374 <HAL_RCC_OscConfig+0x52c>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	689b      	ldr	r3, [r3, #8]
 800d324:	2b05      	cmp	r3, #5
 800d326:	d115      	bne.n	800d354 <HAL_RCC_OscConfig+0x50c>
 800d328:	4b08      	ldr	r3, [pc, #32]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d32a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d32e:	4a07      	ldr	r2, [pc, #28]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d330:	f043 0304 	orr.w	r3, r3, #4
 800d334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d338:	4b04      	ldr	r3, [pc, #16]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d33e:	4a03      	ldr	r2, [pc, #12]	@ (800d34c <HAL_RCC_OscConfig+0x504>)
 800d340:	f043 0301 	orr.w	r3, r3, #1
 800d344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d348:	e014      	b.n	800d374 <HAL_RCC_OscConfig+0x52c>
 800d34a:	bf00      	nop
 800d34c:	40021000 	.word	0x40021000
 800d350:	40007000 	.word	0x40007000
 800d354:	4b9c      	ldr	r3, [pc, #624]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d35a:	4a9b      	ldr	r2, [pc, #620]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d35c:	f023 0301 	bic.w	r3, r3, #1
 800d360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d364:	4b98      	ldr	r3, [pc, #608]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d36a:	4a97      	ldr	r2, [pc, #604]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d36c:	f023 0304 	bic.w	r3, r3, #4
 800d370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d016      	beq.n	800d3aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d37c:	f7fc f8d6 	bl	800952c <HAL_GetTick>
 800d380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d382:	e00a      	b.n	800d39a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d384:	f7fc f8d2 	bl	800952c <HAL_GetTick>
 800d388:	4602      	mov	r2, r0
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	1ad3      	subs	r3, r2, r3
 800d38e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d392:	4293      	cmp	r3, r2
 800d394:	d901      	bls.n	800d39a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800d396:	2303      	movs	r3, #3
 800d398:	e12a      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d39a:	4b8b      	ldr	r3, [pc, #556]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d39c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3a0:	f003 0302 	and.w	r3, r3, #2
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d0ed      	beq.n	800d384 <HAL_RCC_OscConfig+0x53c>
 800d3a8:	e015      	b.n	800d3d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3aa:	f7fc f8bf 	bl	800952c <HAL_GetTick>
 800d3ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d3b0:	e00a      	b.n	800d3c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3b2:	f7fc f8bb 	bl	800952c <HAL_GetTick>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	1ad3      	subs	r3, r2, r3
 800d3bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d901      	bls.n	800d3c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800d3c4:	2303      	movs	r3, #3
 800d3c6:	e113      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d3c8:	4b7f      	ldr	r3, [pc, #508]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d3ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3ce:	f003 0302 	and.w	r3, r3, #2
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d1ed      	bne.n	800d3b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d3d6:	7ffb      	ldrb	r3, [r7, #31]
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	d105      	bne.n	800d3e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d3dc:	4b7a      	ldr	r3, [pc, #488]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d3de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3e0:	4a79      	ldr	r2, [pc, #484]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d3e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d3e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f000 80fe 	beq.w	800d5ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	f040 80d0 	bne.w	800d59c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800d3fc:	4b72      	ldr	r3, [pc, #456]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d3fe:	68db      	ldr	r3, [r3, #12]
 800d400:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	f003 0203 	and.w	r2, r3, #3
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d130      	bne.n	800d472 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d41a:	3b01      	subs	r3, #1
 800d41c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d41e:	429a      	cmp	r2, r3
 800d420:	d127      	bne.n	800d472 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d42c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d42e:	429a      	cmp	r2, r3
 800d430:	d11f      	bne.n	800d472 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d43c:	2a07      	cmp	r2, #7
 800d43e:	bf14      	ite	ne
 800d440:	2201      	movne	r2, #1
 800d442:	2200      	moveq	r2, #0
 800d444:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d446:	4293      	cmp	r3, r2
 800d448:	d113      	bne.n	800d472 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d454:	085b      	lsrs	r3, r3, #1
 800d456:	3b01      	subs	r3, #1
 800d458:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d109      	bne.n	800d472 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d468:	085b      	lsrs	r3, r3, #1
 800d46a:	3b01      	subs	r3, #1
 800d46c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d46e:	429a      	cmp	r2, r3
 800d470:	d06e      	beq.n	800d550 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	2b0c      	cmp	r3, #12
 800d476:	d069      	beq.n	800d54c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800d478:	4b53      	ldr	r3, [pc, #332]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d480:	2b00      	cmp	r3, #0
 800d482:	d105      	bne.n	800d490 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800d484:	4b50      	ldr	r3, [pc, #320]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d001      	beq.n	800d494 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800d490:	2301      	movs	r3, #1
 800d492:	e0ad      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800d494:	4b4c      	ldr	r3, [pc, #304]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a4b      	ldr	r2, [pc, #300]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d49a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d49e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d4a0:	f7fc f844 	bl	800952c <HAL_GetTick>
 800d4a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d4a6:	e008      	b.n	800d4ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d4a8:	f7fc f840 	bl	800952c <HAL_GetTick>
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	1ad3      	subs	r3, r2, r3
 800d4b2:	2b02      	cmp	r3, #2
 800d4b4:	d901      	bls.n	800d4ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800d4b6:	2303      	movs	r3, #3
 800d4b8:	e09a      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d4ba:	4b43      	ldr	r3, [pc, #268]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d1f0      	bne.n	800d4a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d4c6:	4b40      	ldr	r3, [pc, #256]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d4c8:	68da      	ldr	r2, [r3, #12]
 800d4ca:	4b40      	ldr	r3, [pc, #256]	@ (800d5cc <HAL_RCC_OscConfig+0x784>)
 800d4cc:	4013      	ands	r3, r2
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d4d6:	3a01      	subs	r2, #1
 800d4d8:	0112      	lsls	r2, r2, #4
 800d4da:	4311      	orrs	r1, r2
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d4e0:	0212      	lsls	r2, r2, #8
 800d4e2:	4311      	orrs	r1, r2
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d4e8:	0852      	lsrs	r2, r2, #1
 800d4ea:	3a01      	subs	r2, #1
 800d4ec:	0552      	lsls	r2, r2, #21
 800d4ee:	4311      	orrs	r1, r2
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800d4f4:	0852      	lsrs	r2, r2, #1
 800d4f6:	3a01      	subs	r2, #1
 800d4f8:	0652      	lsls	r2, r2, #25
 800d4fa:	4311      	orrs	r1, r2
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d500:	0912      	lsrs	r2, r2, #4
 800d502:	0452      	lsls	r2, r2, #17
 800d504:	430a      	orrs	r2, r1
 800d506:	4930      	ldr	r1, [pc, #192]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d508:	4313      	orrs	r3, r2
 800d50a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800d50c:	4b2e      	ldr	r3, [pc, #184]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a2d      	ldr	r2, [pc, #180]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d512:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d516:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d518:	4b2b      	ldr	r3, [pc, #172]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	4a2a      	ldr	r2, [pc, #168]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d51e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d522:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800d524:	f7fc f802 	bl	800952c <HAL_GetTick>
 800d528:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d52a:	e008      	b.n	800d53e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d52c:	f7fb fffe 	bl	800952c <HAL_GetTick>
 800d530:	4602      	mov	r2, r0
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	1ad3      	subs	r3, r2, r3
 800d536:	2b02      	cmp	r3, #2
 800d538:	d901      	bls.n	800d53e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800d53a:	2303      	movs	r3, #3
 800d53c:	e058      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d53e:	4b22      	ldr	r3, [pc, #136]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d546:	2b00      	cmp	r3, #0
 800d548:	d0f0      	beq.n	800d52c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d54a:	e050      	b.n	800d5ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800d54c:	2301      	movs	r3, #1
 800d54e:	e04f      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d550:	4b1d      	ldr	r3, [pc, #116]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d148      	bne.n	800d5ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800d55c:	4b1a      	ldr	r3, [pc, #104]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a19      	ldr	r2, [pc, #100]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d562:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d566:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d568:	4b17      	ldr	r3, [pc, #92]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	4a16      	ldr	r2, [pc, #88]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d56e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d572:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d574:	f7fb ffda 	bl	800952c <HAL_GetTick>
 800d578:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d57a:	e008      	b.n	800d58e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d57c:	f7fb ffd6 	bl	800952c <HAL_GetTick>
 800d580:	4602      	mov	r2, r0
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	1ad3      	subs	r3, r2, r3
 800d586:	2b02      	cmp	r3, #2
 800d588:	d901      	bls.n	800d58e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800d58a:	2303      	movs	r3, #3
 800d58c:	e030      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d58e:	4b0e      	ldr	r3, [pc, #56]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d596:	2b00      	cmp	r3, #0
 800d598:	d0f0      	beq.n	800d57c <HAL_RCC_OscConfig+0x734>
 800d59a:	e028      	b.n	800d5ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	2b0c      	cmp	r3, #12
 800d5a0:	d023      	beq.n	800d5ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d5a2:	4b09      	ldr	r3, [pc, #36]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4a08      	ldr	r2, [pc, #32]	@ (800d5c8 <HAL_RCC_OscConfig+0x780>)
 800d5a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d5ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5ae:	f7fb ffbd 	bl	800952c <HAL_GetTick>
 800d5b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d5b4:	e00c      	b.n	800d5d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d5b6:	f7fb ffb9 	bl	800952c <HAL_GetTick>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	1ad3      	subs	r3, r2, r3
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	d905      	bls.n	800d5d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800d5c4:	2303      	movs	r3, #3
 800d5c6:	e013      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
 800d5c8:	40021000 	.word	0x40021000
 800d5cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d5d0:	4b09      	ldr	r3, [pc, #36]	@ (800d5f8 <HAL_RCC_OscConfig+0x7b0>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d1ec      	bne.n	800d5b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800d5dc:	4b06      	ldr	r3, [pc, #24]	@ (800d5f8 <HAL_RCC_OscConfig+0x7b0>)
 800d5de:	68da      	ldr	r2, [r3, #12]
 800d5e0:	4905      	ldr	r1, [pc, #20]	@ (800d5f8 <HAL_RCC_OscConfig+0x7b0>)
 800d5e2:	4b06      	ldr	r3, [pc, #24]	@ (800d5fc <HAL_RCC_OscConfig+0x7b4>)
 800d5e4:	4013      	ands	r3, r2
 800d5e6:	60cb      	str	r3, [r1, #12]
 800d5e8:	e001      	b.n	800d5ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e000      	b.n	800d5f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800d5ee:	2300      	movs	r3, #0
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3720      	adds	r7, #32
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	40021000 	.word	0x40021000
 800d5fc:	feeefffc 	.word	0xfeeefffc

0800d600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d101      	bne.n	800d614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	e0e7      	b.n	800d7e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d614:	4b75      	ldr	r3, [pc, #468]	@ (800d7ec <HAL_RCC_ClockConfig+0x1ec>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f003 0307 	and.w	r3, r3, #7
 800d61c:	683a      	ldr	r2, [r7, #0]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d910      	bls.n	800d644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d622:	4b72      	ldr	r3, [pc, #456]	@ (800d7ec <HAL_RCC_ClockConfig+0x1ec>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f023 0207 	bic.w	r2, r3, #7
 800d62a:	4970      	ldr	r1, [pc, #448]	@ (800d7ec <HAL_RCC_ClockConfig+0x1ec>)
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	4313      	orrs	r3, r2
 800d630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d632:	4b6e      	ldr	r3, [pc, #440]	@ (800d7ec <HAL_RCC_ClockConfig+0x1ec>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f003 0307 	and.w	r3, r3, #7
 800d63a:	683a      	ldr	r2, [r7, #0]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d001      	beq.n	800d644 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d640:	2301      	movs	r3, #1
 800d642:	e0cf      	b.n	800d7e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f003 0302 	and.w	r3, r3, #2
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d010      	beq.n	800d672 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	689a      	ldr	r2, [r3, #8]
 800d654:	4b66      	ldr	r3, [pc, #408]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d908      	bls.n	800d672 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d660:	4b63      	ldr	r3, [pc, #396]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d662:	689b      	ldr	r3, [r3, #8]
 800d664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	4960      	ldr	r1, [pc, #384]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d66e:	4313      	orrs	r3, r2
 800d670:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f003 0301 	and.w	r3, r3, #1
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d04c      	beq.n	800d718 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	2b03      	cmp	r3, #3
 800d684:	d107      	bne.n	800d696 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d686:	4b5a      	ldr	r3, [pc, #360]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d121      	bne.n	800d6d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800d692:	2301      	movs	r3, #1
 800d694:	e0a6      	b.n	800d7e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	2b02      	cmp	r3, #2
 800d69c:	d107      	bne.n	800d6ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d69e:	4b54      	ldr	r3, [pc, #336]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d115      	bne.n	800d6d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e09a      	b.n	800d7e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d107      	bne.n	800d6c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d6b6:	4b4e      	ldr	r3, [pc, #312]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f003 0302 	and.w	r3, r3, #2
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d109      	bne.n	800d6d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e08e      	b.n	800d7e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d6c6:	4b4a      	ldr	r3, [pc, #296]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d101      	bne.n	800d6d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	e086      	b.n	800d7e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d6d6:	4b46      	ldr	r3, [pc, #280]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d6d8:	689b      	ldr	r3, [r3, #8]
 800d6da:	f023 0203 	bic.w	r2, r3, #3
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	4943      	ldr	r1, [pc, #268]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6e8:	f7fb ff20 	bl	800952c <HAL_GetTick>
 800d6ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d6ee:	e00a      	b.n	800d706 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d6f0:	f7fb ff1c 	bl	800952c <HAL_GetTick>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	1ad3      	subs	r3, r2, r3
 800d6fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d901      	bls.n	800d706 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800d702:	2303      	movs	r3, #3
 800d704:	e06e      	b.n	800d7e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d706:	4b3a      	ldr	r3, [pc, #232]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d708:	689b      	ldr	r3, [r3, #8]
 800d70a:	f003 020c 	and.w	r2, r3, #12
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	429a      	cmp	r2, r3
 800d716:	d1eb      	bne.n	800d6f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f003 0302 	and.w	r3, r3, #2
 800d720:	2b00      	cmp	r3, #0
 800d722:	d010      	beq.n	800d746 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	689a      	ldr	r2, [r3, #8]
 800d728:	4b31      	ldr	r3, [pc, #196]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d730:	429a      	cmp	r2, r3
 800d732:	d208      	bcs.n	800d746 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d734:	4b2e      	ldr	r3, [pc, #184]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	689b      	ldr	r3, [r3, #8]
 800d740:	492b      	ldr	r1, [pc, #172]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d742:	4313      	orrs	r3, r2
 800d744:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d746:	4b29      	ldr	r3, [pc, #164]	@ (800d7ec <HAL_RCC_ClockConfig+0x1ec>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f003 0307 	and.w	r3, r3, #7
 800d74e:	683a      	ldr	r2, [r7, #0]
 800d750:	429a      	cmp	r2, r3
 800d752:	d210      	bcs.n	800d776 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d754:	4b25      	ldr	r3, [pc, #148]	@ (800d7ec <HAL_RCC_ClockConfig+0x1ec>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f023 0207 	bic.w	r2, r3, #7
 800d75c:	4923      	ldr	r1, [pc, #140]	@ (800d7ec <HAL_RCC_ClockConfig+0x1ec>)
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	4313      	orrs	r3, r2
 800d762:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d764:	4b21      	ldr	r3, [pc, #132]	@ (800d7ec <HAL_RCC_ClockConfig+0x1ec>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f003 0307 	and.w	r3, r3, #7
 800d76c:	683a      	ldr	r2, [r7, #0]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d001      	beq.n	800d776 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800d772:	2301      	movs	r3, #1
 800d774:	e036      	b.n	800d7e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f003 0304 	and.w	r3, r3, #4
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d008      	beq.n	800d794 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d782:	4b1b      	ldr	r3, [pc, #108]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d784:	689b      	ldr	r3, [r3, #8]
 800d786:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	4918      	ldr	r1, [pc, #96]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d790:	4313      	orrs	r3, r2
 800d792:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f003 0308 	and.w	r3, r3, #8
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d009      	beq.n	800d7b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d7a0:	4b13      	ldr	r3, [pc, #76]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	691b      	ldr	r3, [r3, #16]
 800d7ac:	00db      	lsls	r3, r3, #3
 800d7ae:	4910      	ldr	r1, [pc, #64]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d7b4:	f000 f824 	bl	800d800 <HAL_RCC_GetSysClockFreq>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d7f0 <HAL_RCC_ClockConfig+0x1f0>)
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	091b      	lsrs	r3, r3, #4
 800d7c0:	f003 030f 	and.w	r3, r3, #15
 800d7c4:	490b      	ldr	r1, [pc, #44]	@ (800d7f4 <HAL_RCC_ClockConfig+0x1f4>)
 800d7c6:	5ccb      	ldrb	r3, [r1, r3]
 800d7c8:	f003 031f 	and.w	r3, r3, #31
 800d7cc:	fa22 f303 	lsr.w	r3, r2, r3
 800d7d0:	4a09      	ldr	r2, [pc, #36]	@ (800d7f8 <HAL_RCC_ClockConfig+0x1f8>)
 800d7d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d7d4:	4b09      	ldr	r3, [pc, #36]	@ (800d7fc <HAL_RCC_ClockConfig+0x1fc>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fb fe57 	bl	800948c <HAL_InitTick>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	72fb      	strb	r3, [r7, #11]

  return status;
 800d7e2:	7afb      	ldrb	r3, [r7, #11]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	40022000 	.word	0x40022000
 800d7f0:	40021000 	.word	0x40021000
 800d7f4:	08014730 	.word	0x08014730
 800d7f8:	20000168 	.word	0x20000168
 800d7fc:	20000174 	.word	0x20000174

0800d800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d800:	b480      	push	{r7}
 800d802:	b089      	sub	sp, #36	@ 0x24
 800d804:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800d806:	2300      	movs	r3, #0
 800d808:	61fb      	str	r3, [r7, #28]
 800d80a:	2300      	movs	r3, #0
 800d80c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d80e:	4b3e      	ldr	r3, [pc, #248]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x108>)
 800d810:	689b      	ldr	r3, [r3, #8]
 800d812:	f003 030c 	and.w	r3, r3, #12
 800d816:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d818:	4b3b      	ldr	r3, [pc, #236]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x108>)
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	f003 0303 	and.w	r3, r3, #3
 800d820:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d005      	beq.n	800d834 <HAL_RCC_GetSysClockFreq+0x34>
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	2b0c      	cmp	r3, #12
 800d82c:	d121      	bne.n	800d872 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2b01      	cmp	r3, #1
 800d832:	d11e      	bne.n	800d872 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d834:	4b34      	ldr	r3, [pc, #208]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x108>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f003 0308 	and.w	r3, r3, #8
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d107      	bne.n	800d850 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d840:	4b31      	ldr	r3, [pc, #196]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x108>)
 800d842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d846:	0a1b      	lsrs	r3, r3, #8
 800d848:	f003 030f 	and.w	r3, r3, #15
 800d84c:	61fb      	str	r3, [r7, #28]
 800d84e:	e005      	b.n	800d85c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d850:	4b2d      	ldr	r3, [pc, #180]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x108>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	091b      	lsrs	r3, r3, #4
 800d856:	f003 030f 	and.w	r3, r3, #15
 800d85a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800d85c:	4a2b      	ldr	r2, [pc, #172]	@ (800d90c <HAL_RCC_GetSysClockFreq+0x10c>)
 800d85e:	69fb      	ldr	r3, [r7, #28]
 800d860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d864:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d10d      	bne.n	800d888 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d870:	e00a      	b.n	800d888 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	2b04      	cmp	r3, #4
 800d876:	d102      	bne.n	800d87e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d878:	4b25      	ldr	r3, [pc, #148]	@ (800d910 <HAL_RCC_GetSysClockFreq+0x110>)
 800d87a:	61bb      	str	r3, [r7, #24]
 800d87c:	e004      	b.n	800d888 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	2b08      	cmp	r3, #8
 800d882:	d101      	bne.n	800d888 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d884:	4b23      	ldr	r3, [pc, #140]	@ (800d914 <HAL_RCC_GetSysClockFreq+0x114>)
 800d886:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	2b0c      	cmp	r3, #12
 800d88c:	d134      	bne.n	800d8f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d88e:	4b1e      	ldr	r3, [pc, #120]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x108>)
 800d890:	68db      	ldr	r3, [r3, #12]
 800d892:	f003 0303 	and.w	r3, r3, #3
 800d896:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	d003      	beq.n	800d8a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	2b03      	cmp	r3, #3
 800d8a2:	d003      	beq.n	800d8ac <HAL_RCC_GetSysClockFreq+0xac>
 800d8a4:	e005      	b.n	800d8b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800d8a6:	4b1a      	ldr	r3, [pc, #104]	@ (800d910 <HAL_RCC_GetSysClockFreq+0x110>)
 800d8a8:	617b      	str	r3, [r7, #20]
      break;
 800d8aa:	e005      	b.n	800d8b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800d8ac:	4b19      	ldr	r3, [pc, #100]	@ (800d914 <HAL_RCC_GetSysClockFreq+0x114>)
 800d8ae:	617b      	str	r3, [r7, #20]
      break;
 800d8b0:	e002      	b.n	800d8b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	617b      	str	r3, [r7, #20]
      break;
 800d8b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d8b8:	4b13      	ldr	r3, [pc, #76]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x108>)
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	091b      	lsrs	r3, r3, #4
 800d8be:	f003 0307 	and.w	r3, r3, #7
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d8c6:	4b10      	ldr	r3, [pc, #64]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x108>)
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	0a1b      	lsrs	r3, r3, #8
 800d8cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8d0:	697a      	ldr	r2, [r7, #20]
 800d8d2:	fb03 f202 	mul.w	r2, r3, r2
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d8de:	4b0a      	ldr	r3, [pc, #40]	@ (800d908 <HAL_RCC_GetSysClockFreq+0x108>)
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	0e5b      	lsrs	r3, r3, #25
 800d8e4:	f003 0303 	and.w	r3, r3, #3
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	005b      	lsls	r3, r3, #1
 800d8ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800d8ee:	697a      	ldr	r2, [r7, #20]
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800d8f8:	69bb      	ldr	r3, [r7, #24]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3724      	adds	r7, #36	@ 0x24
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr
 800d906:	bf00      	nop
 800d908:	40021000 	.word	0x40021000
 800d90c:	08014748 	.word	0x08014748
 800d910:	00f42400 	.word	0x00f42400
 800d914:	007a1200 	.word	0x007a1200

0800d918 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d918:	b480      	push	{r7}
 800d91a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d91c:	4b03      	ldr	r3, [pc, #12]	@ (800d92c <HAL_RCC_GetHCLKFreq+0x14>)
 800d91e:	681b      	ldr	r3, [r3, #0]
}
 800d920:	4618      	mov	r0, r3
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	20000168 	.word	0x20000168

0800d930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d934:	f7ff fff0 	bl	800d918 <HAL_RCC_GetHCLKFreq>
 800d938:	4602      	mov	r2, r0
 800d93a:	4b06      	ldr	r3, [pc, #24]	@ (800d954 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	0a1b      	lsrs	r3, r3, #8
 800d940:	f003 0307 	and.w	r3, r3, #7
 800d944:	4904      	ldr	r1, [pc, #16]	@ (800d958 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d946:	5ccb      	ldrb	r3, [r1, r3]
 800d948:	f003 031f 	and.w	r3, r3, #31
 800d94c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d950:	4618      	mov	r0, r3
 800d952:	bd80      	pop	{r7, pc}
 800d954:	40021000 	.word	0x40021000
 800d958:	08014740 	.word	0x08014740

0800d95c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d960:	f7ff ffda 	bl	800d918 <HAL_RCC_GetHCLKFreq>
 800d964:	4602      	mov	r2, r0
 800d966:	4b06      	ldr	r3, [pc, #24]	@ (800d980 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	0adb      	lsrs	r3, r3, #11
 800d96c:	f003 0307 	and.w	r3, r3, #7
 800d970:	4904      	ldr	r1, [pc, #16]	@ (800d984 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d972:	5ccb      	ldrb	r3, [r1, r3]
 800d974:	f003 031f 	and.w	r3, r3, #31
 800d978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	40021000 	.word	0x40021000
 800d984:	08014740 	.word	0x08014740

0800d988 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b086      	sub	sp, #24
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d990:	2300      	movs	r3, #0
 800d992:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d994:	4b2a      	ldr	r3, [pc, #168]	@ (800da40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d003      	beq.n	800d9a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d9a0:	f7fe fd8c 	bl	800c4bc <HAL_PWREx_GetVoltageRange>
 800d9a4:	6178      	str	r0, [r7, #20]
 800d9a6:	e014      	b.n	800d9d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800d9a8:	4b25      	ldr	r3, [pc, #148]	@ (800da40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d9aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9ac:	4a24      	ldr	r2, [pc, #144]	@ (800da40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d9ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d9b2:	6593      	str	r3, [r2, #88]	@ 0x58
 800d9b4:	4b22      	ldr	r3, [pc, #136]	@ (800da40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d9b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d9bc:	60fb      	str	r3, [r7, #12]
 800d9be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800d9c0:	f7fe fd7c 	bl	800c4bc <HAL_PWREx_GetVoltageRange>
 800d9c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d9c6:	4b1e      	ldr	r3, [pc, #120]	@ (800da40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d9c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9ca:	4a1d      	ldr	r2, [pc, #116]	@ (800da40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d9cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d9d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d9d8:	d10b      	bne.n	800d9f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2b80      	cmp	r3, #128	@ 0x80
 800d9de:	d919      	bls.n	800da14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2ba0      	cmp	r3, #160	@ 0xa0
 800d9e4:	d902      	bls.n	800d9ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d9e6:	2302      	movs	r3, #2
 800d9e8:	613b      	str	r3, [r7, #16]
 800d9ea:	e013      	b.n	800da14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	613b      	str	r3, [r7, #16]
 800d9f0:	e010      	b.n	800da14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2b80      	cmp	r3, #128	@ 0x80
 800d9f6:	d902      	bls.n	800d9fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800d9f8:	2303      	movs	r3, #3
 800d9fa:	613b      	str	r3, [r7, #16]
 800d9fc:	e00a      	b.n	800da14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2b80      	cmp	r3, #128	@ 0x80
 800da02:	d102      	bne.n	800da0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800da04:	2302      	movs	r3, #2
 800da06:	613b      	str	r3, [r7, #16]
 800da08:	e004      	b.n	800da14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2b70      	cmp	r3, #112	@ 0x70
 800da0e:	d101      	bne.n	800da14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800da10:	2301      	movs	r3, #1
 800da12:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800da14:	4b0b      	ldr	r3, [pc, #44]	@ (800da44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f023 0207 	bic.w	r2, r3, #7
 800da1c:	4909      	ldr	r1, [pc, #36]	@ (800da44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	4313      	orrs	r3, r2
 800da22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800da24:	4b07      	ldr	r3, [pc, #28]	@ (800da44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	f003 0307 	and.w	r3, r3, #7
 800da2c:	693a      	ldr	r2, [r7, #16]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d001      	beq.n	800da36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800da32:	2301      	movs	r3, #1
 800da34:	e000      	b.n	800da38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800da36:	2300      	movs	r3, #0
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3718      	adds	r7, #24
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	40021000 	.word	0x40021000
 800da44:	40022000 	.word	0x40022000

0800da48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b086      	sub	sp, #24
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800da50:	2300      	movs	r3, #0
 800da52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800da54:	2300      	movs	r3, #0
 800da56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800da60:	2b00      	cmp	r3, #0
 800da62:	d041      	beq.n	800dae8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800da6c:	d02a      	beq.n	800dac4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800da6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800da72:	d824      	bhi.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0x76>
 800da74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800da78:	d008      	beq.n	800da8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800da7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800da7e:	d81e      	bhi.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0x76>
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00a      	beq.n	800da9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800da84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800da88:	d010      	beq.n	800daac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800da8a:	e018      	b.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800da8c:	4b86      	ldr	r3, [pc, #536]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800da8e:	68db      	ldr	r3, [r3, #12]
 800da90:	4a85      	ldr	r2, [pc, #532]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800da92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800da96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800da98:	e015      	b.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	3304      	adds	r3, #4
 800da9e:	2100      	movs	r1, #0
 800daa0:	4618      	mov	r0, r3
 800daa2:	f000 fabb 	bl	800e01c <RCCEx_PLLSAI1_Config>
 800daa6:	4603      	mov	r3, r0
 800daa8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800daaa:	e00c      	b.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	3320      	adds	r3, #32
 800dab0:	2100      	movs	r1, #0
 800dab2:	4618      	mov	r0, r3
 800dab4:	f000 fba6 	bl	800e204 <RCCEx_PLLSAI2_Config>
 800dab8:	4603      	mov	r3, r0
 800daba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800dabc:	e003      	b.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dabe:	2301      	movs	r3, #1
 800dac0:	74fb      	strb	r3, [r7, #19]
      break;
 800dac2:	e000      	b.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800dac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dac6:	7cfb      	ldrb	r3, [r7, #19]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10b      	bne.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dacc:	4b76      	ldr	r3, [pc, #472]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dad2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dada:	4973      	ldr	r1, [pc, #460]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dadc:	4313      	orrs	r3, r2
 800dade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800dae2:	e001      	b.n	800dae8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dae4:	7cfb      	ldrb	r3, [r7, #19]
 800dae6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d041      	beq.n	800db78 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800daf8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800dafc:	d02a      	beq.n	800db54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800dafe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800db02:	d824      	bhi.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800db04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800db08:	d008      	beq.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800db0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800db0e:	d81e      	bhi.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00a      	beq.n	800db2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800db14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db18:	d010      	beq.n	800db3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800db1a:	e018      	b.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800db1c:	4b62      	ldr	r3, [pc, #392]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	4a61      	ldr	r2, [pc, #388]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800db22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800db26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800db28:	e015      	b.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	3304      	adds	r3, #4
 800db2e:	2100      	movs	r1, #0
 800db30:	4618      	mov	r0, r3
 800db32:	f000 fa73 	bl	800e01c <RCCEx_PLLSAI1_Config>
 800db36:	4603      	mov	r3, r0
 800db38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800db3a:	e00c      	b.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	3320      	adds	r3, #32
 800db40:	2100      	movs	r1, #0
 800db42:	4618      	mov	r0, r3
 800db44:	f000 fb5e 	bl	800e204 <RCCEx_PLLSAI2_Config>
 800db48:	4603      	mov	r3, r0
 800db4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800db4c:	e003      	b.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800db4e:	2301      	movs	r3, #1
 800db50:	74fb      	strb	r3, [r7, #19]
      break;
 800db52:	e000      	b.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800db54:	bf00      	nop
    }

    if(ret == HAL_OK)
 800db56:	7cfb      	ldrb	r3, [r7, #19]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d10b      	bne.n	800db74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800db5c:	4b52      	ldr	r3, [pc, #328]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800db5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db62:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800db6a:	494f      	ldr	r1, [pc, #316]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800db6c:	4313      	orrs	r3, r2
 800db6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800db72:	e001      	b.n	800db78 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db74:	7cfb      	ldrb	r3, [r7, #19]
 800db76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db80:	2b00      	cmp	r3, #0
 800db82:	f000 80a0 	beq.w	800dcc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800db86:	2300      	movs	r3, #0
 800db88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800db8a:	4b47      	ldr	r3, [pc, #284]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800db8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800db92:	2b00      	cmp	r3, #0
 800db94:	d101      	bne.n	800db9a <HAL_RCCEx_PeriphCLKConfig+0x152>
 800db96:	2301      	movs	r3, #1
 800db98:	e000      	b.n	800db9c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800db9a:	2300      	movs	r3, #0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d00d      	beq.n	800dbbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dba0:	4b41      	ldr	r3, [pc, #260]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dba4:	4a40      	ldr	r2, [pc, #256]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dbaa:	6593      	str	r3, [r2, #88]	@ 0x58
 800dbac:	4b3e      	ldr	r3, [pc, #248]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dbae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dbb4:	60bb      	str	r3, [r7, #8]
 800dbb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dbbc:	4b3b      	ldr	r3, [pc, #236]	@ (800dcac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a3a      	ldr	r2, [pc, #232]	@ (800dcac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800dbc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dbc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dbc8:	f7fb fcb0 	bl	800952c <HAL_GetTick>
 800dbcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800dbce:	e009      	b.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dbd0:	f7fb fcac 	bl	800952c <HAL_GetTick>
 800dbd4:	4602      	mov	r2, r0
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	1ad3      	subs	r3, r2, r3
 800dbda:	2b02      	cmp	r3, #2
 800dbdc:	d902      	bls.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800dbde:	2303      	movs	r3, #3
 800dbe0:	74fb      	strb	r3, [r7, #19]
        break;
 800dbe2:	e005      	b.n	800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800dbe4:	4b31      	ldr	r3, [pc, #196]	@ (800dcac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d0ef      	beq.n	800dbd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800dbf0:	7cfb      	ldrb	r3, [r7, #19]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d15c      	bne.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800dbf6:	4b2c      	ldr	r3, [pc, #176]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dbf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dbfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dc00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d01f      	beq.n	800dc48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dc0e:	697a      	ldr	r2, [r7, #20]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d019      	beq.n	800dc48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800dc14:	4b24      	ldr	r3, [pc, #144]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dc1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800dc20:	4b21      	ldr	r3, [pc, #132]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc26:	4a20      	ldr	r2, [pc, #128]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800dc30:	4b1d      	ldr	r3, [pc, #116]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc36:	4a1c      	ldr	r2, [pc, #112]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dc3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800dc40:	4a19      	ldr	r2, [pc, #100]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	f003 0301 	and.w	r3, r3, #1
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d016      	beq.n	800dc80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc52:	f7fb fc6b 	bl	800952c <HAL_GetTick>
 800dc56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dc58:	e00b      	b.n	800dc72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dc5a:	f7fb fc67 	bl	800952c <HAL_GetTick>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	1ad3      	subs	r3, r2, r3
 800dc64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d902      	bls.n	800dc72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800dc6c:	2303      	movs	r3, #3
 800dc6e:	74fb      	strb	r3, [r7, #19]
            break;
 800dc70:	e006      	b.n	800dc80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dc72:	4b0d      	ldr	r3, [pc, #52]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc78:	f003 0302 	and.w	r3, r3, #2
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d0ec      	beq.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800dc80:	7cfb      	ldrb	r3, [r7, #19]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d10c      	bne.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dc86:	4b08      	ldr	r3, [pc, #32]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dc96:	4904      	ldr	r1, [pc, #16]	@ (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800dc9e:	e009      	b.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dca0:	7cfb      	ldrb	r3, [r7, #19]
 800dca2:	74bb      	strb	r3, [r7, #18]
 800dca4:	e006      	b.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800dca6:	bf00      	nop
 800dca8:	40021000 	.word	0x40021000
 800dcac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcb0:	7cfb      	ldrb	r3, [r7, #19]
 800dcb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800dcb4:	7c7b      	ldrb	r3, [r7, #17]
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d105      	bne.n	800dcc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dcba:	4b9e      	ldr	r3, [pc, #632]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dcbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcbe:	4a9d      	ldr	r2, [pc, #628]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dcc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dcc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f003 0301 	and.w	r3, r3, #1
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00a      	beq.n	800dce8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dcd2:	4b98      	ldr	r3, [pc, #608]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dcd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dcd8:	f023 0203 	bic.w	r2, r3, #3
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dce0:	4994      	ldr	r1, [pc, #592]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dce2:	4313      	orrs	r3, r2
 800dce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f003 0302 	and.w	r3, r3, #2
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00a      	beq.n	800dd0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800dcf4:	4b8f      	ldr	r3, [pc, #572]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dcf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dcfa:	f023 020c 	bic.w	r2, r3, #12
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd02:	498c      	ldr	r1, [pc, #560]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd04:	4313      	orrs	r3, r2
 800dd06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f003 0304 	and.w	r3, r3, #4
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d00a      	beq.n	800dd2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800dd16:	4b87      	ldr	r3, [pc, #540]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd24:	4983      	ldr	r1, [pc, #524]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd26:	4313      	orrs	r3, r2
 800dd28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f003 0308 	and.w	r3, r3, #8
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00a      	beq.n	800dd4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dd38:	4b7e      	ldr	r3, [pc, #504]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd46:	497b      	ldr	r1, [pc, #492]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f003 0310 	and.w	r3, r3, #16
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00a      	beq.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800dd5a:	4b76      	ldr	r3, [pc, #472]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd68:	4972      	ldr	r1, [pc, #456]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f003 0320 	and.w	r3, r3, #32
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00a      	beq.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dd7c:	4b6d      	ldr	r3, [pc, #436]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd8a:	496a      	ldr	r1, [pc, #424]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00a      	beq.n	800ddb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dd9e:	4b65      	ldr	r3, [pc, #404]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dda0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dda4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddac:	4961      	ldr	r1, [pc, #388]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d00a      	beq.n	800ddd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ddc0:	4b5c      	ldr	r3, [pc, #368]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ddc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ddc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ddce:	4959      	ldr	r1, [pc, #356]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ddd0:	4313      	orrs	r3, r2
 800ddd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d00a      	beq.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dde2:	4b54      	ldr	r3, [pc, #336]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dde4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dde8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddf0:	4950      	ldr	r1, [pc, #320]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de00:	2b00      	cmp	r3, #0
 800de02:	d00a      	beq.n	800de1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800de04:	4b4b      	ldr	r3, [pc, #300]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de0a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de12:	4948      	ldr	r1, [pc, #288]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de14:	4313      	orrs	r3, r2
 800de16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de22:	2b00      	cmp	r3, #0
 800de24:	d00a      	beq.n	800de3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800de26:	4b43      	ldr	r3, [pc, #268]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de34:	493f      	ldr	r1, [pc, #252]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de36:	4313      	orrs	r3, r2
 800de38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800de44:	2b00      	cmp	r3, #0
 800de46:	d028      	beq.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800de48:	4b3a      	ldr	r3, [pc, #232]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de56:	4937      	ldr	r1, [pc, #220]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de58:	4313      	orrs	r3, r2
 800de5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de66:	d106      	bne.n	800de76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800de68:	4b32      	ldr	r3, [pc, #200]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de6a:	68db      	ldr	r3, [r3, #12]
 800de6c:	4a31      	ldr	r2, [pc, #196]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800de6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800de72:	60d3      	str	r3, [r2, #12]
 800de74:	e011      	b.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800de7e:	d10c      	bne.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	3304      	adds	r3, #4
 800de84:	2101      	movs	r1, #1
 800de86:	4618      	mov	r0, r3
 800de88:	f000 f8c8 	bl	800e01c <RCCEx_PLLSAI1_Config>
 800de8c:	4603      	mov	r3, r0
 800de8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800de90:	7cfb      	ldrb	r3, [r7, #19]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d001      	beq.n	800de9a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800de96:	7cfb      	ldrb	r3, [r7, #19]
 800de98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d028      	beq.n	800def8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800dea6:	4b23      	ldr	r3, [pc, #140]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800deac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800deb4:	491f      	ldr	r1, [pc, #124]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800deb6:	4313      	orrs	r3, r2
 800deb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dec0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dec4:	d106      	bne.n	800ded4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dec6:	4b1b      	ldr	r3, [pc, #108]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	4a1a      	ldr	r2, [pc, #104]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800decc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ded0:	60d3      	str	r3, [r2, #12]
 800ded2:	e011      	b.n	800def8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ded8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dedc:	d10c      	bne.n	800def8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	3304      	adds	r3, #4
 800dee2:	2101      	movs	r1, #1
 800dee4:	4618      	mov	r0, r3
 800dee6:	f000 f899 	bl	800e01c <RCCEx_PLLSAI1_Config>
 800deea:	4603      	mov	r3, r0
 800deec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800deee:	7cfb      	ldrb	r3, [r7, #19]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d001      	beq.n	800def8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800def4:	7cfb      	ldrb	r3, [r7, #19]
 800def6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800df00:	2b00      	cmp	r3, #0
 800df02:	d02b      	beq.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800df04:	4b0b      	ldr	r3, [pc, #44]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df12:	4908      	ldr	r1, [pc, #32]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df14:	4313      	orrs	r3, r2
 800df16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800df22:	d109      	bne.n	800df38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800df24:	4b03      	ldr	r3, [pc, #12]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	4a02      	ldr	r2, [pc, #8]	@ (800df34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800df2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df2e:	60d3      	str	r3, [r2, #12]
 800df30:	e014      	b.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x514>
 800df32:	bf00      	nop
 800df34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800df40:	d10c      	bne.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	3304      	adds	r3, #4
 800df46:	2101      	movs	r1, #1
 800df48:	4618      	mov	r0, r3
 800df4a:	f000 f867 	bl	800e01c <RCCEx_PLLSAI1_Config>
 800df4e:	4603      	mov	r3, r0
 800df50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800df52:	7cfb      	ldrb	r3, [r7, #19]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d001      	beq.n	800df5c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800df58:	7cfb      	ldrb	r3, [r7, #19]
 800df5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800df64:	2b00      	cmp	r3, #0
 800df66:	d02f      	beq.n	800dfc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800df68:	4b2b      	ldr	r3, [pc, #172]	@ (800e018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800df6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df76:	4928      	ldr	r1, [pc, #160]	@ (800e018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800df78:	4313      	orrs	r3, r2
 800df7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df86:	d10d      	bne.n	800dfa4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	3304      	adds	r3, #4
 800df8c:	2102      	movs	r1, #2
 800df8e:	4618      	mov	r0, r3
 800df90:	f000 f844 	bl	800e01c <RCCEx_PLLSAI1_Config>
 800df94:	4603      	mov	r3, r0
 800df96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800df98:	7cfb      	ldrb	r3, [r7, #19]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d014      	beq.n	800dfc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800df9e:	7cfb      	ldrb	r3, [r7, #19]
 800dfa0:	74bb      	strb	r3, [r7, #18]
 800dfa2:	e011      	b.n	800dfc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dfa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dfac:	d10c      	bne.n	800dfc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	3320      	adds	r3, #32
 800dfb2:	2102      	movs	r1, #2
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f000 f925 	bl	800e204 <RCCEx_PLLSAI2_Config>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800dfbe:	7cfb      	ldrb	r3, [r7, #19]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d001      	beq.n	800dfc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800dfc4:	7cfb      	ldrb	r3, [r7, #19]
 800dfc6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00a      	beq.n	800dfea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dfd4:	4b10      	ldr	r3, [pc, #64]	@ (800e018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800dfd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfda:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dfe2:	490d      	ldr	r1, [pc, #52]	@ (800e018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d00b      	beq.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800dff6:	4b08      	ldr	r3, [pc, #32]	@ (800e018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800dff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dffc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e006:	4904      	ldr	r1, [pc, #16]	@ (800e018 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800e008:	4313      	orrs	r3, r2
 800e00a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800e00e:	7cbb      	ldrb	r3, [r7, #18]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3718      	adds	r7, #24
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	40021000 	.word	0x40021000

0800e01c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e026:	2300      	movs	r3, #0
 800e028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800e02a:	4b75      	ldr	r3, [pc, #468]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	f003 0303 	and.w	r3, r3, #3
 800e032:	2b00      	cmp	r3, #0
 800e034:	d018      	beq.n	800e068 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800e036:	4b72      	ldr	r3, [pc, #456]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e038:	68db      	ldr	r3, [r3, #12]
 800e03a:	f003 0203 	and.w	r2, r3, #3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	429a      	cmp	r2, r3
 800e044:	d10d      	bne.n	800e062 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
       ||
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d009      	beq.n	800e062 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800e04e:	4b6c      	ldr	r3, [pc, #432]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e050:	68db      	ldr	r3, [r3, #12]
 800e052:	091b      	lsrs	r3, r3, #4
 800e054:	f003 0307 	and.w	r3, r3, #7
 800e058:	1c5a      	adds	r2, r3, #1
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	685b      	ldr	r3, [r3, #4]
       ||
 800e05e:	429a      	cmp	r2, r3
 800e060:	d047      	beq.n	800e0f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800e062:	2301      	movs	r3, #1
 800e064:	73fb      	strb	r3, [r7, #15]
 800e066:	e044      	b.n	800e0f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	2b03      	cmp	r3, #3
 800e06e:	d018      	beq.n	800e0a2 <RCCEx_PLLSAI1_Config+0x86>
 800e070:	2b03      	cmp	r3, #3
 800e072:	d825      	bhi.n	800e0c0 <RCCEx_PLLSAI1_Config+0xa4>
 800e074:	2b01      	cmp	r3, #1
 800e076:	d002      	beq.n	800e07e <RCCEx_PLLSAI1_Config+0x62>
 800e078:	2b02      	cmp	r3, #2
 800e07a:	d009      	beq.n	800e090 <RCCEx_PLLSAI1_Config+0x74>
 800e07c:	e020      	b.n	800e0c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800e07e:	4b60      	ldr	r3, [pc, #384]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f003 0302 	and.w	r3, r3, #2
 800e086:	2b00      	cmp	r3, #0
 800e088:	d11d      	bne.n	800e0c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800e08a:	2301      	movs	r3, #1
 800e08c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e08e:	e01a      	b.n	800e0c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800e090:	4b5b      	ldr	r3, [pc, #364]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d116      	bne.n	800e0ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800e09c:	2301      	movs	r3, #1
 800e09e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e0a0:	e013      	b.n	800e0ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800e0a2:	4b57      	ldr	r3, [pc, #348]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d10f      	bne.n	800e0ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800e0ae:	4b54      	ldr	r3, [pc, #336]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d109      	bne.n	800e0ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e0be:	e006      	b.n	800e0ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	73fb      	strb	r3, [r7, #15]
      break;
 800e0c4:	e004      	b.n	800e0d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800e0c6:	bf00      	nop
 800e0c8:	e002      	b.n	800e0d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800e0ca:	bf00      	nop
 800e0cc:	e000      	b.n	800e0d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800e0ce:	bf00      	nop
    }

    if(status == HAL_OK)
 800e0d0:	7bfb      	ldrb	r3, [r7, #15]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d10d      	bne.n	800e0f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800e0d6:	4b4a      	ldr	r3, [pc, #296]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e0d8:	68db      	ldr	r3, [r3, #12]
 800e0da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6819      	ldr	r1, [r3, #0]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	011b      	lsls	r3, r3, #4
 800e0ea:	430b      	orrs	r3, r1
 800e0ec:	4944      	ldr	r1, [pc, #272]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800e0f2:	7bfb      	ldrb	r3, [r7, #15]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d17d      	bne.n	800e1f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800e0f8:	4b41      	ldr	r3, [pc, #260]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4a40      	ldr	r2, [pc, #256]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e0fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e104:	f7fb fa12 	bl	800952c <HAL_GetTick>
 800e108:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e10a:	e009      	b.n	800e120 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e10c:	f7fb fa0e 	bl	800952c <HAL_GetTick>
 800e110:	4602      	mov	r2, r0
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	1ad3      	subs	r3, r2, r3
 800e116:	2b02      	cmp	r3, #2
 800e118:	d902      	bls.n	800e120 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800e11a:	2303      	movs	r3, #3
 800e11c:	73fb      	strb	r3, [r7, #15]
        break;
 800e11e:	e005      	b.n	800e12c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e120:	4b37      	ldr	r3, [pc, #220]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d1ef      	bne.n	800e10c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800e12c:	7bfb      	ldrb	r3, [r7, #15]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d160      	bne.n	800e1f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d111      	bne.n	800e15c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e138:	4b31      	ldr	r3, [pc, #196]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e13a:	691b      	ldr	r3, [r3, #16]
 800e13c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800e140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	6892      	ldr	r2, [r2, #8]
 800e148:	0211      	lsls	r1, r2, #8
 800e14a:	687a      	ldr	r2, [r7, #4]
 800e14c:	68d2      	ldr	r2, [r2, #12]
 800e14e:	0912      	lsrs	r2, r2, #4
 800e150:	0452      	lsls	r2, r2, #17
 800e152:	430a      	orrs	r2, r1
 800e154:	492a      	ldr	r1, [pc, #168]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e156:	4313      	orrs	r3, r2
 800e158:	610b      	str	r3, [r1, #16]
 800e15a:	e027      	b.n	800e1ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d112      	bne.n	800e188 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e162:	4b27      	ldr	r3, [pc, #156]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e164:	691b      	ldr	r3, [r3, #16]
 800e166:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800e16a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	6892      	ldr	r2, [r2, #8]
 800e172:	0211      	lsls	r1, r2, #8
 800e174:	687a      	ldr	r2, [r7, #4]
 800e176:	6912      	ldr	r2, [r2, #16]
 800e178:	0852      	lsrs	r2, r2, #1
 800e17a:	3a01      	subs	r2, #1
 800e17c:	0552      	lsls	r2, r2, #21
 800e17e:	430a      	orrs	r2, r1
 800e180:	491f      	ldr	r1, [pc, #124]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e182:	4313      	orrs	r3, r2
 800e184:	610b      	str	r3, [r1, #16]
 800e186:	e011      	b.n	800e1ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e188:	4b1d      	ldr	r3, [pc, #116]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e18a:	691b      	ldr	r3, [r3, #16]
 800e18c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800e190:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	6892      	ldr	r2, [r2, #8]
 800e198:	0211      	lsls	r1, r2, #8
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	6952      	ldr	r2, [r2, #20]
 800e19e:	0852      	lsrs	r2, r2, #1
 800e1a0:	3a01      	subs	r2, #1
 800e1a2:	0652      	lsls	r2, r2, #25
 800e1a4:	430a      	orrs	r2, r1
 800e1a6:	4916      	ldr	r1, [pc, #88]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e1a8:	4313      	orrs	r3, r2
 800e1aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800e1ac:	4b14      	ldr	r3, [pc, #80]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a13      	ldr	r2, [pc, #76]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e1b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e1b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e1b8:	f7fb f9b8 	bl	800952c <HAL_GetTick>
 800e1bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e1be:	e009      	b.n	800e1d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e1c0:	f7fb f9b4 	bl	800952c <HAL_GetTick>
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	1ad3      	subs	r3, r2, r3
 800e1ca:	2b02      	cmp	r3, #2
 800e1cc:	d902      	bls.n	800e1d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800e1ce:	2303      	movs	r3, #3
 800e1d0:	73fb      	strb	r3, [r7, #15]
          break;
 800e1d2:	e005      	b.n	800e1e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e1d4:	4b0a      	ldr	r3, [pc, #40]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d0ef      	beq.n	800e1c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800e1e0:	7bfb      	ldrb	r3, [r7, #15]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d106      	bne.n	800e1f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800e1e6:	4b06      	ldr	r3, [pc, #24]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e1e8:	691a      	ldr	r2, [r3, #16]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	699b      	ldr	r3, [r3, #24]
 800e1ee:	4904      	ldr	r1, [pc, #16]	@ (800e200 <RCCEx_PLLSAI1_Config+0x1e4>)
 800e1f0:	4313      	orrs	r3, r2
 800e1f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800e1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	40021000 	.word	0x40021000

0800e204 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e20e:	2300      	movs	r3, #0
 800e210:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800e212:	4b6a      	ldr	r3, [pc, #424]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e214:	68db      	ldr	r3, [r3, #12]
 800e216:	f003 0303 	and.w	r3, r3, #3
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d018      	beq.n	800e250 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800e21e:	4b67      	ldr	r3, [pc, #412]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e220:	68db      	ldr	r3, [r3, #12]
 800e222:	f003 0203 	and.w	r2, r3, #3
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d10d      	bne.n	800e24a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
       ||
 800e232:	2b00      	cmp	r3, #0
 800e234:	d009      	beq.n	800e24a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800e236:	4b61      	ldr	r3, [pc, #388]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	091b      	lsrs	r3, r3, #4
 800e23c:	f003 0307 	and.w	r3, r3, #7
 800e240:	1c5a      	adds	r2, r3, #1
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	685b      	ldr	r3, [r3, #4]
       ||
 800e246:	429a      	cmp	r2, r3
 800e248:	d047      	beq.n	800e2da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800e24a:	2301      	movs	r3, #1
 800e24c:	73fb      	strb	r3, [r7, #15]
 800e24e:	e044      	b.n	800e2da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2b03      	cmp	r3, #3
 800e256:	d018      	beq.n	800e28a <RCCEx_PLLSAI2_Config+0x86>
 800e258:	2b03      	cmp	r3, #3
 800e25a:	d825      	bhi.n	800e2a8 <RCCEx_PLLSAI2_Config+0xa4>
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d002      	beq.n	800e266 <RCCEx_PLLSAI2_Config+0x62>
 800e260:	2b02      	cmp	r3, #2
 800e262:	d009      	beq.n	800e278 <RCCEx_PLLSAI2_Config+0x74>
 800e264:	e020      	b.n	800e2a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800e266:	4b55      	ldr	r3, [pc, #340]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f003 0302 	and.w	r3, r3, #2
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d11d      	bne.n	800e2ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800e272:	2301      	movs	r3, #1
 800e274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e276:	e01a      	b.n	800e2ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800e278:	4b50      	ldr	r3, [pc, #320]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e280:	2b00      	cmp	r3, #0
 800e282:	d116      	bne.n	800e2b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800e284:	2301      	movs	r3, #1
 800e286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e288:	e013      	b.n	800e2b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800e28a:	4b4c      	ldr	r3, [pc, #304]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e292:	2b00      	cmp	r3, #0
 800e294:	d10f      	bne.n	800e2b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800e296:	4b49      	ldr	r3, [pc, #292]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d109      	bne.n	800e2b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e2a6:	e006      	b.n	800e2b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	73fb      	strb	r3, [r7, #15]
      break;
 800e2ac:	e004      	b.n	800e2b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800e2ae:	bf00      	nop
 800e2b0:	e002      	b.n	800e2b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800e2b2:	bf00      	nop
 800e2b4:	e000      	b.n	800e2b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800e2b6:	bf00      	nop
    }

    if(status == HAL_OK)
 800e2b8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d10d      	bne.n	800e2da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800e2be:	4b3f      	ldr	r3, [pc, #252]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6819      	ldr	r1, [r3, #0]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	3b01      	subs	r3, #1
 800e2d0:	011b      	lsls	r3, r3, #4
 800e2d2:	430b      	orrs	r3, r1
 800e2d4:	4939      	ldr	r1, [pc, #228]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800e2da:	7bfb      	ldrb	r3, [r7, #15]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d167      	bne.n	800e3b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800e2e0:	4b36      	ldr	r3, [pc, #216]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4a35      	ldr	r2, [pc, #212]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e2e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e2ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e2ec:	f7fb f91e 	bl	800952c <HAL_GetTick>
 800e2f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800e2f2:	e009      	b.n	800e308 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800e2f4:	f7fb f91a 	bl	800952c <HAL_GetTick>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	1ad3      	subs	r3, r2, r3
 800e2fe:	2b02      	cmp	r3, #2
 800e300:	d902      	bls.n	800e308 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800e302:	2303      	movs	r3, #3
 800e304:	73fb      	strb	r3, [r7, #15]
        break;
 800e306:	e005      	b.n	800e314 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800e308:	4b2c      	ldr	r3, [pc, #176]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e310:	2b00      	cmp	r3, #0
 800e312:	d1ef      	bne.n	800e2f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800e314:	7bfb      	ldrb	r3, [r7, #15]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d14a      	bne.n	800e3b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d111      	bne.n	800e344 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800e320:	4b26      	ldr	r3, [pc, #152]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e322:	695b      	ldr	r3, [r3, #20]
 800e324:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800e328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	6892      	ldr	r2, [r2, #8]
 800e330:	0211      	lsls	r1, r2, #8
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	68d2      	ldr	r2, [r2, #12]
 800e336:	0912      	lsrs	r2, r2, #4
 800e338:	0452      	lsls	r2, r2, #17
 800e33a:	430a      	orrs	r2, r1
 800e33c:	491f      	ldr	r1, [pc, #124]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e33e:	4313      	orrs	r3, r2
 800e340:	614b      	str	r3, [r1, #20]
 800e342:	e011      	b.n	800e368 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800e344:	4b1d      	ldr	r3, [pc, #116]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e346:	695b      	ldr	r3, [r3, #20]
 800e348:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800e34c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	6892      	ldr	r2, [r2, #8]
 800e354:	0211      	lsls	r1, r2, #8
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	6912      	ldr	r2, [r2, #16]
 800e35a:	0852      	lsrs	r2, r2, #1
 800e35c:	3a01      	subs	r2, #1
 800e35e:	0652      	lsls	r2, r2, #25
 800e360:	430a      	orrs	r2, r1
 800e362:	4916      	ldr	r1, [pc, #88]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e364:	4313      	orrs	r3, r2
 800e366:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800e368:	4b14      	ldr	r3, [pc, #80]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a13      	ldr	r2, [pc, #76]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e36e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e372:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e374:	f7fb f8da 	bl	800952c <HAL_GetTick>
 800e378:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800e37a:	e009      	b.n	800e390 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800e37c:	f7fb f8d6 	bl	800952c <HAL_GetTick>
 800e380:	4602      	mov	r2, r0
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	1ad3      	subs	r3, r2, r3
 800e386:	2b02      	cmp	r3, #2
 800e388:	d902      	bls.n	800e390 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800e38a:	2303      	movs	r3, #3
 800e38c:	73fb      	strb	r3, [r7, #15]
          break;
 800e38e:	e005      	b.n	800e39c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800e390:	4b0a      	ldr	r3, [pc, #40]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d0ef      	beq.n	800e37c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800e39c:	7bfb      	ldrb	r3, [r7, #15]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d106      	bne.n	800e3b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800e3a2:	4b06      	ldr	r3, [pc, #24]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e3a4:	695a      	ldr	r2, [r3, #20]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	695b      	ldr	r3, [r3, #20]
 800e3aa:	4904      	ldr	r1, [pc, #16]	@ (800e3bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800e3ac:	4313      	orrs	r3, r2
 800e3ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800e3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	40021000 	.word	0x40021000

0800e3c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d079      	beq.n	800e4c6 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800e3d8:	b2db      	uxtb	r3, r3
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d106      	bne.n	800e3ec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f7f7 fc3c 	bl	8005c64 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2202      	movs	r2, #2
 800e3f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	f003 0310 	and.w	r3, r3, #16
 800e3fe:	2b10      	cmp	r3, #16
 800e400:	d058      	beq.n	800e4b4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	22ca      	movs	r2, #202	@ 0xca
 800e408:	625a      	str	r2, [r3, #36]	@ 0x24
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2253      	movs	r2, #83	@ 0x53
 800e410:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 fb82 	bl	800eb1c <RTC_EnterInitMode>
 800e418:	4603      	mov	r3, r0
 800e41a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800e41c:	7bfb      	ldrb	r3, [r7, #15]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d127      	bne.n	800e472 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	687a      	ldr	r2, [r7, #4]
 800e42a:	6812      	ldr	r2, [r2, #0]
 800e42c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e434:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	6899      	ldr	r1, [r3, #8]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	685a      	ldr	r2, [r3, #4]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	691b      	ldr	r3, [r3, #16]
 800e444:	431a      	orrs	r2, r3
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	699b      	ldr	r3, [r3, #24]
 800e44a:	431a      	orrs	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	430a      	orrs	r2, r1
 800e452:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	68d2      	ldr	r2, [r2, #12]
 800e45c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	6919      	ldr	r1, [r3, #16]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	041a      	lsls	r2, r3, #16
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	430a      	orrs	r2, r1
 800e470:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f000 fb86 	bl	800eb84 <RTC_ExitInitMode>
 800e478:	4603      	mov	r3, r0
 800e47a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800e47c:	7bfb      	ldrb	r3, [r7, #15]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d113      	bne.n	800e4aa <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f022 0203 	bic.w	r2, r2, #3
 800e490:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	69da      	ldr	r2, [r3, #28]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	695b      	ldr	r3, [r3, #20]
 800e4a0:	431a      	orrs	r2, r3
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	430a      	orrs	r2, r1
 800e4a8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	22ff      	movs	r2, #255	@ 0xff
 800e4b0:	625a      	str	r2, [r3, #36]	@ 0x24
 800e4b2:	e001      	b.n	800e4b8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800e4b8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d103      	bne.n	800e4c6 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2201      	movs	r2, #1
 800e4c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800e4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3710      	adds	r7, #16
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e4d0:	b590      	push	{r4, r7, lr}
 800e4d2:	b087      	sub	sp, #28
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d101      	bne.n	800e4ea <HAL_RTC_SetTime+0x1a>
 800e4e6:	2302      	movs	r3, #2
 800e4e8:	e08b      	b.n	800e602 <HAL_RTC_SetTime+0x132>
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2202      	movs	r2, #2
 800e4f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	22ca      	movs	r2, #202	@ 0xca
 800e500:	625a      	str	r2, [r3, #36]	@ 0x24
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2253      	movs	r2, #83	@ 0x53
 800e508:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800e50a:	68f8      	ldr	r0, [r7, #12]
 800e50c:	f000 fb06 	bl	800eb1c <RTC_EnterInitMode>
 800e510:	4603      	mov	r3, r0
 800e512:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800e514:	7cfb      	ldrb	r3, [r7, #19]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d163      	bne.n	800e5e2 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d126      	bne.n	800e56e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d102      	bne.n	800e534 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	2200      	movs	r2, #0
 800e532:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	4618      	mov	r0, r3
 800e53a:	f000 fb61 	bl	800ec00 <RTC_ByteToBcd2>
 800e53e:	4603      	mov	r3, r0
 800e540:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	785b      	ldrb	r3, [r3, #1]
 800e546:	4618      	mov	r0, r3
 800e548:	f000 fb5a 	bl	800ec00 <RTC_ByteToBcd2>
 800e54c:	4603      	mov	r3, r0
 800e54e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e550:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	789b      	ldrb	r3, [r3, #2]
 800e556:	4618      	mov	r0, r3
 800e558:	f000 fb52 	bl	800ec00 <RTC_ByteToBcd2>
 800e55c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e55e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	78db      	ldrb	r3, [r3, #3]
 800e566:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e568:	4313      	orrs	r3, r2
 800e56a:	617b      	str	r3, [r7, #20]
 800e56c:	e018      	b.n	800e5a0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	689b      	ldr	r3, [r3, #8]
 800e574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d102      	bne.n	800e582 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	2200      	movs	r2, #0
 800e580:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	785b      	ldrb	r3, [r3, #1]
 800e58c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e58e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800e590:	68ba      	ldr	r2, [r7, #8]
 800e592:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e594:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	78db      	ldrb	r3, [r3, #3]
 800e59a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e59c:	4313      	orrs	r3, r2
 800e59e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800e5aa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800e5ae:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	689a      	ldr	r2, [r3, #8]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800e5be:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	6899      	ldr	r1, [r3, #8]
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	68da      	ldr	r2, [r3, #12]
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	691b      	ldr	r3, [r3, #16]
 800e5ce:	431a      	orrs	r2, r3
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	430a      	orrs	r2, r1
 800e5d6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f000 fad3 	bl	800eb84 <RTC_ExitInitMode>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	22ff      	movs	r2, #255	@ 0xff
 800e5e8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800e5ea:	7cfb      	ldrb	r3, [r7, #19]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d103      	bne.n	800e5f8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800e600:	7cfb      	ldrb	r3, [r7, #19]
}
 800e602:	4618      	mov	r0, r3
 800e604:	371c      	adds	r7, #28
 800e606:	46bd      	mov	sp, r7
 800e608:	bd90      	pop	{r4, r7, pc}

0800e60a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b086      	sub	sp, #24
 800e60e:	af00      	add	r7, sp, #0
 800e610:	60f8      	str	r0, [r7, #12]
 800e612:	60b9      	str	r1, [r7, #8]
 800e614:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	691b      	ldr	r3, [r3, #16]
 800e626:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800e638:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800e63c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	0c1b      	lsrs	r3, r3, #16
 800e642:	b2db      	uxtb	r3, r3
 800e644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e648:	b2da      	uxtb	r2, r3
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	0a1b      	lsrs	r3, r3, #8
 800e652:	b2db      	uxtb	r3, r3
 800e654:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e658:	b2da      	uxtb	r2, r3
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	b2db      	uxtb	r3, r3
 800e662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e666:	b2da      	uxtb	r2, r3
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	0d9b      	lsrs	r3, r3, #22
 800e670:	b2db      	uxtb	r3, r3
 800e672:	f003 0301 	and.w	r3, r3, #1
 800e676:	b2da      	uxtb	r2, r3
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d11a      	bne.n	800e6b8 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	4618      	mov	r0, r3
 800e688:	f000 fada 	bl	800ec40 <RTC_Bcd2ToByte>
 800e68c:	4603      	mov	r3, r0
 800e68e:	461a      	mov	r2, r3
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	785b      	ldrb	r3, [r3, #1]
 800e698:	4618      	mov	r0, r3
 800e69a:	f000 fad1 	bl	800ec40 <RTC_Bcd2ToByte>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	789b      	ldrb	r3, [r3, #2]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f000 fac8 	bl	800ec40 <RTC_Bcd2ToByte>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800e6b8:	2300      	movs	r3, #0
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3718      	adds	r7, #24
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e6c2:	b590      	push	{r4, r7, lr}
 800e6c4:	b087      	sub	sp, #28
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	60f8      	str	r0, [r7, #12]
 800e6ca:	60b9      	str	r1, [r7, #8]
 800e6cc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d101      	bne.n	800e6dc <HAL_RTC_SetDate+0x1a>
 800e6d8:	2302      	movs	r3, #2
 800e6da:	e075      	b.n	800e7c8 <HAL_RTC_SetDate+0x106>
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2202      	movs	r2, #2
 800e6e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d10e      	bne.n	800e710 <HAL_RTC_SetDate+0x4e>
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	785b      	ldrb	r3, [r3, #1]
 800e6f6:	f003 0310 	and.w	r3, r3, #16
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d008      	beq.n	800e710 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	785b      	ldrb	r3, [r3, #1]
 800e702:	f023 0310 	bic.w	r3, r3, #16
 800e706:	b2db      	uxtb	r3, r3
 800e708:	330a      	adds	r3, #10
 800e70a:	b2da      	uxtb	r2, r3
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d11c      	bne.n	800e750 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	78db      	ldrb	r3, [r3, #3]
 800e71a:	4618      	mov	r0, r3
 800e71c:	f000 fa70 	bl	800ec00 <RTC_ByteToBcd2>
 800e720:	4603      	mov	r3, r0
 800e722:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	785b      	ldrb	r3, [r3, #1]
 800e728:	4618      	mov	r0, r3
 800e72a:	f000 fa69 	bl	800ec00 <RTC_ByteToBcd2>
 800e72e:	4603      	mov	r3, r0
 800e730:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800e732:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	789b      	ldrb	r3, [r3, #2]
 800e738:	4618      	mov	r0, r3
 800e73a:	f000 fa61 	bl	800ec00 <RTC_ByteToBcd2>
 800e73e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e740:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800e74a:	4313      	orrs	r3, r2
 800e74c:	617b      	str	r3, [r7, #20]
 800e74e:	e00e      	b.n	800e76e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	78db      	ldrb	r3, [r3, #3]
 800e754:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	785b      	ldrb	r3, [r3, #1]
 800e75a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e75c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800e75e:	68ba      	ldr	r2, [r7, #8]
 800e760:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800e762:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e76a:	4313      	orrs	r3, r2
 800e76c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	22ca      	movs	r2, #202	@ 0xca
 800e774:	625a      	str	r2, [r3, #36]	@ 0x24
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2253      	movs	r2, #83	@ 0x53
 800e77c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800e77e:	68f8      	ldr	r0, [r7, #12]
 800e780:	f000 f9cc 	bl	800eb1c <RTC_EnterInitMode>
 800e784:	4603      	mov	r3, r0
 800e786:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800e788:	7cfb      	ldrb	r3, [r7, #19]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d10c      	bne.n	800e7a8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e798:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e79c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f000 f9f0 	bl	800eb84 <RTC_ExitInitMode>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	22ff      	movs	r2, #255	@ 0xff
 800e7ae:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800e7b0:	7cfb      	ldrb	r3, [r7, #19]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d103      	bne.n	800e7be <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800e7c6:	7cfb      	ldrb	r3, [r7, #19]
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	371c      	adds	r7, #28
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd90      	pop	{r4, r7, pc}

0800e7d0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800e7d0:	b590      	push	{r4, r7, lr}
 800e7d2:	b089      	sub	sp, #36	@ 0x24
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d101      	bne.n	800e7ea <HAL_RTC_SetAlarm_IT+0x1a>
 800e7e6:	2302      	movs	r3, #2
 800e7e8:	e127      	b.n	800ea3a <HAL_RTC_SetAlarm_IT+0x26a>
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2202      	movs	r2, #2
 800e7f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d137      	bne.n	800e870 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	689b      	ldr	r3, [r3, #8]
 800e806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d102      	bne.n	800e814 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	2200      	movs	r2, #0
 800e812:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	4618      	mov	r0, r3
 800e81a:	f000 f9f1 	bl	800ec00 <RTC_ByteToBcd2>
 800e81e:	4603      	mov	r3, r0
 800e820:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	785b      	ldrb	r3, [r3, #1]
 800e826:	4618      	mov	r0, r3
 800e828:	f000 f9ea 	bl	800ec00 <RTC_ByteToBcd2>
 800e82c:	4603      	mov	r3, r0
 800e82e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e830:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	789b      	ldrb	r3, [r3, #2]
 800e836:	4618      	mov	r0, r3
 800e838:	f000 f9e2 	bl	800ec00 <RTC_ByteToBcd2>
 800e83c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e83e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	78db      	ldrb	r3, [r3, #3]
 800e846:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e848:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e852:	4618      	mov	r0, r3
 800e854:	f000 f9d4 	bl	800ec00 <RTC_ByteToBcd2>
 800e858:	4603      	mov	r3, r0
 800e85a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e85c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e864:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e86a:	4313      	orrs	r3, r2
 800e86c:	61fb      	str	r3, [r7, #28]
 800e86e:	e023      	b.n	800e8b8 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	689b      	ldr	r3, [r3, #8]
 800e876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d102      	bne.n	800e884 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	2200      	movs	r2, #0
 800e882:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	785b      	ldrb	r3, [r3, #1]
 800e88e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e890:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e892:	68ba      	ldr	r2, [r7, #8]
 800e894:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e896:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	78db      	ldrb	r3, [r3, #3]
 800e89c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e89e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e8a6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e8a8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e8ae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e8b4:	4313      	orrs	r3, r2
 800e8b6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	685a      	ldr	r2, [r3, #4]
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	69db      	ldr	r3, [r3, #28]
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	22ca      	movs	r2, #202	@ 0xca
 800e8ca:	625a      	str	r2, [r3, #36]	@ 0x24
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2253      	movs	r2, #83	@ 0x53
 800e8d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8dc:	d14a      	bne.n	800e974 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	689a      	ldr	r2, [r3, #8]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e8ec:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	68db      	ldr	r3, [r3, #12]
 800e8f4:	b2da      	uxtb	r2, r3
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800e8fe:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800e900:	f7fa fe14 	bl	800952c <HAL_GetTick>
 800e904:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800e906:	e015      	b.n	800e934 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e908:	f7fa fe10 	bl	800952c <HAL_GetTick>
 800e90c:	4602      	mov	r2, r0
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	1ad3      	subs	r3, r2, r3
 800e912:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e916:	d90d      	bls.n	800e934 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	22ff      	movs	r2, #255	@ 0xff
 800e91e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	2203      	movs	r2, #3
 800e924:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2200      	movs	r2, #0
 800e92c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800e930:	2303      	movs	r3, #3
 800e932:	e082      	b.n	800ea3a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	f003 0301 	and.w	r3, r3, #1
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d0e2      	beq.n	800e908 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	69fa      	ldr	r2, [r7, #28]
 800e948:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	69ba      	ldr	r2, [r7, #24]
 800e950:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	689a      	ldr	r2, [r3, #8]
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e960:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	689a      	ldr	r2, [r3, #8]
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e970:	609a      	str	r2, [r3, #8]
 800e972:	e049      	b.n	800ea08 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	689a      	ldr	r2, [r3, #8]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800e982:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	68db      	ldr	r3, [r3, #12]
 800e98a:	b2da      	uxtb	r2, r3
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800e994:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800e996:	f7fa fdc9 	bl	800952c <HAL_GetTick>
 800e99a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800e99c:	e015      	b.n	800e9ca <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e99e:	f7fa fdc5 	bl	800952c <HAL_GetTick>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	1ad3      	subs	r3, r2, r3
 800e9a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e9ac:	d90d      	bls.n	800e9ca <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	22ff      	movs	r2, #255	@ 0xff
 800e9b4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2203      	movs	r2, #3
 800e9ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800e9c6:	2303      	movs	r3, #3
 800e9c8:	e037      	b.n	800ea3a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	f003 0302 	and.w	r3, r3, #2
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d0e2      	beq.n	800e99e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	69fa      	ldr	r2, [r7, #28]
 800e9de:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	69ba      	ldr	r2, [r7, #24]
 800e9e6:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	689a      	ldr	r2, [r3, #8]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e9f6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	689a      	ldr	r2, [r3, #8]
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ea06:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800ea08:	4b0e      	ldr	r3, [pc, #56]	@ (800ea44 <HAL_RTC_SetAlarm_IT+0x274>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4a0d      	ldr	r2, [pc, #52]	@ (800ea44 <HAL_RTC_SetAlarm_IT+0x274>)
 800ea0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ea12:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800ea14:	4b0b      	ldr	r3, [pc, #44]	@ (800ea44 <HAL_RTC_SetAlarm_IT+0x274>)
 800ea16:	689b      	ldr	r3, [r3, #8]
 800ea18:	4a0a      	ldr	r2, [pc, #40]	@ (800ea44 <HAL_RTC_SetAlarm_IT+0x274>)
 800ea1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ea1e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	22ff      	movs	r2, #255	@ 0xff
 800ea26:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2200      	movs	r2, #0
 800ea34:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800ea38:	2300      	movs	r3, #0
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3724      	adds	r7, #36	@ 0x24
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd90      	pop	{r4, r7, pc}
 800ea42:	bf00      	nop
 800ea44:	40010400 	.word	0x40010400

0800ea48 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800ea50:	4b1f      	ldr	r3, [pc, #124]	@ (800ead0 <HAL_RTC_AlarmIRQHandler+0x88>)
 800ea52:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ea56:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	689b      	ldr	r3, [r3, #8]
 800ea5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d012      	beq.n	800ea8c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00b      	beq.n	800ea8c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	68db      	ldr	r3, [r3, #12]
 800ea7a:	b2da      	uxtb	r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800ea84:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f7f3 f98c 	bl	8001da4 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d012      	beq.n	800eac0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d00b      	beq.n	800eac0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	68db      	ldr	r3, [r3, #12]
 800eaae:	b2da      	uxtb	r2, r3
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800eab8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f000 f8da 	bl	800ec74 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2201      	movs	r2, #1
 800eac4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800eac8:	bf00      	nop
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	40010400 	.word	0x40010400

0800ead4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	4a0d      	ldr	r2, [pc, #52]	@ (800eb18 <HAL_RTC_WaitForSynchro+0x44>)
 800eae2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800eae4:	f7fa fd22 	bl	800952c <HAL_GetTick>
 800eae8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800eaea:	e009      	b.n	800eb00 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800eaec:	f7fa fd1e 	bl	800952c <HAL_GetTick>
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	1ad3      	subs	r3, r2, r3
 800eaf6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eafa:	d901      	bls.n	800eb00 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800eafc:	2303      	movs	r3, #3
 800eafe:	e007      	b.n	800eb10 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	f003 0320 	and.w	r3, r3, #32
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d0ee      	beq.n	800eaec <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800eb0e:	2300      	movs	r3, #0
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3710      	adds	r7, #16
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	0003ff5f 	.word	0x0003ff5f

0800eb1c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eb24:	2300      	movs	r3, #0
 800eb26:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	68db      	ldr	r3, [r3, #12]
 800eb2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d120      	bne.n	800eb78 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb3e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800eb40:	f7fa fcf4 	bl	800952c <HAL_GetTick>
 800eb44:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800eb46:	e00d      	b.n	800eb64 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800eb48:	f7fa fcf0 	bl	800952c <HAL_GetTick>
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	1ad3      	subs	r3, r2, r3
 800eb52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eb56:	d905      	bls.n	800eb64 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800eb58:	2303      	movs	r3, #3
 800eb5a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2203      	movs	r2, #3
 800eb60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d102      	bne.n	800eb78 <RTC_EnterInitMode+0x5c>
 800eb72:	7bfb      	ldrb	r3, [r7, #15]
 800eb74:	2b03      	cmp	r3, #3
 800eb76:	d1e7      	bne.n	800eb48 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800eb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3710      	adds	r7, #16
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
	...

0800eb84 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800eb90:	4b1a      	ldr	r3, [pc, #104]	@ (800ebfc <RTC_ExitInitMode+0x78>)
 800eb92:	68db      	ldr	r3, [r3, #12]
 800eb94:	4a19      	ldr	r2, [pc, #100]	@ (800ebfc <RTC_ExitInitMode+0x78>)
 800eb96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb9a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800eb9c:	4b17      	ldr	r3, [pc, #92]	@ (800ebfc <RTC_ExitInitMode+0x78>)
 800eb9e:	689b      	ldr	r3, [r3, #8]
 800eba0:	f003 0320 	and.w	r3, r3, #32
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d10c      	bne.n	800ebc2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f7ff ff93 	bl	800ead4 <HAL_RTC_WaitForSynchro>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d01e      	beq.n	800ebf2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2203      	movs	r2, #3
 800ebb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800ebbc:	2303      	movs	r3, #3
 800ebbe:	73fb      	strb	r3, [r7, #15]
 800ebc0:	e017      	b.n	800ebf2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ebc2:	4b0e      	ldr	r3, [pc, #56]	@ (800ebfc <RTC_ExitInitMode+0x78>)
 800ebc4:	689b      	ldr	r3, [r3, #8]
 800ebc6:	4a0d      	ldr	r2, [pc, #52]	@ (800ebfc <RTC_ExitInitMode+0x78>)
 800ebc8:	f023 0320 	bic.w	r3, r3, #32
 800ebcc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f7ff ff80 	bl	800ead4 <HAL_RTC_WaitForSynchro>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d005      	beq.n	800ebe6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2203      	movs	r2, #3
 800ebde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800ebe2:	2303      	movs	r3, #3
 800ebe4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ebe6:	4b05      	ldr	r3, [pc, #20]	@ (800ebfc <RTC_ExitInitMode+0x78>)
 800ebe8:	689b      	ldr	r3, [r3, #8]
 800ebea:	4a04      	ldr	r2, [pc, #16]	@ (800ebfc <RTC_ExitInitMode+0x78>)
 800ebec:	f043 0320 	orr.w	r3, r3, #32
 800ebf0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800ebf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3710      	adds	r7, #16
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	40002800 	.word	0x40002800

0800ec00 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b085      	sub	sp, #20
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	4603      	mov	r3, r0
 800ec08:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800ec0e:	79fb      	ldrb	r3, [r7, #7]
 800ec10:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800ec12:	e005      	b.n	800ec20 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	3301      	adds	r3, #1
 800ec18:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800ec1a:	7afb      	ldrb	r3, [r7, #11]
 800ec1c:	3b0a      	subs	r3, #10
 800ec1e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800ec20:	7afb      	ldrb	r3, [r7, #11]
 800ec22:	2b09      	cmp	r3, #9
 800ec24:	d8f6      	bhi.n	800ec14 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	b2db      	uxtb	r3, r3
 800ec2a:	011b      	lsls	r3, r3, #4
 800ec2c:	b2da      	uxtb	r2, r3
 800ec2e:	7afb      	ldrb	r3, [r7, #11]
 800ec30:	4313      	orrs	r3, r2
 800ec32:	b2db      	uxtb	r3, r3
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3714      	adds	r7, #20
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr

0800ec40 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b085      	sub	sp, #20
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	4603      	mov	r3, r0
 800ec48:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800ec4a:	79fb      	ldrb	r3, [r7, #7]
 800ec4c:	091b      	lsrs	r3, r3, #4
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	461a      	mov	r2, r3
 800ec52:	0092      	lsls	r2, r2, #2
 800ec54:	4413      	add	r3, r2
 800ec56:	005b      	lsls	r3, r3, #1
 800ec58:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800ec5a:	79fb      	ldrb	r3, [r7, #7]
 800ec5c:	f003 030f 	and.w	r3, r3, #15
 800ec60:	b2da      	uxtb	r2, r3
 800ec62:	7bfb      	ldrb	r3, [r7, #15]
 800ec64:	4413      	add	r3, r2
 800ec66:	b2db      	uxtb	r3, r3
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3714      	adds	r7, #20
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800ec7c:	bf00      	nop
 800ec7e:	370c      	adds	r7, #12
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d101      	bne.n	800ec9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ec96:	2301      	movs	r3, #1
 800ec98:	e095      	b.n	800edc6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d108      	bne.n	800ecb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ecaa:	d009      	beq.n	800ecc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	61da      	str	r2, [r3, #28]
 800ecb2:	e005      	b.n	800ecc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d106      	bne.n	800ece0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7f6 fffc 	bl	8005cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2202      	movs	r2, #2
 800ece4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ecf6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	68db      	ldr	r3, [r3, #12]
 800ecfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ed00:	d902      	bls.n	800ed08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ed02:	2300      	movs	r3, #0
 800ed04:	60fb      	str	r3, [r7, #12]
 800ed06:	e002      	b.n	800ed0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ed08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ed0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	68db      	ldr	r3, [r3, #12]
 800ed12:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800ed16:	d007      	beq.n	800ed28 <HAL_SPI_Init+0xa0>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ed20:	d002      	beq.n	800ed28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2200      	movs	r2, #0
 800ed26:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ed38:	431a      	orrs	r2, r3
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	691b      	ldr	r3, [r3, #16]
 800ed3e:	f003 0302 	and.w	r3, r3, #2
 800ed42:	431a      	orrs	r2, r3
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	695b      	ldr	r3, [r3, #20]
 800ed48:	f003 0301 	and.w	r3, r3, #1
 800ed4c:	431a      	orrs	r2, r3
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	699b      	ldr	r3, [r3, #24]
 800ed52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ed56:	431a      	orrs	r2, r3
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	69db      	ldr	r3, [r3, #28]
 800ed5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ed60:	431a      	orrs	r2, r3
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6a1b      	ldr	r3, [r3, #32]
 800ed66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed6a:	ea42 0103 	orr.w	r1, r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed72:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	430a      	orrs	r2, r1
 800ed7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	699b      	ldr	r3, [r3, #24]
 800ed82:	0c1b      	lsrs	r3, r3, #16
 800ed84:	f003 0204 	and.w	r2, r3, #4
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed8c:	f003 0310 	and.w	r3, r3, #16
 800ed90:	431a      	orrs	r2, r3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed96:	f003 0308 	and.w	r3, r3, #8
 800ed9a:	431a      	orrs	r2, r3
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	68db      	ldr	r3, [r3, #12]
 800eda0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800eda4:	ea42 0103 	orr.w	r1, r2, r3
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	430a      	orrs	r2, r1
 800edb4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2200      	movs	r2, #0
 800edba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2201      	movs	r2, #1
 800edc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800edc4:	2300      	movs	r3, #0
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3710      	adds	r7, #16
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800edce:	b580      	push	{r7, lr}
 800edd0:	b088      	sub	sp, #32
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	60f8      	str	r0, [r7, #12]
 800edd6:	60b9      	str	r1, [r7, #8]
 800edd8:	603b      	str	r3, [r7, #0]
 800edda:	4613      	mov	r3, r2
 800eddc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800edde:	f7fa fba5 	bl	800952c <HAL_GetTick>
 800ede2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800ede4:	88fb      	ldrh	r3, [r7, #6]
 800ede6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800edee:	b2db      	uxtb	r3, r3
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	d001      	beq.n	800edf8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800edf4:	2302      	movs	r3, #2
 800edf6:	e15c      	b.n	800f0b2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d002      	beq.n	800ee04 <HAL_SPI_Transmit+0x36>
 800edfe:	88fb      	ldrh	r3, [r7, #6]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d101      	bne.n	800ee08 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800ee04:	2301      	movs	r3, #1
 800ee06:	e154      	b.n	800f0b2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d101      	bne.n	800ee16 <HAL_SPI_Transmit+0x48>
 800ee12:	2302      	movs	r3, #2
 800ee14:	e14d      	b.n	800f0b2 <HAL_SPI_Transmit+0x2e4>
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2203      	movs	r2, #3
 800ee22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	68ba      	ldr	r2, [r7, #8]
 800ee30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	88fa      	ldrh	r2, [r7, #6]
 800ee36:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	88fa      	ldrh	r2, [r7, #6]
 800ee3c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2200      	movs	r2, #0
 800ee42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2200      	movs	r2, #0
 800ee48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2200      	movs	r2, #0
 800ee58:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee68:	d10f      	bne.n	800ee8a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ee78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	681a      	ldr	r2, [r3, #0]
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ee88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee94:	2b40      	cmp	r3, #64	@ 0x40
 800ee96:	d007      	beq.n	800eea8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eea6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800eeb0:	d952      	bls.n	800ef58 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d002      	beq.n	800eec0 <HAL_SPI_Transmit+0xf2>
 800eeba:	8b7b      	ldrh	r3, [r7, #26]
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d145      	bne.n	800ef4c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eec4:	881a      	ldrh	r2, [r3, #0]
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eed0:	1c9a      	adds	r2, r3, #2
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	3b01      	subs	r3, #1
 800eede:	b29a      	uxth	r2, r3
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800eee4:	e032      	b.n	800ef4c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	f003 0302 	and.w	r3, r3, #2
 800eef0:	2b02      	cmp	r3, #2
 800eef2:	d112      	bne.n	800ef1a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eef8:	881a      	ldrh	r2, [r3, #0]
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef04:	1c9a      	adds	r2, r3, #2
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	3b01      	subs	r3, #1
 800ef12:	b29a      	uxth	r2, r3
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ef18:	e018      	b.n	800ef4c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef1a:	f7fa fb07 	bl	800952c <HAL_GetTick>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	69fb      	ldr	r3, [r7, #28]
 800ef22:	1ad3      	subs	r3, r2, r3
 800ef24:	683a      	ldr	r2, [r7, #0]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d803      	bhi.n	800ef32 <HAL_SPI_Transmit+0x164>
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef30:	d102      	bne.n	800ef38 <HAL_SPI_Transmit+0x16a>
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d109      	bne.n	800ef4c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2200      	movs	r2, #0
 800ef44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800ef48:	2303      	movs	r3, #3
 800ef4a:	e0b2      	b.n	800f0b2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d1c7      	bne.n	800eee6 <HAL_SPI_Transmit+0x118>
 800ef56:	e083      	b.n	800f060 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d002      	beq.n	800ef66 <HAL_SPI_Transmit+0x198>
 800ef60:	8b7b      	ldrh	r3, [r7, #26]
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	d177      	bne.n	800f056 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d912      	bls.n	800ef96 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef74:	881a      	ldrh	r2, [r3, #0]
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef80:	1c9a      	adds	r2, r3, #2
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	3b02      	subs	r3, #2
 800ef8e:	b29a      	uxth	r2, r3
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ef94:	e05f      	b.n	800f056 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	330c      	adds	r3, #12
 800efa0:	7812      	ldrb	r2, [r2, #0]
 800efa2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efa8:	1c5a      	adds	r2, r3, #1
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	3b01      	subs	r3, #1
 800efb6:	b29a      	uxth	r2, r3
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800efbc:	e04b      	b.n	800f056 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	689b      	ldr	r3, [r3, #8]
 800efc4:	f003 0302 	and.w	r3, r3, #2
 800efc8:	2b02      	cmp	r3, #2
 800efca:	d12b      	bne.n	800f024 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800efd0:	b29b      	uxth	r3, r3
 800efd2:	2b01      	cmp	r3, #1
 800efd4:	d912      	bls.n	800effc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efda:	881a      	ldrh	r2, [r3, #0]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efe6:	1c9a      	adds	r2, r3, #2
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800eff0:	b29b      	uxth	r3, r3
 800eff2:	3b02      	subs	r3, #2
 800eff4:	b29a      	uxth	r2, r3
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800effa:	e02c      	b.n	800f056 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	330c      	adds	r3, #12
 800f006:	7812      	ldrb	r2, [r2, #0]
 800f008:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f00e:	1c5a      	adds	r2, r3, #1
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f018:	b29b      	uxth	r3, r3
 800f01a:	3b01      	subs	r3, #1
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f022:	e018      	b.n	800f056 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f024:	f7fa fa82 	bl	800952c <HAL_GetTick>
 800f028:	4602      	mov	r2, r0
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	1ad3      	subs	r3, r2, r3
 800f02e:	683a      	ldr	r2, [r7, #0]
 800f030:	429a      	cmp	r2, r3
 800f032:	d803      	bhi.n	800f03c <HAL_SPI_Transmit+0x26e>
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f03a:	d102      	bne.n	800f042 <HAL_SPI_Transmit+0x274>
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d109      	bne.n	800f056 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2201      	movs	r2, #1
 800f046:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2200      	movs	r2, #0
 800f04e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800f052:	2303      	movs	r3, #3
 800f054:	e02d      	b.n	800f0b2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d1ae      	bne.n	800efbe <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f060:	69fa      	ldr	r2, [r7, #28]
 800f062:	6839      	ldr	r1, [r7, #0]
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	f000 fcf5 	bl	800fa54 <SPI_EndRxTxTransaction>
 800f06a:	4603      	mov	r3, r0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d002      	beq.n	800f076 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	2220      	movs	r2, #32
 800f074:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	689b      	ldr	r3, [r3, #8]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d10a      	bne.n	800f094 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f07e:	2300      	movs	r3, #0
 800f080:	617b      	str	r3, [r7, #20]
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	68db      	ldr	r3, [r3, #12]
 800f088:	617b      	str	r3, [r7, #20]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	617b      	str	r3, [r7, #20]
 800f092:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2201      	movs	r2, #1
 800f098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d001      	beq.n	800f0b0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	e000      	b.n	800f0b2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800f0b0:	2300      	movs	r3, #0
  }
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3720      	adds	r7, #32
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f0ba:	b580      	push	{r7, lr}
 800f0bc:	b088      	sub	sp, #32
 800f0be:	af02      	add	r7, sp, #8
 800f0c0:	60f8      	str	r0, [r7, #12]
 800f0c2:	60b9      	str	r1, [r7, #8]
 800f0c4:	603b      	str	r3, [r7, #0]
 800f0c6:	4613      	mov	r3, r2
 800f0c8:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f0d0:	b2db      	uxtb	r3, r3
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d001      	beq.n	800f0da <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800f0d6:	2302      	movs	r3, #2
 800f0d8:	e123      	b.n	800f322 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	685b      	ldr	r3, [r3, #4]
 800f0de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f0e2:	d112      	bne.n	800f10a <HAL_SPI_Receive+0x50>
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	689b      	ldr	r3, [r3, #8]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d10e      	bne.n	800f10a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2204      	movs	r2, #4
 800f0f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f0f4:	88fa      	ldrh	r2, [r7, #6]
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	9300      	str	r3, [sp, #0]
 800f0fa:	4613      	mov	r3, r2
 800f0fc:	68ba      	ldr	r2, [r7, #8]
 800f0fe:	68b9      	ldr	r1, [r7, #8]
 800f100:	68f8      	ldr	r0, [r7, #12]
 800f102:	f000 f912 	bl	800f32a <HAL_SPI_TransmitReceive>
 800f106:	4603      	mov	r3, r0
 800f108:	e10b      	b.n	800f322 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f10a:	f7fa fa0f 	bl	800952c <HAL_GetTick>
 800f10e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d002      	beq.n	800f11c <HAL_SPI_Receive+0x62>
 800f116:	88fb      	ldrh	r3, [r7, #6]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d101      	bne.n	800f120 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800f11c:	2301      	movs	r3, #1
 800f11e:	e100      	b.n	800f322 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800f126:	2b01      	cmp	r3, #1
 800f128:	d101      	bne.n	800f12e <HAL_SPI_Receive+0x74>
 800f12a:	2302      	movs	r3, #2
 800f12c:	e0f9      	b.n	800f322 <HAL_SPI_Receive+0x268>
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2201      	movs	r2, #1
 800f132:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2204      	movs	r2, #4
 800f13a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2200      	movs	r2, #0
 800f142:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	68ba      	ldr	r2, [r7, #8]
 800f148:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	88fa      	ldrh	r2, [r7, #6]
 800f14e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	88fa      	ldrh	r2, [r7, #6]
 800f156:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2200      	movs	r2, #0
 800f15e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2200      	movs	r2, #0
 800f164:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2200      	movs	r2, #0
 800f16a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	2200      	movs	r2, #0
 800f170:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2200      	movs	r2, #0
 800f176:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	68db      	ldr	r3, [r3, #12]
 800f17c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f180:	d908      	bls.n	800f194 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	685a      	ldr	r2, [r3, #4]
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f190:	605a      	str	r2, [r3, #4]
 800f192:	e007      	b.n	800f1a4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	685a      	ldr	r2, [r3, #4]
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f1a2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f1ac:	d10f      	bne.n	800f1ce <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	681a      	ldr	r2, [r3, #0]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f1bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f1cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1d8:	2b40      	cmp	r3, #64	@ 0x40
 800f1da:	d007      	beq.n	800f1ec <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	681a      	ldr	r2, [r3, #0]
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f1ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f1f4:	d875      	bhi.n	800f2e2 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f1f6:	e037      	b.n	800f268 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	689b      	ldr	r3, [r3, #8]
 800f1fe:	f003 0301 	and.w	r3, r3, #1
 800f202:	2b01      	cmp	r3, #1
 800f204:	d117      	bne.n	800f236 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f103 020c 	add.w	r2, r3, #12
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f212:	7812      	ldrb	r2, [r2, #0]
 800f214:	b2d2      	uxtb	r2, r2
 800f216:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f21c:	1c5a      	adds	r2, r3, #1
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f228:	b29b      	uxth	r3, r3
 800f22a:	3b01      	subs	r3, #1
 800f22c:	b29a      	uxth	r2, r3
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800f234:	e018      	b.n	800f268 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f236:	f7fa f979 	bl	800952c <HAL_GetTick>
 800f23a:	4602      	mov	r2, r0
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	1ad3      	subs	r3, r2, r3
 800f240:	683a      	ldr	r2, [r7, #0]
 800f242:	429a      	cmp	r2, r3
 800f244:	d803      	bhi.n	800f24e <HAL_SPI_Receive+0x194>
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f24c:	d102      	bne.n	800f254 <HAL_SPI_Receive+0x19a>
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d109      	bne.n	800f268 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	2201      	movs	r2, #1
 800f258:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2200      	movs	r2, #0
 800f260:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800f264:	2303      	movs	r3, #3
 800f266:	e05c      	b.n	800f322 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f26e:	b29b      	uxth	r3, r3
 800f270:	2b00      	cmp	r3, #0
 800f272:	d1c1      	bne.n	800f1f8 <HAL_SPI_Receive+0x13e>
 800f274:	e03b      	b.n	800f2ee <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	689b      	ldr	r3, [r3, #8]
 800f27c:	f003 0301 	and.w	r3, r3, #1
 800f280:	2b01      	cmp	r3, #1
 800f282:	d115      	bne.n	800f2b0 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	68da      	ldr	r2, [r3, #12]
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f28e:	b292      	uxth	r2, r2
 800f290:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f296:	1c9a      	adds	r2, r3, #2
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	3b01      	subs	r3, #1
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800f2ae:	e018      	b.n	800f2e2 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2b0:	f7fa f93c 	bl	800952c <HAL_GetTick>
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	1ad3      	subs	r3, r2, r3
 800f2ba:	683a      	ldr	r2, [r7, #0]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d803      	bhi.n	800f2c8 <HAL_SPI_Receive+0x20e>
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2c6:	d102      	bne.n	800f2ce <HAL_SPI_Receive+0x214>
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d109      	bne.n	800f2e2 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2201      	movs	r2, #1
 800f2d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800f2de:	2303      	movs	r3, #3
 800f2e0:	e01f      	b.n	800f322 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d1c3      	bne.n	800f276 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f2ee:	697a      	ldr	r2, [r7, #20]
 800f2f0:	6839      	ldr	r1, [r7, #0]
 800f2f2:	68f8      	ldr	r0, [r7, #12]
 800f2f4:	f000 fb56 	bl	800f9a4 <SPI_EndRxTransaction>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d002      	beq.n	800f304 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2220      	movs	r2, #32
 800f302:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2201      	movs	r2, #1
 800f308:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2200      	movs	r2, #0
 800f310:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d001      	beq.n	800f320 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800f31c:	2301      	movs	r3, #1
 800f31e:	e000      	b.n	800f322 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800f320:	2300      	movs	r3, #0
  }
}
 800f322:	4618      	mov	r0, r3
 800f324:	3718      	adds	r7, #24
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}

0800f32a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f32a:	b580      	push	{r7, lr}
 800f32c:	b08a      	sub	sp, #40	@ 0x28
 800f32e:	af00      	add	r7, sp, #0
 800f330:	60f8      	str	r0, [r7, #12]
 800f332:	60b9      	str	r1, [r7, #8]
 800f334:	607a      	str	r2, [r7, #4]
 800f336:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f338:	2301      	movs	r3, #1
 800f33a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f33c:	f7fa f8f6 	bl	800952c <HAL_GetTick>
 800f340:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f348:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800f350:	887b      	ldrh	r3, [r7, #2]
 800f352:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800f354:	887b      	ldrh	r3, [r7, #2]
 800f356:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f358:	7ffb      	ldrb	r3, [r7, #31]
 800f35a:	2b01      	cmp	r3, #1
 800f35c:	d00c      	beq.n	800f378 <HAL_SPI_TransmitReceive+0x4e>
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f364:	d106      	bne.n	800f374 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	689b      	ldr	r3, [r3, #8]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d102      	bne.n	800f374 <HAL_SPI_TransmitReceive+0x4a>
 800f36e:	7ffb      	ldrb	r3, [r7, #31]
 800f370:	2b04      	cmp	r3, #4
 800f372:	d001      	beq.n	800f378 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800f374:	2302      	movs	r3, #2
 800f376:	e1f3      	b.n	800f760 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d005      	beq.n	800f38a <HAL_SPI_TransmitReceive+0x60>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d002      	beq.n	800f38a <HAL_SPI_TransmitReceive+0x60>
 800f384:	887b      	ldrh	r3, [r7, #2]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d101      	bne.n	800f38e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800f38a:	2301      	movs	r3, #1
 800f38c:	e1e8      	b.n	800f760 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800f394:	2b01      	cmp	r3, #1
 800f396:	d101      	bne.n	800f39c <HAL_SPI_TransmitReceive+0x72>
 800f398:	2302      	movs	r3, #2
 800f39a:	e1e1      	b.n	800f760 <HAL_SPI_TransmitReceive+0x436>
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2201      	movs	r2, #1
 800f3a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f3aa:	b2db      	uxtb	r3, r3
 800f3ac:	2b04      	cmp	r3, #4
 800f3ae:	d003      	beq.n	800f3b8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2205      	movs	r2, #5
 800f3b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	887a      	ldrh	r2, [r7, #2]
 800f3c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	887a      	ldrh	r2, [r7, #2]
 800f3d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	68ba      	ldr	r2, [r7, #8]
 800f3d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	887a      	ldrh	r2, [r7, #2]
 800f3de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	887a      	ldrh	r2, [r7, #2]
 800f3e4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	68db      	ldr	r3, [r3, #12]
 800f3f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f3fa:	d802      	bhi.n	800f402 <HAL_SPI_TransmitReceive+0xd8>
 800f3fc:	8abb      	ldrh	r3, [r7, #20]
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d908      	bls.n	800f414 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	685a      	ldr	r2, [r3, #4]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f410:	605a      	str	r2, [r3, #4]
 800f412:	e007      	b.n	800f424 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	685a      	ldr	r2, [r3, #4]
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f422:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f42e:	2b40      	cmp	r3, #64	@ 0x40
 800f430:	d007      	beq.n	800f442 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f440:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	68db      	ldr	r3, [r3, #12]
 800f446:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f44a:	f240 8083 	bls.w	800f554 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d002      	beq.n	800f45c <HAL_SPI_TransmitReceive+0x132>
 800f456:	8afb      	ldrh	r3, [r7, #22]
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d16f      	bne.n	800f53c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f460:	881a      	ldrh	r2, [r3, #0]
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f46c:	1c9a      	adds	r2, r3, #2
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f476:	b29b      	uxth	r3, r3
 800f478:	3b01      	subs	r3, #1
 800f47a:	b29a      	uxth	r2, r3
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f480:	e05c      	b.n	800f53c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	689b      	ldr	r3, [r3, #8]
 800f488:	f003 0302 	and.w	r3, r3, #2
 800f48c:	2b02      	cmp	r3, #2
 800f48e:	d11b      	bne.n	800f4c8 <HAL_SPI_TransmitReceive+0x19e>
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f494:	b29b      	uxth	r3, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	d016      	beq.n	800f4c8 <HAL_SPI_TransmitReceive+0x19e>
 800f49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f49c:	2b01      	cmp	r3, #1
 800f49e:	d113      	bne.n	800f4c8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4a4:	881a      	ldrh	r2, [r3, #0]
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4b0:	1c9a      	adds	r2, r3, #2
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	3b01      	subs	r3, #1
 800f4be:	b29a      	uxth	r2, r3
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	689b      	ldr	r3, [r3, #8]
 800f4ce:	f003 0301 	and.w	r3, r3, #1
 800f4d2:	2b01      	cmp	r3, #1
 800f4d4:	d11c      	bne.n	800f510 <HAL_SPI_TransmitReceive+0x1e6>
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d016      	beq.n	800f510 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	68da      	ldr	r2, [r3, #12]
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4ec:	b292      	uxth	r2, r2
 800f4ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4f4:	1c9a      	adds	r2, r3, #2
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f500:	b29b      	uxth	r3, r3
 800f502:	3b01      	subs	r3, #1
 800f504:	b29a      	uxth	r2, r3
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f50c:	2301      	movs	r3, #1
 800f50e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f510:	f7fa f80c 	bl	800952c <HAL_GetTick>
 800f514:	4602      	mov	r2, r0
 800f516:	6a3b      	ldr	r3, [r7, #32]
 800f518:	1ad3      	subs	r3, r2, r3
 800f51a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d80d      	bhi.n	800f53c <HAL_SPI_TransmitReceive+0x212>
 800f520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f526:	d009      	beq.n	800f53c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2201      	movs	r2, #1
 800f52c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	2200      	movs	r2, #0
 800f534:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800f538:	2303      	movs	r3, #3
 800f53a:	e111      	b.n	800f760 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f540:	b29b      	uxth	r3, r3
 800f542:	2b00      	cmp	r3, #0
 800f544:	d19d      	bne.n	800f482 <HAL_SPI_TransmitReceive+0x158>
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d197      	bne.n	800f482 <HAL_SPI_TransmitReceive+0x158>
 800f552:	e0e5      	b.n	800f720 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d003      	beq.n	800f564 <HAL_SPI_TransmitReceive+0x23a>
 800f55c:	8afb      	ldrh	r3, [r7, #22]
 800f55e:	2b01      	cmp	r3, #1
 800f560:	f040 80d1 	bne.w	800f706 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f568:	b29b      	uxth	r3, r3
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	d912      	bls.n	800f594 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f572:	881a      	ldrh	r2, [r3, #0]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f57e:	1c9a      	adds	r2, r3, #2
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f588:	b29b      	uxth	r3, r3
 800f58a:	3b02      	subs	r3, #2
 800f58c:	b29a      	uxth	r2, r3
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f592:	e0b8      	b.n	800f706 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	330c      	adds	r3, #12
 800f59e:	7812      	ldrb	r2, [r2, #0]
 800f5a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5a6:	1c5a      	adds	r2, r3, #1
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	3b01      	subs	r3, #1
 800f5b4:	b29a      	uxth	r2, r3
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f5ba:	e0a4      	b.n	800f706 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	689b      	ldr	r3, [r3, #8]
 800f5c2:	f003 0302 	and.w	r3, r3, #2
 800f5c6:	2b02      	cmp	r3, #2
 800f5c8:	d134      	bne.n	800f634 <HAL_SPI_TransmitReceive+0x30a>
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d02f      	beq.n	800f634 <HAL_SPI_TransmitReceive+0x30a>
 800f5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d12c      	bne.n	800f634 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d912      	bls.n	800f60a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5e8:	881a      	ldrh	r2, [r3, #0]
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5f4:	1c9a      	adds	r2, r3, #2
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	3b02      	subs	r3, #2
 800f602:	b29a      	uxth	r2, r3
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f608:	e012      	b.n	800f630 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	330c      	adds	r3, #12
 800f614:	7812      	ldrb	r2, [r2, #0]
 800f616:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f61c:	1c5a      	adds	r2, r3, #1
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f626:	b29b      	uxth	r3, r3
 800f628:	3b01      	subs	r3, #1
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f630:	2300      	movs	r3, #0
 800f632:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	689b      	ldr	r3, [r3, #8]
 800f63a:	f003 0301 	and.w	r3, r3, #1
 800f63e:	2b01      	cmp	r3, #1
 800f640:	d148      	bne.n	800f6d4 <HAL_SPI_TransmitReceive+0x3aa>
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f648:	b29b      	uxth	r3, r3
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d042      	beq.n	800f6d4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f654:	b29b      	uxth	r3, r3
 800f656:	2b01      	cmp	r3, #1
 800f658:	d923      	bls.n	800f6a2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	68da      	ldr	r2, [r3, #12]
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f664:	b292      	uxth	r2, r2
 800f666:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f66c:	1c9a      	adds	r2, r3, #2
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f678:	b29b      	uxth	r3, r3
 800f67a:	3b02      	subs	r3, #2
 800f67c:	b29a      	uxth	r2, r3
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d81f      	bhi.n	800f6d0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	685a      	ldr	r2, [r3, #4]
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f69e:	605a      	str	r2, [r3, #4]
 800f6a0:	e016      	b.n	800f6d0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f103 020c 	add.w	r2, r3, #12
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6ae:	7812      	ldrb	r2, [r2, #0]
 800f6b0:	b2d2      	uxtb	r2, r2
 800f6b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6b8:	1c5a      	adds	r2, r3, #1
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	b29a      	uxth	r2, r3
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f6d4:	f7f9 ff2a 	bl	800952c <HAL_GetTick>
 800f6d8:	4602      	mov	r2, r0
 800f6da:	6a3b      	ldr	r3, [r7, #32]
 800f6dc:	1ad3      	subs	r3, r2, r3
 800f6de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d803      	bhi.n	800f6ec <HAL_SPI_TransmitReceive+0x3c2>
 800f6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ea:	d102      	bne.n	800f6f2 <HAL_SPI_TransmitReceive+0x3c8>
 800f6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d109      	bne.n	800f706 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800f702:	2303      	movs	r3, #3
 800f704:	e02c      	b.n	800f760 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	f47f af55 	bne.w	800f5bc <HAL_SPI_TransmitReceive+0x292>
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f718:	b29b      	uxth	r3, r3
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	f47f af4e 	bne.w	800f5bc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f720:	6a3a      	ldr	r2, [r7, #32]
 800f722:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f724:	68f8      	ldr	r0, [r7, #12]
 800f726:	f000 f995 	bl	800fa54 <SPI_EndRxTxTransaction>
 800f72a:	4603      	mov	r3, r0
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d008      	beq.n	800f742 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2220      	movs	r2, #32
 800f734:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2200      	movs	r2, #0
 800f73a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800f73e:	2301      	movs	r3, #1
 800f740:	e00e      	b.n	800f760 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2201      	movs	r2, #1
 800f746:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2200      	movs	r2, #0
 800f74e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f756:	2b00      	cmp	r3, #0
 800f758:	d001      	beq.n	800f75e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800f75a:	2301      	movs	r3, #1
 800f75c:	e000      	b.n	800f760 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800f75e:	2300      	movs	r3, #0
  }
}
 800f760:	4618      	mov	r0, r3
 800f762:	3728      	adds	r7, #40	@ 0x28
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b088      	sub	sp, #32
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	603b      	str	r3, [r7, #0]
 800f774:	4613      	mov	r3, r2
 800f776:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f778:	f7f9 fed8 	bl	800952c <HAL_GetTick>
 800f77c:	4602      	mov	r2, r0
 800f77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f780:	1a9b      	subs	r3, r3, r2
 800f782:	683a      	ldr	r2, [r7, #0]
 800f784:	4413      	add	r3, r2
 800f786:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f788:	f7f9 fed0 	bl	800952c <HAL_GetTick>
 800f78c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f78e:	4b39      	ldr	r3, [pc, #228]	@ (800f874 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	015b      	lsls	r3, r3, #5
 800f794:	0d1b      	lsrs	r3, r3, #20
 800f796:	69fa      	ldr	r2, [r7, #28]
 800f798:	fb02 f303 	mul.w	r3, r2, r3
 800f79c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f79e:	e054      	b.n	800f84a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7a6:	d050      	beq.n	800f84a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f7a8:	f7f9 fec0 	bl	800952c <HAL_GetTick>
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	69bb      	ldr	r3, [r7, #24]
 800f7b0:	1ad3      	subs	r3, r2, r3
 800f7b2:	69fa      	ldr	r2, [r7, #28]
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d902      	bls.n	800f7be <SPI_WaitFlagStateUntilTimeout+0x56>
 800f7b8:	69fb      	ldr	r3, [r7, #28]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d13d      	bne.n	800f83a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	685a      	ldr	r2, [r3, #4]
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f7cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f7d6:	d111      	bne.n	800f7fc <SPI_WaitFlagStateUntilTimeout+0x94>
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	689b      	ldr	r3, [r3, #8]
 800f7dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f7e0:	d004      	beq.n	800f7ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	689b      	ldr	r3, [r3, #8]
 800f7e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f7ea:	d107      	bne.n	800f7fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	681a      	ldr	r2, [r3, #0]
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f7fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f804:	d10f      	bne.n	800f826 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f814:	601a      	str	r2, [r3, #0]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f824:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2201      	movs	r2, #1
 800f82a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2200      	movs	r2, #0
 800f832:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f836:	2303      	movs	r3, #3
 800f838:	e017      	b.n	800f86a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d101      	bne.n	800f844 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f840:	2300      	movs	r3, #0
 800f842:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	3b01      	subs	r3, #1
 800f848:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	689a      	ldr	r2, [r3, #8]
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	4013      	ands	r3, r2
 800f854:	68ba      	ldr	r2, [r7, #8]
 800f856:	429a      	cmp	r2, r3
 800f858:	bf0c      	ite	eq
 800f85a:	2301      	moveq	r3, #1
 800f85c:	2300      	movne	r3, #0
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	461a      	mov	r2, r3
 800f862:	79fb      	ldrb	r3, [r7, #7]
 800f864:	429a      	cmp	r2, r3
 800f866:	d19b      	bne.n	800f7a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f868:	2300      	movs	r3, #0
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3720      	adds	r7, #32
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}
 800f872:	bf00      	nop
 800f874:	20000168 	.word	0x20000168

0800f878 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b08a      	sub	sp, #40	@ 0x28
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	60f8      	str	r0, [r7, #12]
 800f880:	60b9      	str	r1, [r7, #8]
 800f882:	607a      	str	r2, [r7, #4]
 800f884:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f886:	2300      	movs	r3, #0
 800f888:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f88a:	f7f9 fe4f 	bl	800952c <HAL_GetTick>
 800f88e:	4602      	mov	r2, r0
 800f890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f892:	1a9b      	subs	r3, r3, r2
 800f894:	683a      	ldr	r2, [r7, #0]
 800f896:	4413      	add	r3, r2
 800f898:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800f89a:	f7f9 fe47 	bl	800952c <HAL_GetTick>
 800f89e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	330c      	adds	r3, #12
 800f8a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f8a8:	4b3d      	ldr	r3, [pc, #244]	@ (800f9a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	4613      	mov	r3, r2
 800f8ae:	009b      	lsls	r3, r3, #2
 800f8b0:	4413      	add	r3, r2
 800f8b2:	00da      	lsls	r2, r3, #3
 800f8b4:	1ad3      	subs	r3, r2, r3
 800f8b6:	0d1b      	lsrs	r3, r3, #20
 800f8b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8ba:	fb02 f303 	mul.w	r3, r2, r3
 800f8be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f8c0:	e060      	b.n	800f984 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800f8c8:	d107      	bne.n	800f8da <SPI_WaitFifoStateUntilTimeout+0x62>
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d104      	bne.n	800f8da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f8d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8e0:	d050      	beq.n	800f984 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f8e2:	f7f9 fe23 	bl	800952c <HAL_GetTick>
 800f8e6:	4602      	mov	r2, r0
 800f8e8:	6a3b      	ldr	r3, [r7, #32]
 800f8ea:	1ad3      	subs	r3, r2, r3
 800f8ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d902      	bls.n	800f8f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800f8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d13d      	bne.n	800f974 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	685a      	ldr	r2, [r3, #4]
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f906:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f910:	d111      	bne.n	800f936 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	689b      	ldr	r3, [r3, #8]
 800f916:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f91a:	d004      	beq.n	800f926 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	689b      	ldr	r3, [r3, #8]
 800f920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f924:	d107      	bne.n	800f936 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	681a      	ldr	r2, [r3, #0]
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f934:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f93a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f93e:	d10f      	bne.n	800f960 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f94e:	601a      	str	r2, [r3, #0]
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f95e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2201      	movs	r2, #1
 800f964:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2200      	movs	r2, #0
 800f96c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f970:	2303      	movs	r3, #3
 800f972:	e010      	b.n	800f996 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f974:	69bb      	ldr	r3, [r7, #24]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d101      	bne.n	800f97e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800f97a:	2300      	movs	r3, #0
 800f97c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	3b01      	subs	r3, #1
 800f982:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	689a      	ldr	r2, [r3, #8]
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	4013      	ands	r3, r2
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	429a      	cmp	r2, r3
 800f992:	d196      	bne.n	800f8c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800f994:	2300      	movs	r3, #0
}
 800f996:	4618      	mov	r0, r3
 800f998:	3728      	adds	r7, #40	@ 0x28
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	20000168 	.word	0x20000168

0800f9a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b086      	sub	sp, #24
 800f9a8:	af02      	add	r7, sp, #8
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	60b9      	str	r1, [r7, #8]
 800f9ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f9b8:	d111      	bne.n	800f9de <SPI_EndRxTransaction+0x3a>
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	689b      	ldr	r3, [r3, #8]
 800f9be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f9c2:	d004      	beq.n	800f9ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	689b      	ldr	r3, [r3, #8]
 800f9c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f9cc:	d107      	bne.n	800f9de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f9dc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	9300      	str	r3, [sp, #0]
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	2180      	movs	r1, #128	@ 0x80
 800f9e8:	68f8      	ldr	r0, [r7, #12]
 800f9ea:	f7ff febd 	bl	800f768 <SPI_WaitFlagStateUntilTimeout>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d007      	beq.n	800fa04 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f9f8:	f043 0220 	orr.w	r2, r3, #32
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fa00:	2303      	movs	r3, #3
 800fa02:	e023      	b.n	800fa4c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	685b      	ldr	r3, [r3, #4]
 800fa08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fa0c:	d11d      	bne.n	800fa4a <SPI_EndRxTransaction+0xa6>
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	689b      	ldr	r3, [r3, #8]
 800fa12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fa16:	d004      	beq.n	800fa22 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	689b      	ldr	r3, [r3, #8]
 800fa1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fa20:	d113      	bne.n	800fa4a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	9300      	str	r3, [sp, #0]
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	f7ff ff22 	bl	800f878 <SPI_WaitFifoStateUntilTimeout>
 800fa34:	4603      	mov	r3, r0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d007      	beq.n	800fa4a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fa3e:	f043 0220 	orr.w	r2, r3, #32
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800fa46:	2303      	movs	r3, #3
 800fa48:	e000      	b.n	800fa4c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800fa4a:	2300      	movs	r3, #0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3710      	adds	r7, #16
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b086      	sub	sp, #24
 800fa58:	af02      	add	r7, sp, #8
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	9300      	str	r3, [sp, #0]
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	2200      	movs	r2, #0
 800fa68:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800fa6c:	68f8      	ldr	r0, [r7, #12]
 800fa6e:	f7ff ff03 	bl	800f878 <SPI_WaitFifoStateUntilTimeout>
 800fa72:	4603      	mov	r3, r0
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d007      	beq.n	800fa88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fa7c:	f043 0220 	orr.w	r2, r3, #32
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fa84:	2303      	movs	r3, #3
 800fa86:	e027      	b.n	800fad8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	9300      	str	r3, [sp, #0]
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	2180      	movs	r1, #128	@ 0x80
 800fa92:	68f8      	ldr	r0, [r7, #12]
 800fa94:	f7ff fe68 	bl	800f768 <SPI_WaitFlagStateUntilTimeout>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d007      	beq.n	800faae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800faa2:	f043 0220 	orr.w	r2, r3, #32
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800faaa:	2303      	movs	r3, #3
 800faac:	e014      	b.n	800fad8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	9300      	str	r3, [sp, #0]
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	2200      	movs	r2, #0
 800fab6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800faba:	68f8      	ldr	r0, [r7, #12]
 800fabc:	f7ff fedc 	bl	800f878 <SPI_WaitFifoStateUntilTimeout>
 800fac0:	4603      	mov	r3, r0
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d007      	beq.n	800fad6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800faca:	f043 0220 	orr.w	r2, r3, #32
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fad2:	2303      	movs	r3, #3
 800fad4:	e000      	b.n	800fad8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800fad6:	2300      	movs	r3, #0
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3710      	adds	r7, #16
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d101      	bne.n	800faf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800faee:	2301      	movs	r3, #1
 800faf0:	e049      	b.n	800fb86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800faf8:	b2db      	uxtb	r3, r3
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d106      	bne.n	800fb0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2200      	movs	r2, #0
 800fb02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f7f6 f9be 	bl	8005e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2202      	movs	r2, #2
 800fb10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681a      	ldr	r2, [r3, #0]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	3304      	adds	r3, #4
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	4610      	mov	r0, r2
 800fb20:	f001 f850 	bl	8010bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2201      	movs	r2, #1
 800fb28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2201      	movs	r2, #1
 800fb30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2201      	movs	r2, #1
 800fb38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2201      	movs	r2, #1
 800fb40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2201      	movs	r2, #1
 800fb48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2201      	movs	r2, #1
 800fb50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2201      	movs	r2, #1
 800fb58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2201      	movs	r2, #1
 800fb60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2201      	movs	r2, #1
 800fb68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2201      	movs	r2, #1
 800fb70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2201      	movs	r2, #1
 800fb78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2201      	movs	r2, #1
 800fb80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fb84:	2300      	movs	r3, #0
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3708      	adds	r7, #8
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}

0800fb8e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b082      	sub	sp, #8
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d101      	bne.n	800fba0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	e049      	b.n	800fc34 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fba6:	b2db      	uxtb	r3, r3
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d106      	bne.n	800fbba <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f7f6 f907 	bl	8005dc8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2202      	movs	r2, #2
 800fbbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	3304      	adds	r3, #4
 800fbca:	4619      	mov	r1, r3
 800fbcc:	4610      	mov	r0, r2
 800fbce:	f000 fff9 	bl	8010bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2201      	movs	r2, #1
 800fbde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2201      	movs	r2, #1
 800fbee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2201      	movs	r2, #1
 800fc06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2201      	movs	r2, #1
 800fc16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2201      	movs	r2, #1
 800fc1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2201      	movs	r2, #1
 800fc26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fc32:	2300      	movs	r3, #0
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3708      	adds	r7, #8
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fc46:	2300      	movs	r3, #0
 800fc48:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d109      	bne.n	800fc64 <HAL_TIM_OC_Start_IT+0x28>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	bf14      	ite	ne
 800fc5c:	2301      	movne	r3, #1
 800fc5e:	2300      	moveq	r3, #0
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	e03c      	b.n	800fcde <HAL_TIM_OC_Start_IT+0xa2>
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	2b04      	cmp	r3, #4
 800fc68:	d109      	bne.n	800fc7e <HAL_TIM_OC_Start_IT+0x42>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	2b01      	cmp	r3, #1
 800fc74:	bf14      	ite	ne
 800fc76:	2301      	movne	r3, #1
 800fc78:	2300      	moveq	r3, #0
 800fc7a:	b2db      	uxtb	r3, r3
 800fc7c:	e02f      	b.n	800fcde <HAL_TIM_OC_Start_IT+0xa2>
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	2b08      	cmp	r3, #8
 800fc82:	d109      	bne.n	800fc98 <HAL_TIM_OC_Start_IT+0x5c>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fc8a:	b2db      	uxtb	r3, r3
 800fc8c:	2b01      	cmp	r3, #1
 800fc8e:	bf14      	ite	ne
 800fc90:	2301      	movne	r3, #1
 800fc92:	2300      	moveq	r3, #0
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	e022      	b.n	800fcde <HAL_TIM_OC_Start_IT+0xa2>
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	2b0c      	cmp	r3, #12
 800fc9c:	d109      	bne.n	800fcb2 <HAL_TIM_OC_Start_IT+0x76>
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fca4:	b2db      	uxtb	r3, r3
 800fca6:	2b01      	cmp	r3, #1
 800fca8:	bf14      	ite	ne
 800fcaa:	2301      	movne	r3, #1
 800fcac:	2300      	moveq	r3, #0
 800fcae:	b2db      	uxtb	r3, r3
 800fcb0:	e015      	b.n	800fcde <HAL_TIM_OC_Start_IT+0xa2>
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	2b10      	cmp	r3, #16
 800fcb6:	d109      	bne.n	800fccc <HAL_TIM_OC_Start_IT+0x90>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	bf14      	ite	ne
 800fcc4:	2301      	movne	r3, #1
 800fcc6:	2300      	moveq	r3, #0
 800fcc8:	b2db      	uxtb	r3, r3
 800fcca:	e008      	b.n	800fcde <HAL_TIM_OC_Start_IT+0xa2>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	bf14      	ite	ne
 800fcd8:	2301      	movne	r3, #1
 800fcda:	2300      	moveq	r3, #0
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d001      	beq.n	800fce6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800fce2:	2301      	movs	r3, #1
 800fce4:	e0e7      	b.n	800feb6 <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d104      	bne.n	800fcf6 <HAL_TIM_OC_Start_IT+0xba>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2202      	movs	r2, #2
 800fcf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fcf4:	e023      	b.n	800fd3e <HAL_TIM_OC_Start_IT+0x102>
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	2b04      	cmp	r3, #4
 800fcfa:	d104      	bne.n	800fd06 <HAL_TIM_OC_Start_IT+0xca>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2202      	movs	r2, #2
 800fd00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fd04:	e01b      	b.n	800fd3e <HAL_TIM_OC_Start_IT+0x102>
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	2b08      	cmp	r3, #8
 800fd0a:	d104      	bne.n	800fd16 <HAL_TIM_OC_Start_IT+0xda>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2202      	movs	r2, #2
 800fd10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fd14:	e013      	b.n	800fd3e <HAL_TIM_OC_Start_IT+0x102>
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	2b0c      	cmp	r3, #12
 800fd1a:	d104      	bne.n	800fd26 <HAL_TIM_OC_Start_IT+0xea>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2202      	movs	r2, #2
 800fd20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fd24:	e00b      	b.n	800fd3e <HAL_TIM_OC_Start_IT+0x102>
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	2b10      	cmp	r3, #16
 800fd2a:	d104      	bne.n	800fd36 <HAL_TIM_OC_Start_IT+0xfa>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2202      	movs	r2, #2
 800fd30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fd34:	e003      	b.n	800fd3e <HAL_TIM_OC_Start_IT+0x102>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2202      	movs	r2, #2
 800fd3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	2b0c      	cmp	r3, #12
 800fd42:	d841      	bhi.n	800fdc8 <HAL_TIM_OC_Start_IT+0x18c>
 800fd44:	a201      	add	r2, pc, #4	@ (adr r2, 800fd4c <HAL_TIM_OC_Start_IT+0x110>)
 800fd46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd4a:	bf00      	nop
 800fd4c:	0800fd81 	.word	0x0800fd81
 800fd50:	0800fdc9 	.word	0x0800fdc9
 800fd54:	0800fdc9 	.word	0x0800fdc9
 800fd58:	0800fdc9 	.word	0x0800fdc9
 800fd5c:	0800fd93 	.word	0x0800fd93
 800fd60:	0800fdc9 	.word	0x0800fdc9
 800fd64:	0800fdc9 	.word	0x0800fdc9
 800fd68:	0800fdc9 	.word	0x0800fdc9
 800fd6c:	0800fda5 	.word	0x0800fda5
 800fd70:	0800fdc9 	.word	0x0800fdc9
 800fd74:	0800fdc9 	.word	0x0800fdc9
 800fd78:	0800fdc9 	.word	0x0800fdc9
 800fd7c:	0800fdb7 	.word	0x0800fdb7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	68da      	ldr	r2, [r3, #12]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f042 0202 	orr.w	r2, r2, #2
 800fd8e:	60da      	str	r2, [r3, #12]
      break;
 800fd90:	e01d      	b.n	800fdce <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	68da      	ldr	r2, [r3, #12]
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	f042 0204 	orr.w	r2, r2, #4
 800fda0:	60da      	str	r2, [r3, #12]
      break;
 800fda2:	e014      	b.n	800fdce <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	68da      	ldr	r2, [r3, #12]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	f042 0208 	orr.w	r2, r2, #8
 800fdb2:	60da      	str	r2, [r3, #12]
      break;
 800fdb4:	e00b      	b.n	800fdce <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	68da      	ldr	r2, [r3, #12]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f042 0210 	orr.w	r2, r2, #16
 800fdc4:	60da      	str	r2, [r3, #12]
      break;
 800fdc6:	e002      	b.n	800fdce <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800fdc8:	2301      	movs	r3, #1
 800fdca:	73fb      	strb	r3, [r7, #15]
      break;
 800fdcc:	bf00      	nop
  }

  if (status == HAL_OK)
 800fdce:	7bfb      	ldrb	r3, [r7, #15]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d16f      	bne.n	800feb4 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	2201      	movs	r2, #1
 800fdda:	6839      	ldr	r1, [r7, #0]
 800fddc:	4618      	mov	r0, r3
 800fdde:	f001 fcbf 	bl	8011760 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	4a36      	ldr	r2, [pc, #216]	@ (800fec0 <HAL_TIM_OC_Start_IT+0x284>)
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d013      	beq.n	800fe14 <HAL_TIM_OC_Start_IT+0x1d8>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	4a34      	ldr	r2, [pc, #208]	@ (800fec4 <HAL_TIM_OC_Start_IT+0x288>)
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d00e      	beq.n	800fe14 <HAL_TIM_OC_Start_IT+0x1d8>
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	4a33      	ldr	r2, [pc, #204]	@ (800fec8 <HAL_TIM_OC_Start_IT+0x28c>)
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	d009      	beq.n	800fe14 <HAL_TIM_OC_Start_IT+0x1d8>
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	4a31      	ldr	r2, [pc, #196]	@ (800fecc <HAL_TIM_OC_Start_IT+0x290>)
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d004      	beq.n	800fe14 <HAL_TIM_OC_Start_IT+0x1d8>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4a30      	ldr	r2, [pc, #192]	@ (800fed0 <HAL_TIM_OC_Start_IT+0x294>)
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d101      	bne.n	800fe18 <HAL_TIM_OC_Start_IT+0x1dc>
 800fe14:	2301      	movs	r3, #1
 800fe16:	e000      	b.n	800fe1a <HAL_TIM_OC_Start_IT+0x1de>
 800fe18:	2300      	movs	r3, #0
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d007      	beq.n	800fe2e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fe2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4a23      	ldr	r2, [pc, #140]	@ (800fec0 <HAL_TIM_OC_Start_IT+0x284>)
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d01d      	beq.n	800fe74 <HAL_TIM_OC_Start_IT+0x238>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe40:	d018      	beq.n	800fe74 <HAL_TIM_OC_Start_IT+0x238>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4a23      	ldr	r2, [pc, #140]	@ (800fed4 <HAL_TIM_OC_Start_IT+0x298>)
 800fe48:	4293      	cmp	r3, r2
 800fe4a:	d013      	beq.n	800fe74 <HAL_TIM_OC_Start_IT+0x238>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4a21      	ldr	r2, [pc, #132]	@ (800fed8 <HAL_TIM_OC_Start_IT+0x29c>)
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d00e      	beq.n	800fe74 <HAL_TIM_OC_Start_IT+0x238>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	4a20      	ldr	r2, [pc, #128]	@ (800fedc <HAL_TIM_OC_Start_IT+0x2a0>)
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d009      	beq.n	800fe74 <HAL_TIM_OC_Start_IT+0x238>
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	4a17      	ldr	r2, [pc, #92]	@ (800fec4 <HAL_TIM_OC_Start_IT+0x288>)
 800fe66:	4293      	cmp	r3, r2
 800fe68:	d004      	beq.n	800fe74 <HAL_TIM_OC_Start_IT+0x238>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	4a16      	ldr	r2, [pc, #88]	@ (800fec8 <HAL_TIM_OC_Start_IT+0x28c>)
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d115      	bne.n	800fea0 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	689a      	ldr	r2, [r3, #8]
 800fe7a:	4b19      	ldr	r3, [pc, #100]	@ (800fee0 <HAL_TIM_OC_Start_IT+0x2a4>)
 800fe7c:	4013      	ands	r3, r2
 800fe7e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	2b06      	cmp	r3, #6
 800fe84:	d015      	beq.n	800feb2 <HAL_TIM_OC_Start_IT+0x276>
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe8c:	d011      	beq.n	800feb2 <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	f042 0201 	orr.w	r2, r2, #1
 800fe9c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe9e:	e008      	b.n	800feb2 <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	f042 0201 	orr.w	r2, r2, #1
 800feae:	601a      	str	r2, [r3, #0]
 800feb0:	e000      	b.n	800feb4 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800feb2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800feb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3710      	adds	r7, #16
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
 800febe:	bf00      	nop
 800fec0:	40012c00 	.word	0x40012c00
 800fec4:	40013400 	.word	0x40013400
 800fec8:	40014000 	.word	0x40014000
 800fecc:	40014400 	.word	0x40014400
 800fed0:	40014800 	.word	0x40014800
 800fed4:	40000400 	.word	0x40000400
 800fed8:	40000800 	.word	0x40000800
 800fedc:	40000c00 	.word	0x40000c00
 800fee0:	00010007 	.word	0x00010007

0800fee4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800feee:	2300      	movs	r3, #0
 800fef0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	2b0c      	cmp	r3, #12
 800fef6:	d841      	bhi.n	800ff7c <HAL_TIM_OC_Stop_IT+0x98>
 800fef8:	a201      	add	r2, pc, #4	@ (adr r2, 800ff00 <HAL_TIM_OC_Stop_IT+0x1c>)
 800fefa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fefe:	bf00      	nop
 800ff00:	0800ff35 	.word	0x0800ff35
 800ff04:	0800ff7d 	.word	0x0800ff7d
 800ff08:	0800ff7d 	.word	0x0800ff7d
 800ff0c:	0800ff7d 	.word	0x0800ff7d
 800ff10:	0800ff47 	.word	0x0800ff47
 800ff14:	0800ff7d 	.word	0x0800ff7d
 800ff18:	0800ff7d 	.word	0x0800ff7d
 800ff1c:	0800ff7d 	.word	0x0800ff7d
 800ff20:	0800ff59 	.word	0x0800ff59
 800ff24:	0800ff7d 	.word	0x0800ff7d
 800ff28:	0800ff7d 	.word	0x0800ff7d
 800ff2c:	0800ff7d 	.word	0x0800ff7d
 800ff30:	0800ff6b 	.word	0x0800ff6b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	68da      	ldr	r2, [r3, #12]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	f022 0202 	bic.w	r2, r2, #2
 800ff42:	60da      	str	r2, [r3, #12]
      break;
 800ff44:	e01d      	b.n	800ff82 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	68da      	ldr	r2, [r3, #12]
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f022 0204 	bic.w	r2, r2, #4
 800ff54:	60da      	str	r2, [r3, #12]
      break;
 800ff56:	e014      	b.n	800ff82 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	68da      	ldr	r2, [r3, #12]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	f022 0208 	bic.w	r2, r2, #8
 800ff66:	60da      	str	r2, [r3, #12]
      break;
 800ff68:	e00b      	b.n	800ff82 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	68da      	ldr	r2, [r3, #12]
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f022 0210 	bic.w	r2, r2, #16
 800ff78:	60da      	str	r2, [r3, #12]
      break;
 800ff7a:	e002      	b.n	800ff82 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ff80:	bf00      	nop
  }

  if (status == HAL_OK)
 800ff82:	7bfb      	ldrb	r3, [r7, #15]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	f040 8081 	bne.w	801008c <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	6839      	ldr	r1, [r7, #0]
 800ff92:	4618      	mov	r0, r3
 800ff94:	f001 fbe4 	bl	8011760 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4a3e      	ldr	r2, [pc, #248]	@ (8010098 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d013      	beq.n	800ffca <HAL_TIM_OC_Stop_IT+0xe6>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4a3d      	ldr	r2, [pc, #244]	@ (801009c <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d00e      	beq.n	800ffca <HAL_TIM_OC_Stop_IT+0xe6>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	4a3b      	ldr	r2, [pc, #236]	@ (80100a0 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d009      	beq.n	800ffca <HAL_TIM_OC_Stop_IT+0xe6>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	4a3a      	ldr	r2, [pc, #232]	@ (80100a4 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	d004      	beq.n	800ffca <HAL_TIM_OC_Stop_IT+0xe6>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4a38      	ldr	r2, [pc, #224]	@ (80100a8 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d101      	bne.n	800ffce <HAL_TIM_OC_Stop_IT+0xea>
 800ffca:	2301      	movs	r3, #1
 800ffcc:	e000      	b.n	800ffd0 <HAL_TIM_OC_Stop_IT+0xec>
 800ffce:	2300      	movs	r3, #0
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d017      	beq.n	8010004 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	6a1a      	ldr	r2, [r3, #32]
 800ffda:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ffde:	4013      	ands	r3, r2
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d10f      	bne.n	8010004 <HAL_TIM_OC_Stop_IT+0x120>
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	6a1a      	ldr	r2, [r3, #32]
 800ffea:	f240 4344 	movw	r3, #1092	@ 0x444
 800ffee:	4013      	ands	r3, r2
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d107      	bne.n	8010004 <HAL_TIM_OC_Stop_IT+0x120>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010002:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	6a1a      	ldr	r2, [r3, #32]
 801000a:	f241 1311 	movw	r3, #4369	@ 0x1111
 801000e:	4013      	ands	r3, r2
 8010010:	2b00      	cmp	r3, #0
 8010012:	d10f      	bne.n	8010034 <HAL_TIM_OC_Stop_IT+0x150>
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	6a1a      	ldr	r2, [r3, #32]
 801001a:	f240 4344 	movw	r3, #1092	@ 0x444
 801001e:	4013      	ands	r3, r2
 8010020:	2b00      	cmp	r3, #0
 8010022:	d107      	bne.n	8010034 <HAL_TIM_OC_Stop_IT+0x150>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	f022 0201 	bic.w	r2, r2, #1
 8010032:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d104      	bne.n	8010044 <HAL_TIM_OC_Stop_IT+0x160>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2201      	movs	r2, #1
 801003e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010042:	e023      	b.n	801008c <HAL_TIM_OC_Stop_IT+0x1a8>
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	2b04      	cmp	r3, #4
 8010048:	d104      	bne.n	8010054 <HAL_TIM_OC_Stop_IT+0x170>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2201      	movs	r2, #1
 801004e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010052:	e01b      	b.n	801008c <HAL_TIM_OC_Stop_IT+0x1a8>
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	2b08      	cmp	r3, #8
 8010058:	d104      	bne.n	8010064 <HAL_TIM_OC_Stop_IT+0x180>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2201      	movs	r2, #1
 801005e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010062:	e013      	b.n	801008c <HAL_TIM_OC_Stop_IT+0x1a8>
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	2b0c      	cmp	r3, #12
 8010068:	d104      	bne.n	8010074 <HAL_TIM_OC_Stop_IT+0x190>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2201      	movs	r2, #1
 801006e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010072:	e00b      	b.n	801008c <HAL_TIM_OC_Stop_IT+0x1a8>
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	2b10      	cmp	r3, #16
 8010078:	d104      	bne.n	8010084 <HAL_TIM_OC_Stop_IT+0x1a0>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2201      	movs	r2, #1
 801007e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010082:	e003      	b.n	801008c <HAL_TIM_OC_Stop_IT+0x1a8>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2201      	movs	r2, #1
 8010088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 801008c:	7bfb      	ldrb	r3, [r7, #15]
}
 801008e:	4618      	mov	r0, r3
 8010090:	3710      	adds	r7, #16
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	40012c00 	.word	0x40012c00
 801009c:	40013400 	.word	0x40013400
 80100a0:	40014000 	.word	0x40014000
 80100a4:	40014400 	.word	0x40014400
 80100a8:	40014800 	.word	0x40014800

080100ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b082      	sub	sp, #8
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d101      	bne.n	80100be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80100ba:	2301      	movs	r3, #1
 80100bc:	e049      	b.n	8010152 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80100c4:	b2db      	uxtb	r3, r3
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d106      	bne.n	80100d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2200      	movs	r2, #0
 80100ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f000 f841 	bl	801015a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2202      	movs	r2, #2
 80100dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681a      	ldr	r2, [r3, #0]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	3304      	adds	r3, #4
 80100e8:	4619      	mov	r1, r3
 80100ea:	4610      	mov	r0, r2
 80100ec:	f000 fd6a 	bl	8010bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2201      	movs	r2, #1
 80100f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2201      	movs	r2, #1
 80100fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2201      	movs	r2, #1
 8010104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2201      	movs	r2, #1
 801010c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2201      	movs	r2, #1
 8010114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2201      	movs	r2, #1
 801011c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2201      	movs	r2, #1
 8010124:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2201      	movs	r2, #1
 801012c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2201      	movs	r2, #1
 8010134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2201      	movs	r2, #1
 801013c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2201      	movs	r2, #1
 8010144:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2201      	movs	r2, #1
 801014c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010150:	2300      	movs	r3, #0
}
 8010152:	4618      	mov	r0, r3
 8010154:	3708      	adds	r7, #8
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}

0801015a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801015a:	b480      	push	{r7}
 801015c:	b083      	sub	sp, #12
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010162:	bf00      	nop
 8010164:	370c      	adds	r7, #12
 8010166:	46bd      	mov	sp, r7
 8010168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016c:	4770      	bx	lr
	...

08010170 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b084      	sub	sp, #16
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
 8010178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d109      	bne.n	8010194 <HAL_TIM_PWM_Start+0x24>
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010186:	b2db      	uxtb	r3, r3
 8010188:	2b01      	cmp	r3, #1
 801018a:	bf14      	ite	ne
 801018c:	2301      	movne	r3, #1
 801018e:	2300      	moveq	r3, #0
 8010190:	b2db      	uxtb	r3, r3
 8010192:	e03c      	b.n	801020e <HAL_TIM_PWM_Start+0x9e>
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	2b04      	cmp	r3, #4
 8010198:	d109      	bne.n	80101ae <HAL_TIM_PWM_Start+0x3e>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	bf14      	ite	ne
 80101a6:	2301      	movne	r3, #1
 80101a8:	2300      	moveq	r3, #0
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	e02f      	b.n	801020e <HAL_TIM_PWM_Start+0x9e>
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	2b08      	cmp	r3, #8
 80101b2:	d109      	bne.n	80101c8 <HAL_TIM_PWM_Start+0x58>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80101ba:	b2db      	uxtb	r3, r3
 80101bc:	2b01      	cmp	r3, #1
 80101be:	bf14      	ite	ne
 80101c0:	2301      	movne	r3, #1
 80101c2:	2300      	moveq	r3, #0
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	e022      	b.n	801020e <HAL_TIM_PWM_Start+0x9e>
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	2b0c      	cmp	r3, #12
 80101cc:	d109      	bne.n	80101e2 <HAL_TIM_PWM_Start+0x72>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80101d4:	b2db      	uxtb	r3, r3
 80101d6:	2b01      	cmp	r3, #1
 80101d8:	bf14      	ite	ne
 80101da:	2301      	movne	r3, #1
 80101dc:	2300      	moveq	r3, #0
 80101de:	b2db      	uxtb	r3, r3
 80101e0:	e015      	b.n	801020e <HAL_TIM_PWM_Start+0x9e>
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	2b10      	cmp	r3, #16
 80101e6:	d109      	bne.n	80101fc <HAL_TIM_PWM_Start+0x8c>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	2b01      	cmp	r3, #1
 80101f2:	bf14      	ite	ne
 80101f4:	2301      	movne	r3, #1
 80101f6:	2300      	moveq	r3, #0
 80101f8:	b2db      	uxtb	r3, r3
 80101fa:	e008      	b.n	801020e <HAL_TIM_PWM_Start+0x9e>
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010202:	b2db      	uxtb	r3, r3
 8010204:	2b01      	cmp	r3, #1
 8010206:	bf14      	ite	ne
 8010208:	2301      	movne	r3, #1
 801020a:	2300      	moveq	r3, #0
 801020c:	b2db      	uxtb	r3, r3
 801020e:	2b00      	cmp	r3, #0
 8010210:	d001      	beq.n	8010216 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010212:	2301      	movs	r3, #1
 8010214:	e09c      	b.n	8010350 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d104      	bne.n	8010226 <HAL_TIM_PWM_Start+0xb6>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2202      	movs	r2, #2
 8010220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010224:	e023      	b.n	801026e <HAL_TIM_PWM_Start+0xfe>
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	2b04      	cmp	r3, #4
 801022a:	d104      	bne.n	8010236 <HAL_TIM_PWM_Start+0xc6>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2202      	movs	r2, #2
 8010230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010234:	e01b      	b.n	801026e <HAL_TIM_PWM_Start+0xfe>
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	2b08      	cmp	r3, #8
 801023a:	d104      	bne.n	8010246 <HAL_TIM_PWM_Start+0xd6>
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2202      	movs	r2, #2
 8010240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010244:	e013      	b.n	801026e <HAL_TIM_PWM_Start+0xfe>
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	2b0c      	cmp	r3, #12
 801024a:	d104      	bne.n	8010256 <HAL_TIM_PWM_Start+0xe6>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2202      	movs	r2, #2
 8010250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010254:	e00b      	b.n	801026e <HAL_TIM_PWM_Start+0xfe>
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	2b10      	cmp	r3, #16
 801025a:	d104      	bne.n	8010266 <HAL_TIM_PWM_Start+0xf6>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2202      	movs	r2, #2
 8010260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010264:	e003      	b.n	801026e <HAL_TIM_PWM_Start+0xfe>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2202      	movs	r2, #2
 801026a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	2201      	movs	r2, #1
 8010274:	6839      	ldr	r1, [r7, #0]
 8010276:	4618      	mov	r0, r3
 8010278:	f001 fa72 	bl	8011760 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	4a35      	ldr	r2, [pc, #212]	@ (8010358 <HAL_TIM_PWM_Start+0x1e8>)
 8010282:	4293      	cmp	r3, r2
 8010284:	d013      	beq.n	80102ae <HAL_TIM_PWM_Start+0x13e>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	4a34      	ldr	r2, [pc, #208]	@ (801035c <HAL_TIM_PWM_Start+0x1ec>)
 801028c:	4293      	cmp	r3, r2
 801028e:	d00e      	beq.n	80102ae <HAL_TIM_PWM_Start+0x13e>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4a32      	ldr	r2, [pc, #200]	@ (8010360 <HAL_TIM_PWM_Start+0x1f0>)
 8010296:	4293      	cmp	r3, r2
 8010298:	d009      	beq.n	80102ae <HAL_TIM_PWM_Start+0x13e>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	4a31      	ldr	r2, [pc, #196]	@ (8010364 <HAL_TIM_PWM_Start+0x1f4>)
 80102a0:	4293      	cmp	r3, r2
 80102a2:	d004      	beq.n	80102ae <HAL_TIM_PWM_Start+0x13e>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	4a2f      	ldr	r2, [pc, #188]	@ (8010368 <HAL_TIM_PWM_Start+0x1f8>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d101      	bne.n	80102b2 <HAL_TIM_PWM_Start+0x142>
 80102ae:	2301      	movs	r3, #1
 80102b0:	e000      	b.n	80102b4 <HAL_TIM_PWM_Start+0x144>
 80102b2:	2300      	movs	r3, #0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d007      	beq.n	80102c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80102c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4a22      	ldr	r2, [pc, #136]	@ (8010358 <HAL_TIM_PWM_Start+0x1e8>)
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d01d      	beq.n	801030e <HAL_TIM_PWM_Start+0x19e>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80102da:	d018      	beq.n	801030e <HAL_TIM_PWM_Start+0x19e>
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4a22      	ldr	r2, [pc, #136]	@ (801036c <HAL_TIM_PWM_Start+0x1fc>)
 80102e2:	4293      	cmp	r3, r2
 80102e4:	d013      	beq.n	801030e <HAL_TIM_PWM_Start+0x19e>
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	4a21      	ldr	r2, [pc, #132]	@ (8010370 <HAL_TIM_PWM_Start+0x200>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d00e      	beq.n	801030e <HAL_TIM_PWM_Start+0x19e>
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	4a1f      	ldr	r2, [pc, #124]	@ (8010374 <HAL_TIM_PWM_Start+0x204>)
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d009      	beq.n	801030e <HAL_TIM_PWM_Start+0x19e>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	4a17      	ldr	r2, [pc, #92]	@ (801035c <HAL_TIM_PWM_Start+0x1ec>)
 8010300:	4293      	cmp	r3, r2
 8010302:	d004      	beq.n	801030e <HAL_TIM_PWM_Start+0x19e>
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	4a15      	ldr	r2, [pc, #84]	@ (8010360 <HAL_TIM_PWM_Start+0x1f0>)
 801030a:	4293      	cmp	r3, r2
 801030c:	d115      	bne.n	801033a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	689a      	ldr	r2, [r3, #8]
 8010314:	4b18      	ldr	r3, [pc, #96]	@ (8010378 <HAL_TIM_PWM_Start+0x208>)
 8010316:	4013      	ands	r3, r2
 8010318:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2b06      	cmp	r3, #6
 801031e:	d015      	beq.n	801034c <HAL_TIM_PWM_Start+0x1dc>
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010326:	d011      	beq.n	801034c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	f042 0201 	orr.w	r2, r2, #1
 8010336:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010338:	e008      	b.n	801034c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	681a      	ldr	r2, [r3, #0]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f042 0201 	orr.w	r2, r2, #1
 8010348:	601a      	str	r2, [r3, #0]
 801034a:	e000      	b.n	801034e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801034c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801034e:	2300      	movs	r3, #0
}
 8010350:	4618      	mov	r0, r3
 8010352:	3710      	adds	r7, #16
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}
 8010358:	40012c00 	.word	0x40012c00
 801035c:	40013400 	.word	0x40013400
 8010360:	40014000 	.word	0x40014000
 8010364:	40014400 	.word	0x40014400
 8010368:	40014800 	.word	0x40014800
 801036c:	40000400 	.word	0x40000400
 8010370:	40000800 	.word	0x40000800
 8010374:	40000c00 	.word	0x40000c00
 8010378:	00010007 	.word	0x00010007

0801037c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	2200      	movs	r2, #0
 801038c:	6839      	ldr	r1, [r7, #0]
 801038e:	4618      	mov	r0, r3
 8010390:	f001 f9e6 	bl	8011760 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4a3e      	ldr	r2, [pc, #248]	@ (8010494 <HAL_TIM_PWM_Stop+0x118>)
 801039a:	4293      	cmp	r3, r2
 801039c:	d013      	beq.n	80103c6 <HAL_TIM_PWM_Stop+0x4a>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	4a3d      	ldr	r2, [pc, #244]	@ (8010498 <HAL_TIM_PWM_Stop+0x11c>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d00e      	beq.n	80103c6 <HAL_TIM_PWM_Stop+0x4a>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	4a3b      	ldr	r2, [pc, #236]	@ (801049c <HAL_TIM_PWM_Stop+0x120>)
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d009      	beq.n	80103c6 <HAL_TIM_PWM_Stop+0x4a>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	4a3a      	ldr	r2, [pc, #232]	@ (80104a0 <HAL_TIM_PWM_Stop+0x124>)
 80103b8:	4293      	cmp	r3, r2
 80103ba:	d004      	beq.n	80103c6 <HAL_TIM_PWM_Stop+0x4a>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	4a38      	ldr	r2, [pc, #224]	@ (80104a4 <HAL_TIM_PWM_Stop+0x128>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d101      	bne.n	80103ca <HAL_TIM_PWM_Stop+0x4e>
 80103c6:	2301      	movs	r3, #1
 80103c8:	e000      	b.n	80103cc <HAL_TIM_PWM_Stop+0x50>
 80103ca:	2300      	movs	r3, #0
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d017      	beq.n	8010400 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	6a1a      	ldr	r2, [r3, #32]
 80103d6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80103da:	4013      	ands	r3, r2
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d10f      	bne.n	8010400 <HAL_TIM_PWM_Stop+0x84>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	6a1a      	ldr	r2, [r3, #32]
 80103e6:	f240 4344 	movw	r3, #1092	@ 0x444
 80103ea:	4013      	ands	r3, r2
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d107      	bne.n	8010400 <HAL_TIM_PWM_Stop+0x84>
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80103fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	6a1a      	ldr	r2, [r3, #32]
 8010406:	f241 1311 	movw	r3, #4369	@ 0x1111
 801040a:	4013      	ands	r3, r2
 801040c:	2b00      	cmp	r3, #0
 801040e:	d10f      	bne.n	8010430 <HAL_TIM_PWM_Stop+0xb4>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	6a1a      	ldr	r2, [r3, #32]
 8010416:	f240 4344 	movw	r3, #1092	@ 0x444
 801041a:	4013      	ands	r3, r2
 801041c:	2b00      	cmp	r3, #0
 801041e:	d107      	bne.n	8010430 <HAL_TIM_PWM_Stop+0xb4>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	681a      	ldr	r2, [r3, #0]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	f022 0201 	bic.w	r2, r2, #1
 801042e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d104      	bne.n	8010440 <HAL_TIM_PWM_Stop+0xc4>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2201      	movs	r2, #1
 801043a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801043e:	e023      	b.n	8010488 <HAL_TIM_PWM_Stop+0x10c>
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	2b04      	cmp	r3, #4
 8010444:	d104      	bne.n	8010450 <HAL_TIM_PWM_Stop+0xd4>
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2201      	movs	r2, #1
 801044a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801044e:	e01b      	b.n	8010488 <HAL_TIM_PWM_Stop+0x10c>
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	2b08      	cmp	r3, #8
 8010454:	d104      	bne.n	8010460 <HAL_TIM_PWM_Stop+0xe4>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2201      	movs	r2, #1
 801045a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801045e:	e013      	b.n	8010488 <HAL_TIM_PWM_Stop+0x10c>
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	2b0c      	cmp	r3, #12
 8010464:	d104      	bne.n	8010470 <HAL_TIM_PWM_Stop+0xf4>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2201      	movs	r2, #1
 801046a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801046e:	e00b      	b.n	8010488 <HAL_TIM_PWM_Stop+0x10c>
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	2b10      	cmp	r3, #16
 8010474:	d104      	bne.n	8010480 <HAL_TIM_PWM_Stop+0x104>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2201      	movs	r2, #1
 801047a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801047e:	e003      	b.n	8010488 <HAL_TIM_PWM_Stop+0x10c>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2201      	movs	r2, #1
 8010484:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8010488:	2300      	movs	r3, #0
}
 801048a:	4618      	mov	r0, r3
 801048c:	3708      	adds	r7, #8
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	40012c00 	.word	0x40012c00
 8010498:	40013400 	.word	0x40013400
 801049c:	40014000 	.word	0x40014000
 80104a0:	40014400 	.word	0x40014400
 80104a4:	40014800 	.word	0x40014800

080104a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b082      	sub	sp, #8
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d101      	bne.n	80104ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80104b6:	2301      	movs	r3, #1
 80104b8:	e049      	b.n	801054e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d106      	bne.n	80104d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2200      	movs	r2, #0
 80104ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f7f5 fc9a 	bl	8005e08 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2202      	movs	r2, #2
 80104d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	3304      	adds	r3, #4
 80104e4:	4619      	mov	r1, r3
 80104e6:	4610      	mov	r0, r2
 80104e8:	f000 fb6c 	bl	8010bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2201      	movs	r2, #1
 80104f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2201      	movs	r2, #1
 80104f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2201      	movs	r2, #1
 8010500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2201      	movs	r2, #1
 8010508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2201      	movs	r2, #1
 8010510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2201      	movs	r2, #1
 8010518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2201      	movs	r2, #1
 8010520:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2201      	movs	r2, #1
 8010528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2201      	movs	r2, #1
 8010530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2201      	movs	r2, #1
 8010538:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2201      	movs	r2, #1
 8010540:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2201      	movs	r2, #1
 8010548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801054c:	2300      	movs	r3, #0
}
 801054e:	4618      	mov	r0, r3
 8010550:	3708      	adds	r7, #8
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
	...

08010558 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b086      	sub	sp, #24
 801055c:	af00      	add	r7, sp, #0
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010564:	2300      	movs	r3, #0
 8010566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801056e:	2b01      	cmp	r3, #1
 8010570:	d101      	bne.n	8010576 <HAL_TIM_OC_ConfigChannel+0x1e>
 8010572:	2302      	movs	r3, #2
 8010574:	e066      	b.n	8010644 <HAL_TIM_OC_ConfigChannel+0xec>
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	2201      	movs	r2, #1
 801057a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2b14      	cmp	r3, #20
 8010582:	d857      	bhi.n	8010634 <HAL_TIM_OC_ConfigChannel+0xdc>
 8010584:	a201      	add	r2, pc, #4	@ (adr r2, 801058c <HAL_TIM_OC_ConfigChannel+0x34>)
 8010586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801058a:	bf00      	nop
 801058c:	080105e1 	.word	0x080105e1
 8010590:	08010635 	.word	0x08010635
 8010594:	08010635 	.word	0x08010635
 8010598:	08010635 	.word	0x08010635
 801059c:	080105ef 	.word	0x080105ef
 80105a0:	08010635 	.word	0x08010635
 80105a4:	08010635 	.word	0x08010635
 80105a8:	08010635 	.word	0x08010635
 80105ac:	080105fd 	.word	0x080105fd
 80105b0:	08010635 	.word	0x08010635
 80105b4:	08010635 	.word	0x08010635
 80105b8:	08010635 	.word	0x08010635
 80105bc:	0801060b 	.word	0x0801060b
 80105c0:	08010635 	.word	0x08010635
 80105c4:	08010635 	.word	0x08010635
 80105c8:	08010635 	.word	0x08010635
 80105cc:	08010619 	.word	0x08010619
 80105d0:	08010635 	.word	0x08010635
 80105d4:	08010635 	.word	0x08010635
 80105d8:	08010635 	.word	0x08010635
 80105dc:	08010627 	.word	0x08010627
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	68b9      	ldr	r1, [r7, #8]
 80105e6:	4618      	mov	r0, r3
 80105e8:	f000 fb92 	bl	8010d10 <TIM_OC1_SetConfig>
      break;
 80105ec:	e025      	b.n	801063a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	68b9      	ldr	r1, [r7, #8]
 80105f4:	4618      	mov	r0, r3
 80105f6:	f000 fc1b 	bl	8010e30 <TIM_OC2_SetConfig>
      break;
 80105fa:	e01e      	b.n	801063a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	68b9      	ldr	r1, [r7, #8]
 8010602:	4618      	mov	r0, r3
 8010604:	f000 fc9e 	bl	8010f44 <TIM_OC3_SetConfig>
      break;
 8010608:	e017      	b.n	801063a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	68b9      	ldr	r1, [r7, #8]
 8010610:	4618      	mov	r0, r3
 8010612:	f000 fd1f 	bl	8011054 <TIM_OC4_SetConfig>
      break;
 8010616:	e010      	b.n	801063a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	68b9      	ldr	r1, [r7, #8]
 801061e:	4618      	mov	r0, r3
 8010620:	f000 fd82 	bl	8011128 <TIM_OC5_SetConfig>
      break;
 8010624:	e009      	b.n	801063a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	68b9      	ldr	r1, [r7, #8]
 801062c:	4618      	mov	r0, r3
 801062e:	f000 fddf 	bl	80111f0 <TIM_OC6_SetConfig>
      break;
 8010632:	e002      	b.n	801063a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8010634:	2301      	movs	r3, #1
 8010636:	75fb      	strb	r3, [r7, #23]
      break;
 8010638:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2200      	movs	r2, #0
 801063e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010642:	7dfb      	ldrb	r3, [r7, #23]
}
 8010644:	4618      	mov	r0, r3
 8010646:	3718      	adds	r7, #24
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b086      	sub	sp, #24
 8010650:	af00      	add	r7, sp, #0
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	60b9      	str	r1, [r7, #8]
 8010656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010658:	2300      	movs	r3, #0
 801065a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010662:	2b01      	cmp	r3, #1
 8010664:	d101      	bne.n	801066a <HAL_TIM_IC_ConfigChannel+0x1e>
 8010666:	2302      	movs	r3, #2
 8010668:	e088      	b.n	801077c <HAL_TIM_IC_ConfigChannel+0x130>
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2201      	movs	r2, #1
 801066e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d11b      	bne.n	80106b0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8010688:	f000 feac 	bl	80113e4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	699a      	ldr	r2, [r3, #24]
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	f022 020c 	bic.w	r2, r2, #12
 801069a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	6999      	ldr	r1, [r3, #24]
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	689a      	ldr	r2, [r3, #8]
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	430a      	orrs	r2, r1
 80106ac:	619a      	str	r2, [r3, #24]
 80106ae:	e060      	b.n	8010772 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2b04      	cmp	r3, #4
 80106b4:	d11c      	bne.n	80106f0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80106c6:	f000 ff2a 	bl	801151e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	699a      	ldr	r2, [r3, #24]
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80106d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	6999      	ldr	r1, [r3, #24]
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	689b      	ldr	r3, [r3, #8]
 80106e4:	021a      	lsls	r2, r3, #8
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	430a      	orrs	r2, r1
 80106ec:	619a      	str	r2, [r3, #24]
 80106ee:	e040      	b.n	8010772 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2b08      	cmp	r3, #8
 80106f4:	d11b      	bne.n	801072e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8010706:	f000 ff77 	bl	80115f8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	69da      	ldr	r2, [r3, #28]
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f022 020c 	bic.w	r2, r2, #12
 8010718:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	69d9      	ldr	r1, [r3, #28]
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	689a      	ldr	r2, [r3, #8]
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	430a      	orrs	r2, r1
 801072a:	61da      	str	r2, [r3, #28]
 801072c:	e021      	b.n	8010772 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2b0c      	cmp	r3, #12
 8010732:	d11c      	bne.n	801076e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8010744:	f000 ff94 	bl	8011670 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	69da      	ldr	r2, [r3, #28]
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8010756:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	69d9      	ldr	r1, [r3, #28]
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	689b      	ldr	r3, [r3, #8]
 8010762:	021a      	lsls	r2, r3, #8
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	430a      	orrs	r2, r1
 801076a:	61da      	str	r2, [r3, #28]
 801076c:	e001      	b.n	8010772 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801076e:	2301      	movs	r3, #1
 8010770:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2200      	movs	r2, #0
 8010776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801077a:	7dfb      	ldrb	r3, [r7, #23]
}
 801077c:	4618      	mov	r0, r3
 801077e:	3718      	adds	r7, #24
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b086      	sub	sp, #24
 8010788:	af00      	add	r7, sp, #0
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	60b9      	str	r1, [r7, #8]
 801078e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010790:	2300      	movs	r3, #0
 8010792:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801079a:	2b01      	cmp	r3, #1
 801079c:	d101      	bne.n	80107a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801079e:	2302      	movs	r3, #2
 80107a0:	e0ff      	b.n	80109a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2201      	movs	r2, #1
 80107a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2b14      	cmp	r3, #20
 80107ae:	f200 80f0 	bhi.w	8010992 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80107b2:	a201      	add	r2, pc, #4	@ (adr r2, 80107b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80107b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107b8:	0801080d 	.word	0x0801080d
 80107bc:	08010993 	.word	0x08010993
 80107c0:	08010993 	.word	0x08010993
 80107c4:	08010993 	.word	0x08010993
 80107c8:	0801084d 	.word	0x0801084d
 80107cc:	08010993 	.word	0x08010993
 80107d0:	08010993 	.word	0x08010993
 80107d4:	08010993 	.word	0x08010993
 80107d8:	0801088f 	.word	0x0801088f
 80107dc:	08010993 	.word	0x08010993
 80107e0:	08010993 	.word	0x08010993
 80107e4:	08010993 	.word	0x08010993
 80107e8:	080108cf 	.word	0x080108cf
 80107ec:	08010993 	.word	0x08010993
 80107f0:	08010993 	.word	0x08010993
 80107f4:	08010993 	.word	0x08010993
 80107f8:	08010911 	.word	0x08010911
 80107fc:	08010993 	.word	0x08010993
 8010800:	08010993 	.word	0x08010993
 8010804:	08010993 	.word	0x08010993
 8010808:	08010951 	.word	0x08010951
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	68b9      	ldr	r1, [r7, #8]
 8010812:	4618      	mov	r0, r3
 8010814:	f000 fa7c 	bl	8010d10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	699a      	ldr	r2, [r3, #24]
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	f042 0208 	orr.w	r2, r2, #8
 8010826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	699a      	ldr	r2, [r3, #24]
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f022 0204 	bic.w	r2, r2, #4
 8010836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	6999      	ldr	r1, [r3, #24]
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	691a      	ldr	r2, [r3, #16]
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	430a      	orrs	r2, r1
 8010848:	619a      	str	r2, [r3, #24]
      break;
 801084a:	e0a5      	b.n	8010998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	68b9      	ldr	r1, [r7, #8]
 8010852:	4618      	mov	r0, r3
 8010854:	f000 faec 	bl	8010e30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	699a      	ldr	r2, [r3, #24]
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	699a      	ldr	r2, [r3, #24]
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	6999      	ldr	r1, [r3, #24]
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	691b      	ldr	r3, [r3, #16]
 8010882:	021a      	lsls	r2, r3, #8
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	430a      	orrs	r2, r1
 801088a:	619a      	str	r2, [r3, #24]
      break;
 801088c:	e084      	b.n	8010998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	68b9      	ldr	r1, [r7, #8]
 8010894:	4618      	mov	r0, r3
 8010896:	f000 fb55 	bl	8010f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	69da      	ldr	r2, [r3, #28]
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	f042 0208 	orr.w	r2, r2, #8
 80108a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	69da      	ldr	r2, [r3, #28]
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	f022 0204 	bic.w	r2, r2, #4
 80108b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	69d9      	ldr	r1, [r3, #28]
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	691a      	ldr	r2, [r3, #16]
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	430a      	orrs	r2, r1
 80108ca:	61da      	str	r2, [r3, #28]
      break;
 80108cc:	e064      	b.n	8010998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	68b9      	ldr	r1, [r7, #8]
 80108d4:	4618      	mov	r0, r3
 80108d6:	f000 fbbd 	bl	8011054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	69da      	ldr	r2, [r3, #28]
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80108e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	69da      	ldr	r2, [r3, #28]
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80108f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	69d9      	ldr	r1, [r3, #28]
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	691b      	ldr	r3, [r3, #16]
 8010904:	021a      	lsls	r2, r3, #8
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	430a      	orrs	r2, r1
 801090c:	61da      	str	r2, [r3, #28]
      break;
 801090e:	e043      	b.n	8010998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	68b9      	ldr	r1, [r7, #8]
 8010916:	4618      	mov	r0, r3
 8010918:	f000 fc06 	bl	8011128 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f042 0208 	orr.w	r2, r2, #8
 801092a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	f022 0204 	bic.w	r2, r2, #4
 801093a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	691a      	ldr	r2, [r3, #16]
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	430a      	orrs	r2, r1
 801094c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801094e:	e023      	b.n	8010998 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	68b9      	ldr	r1, [r7, #8]
 8010956:	4618      	mov	r0, r3
 8010958:	f000 fc4a 	bl	80111f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801096a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801097a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	691b      	ldr	r3, [r3, #16]
 8010986:	021a      	lsls	r2, r3, #8
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	430a      	orrs	r2, r1
 801098e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8010990:	e002      	b.n	8010998 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010992:	2301      	movs	r3, #1
 8010994:	75fb      	strb	r3, [r7, #23]
      break;
 8010996:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2200      	movs	r2, #0
 801099c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80109a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3718      	adds	r7, #24
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop

080109ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b084      	sub	sp, #16
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80109b6:	2300      	movs	r3, #0
 80109b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d101      	bne.n	80109c8 <HAL_TIM_ConfigClockSource+0x1c>
 80109c4:	2302      	movs	r3, #2
 80109c6:	e0b6      	b.n	8010b36 <HAL_TIM_ConfigClockSource+0x18a>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2201      	movs	r2, #1
 80109cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2202      	movs	r2, #2
 80109d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	689b      	ldr	r3, [r3, #8]
 80109de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80109e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80109ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80109f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	68ba      	ldr	r2, [r7, #8]
 80109fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010a04:	d03e      	beq.n	8010a84 <HAL_TIM_ConfigClockSource+0xd8>
 8010a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010a0a:	f200 8087 	bhi.w	8010b1c <HAL_TIM_ConfigClockSource+0x170>
 8010a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010a12:	f000 8086 	beq.w	8010b22 <HAL_TIM_ConfigClockSource+0x176>
 8010a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010a1a:	d87f      	bhi.n	8010b1c <HAL_TIM_ConfigClockSource+0x170>
 8010a1c:	2b70      	cmp	r3, #112	@ 0x70
 8010a1e:	d01a      	beq.n	8010a56 <HAL_TIM_ConfigClockSource+0xaa>
 8010a20:	2b70      	cmp	r3, #112	@ 0x70
 8010a22:	d87b      	bhi.n	8010b1c <HAL_TIM_ConfigClockSource+0x170>
 8010a24:	2b60      	cmp	r3, #96	@ 0x60
 8010a26:	d050      	beq.n	8010aca <HAL_TIM_ConfigClockSource+0x11e>
 8010a28:	2b60      	cmp	r3, #96	@ 0x60
 8010a2a:	d877      	bhi.n	8010b1c <HAL_TIM_ConfigClockSource+0x170>
 8010a2c:	2b50      	cmp	r3, #80	@ 0x50
 8010a2e:	d03c      	beq.n	8010aaa <HAL_TIM_ConfigClockSource+0xfe>
 8010a30:	2b50      	cmp	r3, #80	@ 0x50
 8010a32:	d873      	bhi.n	8010b1c <HAL_TIM_ConfigClockSource+0x170>
 8010a34:	2b40      	cmp	r3, #64	@ 0x40
 8010a36:	d058      	beq.n	8010aea <HAL_TIM_ConfigClockSource+0x13e>
 8010a38:	2b40      	cmp	r3, #64	@ 0x40
 8010a3a:	d86f      	bhi.n	8010b1c <HAL_TIM_ConfigClockSource+0x170>
 8010a3c:	2b30      	cmp	r3, #48	@ 0x30
 8010a3e:	d064      	beq.n	8010b0a <HAL_TIM_ConfigClockSource+0x15e>
 8010a40:	2b30      	cmp	r3, #48	@ 0x30
 8010a42:	d86b      	bhi.n	8010b1c <HAL_TIM_ConfigClockSource+0x170>
 8010a44:	2b20      	cmp	r3, #32
 8010a46:	d060      	beq.n	8010b0a <HAL_TIM_ConfigClockSource+0x15e>
 8010a48:	2b20      	cmp	r3, #32
 8010a4a:	d867      	bhi.n	8010b1c <HAL_TIM_ConfigClockSource+0x170>
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d05c      	beq.n	8010b0a <HAL_TIM_ConfigClockSource+0x15e>
 8010a50:	2b10      	cmp	r3, #16
 8010a52:	d05a      	beq.n	8010b0a <HAL_TIM_ConfigClockSource+0x15e>
 8010a54:	e062      	b.n	8010b1c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010a66:	f000 fe5b 	bl	8011720 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	689b      	ldr	r3, [r3, #8]
 8010a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	68ba      	ldr	r2, [r7, #8]
 8010a80:	609a      	str	r2, [r3, #8]
      break;
 8010a82:	e04f      	b.n	8010b24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010a94:	f000 fe44 	bl	8011720 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	689a      	ldr	r2, [r3, #8]
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010aa6:	609a      	str	r2, [r3, #8]
      break;
 8010aa8:	e03c      	b.n	8010b24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	f000 fd02 	bl	80114c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	2150      	movs	r1, #80	@ 0x50
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f000 fe11 	bl	80116ea <TIM_ITRx_SetConfig>
      break;
 8010ac8:	e02c      	b.n	8010b24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	f000 fd5e 	bl	8011598 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	2160      	movs	r1, #96	@ 0x60
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f000 fe01 	bl	80116ea <TIM_ITRx_SetConfig>
      break;
 8010ae8:	e01c      	b.n	8010b24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010af6:	461a      	mov	r2, r3
 8010af8:	f000 fce2 	bl	80114c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	2140      	movs	r1, #64	@ 0x40
 8010b02:	4618      	mov	r0, r3
 8010b04:	f000 fdf1 	bl	80116ea <TIM_ITRx_SetConfig>
      break;
 8010b08:	e00c      	b.n	8010b24 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681a      	ldr	r2, [r3, #0]
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	4619      	mov	r1, r3
 8010b14:	4610      	mov	r0, r2
 8010b16:	f000 fde8 	bl	80116ea <TIM_ITRx_SetConfig>
      break;
 8010b1a:	e003      	b.n	8010b24 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8010b20:	e000      	b.n	8010b24 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8010b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2201      	movs	r2, #1
 8010b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3710      	adds	r7, #16
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}

08010b3e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8010b3e:	b580      	push	{r7, lr}
 8010b40:	b082      	sub	sp, #8
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	6078      	str	r0, [r7, #4]
 8010b46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010b4e:	2b01      	cmp	r3, #1
 8010b50:	d101      	bne.n	8010b56 <HAL_TIM_SlaveConfigSynchro+0x18>
 8010b52:	2302      	movs	r3, #2
 8010b54:	e031      	b.n	8010bba <HAL_TIM_SlaveConfigSynchro+0x7c>
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2201      	movs	r2, #1
 8010b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2202      	movs	r2, #2
 8010b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8010b66:	6839      	ldr	r1, [r7, #0]
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f000 fba7 	bl	80112bc <TIM_SlaveTimer_SetConfig>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d009      	beq.n	8010b88 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2201      	movs	r2, #1
 8010b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8010b84:	2301      	movs	r3, #1
 8010b86:	e018      	b.n	8010bba <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	68da      	ldr	r2, [r3, #12]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010b96:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	68da      	ldr	r2, [r3, #12]
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010ba6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2201      	movs	r2, #1
 8010bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010bb8:	2300      	movs	r3, #0
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3708      	adds	r7, #8
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
	...

08010bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b085      	sub	sp, #20
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	4a46      	ldr	r2, [pc, #280]	@ (8010cf0 <TIM_Base_SetConfig+0x12c>)
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d013      	beq.n	8010c04 <TIM_Base_SetConfig+0x40>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010be2:	d00f      	beq.n	8010c04 <TIM_Base_SetConfig+0x40>
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	4a43      	ldr	r2, [pc, #268]	@ (8010cf4 <TIM_Base_SetConfig+0x130>)
 8010be8:	4293      	cmp	r3, r2
 8010bea:	d00b      	beq.n	8010c04 <TIM_Base_SetConfig+0x40>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	4a42      	ldr	r2, [pc, #264]	@ (8010cf8 <TIM_Base_SetConfig+0x134>)
 8010bf0:	4293      	cmp	r3, r2
 8010bf2:	d007      	beq.n	8010c04 <TIM_Base_SetConfig+0x40>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	4a41      	ldr	r2, [pc, #260]	@ (8010cfc <TIM_Base_SetConfig+0x138>)
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	d003      	beq.n	8010c04 <TIM_Base_SetConfig+0x40>
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	4a40      	ldr	r2, [pc, #256]	@ (8010d00 <TIM_Base_SetConfig+0x13c>)
 8010c00:	4293      	cmp	r3, r2
 8010c02:	d108      	bne.n	8010c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	68fa      	ldr	r2, [r7, #12]
 8010c12:	4313      	orrs	r3, r2
 8010c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	4a35      	ldr	r2, [pc, #212]	@ (8010cf0 <TIM_Base_SetConfig+0x12c>)
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d01f      	beq.n	8010c5e <TIM_Base_SetConfig+0x9a>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c24:	d01b      	beq.n	8010c5e <TIM_Base_SetConfig+0x9a>
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	4a32      	ldr	r2, [pc, #200]	@ (8010cf4 <TIM_Base_SetConfig+0x130>)
 8010c2a:	4293      	cmp	r3, r2
 8010c2c:	d017      	beq.n	8010c5e <TIM_Base_SetConfig+0x9a>
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	4a31      	ldr	r2, [pc, #196]	@ (8010cf8 <TIM_Base_SetConfig+0x134>)
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d013      	beq.n	8010c5e <TIM_Base_SetConfig+0x9a>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	4a30      	ldr	r2, [pc, #192]	@ (8010cfc <TIM_Base_SetConfig+0x138>)
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d00f      	beq.n	8010c5e <TIM_Base_SetConfig+0x9a>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	4a2f      	ldr	r2, [pc, #188]	@ (8010d00 <TIM_Base_SetConfig+0x13c>)
 8010c42:	4293      	cmp	r3, r2
 8010c44:	d00b      	beq.n	8010c5e <TIM_Base_SetConfig+0x9a>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	4a2e      	ldr	r2, [pc, #184]	@ (8010d04 <TIM_Base_SetConfig+0x140>)
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d007      	beq.n	8010c5e <TIM_Base_SetConfig+0x9a>
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	4a2d      	ldr	r2, [pc, #180]	@ (8010d08 <TIM_Base_SetConfig+0x144>)
 8010c52:	4293      	cmp	r3, r2
 8010c54:	d003      	beq.n	8010c5e <TIM_Base_SetConfig+0x9a>
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	4a2c      	ldr	r2, [pc, #176]	@ (8010d0c <TIM_Base_SetConfig+0x148>)
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d108      	bne.n	8010c70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	68db      	ldr	r3, [r3, #12]
 8010c6a:	68fa      	ldr	r2, [r7, #12]
 8010c6c:	4313      	orrs	r3, r2
 8010c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	695b      	ldr	r3, [r3, #20]
 8010c7a:	4313      	orrs	r3, r2
 8010c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	68fa      	ldr	r2, [r7, #12]
 8010c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	689a      	ldr	r2, [r3, #8]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	681a      	ldr	r2, [r3, #0]
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	4a16      	ldr	r2, [pc, #88]	@ (8010cf0 <TIM_Base_SetConfig+0x12c>)
 8010c98:	4293      	cmp	r3, r2
 8010c9a:	d00f      	beq.n	8010cbc <TIM_Base_SetConfig+0xf8>
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	4a18      	ldr	r2, [pc, #96]	@ (8010d00 <TIM_Base_SetConfig+0x13c>)
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d00b      	beq.n	8010cbc <TIM_Base_SetConfig+0xf8>
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	4a17      	ldr	r2, [pc, #92]	@ (8010d04 <TIM_Base_SetConfig+0x140>)
 8010ca8:	4293      	cmp	r3, r2
 8010caa:	d007      	beq.n	8010cbc <TIM_Base_SetConfig+0xf8>
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	4a16      	ldr	r2, [pc, #88]	@ (8010d08 <TIM_Base_SetConfig+0x144>)
 8010cb0:	4293      	cmp	r3, r2
 8010cb2:	d003      	beq.n	8010cbc <TIM_Base_SetConfig+0xf8>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	4a15      	ldr	r2, [pc, #84]	@ (8010d0c <TIM_Base_SetConfig+0x148>)
 8010cb8:	4293      	cmp	r3, r2
 8010cba:	d103      	bne.n	8010cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	691a      	ldr	r2, [r3, #16]
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	691b      	ldr	r3, [r3, #16]
 8010cce:	f003 0301 	and.w	r3, r3, #1
 8010cd2:	2b01      	cmp	r3, #1
 8010cd4:	d105      	bne.n	8010ce2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	691b      	ldr	r3, [r3, #16]
 8010cda:	f023 0201 	bic.w	r2, r3, #1
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	611a      	str	r2, [r3, #16]
  }
}
 8010ce2:	bf00      	nop
 8010ce4:	3714      	adds	r7, #20
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cec:	4770      	bx	lr
 8010cee:	bf00      	nop
 8010cf0:	40012c00 	.word	0x40012c00
 8010cf4:	40000400 	.word	0x40000400
 8010cf8:	40000800 	.word	0x40000800
 8010cfc:	40000c00 	.word	0x40000c00
 8010d00:	40013400 	.word	0x40013400
 8010d04:	40014000 	.word	0x40014000
 8010d08:	40014400 	.word	0x40014400
 8010d0c:	40014800 	.word	0x40014800

08010d10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010d10:	b480      	push	{r7}
 8010d12:	b087      	sub	sp, #28
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6a1b      	ldr	r3, [r3, #32]
 8010d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6a1b      	ldr	r3, [r3, #32]
 8010d24:	f023 0201 	bic.w	r2, r3, #1
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	685b      	ldr	r3, [r3, #4]
 8010d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	699b      	ldr	r3, [r3, #24]
 8010d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	f023 0303 	bic.w	r3, r3, #3
 8010d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	68fa      	ldr	r2, [r7, #12]
 8010d52:	4313      	orrs	r3, r2
 8010d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	f023 0302 	bic.w	r3, r3, #2
 8010d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	697a      	ldr	r2, [r7, #20]
 8010d64:	4313      	orrs	r3, r2
 8010d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8010e1c <TIM_OC1_SetConfig+0x10c>)
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	d00f      	beq.n	8010d90 <TIM_OC1_SetConfig+0x80>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	4a2b      	ldr	r2, [pc, #172]	@ (8010e20 <TIM_OC1_SetConfig+0x110>)
 8010d74:	4293      	cmp	r3, r2
 8010d76:	d00b      	beq.n	8010d90 <TIM_OC1_SetConfig+0x80>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8010e24 <TIM_OC1_SetConfig+0x114>)
 8010d7c:	4293      	cmp	r3, r2
 8010d7e:	d007      	beq.n	8010d90 <TIM_OC1_SetConfig+0x80>
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	4a29      	ldr	r2, [pc, #164]	@ (8010e28 <TIM_OC1_SetConfig+0x118>)
 8010d84:	4293      	cmp	r3, r2
 8010d86:	d003      	beq.n	8010d90 <TIM_OC1_SetConfig+0x80>
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	4a28      	ldr	r2, [pc, #160]	@ (8010e2c <TIM_OC1_SetConfig+0x11c>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d10c      	bne.n	8010daa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	f023 0308 	bic.w	r3, r3, #8
 8010d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	68db      	ldr	r3, [r3, #12]
 8010d9c:	697a      	ldr	r2, [r7, #20]
 8010d9e:	4313      	orrs	r3, r2
 8010da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	f023 0304 	bic.w	r3, r3, #4
 8010da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	4a1b      	ldr	r2, [pc, #108]	@ (8010e1c <TIM_OC1_SetConfig+0x10c>)
 8010dae:	4293      	cmp	r3, r2
 8010db0:	d00f      	beq.n	8010dd2 <TIM_OC1_SetConfig+0xc2>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	4a1a      	ldr	r2, [pc, #104]	@ (8010e20 <TIM_OC1_SetConfig+0x110>)
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d00b      	beq.n	8010dd2 <TIM_OC1_SetConfig+0xc2>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	4a19      	ldr	r2, [pc, #100]	@ (8010e24 <TIM_OC1_SetConfig+0x114>)
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d007      	beq.n	8010dd2 <TIM_OC1_SetConfig+0xc2>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	4a18      	ldr	r2, [pc, #96]	@ (8010e28 <TIM_OC1_SetConfig+0x118>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d003      	beq.n	8010dd2 <TIM_OC1_SetConfig+0xc2>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	4a17      	ldr	r2, [pc, #92]	@ (8010e2c <TIM_OC1_SetConfig+0x11c>)
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d111      	bne.n	8010df6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	695b      	ldr	r3, [r3, #20]
 8010de6:	693a      	ldr	r2, [r7, #16]
 8010de8:	4313      	orrs	r3, r2
 8010dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	699b      	ldr	r3, [r3, #24]
 8010df0:	693a      	ldr	r2, [r7, #16]
 8010df2:	4313      	orrs	r3, r2
 8010df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	693a      	ldr	r2, [r7, #16]
 8010dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	68fa      	ldr	r2, [r7, #12]
 8010e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	685a      	ldr	r2, [r3, #4]
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	697a      	ldr	r2, [r7, #20]
 8010e0e:	621a      	str	r2, [r3, #32]
}
 8010e10:	bf00      	nop
 8010e12:	371c      	adds	r7, #28
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr
 8010e1c:	40012c00 	.word	0x40012c00
 8010e20:	40013400 	.word	0x40013400
 8010e24:	40014000 	.word	0x40014000
 8010e28:	40014400 	.word	0x40014400
 8010e2c:	40014800 	.word	0x40014800

08010e30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b087      	sub	sp, #28
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	6a1b      	ldr	r3, [r3, #32]
 8010e3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6a1b      	ldr	r3, [r3, #32]
 8010e44:	f023 0210 	bic.w	r2, r3, #16
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	699b      	ldr	r3, [r3, #24]
 8010e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	021b      	lsls	r3, r3, #8
 8010e72:	68fa      	ldr	r2, [r7, #12]
 8010e74:	4313      	orrs	r3, r2
 8010e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	f023 0320 	bic.w	r3, r3, #32
 8010e7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	689b      	ldr	r3, [r3, #8]
 8010e84:	011b      	lsls	r3, r3, #4
 8010e86:	697a      	ldr	r2, [r7, #20]
 8010e88:	4313      	orrs	r3, r2
 8010e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	4a28      	ldr	r2, [pc, #160]	@ (8010f30 <TIM_OC2_SetConfig+0x100>)
 8010e90:	4293      	cmp	r3, r2
 8010e92:	d003      	beq.n	8010e9c <TIM_OC2_SetConfig+0x6c>
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	4a27      	ldr	r2, [pc, #156]	@ (8010f34 <TIM_OC2_SetConfig+0x104>)
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	d10d      	bne.n	8010eb8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	68db      	ldr	r3, [r3, #12]
 8010ea8:	011b      	lsls	r3, r3, #4
 8010eaa:	697a      	ldr	r2, [r7, #20]
 8010eac:	4313      	orrs	r3, r2
 8010eae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010eb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	4a1d      	ldr	r2, [pc, #116]	@ (8010f30 <TIM_OC2_SetConfig+0x100>)
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d00f      	beq.n	8010ee0 <TIM_OC2_SetConfig+0xb0>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8010f34 <TIM_OC2_SetConfig+0x104>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d00b      	beq.n	8010ee0 <TIM_OC2_SetConfig+0xb0>
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	4a1b      	ldr	r2, [pc, #108]	@ (8010f38 <TIM_OC2_SetConfig+0x108>)
 8010ecc:	4293      	cmp	r3, r2
 8010ece:	d007      	beq.n	8010ee0 <TIM_OC2_SetConfig+0xb0>
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8010f3c <TIM_OC2_SetConfig+0x10c>)
 8010ed4:	4293      	cmp	r3, r2
 8010ed6:	d003      	beq.n	8010ee0 <TIM_OC2_SetConfig+0xb0>
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	4a19      	ldr	r2, [pc, #100]	@ (8010f40 <TIM_OC2_SetConfig+0x110>)
 8010edc:	4293      	cmp	r3, r2
 8010ede:	d113      	bne.n	8010f08 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010ee6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010eee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	695b      	ldr	r3, [r3, #20]
 8010ef4:	009b      	lsls	r3, r3, #2
 8010ef6:	693a      	ldr	r2, [r7, #16]
 8010ef8:	4313      	orrs	r3, r2
 8010efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	699b      	ldr	r3, [r3, #24]
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	693a      	ldr	r2, [r7, #16]
 8010f04:	4313      	orrs	r3, r2
 8010f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	693a      	ldr	r2, [r7, #16]
 8010f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	68fa      	ldr	r2, [r7, #12]
 8010f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	685a      	ldr	r2, [r3, #4]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	697a      	ldr	r2, [r7, #20]
 8010f20:	621a      	str	r2, [r3, #32]
}
 8010f22:	bf00      	nop
 8010f24:	371c      	adds	r7, #28
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr
 8010f2e:	bf00      	nop
 8010f30:	40012c00 	.word	0x40012c00
 8010f34:	40013400 	.word	0x40013400
 8010f38:	40014000 	.word	0x40014000
 8010f3c:	40014400 	.word	0x40014400
 8010f40:	40014800 	.word	0x40014800

08010f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010f44:	b480      	push	{r7}
 8010f46:	b087      	sub	sp, #28
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
 8010f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6a1b      	ldr	r3, [r3, #32]
 8010f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6a1b      	ldr	r3, [r3, #32]
 8010f58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	69db      	ldr	r3, [r3, #28]
 8010f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	f023 0303 	bic.w	r3, r3, #3
 8010f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	68fa      	ldr	r2, [r7, #12]
 8010f86:	4313      	orrs	r3, r2
 8010f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	689b      	ldr	r3, [r3, #8]
 8010f96:	021b      	lsls	r3, r3, #8
 8010f98:	697a      	ldr	r2, [r7, #20]
 8010f9a:	4313      	orrs	r3, r2
 8010f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	4a27      	ldr	r2, [pc, #156]	@ (8011040 <TIM_OC3_SetConfig+0xfc>)
 8010fa2:	4293      	cmp	r3, r2
 8010fa4:	d003      	beq.n	8010fae <TIM_OC3_SetConfig+0x6a>
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	4a26      	ldr	r2, [pc, #152]	@ (8011044 <TIM_OC3_SetConfig+0x100>)
 8010faa:	4293      	cmp	r3, r2
 8010fac:	d10d      	bne.n	8010fca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	68db      	ldr	r3, [r3, #12]
 8010fba:	021b      	lsls	r3, r3, #8
 8010fbc:	697a      	ldr	r2, [r7, #20]
 8010fbe:	4313      	orrs	r3, r2
 8010fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8011040 <TIM_OC3_SetConfig+0xfc>)
 8010fce:	4293      	cmp	r3, r2
 8010fd0:	d00f      	beq.n	8010ff2 <TIM_OC3_SetConfig+0xae>
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8011044 <TIM_OC3_SetConfig+0x100>)
 8010fd6:	4293      	cmp	r3, r2
 8010fd8:	d00b      	beq.n	8010ff2 <TIM_OC3_SetConfig+0xae>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8011048 <TIM_OC3_SetConfig+0x104>)
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d007      	beq.n	8010ff2 <TIM_OC3_SetConfig+0xae>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	4a19      	ldr	r2, [pc, #100]	@ (801104c <TIM_OC3_SetConfig+0x108>)
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d003      	beq.n	8010ff2 <TIM_OC3_SetConfig+0xae>
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	4a18      	ldr	r2, [pc, #96]	@ (8011050 <TIM_OC3_SetConfig+0x10c>)
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d113      	bne.n	801101a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010ffa:	693b      	ldr	r3, [r7, #16]
 8010ffc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	695b      	ldr	r3, [r3, #20]
 8011006:	011b      	lsls	r3, r3, #4
 8011008:	693a      	ldr	r2, [r7, #16]
 801100a:	4313      	orrs	r3, r2
 801100c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	699b      	ldr	r3, [r3, #24]
 8011012:	011b      	lsls	r3, r3, #4
 8011014:	693a      	ldr	r2, [r7, #16]
 8011016:	4313      	orrs	r3, r2
 8011018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	693a      	ldr	r2, [r7, #16]
 801101e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	68fa      	ldr	r2, [r7, #12]
 8011024:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	685a      	ldr	r2, [r3, #4]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	697a      	ldr	r2, [r7, #20]
 8011032:	621a      	str	r2, [r3, #32]
}
 8011034:	bf00      	nop
 8011036:	371c      	adds	r7, #28
 8011038:	46bd      	mov	sp, r7
 801103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103e:	4770      	bx	lr
 8011040:	40012c00 	.word	0x40012c00
 8011044:	40013400 	.word	0x40013400
 8011048:	40014000 	.word	0x40014000
 801104c:	40014400 	.word	0x40014400
 8011050:	40014800 	.word	0x40014800

08011054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011054:	b480      	push	{r7}
 8011056:	b087      	sub	sp, #28
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	6a1b      	ldr	r3, [r3, #32]
 8011062:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	6a1b      	ldr	r3, [r3, #32]
 8011068:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	685b      	ldr	r3, [r3, #4]
 8011074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	69db      	ldr	r3, [r3, #28]
 801107a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801108e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	021b      	lsls	r3, r3, #8
 8011096:	68fa      	ldr	r2, [r7, #12]
 8011098:	4313      	orrs	r3, r2
 801109a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80110a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	689b      	ldr	r3, [r3, #8]
 80110a8:	031b      	lsls	r3, r3, #12
 80110aa:	693a      	ldr	r2, [r7, #16]
 80110ac:	4313      	orrs	r3, r2
 80110ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	4a18      	ldr	r2, [pc, #96]	@ (8011114 <TIM_OC4_SetConfig+0xc0>)
 80110b4:	4293      	cmp	r3, r2
 80110b6:	d00f      	beq.n	80110d8 <TIM_OC4_SetConfig+0x84>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	4a17      	ldr	r2, [pc, #92]	@ (8011118 <TIM_OC4_SetConfig+0xc4>)
 80110bc:	4293      	cmp	r3, r2
 80110be:	d00b      	beq.n	80110d8 <TIM_OC4_SetConfig+0x84>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	4a16      	ldr	r2, [pc, #88]	@ (801111c <TIM_OC4_SetConfig+0xc8>)
 80110c4:	4293      	cmp	r3, r2
 80110c6:	d007      	beq.n	80110d8 <TIM_OC4_SetConfig+0x84>
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	4a15      	ldr	r2, [pc, #84]	@ (8011120 <TIM_OC4_SetConfig+0xcc>)
 80110cc:	4293      	cmp	r3, r2
 80110ce:	d003      	beq.n	80110d8 <TIM_OC4_SetConfig+0x84>
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	4a14      	ldr	r2, [pc, #80]	@ (8011124 <TIM_OC4_SetConfig+0xd0>)
 80110d4:	4293      	cmp	r3, r2
 80110d6:	d109      	bne.n	80110ec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80110de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	695b      	ldr	r3, [r3, #20]
 80110e4:	019b      	lsls	r3, r3, #6
 80110e6:	697a      	ldr	r2, [r7, #20]
 80110e8:	4313      	orrs	r3, r2
 80110ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	697a      	ldr	r2, [r7, #20]
 80110f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	68fa      	ldr	r2, [r7, #12]
 80110f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	685a      	ldr	r2, [r3, #4]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	693a      	ldr	r2, [r7, #16]
 8011104:	621a      	str	r2, [r3, #32]
}
 8011106:	bf00      	nop
 8011108:	371c      	adds	r7, #28
 801110a:	46bd      	mov	sp, r7
 801110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011110:	4770      	bx	lr
 8011112:	bf00      	nop
 8011114:	40012c00 	.word	0x40012c00
 8011118:	40013400 	.word	0x40013400
 801111c:	40014000 	.word	0x40014000
 8011120:	40014400 	.word	0x40014400
 8011124:	40014800 	.word	0x40014800

08011128 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011128:	b480      	push	{r7}
 801112a:	b087      	sub	sp, #28
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	6a1b      	ldr	r3, [r3, #32]
 8011136:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6a1b      	ldr	r3, [r3, #32]
 801113c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801114e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801115a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	68fa      	ldr	r2, [r7, #12]
 8011162:	4313      	orrs	r3, r2
 8011164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011166:	693b      	ldr	r3, [r7, #16]
 8011168:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801116c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	689b      	ldr	r3, [r3, #8]
 8011172:	041b      	lsls	r3, r3, #16
 8011174:	693a      	ldr	r2, [r7, #16]
 8011176:	4313      	orrs	r3, r2
 8011178:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	4a17      	ldr	r2, [pc, #92]	@ (80111dc <TIM_OC5_SetConfig+0xb4>)
 801117e:	4293      	cmp	r3, r2
 8011180:	d00f      	beq.n	80111a2 <TIM_OC5_SetConfig+0x7a>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	4a16      	ldr	r2, [pc, #88]	@ (80111e0 <TIM_OC5_SetConfig+0xb8>)
 8011186:	4293      	cmp	r3, r2
 8011188:	d00b      	beq.n	80111a2 <TIM_OC5_SetConfig+0x7a>
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	4a15      	ldr	r2, [pc, #84]	@ (80111e4 <TIM_OC5_SetConfig+0xbc>)
 801118e:	4293      	cmp	r3, r2
 8011190:	d007      	beq.n	80111a2 <TIM_OC5_SetConfig+0x7a>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	4a14      	ldr	r2, [pc, #80]	@ (80111e8 <TIM_OC5_SetConfig+0xc0>)
 8011196:	4293      	cmp	r3, r2
 8011198:	d003      	beq.n	80111a2 <TIM_OC5_SetConfig+0x7a>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	4a13      	ldr	r2, [pc, #76]	@ (80111ec <TIM_OC5_SetConfig+0xc4>)
 801119e:	4293      	cmp	r3, r2
 80111a0:	d109      	bne.n	80111b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80111a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	695b      	ldr	r3, [r3, #20]
 80111ae:	021b      	lsls	r3, r3, #8
 80111b0:	697a      	ldr	r2, [r7, #20]
 80111b2:	4313      	orrs	r3, r2
 80111b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	697a      	ldr	r2, [r7, #20]
 80111ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	68fa      	ldr	r2, [r7, #12]
 80111c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	685a      	ldr	r2, [r3, #4]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	693a      	ldr	r2, [r7, #16]
 80111ce:	621a      	str	r2, [r3, #32]
}
 80111d0:	bf00      	nop
 80111d2:	371c      	adds	r7, #28
 80111d4:	46bd      	mov	sp, r7
 80111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111da:	4770      	bx	lr
 80111dc:	40012c00 	.word	0x40012c00
 80111e0:	40013400 	.word	0x40013400
 80111e4:	40014000 	.word	0x40014000
 80111e8:	40014400 	.word	0x40014400
 80111ec:	40014800 	.word	0x40014800

080111f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80111f0:	b480      	push	{r7}
 80111f2:	b087      	sub	sp, #28
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
 80111f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	6a1b      	ldr	r3, [r3, #32]
 80111fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6a1b      	ldr	r3, [r3, #32]
 8011204:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	685b      	ldr	r3, [r3, #4]
 8011210:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801121e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	021b      	lsls	r3, r3, #8
 801122a:	68fa      	ldr	r2, [r7, #12]
 801122c:	4313      	orrs	r3, r2
 801122e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	689b      	ldr	r3, [r3, #8]
 801123c:	051b      	lsls	r3, r3, #20
 801123e:	693a      	ldr	r2, [r7, #16]
 8011240:	4313      	orrs	r3, r2
 8011242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	4a18      	ldr	r2, [pc, #96]	@ (80112a8 <TIM_OC6_SetConfig+0xb8>)
 8011248:	4293      	cmp	r3, r2
 801124a:	d00f      	beq.n	801126c <TIM_OC6_SetConfig+0x7c>
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	4a17      	ldr	r2, [pc, #92]	@ (80112ac <TIM_OC6_SetConfig+0xbc>)
 8011250:	4293      	cmp	r3, r2
 8011252:	d00b      	beq.n	801126c <TIM_OC6_SetConfig+0x7c>
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	4a16      	ldr	r2, [pc, #88]	@ (80112b0 <TIM_OC6_SetConfig+0xc0>)
 8011258:	4293      	cmp	r3, r2
 801125a:	d007      	beq.n	801126c <TIM_OC6_SetConfig+0x7c>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	4a15      	ldr	r2, [pc, #84]	@ (80112b4 <TIM_OC6_SetConfig+0xc4>)
 8011260:	4293      	cmp	r3, r2
 8011262:	d003      	beq.n	801126c <TIM_OC6_SetConfig+0x7c>
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	4a14      	ldr	r2, [pc, #80]	@ (80112b8 <TIM_OC6_SetConfig+0xc8>)
 8011268:	4293      	cmp	r3, r2
 801126a:	d109      	bne.n	8011280 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011272:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	695b      	ldr	r3, [r3, #20]
 8011278:	029b      	lsls	r3, r3, #10
 801127a:	697a      	ldr	r2, [r7, #20]
 801127c:	4313      	orrs	r3, r2
 801127e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	697a      	ldr	r2, [r7, #20]
 8011284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	68fa      	ldr	r2, [r7, #12]
 801128a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	685a      	ldr	r2, [r3, #4]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	693a      	ldr	r2, [r7, #16]
 8011298:	621a      	str	r2, [r3, #32]
}
 801129a:	bf00      	nop
 801129c:	371c      	adds	r7, #28
 801129e:	46bd      	mov	sp, r7
 80112a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a4:	4770      	bx	lr
 80112a6:	bf00      	nop
 80112a8:	40012c00 	.word	0x40012c00
 80112ac:	40013400 	.word	0x40013400
 80112b0:	40014000 	.word	0x40014000
 80112b4:	40014400 	.word	0x40014400
 80112b8:	40014800 	.word	0x40014800

080112bc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b086      	sub	sp, #24
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80112c6:	2300      	movs	r3, #0
 80112c8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	689b      	ldr	r3, [r3, #8]
 80112d0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112d8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	693a      	ldr	r2, [r7, #16]
 80112e0:	4313      	orrs	r3, r2
 80112e2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80112e4:	693b      	ldr	r3, [r7, #16]
 80112e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80112ea:	f023 0307 	bic.w	r3, r3, #7
 80112ee:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	693a      	ldr	r2, [r7, #16]
 80112f6:	4313      	orrs	r3, r2
 80112f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	693a      	ldr	r2, [r7, #16]
 8011300:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	2b70      	cmp	r3, #112	@ 0x70
 8011308:	d01a      	beq.n	8011340 <TIM_SlaveTimer_SetConfig+0x84>
 801130a:	2b70      	cmp	r3, #112	@ 0x70
 801130c:	d860      	bhi.n	80113d0 <TIM_SlaveTimer_SetConfig+0x114>
 801130e:	2b60      	cmp	r3, #96	@ 0x60
 8011310:	d054      	beq.n	80113bc <TIM_SlaveTimer_SetConfig+0x100>
 8011312:	2b60      	cmp	r3, #96	@ 0x60
 8011314:	d85c      	bhi.n	80113d0 <TIM_SlaveTimer_SetConfig+0x114>
 8011316:	2b50      	cmp	r3, #80	@ 0x50
 8011318:	d046      	beq.n	80113a8 <TIM_SlaveTimer_SetConfig+0xec>
 801131a:	2b50      	cmp	r3, #80	@ 0x50
 801131c:	d858      	bhi.n	80113d0 <TIM_SlaveTimer_SetConfig+0x114>
 801131e:	2b40      	cmp	r3, #64	@ 0x40
 8011320:	d019      	beq.n	8011356 <TIM_SlaveTimer_SetConfig+0x9a>
 8011322:	2b40      	cmp	r3, #64	@ 0x40
 8011324:	d854      	bhi.n	80113d0 <TIM_SlaveTimer_SetConfig+0x114>
 8011326:	2b30      	cmp	r3, #48	@ 0x30
 8011328:	d055      	beq.n	80113d6 <TIM_SlaveTimer_SetConfig+0x11a>
 801132a:	2b30      	cmp	r3, #48	@ 0x30
 801132c:	d850      	bhi.n	80113d0 <TIM_SlaveTimer_SetConfig+0x114>
 801132e:	2b20      	cmp	r3, #32
 8011330:	d051      	beq.n	80113d6 <TIM_SlaveTimer_SetConfig+0x11a>
 8011332:	2b20      	cmp	r3, #32
 8011334:	d84c      	bhi.n	80113d0 <TIM_SlaveTimer_SetConfig+0x114>
 8011336:	2b00      	cmp	r3, #0
 8011338:	d04d      	beq.n	80113d6 <TIM_SlaveTimer_SetConfig+0x11a>
 801133a:	2b10      	cmp	r3, #16
 801133c:	d04b      	beq.n	80113d6 <TIM_SlaveTimer_SetConfig+0x11a>
 801133e:	e047      	b.n	80113d0 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8011350:	f000 f9e6 	bl	8011720 <TIM_ETR_SetConfig>
      break;
 8011354:	e040      	b.n	80113d8 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	2b05      	cmp	r3, #5
 801135c:	d101      	bne.n	8011362 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 801135e:	2301      	movs	r3, #1
 8011360:	e03b      	b.n	80113da <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	6a1b      	ldr	r3, [r3, #32]
 8011368:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	6a1a      	ldr	r2, [r3, #32]
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	f022 0201 	bic.w	r2, r2, #1
 8011378:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	699b      	ldr	r3, [r3, #24]
 8011380:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011388:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	691b      	ldr	r3, [r3, #16]
 801138e:	011b      	lsls	r3, r3, #4
 8011390:	68ba      	ldr	r2, [r7, #8]
 8011392:	4313      	orrs	r3, r2
 8011394:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	68ba      	ldr	r2, [r7, #8]
 801139c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	68fa      	ldr	r2, [r7, #12]
 80113a4:	621a      	str	r2, [r3, #32]
      break;
 80113a6:	e017      	b.n	80113d8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80113b4:	461a      	mov	r2, r3
 80113b6:	f000 f883 	bl	80114c0 <TIM_TI1_ConfigInputStage>
      break;
 80113ba:	e00d      	b.n	80113d8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80113c8:	461a      	mov	r2, r3
 80113ca:	f000 f8e5 	bl	8011598 <TIM_TI2_ConfigInputStage>
      break;
 80113ce:	e003      	b.n	80113d8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80113d0:	2301      	movs	r3, #1
 80113d2:	75fb      	strb	r3, [r7, #23]
      break;
 80113d4:	e000      	b.n	80113d8 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80113d6:	bf00      	nop
  }

  return status;
 80113d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3718      	adds	r7, #24
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}
	...

080113e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80113e4:	b480      	push	{r7}
 80113e6:	b087      	sub	sp, #28
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	60b9      	str	r1, [r7, #8]
 80113ee:	607a      	str	r2, [r7, #4]
 80113f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	6a1b      	ldr	r3, [r3, #32]
 80113f6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	6a1b      	ldr	r3, [r3, #32]
 80113fc:	f023 0201 	bic.w	r2, r3, #1
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	699b      	ldr	r3, [r3, #24]
 8011408:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	4a26      	ldr	r2, [pc, #152]	@ (80114a8 <TIM_TI1_SetConfig+0xc4>)
 801140e:	4293      	cmp	r3, r2
 8011410:	d017      	beq.n	8011442 <TIM_TI1_SetConfig+0x5e>
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011418:	d013      	beq.n	8011442 <TIM_TI1_SetConfig+0x5e>
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	4a23      	ldr	r2, [pc, #140]	@ (80114ac <TIM_TI1_SetConfig+0xc8>)
 801141e:	4293      	cmp	r3, r2
 8011420:	d00f      	beq.n	8011442 <TIM_TI1_SetConfig+0x5e>
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	4a22      	ldr	r2, [pc, #136]	@ (80114b0 <TIM_TI1_SetConfig+0xcc>)
 8011426:	4293      	cmp	r3, r2
 8011428:	d00b      	beq.n	8011442 <TIM_TI1_SetConfig+0x5e>
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	4a21      	ldr	r2, [pc, #132]	@ (80114b4 <TIM_TI1_SetConfig+0xd0>)
 801142e:	4293      	cmp	r3, r2
 8011430:	d007      	beq.n	8011442 <TIM_TI1_SetConfig+0x5e>
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	4a20      	ldr	r2, [pc, #128]	@ (80114b8 <TIM_TI1_SetConfig+0xd4>)
 8011436:	4293      	cmp	r3, r2
 8011438:	d003      	beq.n	8011442 <TIM_TI1_SetConfig+0x5e>
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	4a1f      	ldr	r2, [pc, #124]	@ (80114bc <TIM_TI1_SetConfig+0xd8>)
 801143e:	4293      	cmp	r3, r2
 8011440:	d101      	bne.n	8011446 <TIM_TI1_SetConfig+0x62>
 8011442:	2301      	movs	r3, #1
 8011444:	e000      	b.n	8011448 <TIM_TI1_SetConfig+0x64>
 8011446:	2300      	movs	r3, #0
 8011448:	2b00      	cmp	r3, #0
 801144a:	d008      	beq.n	801145e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	f023 0303 	bic.w	r3, r3, #3
 8011452:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8011454:	697a      	ldr	r2, [r7, #20]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	4313      	orrs	r3, r2
 801145a:	617b      	str	r3, [r7, #20]
 801145c:	e003      	b.n	8011466 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	f043 0301 	orr.w	r3, r3, #1
 8011464:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801146c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	011b      	lsls	r3, r3, #4
 8011472:	b2db      	uxtb	r3, r3
 8011474:	697a      	ldr	r2, [r7, #20]
 8011476:	4313      	orrs	r3, r2
 8011478:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	f023 030a 	bic.w	r3, r3, #10
 8011480:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8011482:	68bb      	ldr	r3, [r7, #8]
 8011484:	f003 030a 	and.w	r3, r3, #10
 8011488:	693a      	ldr	r2, [r7, #16]
 801148a:	4313      	orrs	r3, r2
 801148c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	697a      	ldr	r2, [r7, #20]
 8011492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	693a      	ldr	r2, [r7, #16]
 8011498:	621a      	str	r2, [r3, #32]
}
 801149a:	bf00      	nop
 801149c:	371c      	adds	r7, #28
 801149e:	46bd      	mov	sp, r7
 80114a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a4:	4770      	bx	lr
 80114a6:	bf00      	nop
 80114a8:	40012c00 	.word	0x40012c00
 80114ac:	40000400 	.word	0x40000400
 80114b0:	40000800 	.word	0x40000800
 80114b4:	40000c00 	.word	0x40000c00
 80114b8:	40013400 	.word	0x40013400
 80114bc:	40014000 	.word	0x40014000

080114c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80114c0:	b480      	push	{r7}
 80114c2:	b087      	sub	sp, #28
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	60f8      	str	r0, [r7, #12]
 80114c8:	60b9      	str	r1, [r7, #8]
 80114ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	6a1b      	ldr	r3, [r3, #32]
 80114d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	6a1b      	ldr	r3, [r3, #32]
 80114d6:	f023 0201 	bic.w	r2, r3, #1
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	699b      	ldr	r3, [r3, #24]
 80114e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80114ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	011b      	lsls	r3, r3, #4
 80114f0:	693a      	ldr	r2, [r7, #16]
 80114f2:	4313      	orrs	r3, r2
 80114f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	f023 030a 	bic.w	r3, r3, #10
 80114fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80114fe:	697a      	ldr	r2, [r7, #20]
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	4313      	orrs	r3, r2
 8011504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	693a      	ldr	r2, [r7, #16]
 801150a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	697a      	ldr	r2, [r7, #20]
 8011510:	621a      	str	r2, [r3, #32]
}
 8011512:	bf00      	nop
 8011514:	371c      	adds	r7, #28
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr

0801151e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801151e:	b480      	push	{r7}
 8011520:	b087      	sub	sp, #28
 8011522:	af00      	add	r7, sp, #0
 8011524:	60f8      	str	r0, [r7, #12]
 8011526:	60b9      	str	r1, [r7, #8]
 8011528:	607a      	str	r2, [r7, #4]
 801152a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	6a1b      	ldr	r3, [r3, #32]
 8011530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	6a1b      	ldr	r3, [r3, #32]
 8011536:	f023 0210 	bic.w	r2, r3, #16
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	699b      	ldr	r3, [r3, #24]
 8011542:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801154a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	021b      	lsls	r3, r3, #8
 8011550:	693a      	ldr	r2, [r7, #16]
 8011552:	4313      	orrs	r3, r2
 8011554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801155c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	031b      	lsls	r3, r3, #12
 8011562:	b29b      	uxth	r3, r3
 8011564:	693a      	ldr	r2, [r7, #16]
 8011566:	4313      	orrs	r3, r2
 8011568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011570:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	011b      	lsls	r3, r3, #4
 8011576:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801157a:	697a      	ldr	r2, [r7, #20]
 801157c:	4313      	orrs	r3, r2
 801157e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	693a      	ldr	r2, [r7, #16]
 8011584:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	697a      	ldr	r2, [r7, #20]
 801158a:	621a      	str	r2, [r3, #32]
}
 801158c:	bf00      	nop
 801158e:	371c      	adds	r7, #28
 8011590:	46bd      	mov	sp, r7
 8011592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011596:	4770      	bx	lr

08011598 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011598:	b480      	push	{r7}
 801159a:	b087      	sub	sp, #28
 801159c:	af00      	add	r7, sp, #0
 801159e:	60f8      	str	r0, [r7, #12]
 80115a0:	60b9      	str	r1, [r7, #8]
 80115a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	6a1b      	ldr	r3, [r3, #32]
 80115a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	6a1b      	ldr	r3, [r3, #32]
 80115ae:	f023 0210 	bic.w	r2, r3, #16
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	699b      	ldr	r3, [r3, #24]
 80115ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80115c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	031b      	lsls	r3, r3, #12
 80115c8:	693a      	ldr	r2, [r7, #16]
 80115ca:	4313      	orrs	r3, r2
 80115cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80115d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	011b      	lsls	r3, r3, #4
 80115da:	697a      	ldr	r2, [r7, #20]
 80115dc:	4313      	orrs	r3, r2
 80115de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	693a      	ldr	r2, [r7, #16]
 80115e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	697a      	ldr	r2, [r7, #20]
 80115ea:	621a      	str	r2, [r3, #32]
}
 80115ec:	bf00      	nop
 80115ee:	371c      	adds	r7, #28
 80115f0:	46bd      	mov	sp, r7
 80115f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f6:	4770      	bx	lr

080115f8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b087      	sub	sp, #28
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	60f8      	str	r0, [r7, #12]
 8011600:	60b9      	str	r1, [r7, #8]
 8011602:	607a      	str	r2, [r7, #4]
 8011604:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	6a1b      	ldr	r3, [r3, #32]
 801160a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	6a1b      	ldr	r3, [r3, #32]
 8011610:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	69db      	ldr	r3, [r3, #28]
 801161c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	f023 0303 	bic.w	r3, r3, #3
 8011624:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8011626:	693a      	ldr	r2, [r7, #16]
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	4313      	orrs	r3, r2
 801162c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801162e:	693b      	ldr	r3, [r7, #16]
 8011630:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011634:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	011b      	lsls	r3, r3, #4
 801163a:	b2db      	uxtb	r3, r3
 801163c:	693a      	ldr	r2, [r7, #16]
 801163e:	4313      	orrs	r3, r2
 8011640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8011648:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	021b      	lsls	r3, r3, #8
 801164e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8011652:	697a      	ldr	r2, [r7, #20]
 8011654:	4313      	orrs	r3, r2
 8011656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	693a      	ldr	r2, [r7, #16]
 801165c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	697a      	ldr	r2, [r7, #20]
 8011662:	621a      	str	r2, [r3, #32]
}
 8011664:	bf00      	nop
 8011666:	371c      	adds	r7, #28
 8011668:	46bd      	mov	sp, r7
 801166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166e:	4770      	bx	lr

08011670 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011670:	b480      	push	{r7}
 8011672:	b087      	sub	sp, #28
 8011674:	af00      	add	r7, sp, #0
 8011676:	60f8      	str	r0, [r7, #12]
 8011678:	60b9      	str	r1, [r7, #8]
 801167a:	607a      	str	r2, [r7, #4]
 801167c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	6a1b      	ldr	r3, [r3, #32]
 8011682:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	6a1b      	ldr	r3, [r3, #32]
 8011688:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	69db      	ldr	r3, [r3, #28]
 8011694:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801169c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	021b      	lsls	r3, r3, #8
 80116a2:	693a      	ldr	r2, [r7, #16]
 80116a4:	4313      	orrs	r3, r2
 80116a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80116ae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	031b      	lsls	r3, r3, #12
 80116b4:	b29b      	uxth	r3, r3
 80116b6:	693a      	ldr	r2, [r7, #16]
 80116b8:	4313      	orrs	r3, r2
 80116ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80116c2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	031b      	lsls	r3, r3, #12
 80116c8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80116cc:	697a      	ldr	r2, [r7, #20]
 80116ce:	4313      	orrs	r3, r2
 80116d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	693a      	ldr	r2, [r7, #16]
 80116d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	697a      	ldr	r2, [r7, #20]
 80116dc:	621a      	str	r2, [r3, #32]
}
 80116de:	bf00      	nop
 80116e0:	371c      	adds	r7, #28
 80116e2:	46bd      	mov	sp, r7
 80116e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e8:	4770      	bx	lr

080116ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80116ea:	b480      	push	{r7}
 80116ec:	b085      	sub	sp, #20
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	6078      	str	r0, [r7, #4]
 80116f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	689b      	ldr	r3, [r3, #8]
 80116f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011700:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011702:	683a      	ldr	r2, [r7, #0]
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	4313      	orrs	r3, r2
 8011708:	f043 0307 	orr.w	r3, r3, #7
 801170c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	68fa      	ldr	r2, [r7, #12]
 8011712:	609a      	str	r2, [r3, #8]
}
 8011714:	bf00      	nop
 8011716:	3714      	adds	r7, #20
 8011718:	46bd      	mov	sp, r7
 801171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171e:	4770      	bx	lr

08011720 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011720:	b480      	push	{r7}
 8011722:	b087      	sub	sp, #28
 8011724:	af00      	add	r7, sp, #0
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	607a      	str	r2, [r7, #4]
 801172c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	689b      	ldr	r3, [r3, #8]
 8011732:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801173a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	021a      	lsls	r2, r3, #8
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	431a      	orrs	r2, r3
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	4313      	orrs	r3, r2
 8011748:	697a      	ldr	r2, [r7, #20]
 801174a:	4313      	orrs	r3, r2
 801174c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	697a      	ldr	r2, [r7, #20]
 8011752:	609a      	str	r2, [r3, #8]
}
 8011754:	bf00      	nop
 8011756:	371c      	adds	r7, #28
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr

08011760 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011760:	b480      	push	{r7}
 8011762:	b087      	sub	sp, #28
 8011764:	af00      	add	r7, sp, #0
 8011766:	60f8      	str	r0, [r7, #12]
 8011768:	60b9      	str	r1, [r7, #8]
 801176a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	f003 031f 	and.w	r3, r3, #31
 8011772:	2201      	movs	r2, #1
 8011774:	fa02 f303 	lsl.w	r3, r2, r3
 8011778:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	6a1a      	ldr	r2, [r3, #32]
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	43db      	mvns	r3, r3
 8011782:	401a      	ands	r2, r3
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	6a1a      	ldr	r2, [r3, #32]
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	f003 031f 	and.w	r3, r3, #31
 8011792:	6879      	ldr	r1, [r7, #4]
 8011794:	fa01 f303 	lsl.w	r3, r1, r3
 8011798:	431a      	orrs	r2, r3
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	621a      	str	r2, [r3, #32]
}
 801179e:	bf00      	nop
 80117a0:	371c      	adds	r7, #28
 80117a2:	46bd      	mov	sp, r7
 80117a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a8:	4770      	bx	lr
	...

080117ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80117ac:	b480      	push	{r7}
 80117ae:	b085      	sub	sp, #20
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
 80117b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80117bc:	2b01      	cmp	r3, #1
 80117be:	d101      	bne.n	80117c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80117c0:	2302      	movs	r3, #2
 80117c2:	e068      	b.n	8011896 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2201      	movs	r2, #1
 80117c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2202      	movs	r2, #2
 80117d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	689b      	ldr	r3, [r3, #8]
 80117e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	4a2e      	ldr	r2, [pc, #184]	@ (80118a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80117ea:	4293      	cmp	r3, r2
 80117ec:	d004      	beq.n	80117f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	4a2d      	ldr	r2, [pc, #180]	@ (80118a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80117f4:	4293      	cmp	r3, r2
 80117f6:	d108      	bne.n	801180a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80117fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	685b      	ldr	r3, [r3, #4]
 8011804:	68fa      	ldr	r2, [r7, #12]
 8011806:	4313      	orrs	r3, r2
 8011808:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011810:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	68fa      	ldr	r2, [r7, #12]
 8011818:	4313      	orrs	r3, r2
 801181a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	68fa      	ldr	r2, [r7, #12]
 8011822:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	4a1e      	ldr	r2, [pc, #120]	@ (80118a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d01d      	beq.n	801186a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011836:	d018      	beq.n	801186a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	4a1b      	ldr	r2, [pc, #108]	@ (80118ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801183e:	4293      	cmp	r3, r2
 8011840:	d013      	beq.n	801186a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	4a1a      	ldr	r2, [pc, #104]	@ (80118b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011848:	4293      	cmp	r3, r2
 801184a:	d00e      	beq.n	801186a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	4a18      	ldr	r2, [pc, #96]	@ (80118b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011852:	4293      	cmp	r3, r2
 8011854:	d009      	beq.n	801186a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	4a13      	ldr	r2, [pc, #76]	@ (80118a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801185c:	4293      	cmp	r3, r2
 801185e:	d004      	beq.n	801186a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	4a14      	ldr	r2, [pc, #80]	@ (80118b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011866:	4293      	cmp	r3, r2
 8011868:	d10c      	bne.n	8011884 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	689b      	ldr	r3, [r3, #8]
 8011876:	68ba      	ldr	r2, [r7, #8]
 8011878:	4313      	orrs	r3, r2
 801187a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	68ba      	ldr	r2, [r7, #8]
 8011882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2201      	movs	r2, #1
 8011888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2200      	movs	r2, #0
 8011890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011894:	2300      	movs	r3, #0
}
 8011896:	4618      	mov	r0, r3
 8011898:	3714      	adds	r7, #20
 801189a:	46bd      	mov	sp, r7
 801189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a0:	4770      	bx	lr
 80118a2:	bf00      	nop
 80118a4:	40012c00 	.word	0x40012c00
 80118a8:	40013400 	.word	0x40013400
 80118ac:	40000400 	.word	0x40000400
 80118b0:	40000800 	.word	0x40000800
 80118b4:	40000c00 	.word	0x40000c00
 80118b8:	40014000 	.word	0x40014000

080118bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80118bc:	b480      	push	{r7}
 80118be:	b085      	sub	sp, #20
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80118c6:	2300      	movs	r3, #0
 80118c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d101      	bne.n	80118d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80118d4:	2302      	movs	r3, #2
 80118d6:	e065      	b.n	80119a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2201      	movs	r2, #1
 80118dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	68db      	ldr	r3, [r3, #12]
 80118ea:	4313      	orrs	r3, r2
 80118ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	689b      	ldr	r3, [r3, #8]
 80118f8:	4313      	orrs	r3, r2
 80118fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	685b      	ldr	r3, [r3, #4]
 8011906:	4313      	orrs	r3, r2
 8011908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	4313      	orrs	r3, r2
 8011916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	691b      	ldr	r3, [r3, #16]
 8011922:	4313      	orrs	r3, r2
 8011924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	695b      	ldr	r3, [r3, #20]
 8011930:	4313      	orrs	r3, r2
 8011932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801193e:	4313      	orrs	r3, r2
 8011940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	699b      	ldr	r3, [r3, #24]
 801194c:	041b      	lsls	r3, r3, #16
 801194e:	4313      	orrs	r3, r2
 8011950:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	4a16      	ldr	r2, [pc, #88]	@ (80119b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8011958:	4293      	cmp	r3, r2
 801195a:	d004      	beq.n	8011966 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	4a14      	ldr	r2, [pc, #80]	@ (80119b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8011962:	4293      	cmp	r3, r2
 8011964:	d115      	bne.n	8011992 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011970:	051b      	lsls	r3, r3, #20
 8011972:	4313      	orrs	r3, r2
 8011974:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	69db      	ldr	r3, [r3, #28]
 8011980:	4313      	orrs	r3, r2
 8011982:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	6a1b      	ldr	r3, [r3, #32]
 801198e:	4313      	orrs	r3, r2
 8011990:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	68fa      	ldr	r2, [r7, #12]
 8011998:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2200      	movs	r2, #0
 801199e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80119a2:	2300      	movs	r3, #0
}
 80119a4:	4618      	mov	r0, r3
 80119a6:	3714      	adds	r7, #20
 80119a8:	46bd      	mov	sp, r7
 80119aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ae:	4770      	bx	lr
 80119b0:	40012c00 	.word	0x40012c00
 80119b4:	40013400 	.word	0x40013400

080119b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d101      	bne.n	80119ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80119c6:	2301      	movs	r3, #1
 80119c8:	e040      	b.n	8011a4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d106      	bne.n	80119e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	2200      	movs	r2, #0
 80119d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f7f4 fae6 	bl	8005fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2224      	movs	r2, #36	@ 0x24
 80119e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	681a      	ldr	r2, [r3, #0]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	f022 0201 	bic.w	r2, r2, #1
 80119f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d002      	beq.n	8011a04 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f000 fd22 	bl	8012448 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f000 fa67 	bl	8011ed8 <UART_SetConfig>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	d101      	bne.n	8011a14 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8011a10:	2301      	movs	r3, #1
 8011a12:	e01b      	b.n	8011a4c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	685a      	ldr	r2, [r3, #4]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011a22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	689a      	ldr	r2, [r3, #8]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011a32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	681a      	ldr	r2, [r3, #0]
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	f042 0201 	orr.w	r2, r2, #1
 8011a42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f000 fda1 	bl	801258c <UART_CheckIdleState>
 8011a4a:	4603      	mov	r3, r0
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3708      	adds	r7, #8
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}

08011a54 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b082      	sub	sp, #8
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d101      	bne.n	8011a66 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8011a62:	2301      	movs	r3, #1
 8011a64:	e048      	b.n	8011af8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d106      	bne.n	8011a7c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2200      	movs	r2, #0
 8011a72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f7f4 fa98 	bl	8005fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2224      	movs	r2, #36	@ 0x24
 8011a80:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	681a      	ldr	r2, [r3, #0]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	f022 0201 	bic.w	r2, r2, #1
 8011a90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d002      	beq.n	8011aa0 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f000 fcd4 	bl	8012448 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f000 fa19 	bl	8011ed8 <UART_SetConfig>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	2b01      	cmp	r3, #1
 8011aaa:	d101      	bne.n	8011ab0 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8011aac:	2301      	movs	r3, #1
 8011aae:	e023      	b.n	8011af8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	685a      	ldr	r2, [r3, #4]
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	689a      	ldr	r2, [r3, #8]
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8011ace:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	689a      	ldr	r2, [r3, #8]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	f042 0208 	orr.w	r2, r2, #8
 8011ade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	681a      	ldr	r2, [r3, #0]
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	f042 0201 	orr.w	r2, r2, #1
 8011aee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f000 fd4b 	bl	801258c <UART_CheckIdleState>
 8011af6:	4603      	mov	r3, r0
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	3708      	adds	r7, #8
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b08a      	sub	sp, #40	@ 0x28
 8011b04:	af02      	add	r7, sp, #8
 8011b06:	60f8      	str	r0, [r7, #12]
 8011b08:	60b9      	str	r1, [r7, #8]
 8011b0a:	603b      	str	r3, [r7, #0]
 8011b0c:	4613      	mov	r3, r2
 8011b0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011b14:	2b20      	cmp	r3, #32
 8011b16:	d177      	bne.n	8011c08 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d002      	beq.n	8011b24 <HAL_UART_Transmit+0x24>
 8011b1e:	88fb      	ldrh	r3, [r7, #6]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d101      	bne.n	8011b28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8011b24:	2301      	movs	r3, #1
 8011b26:	e070      	b.n	8011c0a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	2221      	movs	r2, #33	@ 0x21
 8011b34:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011b36:	f7f7 fcf9 	bl	800952c <HAL_GetTick>
 8011b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	88fa      	ldrh	r2, [r7, #6]
 8011b40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	88fa      	ldrh	r2, [r7, #6]
 8011b48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	689b      	ldr	r3, [r3, #8]
 8011b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011b54:	d108      	bne.n	8011b68 <HAL_UART_Transmit+0x68>
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	691b      	ldr	r3, [r3, #16]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d104      	bne.n	8011b68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	61bb      	str	r3, [r7, #24]
 8011b66:	e003      	b.n	8011b70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011b70:	e02f      	b.n	8011bd2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	9300      	str	r3, [sp, #0]
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	2180      	movs	r1, #128	@ 0x80
 8011b7c:	68f8      	ldr	r0, [r7, #12]
 8011b7e:	f000 fdad 	bl	80126dc <UART_WaitOnFlagUntilTimeout>
 8011b82:	4603      	mov	r3, r0
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d004      	beq.n	8011b92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	2220      	movs	r2, #32
 8011b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8011b8e:	2303      	movs	r3, #3
 8011b90:	e03b      	b.n	8011c0a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8011b92:	69fb      	ldr	r3, [r7, #28]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d10b      	bne.n	8011bb0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011b98:	69bb      	ldr	r3, [r7, #24]
 8011b9a:	881a      	ldrh	r2, [r3, #0]
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011ba4:	b292      	uxth	r2, r2
 8011ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8011ba8:	69bb      	ldr	r3, [r7, #24]
 8011baa:	3302      	adds	r3, #2
 8011bac:	61bb      	str	r3, [r7, #24]
 8011bae:	e007      	b.n	8011bc0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011bb0:	69fb      	ldr	r3, [r7, #28]
 8011bb2:	781a      	ldrb	r2, [r3, #0]
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8011bba:	69fb      	ldr	r3, [r7, #28]
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8011bc6:	b29b      	uxth	r3, r3
 8011bc8:	3b01      	subs	r3, #1
 8011bca:	b29a      	uxth	r2, r3
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8011bd8:	b29b      	uxth	r3, r3
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d1c9      	bne.n	8011b72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	9300      	str	r3, [sp, #0]
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	2200      	movs	r2, #0
 8011be6:	2140      	movs	r1, #64	@ 0x40
 8011be8:	68f8      	ldr	r0, [r7, #12]
 8011bea:	f000 fd77 	bl	80126dc <UART_WaitOnFlagUntilTimeout>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d004      	beq.n	8011bfe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	2220      	movs	r2, #32
 8011bf8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8011bfa:	2303      	movs	r3, #3
 8011bfc:	e005      	b.n	8011c0a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	2220      	movs	r2, #32
 8011c02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8011c04:	2300      	movs	r3, #0
 8011c06:	e000      	b.n	8011c0a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8011c08:	2302      	movs	r3, #2
  }
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3720      	adds	r7, #32
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}

08011c12 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011c12:	b580      	push	{r7, lr}
 8011c14:	b08a      	sub	sp, #40	@ 0x28
 8011c16:	af02      	add	r7, sp, #8
 8011c18:	60f8      	str	r0, [r7, #12]
 8011c1a:	60b9      	str	r1, [r7, #8]
 8011c1c:	603b      	str	r3, [r7, #0]
 8011c1e:	4613      	mov	r3, r2
 8011c20:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011c28:	2b20      	cmp	r3, #32
 8011c2a:	f040 80b6 	bne.w	8011d9a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d002      	beq.n	8011c3a <HAL_UART_Receive+0x28>
 8011c34:	88fb      	ldrh	r3, [r7, #6]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d101      	bne.n	8011c3e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	e0ae      	b.n	8011d9c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	2200      	movs	r2, #0
 8011c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	2222      	movs	r2, #34	@ 0x22
 8011c4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	2200      	movs	r2, #0
 8011c52:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011c54:	f7f7 fc6a 	bl	800952c <HAL_GetTick>
 8011c58:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	88fa      	ldrh	r2, [r7, #6]
 8011c5e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	88fa      	ldrh	r2, [r7, #6]
 8011c66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	689b      	ldr	r3, [r3, #8]
 8011c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011c72:	d10e      	bne.n	8011c92 <HAL_UART_Receive+0x80>
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	691b      	ldr	r3, [r3, #16]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d105      	bne.n	8011c88 <HAL_UART_Receive+0x76>
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8011c82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011c86:	e02d      	b.n	8011ce4 <HAL_UART_Receive+0xd2>
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	22ff      	movs	r2, #255	@ 0xff
 8011c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011c90:	e028      	b.n	8011ce4 <HAL_UART_Receive+0xd2>
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	689b      	ldr	r3, [r3, #8]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d10d      	bne.n	8011cb6 <HAL_UART_Receive+0xa4>
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	691b      	ldr	r3, [r3, #16]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d104      	bne.n	8011cac <HAL_UART_Receive+0x9a>
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	22ff      	movs	r2, #255	@ 0xff
 8011ca6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011caa:	e01b      	b.n	8011ce4 <HAL_UART_Receive+0xd2>
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	227f      	movs	r2, #127	@ 0x7f
 8011cb0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011cb4:	e016      	b.n	8011ce4 <HAL_UART_Receive+0xd2>
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	689b      	ldr	r3, [r3, #8]
 8011cba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011cbe:	d10d      	bne.n	8011cdc <HAL_UART_Receive+0xca>
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	691b      	ldr	r3, [r3, #16]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d104      	bne.n	8011cd2 <HAL_UART_Receive+0xc0>
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	227f      	movs	r2, #127	@ 0x7f
 8011ccc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011cd0:	e008      	b.n	8011ce4 <HAL_UART_Receive+0xd2>
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	223f      	movs	r2, #63	@ 0x3f
 8011cd6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011cda:	e003      	b.n	8011ce4 <HAL_UART_Receive+0xd2>
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011cea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	689b      	ldr	r3, [r3, #8]
 8011cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011cf4:	d108      	bne.n	8011d08 <HAL_UART_Receive+0xf6>
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	691b      	ldr	r3, [r3, #16]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d104      	bne.n	8011d08 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	61bb      	str	r3, [r7, #24]
 8011d06:	e003      	b.n	8011d10 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8011d10:	e037      	b.n	8011d82 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011d12:	683b      	ldr	r3, [r7, #0]
 8011d14:	9300      	str	r3, [sp, #0]
 8011d16:	697b      	ldr	r3, [r7, #20]
 8011d18:	2200      	movs	r2, #0
 8011d1a:	2120      	movs	r1, #32
 8011d1c:	68f8      	ldr	r0, [r7, #12]
 8011d1e:	f000 fcdd 	bl	80126dc <UART_WaitOnFlagUntilTimeout>
 8011d22:	4603      	mov	r3, r0
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d005      	beq.n	8011d34 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	2220      	movs	r2, #32
 8011d2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8011d30:	2303      	movs	r3, #3
 8011d32:	e033      	b.n	8011d9c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8011d34:	69fb      	ldr	r3, [r7, #28]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d10c      	bne.n	8011d54 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011d40:	b29a      	uxth	r2, r3
 8011d42:	8a7b      	ldrh	r3, [r7, #18]
 8011d44:	4013      	ands	r3, r2
 8011d46:	b29a      	uxth	r2, r3
 8011d48:	69bb      	ldr	r3, [r7, #24]
 8011d4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8011d4c:	69bb      	ldr	r3, [r7, #24]
 8011d4e:	3302      	adds	r3, #2
 8011d50:	61bb      	str	r3, [r7, #24]
 8011d52:	e00d      	b.n	8011d70 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011d5a:	b29b      	uxth	r3, r3
 8011d5c:	b2da      	uxtb	r2, r3
 8011d5e:	8a7b      	ldrh	r3, [r7, #18]
 8011d60:	b2db      	uxtb	r3, r3
 8011d62:	4013      	ands	r3, r2
 8011d64:	b2da      	uxtb	r2, r3
 8011d66:	69fb      	ldr	r3, [r7, #28]
 8011d68:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8011d6a:	69fb      	ldr	r3, [r7, #28]
 8011d6c:	3301      	adds	r3, #1
 8011d6e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	3b01      	subs	r3, #1
 8011d7a:	b29a      	uxth	r2, r3
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d1c1      	bne.n	8011d12 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2220      	movs	r2, #32
 8011d92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8011d96:	2300      	movs	r3, #0
 8011d98:	e000      	b.n	8011d9c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8011d9a:	2302      	movs	r3, #2
  }
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3720      	adds	r7, #32
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}

08011da4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b08a      	sub	sp, #40	@ 0x28
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	60f8      	str	r0, [r7, #12]
 8011dac:	60b9      	str	r1, [r7, #8]
 8011dae:	4613      	mov	r3, r2
 8011db0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011db6:	2b20      	cmp	r3, #32
 8011db8:	d165      	bne.n	8011e86 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d002      	beq.n	8011dc6 <HAL_UART_Transmit_DMA+0x22>
 8011dc0:	88fb      	ldrh	r3, [r7, #6]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d101      	bne.n	8011dca <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	e05e      	b.n	8011e88 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	68ba      	ldr	r2, [r7, #8]
 8011dce:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	88fa      	ldrh	r2, [r7, #6]
 8011dd4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	88fa      	ldrh	r2, [r7, #6]
 8011ddc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	2200      	movs	r2, #0
 8011de4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	2221      	movs	r2, #33	@ 0x21
 8011dec:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d027      	beq.n	8011e46 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011dfa:	4a25      	ldr	r2, [pc, #148]	@ (8011e90 <HAL_UART_Transmit_DMA+0xec>)
 8011dfc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e02:	4a24      	ldr	r2, [pc, #144]	@ (8011e94 <HAL_UART_Transmit_DMA+0xf0>)
 8011e04:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e0a:	4a23      	ldr	r2, [pc, #140]	@ (8011e98 <HAL_UART_Transmit_DMA+0xf4>)
 8011e0c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e12:	2200      	movs	r2, #0
 8011e14:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011e1e:	4619      	mov	r1, r3
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	3328      	adds	r3, #40	@ 0x28
 8011e26:	461a      	mov	r2, r3
 8011e28:	88fb      	ldrh	r3, [r7, #6]
 8011e2a:	f7f9 fa1f 	bl	800b26c <HAL_DMA_Start_IT>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d008      	beq.n	8011e46 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	2210      	movs	r2, #16
 8011e38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	2220      	movs	r2, #32
 8011e40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8011e42:	2301      	movs	r3, #1
 8011e44:	e020      	b.n	8011e88 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	2240      	movs	r2, #64	@ 0x40
 8011e4c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	3308      	adds	r3, #8
 8011e54:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	e853 3f00 	ldrex	r3, [r3]
 8011e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	3308      	adds	r3, #8
 8011e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e6e:	623a      	str	r2, [r7, #32]
 8011e70:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e72:	69f9      	ldr	r1, [r7, #28]
 8011e74:	6a3a      	ldr	r2, [r7, #32]
 8011e76:	e841 2300 	strex	r3, r2, [r1]
 8011e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8011e7c:	69bb      	ldr	r3, [r7, #24]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d1e5      	bne.n	8011e4e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8011e82:	2300      	movs	r3, #0
 8011e84:	e000      	b.n	8011e88 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8011e86:	2302      	movs	r3, #2
  }
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3728      	adds	r7, #40	@ 0x28
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}
 8011e90:	08012a0d 	.word	0x08012a0d
 8011e94:	08012aa7 	.word	0x08012aa7
 8011e98:	08012c2d 	.word	0x08012c2d

08011e9c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b083      	sub	sp, #12
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8011ea4:	bf00      	nop
 8011ea6:	370c      	adds	r7, #12
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eae:	4770      	bx	lr

08011eb0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011eb0:	b480      	push	{r7}
 8011eb2:	b083      	sub	sp, #12
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011eb8:	bf00      	nop
 8011eba:	370c      	adds	r7, #12
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr

08011ec4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b083      	sub	sp, #12
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011ecc:	bf00      	nop
 8011ece:	370c      	adds	r7, #12
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed6:	4770      	bx	lr

08011ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011edc:	b08a      	sub	sp, #40	@ 0x28
 8011ede:	af00      	add	r7, sp, #0
 8011ee0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	689a      	ldr	r2, [r3, #8]
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	691b      	ldr	r3, [r3, #16]
 8011ef0:	431a      	orrs	r2, r3
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	695b      	ldr	r3, [r3, #20]
 8011ef6:	431a      	orrs	r2, r3
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	69db      	ldr	r3, [r3, #28]
 8011efc:	4313      	orrs	r3, r2
 8011efe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	681a      	ldr	r2, [r3, #0]
 8011f06:	4ba4      	ldr	r3, [pc, #656]	@ (8012198 <UART_SetConfig+0x2c0>)
 8011f08:	4013      	ands	r3, r2
 8011f0a:	68fa      	ldr	r2, [r7, #12]
 8011f0c:	6812      	ldr	r2, [r2, #0]
 8011f0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011f10:	430b      	orrs	r3, r1
 8011f12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	68da      	ldr	r2, [r3, #12]
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	430a      	orrs	r2, r1
 8011f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	699b      	ldr	r3, [r3, #24]
 8011f2e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	4a99      	ldr	r2, [pc, #612]	@ (801219c <UART_SetConfig+0x2c4>)
 8011f36:	4293      	cmp	r3, r2
 8011f38:	d004      	beq.n	8011f44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	6a1b      	ldr	r3, [r3, #32]
 8011f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f40:	4313      	orrs	r3, r2
 8011f42:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	689b      	ldr	r3, [r3, #8]
 8011f4a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f54:	430a      	orrs	r2, r1
 8011f56:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	4a90      	ldr	r2, [pc, #576]	@ (80121a0 <UART_SetConfig+0x2c8>)
 8011f5e:	4293      	cmp	r3, r2
 8011f60:	d126      	bne.n	8011fb0 <UART_SetConfig+0xd8>
 8011f62:	4b90      	ldr	r3, [pc, #576]	@ (80121a4 <UART_SetConfig+0x2cc>)
 8011f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011f68:	f003 0303 	and.w	r3, r3, #3
 8011f6c:	2b03      	cmp	r3, #3
 8011f6e:	d81b      	bhi.n	8011fa8 <UART_SetConfig+0xd0>
 8011f70:	a201      	add	r2, pc, #4	@ (adr r2, 8011f78 <UART_SetConfig+0xa0>)
 8011f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f76:	bf00      	nop
 8011f78:	08011f89 	.word	0x08011f89
 8011f7c:	08011f99 	.word	0x08011f99
 8011f80:	08011f91 	.word	0x08011f91
 8011f84:	08011fa1 	.word	0x08011fa1
 8011f88:	2301      	movs	r3, #1
 8011f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011f8e:	e116      	b.n	80121be <UART_SetConfig+0x2e6>
 8011f90:	2302      	movs	r3, #2
 8011f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011f96:	e112      	b.n	80121be <UART_SetConfig+0x2e6>
 8011f98:	2304      	movs	r3, #4
 8011f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011f9e:	e10e      	b.n	80121be <UART_SetConfig+0x2e6>
 8011fa0:	2308      	movs	r3, #8
 8011fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011fa6:	e10a      	b.n	80121be <UART_SetConfig+0x2e6>
 8011fa8:	2310      	movs	r3, #16
 8011faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011fae:	e106      	b.n	80121be <UART_SetConfig+0x2e6>
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	4a7c      	ldr	r2, [pc, #496]	@ (80121a8 <UART_SetConfig+0x2d0>)
 8011fb6:	4293      	cmp	r3, r2
 8011fb8:	d138      	bne.n	801202c <UART_SetConfig+0x154>
 8011fba:	4b7a      	ldr	r3, [pc, #488]	@ (80121a4 <UART_SetConfig+0x2cc>)
 8011fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011fc0:	f003 030c 	and.w	r3, r3, #12
 8011fc4:	2b0c      	cmp	r3, #12
 8011fc6:	d82d      	bhi.n	8012024 <UART_SetConfig+0x14c>
 8011fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8011fd0 <UART_SetConfig+0xf8>)
 8011fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fce:	bf00      	nop
 8011fd0:	08012005 	.word	0x08012005
 8011fd4:	08012025 	.word	0x08012025
 8011fd8:	08012025 	.word	0x08012025
 8011fdc:	08012025 	.word	0x08012025
 8011fe0:	08012015 	.word	0x08012015
 8011fe4:	08012025 	.word	0x08012025
 8011fe8:	08012025 	.word	0x08012025
 8011fec:	08012025 	.word	0x08012025
 8011ff0:	0801200d 	.word	0x0801200d
 8011ff4:	08012025 	.word	0x08012025
 8011ff8:	08012025 	.word	0x08012025
 8011ffc:	08012025 	.word	0x08012025
 8012000:	0801201d 	.word	0x0801201d
 8012004:	2300      	movs	r3, #0
 8012006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801200a:	e0d8      	b.n	80121be <UART_SetConfig+0x2e6>
 801200c:	2302      	movs	r3, #2
 801200e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012012:	e0d4      	b.n	80121be <UART_SetConfig+0x2e6>
 8012014:	2304      	movs	r3, #4
 8012016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801201a:	e0d0      	b.n	80121be <UART_SetConfig+0x2e6>
 801201c:	2308      	movs	r3, #8
 801201e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012022:	e0cc      	b.n	80121be <UART_SetConfig+0x2e6>
 8012024:	2310      	movs	r3, #16
 8012026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801202a:	e0c8      	b.n	80121be <UART_SetConfig+0x2e6>
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	4a5e      	ldr	r2, [pc, #376]	@ (80121ac <UART_SetConfig+0x2d4>)
 8012032:	4293      	cmp	r3, r2
 8012034:	d125      	bne.n	8012082 <UART_SetConfig+0x1aa>
 8012036:	4b5b      	ldr	r3, [pc, #364]	@ (80121a4 <UART_SetConfig+0x2cc>)
 8012038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801203c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8012040:	2b30      	cmp	r3, #48	@ 0x30
 8012042:	d016      	beq.n	8012072 <UART_SetConfig+0x19a>
 8012044:	2b30      	cmp	r3, #48	@ 0x30
 8012046:	d818      	bhi.n	801207a <UART_SetConfig+0x1a2>
 8012048:	2b20      	cmp	r3, #32
 801204a:	d00a      	beq.n	8012062 <UART_SetConfig+0x18a>
 801204c:	2b20      	cmp	r3, #32
 801204e:	d814      	bhi.n	801207a <UART_SetConfig+0x1a2>
 8012050:	2b00      	cmp	r3, #0
 8012052:	d002      	beq.n	801205a <UART_SetConfig+0x182>
 8012054:	2b10      	cmp	r3, #16
 8012056:	d008      	beq.n	801206a <UART_SetConfig+0x192>
 8012058:	e00f      	b.n	801207a <UART_SetConfig+0x1a2>
 801205a:	2300      	movs	r3, #0
 801205c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012060:	e0ad      	b.n	80121be <UART_SetConfig+0x2e6>
 8012062:	2302      	movs	r3, #2
 8012064:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012068:	e0a9      	b.n	80121be <UART_SetConfig+0x2e6>
 801206a:	2304      	movs	r3, #4
 801206c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012070:	e0a5      	b.n	80121be <UART_SetConfig+0x2e6>
 8012072:	2308      	movs	r3, #8
 8012074:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012078:	e0a1      	b.n	80121be <UART_SetConfig+0x2e6>
 801207a:	2310      	movs	r3, #16
 801207c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012080:	e09d      	b.n	80121be <UART_SetConfig+0x2e6>
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	4a4a      	ldr	r2, [pc, #296]	@ (80121b0 <UART_SetConfig+0x2d8>)
 8012088:	4293      	cmp	r3, r2
 801208a:	d125      	bne.n	80120d8 <UART_SetConfig+0x200>
 801208c:	4b45      	ldr	r3, [pc, #276]	@ (80121a4 <UART_SetConfig+0x2cc>)
 801208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012092:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8012096:	2bc0      	cmp	r3, #192	@ 0xc0
 8012098:	d016      	beq.n	80120c8 <UART_SetConfig+0x1f0>
 801209a:	2bc0      	cmp	r3, #192	@ 0xc0
 801209c:	d818      	bhi.n	80120d0 <UART_SetConfig+0x1f8>
 801209e:	2b80      	cmp	r3, #128	@ 0x80
 80120a0:	d00a      	beq.n	80120b8 <UART_SetConfig+0x1e0>
 80120a2:	2b80      	cmp	r3, #128	@ 0x80
 80120a4:	d814      	bhi.n	80120d0 <UART_SetConfig+0x1f8>
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d002      	beq.n	80120b0 <UART_SetConfig+0x1d8>
 80120aa:	2b40      	cmp	r3, #64	@ 0x40
 80120ac:	d008      	beq.n	80120c0 <UART_SetConfig+0x1e8>
 80120ae:	e00f      	b.n	80120d0 <UART_SetConfig+0x1f8>
 80120b0:	2300      	movs	r3, #0
 80120b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80120b6:	e082      	b.n	80121be <UART_SetConfig+0x2e6>
 80120b8:	2302      	movs	r3, #2
 80120ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80120be:	e07e      	b.n	80121be <UART_SetConfig+0x2e6>
 80120c0:	2304      	movs	r3, #4
 80120c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80120c6:	e07a      	b.n	80121be <UART_SetConfig+0x2e6>
 80120c8:	2308      	movs	r3, #8
 80120ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80120ce:	e076      	b.n	80121be <UART_SetConfig+0x2e6>
 80120d0:	2310      	movs	r3, #16
 80120d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80120d6:	e072      	b.n	80121be <UART_SetConfig+0x2e6>
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	4a35      	ldr	r2, [pc, #212]	@ (80121b4 <UART_SetConfig+0x2dc>)
 80120de:	4293      	cmp	r3, r2
 80120e0:	d12a      	bne.n	8012138 <UART_SetConfig+0x260>
 80120e2:	4b30      	ldr	r3, [pc, #192]	@ (80121a4 <UART_SetConfig+0x2cc>)
 80120e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80120e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80120ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80120f0:	d01a      	beq.n	8012128 <UART_SetConfig+0x250>
 80120f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80120f6:	d81b      	bhi.n	8012130 <UART_SetConfig+0x258>
 80120f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120fc:	d00c      	beq.n	8012118 <UART_SetConfig+0x240>
 80120fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012102:	d815      	bhi.n	8012130 <UART_SetConfig+0x258>
 8012104:	2b00      	cmp	r3, #0
 8012106:	d003      	beq.n	8012110 <UART_SetConfig+0x238>
 8012108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801210c:	d008      	beq.n	8012120 <UART_SetConfig+0x248>
 801210e:	e00f      	b.n	8012130 <UART_SetConfig+0x258>
 8012110:	2300      	movs	r3, #0
 8012112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012116:	e052      	b.n	80121be <UART_SetConfig+0x2e6>
 8012118:	2302      	movs	r3, #2
 801211a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801211e:	e04e      	b.n	80121be <UART_SetConfig+0x2e6>
 8012120:	2304      	movs	r3, #4
 8012122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012126:	e04a      	b.n	80121be <UART_SetConfig+0x2e6>
 8012128:	2308      	movs	r3, #8
 801212a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801212e:	e046      	b.n	80121be <UART_SetConfig+0x2e6>
 8012130:	2310      	movs	r3, #16
 8012132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012136:	e042      	b.n	80121be <UART_SetConfig+0x2e6>
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	4a17      	ldr	r2, [pc, #92]	@ (801219c <UART_SetConfig+0x2c4>)
 801213e:	4293      	cmp	r3, r2
 8012140:	d13a      	bne.n	80121b8 <UART_SetConfig+0x2e0>
 8012142:	4b18      	ldr	r3, [pc, #96]	@ (80121a4 <UART_SetConfig+0x2cc>)
 8012144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012148:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801214c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012150:	d01a      	beq.n	8012188 <UART_SetConfig+0x2b0>
 8012152:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012156:	d81b      	bhi.n	8012190 <UART_SetConfig+0x2b8>
 8012158:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801215c:	d00c      	beq.n	8012178 <UART_SetConfig+0x2a0>
 801215e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012162:	d815      	bhi.n	8012190 <UART_SetConfig+0x2b8>
 8012164:	2b00      	cmp	r3, #0
 8012166:	d003      	beq.n	8012170 <UART_SetConfig+0x298>
 8012168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801216c:	d008      	beq.n	8012180 <UART_SetConfig+0x2a8>
 801216e:	e00f      	b.n	8012190 <UART_SetConfig+0x2b8>
 8012170:	2300      	movs	r3, #0
 8012172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012176:	e022      	b.n	80121be <UART_SetConfig+0x2e6>
 8012178:	2302      	movs	r3, #2
 801217a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801217e:	e01e      	b.n	80121be <UART_SetConfig+0x2e6>
 8012180:	2304      	movs	r3, #4
 8012182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012186:	e01a      	b.n	80121be <UART_SetConfig+0x2e6>
 8012188:	2308      	movs	r3, #8
 801218a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801218e:	e016      	b.n	80121be <UART_SetConfig+0x2e6>
 8012190:	2310      	movs	r3, #16
 8012192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012196:	e012      	b.n	80121be <UART_SetConfig+0x2e6>
 8012198:	efff69f3 	.word	0xefff69f3
 801219c:	40008000 	.word	0x40008000
 80121a0:	40013800 	.word	0x40013800
 80121a4:	40021000 	.word	0x40021000
 80121a8:	40004400 	.word	0x40004400
 80121ac:	40004800 	.word	0x40004800
 80121b0:	40004c00 	.word	0x40004c00
 80121b4:	40005000 	.word	0x40005000
 80121b8:	2310      	movs	r3, #16
 80121ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	4a9f      	ldr	r2, [pc, #636]	@ (8012440 <UART_SetConfig+0x568>)
 80121c4:	4293      	cmp	r3, r2
 80121c6:	d17a      	bne.n	80122be <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80121c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80121cc:	2b08      	cmp	r3, #8
 80121ce:	d824      	bhi.n	801221a <UART_SetConfig+0x342>
 80121d0:	a201      	add	r2, pc, #4	@ (adr r2, 80121d8 <UART_SetConfig+0x300>)
 80121d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121d6:	bf00      	nop
 80121d8:	080121fd 	.word	0x080121fd
 80121dc:	0801221b 	.word	0x0801221b
 80121e0:	08012205 	.word	0x08012205
 80121e4:	0801221b 	.word	0x0801221b
 80121e8:	0801220b 	.word	0x0801220b
 80121ec:	0801221b 	.word	0x0801221b
 80121f0:	0801221b 	.word	0x0801221b
 80121f4:	0801221b 	.word	0x0801221b
 80121f8:	08012213 	.word	0x08012213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80121fc:	f7fb fb98 	bl	800d930 <HAL_RCC_GetPCLK1Freq>
 8012200:	61f8      	str	r0, [r7, #28]
        break;
 8012202:	e010      	b.n	8012226 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012204:	4b8f      	ldr	r3, [pc, #572]	@ (8012444 <UART_SetConfig+0x56c>)
 8012206:	61fb      	str	r3, [r7, #28]
        break;
 8012208:	e00d      	b.n	8012226 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801220a:	f7fb faf9 	bl	800d800 <HAL_RCC_GetSysClockFreq>
 801220e:	61f8      	str	r0, [r7, #28]
        break;
 8012210:	e009      	b.n	8012226 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012216:	61fb      	str	r3, [r7, #28]
        break;
 8012218:	e005      	b.n	8012226 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 801221a:	2300      	movs	r3, #0
 801221c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801221e:	2301      	movs	r3, #1
 8012220:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8012224:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012226:	69fb      	ldr	r3, [r7, #28]
 8012228:	2b00      	cmp	r3, #0
 801222a:	f000 80fb 	beq.w	8012424 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	685a      	ldr	r2, [r3, #4]
 8012232:	4613      	mov	r3, r2
 8012234:	005b      	lsls	r3, r3, #1
 8012236:	4413      	add	r3, r2
 8012238:	69fa      	ldr	r2, [r7, #28]
 801223a:	429a      	cmp	r2, r3
 801223c:	d305      	bcc.n	801224a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	685b      	ldr	r3, [r3, #4]
 8012242:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8012244:	69fa      	ldr	r2, [r7, #28]
 8012246:	429a      	cmp	r2, r3
 8012248:	d903      	bls.n	8012252 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 801224a:	2301      	movs	r3, #1
 801224c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8012250:	e0e8      	b.n	8012424 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8012252:	69fb      	ldr	r3, [r7, #28]
 8012254:	2200      	movs	r2, #0
 8012256:	461c      	mov	r4, r3
 8012258:	4615      	mov	r5, r2
 801225a:	f04f 0200 	mov.w	r2, #0
 801225e:	f04f 0300 	mov.w	r3, #0
 8012262:	022b      	lsls	r3, r5, #8
 8012264:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8012268:	0222      	lsls	r2, r4, #8
 801226a:	68f9      	ldr	r1, [r7, #12]
 801226c:	6849      	ldr	r1, [r1, #4]
 801226e:	0849      	lsrs	r1, r1, #1
 8012270:	2000      	movs	r0, #0
 8012272:	4688      	mov	r8, r1
 8012274:	4681      	mov	r9, r0
 8012276:	eb12 0a08 	adds.w	sl, r2, r8
 801227a:	eb43 0b09 	adc.w	fp, r3, r9
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	2200      	movs	r2, #0
 8012284:	603b      	str	r3, [r7, #0]
 8012286:	607a      	str	r2, [r7, #4]
 8012288:	e9d7 2300 	ldrd	r2, r3, [r7]
 801228c:	4650      	mov	r0, sl
 801228e:	4659      	mov	r1, fp
 8012290:	f7ee f806 	bl	80002a0 <__aeabi_uldivmod>
 8012294:	4602      	mov	r2, r0
 8012296:	460b      	mov	r3, r1
 8012298:	4613      	mov	r3, r2
 801229a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80122a2:	d308      	bcc.n	80122b6 <UART_SetConfig+0x3de>
 80122a4:	69bb      	ldr	r3, [r7, #24]
 80122a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80122aa:	d204      	bcs.n	80122b6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	69ba      	ldr	r2, [r7, #24]
 80122b2:	60da      	str	r2, [r3, #12]
 80122b4:	e0b6      	b.n	8012424 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80122b6:	2301      	movs	r3, #1
 80122b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80122bc:	e0b2      	b.n	8012424 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	69db      	ldr	r3, [r3, #28]
 80122c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80122c6:	d15e      	bne.n	8012386 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80122c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80122cc:	2b08      	cmp	r3, #8
 80122ce:	d828      	bhi.n	8012322 <UART_SetConfig+0x44a>
 80122d0:	a201      	add	r2, pc, #4	@ (adr r2, 80122d8 <UART_SetConfig+0x400>)
 80122d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122d6:	bf00      	nop
 80122d8:	080122fd 	.word	0x080122fd
 80122dc:	08012305 	.word	0x08012305
 80122e0:	0801230d 	.word	0x0801230d
 80122e4:	08012323 	.word	0x08012323
 80122e8:	08012313 	.word	0x08012313
 80122ec:	08012323 	.word	0x08012323
 80122f0:	08012323 	.word	0x08012323
 80122f4:	08012323 	.word	0x08012323
 80122f8:	0801231b 	.word	0x0801231b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80122fc:	f7fb fb18 	bl	800d930 <HAL_RCC_GetPCLK1Freq>
 8012300:	61f8      	str	r0, [r7, #28]
        break;
 8012302:	e014      	b.n	801232e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012304:	f7fb fb2a 	bl	800d95c <HAL_RCC_GetPCLK2Freq>
 8012308:	61f8      	str	r0, [r7, #28]
        break;
 801230a:	e010      	b.n	801232e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801230c:	4b4d      	ldr	r3, [pc, #308]	@ (8012444 <UART_SetConfig+0x56c>)
 801230e:	61fb      	str	r3, [r7, #28]
        break;
 8012310:	e00d      	b.n	801232e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012312:	f7fb fa75 	bl	800d800 <HAL_RCC_GetSysClockFreq>
 8012316:	61f8      	str	r0, [r7, #28]
        break;
 8012318:	e009      	b.n	801232e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801231a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801231e:	61fb      	str	r3, [r7, #28]
        break;
 8012320:	e005      	b.n	801232e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8012322:	2300      	movs	r3, #0
 8012324:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8012326:	2301      	movs	r3, #1
 8012328:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801232c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801232e:	69fb      	ldr	r3, [r7, #28]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d077      	beq.n	8012424 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012334:	69fb      	ldr	r3, [r7, #28]
 8012336:	005a      	lsls	r2, r3, #1
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	685b      	ldr	r3, [r3, #4]
 801233c:	085b      	lsrs	r3, r3, #1
 801233e:	441a      	add	r2, r3
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	685b      	ldr	r3, [r3, #4]
 8012344:	fbb2 f3f3 	udiv	r3, r2, r3
 8012348:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801234a:	69bb      	ldr	r3, [r7, #24]
 801234c:	2b0f      	cmp	r3, #15
 801234e:	d916      	bls.n	801237e <UART_SetConfig+0x4a6>
 8012350:	69bb      	ldr	r3, [r7, #24]
 8012352:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012356:	d212      	bcs.n	801237e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012358:	69bb      	ldr	r3, [r7, #24]
 801235a:	b29b      	uxth	r3, r3
 801235c:	f023 030f 	bic.w	r3, r3, #15
 8012360:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012362:	69bb      	ldr	r3, [r7, #24]
 8012364:	085b      	lsrs	r3, r3, #1
 8012366:	b29b      	uxth	r3, r3
 8012368:	f003 0307 	and.w	r3, r3, #7
 801236c:	b29a      	uxth	r2, r3
 801236e:	8afb      	ldrh	r3, [r7, #22]
 8012370:	4313      	orrs	r3, r2
 8012372:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	8afa      	ldrh	r2, [r7, #22]
 801237a:	60da      	str	r2, [r3, #12]
 801237c:	e052      	b.n	8012424 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 801237e:	2301      	movs	r3, #1
 8012380:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8012384:	e04e      	b.n	8012424 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012386:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801238a:	2b08      	cmp	r3, #8
 801238c:	d827      	bhi.n	80123de <UART_SetConfig+0x506>
 801238e:	a201      	add	r2, pc, #4	@ (adr r2, 8012394 <UART_SetConfig+0x4bc>)
 8012390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012394:	080123b9 	.word	0x080123b9
 8012398:	080123c1 	.word	0x080123c1
 801239c:	080123c9 	.word	0x080123c9
 80123a0:	080123df 	.word	0x080123df
 80123a4:	080123cf 	.word	0x080123cf
 80123a8:	080123df 	.word	0x080123df
 80123ac:	080123df 	.word	0x080123df
 80123b0:	080123df 	.word	0x080123df
 80123b4:	080123d7 	.word	0x080123d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80123b8:	f7fb faba 	bl	800d930 <HAL_RCC_GetPCLK1Freq>
 80123bc:	61f8      	str	r0, [r7, #28]
        break;
 80123be:	e014      	b.n	80123ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80123c0:	f7fb facc 	bl	800d95c <HAL_RCC_GetPCLK2Freq>
 80123c4:	61f8      	str	r0, [r7, #28]
        break;
 80123c6:	e010      	b.n	80123ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80123c8:	4b1e      	ldr	r3, [pc, #120]	@ (8012444 <UART_SetConfig+0x56c>)
 80123ca:	61fb      	str	r3, [r7, #28]
        break;
 80123cc:	e00d      	b.n	80123ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80123ce:	f7fb fa17 	bl	800d800 <HAL_RCC_GetSysClockFreq>
 80123d2:	61f8      	str	r0, [r7, #28]
        break;
 80123d4:	e009      	b.n	80123ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80123d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80123da:	61fb      	str	r3, [r7, #28]
        break;
 80123dc:	e005      	b.n	80123ea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80123de:	2300      	movs	r3, #0
 80123e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80123e2:	2301      	movs	r3, #1
 80123e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80123e8:	bf00      	nop
    }

    if (pclk != 0U)
 80123ea:	69fb      	ldr	r3, [r7, #28]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d019      	beq.n	8012424 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	685b      	ldr	r3, [r3, #4]
 80123f4:	085a      	lsrs	r2, r3, #1
 80123f6:	69fb      	ldr	r3, [r7, #28]
 80123f8:	441a      	add	r2, r3
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	685b      	ldr	r3, [r3, #4]
 80123fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8012402:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012404:	69bb      	ldr	r3, [r7, #24]
 8012406:	2b0f      	cmp	r3, #15
 8012408:	d909      	bls.n	801241e <UART_SetConfig+0x546>
 801240a:	69bb      	ldr	r3, [r7, #24]
 801240c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012410:	d205      	bcs.n	801241e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012412:	69bb      	ldr	r3, [r7, #24]
 8012414:	b29a      	uxth	r2, r3
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	60da      	str	r2, [r3, #12]
 801241c:	e002      	b.n	8012424 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 801241e:	2301      	movs	r3, #1
 8012420:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	2200      	movs	r2, #0
 8012428:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	2200      	movs	r2, #0
 801242e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8012430:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8012434:	4618      	mov	r0, r3
 8012436:	3728      	adds	r7, #40	@ 0x28
 8012438:	46bd      	mov	sp, r7
 801243a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801243e:	bf00      	nop
 8012440:	40008000 	.word	0x40008000
 8012444:	00f42400 	.word	0x00f42400

08012448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012448:	b480      	push	{r7}
 801244a:	b083      	sub	sp, #12
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012454:	f003 0308 	and.w	r3, r3, #8
 8012458:	2b00      	cmp	r3, #0
 801245a:	d00a      	beq.n	8012472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	685b      	ldr	r3, [r3, #4]
 8012462:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	430a      	orrs	r2, r1
 8012470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012476:	f003 0301 	and.w	r3, r3, #1
 801247a:	2b00      	cmp	r3, #0
 801247c:	d00a      	beq.n	8012494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	430a      	orrs	r2, r1
 8012492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012498:	f003 0302 	and.w	r3, r3, #2
 801249c:	2b00      	cmp	r3, #0
 801249e:	d00a      	beq.n	80124b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	430a      	orrs	r2, r1
 80124b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124ba:	f003 0304 	and.w	r3, r3, #4
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d00a      	beq.n	80124d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	685b      	ldr	r3, [r3, #4]
 80124c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	430a      	orrs	r2, r1
 80124d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124dc:	f003 0310 	and.w	r3, r3, #16
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d00a      	beq.n	80124fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	689b      	ldr	r3, [r3, #8]
 80124ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	430a      	orrs	r2, r1
 80124f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124fe:	f003 0320 	and.w	r3, r3, #32
 8012502:	2b00      	cmp	r3, #0
 8012504:	d00a      	beq.n	801251c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	689b      	ldr	r3, [r3, #8]
 801250c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	430a      	orrs	r2, r1
 801251a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012524:	2b00      	cmp	r3, #0
 8012526:	d01a      	beq.n	801255e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	430a      	orrs	r2, r1
 801253c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012546:	d10a      	bne.n	801255e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	430a      	orrs	r2, r1
 801255c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012566:	2b00      	cmp	r3, #0
 8012568:	d00a      	beq.n	8012580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	430a      	orrs	r2, r1
 801257e:	605a      	str	r2, [r3, #4]
  }
}
 8012580:	bf00      	nop
 8012582:	370c      	adds	r7, #12
 8012584:	46bd      	mov	sp, r7
 8012586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258a:	4770      	bx	lr

0801258c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b098      	sub	sp, #96	@ 0x60
 8012590:	af02      	add	r7, sp, #8
 8012592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2200      	movs	r2, #0
 8012598:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801259c:	f7f6 ffc6 	bl	800952c <HAL_GetTick>
 80125a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	f003 0308 	and.w	r3, r3, #8
 80125ac:	2b08      	cmp	r3, #8
 80125ae:	d12e      	bne.n	801260e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80125b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80125b4:	9300      	str	r3, [sp, #0]
 80125b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80125b8:	2200      	movs	r2, #0
 80125ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f000 f88c 	bl	80126dc <UART_WaitOnFlagUntilTimeout>
 80125c4:	4603      	mov	r3, r0
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d021      	beq.n	801260e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125d2:	e853 3f00 	ldrex	r3, [r3]
 80125d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80125d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80125de:	653b      	str	r3, [r7, #80]	@ 0x50
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	461a      	mov	r2, r3
 80125e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80125e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80125ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80125ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80125f0:	e841 2300 	strex	r3, r2, [r1]
 80125f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80125f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d1e6      	bne.n	80125ca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	2220      	movs	r2, #32
 8012600:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2200      	movs	r2, #0
 8012606:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801260a:	2303      	movs	r3, #3
 801260c:	e062      	b.n	80126d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	f003 0304 	and.w	r3, r3, #4
 8012618:	2b04      	cmp	r3, #4
 801261a:	d149      	bne.n	80126b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801261c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8012620:	9300      	str	r3, [sp, #0]
 8012622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012624:	2200      	movs	r2, #0
 8012626:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f000 f856 	bl	80126dc <UART_WaitOnFlagUntilTimeout>
 8012630:	4603      	mov	r3, r0
 8012632:	2b00      	cmp	r3, #0
 8012634:	d03c      	beq.n	80126b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801263e:	e853 3f00 	ldrex	r3, [r3]
 8012642:	623b      	str	r3, [r7, #32]
   return(result);
 8012644:	6a3b      	ldr	r3, [r7, #32]
 8012646:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801264a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	461a      	mov	r2, r3
 8012652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012654:	633b      	str	r3, [r7, #48]	@ 0x30
 8012656:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012658:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801265a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801265c:	e841 2300 	strex	r3, r2, [r1]
 8012660:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012664:	2b00      	cmp	r3, #0
 8012666:	d1e6      	bne.n	8012636 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	3308      	adds	r3, #8
 801266e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012670:	693b      	ldr	r3, [r7, #16]
 8012672:	e853 3f00 	ldrex	r3, [r3]
 8012676:	60fb      	str	r3, [r7, #12]
   return(result);
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	f023 0301 	bic.w	r3, r3, #1
 801267e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	3308      	adds	r3, #8
 8012686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012688:	61fa      	str	r2, [r7, #28]
 801268a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801268c:	69b9      	ldr	r1, [r7, #24]
 801268e:	69fa      	ldr	r2, [r7, #28]
 8012690:	e841 2300 	strex	r3, r2, [r1]
 8012694:	617b      	str	r3, [r7, #20]
   return(result);
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d1e5      	bne.n	8012668 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2220      	movs	r2, #32
 80126a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2200      	movs	r2, #0
 80126a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80126ac:	2303      	movs	r3, #3
 80126ae:	e011      	b.n	80126d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	2220      	movs	r2, #32
 80126b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2220      	movs	r2, #32
 80126ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2200      	movs	r2, #0
 80126c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2200      	movs	r2, #0
 80126c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2200      	movs	r2, #0
 80126ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80126d2:	2300      	movs	r3, #0
}
 80126d4:	4618      	mov	r0, r3
 80126d6:	3758      	adds	r7, #88	@ 0x58
 80126d8:	46bd      	mov	sp, r7
 80126da:	bd80      	pop	{r7, pc}

080126dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b084      	sub	sp, #16
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	60f8      	str	r0, [r7, #12]
 80126e4:	60b9      	str	r1, [r7, #8]
 80126e6:	603b      	str	r3, [r7, #0]
 80126e8:	4613      	mov	r3, r2
 80126ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80126ec:	e04f      	b.n	801278e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80126ee:	69bb      	ldr	r3, [r7, #24]
 80126f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126f4:	d04b      	beq.n	801278e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80126f6:	f7f6 ff19 	bl	800952c <HAL_GetTick>
 80126fa:	4602      	mov	r2, r0
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	1ad3      	subs	r3, r2, r3
 8012700:	69ba      	ldr	r2, [r7, #24]
 8012702:	429a      	cmp	r2, r3
 8012704:	d302      	bcc.n	801270c <UART_WaitOnFlagUntilTimeout+0x30>
 8012706:	69bb      	ldr	r3, [r7, #24]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d101      	bne.n	8012710 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801270c:	2303      	movs	r3, #3
 801270e:	e04e      	b.n	80127ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	f003 0304 	and.w	r3, r3, #4
 801271a:	2b00      	cmp	r3, #0
 801271c:	d037      	beq.n	801278e <UART_WaitOnFlagUntilTimeout+0xb2>
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	2b80      	cmp	r3, #128	@ 0x80
 8012722:	d034      	beq.n	801278e <UART_WaitOnFlagUntilTimeout+0xb2>
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	2b40      	cmp	r3, #64	@ 0x40
 8012728:	d031      	beq.n	801278e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	69db      	ldr	r3, [r3, #28]
 8012730:	f003 0308 	and.w	r3, r3, #8
 8012734:	2b08      	cmp	r3, #8
 8012736:	d110      	bne.n	801275a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	2208      	movs	r2, #8
 801273e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012740:	68f8      	ldr	r0, [r7, #12]
 8012742:	f000 f8ff 	bl	8012944 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	2208      	movs	r2, #8
 801274a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	2200      	movs	r2, #0
 8012752:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8012756:	2301      	movs	r3, #1
 8012758:	e029      	b.n	80127ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	69db      	ldr	r3, [r3, #28]
 8012760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012768:	d111      	bne.n	801278e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012774:	68f8      	ldr	r0, [r7, #12]
 8012776:	f000 f8e5 	bl	8012944 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	2220      	movs	r2, #32
 801277e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	2200      	movs	r2, #0
 8012786:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 801278a:	2303      	movs	r3, #3
 801278c:	e00f      	b.n	80127ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	69da      	ldr	r2, [r3, #28]
 8012794:	68bb      	ldr	r3, [r7, #8]
 8012796:	4013      	ands	r3, r2
 8012798:	68ba      	ldr	r2, [r7, #8]
 801279a:	429a      	cmp	r2, r3
 801279c:	bf0c      	ite	eq
 801279e:	2301      	moveq	r3, #1
 80127a0:	2300      	movne	r3, #0
 80127a2:	b2db      	uxtb	r3, r3
 80127a4:	461a      	mov	r2, r3
 80127a6:	79fb      	ldrb	r3, [r7, #7]
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d0a0      	beq.n	80126ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80127ac:	2300      	movs	r3, #0
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3710      	adds	r7, #16
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}
	...

080127b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b096      	sub	sp, #88	@ 0x58
 80127bc:	af00      	add	r7, sp, #0
 80127be:	60f8      	str	r0, [r7, #12]
 80127c0:	60b9      	str	r1, [r7, #8]
 80127c2:	4613      	mov	r3, r2
 80127c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	68ba      	ldr	r2, [r7, #8]
 80127ca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	88fa      	ldrh	r2, [r7, #6]
 80127d0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	2200      	movs	r2, #0
 80127d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	2222      	movs	r2, #34	@ 0x22
 80127e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d028      	beq.n	801283e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80127f0:	4a3e      	ldr	r2, [pc, #248]	@ (80128ec <UART_Start_Receive_DMA+0x134>)
 80127f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80127f8:	4a3d      	ldr	r2, [pc, #244]	@ (80128f0 <UART_Start_Receive_DMA+0x138>)
 80127fa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012800:	4a3c      	ldr	r2, [pc, #240]	@ (80128f4 <UART_Start_Receive_DMA+0x13c>)
 8012802:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012808:	2200      	movs	r2, #0
 801280a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	3324      	adds	r3, #36	@ 0x24
 8012816:	4619      	mov	r1, r3
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801281c:	461a      	mov	r2, r3
 801281e:	88fb      	ldrh	r3, [r7, #6]
 8012820:	f7f8 fd24 	bl	800b26c <HAL_DMA_Start_IT>
 8012824:	4603      	mov	r3, r0
 8012826:	2b00      	cmp	r3, #0
 8012828:	d009      	beq.n	801283e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	2210      	movs	r2, #16
 801282e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	2220      	movs	r2, #32
 8012836:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 801283a:	2301      	movs	r3, #1
 801283c:	e051      	b.n	80128e2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	691b      	ldr	r3, [r3, #16]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d018      	beq.n	8012878 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801284c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801284e:	e853 3f00 	ldrex	r3, [r3]
 8012852:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801285a:	657b      	str	r3, [r7, #84]	@ 0x54
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	461a      	mov	r2, r3
 8012862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012864:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012866:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012868:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801286a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801286c:	e841 2300 	strex	r3, r2, [r1]
 8012870:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8012872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012874:	2b00      	cmp	r3, #0
 8012876:	d1e6      	bne.n	8012846 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	3308      	adds	r3, #8
 801287e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012882:	e853 3f00 	ldrex	r3, [r3]
 8012886:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801288a:	f043 0301 	orr.w	r3, r3, #1
 801288e:	653b      	str	r3, [r7, #80]	@ 0x50
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	3308      	adds	r3, #8
 8012896:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012898:	637a      	str	r2, [r7, #52]	@ 0x34
 801289a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801289c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801289e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80128a0:	e841 2300 	strex	r3, r2, [r1]
 80128a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80128a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d1e5      	bne.n	8012878 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	3308      	adds	r3, #8
 80128b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	e853 3f00 	ldrex	r3, [r3]
 80128ba:	613b      	str	r3, [r7, #16]
   return(result);
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	3308      	adds	r3, #8
 80128ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80128cc:	623a      	str	r2, [r7, #32]
 80128ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128d0:	69f9      	ldr	r1, [r7, #28]
 80128d2:	6a3a      	ldr	r2, [r7, #32]
 80128d4:	e841 2300 	strex	r3, r2, [r1]
 80128d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80128da:	69bb      	ldr	r3, [r7, #24]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d1e5      	bne.n	80128ac <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80128e0:	2300      	movs	r3, #0
}
 80128e2:	4618      	mov	r0, r3
 80128e4:	3758      	adds	r7, #88	@ 0x58
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bd80      	pop	{r7, pc}
 80128ea:	bf00      	nop
 80128ec:	08012ac3 	.word	0x08012ac3
 80128f0:	08012bef 	.word	0x08012bef
 80128f4:	08012c2d 	.word	0x08012c2d

080128f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80128f8:	b480      	push	{r7}
 80128fa:	b089      	sub	sp, #36	@ 0x24
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	e853 3f00 	ldrex	r3, [r3]
 801290c:	60bb      	str	r3, [r7, #8]
   return(result);
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8012914:	61fb      	str	r3, [r7, #28]
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	461a      	mov	r2, r3
 801291c:	69fb      	ldr	r3, [r7, #28]
 801291e:	61bb      	str	r3, [r7, #24]
 8012920:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012922:	6979      	ldr	r1, [r7, #20]
 8012924:	69ba      	ldr	r2, [r7, #24]
 8012926:	e841 2300 	strex	r3, r2, [r1]
 801292a:	613b      	str	r3, [r7, #16]
   return(result);
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d1e6      	bne.n	8012900 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2220      	movs	r2, #32
 8012936:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8012938:	bf00      	nop
 801293a:	3724      	adds	r7, #36	@ 0x24
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr

08012944 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012944:	b480      	push	{r7}
 8012946:	b095      	sub	sp, #84	@ 0x54
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012954:	e853 3f00 	ldrex	r3, [r3]
 8012958:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801295a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801295c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012960:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	461a      	mov	r2, r3
 8012968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801296a:	643b      	str	r3, [r7, #64]	@ 0x40
 801296c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801296e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012970:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012972:	e841 2300 	strex	r3, r2, [r1]
 8012976:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801297a:	2b00      	cmp	r3, #0
 801297c:	d1e6      	bne.n	801294c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	3308      	adds	r3, #8
 8012984:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012986:	6a3b      	ldr	r3, [r7, #32]
 8012988:	e853 3f00 	ldrex	r3, [r3]
 801298c:	61fb      	str	r3, [r7, #28]
   return(result);
 801298e:	69fb      	ldr	r3, [r7, #28]
 8012990:	f023 0301 	bic.w	r3, r3, #1
 8012994:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	3308      	adds	r3, #8
 801299c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801299e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80129a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80129a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129a6:	e841 2300 	strex	r3, r2, [r1]
 80129aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80129ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d1e5      	bne.n	801297e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80129b6:	2b01      	cmp	r3, #1
 80129b8:	d118      	bne.n	80129ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	e853 3f00 	ldrex	r3, [r3]
 80129c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	f023 0310 	bic.w	r3, r3, #16
 80129ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	461a      	mov	r2, r3
 80129d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80129d8:	61bb      	str	r3, [r7, #24]
 80129da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129dc:	6979      	ldr	r1, [r7, #20]
 80129de:	69ba      	ldr	r2, [r7, #24]
 80129e0:	e841 2300 	strex	r3, r2, [r1]
 80129e4:	613b      	str	r3, [r7, #16]
   return(result);
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d1e6      	bne.n	80129ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2220      	movs	r2, #32
 80129f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	2200      	movs	r2, #0
 80129f8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	2200      	movs	r2, #0
 80129fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8012a00:	bf00      	nop
 8012a02:	3754      	adds	r7, #84	@ 0x54
 8012a04:	46bd      	mov	sp, r7
 8012a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0a:	4770      	bx	lr

08012a0c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b090      	sub	sp, #64	@ 0x40
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a18:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	f003 0320 	and.w	r3, r3, #32
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d137      	bne.n	8012a98 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8012a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	3308      	adds	r3, #8
 8012a36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a3a:	e853 3f00 	ldrex	r3, [r3]
 8012a3e:	623b      	str	r3, [r7, #32]
   return(result);
 8012a40:	6a3b      	ldr	r3, [r7, #32]
 8012a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012a46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	3308      	adds	r3, #8
 8012a4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012a50:	633a      	str	r2, [r7, #48]	@ 0x30
 8012a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012a58:	e841 2300 	strex	r3, r2, [r1]
 8012a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d1e5      	bne.n	8012a30 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a6a:	693b      	ldr	r3, [r7, #16]
 8012a6c:	e853 3f00 	ldrex	r3, [r3]
 8012a70:	60fb      	str	r3, [r7, #12]
   return(result);
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8012a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	461a      	mov	r2, r3
 8012a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a82:	61fb      	str	r3, [r7, #28]
 8012a84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a86:	69b9      	ldr	r1, [r7, #24]
 8012a88:	69fa      	ldr	r2, [r7, #28]
 8012a8a:	e841 2300 	strex	r3, r2, [r1]
 8012a8e:	617b      	str	r3, [r7, #20]
   return(result);
 8012a90:	697b      	ldr	r3, [r7, #20]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d1e6      	bne.n	8012a64 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012a96:	e002      	b.n	8012a9e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8012a98:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012a9a:	f7ef f941 	bl	8001d20 <HAL_UART_TxCpltCallback>
}
 8012a9e:	bf00      	nop
 8012aa0:	3740      	adds	r7, #64	@ 0x40
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}

08012aa6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012aa6:	b580      	push	{r7, lr}
 8012aa8:	b084      	sub	sp, #16
 8012aaa:	af00      	add	r7, sp, #0
 8012aac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ab2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012ab4:	68f8      	ldr	r0, [r7, #12]
 8012ab6:	f7ff f9f1 	bl	8011e9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012aba:	bf00      	nop
 8012abc:	3710      	adds	r7, #16
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}

08012ac2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012ac2:	b580      	push	{r7, lr}
 8012ac4:	b09c      	sub	sp, #112	@ 0x70
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ace:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	f003 0320 	and.w	r3, r3, #32
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d171      	bne.n	8012bc2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8012ade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012ae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012aee:	e853 3f00 	ldrex	r3, [r3]
 8012af2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012af4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012af6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012afa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012afc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	461a      	mov	r2, r3
 8012b02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012b04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012b06:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012b0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012b0c:	e841 2300 	strex	r3, r2, [r1]
 8012b10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012b12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d1e6      	bne.n	8012ae6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012b18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	3308      	adds	r3, #8
 8012b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b22:	e853 3f00 	ldrex	r3, [r3]
 8012b26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b2a:	f023 0301 	bic.w	r3, r3, #1
 8012b2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8012b30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	3308      	adds	r3, #8
 8012b36:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012b38:	647a      	str	r2, [r7, #68]	@ 0x44
 8012b3a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012b3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012b40:	e841 2300 	strex	r3, r2, [r1]
 8012b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d1e5      	bne.n	8012b18 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	3308      	adds	r3, #8
 8012b52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b56:	e853 3f00 	ldrex	r3, [r3]
 8012b5a:	623b      	str	r3, [r7, #32]
   return(result);
 8012b5c:	6a3b      	ldr	r3, [r7, #32]
 8012b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012b62:	663b      	str	r3, [r7, #96]	@ 0x60
 8012b64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	3308      	adds	r3, #8
 8012b6a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012b6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8012b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b74:	e841 2300 	strex	r3, r2, [r1]
 8012b78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d1e5      	bne.n	8012b4c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012b80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b82:	2220      	movs	r2, #32
 8012b84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012b88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012b8c:	2b01      	cmp	r3, #1
 8012b8e:	d118      	bne.n	8012bc2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b96:	693b      	ldr	r3, [r7, #16]
 8012b98:	e853 3f00 	ldrex	r3, [r3]
 8012b9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	f023 0310 	bic.w	r3, r3, #16
 8012ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012ba6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	461a      	mov	r2, r3
 8012bac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012bae:	61fb      	str	r3, [r7, #28]
 8012bb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bb2:	69b9      	ldr	r1, [r7, #24]
 8012bb4:	69fa      	ldr	r2, [r7, #28]
 8012bb6:	e841 2300 	strex	r3, r2, [r1]
 8012bba:	617b      	str	r3, [r7, #20]
   return(result);
 8012bbc:	697b      	ldr	r3, [r7, #20]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d1e6      	bne.n	8012b90 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012bc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012bc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012bcc:	2b01      	cmp	r3, #1
 8012bce:	d107      	bne.n	8012be0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012bd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8012bd6:	4619      	mov	r1, r3
 8012bd8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012bda:	f7ef f819 	bl	8001c10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012bde:	e002      	b.n	8012be6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8012be0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012be2:	f7ef f893 	bl	8001d0c <HAL_UART_RxCpltCallback>
}
 8012be6:	bf00      	nop
 8012be8:	3770      	adds	r7, #112	@ 0x70
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}

08012bee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012bee:	b580      	push	{r7, lr}
 8012bf0:	b084      	sub	sp, #16
 8012bf2:	af00      	add	r7, sp, #0
 8012bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012bfa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	2201      	movs	r2, #1
 8012c00:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012c06:	2b01      	cmp	r3, #1
 8012c08:	d109      	bne.n	8012c1e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8012c10:	085b      	lsrs	r3, r3, #1
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	4619      	mov	r1, r3
 8012c16:	68f8      	ldr	r0, [r7, #12]
 8012c18:	f7ee fffa 	bl	8001c10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012c1c:	e002      	b.n	8012c24 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8012c1e:	68f8      	ldr	r0, [r7, #12]
 8012c20:	f7ff f946 	bl	8011eb0 <HAL_UART_RxHalfCpltCallback>
}
 8012c24:	bf00      	nop
 8012c26:	3710      	adds	r7, #16
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}

08012c2c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b086      	sub	sp, #24
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c38:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012c3e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012c46:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012c48:	697b      	ldr	r3, [r7, #20]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	689b      	ldr	r3, [r3, #8]
 8012c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012c52:	2b80      	cmp	r3, #128	@ 0x80
 8012c54:	d109      	bne.n	8012c6a <UART_DMAError+0x3e>
 8012c56:	693b      	ldr	r3, [r7, #16]
 8012c58:	2b21      	cmp	r3, #33	@ 0x21
 8012c5a:	d106      	bne.n	8012c6a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	2200      	movs	r2, #0
 8012c60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8012c64:	6978      	ldr	r0, [r7, #20]
 8012c66:	f7ff fe47 	bl	80128f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	689b      	ldr	r3, [r3, #8]
 8012c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c74:	2b40      	cmp	r3, #64	@ 0x40
 8012c76:	d109      	bne.n	8012c8c <UART_DMAError+0x60>
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	2b22      	cmp	r3, #34	@ 0x22
 8012c7c:	d106      	bne.n	8012c8c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012c7e:	697b      	ldr	r3, [r7, #20]
 8012c80:	2200      	movs	r2, #0
 8012c82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8012c86:	6978      	ldr	r0, [r7, #20]
 8012c88:	f7ff fe5c 	bl	8012944 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012c92:	f043 0210 	orr.w	r2, r3, #16
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012c9c:	6978      	ldr	r0, [r7, #20]
 8012c9e:	f7ff f911 	bl	8011ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012ca2:	bf00      	nop
 8012ca4:	3718      	adds	r7, #24
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}

08012caa <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8012caa:	b580      	push	{r7, lr}
 8012cac:	b088      	sub	sp, #32
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	60f8      	str	r0, [r7, #12]
 8012cb2:	60b9      	str	r1, [r7, #8]
 8012cb4:	603b      	str	r3, [r7, #0]
 8012cb6:	4613      	mov	r3, r2
 8012cb8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012cc0:	2b20      	cmp	r3, #32
 8012cc2:	f040 80f0 	bne.w	8012ea6 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d002      	beq.n	8012cd2 <HAL_UARTEx_ReceiveToIdle+0x28>
 8012ccc:	88fb      	ldrh	r3, [r7, #6]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d101      	bne.n	8012cd6 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 8012cd2:	2301      	movs	r3, #1
 8012cd4:	e0e8      	b.n	8012ea8 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	2222      	movs	r2, #34	@ 0x22
 8012ce2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	2201      	movs	r2, #1
 8012cea:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	2200      	movs	r2, #0
 8012cf0:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012cf2:	f7f6 fc1b 	bl	800952c <HAL_GetTick>
 8012cf6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	88fa      	ldrh	r2, [r7, #6]
 8012cfc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	88fa      	ldrh	r2, [r7, #6]
 8012d04:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	689b      	ldr	r3, [r3, #8]
 8012d0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012d10:	d10e      	bne.n	8012d30 <HAL_UARTEx_ReceiveToIdle+0x86>
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	691b      	ldr	r3, [r3, #16]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d105      	bne.n	8012d26 <HAL_UARTEx_ReceiveToIdle+0x7c>
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8012d20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8012d24:	e02d      	b.n	8012d82 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	22ff      	movs	r2, #255	@ 0xff
 8012d2a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8012d2e:	e028      	b.n	8012d82 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	689b      	ldr	r3, [r3, #8]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d10d      	bne.n	8012d54 <HAL_UARTEx_ReceiveToIdle+0xaa>
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	691b      	ldr	r3, [r3, #16]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d104      	bne.n	8012d4a <HAL_UARTEx_ReceiveToIdle+0xa0>
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	22ff      	movs	r2, #255	@ 0xff
 8012d44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8012d48:	e01b      	b.n	8012d82 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	227f      	movs	r2, #127	@ 0x7f
 8012d4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8012d52:	e016      	b.n	8012d82 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	689b      	ldr	r3, [r3, #8]
 8012d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012d5c:	d10d      	bne.n	8012d7a <HAL_UARTEx_ReceiveToIdle+0xd0>
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	691b      	ldr	r3, [r3, #16]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d104      	bne.n	8012d70 <HAL_UARTEx_ReceiveToIdle+0xc6>
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	227f      	movs	r2, #127	@ 0x7f
 8012d6a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8012d6e:	e008      	b.n	8012d82 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	223f      	movs	r2, #63	@ 0x3f
 8012d74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8012d78:	e003      	b.n	8012d82 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012d88:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	689b      	ldr	r3, [r3, #8]
 8012d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012d92:	d108      	bne.n	8012da6 <HAL_UARTEx_ReceiveToIdle+0xfc>
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	691b      	ldr	r3, [r3, #16]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d104      	bne.n	8012da6 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	61bb      	str	r3, [r7, #24]
 8012da4:	e003      	b.n	8012dae <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012daa:	2300      	movs	r3, #0
 8012dac:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	2200      	movs	r2, #0
 8012db2:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8012db4:	e060      	b.n	8012e78 <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	69db      	ldr	r3, [r3, #28]
 8012dbc:	f003 0310 	and.w	r3, r3, #16
 8012dc0:	2b10      	cmp	r3, #16
 8012dc2:	d110      	bne.n	8012de6 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	2210      	movs	r2, #16
 8012dca:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	881b      	ldrh	r3, [r3, #0]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d008      	beq.n	8012de6 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	2202      	movs	r2, #2
 8012dd8:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	2220      	movs	r2, #32
 8012dde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 8012de2:	2300      	movs	r3, #0
 8012de4:	e060      	b.n	8012ea8 <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	69db      	ldr	r3, [r3, #28]
 8012dec:	f003 0320 	and.w	r3, r3, #32
 8012df0:	2b20      	cmp	r3, #32
 8012df2:	d12c      	bne.n	8012e4e <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 8012df4:	69fb      	ldr	r3, [r7, #28]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d10c      	bne.n	8012e14 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012e00:	b29a      	uxth	r2, r3
 8012e02:	8a7b      	ldrh	r3, [r7, #18]
 8012e04:	4013      	ands	r3, r2
 8012e06:	b29a      	uxth	r2, r3
 8012e08:	69bb      	ldr	r3, [r7, #24]
 8012e0a:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8012e0c:	69bb      	ldr	r3, [r7, #24]
 8012e0e:	3302      	adds	r3, #2
 8012e10:	61bb      	str	r3, [r7, #24]
 8012e12:	e00d      	b.n	8012e30 <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	b2da      	uxtb	r2, r3
 8012e1e:	8a7b      	ldrh	r3, [r7, #18]
 8012e20:	b2db      	uxtb	r3, r3
 8012e22:	4013      	ands	r3, r2
 8012e24:	b2da      	uxtb	r2, r3
 8012e26:	69fb      	ldr	r3, [r7, #28]
 8012e28:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8012e2a:	69fb      	ldr	r3, [r7, #28]
 8012e2c:	3301      	adds	r3, #1
 8012e2e:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	881b      	ldrh	r3, [r3, #0]
 8012e34:	3301      	adds	r3, #1
 8012e36:	b29a      	uxth	r2, r3
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8012e42:	b29b      	uxth	r3, r3
 8012e44:	3b01      	subs	r3, #1
 8012e46:	b29a      	uxth	r2, r3
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e54:	d010      	beq.n	8012e78 <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8012e56:	f7f6 fb69 	bl	800952c <HAL_GetTick>
 8012e5a:	4602      	mov	r2, r0
 8012e5c:	697b      	ldr	r3, [r7, #20]
 8012e5e:	1ad3      	subs	r3, r2, r3
 8012e60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012e62:	429a      	cmp	r2, r3
 8012e64:	d302      	bcc.n	8012e6c <HAL_UARTEx_ReceiveToIdle+0x1c2>
 8012e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d105      	bne.n	8012e78 <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	2220      	movs	r2, #32
 8012e70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8012e74:	2303      	movs	r3, #3
 8012e76:	e017      	b.n	8012ea8 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8012e7e:	b29b      	uxth	r3, r3
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d198      	bne.n	8012db6 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	1ad3      	subs	r3, r2, r3
 8012e94:	b29a      	uxth	r2, r3
 8012e96:	683b      	ldr	r3, [r7, #0]
 8012e98:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2220      	movs	r2, #32
 8012e9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	e000      	b.n	8012ea8 <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8012ea6:	2302      	movs	r3, #2
  }
}
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	3720      	adds	r7, #32
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}

08012eb0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b08c      	sub	sp, #48	@ 0x30
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	4613      	mov	r3, r2
 8012ebc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012ec4:	2b20      	cmp	r3, #32
 8012ec6:	d142      	bne.n	8012f4e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d002      	beq.n	8012ed4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8012ece:	88fb      	ldrh	r3, [r7, #6]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d101      	bne.n	8012ed8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	e03b      	b.n	8012f50 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	2201      	movs	r2, #1
 8012edc:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8012ee4:	88fb      	ldrh	r3, [r7, #6]
 8012ee6:	461a      	mov	r2, r3
 8012ee8:	68b9      	ldr	r1, [r7, #8]
 8012eea:	68f8      	ldr	r0, [r7, #12]
 8012eec:	f7ff fc64 	bl	80127b8 <UART_Start_Receive_DMA>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8012ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d124      	bne.n	8012f48 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012f02:	2b01      	cmp	r3, #1
 8012f04:	d11d      	bne.n	8012f42 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	2210      	movs	r2, #16
 8012f0c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f14:	69bb      	ldr	r3, [r7, #24]
 8012f16:	e853 3f00 	ldrex	r3, [r3]
 8012f1a:	617b      	str	r3, [r7, #20]
   return(result);
 8012f1c:	697b      	ldr	r3, [r7, #20]
 8012f1e:	f043 0310 	orr.w	r3, r3, #16
 8012f22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	461a      	mov	r2, r3
 8012f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f2e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f30:	6a39      	ldr	r1, [r7, #32]
 8012f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012f34:	e841 2300 	strex	r3, r2, [r1]
 8012f38:	61fb      	str	r3, [r7, #28]
   return(result);
 8012f3a:	69fb      	ldr	r3, [r7, #28]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d1e6      	bne.n	8012f0e <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8012f40:	e002      	b.n	8012f48 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8012f42:	2301      	movs	r3, #1
 8012f44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8012f48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f4c:	e000      	b.n	8012f50 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8012f4e:	2302      	movs	r3, #2
  }
}
 8012f50:	4618      	mov	r0, r3
 8012f52:	3730      	adds	r7, #48	@ 0x30
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}

08012f58 <atoi>:
 8012f58:	220a      	movs	r2, #10
 8012f5a:	2100      	movs	r1, #0
 8012f5c:	f000 b87c 	b.w	8013058 <strtol>

08012f60 <_strtol_l.isra.0>:
 8012f60:	2b24      	cmp	r3, #36	@ 0x24
 8012f62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f66:	4686      	mov	lr, r0
 8012f68:	4690      	mov	r8, r2
 8012f6a:	d801      	bhi.n	8012f70 <_strtol_l.isra.0+0x10>
 8012f6c:	2b01      	cmp	r3, #1
 8012f6e:	d106      	bne.n	8012f7e <_strtol_l.isra.0+0x1e>
 8012f70:	f000 f92c 	bl	80131cc <__errno>
 8012f74:	2316      	movs	r3, #22
 8012f76:	6003      	str	r3, [r0, #0]
 8012f78:	2000      	movs	r0, #0
 8012f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f7e:	4834      	ldr	r0, [pc, #208]	@ (8013050 <_strtol_l.isra.0+0xf0>)
 8012f80:	460d      	mov	r5, r1
 8012f82:	462a      	mov	r2, r5
 8012f84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f88:	5d06      	ldrb	r6, [r0, r4]
 8012f8a:	f016 0608 	ands.w	r6, r6, #8
 8012f8e:	d1f8      	bne.n	8012f82 <_strtol_l.isra.0+0x22>
 8012f90:	2c2d      	cmp	r4, #45	@ 0x2d
 8012f92:	d110      	bne.n	8012fb6 <_strtol_l.isra.0+0x56>
 8012f94:	782c      	ldrb	r4, [r5, #0]
 8012f96:	2601      	movs	r6, #1
 8012f98:	1c95      	adds	r5, r2, #2
 8012f9a:	f033 0210 	bics.w	r2, r3, #16
 8012f9e:	d115      	bne.n	8012fcc <_strtol_l.isra.0+0x6c>
 8012fa0:	2c30      	cmp	r4, #48	@ 0x30
 8012fa2:	d10d      	bne.n	8012fc0 <_strtol_l.isra.0+0x60>
 8012fa4:	782a      	ldrb	r2, [r5, #0]
 8012fa6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012faa:	2a58      	cmp	r2, #88	@ 0x58
 8012fac:	d108      	bne.n	8012fc0 <_strtol_l.isra.0+0x60>
 8012fae:	786c      	ldrb	r4, [r5, #1]
 8012fb0:	3502      	adds	r5, #2
 8012fb2:	2310      	movs	r3, #16
 8012fb4:	e00a      	b.n	8012fcc <_strtol_l.isra.0+0x6c>
 8012fb6:	2c2b      	cmp	r4, #43	@ 0x2b
 8012fb8:	bf04      	itt	eq
 8012fba:	782c      	ldrbeq	r4, [r5, #0]
 8012fbc:	1c95      	addeq	r5, r2, #2
 8012fbe:	e7ec      	b.n	8012f9a <_strtol_l.isra.0+0x3a>
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d1f6      	bne.n	8012fb2 <_strtol_l.isra.0+0x52>
 8012fc4:	2c30      	cmp	r4, #48	@ 0x30
 8012fc6:	bf14      	ite	ne
 8012fc8:	230a      	movne	r3, #10
 8012fca:	2308      	moveq	r3, #8
 8012fcc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012fd0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	fbbc f9f3 	udiv	r9, ip, r3
 8012fda:	4610      	mov	r0, r2
 8012fdc:	fb03 ca19 	mls	sl, r3, r9, ip
 8012fe0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012fe4:	2f09      	cmp	r7, #9
 8012fe6:	d80f      	bhi.n	8013008 <_strtol_l.isra.0+0xa8>
 8012fe8:	463c      	mov	r4, r7
 8012fea:	42a3      	cmp	r3, r4
 8012fec:	dd1b      	ble.n	8013026 <_strtol_l.isra.0+0xc6>
 8012fee:	1c57      	adds	r7, r2, #1
 8012ff0:	d007      	beq.n	8013002 <_strtol_l.isra.0+0xa2>
 8012ff2:	4581      	cmp	r9, r0
 8012ff4:	d314      	bcc.n	8013020 <_strtol_l.isra.0+0xc0>
 8012ff6:	d101      	bne.n	8012ffc <_strtol_l.isra.0+0x9c>
 8012ff8:	45a2      	cmp	sl, r4
 8012ffa:	db11      	blt.n	8013020 <_strtol_l.isra.0+0xc0>
 8012ffc:	fb00 4003 	mla	r0, r0, r3, r4
 8013000:	2201      	movs	r2, #1
 8013002:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013006:	e7eb      	b.n	8012fe0 <_strtol_l.isra.0+0x80>
 8013008:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801300c:	2f19      	cmp	r7, #25
 801300e:	d801      	bhi.n	8013014 <_strtol_l.isra.0+0xb4>
 8013010:	3c37      	subs	r4, #55	@ 0x37
 8013012:	e7ea      	b.n	8012fea <_strtol_l.isra.0+0x8a>
 8013014:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013018:	2f19      	cmp	r7, #25
 801301a:	d804      	bhi.n	8013026 <_strtol_l.isra.0+0xc6>
 801301c:	3c57      	subs	r4, #87	@ 0x57
 801301e:	e7e4      	b.n	8012fea <_strtol_l.isra.0+0x8a>
 8013020:	f04f 32ff 	mov.w	r2, #4294967295
 8013024:	e7ed      	b.n	8013002 <_strtol_l.isra.0+0xa2>
 8013026:	1c53      	adds	r3, r2, #1
 8013028:	d108      	bne.n	801303c <_strtol_l.isra.0+0xdc>
 801302a:	2322      	movs	r3, #34	@ 0x22
 801302c:	f8ce 3000 	str.w	r3, [lr]
 8013030:	4660      	mov	r0, ip
 8013032:	f1b8 0f00 	cmp.w	r8, #0
 8013036:	d0a0      	beq.n	8012f7a <_strtol_l.isra.0+0x1a>
 8013038:	1e69      	subs	r1, r5, #1
 801303a:	e006      	b.n	801304a <_strtol_l.isra.0+0xea>
 801303c:	b106      	cbz	r6, 8013040 <_strtol_l.isra.0+0xe0>
 801303e:	4240      	negs	r0, r0
 8013040:	f1b8 0f00 	cmp.w	r8, #0
 8013044:	d099      	beq.n	8012f7a <_strtol_l.isra.0+0x1a>
 8013046:	2a00      	cmp	r2, #0
 8013048:	d1f6      	bne.n	8013038 <_strtol_l.isra.0+0xd8>
 801304a:	f8c8 1000 	str.w	r1, [r8]
 801304e:	e794      	b.n	8012f7a <_strtol_l.isra.0+0x1a>
 8013050:	08014827 	.word	0x08014827

08013054 <_strtol_r>:
 8013054:	f7ff bf84 	b.w	8012f60 <_strtol_l.isra.0>

08013058 <strtol>:
 8013058:	4613      	mov	r3, r2
 801305a:	460a      	mov	r2, r1
 801305c:	4601      	mov	r1, r0
 801305e:	4802      	ldr	r0, [pc, #8]	@ (8013068 <strtol+0x10>)
 8013060:	6800      	ldr	r0, [r0, #0]
 8013062:	f7ff bf7d 	b.w	8012f60 <_strtol_l.isra.0>
 8013066:	bf00      	nop
 8013068:	2000017c 	.word	0x2000017c

0801306c <siprintf>:
 801306c:	b40e      	push	{r1, r2, r3}
 801306e:	b510      	push	{r4, lr}
 8013070:	b09d      	sub	sp, #116	@ 0x74
 8013072:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013074:	9002      	str	r0, [sp, #8]
 8013076:	9006      	str	r0, [sp, #24]
 8013078:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801307c:	480a      	ldr	r0, [pc, #40]	@ (80130a8 <siprintf+0x3c>)
 801307e:	9107      	str	r1, [sp, #28]
 8013080:	9104      	str	r1, [sp, #16]
 8013082:	490a      	ldr	r1, [pc, #40]	@ (80130ac <siprintf+0x40>)
 8013084:	f853 2b04 	ldr.w	r2, [r3], #4
 8013088:	9105      	str	r1, [sp, #20]
 801308a:	2400      	movs	r4, #0
 801308c:	a902      	add	r1, sp, #8
 801308e:	6800      	ldr	r0, [r0, #0]
 8013090:	9301      	str	r3, [sp, #4]
 8013092:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013094:	f000 fa30 	bl	80134f8 <_svfiprintf_r>
 8013098:	9b02      	ldr	r3, [sp, #8]
 801309a:	701c      	strb	r4, [r3, #0]
 801309c:	b01d      	add	sp, #116	@ 0x74
 801309e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130a2:	b003      	add	sp, #12
 80130a4:	4770      	bx	lr
 80130a6:	bf00      	nop
 80130a8:	2000017c 	.word	0x2000017c
 80130ac:	ffff0208 	.word	0xffff0208

080130b0 <siscanf>:
 80130b0:	b40e      	push	{r1, r2, r3}
 80130b2:	b570      	push	{r4, r5, r6, lr}
 80130b4:	b09d      	sub	sp, #116	@ 0x74
 80130b6:	ac21      	add	r4, sp, #132	@ 0x84
 80130b8:	2500      	movs	r5, #0
 80130ba:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80130be:	f854 6b04 	ldr.w	r6, [r4], #4
 80130c2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80130c6:	951b      	str	r5, [sp, #108]	@ 0x6c
 80130c8:	9002      	str	r0, [sp, #8]
 80130ca:	9006      	str	r0, [sp, #24]
 80130cc:	f7ed f88a 	bl	80001e4 <strlen>
 80130d0:	4b0b      	ldr	r3, [pc, #44]	@ (8013100 <siscanf+0x50>)
 80130d2:	9003      	str	r0, [sp, #12]
 80130d4:	9007      	str	r0, [sp, #28]
 80130d6:	480b      	ldr	r0, [pc, #44]	@ (8013104 <siscanf+0x54>)
 80130d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80130da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80130de:	f8ad 3016 	strh.w	r3, [sp, #22]
 80130e2:	4632      	mov	r2, r6
 80130e4:	4623      	mov	r3, r4
 80130e6:	a902      	add	r1, sp, #8
 80130e8:	6800      	ldr	r0, [r0, #0]
 80130ea:	950f      	str	r5, [sp, #60]	@ 0x3c
 80130ec:	9514      	str	r5, [sp, #80]	@ 0x50
 80130ee:	9401      	str	r4, [sp, #4]
 80130f0:	f000 fb58 	bl	80137a4 <__ssvfiscanf_r>
 80130f4:	b01d      	add	sp, #116	@ 0x74
 80130f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130fa:	b003      	add	sp, #12
 80130fc:	4770      	bx	lr
 80130fe:	bf00      	nop
 8013100:	08013109 	.word	0x08013109
 8013104:	2000017c 	.word	0x2000017c

08013108 <__seofread>:
 8013108:	2000      	movs	r0, #0
 801310a:	4770      	bx	lr

0801310c <memcmp>:
 801310c:	b510      	push	{r4, lr}
 801310e:	3901      	subs	r1, #1
 8013110:	4402      	add	r2, r0
 8013112:	4290      	cmp	r0, r2
 8013114:	d101      	bne.n	801311a <memcmp+0xe>
 8013116:	2000      	movs	r0, #0
 8013118:	e005      	b.n	8013126 <memcmp+0x1a>
 801311a:	7803      	ldrb	r3, [r0, #0]
 801311c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013120:	42a3      	cmp	r3, r4
 8013122:	d001      	beq.n	8013128 <memcmp+0x1c>
 8013124:	1b18      	subs	r0, r3, r4
 8013126:	bd10      	pop	{r4, pc}
 8013128:	3001      	adds	r0, #1
 801312a:	e7f2      	b.n	8013112 <memcmp+0x6>

0801312c <memset>:
 801312c:	4402      	add	r2, r0
 801312e:	4603      	mov	r3, r0
 8013130:	4293      	cmp	r3, r2
 8013132:	d100      	bne.n	8013136 <memset+0xa>
 8013134:	4770      	bx	lr
 8013136:	f803 1b01 	strb.w	r1, [r3], #1
 801313a:	e7f9      	b.n	8013130 <memset+0x4>

0801313c <strchr>:
 801313c:	b2c9      	uxtb	r1, r1
 801313e:	4603      	mov	r3, r0
 8013140:	4618      	mov	r0, r3
 8013142:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013146:	b112      	cbz	r2, 801314e <strchr+0x12>
 8013148:	428a      	cmp	r2, r1
 801314a:	d1f9      	bne.n	8013140 <strchr+0x4>
 801314c:	4770      	bx	lr
 801314e:	2900      	cmp	r1, #0
 8013150:	bf18      	it	ne
 8013152:	2000      	movne	r0, #0
 8013154:	4770      	bx	lr

08013156 <strncmp>:
 8013156:	b510      	push	{r4, lr}
 8013158:	b16a      	cbz	r2, 8013176 <strncmp+0x20>
 801315a:	3901      	subs	r1, #1
 801315c:	1884      	adds	r4, r0, r2
 801315e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013162:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013166:	429a      	cmp	r2, r3
 8013168:	d103      	bne.n	8013172 <strncmp+0x1c>
 801316a:	42a0      	cmp	r0, r4
 801316c:	d001      	beq.n	8013172 <strncmp+0x1c>
 801316e:	2a00      	cmp	r2, #0
 8013170:	d1f5      	bne.n	801315e <strncmp+0x8>
 8013172:	1ad0      	subs	r0, r2, r3
 8013174:	bd10      	pop	{r4, pc}
 8013176:	4610      	mov	r0, r2
 8013178:	e7fc      	b.n	8013174 <strncmp+0x1e>

0801317a <strncpy>:
 801317a:	b510      	push	{r4, lr}
 801317c:	3901      	subs	r1, #1
 801317e:	4603      	mov	r3, r0
 8013180:	b132      	cbz	r2, 8013190 <strncpy+0x16>
 8013182:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013186:	f803 4b01 	strb.w	r4, [r3], #1
 801318a:	3a01      	subs	r2, #1
 801318c:	2c00      	cmp	r4, #0
 801318e:	d1f7      	bne.n	8013180 <strncpy+0x6>
 8013190:	441a      	add	r2, r3
 8013192:	2100      	movs	r1, #0
 8013194:	4293      	cmp	r3, r2
 8013196:	d100      	bne.n	801319a <strncpy+0x20>
 8013198:	bd10      	pop	{r4, pc}
 801319a:	f803 1b01 	strb.w	r1, [r3], #1
 801319e:	e7f9      	b.n	8013194 <strncpy+0x1a>

080131a0 <strstr>:
 80131a0:	780a      	ldrb	r2, [r1, #0]
 80131a2:	b570      	push	{r4, r5, r6, lr}
 80131a4:	b96a      	cbnz	r2, 80131c2 <strstr+0x22>
 80131a6:	bd70      	pop	{r4, r5, r6, pc}
 80131a8:	429a      	cmp	r2, r3
 80131aa:	d109      	bne.n	80131c0 <strstr+0x20>
 80131ac:	460c      	mov	r4, r1
 80131ae:	4605      	mov	r5, r0
 80131b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d0f6      	beq.n	80131a6 <strstr+0x6>
 80131b8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80131bc:	429e      	cmp	r6, r3
 80131be:	d0f7      	beq.n	80131b0 <strstr+0x10>
 80131c0:	3001      	adds	r0, #1
 80131c2:	7803      	ldrb	r3, [r0, #0]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d1ef      	bne.n	80131a8 <strstr+0x8>
 80131c8:	4618      	mov	r0, r3
 80131ca:	e7ec      	b.n	80131a6 <strstr+0x6>

080131cc <__errno>:
 80131cc:	4b01      	ldr	r3, [pc, #4]	@ (80131d4 <__errno+0x8>)
 80131ce:	6818      	ldr	r0, [r3, #0]
 80131d0:	4770      	bx	lr
 80131d2:	bf00      	nop
 80131d4:	2000017c 	.word	0x2000017c

080131d8 <__libc_init_array>:
 80131d8:	b570      	push	{r4, r5, r6, lr}
 80131da:	4d0d      	ldr	r5, [pc, #52]	@ (8013210 <__libc_init_array+0x38>)
 80131dc:	4c0d      	ldr	r4, [pc, #52]	@ (8013214 <__libc_init_array+0x3c>)
 80131de:	1b64      	subs	r4, r4, r5
 80131e0:	10a4      	asrs	r4, r4, #2
 80131e2:	2600      	movs	r6, #0
 80131e4:	42a6      	cmp	r6, r4
 80131e6:	d109      	bne.n	80131fc <__libc_init_array+0x24>
 80131e8:	4d0b      	ldr	r5, [pc, #44]	@ (8013218 <__libc_init_array+0x40>)
 80131ea:	4c0c      	ldr	r4, [pc, #48]	@ (801321c <__libc_init_array+0x44>)
 80131ec:	f001 f86e 	bl	80142cc <_init>
 80131f0:	1b64      	subs	r4, r4, r5
 80131f2:	10a4      	asrs	r4, r4, #2
 80131f4:	2600      	movs	r6, #0
 80131f6:	42a6      	cmp	r6, r4
 80131f8:	d105      	bne.n	8013206 <__libc_init_array+0x2e>
 80131fa:	bd70      	pop	{r4, r5, r6, pc}
 80131fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8013200:	4798      	blx	r3
 8013202:	3601      	adds	r6, #1
 8013204:	e7ee      	b.n	80131e4 <__libc_init_array+0xc>
 8013206:	f855 3b04 	ldr.w	r3, [r5], #4
 801320a:	4798      	blx	r3
 801320c:	3601      	adds	r6, #1
 801320e:	e7f2      	b.n	80131f6 <__libc_init_array+0x1e>
 8013210:	08014980 	.word	0x08014980
 8013214:	08014980 	.word	0x08014980
 8013218:	08014980 	.word	0x08014980
 801321c:	08014984 	.word	0x08014984

08013220 <__retarget_lock_acquire_recursive>:
 8013220:	4770      	bx	lr

08013222 <__retarget_lock_release_recursive>:
 8013222:	4770      	bx	lr

08013224 <strcpy>:
 8013224:	4603      	mov	r3, r0
 8013226:	f811 2b01 	ldrb.w	r2, [r1], #1
 801322a:	f803 2b01 	strb.w	r2, [r3], #1
 801322e:	2a00      	cmp	r2, #0
 8013230:	d1f9      	bne.n	8013226 <strcpy+0x2>
 8013232:	4770      	bx	lr

08013234 <memcpy>:
 8013234:	440a      	add	r2, r1
 8013236:	4291      	cmp	r1, r2
 8013238:	f100 33ff 	add.w	r3, r0, #4294967295
 801323c:	d100      	bne.n	8013240 <memcpy+0xc>
 801323e:	4770      	bx	lr
 8013240:	b510      	push	{r4, lr}
 8013242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013246:	f803 4f01 	strb.w	r4, [r3, #1]!
 801324a:	4291      	cmp	r1, r2
 801324c:	d1f9      	bne.n	8013242 <memcpy+0xe>
 801324e:	bd10      	pop	{r4, pc}

08013250 <_free_r>:
 8013250:	b538      	push	{r3, r4, r5, lr}
 8013252:	4605      	mov	r5, r0
 8013254:	2900      	cmp	r1, #0
 8013256:	d041      	beq.n	80132dc <_free_r+0x8c>
 8013258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801325c:	1f0c      	subs	r4, r1, #4
 801325e:	2b00      	cmp	r3, #0
 8013260:	bfb8      	it	lt
 8013262:	18e4      	addlt	r4, r4, r3
 8013264:	f000 f8e0 	bl	8013428 <__malloc_lock>
 8013268:	4a1d      	ldr	r2, [pc, #116]	@ (80132e0 <_free_r+0x90>)
 801326a:	6813      	ldr	r3, [r2, #0]
 801326c:	b933      	cbnz	r3, 801327c <_free_r+0x2c>
 801326e:	6063      	str	r3, [r4, #4]
 8013270:	6014      	str	r4, [r2, #0]
 8013272:	4628      	mov	r0, r5
 8013274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013278:	f000 b8dc 	b.w	8013434 <__malloc_unlock>
 801327c:	42a3      	cmp	r3, r4
 801327e:	d908      	bls.n	8013292 <_free_r+0x42>
 8013280:	6820      	ldr	r0, [r4, #0]
 8013282:	1821      	adds	r1, r4, r0
 8013284:	428b      	cmp	r3, r1
 8013286:	bf01      	itttt	eq
 8013288:	6819      	ldreq	r1, [r3, #0]
 801328a:	685b      	ldreq	r3, [r3, #4]
 801328c:	1809      	addeq	r1, r1, r0
 801328e:	6021      	streq	r1, [r4, #0]
 8013290:	e7ed      	b.n	801326e <_free_r+0x1e>
 8013292:	461a      	mov	r2, r3
 8013294:	685b      	ldr	r3, [r3, #4]
 8013296:	b10b      	cbz	r3, 801329c <_free_r+0x4c>
 8013298:	42a3      	cmp	r3, r4
 801329a:	d9fa      	bls.n	8013292 <_free_r+0x42>
 801329c:	6811      	ldr	r1, [r2, #0]
 801329e:	1850      	adds	r0, r2, r1
 80132a0:	42a0      	cmp	r0, r4
 80132a2:	d10b      	bne.n	80132bc <_free_r+0x6c>
 80132a4:	6820      	ldr	r0, [r4, #0]
 80132a6:	4401      	add	r1, r0
 80132a8:	1850      	adds	r0, r2, r1
 80132aa:	4283      	cmp	r3, r0
 80132ac:	6011      	str	r1, [r2, #0]
 80132ae:	d1e0      	bne.n	8013272 <_free_r+0x22>
 80132b0:	6818      	ldr	r0, [r3, #0]
 80132b2:	685b      	ldr	r3, [r3, #4]
 80132b4:	6053      	str	r3, [r2, #4]
 80132b6:	4408      	add	r0, r1
 80132b8:	6010      	str	r0, [r2, #0]
 80132ba:	e7da      	b.n	8013272 <_free_r+0x22>
 80132bc:	d902      	bls.n	80132c4 <_free_r+0x74>
 80132be:	230c      	movs	r3, #12
 80132c0:	602b      	str	r3, [r5, #0]
 80132c2:	e7d6      	b.n	8013272 <_free_r+0x22>
 80132c4:	6820      	ldr	r0, [r4, #0]
 80132c6:	1821      	adds	r1, r4, r0
 80132c8:	428b      	cmp	r3, r1
 80132ca:	bf04      	itt	eq
 80132cc:	6819      	ldreq	r1, [r3, #0]
 80132ce:	685b      	ldreq	r3, [r3, #4]
 80132d0:	6063      	str	r3, [r4, #4]
 80132d2:	bf04      	itt	eq
 80132d4:	1809      	addeq	r1, r1, r0
 80132d6:	6021      	streq	r1, [r4, #0]
 80132d8:	6054      	str	r4, [r2, #4]
 80132da:	e7ca      	b.n	8013272 <_free_r+0x22>
 80132dc:	bd38      	pop	{r3, r4, r5, pc}
 80132de:	bf00      	nop
 80132e0:	20005a40 	.word	0x20005a40

080132e4 <sbrk_aligned>:
 80132e4:	b570      	push	{r4, r5, r6, lr}
 80132e6:	4e0f      	ldr	r6, [pc, #60]	@ (8013324 <sbrk_aligned+0x40>)
 80132e8:	460c      	mov	r4, r1
 80132ea:	6831      	ldr	r1, [r6, #0]
 80132ec:	4605      	mov	r5, r0
 80132ee:	b911      	cbnz	r1, 80132f6 <sbrk_aligned+0x12>
 80132f0:	f000 ff36 	bl	8014160 <_sbrk_r>
 80132f4:	6030      	str	r0, [r6, #0]
 80132f6:	4621      	mov	r1, r4
 80132f8:	4628      	mov	r0, r5
 80132fa:	f000 ff31 	bl	8014160 <_sbrk_r>
 80132fe:	1c43      	adds	r3, r0, #1
 8013300:	d103      	bne.n	801330a <sbrk_aligned+0x26>
 8013302:	f04f 34ff 	mov.w	r4, #4294967295
 8013306:	4620      	mov	r0, r4
 8013308:	bd70      	pop	{r4, r5, r6, pc}
 801330a:	1cc4      	adds	r4, r0, #3
 801330c:	f024 0403 	bic.w	r4, r4, #3
 8013310:	42a0      	cmp	r0, r4
 8013312:	d0f8      	beq.n	8013306 <sbrk_aligned+0x22>
 8013314:	1a21      	subs	r1, r4, r0
 8013316:	4628      	mov	r0, r5
 8013318:	f000 ff22 	bl	8014160 <_sbrk_r>
 801331c:	3001      	adds	r0, #1
 801331e:	d1f2      	bne.n	8013306 <sbrk_aligned+0x22>
 8013320:	e7ef      	b.n	8013302 <sbrk_aligned+0x1e>
 8013322:	bf00      	nop
 8013324:	20005a3c 	.word	0x20005a3c

08013328 <_malloc_r>:
 8013328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801332c:	1ccd      	adds	r5, r1, #3
 801332e:	f025 0503 	bic.w	r5, r5, #3
 8013332:	3508      	adds	r5, #8
 8013334:	2d0c      	cmp	r5, #12
 8013336:	bf38      	it	cc
 8013338:	250c      	movcc	r5, #12
 801333a:	2d00      	cmp	r5, #0
 801333c:	4606      	mov	r6, r0
 801333e:	db01      	blt.n	8013344 <_malloc_r+0x1c>
 8013340:	42a9      	cmp	r1, r5
 8013342:	d904      	bls.n	801334e <_malloc_r+0x26>
 8013344:	230c      	movs	r3, #12
 8013346:	6033      	str	r3, [r6, #0]
 8013348:	2000      	movs	r0, #0
 801334a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801334e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013424 <_malloc_r+0xfc>
 8013352:	f000 f869 	bl	8013428 <__malloc_lock>
 8013356:	f8d8 3000 	ldr.w	r3, [r8]
 801335a:	461c      	mov	r4, r3
 801335c:	bb44      	cbnz	r4, 80133b0 <_malloc_r+0x88>
 801335e:	4629      	mov	r1, r5
 8013360:	4630      	mov	r0, r6
 8013362:	f7ff ffbf 	bl	80132e4 <sbrk_aligned>
 8013366:	1c43      	adds	r3, r0, #1
 8013368:	4604      	mov	r4, r0
 801336a:	d158      	bne.n	801341e <_malloc_r+0xf6>
 801336c:	f8d8 4000 	ldr.w	r4, [r8]
 8013370:	4627      	mov	r7, r4
 8013372:	2f00      	cmp	r7, #0
 8013374:	d143      	bne.n	80133fe <_malloc_r+0xd6>
 8013376:	2c00      	cmp	r4, #0
 8013378:	d04b      	beq.n	8013412 <_malloc_r+0xea>
 801337a:	6823      	ldr	r3, [r4, #0]
 801337c:	4639      	mov	r1, r7
 801337e:	4630      	mov	r0, r6
 8013380:	eb04 0903 	add.w	r9, r4, r3
 8013384:	f000 feec 	bl	8014160 <_sbrk_r>
 8013388:	4581      	cmp	r9, r0
 801338a:	d142      	bne.n	8013412 <_malloc_r+0xea>
 801338c:	6821      	ldr	r1, [r4, #0]
 801338e:	1a6d      	subs	r5, r5, r1
 8013390:	4629      	mov	r1, r5
 8013392:	4630      	mov	r0, r6
 8013394:	f7ff ffa6 	bl	80132e4 <sbrk_aligned>
 8013398:	3001      	adds	r0, #1
 801339a:	d03a      	beq.n	8013412 <_malloc_r+0xea>
 801339c:	6823      	ldr	r3, [r4, #0]
 801339e:	442b      	add	r3, r5
 80133a0:	6023      	str	r3, [r4, #0]
 80133a2:	f8d8 3000 	ldr.w	r3, [r8]
 80133a6:	685a      	ldr	r2, [r3, #4]
 80133a8:	bb62      	cbnz	r2, 8013404 <_malloc_r+0xdc>
 80133aa:	f8c8 7000 	str.w	r7, [r8]
 80133ae:	e00f      	b.n	80133d0 <_malloc_r+0xa8>
 80133b0:	6822      	ldr	r2, [r4, #0]
 80133b2:	1b52      	subs	r2, r2, r5
 80133b4:	d420      	bmi.n	80133f8 <_malloc_r+0xd0>
 80133b6:	2a0b      	cmp	r2, #11
 80133b8:	d917      	bls.n	80133ea <_malloc_r+0xc2>
 80133ba:	1961      	adds	r1, r4, r5
 80133bc:	42a3      	cmp	r3, r4
 80133be:	6025      	str	r5, [r4, #0]
 80133c0:	bf18      	it	ne
 80133c2:	6059      	strne	r1, [r3, #4]
 80133c4:	6863      	ldr	r3, [r4, #4]
 80133c6:	bf08      	it	eq
 80133c8:	f8c8 1000 	streq.w	r1, [r8]
 80133cc:	5162      	str	r2, [r4, r5]
 80133ce:	604b      	str	r3, [r1, #4]
 80133d0:	4630      	mov	r0, r6
 80133d2:	f000 f82f 	bl	8013434 <__malloc_unlock>
 80133d6:	f104 000b 	add.w	r0, r4, #11
 80133da:	1d23      	adds	r3, r4, #4
 80133dc:	f020 0007 	bic.w	r0, r0, #7
 80133e0:	1ac2      	subs	r2, r0, r3
 80133e2:	bf1c      	itt	ne
 80133e4:	1a1b      	subne	r3, r3, r0
 80133e6:	50a3      	strne	r3, [r4, r2]
 80133e8:	e7af      	b.n	801334a <_malloc_r+0x22>
 80133ea:	6862      	ldr	r2, [r4, #4]
 80133ec:	42a3      	cmp	r3, r4
 80133ee:	bf0c      	ite	eq
 80133f0:	f8c8 2000 	streq.w	r2, [r8]
 80133f4:	605a      	strne	r2, [r3, #4]
 80133f6:	e7eb      	b.n	80133d0 <_malloc_r+0xa8>
 80133f8:	4623      	mov	r3, r4
 80133fa:	6864      	ldr	r4, [r4, #4]
 80133fc:	e7ae      	b.n	801335c <_malloc_r+0x34>
 80133fe:	463c      	mov	r4, r7
 8013400:	687f      	ldr	r7, [r7, #4]
 8013402:	e7b6      	b.n	8013372 <_malloc_r+0x4a>
 8013404:	461a      	mov	r2, r3
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	42a3      	cmp	r3, r4
 801340a:	d1fb      	bne.n	8013404 <_malloc_r+0xdc>
 801340c:	2300      	movs	r3, #0
 801340e:	6053      	str	r3, [r2, #4]
 8013410:	e7de      	b.n	80133d0 <_malloc_r+0xa8>
 8013412:	230c      	movs	r3, #12
 8013414:	6033      	str	r3, [r6, #0]
 8013416:	4630      	mov	r0, r6
 8013418:	f000 f80c 	bl	8013434 <__malloc_unlock>
 801341c:	e794      	b.n	8013348 <_malloc_r+0x20>
 801341e:	6005      	str	r5, [r0, #0]
 8013420:	e7d6      	b.n	80133d0 <_malloc_r+0xa8>
 8013422:	bf00      	nop
 8013424:	20005a40 	.word	0x20005a40

08013428 <__malloc_lock>:
 8013428:	4801      	ldr	r0, [pc, #4]	@ (8013430 <__malloc_lock+0x8>)
 801342a:	f7ff bef9 	b.w	8013220 <__retarget_lock_acquire_recursive>
 801342e:	bf00      	nop
 8013430:	20005a38 	.word	0x20005a38

08013434 <__malloc_unlock>:
 8013434:	4801      	ldr	r0, [pc, #4]	@ (801343c <__malloc_unlock+0x8>)
 8013436:	f7ff bef4 	b.w	8013222 <__retarget_lock_release_recursive>
 801343a:	bf00      	nop
 801343c:	20005a38 	.word	0x20005a38

08013440 <__ssputs_r>:
 8013440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013444:	688e      	ldr	r6, [r1, #8]
 8013446:	461f      	mov	r7, r3
 8013448:	42be      	cmp	r6, r7
 801344a:	680b      	ldr	r3, [r1, #0]
 801344c:	4682      	mov	sl, r0
 801344e:	460c      	mov	r4, r1
 8013450:	4690      	mov	r8, r2
 8013452:	d82d      	bhi.n	80134b0 <__ssputs_r+0x70>
 8013454:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013458:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801345c:	d026      	beq.n	80134ac <__ssputs_r+0x6c>
 801345e:	6965      	ldr	r5, [r4, #20]
 8013460:	6909      	ldr	r1, [r1, #16]
 8013462:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013466:	eba3 0901 	sub.w	r9, r3, r1
 801346a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801346e:	1c7b      	adds	r3, r7, #1
 8013470:	444b      	add	r3, r9
 8013472:	106d      	asrs	r5, r5, #1
 8013474:	429d      	cmp	r5, r3
 8013476:	bf38      	it	cc
 8013478:	461d      	movcc	r5, r3
 801347a:	0553      	lsls	r3, r2, #21
 801347c:	d527      	bpl.n	80134ce <__ssputs_r+0x8e>
 801347e:	4629      	mov	r1, r5
 8013480:	f7ff ff52 	bl	8013328 <_malloc_r>
 8013484:	4606      	mov	r6, r0
 8013486:	b360      	cbz	r0, 80134e2 <__ssputs_r+0xa2>
 8013488:	6921      	ldr	r1, [r4, #16]
 801348a:	464a      	mov	r2, r9
 801348c:	f7ff fed2 	bl	8013234 <memcpy>
 8013490:	89a3      	ldrh	r3, [r4, #12]
 8013492:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801349a:	81a3      	strh	r3, [r4, #12]
 801349c:	6126      	str	r6, [r4, #16]
 801349e:	6165      	str	r5, [r4, #20]
 80134a0:	444e      	add	r6, r9
 80134a2:	eba5 0509 	sub.w	r5, r5, r9
 80134a6:	6026      	str	r6, [r4, #0]
 80134a8:	60a5      	str	r5, [r4, #8]
 80134aa:	463e      	mov	r6, r7
 80134ac:	42be      	cmp	r6, r7
 80134ae:	d900      	bls.n	80134b2 <__ssputs_r+0x72>
 80134b0:	463e      	mov	r6, r7
 80134b2:	6820      	ldr	r0, [r4, #0]
 80134b4:	4632      	mov	r2, r6
 80134b6:	4641      	mov	r1, r8
 80134b8:	f000 fe37 	bl	801412a <memmove>
 80134bc:	68a3      	ldr	r3, [r4, #8]
 80134be:	1b9b      	subs	r3, r3, r6
 80134c0:	60a3      	str	r3, [r4, #8]
 80134c2:	6823      	ldr	r3, [r4, #0]
 80134c4:	4433      	add	r3, r6
 80134c6:	6023      	str	r3, [r4, #0]
 80134c8:	2000      	movs	r0, #0
 80134ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134ce:	462a      	mov	r2, r5
 80134d0:	f000 fe56 	bl	8014180 <_realloc_r>
 80134d4:	4606      	mov	r6, r0
 80134d6:	2800      	cmp	r0, #0
 80134d8:	d1e0      	bne.n	801349c <__ssputs_r+0x5c>
 80134da:	6921      	ldr	r1, [r4, #16]
 80134dc:	4650      	mov	r0, sl
 80134de:	f7ff feb7 	bl	8013250 <_free_r>
 80134e2:	230c      	movs	r3, #12
 80134e4:	f8ca 3000 	str.w	r3, [sl]
 80134e8:	89a3      	ldrh	r3, [r4, #12]
 80134ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134ee:	81a3      	strh	r3, [r4, #12]
 80134f0:	f04f 30ff 	mov.w	r0, #4294967295
 80134f4:	e7e9      	b.n	80134ca <__ssputs_r+0x8a>
	...

080134f8 <_svfiprintf_r>:
 80134f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134fc:	4698      	mov	r8, r3
 80134fe:	898b      	ldrh	r3, [r1, #12]
 8013500:	061b      	lsls	r3, r3, #24
 8013502:	b09d      	sub	sp, #116	@ 0x74
 8013504:	4607      	mov	r7, r0
 8013506:	460d      	mov	r5, r1
 8013508:	4614      	mov	r4, r2
 801350a:	d510      	bpl.n	801352e <_svfiprintf_r+0x36>
 801350c:	690b      	ldr	r3, [r1, #16]
 801350e:	b973      	cbnz	r3, 801352e <_svfiprintf_r+0x36>
 8013510:	2140      	movs	r1, #64	@ 0x40
 8013512:	f7ff ff09 	bl	8013328 <_malloc_r>
 8013516:	6028      	str	r0, [r5, #0]
 8013518:	6128      	str	r0, [r5, #16]
 801351a:	b930      	cbnz	r0, 801352a <_svfiprintf_r+0x32>
 801351c:	230c      	movs	r3, #12
 801351e:	603b      	str	r3, [r7, #0]
 8013520:	f04f 30ff 	mov.w	r0, #4294967295
 8013524:	b01d      	add	sp, #116	@ 0x74
 8013526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801352a:	2340      	movs	r3, #64	@ 0x40
 801352c:	616b      	str	r3, [r5, #20]
 801352e:	2300      	movs	r3, #0
 8013530:	9309      	str	r3, [sp, #36]	@ 0x24
 8013532:	2320      	movs	r3, #32
 8013534:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013538:	f8cd 800c 	str.w	r8, [sp, #12]
 801353c:	2330      	movs	r3, #48	@ 0x30
 801353e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80136dc <_svfiprintf_r+0x1e4>
 8013542:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013546:	f04f 0901 	mov.w	r9, #1
 801354a:	4623      	mov	r3, r4
 801354c:	469a      	mov	sl, r3
 801354e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013552:	b10a      	cbz	r2, 8013558 <_svfiprintf_r+0x60>
 8013554:	2a25      	cmp	r2, #37	@ 0x25
 8013556:	d1f9      	bne.n	801354c <_svfiprintf_r+0x54>
 8013558:	ebba 0b04 	subs.w	fp, sl, r4
 801355c:	d00b      	beq.n	8013576 <_svfiprintf_r+0x7e>
 801355e:	465b      	mov	r3, fp
 8013560:	4622      	mov	r2, r4
 8013562:	4629      	mov	r1, r5
 8013564:	4638      	mov	r0, r7
 8013566:	f7ff ff6b 	bl	8013440 <__ssputs_r>
 801356a:	3001      	adds	r0, #1
 801356c:	f000 80a7 	beq.w	80136be <_svfiprintf_r+0x1c6>
 8013570:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013572:	445a      	add	r2, fp
 8013574:	9209      	str	r2, [sp, #36]	@ 0x24
 8013576:	f89a 3000 	ldrb.w	r3, [sl]
 801357a:	2b00      	cmp	r3, #0
 801357c:	f000 809f 	beq.w	80136be <_svfiprintf_r+0x1c6>
 8013580:	2300      	movs	r3, #0
 8013582:	f04f 32ff 	mov.w	r2, #4294967295
 8013586:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801358a:	f10a 0a01 	add.w	sl, sl, #1
 801358e:	9304      	str	r3, [sp, #16]
 8013590:	9307      	str	r3, [sp, #28]
 8013592:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013596:	931a      	str	r3, [sp, #104]	@ 0x68
 8013598:	4654      	mov	r4, sl
 801359a:	2205      	movs	r2, #5
 801359c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135a0:	484e      	ldr	r0, [pc, #312]	@ (80136dc <_svfiprintf_r+0x1e4>)
 80135a2:	f7ec fe2d 	bl	8000200 <memchr>
 80135a6:	9a04      	ldr	r2, [sp, #16]
 80135a8:	b9d8      	cbnz	r0, 80135e2 <_svfiprintf_r+0xea>
 80135aa:	06d0      	lsls	r0, r2, #27
 80135ac:	bf44      	itt	mi
 80135ae:	2320      	movmi	r3, #32
 80135b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80135b4:	0711      	lsls	r1, r2, #28
 80135b6:	bf44      	itt	mi
 80135b8:	232b      	movmi	r3, #43	@ 0x2b
 80135ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80135be:	f89a 3000 	ldrb.w	r3, [sl]
 80135c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80135c4:	d015      	beq.n	80135f2 <_svfiprintf_r+0xfa>
 80135c6:	9a07      	ldr	r2, [sp, #28]
 80135c8:	4654      	mov	r4, sl
 80135ca:	2000      	movs	r0, #0
 80135cc:	f04f 0c0a 	mov.w	ip, #10
 80135d0:	4621      	mov	r1, r4
 80135d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80135d6:	3b30      	subs	r3, #48	@ 0x30
 80135d8:	2b09      	cmp	r3, #9
 80135da:	d94b      	bls.n	8013674 <_svfiprintf_r+0x17c>
 80135dc:	b1b0      	cbz	r0, 801360c <_svfiprintf_r+0x114>
 80135de:	9207      	str	r2, [sp, #28]
 80135e0:	e014      	b.n	801360c <_svfiprintf_r+0x114>
 80135e2:	eba0 0308 	sub.w	r3, r0, r8
 80135e6:	fa09 f303 	lsl.w	r3, r9, r3
 80135ea:	4313      	orrs	r3, r2
 80135ec:	9304      	str	r3, [sp, #16]
 80135ee:	46a2      	mov	sl, r4
 80135f0:	e7d2      	b.n	8013598 <_svfiprintf_r+0xa0>
 80135f2:	9b03      	ldr	r3, [sp, #12]
 80135f4:	1d19      	adds	r1, r3, #4
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	9103      	str	r1, [sp, #12]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	bfbb      	ittet	lt
 80135fe:	425b      	neglt	r3, r3
 8013600:	f042 0202 	orrlt.w	r2, r2, #2
 8013604:	9307      	strge	r3, [sp, #28]
 8013606:	9307      	strlt	r3, [sp, #28]
 8013608:	bfb8      	it	lt
 801360a:	9204      	strlt	r2, [sp, #16]
 801360c:	7823      	ldrb	r3, [r4, #0]
 801360e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013610:	d10a      	bne.n	8013628 <_svfiprintf_r+0x130>
 8013612:	7863      	ldrb	r3, [r4, #1]
 8013614:	2b2a      	cmp	r3, #42	@ 0x2a
 8013616:	d132      	bne.n	801367e <_svfiprintf_r+0x186>
 8013618:	9b03      	ldr	r3, [sp, #12]
 801361a:	1d1a      	adds	r2, r3, #4
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	9203      	str	r2, [sp, #12]
 8013620:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013624:	3402      	adds	r4, #2
 8013626:	9305      	str	r3, [sp, #20]
 8013628:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80136ec <_svfiprintf_r+0x1f4>
 801362c:	7821      	ldrb	r1, [r4, #0]
 801362e:	2203      	movs	r2, #3
 8013630:	4650      	mov	r0, sl
 8013632:	f7ec fde5 	bl	8000200 <memchr>
 8013636:	b138      	cbz	r0, 8013648 <_svfiprintf_r+0x150>
 8013638:	9b04      	ldr	r3, [sp, #16]
 801363a:	eba0 000a 	sub.w	r0, r0, sl
 801363e:	2240      	movs	r2, #64	@ 0x40
 8013640:	4082      	lsls	r2, r0
 8013642:	4313      	orrs	r3, r2
 8013644:	3401      	adds	r4, #1
 8013646:	9304      	str	r3, [sp, #16]
 8013648:	f814 1b01 	ldrb.w	r1, [r4], #1
 801364c:	4824      	ldr	r0, [pc, #144]	@ (80136e0 <_svfiprintf_r+0x1e8>)
 801364e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013652:	2206      	movs	r2, #6
 8013654:	f7ec fdd4 	bl	8000200 <memchr>
 8013658:	2800      	cmp	r0, #0
 801365a:	d036      	beq.n	80136ca <_svfiprintf_r+0x1d2>
 801365c:	4b21      	ldr	r3, [pc, #132]	@ (80136e4 <_svfiprintf_r+0x1ec>)
 801365e:	bb1b      	cbnz	r3, 80136a8 <_svfiprintf_r+0x1b0>
 8013660:	9b03      	ldr	r3, [sp, #12]
 8013662:	3307      	adds	r3, #7
 8013664:	f023 0307 	bic.w	r3, r3, #7
 8013668:	3308      	adds	r3, #8
 801366a:	9303      	str	r3, [sp, #12]
 801366c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801366e:	4433      	add	r3, r6
 8013670:	9309      	str	r3, [sp, #36]	@ 0x24
 8013672:	e76a      	b.n	801354a <_svfiprintf_r+0x52>
 8013674:	fb0c 3202 	mla	r2, ip, r2, r3
 8013678:	460c      	mov	r4, r1
 801367a:	2001      	movs	r0, #1
 801367c:	e7a8      	b.n	80135d0 <_svfiprintf_r+0xd8>
 801367e:	2300      	movs	r3, #0
 8013680:	3401      	adds	r4, #1
 8013682:	9305      	str	r3, [sp, #20]
 8013684:	4619      	mov	r1, r3
 8013686:	f04f 0c0a 	mov.w	ip, #10
 801368a:	4620      	mov	r0, r4
 801368c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013690:	3a30      	subs	r2, #48	@ 0x30
 8013692:	2a09      	cmp	r2, #9
 8013694:	d903      	bls.n	801369e <_svfiprintf_r+0x1a6>
 8013696:	2b00      	cmp	r3, #0
 8013698:	d0c6      	beq.n	8013628 <_svfiprintf_r+0x130>
 801369a:	9105      	str	r1, [sp, #20]
 801369c:	e7c4      	b.n	8013628 <_svfiprintf_r+0x130>
 801369e:	fb0c 2101 	mla	r1, ip, r1, r2
 80136a2:	4604      	mov	r4, r0
 80136a4:	2301      	movs	r3, #1
 80136a6:	e7f0      	b.n	801368a <_svfiprintf_r+0x192>
 80136a8:	ab03      	add	r3, sp, #12
 80136aa:	9300      	str	r3, [sp, #0]
 80136ac:	462a      	mov	r2, r5
 80136ae:	4b0e      	ldr	r3, [pc, #56]	@ (80136e8 <_svfiprintf_r+0x1f0>)
 80136b0:	a904      	add	r1, sp, #16
 80136b2:	4638      	mov	r0, r7
 80136b4:	f3af 8000 	nop.w
 80136b8:	1c42      	adds	r2, r0, #1
 80136ba:	4606      	mov	r6, r0
 80136bc:	d1d6      	bne.n	801366c <_svfiprintf_r+0x174>
 80136be:	89ab      	ldrh	r3, [r5, #12]
 80136c0:	065b      	lsls	r3, r3, #25
 80136c2:	f53f af2d 	bmi.w	8013520 <_svfiprintf_r+0x28>
 80136c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80136c8:	e72c      	b.n	8013524 <_svfiprintf_r+0x2c>
 80136ca:	ab03      	add	r3, sp, #12
 80136cc:	9300      	str	r3, [sp, #0]
 80136ce:	462a      	mov	r2, r5
 80136d0:	4b05      	ldr	r3, [pc, #20]	@ (80136e8 <_svfiprintf_r+0x1f0>)
 80136d2:	a904      	add	r1, sp, #16
 80136d4:	4638      	mov	r0, r7
 80136d6:	f000 fa49 	bl	8013b6c <_printf_i>
 80136da:	e7ed      	b.n	80136b8 <_svfiprintf_r+0x1c0>
 80136dc:	08014927 	.word	0x08014927
 80136e0:	08014931 	.word	0x08014931
 80136e4:	00000000 	.word	0x00000000
 80136e8:	08013441 	.word	0x08013441
 80136ec:	0801492d 	.word	0x0801492d

080136f0 <_sungetc_r>:
 80136f0:	b538      	push	{r3, r4, r5, lr}
 80136f2:	1c4b      	adds	r3, r1, #1
 80136f4:	4614      	mov	r4, r2
 80136f6:	d103      	bne.n	8013700 <_sungetc_r+0x10>
 80136f8:	f04f 35ff 	mov.w	r5, #4294967295
 80136fc:	4628      	mov	r0, r5
 80136fe:	bd38      	pop	{r3, r4, r5, pc}
 8013700:	8993      	ldrh	r3, [r2, #12]
 8013702:	f023 0320 	bic.w	r3, r3, #32
 8013706:	8193      	strh	r3, [r2, #12]
 8013708:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801370a:	6852      	ldr	r2, [r2, #4]
 801370c:	b2cd      	uxtb	r5, r1
 801370e:	b18b      	cbz	r3, 8013734 <_sungetc_r+0x44>
 8013710:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8013712:	4293      	cmp	r3, r2
 8013714:	dd08      	ble.n	8013728 <_sungetc_r+0x38>
 8013716:	6823      	ldr	r3, [r4, #0]
 8013718:	1e5a      	subs	r2, r3, #1
 801371a:	6022      	str	r2, [r4, #0]
 801371c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013720:	6863      	ldr	r3, [r4, #4]
 8013722:	3301      	adds	r3, #1
 8013724:	6063      	str	r3, [r4, #4]
 8013726:	e7e9      	b.n	80136fc <_sungetc_r+0xc>
 8013728:	4621      	mov	r1, r4
 801372a:	f000 fcc4 	bl	80140b6 <__submore>
 801372e:	2800      	cmp	r0, #0
 8013730:	d0f1      	beq.n	8013716 <_sungetc_r+0x26>
 8013732:	e7e1      	b.n	80136f8 <_sungetc_r+0x8>
 8013734:	6921      	ldr	r1, [r4, #16]
 8013736:	6823      	ldr	r3, [r4, #0]
 8013738:	b151      	cbz	r1, 8013750 <_sungetc_r+0x60>
 801373a:	4299      	cmp	r1, r3
 801373c:	d208      	bcs.n	8013750 <_sungetc_r+0x60>
 801373e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013742:	42a9      	cmp	r1, r5
 8013744:	d104      	bne.n	8013750 <_sungetc_r+0x60>
 8013746:	3b01      	subs	r3, #1
 8013748:	3201      	adds	r2, #1
 801374a:	6023      	str	r3, [r4, #0]
 801374c:	6062      	str	r2, [r4, #4]
 801374e:	e7d5      	b.n	80136fc <_sungetc_r+0xc>
 8013750:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8013754:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013758:	6363      	str	r3, [r4, #52]	@ 0x34
 801375a:	2303      	movs	r3, #3
 801375c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801375e:	4623      	mov	r3, r4
 8013760:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013764:	6023      	str	r3, [r4, #0]
 8013766:	2301      	movs	r3, #1
 8013768:	e7dc      	b.n	8013724 <_sungetc_r+0x34>

0801376a <__ssrefill_r>:
 801376a:	b510      	push	{r4, lr}
 801376c:	460c      	mov	r4, r1
 801376e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013770:	b169      	cbz	r1, 801378e <__ssrefill_r+0x24>
 8013772:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013776:	4299      	cmp	r1, r3
 8013778:	d001      	beq.n	801377e <__ssrefill_r+0x14>
 801377a:	f7ff fd69 	bl	8013250 <_free_r>
 801377e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013780:	6063      	str	r3, [r4, #4]
 8013782:	2000      	movs	r0, #0
 8013784:	6360      	str	r0, [r4, #52]	@ 0x34
 8013786:	b113      	cbz	r3, 801378e <__ssrefill_r+0x24>
 8013788:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801378a:	6023      	str	r3, [r4, #0]
 801378c:	bd10      	pop	{r4, pc}
 801378e:	6923      	ldr	r3, [r4, #16]
 8013790:	6023      	str	r3, [r4, #0]
 8013792:	2300      	movs	r3, #0
 8013794:	6063      	str	r3, [r4, #4]
 8013796:	89a3      	ldrh	r3, [r4, #12]
 8013798:	f043 0320 	orr.w	r3, r3, #32
 801379c:	81a3      	strh	r3, [r4, #12]
 801379e:	f04f 30ff 	mov.w	r0, #4294967295
 80137a2:	e7f3      	b.n	801378c <__ssrefill_r+0x22>

080137a4 <__ssvfiscanf_r>:
 80137a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137a8:	460c      	mov	r4, r1
 80137aa:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80137ae:	2100      	movs	r1, #0
 80137b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80137b4:	49a6      	ldr	r1, [pc, #664]	@ (8013a50 <__ssvfiscanf_r+0x2ac>)
 80137b6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80137b8:	f10d 0804 	add.w	r8, sp, #4
 80137bc:	49a5      	ldr	r1, [pc, #660]	@ (8013a54 <__ssvfiscanf_r+0x2b0>)
 80137be:	4fa6      	ldr	r7, [pc, #664]	@ (8013a58 <__ssvfiscanf_r+0x2b4>)
 80137c0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80137c4:	4606      	mov	r6, r0
 80137c6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80137c8:	9300      	str	r3, [sp, #0]
 80137ca:	f892 9000 	ldrb.w	r9, [r2]
 80137ce:	f1b9 0f00 	cmp.w	r9, #0
 80137d2:	f000 8158 	beq.w	8013a86 <__ssvfiscanf_r+0x2e2>
 80137d6:	f817 3009 	ldrb.w	r3, [r7, r9]
 80137da:	f013 0308 	ands.w	r3, r3, #8
 80137de:	f102 0501 	add.w	r5, r2, #1
 80137e2:	d019      	beq.n	8013818 <__ssvfiscanf_r+0x74>
 80137e4:	6863      	ldr	r3, [r4, #4]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	dd0f      	ble.n	801380a <__ssvfiscanf_r+0x66>
 80137ea:	6823      	ldr	r3, [r4, #0]
 80137ec:	781a      	ldrb	r2, [r3, #0]
 80137ee:	5cba      	ldrb	r2, [r7, r2]
 80137f0:	0712      	lsls	r2, r2, #28
 80137f2:	d401      	bmi.n	80137f8 <__ssvfiscanf_r+0x54>
 80137f4:	462a      	mov	r2, r5
 80137f6:	e7e8      	b.n	80137ca <__ssvfiscanf_r+0x26>
 80137f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80137fa:	3201      	adds	r2, #1
 80137fc:	9245      	str	r2, [sp, #276]	@ 0x114
 80137fe:	6862      	ldr	r2, [r4, #4]
 8013800:	3301      	adds	r3, #1
 8013802:	3a01      	subs	r2, #1
 8013804:	6062      	str	r2, [r4, #4]
 8013806:	6023      	str	r3, [r4, #0]
 8013808:	e7ec      	b.n	80137e4 <__ssvfiscanf_r+0x40>
 801380a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801380c:	4621      	mov	r1, r4
 801380e:	4630      	mov	r0, r6
 8013810:	4798      	blx	r3
 8013812:	2800      	cmp	r0, #0
 8013814:	d0e9      	beq.n	80137ea <__ssvfiscanf_r+0x46>
 8013816:	e7ed      	b.n	80137f4 <__ssvfiscanf_r+0x50>
 8013818:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801381c:	f040 8085 	bne.w	801392a <__ssvfiscanf_r+0x186>
 8013820:	9341      	str	r3, [sp, #260]	@ 0x104
 8013822:	9343      	str	r3, [sp, #268]	@ 0x10c
 8013824:	7853      	ldrb	r3, [r2, #1]
 8013826:	2b2a      	cmp	r3, #42	@ 0x2a
 8013828:	bf02      	ittt	eq
 801382a:	2310      	moveq	r3, #16
 801382c:	1c95      	addeq	r5, r2, #2
 801382e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8013830:	220a      	movs	r2, #10
 8013832:	46aa      	mov	sl, r5
 8013834:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8013838:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801383c:	2b09      	cmp	r3, #9
 801383e:	d91e      	bls.n	801387e <__ssvfiscanf_r+0xda>
 8013840:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8013a5c <__ssvfiscanf_r+0x2b8>
 8013844:	2203      	movs	r2, #3
 8013846:	4658      	mov	r0, fp
 8013848:	f7ec fcda 	bl	8000200 <memchr>
 801384c:	b138      	cbz	r0, 801385e <__ssvfiscanf_r+0xba>
 801384e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013850:	eba0 000b 	sub.w	r0, r0, fp
 8013854:	2301      	movs	r3, #1
 8013856:	4083      	lsls	r3, r0
 8013858:	4313      	orrs	r3, r2
 801385a:	9341      	str	r3, [sp, #260]	@ 0x104
 801385c:	4655      	mov	r5, sl
 801385e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013862:	2b78      	cmp	r3, #120	@ 0x78
 8013864:	d806      	bhi.n	8013874 <__ssvfiscanf_r+0xd0>
 8013866:	2b57      	cmp	r3, #87	@ 0x57
 8013868:	d810      	bhi.n	801388c <__ssvfiscanf_r+0xe8>
 801386a:	2b25      	cmp	r3, #37	@ 0x25
 801386c:	d05d      	beq.n	801392a <__ssvfiscanf_r+0x186>
 801386e:	d857      	bhi.n	8013920 <__ssvfiscanf_r+0x17c>
 8013870:	2b00      	cmp	r3, #0
 8013872:	d075      	beq.n	8013960 <__ssvfiscanf_r+0x1bc>
 8013874:	2303      	movs	r3, #3
 8013876:	9347      	str	r3, [sp, #284]	@ 0x11c
 8013878:	230a      	movs	r3, #10
 801387a:	9342      	str	r3, [sp, #264]	@ 0x108
 801387c:	e088      	b.n	8013990 <__ssvfiscanf_r+0x1ec>
 801387e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8013880:	fb02 1103 	mla	r1, r2, r3, r1
 8013884:	3930      	subs	r1, #48	@ 0x30
 8013886:	9143      	str	r1, [sp, #268]	@ 0x10c
 8013888:	4655      	mov	r5, sl
 801388a:	e7d2      	b.n	8013832 <__ssvfiscanf_r+0x8e>
 801388c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8013890:	2a20      	cmp	r2, #32
 8013892:	d8ef      	bhi.n	8013874 <__ssvfiscanf_r+0xd0>
 8013894:	a101      	add	r1, pc, #4	@ (adr r1, 801389c <__ssvfiscanf_r+0xf8>)
 8013896:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801389a:	bf00      	nop
 801389c:	0801396f 	.word	0x0801396f
 80138a0:	08013875 	.word	0x08013875
 80138a4:	08013875 	.word	0x08013875
 80138a8:	080139c9 	.word	0x080139c9
 80138ac:	08013875 	.word	0x08013875
 80138b0:	08013875 	.word	0x08013875
 80138b4:	08013875 	.word	0x08013875
 80138b8:	08013875 	.word	0x08013875
 80138bc:	08013875 	.word	0x08013875
 80138c0:	08013875 	.word	0x08013875
 80138c4:	08013875 	.word	0x08013875
 80138c8:	080139df 	.word	0x080139df
 80138cc:	080139c5 	.word	0x080139c5
 80138d0:	08013927 	.word	0x08013927
 80138d4:	08013927 	.word	0x08013927
 80138d8:	08013927 	.word	0x08013927
 80138dc:	08013875 	.word	0x08013875
 80138e0:	08013981 	.word	0x08013981
 80138e4:	08013875 	.word	0x08013875
 80138e8:	08013875 	.word	0x08013875
 80138ec:	08013875 	.word	0x08013875
 80138f0:	08013875 	.word	0x08013875
 80138f4:	080139ef 	.word	0x080139ef
 80138f8:	08013989 	.word	0x08013989
 80138fc:	08013967 	.word	0x08013967
 8013900:	08013875 	.word	0x08013875
 8013904:	08013875 	.word	0x08013875
 8013908:	080139eb 	.word	0x080139eb
 801390c:	08013875 	.word	0x08013875
 8013910:	080139c5 	.word	0x080139c5
 8013914:	08013875 	.word	0x08013875
 8013918:	08013875 	.word	0x08013875
 801391c:	0801396f 	.word	0x0801396f
 8013920:	3b45      	subs	r3, #69	@ 0x45
 8013922:	2b02      	cmp	r3, #2
 8013924:	d8a6      	bhi.n	8013874 <__ssvfiscanf_r+0xd0>
 8013926:	2305      	movs	r3, #5
 8013928:	e031      	b.n	801398e <__ssvfiscanf_r+0x1ea>
 801392a:	6863      	ldr	r3, [r4, #4]
 801392c:	2b00      	cmp	r3, #0
 801392e:	dd0d      	ble.n	801394c <__ssvfiscanf_r+0x1a8>
 8013930:	6823      	ldr	r3, [r4, #0]
 8013932:	781a      	ldrb	r2, [r3, #0]
 8013934:	454a      	cmp	r2, r9
 8013936:	f040 80a6 	bne.w	8013a86 <__ssvfiscanf_r+0x2e2>
 801393a:	3301      	adds	r3, #1
 801393c:	6862      	ldr	r2, [r4, #4]
 801393e:	6023      	str	r3, [r4, #0]
 8013940:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8013942:	3a01      	subs	r2, #1
 8013944:	3301      	adds	r3, #1
 8013946:	6062      	str	r2, [r4, #4]
 8013948:	9345      	str	r3, [sp, #276]	@ 0x114
 801394a:	e753      	b.n	80137f4 <__ssvfiscanf_r+0x50>
 801394c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801394e:	4621      	mov	r1, r4
 8013950:	4630      	mov	r0, r6
 8013952:	4798      	blx	r3
 8013954:	2800      	cmp	r0, #0
 8013956:	d0eb      	beq.n	8013930 <__ssvfiscanf_r+0x18c>
 8013958:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801395a:	2800      	cmp	r0, #0
 801395c:	f040 808b 	bne.w	8013a76 <__ssvfiscanf_r+0x2d2>
 8013960:	f04f 30ff 	mov.w	r0, #4294967295
 8013964:	e08b      	b.n	8013a7e <__ssvfiscanf_r+0x2da>
 8013966:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013968:	f042 0220 	orr.w	r2, r2, #32
 801396c:	9241      	str	r2, [sp, #260]	@ 0x104
 801396e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013974:	9241      	str	r2, [sp, #260]	@ 0x104
 8013976:	2210      	movs	r2, #16
 8013978:	2b6e      	cmp	r3, #110	@ 0x6e
 801397a:	9242      	str	r2, [sp, #264]	@ 0x108
 801397c:	d902      	bls.n	8013984 <__ssvfiscanf_r+0x1e0>
 801397e:	e005      	b.n	801398c <__ssvfiscanf_r+0x1e8>
 8013980:	2300      	movs	r3, #0
 8013982:	9342      	str	r3, [sp, #264]	@ 0x108
 8013984:	2303      	movs	r3, #3
 8013986:	e002      	b.n	801398e <__ssvfiscanf_r+0x1ea>
 8013988:	2308      	movs	r3, #8
 801398a:	9342      	str	r3, [sp, #264]	@ 0x108
 801398c:	2304      	movs	r3, #4
 801398e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8013990:	6863      	ldr	r3, [r4, #4]
 8013992:	2b00      	cmp	r3, #0
 8013994:	dd39      	ble.n	8013a0a <__ssvfiscanf_r+0x266>
 8013996:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8013998:	0659      	lsls	r1, r3, #25
 801399a:	d404      	bmi.n	80139a6 <__ssvfiscanf_r+0x202>
 801399c:	6823      	ldr	r3, [r4, #0]
 801399e:	781a      	ldrb	r2, [r3, #0]
 80139a0:	5cba      	ldrb	r2, [r7, r2]
 80139a2:	0712      	lsls	r2, r2, #28
 80139a4:	d438      	bmi.n	8013a18 <__ssvfiscanf_r+0x274>
 80139a6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80139a8:	2b02      	cmp	r3, #2
 80139aa:	dc47      	bgt.n	8013a3c <__ssvfiscanf_r+0x298>
 80139ac:	466b      	mov	r3, sp
 80139ae:	4622      	mov	r2, r4
 80139b0:	a941      	add	r1, sp, #260	@ 0x104
 80139b2:	4630      	mov	r0, r6
 80139b4:	f000 f9f8 	bl	8013da8 <_scanf_chars>
 80139b8:	2801      	cmp	r0, #1
 80139ba:	d064      	beq.n	8013a86 <__ssvfiscanf_r+0x2e2>
 80139bc:	2802      	cmp	r0, #2
 80139be:	f47f af19 	bne.w	80137f4 <__ssvfiscanf_r+0x50>
 80139c2:	e7c9      	b.n	8013958 <__ssvfiscanf_r+0x1b4>
 80139c4:	220a      	movs	r2, #10
 80139c6:	e7d7      	b.n	8013978 <__ssvfiscanf_r+0x1d4>
 80139c8:	4629      	mov	r1, r5
 80139ca:	4640      	mov	r0, r8
 80139cc:	f000 fb3a 	bl	8014044 <__sccl>
 80139d0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80139d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80139d6:	9341      	str	r3, [sp, #260]	@ 0x104
 80139d8:	4605      	mov	r5, r0
 80139da:	2301      	movs	r3, #1
 80139dc:	e7d7      	b.n	801398e <__ssvfiscanf_r+0x1ea>
 80139de:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80139e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80139e4:	9341      	str	r3, [sp, #260]	@ 0x104
 80139e6:	2300      	movs	r3, #0
 80139e8:	e7d1      	b.n	801398e <__ssvfiscanf_r+0x1ea>
 80139ea:	2302      	movs	r3, #2
 80139ec:	e7cf      	b.n	801398e <__ssvfiscanf_r+0x1ea>
 80139ee:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80139f0:	06c3      	lsls	r3, r0, #27
 80139f2:	f53f aeff 	bmi.w	80137f4 <__ssvfiscanf_r+0x50>
 80139f6:	9b00      	ldr	r3, [sp, #0]
 80139f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80139fa:	1d19      	adds	r1, r3, #4
 80139fc:	9100      	str	r1, [sp, #0]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	07c0      	lsls	r0, r0, #31
 8013a02:	bf4c      	ite	mi
 8013a04:	801a      	strhmi	r2, [r3, #0]
 8013a06:	601a      	strpl	r2, [r3, #0]
 8013a08:	e6f4      	b.n	80137f4 <__ssvfiscanf_r+0x50>
 8013a0a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013a0c:	4621      	mov	r1, r4
 8013a0e:	4630      	mov	r0, r6
 8013a10:	4798      	blx	r3
 8013a12:	2800      	cmp	r0, #0
 8013a14:	d0bf      	beq.n	8013996 <__ssvfiscanf_r+0x1f2>
 8013a16:	e79f      	b.n	8013958 <__ssvfiscanf_r+0x1b4>
 8013a18:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013a1a:	3201      	adds	r2, #1
 8013a1c:	9245      	str	r2, [sp, #276]	@ 0x114
 8013a1e:	6862      	ldr	r2, [r4, #4]
 8013a20:	3a01      	subs	r2, #1
 8013a22:	2a00      	cmp	r2, #0
 8013a24:	6062      	str	r2, [r4, #4]
 8013a26:	dd02      	ble.n	8013a2e <__ssvfiscanf_r+0x28a>
 8013a28:	3301      	adds	r3, #1
 8013a2a:	6023      	str	r3, [r4, #0]
 8013a2c:	e7b6      	b.n	801399c <__ssvfiscanf_r+0x1f8>
 8013a2e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013a30:	4621      	mov	r1, r4
 8013a32:	4630      	mov	r0, r6
 8013a34:	4798      	blx	r3
 8013a36:	2800      	cmp	r0, #0
 8013a38:	d0b0      	beq.n	801399c <__ssvfiscanf_r+0x1f8>
 8013a3a:	e78d      	b.n	8013958 <__ssvfiscanf_r+0x1b4>
 8013a3c:	2b04      	cmp	r3, #4
 8013a3e:	dc0f      	bgt.n	8013a60 <__ssvfiscanf_r+0x2bc>
 8013a40:	466b      	mov	r3, sp
 8013a42:	4622      	mov	r2, r4
 8013a44:	a941      	add	r1, sp, #260	@ 0x104
 8013a46:	4630      	mov	r0, r6
 8013a48:	f000 fa08 	bl	8013e5c <_scanf_i>
 8013a4c:	e7b4      	b.n	80139b8 <__ssvfiscanf_r+0x214>
 8013a4e:	bf00      	nop
 8013a50:	080136f1 	.word	0x080136f1
 8013a54:	0801376b 	.word	0x0801376b
 8013a58:	08014827 	.word	0x08014827
 8013a5c:	0801492d 	.word	0x0801492d
 8013a60:	4b0a      	ldr	r3, [pc, #40]	@ (8013a8c <__ssvfiscanf_r+0x2e8>)
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	f43f aec6 	beq.w	80137f4 <__ssvfiscanf_r+0x50>
 8013a68:	466b      	mov	r3, sp
 8013a6a:	4622      	mov	r2, r4
 8013a6c:	a941      	add	r1, sp, #260	@ 0x104
 8013a6e:	4630      	mov	r0, r6
 8013a70:	f3af 8000 	nop.w
 8013a74:	e7a0      	b.n	80139b8 <__ssvfiscanf_r+0x214>
 8013a76:	89a3      	ldrh	r3, [r4, #12]
 8013a78:	065b      	lsls	r3, r3, #25
 8013a7a:	f53f af71 	bmi.w	8013960 <__ssvfiscanf_r+0x1bc>
 8013a7e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8013a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a86:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8013a88:	e7f9      	b.n	8013a7e <__ssvfiscanf_r+0x2da>
 8013a8a:	bf00      	nop
 8013a8c:	00000000 	.word	0x00000000

08013a90 <_printf_common>:
 8013a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a94:	4616      	mov	r6, r2
 8013a96:	4698      	mov	r8, r3
 8013a98:	688a      	ldr	r2, [r1, #8]
 8013a9a:	690b      	ldr	r3, [r1, #16]
 8013a9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013aa0:	4293      	cmp	r3, r2
 8013aa2:	bfb8      	it	lt
 8013aa4:	4613      	movlt	r3, r2
 8013aa6:	6033      	str	r3, [r6, #0]
 8013aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013aac:	4607      	mov	r7, r0
 8013aae:	460c      	mov	r4, r1
 8013ab0:	b10a      	cbz	r2, 8013ab6 <_printf_common+0x26>
 8013ab2:	3301      	adds	r3, #1
 8013ab4:	6033      	str	r3, [r6, #0]
 8013ab6:	6823      	ldr	r3, [r4, #0]
 8013ab8:	0699      	lsls	r1, r3, #26
 8013aba:	bf42      	ittt	mi
 8013abc:	6833      	ldrmi	r3, [r6, #0]
 8013abe:	3302      	addmi	r3, #2
 8013ac0:	6033      	strmi	r3, [r6, #0]
 8013ac2:	6825      	ldr	r5, [r4, #0]
 8013ac4:	f015 0506 	ands.w	r5, r5, #6
 8013ac8:	d106      	bne.n	8013ad8 <_printf_common+0x48>
 8013aca:	f104 0a19 	add.w	sl, r4, #25
 8013ace:	68e3      	ldr	r3, [r4, #12]
 8013ad0:	6832      	ldr	r2, [r6, #0]
 8013ad2:	1a9b      	subs	r3, r3, r2
 8013ad4:	42ab      	cmp	r3, r5
 8013ad6:	dc26      	bgt.n	8013b26 <_printf_common+0x96>
 8013ad8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013adc:	6822      	ldr	r2, [r4, #0]
 8013ade:	3b00      	subs	r3, #0
 8013ae0:	bf18      	it	ne
 8013ae2:	2301      	movne	r3, #1
 8013ae4:	0692      	lsls	r2, r2, #26
 8013ae6:	d42b      	bmi.n	8013b40 <_printf_common+0xb0>
 8013ae8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013aec:	4641      	mov	r1, r8
 8013aee:	4638      	mov	r0, r7
 8013af0:	47c8      	blx	r9
 8013af2:	3001      	adds	r0, #1
 8013af4:	d01e      	beq.n	8013b34 <_printf_common+0xa4>
 8013af6:	6823      	ldr	r3, [r4, #0]
 8013af8:	6922      	ldr	r2, [r4, #16]
 8013afa:	f003 0306 	and.w	r3, r3, #6
 8013afe:	2b04      	cmp	r3, #4
 8013b00:	bf02      	ittt	eq
 8013b02:	68e5      	ldreq	r5, [r4, #12]
 8013b04:	6833      	ldreq	r3, [r6, #0]
 8013b06:	1aed      	subeq	r5, r5, r3
 8013b08:	68a3      	ldr	r3, [r4, #8]
 8013b0a:	bf0c      	ite	eq
 8013b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b10:	2500      	movne	r5, #0
 8013b12:	4293      	cmp	r3, r2
 8013b14:	bfc4      	itt	gt
 8013b16:	1a9b      	subgt	r3, r3, r2
 8013b18:	18ed      	addgt	r5, r5, r3
 8013b1a:	2600      	movs	r6, #0
 8013b1c:	341a      	adds	r4, #26
 8013b1e:	42b5      	cmp	r5, r6
 8013b20:	d11a      	bne.n	8013b58 <_printf_common+0xc8>
 8013b22:	2000      	movs	r0, #0
 8013b24:	e008      	b.n	8013b38 <_printf_common+0xa8>
 8013b26:	2301      	movs	r3, #1
 8013b28:	4652      	mov	r2, sl
 8013b2a:	4641      	mov	r1, r8
 8013b2c:	4638      	mov	r0, r7
 8013b2e:	47c8      	blx	r9
 8013b30:	3001      	adds	r0, #1
 8013b32:	d103      	bne.n	8013b3c <_printf_common+0xac>
 8013b34:	f04f 30ff 	mov.w	r0, #4294967295
 8013b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b3c:	3501      	adds	r5, #1
 8013b3e:	e7c6      	b.n	8013ace <_printf_common+0x3e>
 8013b40:	18e1      	adds	r1, r4, r3
 8013b42:	1c5a      	adds	r2, r3, #1
 8013b44:	2030      	movs	r0, #48	@ 0x30
 8013b46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013b4a:	4422      	add	r2, r4
 8013b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013b50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013b54:	3302      	adds	r3, #2
 8013b56:	e7c7      	b.n	8013ae8 <_printf_common+0x58>
 8013b58:	2301      	movs	r3, #1
 8013b5a:	4622      	mov	r2, r4
 8013b5c:	4641      	mov	r1, r8
 8013b5e:	4638      	mov	r0, r7
 8013b60:	47c8      	blx	r9
 8013b62:	3001      	adds	r0, #1
 8013b64:	d0e6      	beq.n	8013b34 <_printf_common+0xa4>
 8013b66:	3601      	adds	r6, #1
 8013b68:	e7d9      	b.n	8013b1e <_printf_common+0x8e>
	...

08013b6c <_printf_i>:
 8013b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b70:	7e0f      	ldrb	r7, [r1, #24]
 8013b72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013b74:	2f78      	cmp	r7, #120	@ 0x78
 8013b76:	4691      	mov	r9, r2
 8013b78:	4680      	mov	r8, r0
 8013b7a:	460c      	mov	r4, r1
 8013b7c:	469a      	mov	sl, r3
 8013b7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013b82:	d807      	bhi.n	8013b94 <_printf_i+0x28>
 8013b84:	2f62      	cmp	r7, #98	@ 0x62
 8013b86:	d80a      	bhi.n	8013b9e <_printf_i+0x32>
 8013b88:	2f00      	cmp	r7, #0
 8013b8a:	f000 80d1 	beq.w	8013d30 <_printf_i+0x1c4>
 8013b8e:	2f58      	cmp	r7, #88	@ 0x58
 8013b90:	f000 80b8 	beq.w	8013d04 <_printf_i+0x198>
 8013b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013b98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013b9c:	e03a      	b.n	8013c14 <_printf_i+0xa8>
 8013b9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013ba2:	2b15      	cmp	r3, #21
 8013ba4:	d8f6      	bhi.n	8013b94 <_printf_i+0x28>
 8013ba6:	a101      	add	r1, pc, #4	@ (adr r1, 8013bac <_printf_i+0x40>)
 8013ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013bac:	08013c05 	.word	0x08013c05
 8013bb0:	08013c19 	.word	0x08013c19
 8013bb4:	08013b95 	.word	0x08013b95
 8013bb8:	08013b95 	.word	0x08013b95
 8013bbc:	08013b95 	.word	0x08013b95
 8013bc0:	08013b95 	.word	0x08013b95
 8013bc4:	08013c19 	.word	0x08013c19
 8013bc8:	08013b95 	.word	0x08013b95
 8013bcc:	08013b95 	.word	0x08013b95
 8013bd0:	08013b95 	.word	0x08013b95
 8013bd4:	08013b95 	.word	0x08013b95
 8013bd8:	08013d17 	.word	0x08013d17
 8013bdc:	08013c43 	.word	0x08013c43
 8013be0:	08013cd1 	.word	0x08013cd1
 8013be4:	08013b95 	.word	0x08013b95
 8013be8:	08013b95 	.word	0x08013b95
 8013bec:	08013d39 	.word	0x08013d39
 8013bf0:	08013b95 	.word	0x08013b95
 8013bf4:	08013c43 	.word	0x08013c43
 8013bf8:	08013b95 	.word	0x08013b95
 8013bfc:	08013b95 	.word	0x08013b95
 8013c00:	08013cd9 	.word	0x08013cd9
 8013c04:	6833      	ldr	r3, [r6, #0]
 8013c06:	1d1a      	adds	r2, r3, #4
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	6032      	str	r2, [r6, #0]
 8013c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013c10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013c14:	2301      	movs	r3, #1
 8013c16:	e09c      	b.n	8013d52 <_printf_i+0x1e6>
 8013c18:	6833      	ldr	r3, [r6, #0]
 8013c1a:	6820      	ldr	r0, [r4, #0]
 8013c1c:	1d19      	adds	r1, r3, #4
 8013c1e:	6031      	str	r1, [r6, #0]
 8013c20:	0606      	lsls	r6, r0, #24
 8013c22:	d501      	bpl.n	8013c28 <_printf_i+0xbc>
 8013c24:	681d      	ldr	r5, [r3, #0]
 8013c26:	e003      	b.n	8013c30 <_printf_i+0xc4>
 8013c28:	0645      	lsls	r5, r0, #25
 8013c2a:	d5fb      	bpl.n	8013c24 <_printf_i+0xb8>
 8013c2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013c30:	2d00      	cmp	r5, #0
 8013c32:	da03      	bge.n	8013c3c <_printf_i+0xd0>
 8013c34:	232d      	movs	r3, #45	@ 0x2d
 8013c36:	426d      	negs	r5, r5
 8013c38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c3c:	4858      	ldr	r0, [pc, #352]	@ (8013da0 <_printf_i+0x234>)
 8013c3e:	230a      	movs	r3, #10
 8013c40:	e011      	b.n	8013c66 <_printf_i+0xfa>
 8013c42:	6821      	ldr	r1, [r4, #0]
 8013c44:	6833      	ldr	r3, [r6, #0]
 8013c46:	0608      	lsls	r0, r1, #24
 8013c48:	f853 5b04 	ldr.w	r5, [r3], #4
 8013c4c:	d402      	bmi.n	8013c54 <_printf_i+0xe8>
 8013c4e:	0649      	lsls	r1, r1, #25
 8013c50:	bf48      	it	mi
 8013c52:	b2ad      	uxthmi	r5, r5
 8013c54:	2f6f      	cmp	r7, #111	@ 0x6f
 8013c56:	4852      	ldr	r0, [pc, #328]	@ (8013da0 <_printf_i+0x234>)
 8013c58:	6033      	str	r3, [r6, #0]
 8013c5a:	bf14      	ite	ne
 8013c5c:	230a      	movne	r3, #10
 8013c5e:	2308      	moveq	r3, #8
 8013c60:	2100      	movs	r1, #0
 8013c62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013c66:	6866      	ldr	r6, [r4, #4]
 8013c68:	60a6      	str	r6, [r4, #8]
 8013c6a:	2e00      	cmp	r6, #0
 8013c6c:	db05      	blt.n	8013c7a <_printf_i+0x10e>
 8013c6e:	6821      	ldr	r1, [r4, #0]
 8013c70:	432e      	orrs	r6, r5
 8013c72:	f021 0104 	bic.w	r1, r1, #4
 8013c76:	6021      	str	r1, [r4, #0]
 8013c78:	d04b      	beq.n	8013d12 <_printf_i+0x1a6>
 8013c7a:	4616      	mov	r6, r2
 8013c7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8013c80:	fb03 5711 	mls	r7, r3, r1, r5
 8013c84:	5dc7      	ldrb	r7, [r0, r7]
 8013c86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013c8a:	462f      	mov	r7, r5
 8013c8c:	42bb      	cmp	r3, r7
 8013c8e:	460d      	mov	r5, r1
 8013c90:	d9f4      	bls.n	8013c7c <_printf_i+0x110>
 8013c92:	2b08      	cmp	r3, #8
 8013c94:	d10b      	bne.n	8013cae <_printf_i+0x142>
 8013c96:	6823      	ldr	r3, [r4, #0]
 8013c98:	07df      	lsls	r7, r3, #31
 8013c9a:	d508      	bpl.n	8013cae <_printf_i+0x142>
 8013c9c:	6923      	ldr	r3, [r4, #16]
 8013c9e:	6861      	ldr	r1, [r4, #4]
 8013ca0:	4299      	cmp	r1, r3
 8013ca2:	bfde      	ittt	le
 8013ca4:	2330      	movle	r3, #48	@ 0x30
 8013ca6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013caa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013cae:	1b92      	subs	r2, r2, r6
 8013cb0:	6122      	str	r2, [r4, #16]
 8013cb2:	f8cd a000 	str.w	sl, [sp]
 8013cb6:	464b      	mov	r3, r9
 8013cb8:	aa03      	add	r2, sp, #12
 8013cba:	4621      	mov	r1, r4
 8013cbc:	4640      	mov	r0, r8
 8013cbe:	f7ff fee7 	bl	8013a90 <_printf_common>
 8013cc2:	3001      	adds	r0, #1
 8013cc4:	d14a      	bne.n	8013d5c <_printf_i+0x1f0>
 8013cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8013cca:	b004      	add	sp, #16
 8013ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cd0:	6823      	ldr	r3, [r4, #0]
 8013cd2:	f043 0320 	orr.w	r3, r3, #32
 8013cd6:	6023      	str	r3, [r4, #0]
 8013cd8:	4832      	ldr	r0, [pc, #200]	@ (8013da4 <_printf_i+0x238>)
 8013cda:	2778      	movs	r7, #120	@ 0x78
 8013cdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013ce0:	6823      	ldr	r3, [r4, #0]
 8013ce2:	6831      	ldr	r1, [r6, #0]
 8013ce4:	061f      	lsls	r7, r3, #24
 8013ce6:	f851 5b04 	ldr.w	r5, [r1], #4
 8013cea:	d402      	bmi.n	8013cf2 <_printf_i+0x186>
 8013cec:	065f      	lsls	r7, r3, #25
 8013cee:	bf48      	it	mi
 8013cf0:	b2ad      	uxthmi	r5, r5
 8013cf2:	6031      	str	r1, [r6, #0]
 8013cf4:	07d9      	lsls	r1, r3, #31
 8013cf6:	bf44      	itt	mi
 8013cf8:	f043 0320 	orrmi.w	r3, r3, #32
 8013cfc:	6023      	strmi	r3, [r4, #0]
 8013cfe:	b11d      	cbz	r5, 8013d08 <_printf_i+0x19c>
 8013d00:	2310      	movs	r3, #16
 8013d02:	e7ad      	b.n	8013c60 <_printf_i+0xf4>
 8013d04:	4826      	ldr	r0, [pc, #152]	@ (8013da0 <_printf_i+0x234>)
 8013d06:	e7e9      	b.n	8013cdc <_printf_i+0x170>
 8013d08:	6823      	ldr	r3, [r4, #0]
 8013d0a:	f023 0320 	bic.w	r3, r3, #32
 8013d0e:	6023      	str	r3, [r4, #0]
 8013d10:	e7f6      	b.n	8013d00 <_printf_i+0x194>
 8013d12:	4616      	mov	r6, r2
 8013d14:	e7bd      	b.n	8013c92 <_printf_i+0x126>
 8013d16:	6833      	ldr	r3, [r6, #0]
 8013d18:	6825      	ldr	r5, [r4, #0]
 8013d1a:	6961      	ldr	r1, [r4, #20]
 8013d1c:	1d18      	adds	r0, r3, #4
 8013d1e:	6030      	str	r0, [r6, #0]
 8013d20:	062e      	lsls	r6, r5, #24
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	d501      	bpl.n	8013d2a <_printf_i+0x1be>
 8013d26:	6019      	str	r1, [r3, #0]
 8013d28:	e002      	b.n	8013d30 <_printf_i+0x1c4>
 8013d2a:	0668      	lsls	r0, r5, #25
 8013d2c:	d5fb      	bpl.n	8013d26 <_printf_i+0x1ba>
 8013d2e:	8019      	strh	r1, [r3, #0]
 8013d30:	2300      	movs	r3, #0
 8013d32:	6123      	str	r3, [r4, #16]
 8013d34:	4616      	mov	r6, r2
 8013d36:	e7bc      	b.n	8013cb2 <_printf_i+0x146>
 8013d38:	6833      	ldr	r3, [r6, #0]
 8013d3a:	1d1a      	adds	r2, r3, #4
 8013d3c:	6032      	str	r2, [r6, #0]
 8013d3e:	681e      	ldr	r6, [r3, #0]
 8013d40:	6862      	ldr	r2, [r4, #4]
 8013d42:	2100      	movs	r1, #0
 8013d44:	4630      	mov	r0, r6
 8013d46:	f7ec fa5b 	bl	8000200 <memchr>
 8013d4a:	b108      	cbz	r0, 8013d50 <_printf_i+0x1e4>
 8013d4c:	1b80      	subs	r0, r0, r6
 8013d4e:	6060      	str	r0, [r4, #4]
 8013d50:	6863      	ldr	r3, [r4, #4]
 8013d52:	6123      	str	r3, [r4, #16]
 8013d54:	2300      	movs	r3, #0
 8013d56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013d5a:	e7aa      	b.n	8013cb2 <_printf_i+0x146>
 8013d5c:	6923      	ldr	r3, [r4, #16]
 8013d5e:	4632      	mov	r2, r6
 8013d60:	4649      	mov	r1, r9
 8013d62:	4640      	mov	r0, r8
 8013d64:	47d0      	blx	sl
 8013d66:	3001      	adds	r0, #1
 8013d68:	d0ad      	beq.n	8013cc6 <_printf_i+0x15a>
 8013d6a:	6823      	ldr	r3, [r4, #0]
 8013d6c:	079b      	lsls	r3, r3, #30
 8013d6e:	d413      	bmi.n	8013d98 <_printf_i+0x22c>
 8013d70:	68e0      	ldr	r0, [r4, #12]
 8013d72:	9b03      	ldr	r3, [sp, #12]
 8013d74:	4298      	cmp	r0, r3
 8013d76:	bfb8      	it	lt
 8013d78:	4618      	movlt	r0, r3
 8013d7a:	e7a6      	b.n	8013cca <_printf_i+0x15e>
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	4632      	mov	r2, r6
 8013d80:	4649      	mov	r1, r9
 8013d82:	4640      	mov	r0, r8
 8013d84:	47d0      	blx	sl
 8013d86:	3001      	adds	r0, #1
 8013d88:	d09d      	beq.n	8013cc6 <_printf_i+0x15a>
 8013d8a:	3501      	adds	r5, #1
 8013d8c:	68e3      	ldr	r3, [r4, #12]
 8013d8e:	9903      	ldr	r1, [sp, #12]
 8013d90:	1a5b      	subs	r3, r3, r1
 8013d92:	42ab      	cmp	r3, r5
 8013d94:	dcf2      	bgt.n	8013d7c <_printf_i+0x210>
 8013d96:	e7eb      	b.n	8013d70 <_printf_i+0x204>
 8013d98:	2500      	movs	r5, #0
 8013d9a:	f104 0619 	add.w	r6, r4, #25
 8013d9e:	e7f5      	b.n	8013d8c <_printf_i+0x220>
 8013da0:	08014938 	.word	0x08014938
 8013da4:	08014949 	.word	0x08014949

08013da8 <_scanf_chars>:
 8013da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013dac:	4615      	mov	r5, r2
 8013dae:	688a      	ldr	r2, [r1, #8]
 8013db0:	4680      	mov	r8, r0
 8013db2:	460c      	mov	r4, r1
 8013db4:	b932      	cbnz	r2, 8013dc4 <_scanf_chars+0x1c>
 8013db6:	698a      	ldr	r2, [r1, #24]
 8013db8:	2a00      	cmp	r2, #0
 8013dba:	bf14      	ite	ne
 8013dbc:	f04f 32ff 	movne.w	r2, #4294967295
 8013dc0:	2201      	moveq	r2, #1
 8013dc2:	608a      	str	r2, [r1, #8]
 8013dc4:	6822      	ldr	r2, [r4, #0]
 8013dc6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8013e58 <_scanf_chars+0xb0>
 8013dca:	06d1      	lsls	r1, r2, #27
 8013dcc:	bf5f      	itttt	pl
 8013dce:	681a      	ldrpl	r2, [r3, #0]
 8013dd0:	1d11      	addpl	r1, r2, #4
 8013dd2:	6019      	strpl	r1, [r3, #0]
 8013dd4:	6816      	ldrpl	r6, [r2, #0]
 8013dd6:	2700      	movs	r7, #0
 8013dd8:	69a0      	ldr	r0, [r4, #24]
 8013dda:	b188      	cbz	r0, 8013e00 <_scanf_chars+0x58>
 8013ddc:	2801      	cmp	r0, #1
 8013dde:	d107      	bne.n	8013df0 <_scanf_chars+0x48>
 8013de0:	682b      	ldr	r3, [r5, #0]
 8013de2:	781a      	ldrb	r2, [r3, #0]
 8013de4:	6963      	ldr	r3, [r4, #20]
 8013de6:	5c9b      	ldrb	r3, [r3, r2]
 8013de8:	b953      	cbnz	r3, 8013e00 <_scanf_chars+0x58>
 8013dea:	2f00      	cmp	r7, #0
 8013dec:	d031      	beq.n	8013e52 <_scanf_chars+0xaa>
 8013dee:	e022      	b.n	8013e36 <_scanf_chars+0x8e>
 8013df0:	2802      	cmp	r0, #2
 8013df2:	d120      	bne.n	8013e36 <_scanf_chars+0x8e>
 8013df4:	682b      	ldr	r3, [r5, #0]
 8013df6:	781b      	ldrb	r3, [r3, #0]
 8013df8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013dfc:	071b      	lsls	r3, r3, #28
 8013dfe:	d41a      	bmi.n	8013e36 <_scanf_chars+0x8e>
 8013e00:	6823      	ldr	r3, [r4, #0]
 8013e02:	06da      	lsls	r2, r3, #27
 8013e04:	bf5e      	ittt	pl
 8013e06:	682b      	ldrpl	r3, [r5, #0]
 8013e08:	781b      	ldrbpl	r3, [r3, #0]
 8013e0a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013e0e:	682a      	ldr	r2, [r5, #0]
 8013e10:	686b      	ldr	r3, [r5, #4]
 8013e12:	3201      	adds	r2, #1
 8013e14:	602a      	str	r2, [r5, #0]
 8013e16:	68a2      	ldr	r2, [r4, #8]
 8013e18:	3b01      	subs	r3, #1
 8013e1a:	3a01      	subs	r2, #1
 8013e1c:	606b      	str	r3, [r5, #4]
 8013e1e:	3701      	adds	r7, #1
 8013e20:	60a2      	str	r2, [r4, #8]
 8013e22:	b142      	cbz	r2, 8013e36 <_scanf_chars+0x8e>
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	dcd7      	bgt.n	8013dd8 <_scanf_chars+0x30>
 8013e28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013e2c:	4629      	mov	r1, r5
 8013e2e:	4640      	mov	r0, r8
 8013e30:	4798      	blx	r3
 8013e32:	2800      	cmp	r0, #0
 8013e34:	d0d0      	beq.n	8013dd8 <_scanf_chars+0x30>
 8013e36:	6823      	ldr	r3, [r4, #0]
 8013e38:	f013 0310 	ands.w	r3, r3, #16
 8013e3c:	d105      	bne.n	8013e4a <_scanf_chars+0xa2>
 8013e3e:	68e2      	ldr	r2, [r4, #12]
 8013e40:	3201      	adds	r2, #1
 8013e42:	60e2      	str	r2, [r4, #12]
 8013e44:	69a2      	ldr	r2, [r4, #24]
 8013e46:	b102      	cbz	r2, 8013e4a <_scanf_chars+0xa2>
 8013e48:	7033      	strb	r3, [r6, #0]
 8013e4a:	6923      	ldr	r3, [r4, #16]
 8013e4c:	443b      	add	r3, r7
 8013e4e:	6123      	str	r3, [r4, #16]
 8013e50:	2000      	movs	r0, #0
 8013e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e56:	bf00      	nop
 8013e58:	08014827 	.word	0x08014827

08013e5c <_scanf_i>:
 8013e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e60:	4698      	mov	r8, r3
 8013e62:	4b74      	ldr	r3, [pc, #464]	@ (8014034 <_scanf_i+0x1d8>)
 8013e64:	460c      	mov	r4, r1
 8013e66:	4682      	mov	sl, r0
 8013e68:	4616      	mov	r6, r2
 8013e6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013e6e:	b087      	sub	sp, #28
 8013e70:	ab03      	add	r3, sp, #12
 8013e72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013e76:	4b70      	ldr	r3, [pc, #448]	@ (8014038 <_scanf_i+0x1dc>)
 8013e78:	69a1      	ldr	r1, [r4, #24]
 8013e7a:	4a70      	ldr	r2, [pc, #448]	@ (801403c <_scanf_i+0x1e0>)
 8013e7c:	2903      	cmp	r1, #3
 8013e7e:	bf08      	it	eq
 8013e80:	461a      	moveq	r2, r3
 8013e82:	68a3      	ldr	r3, [r4, #8]
 8013e84:	9201      	str	r2, [sp, #4]
 8013e86:	1e5a      	subs	r2, r3, #1
 8013e88:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013e8c:	bf88      	it	hi
 8013e8e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013e92:	4627      	mov	r7, r4
 8013e94:	bf82      	ittt	hi
 8013e96:	eb03 0905 	addhi.w	r9, r3, r5
 8013e9a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013e9e:	60a3      	strhi	r3, [r4, #8]
 8013ea0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013ea4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8013ea8:	bf98      	it	ls
 8013eaa:	f04f 0900 	movls.w	r9, #0
 8013eae:	6023      	str	r3, [r4, #0]
 8013eb0:	463d      	mov	r5, r7
 8013eb2:	f04f 0b00 	mov.w	fp, #0
 8013eb6:	6831      	ldr	r1, [r6, #0]
 8013eb8:	ab03      	add	r3, sp, #12
 8013eba:	7809      	ldrb	r1, [r1, #0]
 8013ebc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013ec0:	2202      	movs	r2, #2
 8013ec2:	f7ec f99d 	bl	8000200 <memchr>
 8013ec6:	b328      	cbz	r0, 8013f14 <_scanf_i+0xb8>
 8013ec8:	f1bb 0f01 	cmp.w	fp, #1
 8013ecc:	d159      	bne.n	8013f82 <_scanf_i+0x126>
 8013ece:	6862      	ldr	r2, [r4, #4]
 8013ed0:	b92a      	cbnz	r2, 8013ede <_scanf_i+0x82>
 8013ed2:	6822      	ldr	r2, [r4, #0]
 8013ed4:	2108      	movs	r1, #8
 8013ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013eda:	6061      	str	r1, [r4, #4]
 8013edc:	6022      	str	r2, [r4, #0]
 8013ede:	6822      	ldr	r2, [r4, #0]
 8013ee0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8013ee4:	6022      	str	r2, [r4, #0]
 8013ee6:	68a2      	ldr	r2, [r4, #8]
 8013ee8:	1e51      	subs	r1, r2, #1
 8013eea:	60a1      	str	r1, [r4, #8]
 8013eec:	b192      	cbz	r2, 8013f14 <_scanf_i+0xb8>
 8013eee:	6832      	ldr	r2, [r6, #0]
 8013ef0:	1c51      	adds	r1, r2, #1
 8013ef2:	6031      	str	r1, [r6, #0]
 8013ef4:	7812      	ldrb	r2, [r2, #0]
 8013ef6:	f805 2b01 	strb.w	r2, [r5], #1
 8013efa:	6872      	ldr	r2, [r6, #4]
 8013efc:	3a01      	subs	r2, #1
 8013efe:	2a00      	cmp	r2, #0
 8013f00:	6072      	str	r2, [r6, #4]
 8013f02:	dc07      	bgt.n	8013f14 <_scanf_i+0xb8>
 8013f04:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8013f08:	4631      	mov	r1, r6
 8013f0a:	4650      	mov	r0, sl
 8013f0c:	4790      	blx	r2
 8013f0e:	2800      	cmp	r0, #0
 8013f10:	f040 8085 	bne.w	801401e <_scanf_i+0x1c2>
 8013f14:	f10b 0b01 	add.w	fp, fp, #1
 8013f18:	f1bb 0f03 	cmp.w	fp, #3
 8013f1c:	d1cb      	bne.n	8013eb6 <_scanf_i+0x5a>
 8013f1e:	6863      	ldr	r3, [r4, #4]
 8013f20:	b90b      	cbnz	r3, 8013f26 <_scanf_i+0xca>
 8013f22:	230a      	movs	r3, #10
 8013f24:	6063      	str	r3, [r4, #4]
 8013f26:	6863      	ldr	r3, [r4, #4]
 8013f28:	4945      	ldr	r1, [pc, #276]	@ (8014040 <_scanf_i+0x1e4>)
 8013f2a:	6960      	ldr	r0, [r4, #20]
 8013f2c:	1ac9      	subs	r1, r1, r3
 8013f2e:	f000 f889 	bl	8014044 <__sccl>
 8013f32:	f04f 0b00 	mov.w	fp, #0
 8013f36:	68a3      	ldr	r3, [r4, #8]
 8013f38:	6822      	ldr	r2, [r4, #0]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d03d      	beq.n	8013fba <_scanf_i+0x15e>
 8013f3e:	6831      	ldr	r1, [r6, #0]
 8013f40:	6960      	ldr	r0, [r4, #20]
 8013f42:	f891 c000 	ldrb.w	ip, [r1]
 8013f46:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013f4a:	2800      	cmp	r0, #0
 8013f4c:	d035      	beq.n	8013fba <_scanf_i+0x15e>
 8013f4e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8013f52:	d124      	bne.n	8013f9e <_scanf_i+0x142>
 8013f54:	0510      	lsls	r0, r2, #20
 8013f56:	d522      	bpl.n	8013f9e <_scanf_i+0x142>
 8013f58:	f10b 0b01 	add.w	fp, fp, #1
 8013f5c:	f1b9 0f00 	cmp.w	r9, #0
 8013f60:	d003      	beq.n	8013f6a <_scanf_i+0x10e>
 8013f62:	3301      	adds	r3, #1
 8013f64:	f109 39ff 	add.w	r9, r9, #4294967295
 8013f68:	60a3      	str	r3, [r4, #8]
 8013f6a:	6873      	ldr	r3, [r6, #4]
 8013f6c:	3b01      	subs	r3, #1
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	6073      	str	r3, [r6, #4]
 8013f72:	dd1b      	ble.n	8013fac <_scanf_i+0x150>
 8013f74:	6833      	ldr	r3, [r6, #0]
 8013f76:	3301      	adds	r3, #1
 8013f78:	6033      	str	r3, [r6, #0]
 8013f7a:	68a3      	ldr	r3, [r4, #8]
 8013f7c:	3b01      	subs	r3, #1
 8013f7e:	60a3      	str	r3, [r4, #8]
 8013f80:	e7d9      	b.n	8013f36 <_scanf_i+0xda>
 8013f82:	f1bb 0f02 	cmp.w	fp, #2
 8013f86:	d1ae      	bne.n	8013ee6 <_scanf_i+0x8a>
 8013f88:	6822      	ldr	r2, [r4, #0]
 8013f8a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8013f8e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8013f92:	d1c4      	bne.n	8013f1e <_scanf_i+0xc2>
 8013f94:	2110      	movs	r1, #16
 8013f96:	6061      	str	r1, [r4, #4]
 8013f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013f9c:	e7a2      	b.n	8013ee4 <_scanf_i+0x88>
 8013f9e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8013fa2:	6022      	str	r2, [r4, #0]
 8013fa4:	780b      	ldrb	r3, [r1, #0]
 8013fa6:	f805 3b01 	strb.w	r3, [r5], #1
 8013faa:	e7de      	b.n	8013f6a <_scanf_i+0x10e>
 8013fac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013fb0:	4631      	mov	r1, r6
 8013fb2:	4650      	mov	r0, sl
 8013fb4:	4798      	blx	r3
 8013fb6:	2800      	cmp	r0, #0
 8013fb8:	d0df      	beq.n	8013f7a <_scanf_i+0x11e>
 8013fba:	6823      	ldr	r3, [r4, #0]
 8013fbc:	05d9      	lsls	r1, r3, #23
 8013fbe:	d50d      	bpl.n	8013fdc <_scanf_i+0x180>
 8013fc0:	42bd      	cmp	r5, r7
 8013fc2:	d909      	bls.n	8013fd8 <_scanf_i+0x17c>
 8013fc4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013fc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013fcc:	4632      	mov	r2, r6
 8013fce:	4650      	mov	r0, sl
 8013fd0:	4798      	blx	r3
 8013fd2:	f105 39ff 	add.w	r9, r5, #4294967295
 8013fd6:	464d      	mov	r5, r9
 8013fd8:	42bd      	cmp	r5, r7
 8013fda:	d028      	beq.n	801402e <_scanf_i+0x1d2>
 8013fdc:	6822      	ldr	r2, [r4, #0]
 8013fde:	f012 0210 	ands.w	r2, r2, #16
 8013fe2:	d113      	bne.n	801400c <_scanf_i+0x1b0>
 8013fe4:	702a      	strb	r2, [r5, #0]
 8013fe6:	6863      	ldr	r3, [r4, #4]
 8013fe8:	9e01      	ldr	r6, [sp, #4]
 8013fea:	4639      	mov	r1, r7
 8013fec:	4650      	mov	r0, sl
 8013fee:	47b0      	blx	r6
 8013ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8013ff4:	6821      	ldr	r1, [r4, #0]
 8013ff6:	1d1a      	adds	r2, r3, #4
 8013ff8:	f8c8 2000 	str.w	r2, [r8]
 8013ffc:	f011 0f20 	tst.w	r1, #32
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	d00f      	beq.n	8014024 <_scanf_i+0x1c8>
 8014004:	6018      	str	r0, [r3, #0]
 8014006:	68e3      	ldr	r3, [r4, #12]
 8014008:	3301      	adds	r3, #1
 801400a:	60e3      	str	r3, [r4, #12]
 801400c:	6923      	ldr	r3, [r4, #16]
 801400e:	1bed      	subs	r5, r5, r7
 8014010:	445d      	add	r5, fp
 8014012:	442b      	add	r3, r5
 8014014:	6123      	str	r3, [r4, #16]
 8014016:	2000      	movs	r0, #0
 8014018:	b007      	add	sp, #28
 801401a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801401e:	f04f 0b00 	mov.w	fp, #0
 8014022:	e7ca      	b.n	8013fba <_scanf_i+0x15e>
 8014024:	07ca      	lsls	r2, r1, #31
 8014026:	bf4c      	ite	mi
 8014028:	8018      	strhmi	r0, [r3, #0]
 801402a:	6018      	strpl	r0, [r3, #0]
 801402c:	e7eb      	b.n	8014006 <_scanf_i+0x1aa>
 801402e:	2001      	movs	r0, #1
 8014030:	e7f2      	b.n	8014018 <_scanf_i+0x1bc>
 8014032:	bf00      	nop
 8014034:	08014724 	.word	0x08014724
 8014038:	08013055 	.word	0x08013055
 801403c:	080142b9 	.word	0x080142b9
 8014040:	0801496a 	.word	0x0801496a

08014044 <__sccl>:
 8014044:	b570      	push	{r4, r5, r6, lr}
 8014046:	780b      	ldrb	r3, [r1, #0]
 8014048:	4604      	mov	r4, r0
 801404a:	2b5e      	cmp	r3, #94	@ 0x5e
 801404c:	bf0b      	itete	eq
 801404e:	784b      	ldrbeq	r3, [r1, #1]
 8014050:	1c4a      	addne	r2, r1, #1
 8014052:	1c8a      	addeq	r2, r1, #2
 8014054:	2100      	movne	r1, #0
 8014056:	bf08      	it	eq
 8014058:	2101      	moveq	r1, #1
 801405a:	3801      	subs	r0, #1
 801405c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8014060:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014064:	42a8      	cmp	r0, r5
 8014066:	d1fb      	bne.n	8014060 <__sccl+0x1c>
 8014068:	b90b      	cbnz	r3, 801406e <__sccl+0x2a>
 801406a:	1e50      	subs	r0, r2, #1
 801406c:	bd70      	pop	{r4, r5, r6, pc}
 801406e:	f081 0101 	eor.w	r1, r1, #1
 8014072:	54e1      	strb	r1, [r4, r3]
 8014074:	4610      	mov	r0, r2
 8014076:	4602      	mov	r2, r0
 8014078:	f812 5b01 	ldrb.w	r5, [r2], #1
 801407c:	2d2d      	cmp	r5, #45	@ 0x2d
 801407e:	d005      	beq.n	801408c <__sccl+0x48>
 8014080:	2d5d      	cmp	r5, #93	@ 0x5d
 8014082:	d016      	beq.n	80140b2 <__sccl+0x6e>
 8014084:	2d00      	cmp	r5, #0
 8014086:	d0f1      	beq.n	801406c <__sccl+0x28>
 8014088:	462b      	mov	r3, r5
 801408a:	e7f2      	b.n	8014072 <__sccl+0x2e>
 801408c:	7846      	ldrb	r6, [r0, #1]
 801408e:	2e5d      	cmp	r6, #93	@ 0x5d
 8014090:	d0fa      	beq.n	8014088 <__sccl+0x44>
 8014092:	42b3      	cmp	r3, r6
 8014094:	dcf8      	bgt.n	8014088 <__sccl+0x44>
 8014096:	3002      	adds	r0, #2
 8014098:	461a      	mov	r2, r3
 801409a:	3201      	adds	r2, #1
 801409c:	4296      	cmp	r6, r2
 801409e:	54a1      	strb	r1, [r4, r2]
 80140a0:	dcfb      	bgt.n	801409a <__sccl+0x56>
 80140a2:	1af2      	subs	r2, r6, r3
 80140a4:	3a01      	subs	r2, #1
 80140a6:	1c5d      	adds	r5, r3, #1
 80140a8:	42b3      	cmp	r3, r6
 80140aa:	bfa8      	it	ge
 80140ac:	2200      	movge	r2, #0
 80140ae:	18ab      	adds	r3, r5, r2
 80140b0:	e7e1      	b.n	8014076 <__sccl+0x32>
 80140b2:	4610      	mov	r0, r2
 80140b4:	e7da      	b.n	801406c <__sccl+0x28>

080140b6 <__submore>:
 80140b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140ba:	460c      	mov	r4, r1
 80140bc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80140be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80140c2:	4299      	cmp	r1, r3
 80140c4:	d11d      	bne.n	8014102 <__submore+0x4c>
 80140c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80140ca:	f7ff f92d 	bl	8013328 <_malloc_r>
 80140ce:	b918      	cbnz	r0, 80140d8 <__submore+0x22>
 80140d0:	f04f 30ff 	mov.w	r0, #4294967295
 80140d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80140dc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80140de:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80140e2:	6360      	str	r0, [r4, #52]	@ 0x34
 80140e4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80140e8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80140ec:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80140f0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80140f4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80140f8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80140fc:	6020      	str	r0, [r4, #0]
 80140fe:	2000      	movs	r0, #0
 8014100:	e7e8      	b.n	80140d4 <__submore+0x1e>
 8014102:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8014104:	0077      	lsls	r7, r6, #1
 8014106:	463a      	mov	r2, r7
 8014108:	f000 f83a 	bl	8014180 <_realloc_r>
 801410c:	4605      	mov	r5, r0
 801410e:	2800      	cmp	r0, #0
 8014110:	d0de      	beq.n	80140d0 <__submore+0x1a>
 8014112:	eb00 0806 	add.w	r8, r0, r6
 8014116:	4601      	mov	r1, r0
 8014118:	4632      	mov	r2, r6
 801411a:	4640      	mov	r0, r8
 801411c:	f7ff f88a 	bl	8013234 <memcpy>
 8014120:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8014124:	f8c4 8000 	str.w	r8, [r4]
 8014128:	e7e9      	b.n	80140fe <__submore+0x48>

0801412a <memmove>:
 801412a:	4288      	cmp	r0, r1
 801412c:	b510      	push	{r4, lr}
 801412e:	eb01 0402 	add.w	r4, r1, r2
 8014132:	d902      	bls.n	801413a <memmove+0x10>
 8014134:	4284      	cmp	r4, r0
 8014136:	4623      	mov	r3, r4
 8014138:	d807      	bhi.n	801414a <memmove+0x20>
 801413a:	1e43      	subs	r3, r0, #1
 801413c:	42a1      	cmp	r1, r4
 801413e:	d008      	beq.n	8014152 <memmove+0x28>
 8014140:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014144:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014148:	e7f8      	b.n	801413c <memmove+0x12>
 801414a:	4402      	add	r2, r0
 801414c:	4601      	mov	r1, r0
 801414e:	428a      	cmp	r2, r1
 8014150:	d100      	bne.n	8014154 <memmove+0x2a>
 8014152:	bd10      	pop	{r4, pc}
 8014154:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014158:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801415c:	e7f7      	b.n	801414e <memmove+0x24>
	...

08014160 <_sbrk_r>:
 8014160:	b538      	push	{r3, r4, r5, lr}
 8014162:	4d06      	ldr	r5, [pc, #24]	@ (801417c <_sbrk_r+0x1c>)
 8014164:	2300      	movs	r3, #0
 8014166:	4604      	mov	r4, r0
 8014168:	4608      	mov	r0, r1
 801416a:	602b      	str	r3, [r5, #0]
 801416c:	f7f2 f872 	bl	8006254 <_sbrk>
 8014170:	1c43      	adds	r3, r0, #1
 8014172:	d102      	bne.n	801417a <_sbrk_r+0x1a>
 8014174:	682b      	ldr	r3, [r5, #0]
 8014176:	b103      	cbz	r3, 801417a <_sbrk_r+0x1a>
 8014178:	6023      	str	r3, [r4, #0]
 801417a:	bd38      	pop	{r3, r4, r5, pc}
 801417c:	20005a34 	.word	0x20005a34

08014180 <_realloc_r>:
 8014180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014184:	4607      	mov	r7, r0
 8014186:	4614      	mov	r4, r2
 8014188:	460d      	mov	r5, r1
 801418a:	b921      	cbnz	r1, 8014196 <_realloc_r+0x16>
 801418c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014190:	4611      	mov	r1, r2
 8014192:	f7ff b8c9 	b.w	8013328 <_malloc_r>
 8014196:	b92a      	cbnz	r2, 80141a4 <_realloc_r+0x24>
 8014198:	f7ff f85a 	bl	8013250 <_free_r>
 801419c:	4625      	mov	r5, r4
 801419e:	4628      	mov	r0, r5
 80141a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141a4:	f000 f88a 	bl	80142bc <_malloc_usable_size_r>
 80141a8:	4284      	cmp	r4, r0
 80141aa:	4606      	mov	r6, r0
 80141ac:	d802      	bhi.n	80141b4 <_realloc_r+0x34>
 80141ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80141b2:	d8f4      	bhi.n	801419e <_realloc_r+0x1e>
 80141b4:	4621      	mov	r1, r4
 80141b6:	4638      	mov	r0, r7
 80141b8:	f7ff f8b6 	bl	8013328 <_malloc_r>
 80141bc:	4680      	mov	r8, r0
 80141be:	b908      	cbnz	r0, 80141c4 <_realloc_r+0x44>
 80141c0:	4645      	mov	r5, r8
 80141c2:	e7ec      	b.n	801419e <_realloc_r+0x1e>
 80141c4:	42b4      	cmp	r4, r6
 80141c6:	4622      	mov	r2, r4
 80141c8:	4629      	mov	r1, r5
 80141ca:	bf28      	it	cs
 80141cc:	4632      	movcs	r2, r6
 80141ce:	f7ff f831 	bl	8013234 <memcpy>
 80141d2:	4629      	mov	r1, r5
 80141d4:	4638      	mov	r0, r7
 80141d6:	f7ff f83b 	bl	8013250 <_free_r>
 80141da:	e7f1      	b.n	80141c0 <_realloc_r+0x40>

080141dc <_strtoul_l.isra.0>:
 80141dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141e0:	4e34      	ldr	r6, [pc, #208]	@ (80142b4 <_strtoul_l.isra.0+0xd8>)
 80141e2:	4686      	mov	lr, r0
 80141e4:	460d      	mov	r5, r1
 80141e6:	4628      	mov	r0, r5
 80141e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141ec:	5d37      	ldrb	r7, [r6, r4]
 80141ee:	f017 0708 	ands.w	r7, r7, #8
 80141f2:	d1f8      	bne.n	80141e6 <_strtoul_l.isra.0+0xa>
 80141f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80141f6:	d110      	bne.n	801421a <_strtoul_l.isra.0+0x3e>
 80141f8:	782c      	ldrb	r4, [r5, #0]
 80141fa:	2701      	movs	r7, #1
 80141fc:	1c85      	adds	r5, r0, #2
 80141fe:	f033 0010 	bics.w	r0, r3, #16
 8014202:	d115      	bne.n	8014230 <_strtoul_l.isra.0+0x54>
 8014204:	2c30      	cmp	r4, #48	@ 0x30
 8014206:	d10d      	bne.n	8014224 <_strtoul_l.isra.0+0x48>
 8014208:	7828      	ldrb	r0, [r5, #0]
 801420a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801420e:	2858      	cmp	r0, #88	@ 0x58
 8014210:	d108      	bne.n	8014224 <_strtoul_l.isra.0+0x48>
 8014212:	786c      	ldrb	r4, [r5, #1]
 8014214:	3502      	adds	r5, #2
 8014216:	2310      	movs	r3, #16
 8014218:	e00a      	b.n	8014230 <_strtoul_l.isra.0+0x54>
 801421a:	2c2b      	cmp	r4, #43	@ 0x2b
 801421c:	bf04      	itt	eq
 801421e:	782c      	ldrbeq	r4, [r5, #0]
 8014220:	1c85      	addeq	r5, r0, #2
 8014222:	e7ec      	b.n	80141fe <_strtoul_l.isra.0+0x22>
 8014224:	2b00      	cmp	r3, #0
 8014226:	d1f6      	bne.n	8014216 <_strtoul_l.isra.0+0x3a>
 8014228:	2c30      	cmp	r4, #48	@ 0x30
 801422a:	bf14      	ite	ne
 801422c:	230a      	movne	r3, #10
 801422e:	2308      	moveq	r3, #8
 8014230:	f04f 38ff 	mov.w	r8, #4294967295
 8014234:	2600      	movs	r6, #0
 8014236:	fbb8 f8f3 	udiv	r8, r8, r3
 801423a:	fb03 f908 	mul.w	r9, r3, r8
 801423e:	ea6f 0909 	mvn.w	r9, r9
 8014242:	4630      	mov	r0, r6
 8014244:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8014248:	f1bc 0f09 	cmp.w	ip, #9
 801424c:	d810      	bhi.n	8014270 <_strtoul_l.isra.0+0x94>
 801424e:	4664      	mov	r4, ip
 8014250:	42a3      	cmp	r3, r4
 8014252:	dd1e      	ble.n	8014292 <_strtoul_l.isra.0+0xb6>
 8014254:	f1b6 3fff 	cmp.w	r6, #4294967295
 8014258:	d007      	beq.n	801426a <_strtoul_l.isra.0+0x8e>
 801425a:	4580      	cmp	r8, r0
 801425c:	d316      	bcc.n	801428c <_strtoul_l.isra.0+0xb0>
 801425e:	d101      	bne.n	8014264 <_strtoul_l.isra.0+0x88>
 8014260:	45a1      	cmp	r9, r4
 8014262:	db13      	blt.n	801428c <_strtoul_l.isra.0+0xb0>
 8014264:	fb00 4003 	mla	r0, r0, r3, r4
 8014268:	2601      	movs	r6, #1
 801426a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801426e:	e7e9      	b.n	8014244 <_strtoul_l.isra.0+0x68>
 8014270:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8014274:	f1bc 0f19 	cmp.w	ip, #25
 8014278:	d801      	bhi.n	801427e <_strtoul_l.isra.0+0xa2>
 801427a:	3c37      	subs	r4, #55	@ 0x37
 801427c:	e7e8      	b.n	8014250 <_strtoul_l.isra.0+0x74>
 801427e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8014282:	f1bc 0f19 	cmp.w	ip, #25
 8014286:	d804      	bhi.n	8014292 <_strtoul_l.isra.0+0xb6>
 8014288:	3c57      	subs	r4, #87	@ 0x57
 801428a:	e7e1      	b.n	8014250 <_strtoul_l.isra.0+0x74>
 801428c:	f04f 36ff 	mov.w	r6, #4294967295
 8014290:	e7eb      	b.n	801426a <_strtoul_l.isra.0+0x8e>
 8014292:	1c73      	adds	r3, r6, #1
 8014294:	d106      	bne.n	80142a4 <_strtoul_l.isra.0+0xc8>
 8014296:	2322      	movs	r3, #34	@ 0x22
 8014298:	f8ce 3000 	str.w	r3, [lr]
 801429c:	4630      	mov	r0, r6
 801429e:	b932      	cbnz	r2, 80142ae <_strtoul_l.isra.0+0xd2>
 80142a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142a4:	b107      	cbz	r7, 80142a8 <_strtoul_l.isra.0+0xcc>
 80142a6:	4240      	negs	r0, r0
 80142a8:	2a00      	cmp	r2, #0
 80142aa:	d0f9      	beq.n	80142a0 <_strtoul_l.isra.0+0xc4>
 80142ac:	b106      	cbz	r6, 80142b0 <_strtoul_l.isra.0+0xd4>
 80142ae:	1e69      	subs	r1, r5, #1
 80142b0:	6011      	str	r1, [r2, #0]
 80142b2:	e7f5      	b.n	80142a0 <_strtoul_l.isra.0+0xc4>
 80142b4:	08014827 	.word	0x08014827

080142b8 <_strtoul_r>:
 80142b8:	f7ff bf90 	b.w	80141dc <_strtoul_l.isra.0>

080142bc <_malloc_usable_size_r>:
 80142bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142c0:	1f18      	subs	r0, r3, #4
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	bfbc      	itt	lt
 80142c6:	580b      	ldrlt	r3, [r1, r0]
 80142c8:	18c0      	addlt	r0, r0, r3
 80142ca:	4770      	bx	lr

080142cc <_init>:
 80142cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142ce:	bf00      	nop
 80142d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142d2:	bc08      	pop	{r3}
 80142d4:	469e      	mov	lr, r3
 80142d6:	4770      	bx	lr

080142d8 <_fini>:
 80142d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142da:	bf00      	nop
 80142dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142de:	bc08      	pop	{r3}
 80142e0:	469e      	mov	lr, r3
 80142e2:	4770      	bx	lr
