
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016444  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  080165d4  080165d4  000175d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d6c  08016d6c  000181ec  2**0
                  CONTENTS
  4 .ARM          00000008  08016d6c  08016d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016d74  08016d74  000181ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016d74  08016d74  00017d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016d78  08016d78  00017d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08016d7c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c5c  200001f0  08016f68  000181f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005e4c  08016f68  00018e4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039ba7  00000000  00000000  0001821c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067a1  00000000  00000000  00051dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e38  00000000  00000000  00058568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002418  00000000  00000000  0005b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000310c3  00000000  00000000  0005d7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037b4a  00000000  00000000  0008e87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012493a  00000000  00000000  000c63c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001eacff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cf70  00000000  00000000  001ead44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001f7cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080165bc 	.word	0x080165bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	080165bc 	.word	0x080165bc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 80005cc:	b480      	push	{r7}
 80005ce:	b087      	sub	sp, #28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
 80005d8:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005e0:	d11a      	bne.n	8000618 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	005a      	lsls	r2, r3, #1
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	085b      	lsrs	r3, r3, #1
 80005ea:	441a      	add	r2, r3
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80005fc:	4013      	ands	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	085b      	lsrs	r3, r3, #1
 8000604:	b29b      	uxth	r3, r3
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	4313      	orrs	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000616:	e00a      	b.n	800062e <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	085a      	lsrs	r2, r3, #1
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	441a      	add	r2, r3
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	fbb2 f3f3 	udiv	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	60da      	str	r2, [r3, #12]
}
 800062e:	bf00      	nop
 8000630:	371c      	adds	r7, #28
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000642:	23f0      	movs	r3, #240	@ 0xf0
 8000644:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000648:	681c      	ldr	r4, [r3, #0]
 800064a:	f00f f865 	bl	800f718 <HAL_RCC_GetPCLK2Freq>
 800064e:	4601      	mov	r1, r0
 8000650:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000654:	2200      	movs	r2, #0
 8000656:	4620      	mov	r0, r4
 8000658:	f7ff ffb8 	bl	80005cc <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 800065c:	1df9      	adds	r1, r7, #7
 800065e:	2364      	movs	r3, #100	@ 0x64
 8000660:	2201      	movs	r2, #1
 8000662:	4813      	ldr	r0, [pc, #76]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000664:	f013 fb32 	bl	8013ccc <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000668:	1df9      	adds	r1, r7, #7
 800066a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800066e:	2201      	movs	r2, #1
 8000670:	480f      	ldr	r0, [pc, #60]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000672:	f013 fbb4 	bl	8013dde <HAL_UART_Receive>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <Temp_Sensor_Init+0x44>
		while(1);
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000682:	681c      	ldr	r4, [r3, #0]
 8000684:	f00f f848 	bl	800f718 <HAL_RCC_GetPCLK2Freq>
 8000688:	4601      	mov	r1, r0
 800068a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800068e:	2200      	movs	r2, #0
 8000690:	4620      	mov	r0, r4
 8000692:	f7ff ff9b 	bl	80005cc <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2bf0      	cmp	r3, #240	@ 0xf0
 800069a:	d101      	bne.n	80006a0 <Temp_Sensor_Init+0x64>
		while(1);
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 80006a0:	20cc      	movs	r0, #204	@ 0xcc
 80006a2:	f000 f807 	bl	80006b4 <Temp_Sensor_Write>
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd90      	pop	{r4, r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000059c 	.word	0x2000059c

080006b4 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	e017      	b.n	80006f4 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 80006c4:	79fa      	ldrb	r2, [r7, #7]
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	fa42 f303 	asr.w	r3, r2, r3
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d006      	beq.n	80006e2 <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 80006d4:	f107 020c 	add.w	r2, r7, #12
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	4413      	add	r3, r2
 80006dc:	22ff      	movs	r2, #255	@ 0xff
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	e005      	b.n	80006ee <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 80006e2:	f107 020c 	add.w	r2, r7, #12
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	4413      	add	r3, r2
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	2b07      	cmp	r3, #7
 80006f8:	dde4      	ble.n	80006c4 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 80006fa:	f107 010c 	add.w	r1, r7, #12
 80006fe:	2364      	movs	r3, #100	@ 0x64
 8000700:	2208      	movs	r2, #8
 8000702:	4803      	ldr	r0, [pc, #12]	@ (8000710 <Temp_Sensor_Write+0x5c>)
 8000704:	f013 fae2 	bl	8013ccc <HAL_UART_Transmit>
}
 8000708:	bf00      	nop
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000059c 	.word	0x2000059c

08000714 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 800071e:	2300      	movs	r3, #0
 8000720:	71bb      	strb	r3, [r7, #6]
 8000722:	e00e      	b.n	8000742 <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	085b      	lsrs	r3, r3, #1
 8000728:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 800072a:	f000 f813 	bl	8000754 <Temp_Sensor_ReadBit>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d003      	beq.n	800073c <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800073a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	3301      	adds	r3, #1
 8000740:	71bb      	strb	r3, [r7, #6]
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	2b07      	cmp	r3, #7
 8000746:	d9ed      	bls.n	8000724 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000748:	79fb      	ldrb	r3, [r7, #7]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 800075a:	23ff      	movs	r3, #255	@ 0xff
 800075c:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 800075e:	1df9      	adds	r1, r7, #7
 8000760:	2301      	movs	r3, #1
 8000762:	2201      	movs	r2, #1
 8000764:	4808      	ldr	r0, [pc, #32]	@ (8000788 <Temp_Sensor_ReadBit+0x34>)
 8000766:	f013 fab1 	bl	8013ccc <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 800076a:	1db9      	adds	r1, r7, #6
 800076c:	2301      	movs	r3, #1
 800076e:	2201      	movs	r2, #1
 8000770:	4805      	ldr	r0, [pc, #20]	@ (8000788 <Temp_Sensor_ReadBit+0x34>)
 8000772:	f013 fb34 	bl	8013dde <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000624 	.word	0x20000624

0800078c <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	80bb      	strh	r3, [r7, #4]
	
	Temp_Sensor_Init();
 800079e:	f7ff ff4d 	bl	800063c <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 80007a2:	20cc      	movs	r0, #204	@ 0xcc
 80007a4:	f7ff ff86 	bl	80006b4 <Temp_Sensor_Write>

	uint8_t status = Temp_Sensor_ReadBit();
 80007a8:	f7ff ffd4 	bl	8000754 <Temp_Sensor_ReadBit>
 80007ac:	4603      	mov	r3, r0
 80007ae:	70fb      	strb	r3, [r7, #3]

	if (status) 
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d01d      	beq.n	80007f2 <Read_Temperature+0x66>
	{
		Temp_Sensor_Write(0xBE);  // read Scratch-pad
 80007b6:	20be      	movs	r0, #190	@ 0xbe
 80007b8:	f7ff ff7c 	bl	80006b4 <Temp_Sensor_Write>
		Temp_LSB = Temp_Sensor_ReadByte();
 80007bc:	f7ff ffaa 	bl	8000714 <Temp_Sensor_ReadByte>
 80007c0:	4603      	mov	r3, r0
 80007c2:	71fb      	strb	r3, [r7, #7]
	    Temp_MSB = Temp_Sensor_ReadByte();
 80007c4:	f7ff ffa6 	bl	8000714 <Temp_Sensor_ReadByte>
 80007c8:	4603      	mov	r3, r0
 80007ca:	71bb      	strb	r3, [r7, #6]
		Temp_Sensor_Init();
 80007cc:	f7ff ff36 	bl	800063c <Temp_Sensor_Init>
		Temp_Sensor_Write(0xCC);  // skip ROM
 80007d0:	20cc      	movs	r0, #204	@ 0xcc
 80007d2:	f7ff ff6f 	bl	80006b4 <Temp_Sensor_Write>
		Temp_Sensor_Write(0x44);  // convert t
 80007d6:	2044      	movs	r0, #68	@ 0x44
 80007d8:	f7ff ff6c 	bl	80006b4 <Temp_Sensor_Write>
		Temp = ((Temp_MSB << 8)) | Temp_LSB;
 80007dc:	79bb      	ldrb	r3, [r7, #6]
 80007de:	b21b      	sxth	r3, r3
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	b21a      	sxth	r2, r3
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	80bb      	strh	r3, [r7, #4]
		return Temp;
 80007ee:	88bb      	ldrh	r3, [r7, #4]
 80007f0:	e000      	b.n	80007f4 <Read_Temperature+0x68>
	}
	
	return 0; 
 80007f2:	2300      	movs	r3, #0
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <INA3221_Init>:
#include "INA3221.h"
#include "INA3221_reg.h"
#include "peripherals.h"

void INA3221_Init()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 8000806:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f87a 	bl	8000904 <INA3221_write_reg>

	HAL_Delay(100);
 8000810:	2064      	movs	r0, #100	@ 0x64
 8000812:	f009 fd8f 	bl	800a334 <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 8000816:	1dbb      	adds	r3, r7, #6
 8000818:	4619      	mov	r1, r3
 800081a:	20fe      	movs	r0, #254	@ 0xfe
 800081c:	f000 f83c 	bl	8000898 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	f245 4249 	movw	r2, #21577	@ 0x5449
 8000826:	4293      	cmp	r3, r2
 8000828:	d001      	beq.n	800082e <INA3221_Init+0x32>
		while(1);
 800082a:	bf00      	nop
 800082c:	e7fd      	b.n	800082a <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 800082e:	f647 5127 	movw	r1, #32039	@ 0x7d27
 8000832:	2000      	movs	r0, #0
 8000834:	f000 f866 	bl	8000904 <INA3221_write_reg>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4619      	mov	r1, r3
 800084c:	2002      	movs	r0, #2
 800084e:	f000 f823 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3302      	adds	r3, #2
 8000856:	4619      	mov	r1, r3
 8000858:	2004      	movs	r0, #4
 800085a:	f000 f81d 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3304      	adds	r3, #4
 8000862:	4619      	mov	r1, r3
 8000864:	2006      	movs	r0, #6
 8000866:	f000 f817 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3306      	adds	r3, #6
 800086e:	4619      	mov	r1, r3
 8000870:	2001      	movs	r0, #1
 8000872:	f000 f811 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3308      	adds	r3, #8
 800087a:	4619      	mov	r1, r3
 800087c:	2003      	movs	r0, #3
 800087e:	f000 f80b 	bl	8000898 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	330a      	adds	r3, #10
 8000886:	4619      	mov	r1, r3
 8000888:	2005      	movs	r0, #5
 800088a:	f000 f805 	bl	8000898 <INA3221_read_reg>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af02      	add	r7, sp, #8
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 80008aa:	2300      	movs	r3, #0
 80008ac:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 80008ae:	1dfa      	adds	r2, r7, #7
 80008b0:	2364      	movs	r3, #100	@ 0x64
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2301      	movs	r3, #1
 80008b6:	2180      	movs	r1, #128	@ 0x80
 80008b8:	4811      	ldr	r0, [pc, #68]	@ (8000900 <INA3221_read_reg+0x68>)
 80008ba:	f00c ff91 	bl	800d7e0 <HAL_I2C_Master_Transmit>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d118      	bne.n	80008f6 <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 80008c4:	f107 0208 	add.w	r2, r7, #8
 80008c8:	2364      	movs	r3, #100	@ 0x64
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2302      	movs	r3, #2
 80008ce:	2180      	movs	r1, #128	@ 0x80
 80008d0:	480b      	ldr	r0, [pc, #44]	@ (8000900 <INA3221_read_reg+0x68>)
 80008d2:	f00d f89d 	bl	800da10 <HAL_I2C_Master_Receive>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10c      	bne.n	80008f6 <INA3221_read_reg+0x5e>
		{
			result = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80008e0:	7a3b      	ldrb	r3, [r7, #8]
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7a7b      	ldrb	r3, [r7, #9]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200002e8 	.word	0x200002e8

08000904 <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af02      	add	r7, sp, #8
 800090a:	4603      	mov	r3, r0
 800090c:	460a      	mov	r2, r1
 800090e:	71fb      	strb	r3, [r7, #7]
 8000910:	4613      	mov	r3, r2
 8000912:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 8000914:	f04f 33ff 	mov.w	r3, #4294967295
 8000918:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 800091e:	88bb      	ldrh	r3, [r7, #4]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	b29b      	uxth	r3, r3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 800092e:	f107 0208 	add.w	r2, r7, #8
 8000932:	2364      	movs	r3, #100	@ 0x64
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2303      	movs	r3, #3
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	4806      	ldr	r0, [pc, #24]	@ (8000954 <INA3221_write_reg+0x50>)
 800093c:	f00c ff50 	bl	800d7e0 <HAL_I2C_Master_Transmit>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d101      	bne.n	800094a <INA3221_write_reg+0x46>
    {
        result = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200002e8 	.word	0x200002e8

08000958 <RTC_Init>:
#include "RTC.h"


/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
	for (int retry = 0; retry < 3; retry++)
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	e00b      	b.n	800097c <RTC_Init+0x24>
	{
		if (Get_DateTime_From_Network())
 8000964:	f000 f814 	bl	8000990 <Get_DateTime_From_Network>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d10c      	bne.n	8000988 <RTC_Init+0x30>
		{
			return;
		}
		HAL_Delay(1000);
 800096e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000972:	f009 fcdf 	bl	800a334 <HAL_Delay>
	for (int retry = 0; retry < 3; retry++)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3301      	adds	r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b02      	cmp	r3, #2
 8000980:	ddf0      	ble.n	8000964 <RTC_Init+0xc>
	}
	Set_Default_DateTime();
 8000982:	f000 f903 	bl	8000b8c <Set_Default_DateTime>
 8000986:	e000      	b.n	800098a <RTC_Init+0x32>
			return;
 8000988:	bf00      	nop
}
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <Get_DateTime_From_Network>:

/*-----SINCRONIZZAZIONE RTC DA RETE-----*/
int Get_DateTime_From_Network(void)
{
 8000990:	b5b0      	push	{r4, r5, r7, lr}
 8000992:	b0a2      	sub	sp, #136	@ 0x88
 8000994:	af00      	add	r7, sp, #0
	char response[100] = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2264      	movs	r2, #100	@ 0x64
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f014 fd3c 	bl	801541c <memset>
	RTC_DateTypeDef sDate = {0};
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 80009b6:	4871      	ldr	r0, [pc, #452]	@ (8000b7c <Get_DateTime_From_Network+0x1ec>)
 80009b8:	f000 fc4c 	bl	8001254 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fc73 	bl	80012ac <SIM_Receive_Response>

    char* cclk_pos = strstr(response, "+CCLK: \"");
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	496d      	ldr	r1, [pc, #436]	@ (8000b80 <Get_DateTime_From_Network+0x1f0>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f014 fd5f 	bl	8015490 <strstr>
 80009d2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (cclk_pos == NULL)
 80009d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <Get_DateTime_From_Network+0x52>
	{
        return 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	e0c8      	b.n	8000b74 <Get_DateTime_From_Network+0x1e4>
    }

    char* time_start = cclk_pos + 8;
 80009e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80009e6:	3308      	adds	r3, #8
 80009e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (strlen(time_start) < 17)
 80009ec:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80009f0:	f7ff fbf8 	bl	80001e4 <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b10      	cmp	r3, #16
 80009f8:	d801      	bhi.n	80009fe <Get_DateTime_From_Network+0x6e>
	{
		return 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e0ba      	b.n	8000b74 <Get_DateTime_From_Network+0x1e4>
	}

	sDate.Year = (time_start[0] - '0') * 10 + (time_start[1] - '0');
 80009fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	3b30      	subs	r3, #48	@ 0x30
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	461a      	mov	r2, r3
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a16:	3301      	adds	r3, #1
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	3b30      	subs	r3, #48	@ 0x30
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (time_start[3] - '0') * 10 + (time_start[4] - '0');
 8000a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a28:	3303      	adds	r3, #3
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	3b30      	subs	r3, #48	@ 0x30
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a3e:	3304      	adds	r3, #4
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	3b30      	subs	r3, #48	@ 0x30
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	767b      	strb	r3, [r7, #25]
	sDate.Date = (time_start[6] - '0') * 10 + (time_start[7] - '0');
 8000a4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a50:	3306      	adds	r3, #6
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	3b30      	subs	r3, #48	@ 0x30
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	461a      	mov	r2, r3
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a66:	3307      	adds	r3, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	3b30      	subs	r3, #48	@ 0x30
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (time_start[9] - '0') * 10 + (time_start[10] - '0');
 8000a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a78:	3309      	adds	r3, #9
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3b30      	subs	r3, #48	@ 0x30
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a8e:	330a      	adds	r3, #10
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	3b30      	subs	r3, #48	@ 0x30
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (time_start[12] - '0') * 10 + (time_start[13] - '0');
 8000a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000aa0:	330c      	adds	r3, #12
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	3b30      	subs	r3, #48	@ 0x30
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ab6:	330d      	adds	r3, #13
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	3b30      	subs	r3, #48	@ 0x30
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (time_start[15] - '0') * 10 + (time_start[16] - '0');
 8000ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ac8:	330f      	adds	r3, #15
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	3b30      	subs	r3, #48	@ 0x30
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ade:	3310      	adds	r3, #16
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	3b30      	subs	r3, #48	@ 0x30
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	71bb      	strb	r3, [r7, #6]

	if (sDate.Month < 1 || sDate.Month > 12 ||
 8000aec:	7e7b      	ldrb	r3, [r7, #25]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d011      	beq.n	8000b16 <Get_DateTime_From_Network+0x186>
 8000af2:	7e7b      	ldrb	r3, [r7, #25]
 8000af4:	2b0c      	cmp	r3, #12
 8000af6:	d80e      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 8000af8:	7ebb      	ldrb	r3, [r7, #26]
	if (sDate.Month < 1 || sDate.Month > 12 ||
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00b      	beq.n	8000b16 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 8000afe:	7ebb      	ldrb	r3, [r7, #26]
 8000b00:	2b1f      	cmp	r3, #31
 8000b02:	d808      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 8000b04:	793b      	ldrb	r3, [r7, #4]
        sDate.Date < 1 || sDate.Date > 31 ||
 8000b06:	2b17      	cmp	r3, #23
 8000b08:	d805      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 8000b0a:	797b      	ldrb	r3, [r7, #5]
 8000b0c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000b0e:	d802      	bhi.n	8000b16 <Get_DateTime_From_Network+0x186>
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	2b3b      	cmp	r3, #59	@ 0x3b
 8000b14:	d901      	bls.n	8000b1a <Get_DateTime_From_Network+0x18a>
        return 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e02c      	b.n	8000b74 <Get_DateTime_From_Network+0x1e4>
    }

	sDate.WeekDay = Calculate_Weekday(sDate.Year + 2000, sDate.Month, sDate.Date);
 8000b1a:	7efb      	ldrb	r3, [r7, #27]
 8000b1c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	7e79      	ldrb	r1, [r7, #25]
 8000b24:	7eba      	ldrb	r2, [r7, #26]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f874 	bl	8000c14 <Calculate_Weekday>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	763b      	strb	r3, [r7, #24]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4810      	ldr	r0, [pc, #64]	@ (8000b84 <Get_DateTime_From_Network+0x1f4>)
 8000b42:	f00f fc9c 	bl	801047e <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <Get_DateTime_From_Network+0x1f4>)
 8000b4e:	f00f fb9d 	bl	801028c <HAL_RTC_SetTime>

    sys.onDate = sDate;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <Get_DateTime_From_Network+0x1f8>)
 8000b54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b58:	461a      	mov	r2, r3
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <Get_DateTime_From_Network+0x1f8>)
 8000b60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b64:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 8000b68:	1d3d      	adds	r5, r7, #4
 8000b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6e:	682b      	ldr	r3, [r5, #0]
 8000b70:	6023      	str	r3, [r4, #0]
    
	return 1;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3788      	adds	r7, #136	@ 0x88
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b7c:	080165d4 	.word	0x080165d4
 8000b80:	080165e0 	.word	0x080165e0
 8000b84:	20000380 	.word	0x20000380
 8000b88:	20000740 	.word	0x20000740

08000b8c <Set_Default_DateTime>:

/*-----DATA E ORA DI DEFAULT 1/1/2020 00:00:00-----*/
void Set_Default_DateTime(void)
{
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
    RTC_TimeTypeDef sTime = {0};
 8000b96:	463b      	mov	r3, r7
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]

    // Default: 01/01/2020 00:00:00
    sDate.Year = 20;  // 2020
 8000ba4:	2314      	movs	r3, #20
 8000ba6:	75fb      	strb	r3, [r7, #23]
    sDate.Month = RTC_MONTH_JANUARY;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	757b      	strb	r3, [r7, #21]
    sDate.Date = 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	75bb      	strb	r3, [r7, #22]
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // 1 Jan 2020 era mercoledì
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	753b      	strb	r3, [r7, #20]

    sTime.Hours = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	70bb      	strb	r3, [r7, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480e      	ldr	r0, [pc, #56]	@ (8000c0c <Set_Default_DateTime+0x80>)
 8000bd2:	f00f fc54 	bl	801047e <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480b      	ldr	r0, [pc, #44]	@ (8000c0c <Set_Default_DateTime+0x80>)
 8000bde:	f00f fb55 	bl	801028c <HAL_RTC_SetTime>

    sys.onDate = sDate;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <Set_Default_DateTime+0x84>)
 8000be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000be8:	461a      	mov	r2, r3
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 8000bee:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <Set_Default_DateTime+0x84>)
 8000bf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000bf4:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 8000bf8:	463d      	mov	r5, r7
 8000bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfe:	682b      	ldr	r3, [r5, #0]
 8000c00:	6023      	str	r3, [r4, #0]
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bdb0      	pop	{r4, r5, r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000380 	.word	0x20000380
 8000c10:	20000740 	.word	0x20000740

08000c14 <Calculate_Weekday>:

/*-----CALCOLO GIORNO SETTIMANA-----*/
uint8_t Calculate_Weekday(uint16_t year, uint8_t month, uint8_t day)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	80fb      	strh	r3, [r7, #6]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	717b      	strb	r3, [r7, #5]
 8000c22:	4613      	mov	r3, r2
 8000c24:	713b      	strb	r3, [r7, #4]
    // Algoritmo di Zeller per calcolo giorno settimana
    if (month < 3) {
 8000c26:	797b      	ldrb	r3, [r7, #5]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d805      	bhi.n	8000c38 <Calculate_Weekday+0x24>
        month += 12;
 8000c2c:	797b      	ldrb	r3, [r7, #5]
 8000c2e:	330c      	adds	r3, #12
 8000c30:	717b      	strb	r3, [r7, #5]
        year--;
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	80fb      	strh	r3, [r7, #6]
    }
    uint8_t zeller_day = (day + ((13 * (month + 1)) / 5) + year + (year / 4) - (year / 100) + (year / 400)) % 7;
 8000c38:	7939      	ldrb	r1, [r7, #4]
 8000c3a:	797b      	ldrb	r3, [r7, #5]
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	4a1e      	ldr	r2, [pc, #120]	@ (8000cc4 <Calculate_Weekday+0xb0>)
 8000c4a:	fb82 0203 	smull	r0, r2, r2, r3
 8000c4e:	1052      	asrs	r2, r2, #1
 8000c50:	17db      	asrs	r3, r3, #31
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	18ca      	adds	r2, r1, r3
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	4413      	add	r3, r2
 8000c5a:	88fa      	ldrh	r2, [r7, #6]
 8000c5c:	0892      	lsrs	r2, r2, #2
 8000c5e:	b292      	uxth	r2, r2
 8000c60:	4413      	add	r3, r2
 8000c62:	88fa      	ldrh	r2, [r7, #6]
 8000c64:	4918      	ldr	r1, [pc, #96]	@ (8000cc8 <Calculate_Weekday+0xb4>)
 8000c66:	fba1 1202 	umull	r1, r2, r1, r2
 8000c6a:	0952      	lsrs	r2, r2, #5
 8000c6c:	b292      	uxth	r2, r2
 8000c6e:	1a9b      	subs	r3, r3, r2
 8000c70:	88fa      	ldrh	r2, [r7, #6]
 8000c72:	4915      	ldr	r1, [pc, #84]	@ (8000cc8 <Calculate_Weekday+0xb4>)
 8000c74:	fba1 1202 	umull	r1, r2, r1, r2
 8000c78:	09d2      	lsrs	r2, r2, #7
 8000c7a:	b292      	uxth	r2, r2
 8000c7c:	441a      	add	r2, r3
 8000c7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <Calculate_Weekday+0xb8>)
 8000c80:	fb83 1302 	smull	r1, r3, r3, r2
 8000c84:	4413      	add	r3, r2
 8000c86:	1099      	asrs	r1, r3, #2
 8000c88:	17d3      	asrs	r3, r2, #31
 8000c8a:	1ac9      	subs	r1, r1, r3
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	1ad1      	subs	r1, r2, r3
 8000c94:	460b      	mov	r3, r1
 8000c96:	73fb      	strb	r3, [r7, #15]

    uint8_t hal_weekday_map[] = {RTC_WEEKDAY_SATURDAY, RTC_WEEKDAY_SUNDAY, RTC_WEEKDAY_MONDAY,
 8000c98:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <Calculate_Weekday+0xbc>)
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ca2:	6018      	str	r0, [r3, #0]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	8019      	strh	r1, [r3, #0]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	0c0a      	lsrs	r2, r1, #16
 8000cac:	701a      	strb	r2, [r3, #0]
                                 RTC_WEEKDAY_TUESDAY, RTC_WEEKDAY_WEDNESDAY, RTC_WEEKDAY_THURSDAY, RTC_WEEKDAY_FRIDAY};

    return hal_weekday_map[zeller_day];
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	3310      	adds	r3, #16
 8000cb2:	443b      	add	r3, r7
 8000cb4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	66666667 	.word	0x66666667
 8000cc8:	51eb851f 	.word	0x51eb851f
 8000ccc:	92492493 	.word	0x92492493
 8000cd0:	080165ec 	.word	0x080165ec

08000cd4 <SIM_Init>:
#include "DS18B20.h"
#include "process.h"

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
int SIM_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000cda:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "a");
 8000cdc:	49bb      	ldr	r1, [pc, #748]	@ (8000fcc <SIM_Init+0x2f8>)
 8000cde:	48bc      	ldr	r0, [pc, #752]	@ (8000fd0 <SIM_Init+0x2fc>)
 8000ce0:	f014 fb3c 	bl	801535c <siprintf>
	sprintf(sys.MQTT.clientID, "a");
 8000ce4:	49b9      	ldr	r1, [pc, #740]	@ (8000fcc <SIM_Init+0x2f8>)
 8000ce6:	48bb      	ldr	r0, [pc, #748]	@ (8000fd4 <SIM_Init+0x300>)
 8000ce8:	f014 fb38 	bl	801535c <siprintf>
	sprintf(sys.MQTT.server_name, "a");
 8000cec:	49b7      	ldr	r1, [pc, #732]	@ (8000fcc <SIM_Init+0x2f8>)
 8000cee:	48ba      	ldr	r0, [pc, #744]	@ (8000fd8 <SIM_Init+0x304>)
 8000cf0:	f014 fb34 	bl	801535c <siprintf>
	sprintf(sys.MQTT.port, "a");
 8000cf4:	49b5      	ldr	r1, [pc, #724]	@ (8000fcc <SIM_Init+0x2f8>)
 8000cf6:	48b9      	ldr	r0, [pc, #740]	@ (8000fdc <SIM_Init+0x308>)
 8000cf8:	f014 fb30 	bl	801535c <siprintf>
	sprintf(sys.MQTT.username, "a");
 8000cfc:	49b3      	ldr	r1, [pc, #716]	@ (8000fcc <SIM_Init+0x2f8>)
 8000cfe:	48b8      	ldr	r0, [pc, #736]	@ (8000fe0 <SIM_Init+0x30c>)
 8000d00:	f014 fb2c 	bl	801535c <siprintf>
	sprintf(sys.MQTT.password, "a");
 8000d04:	49b1      	ldr	r1, [pc, #708]	@ (8000fcc <SIM_Init+0x2f8>)
 8000d06:	48b7      	ldr	r0, [pc, #732]	@ (8000fe4 <SIM_Init+0x310>)
 8000d08:	f014 fb28 	bl	801535c <siprintf>
	sprintf(sys.TCP.IP_address, "a");
 8000d0c:	49af      	ldr	r1, [pc, #700]	@ (8000fcc <SIM_Init+0x2f8>)
 8000d0e:	48b6      	ldr	r0, [pc, #728]	@ (8000fe8 <SIM_Init+0x314>)
 8000d10:	f014 fb24 	bl	801535c <siprintf>
	sprintf(sys.TCP.Port, "a");
 8000d14:	49ad      	ldr	r1, [pc, #692]	@ (8000fcc <SIM_Init+0x2f8>)
 8000d16:	48b5      	ldr	r0, [pc, #724]	@ (8000fec <SIM_Init+0x318>)
 8000d18:	f014 fb20 	bl	801535c <siprintf>
	strcpy(sys.MQTT.Data_Topic, config.data_topic);
 8000d1c:	49b4      	ldr	r1, [pc, #720]	@ (8000ff0 <SIM_Init+0x31c>)
 8000d1e:	48b5      	ldr	r0, [pc, #724]	@ (8000ff4 <SIM_Init+0x320>)
 8000d20:	f014 fbf8 	bl	8015514 <strcpy>
	strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8000d24:	49b4      	ldr	r1, [pc, #720]	@ (8000ff8 <SIM_Init+0x324>)
 8000d26:	48b5      	ldr	r0, [pc, #724]	@ (8000ffc <SIM_Init+0x328>)
 8000d28:	f014 fbf4 	bl	8015514 <strcpy>
	strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8000d2c:	49b4      	ldr	r1, [pc, #720]	@ (8001000 <SIM_Init+0x32c>)
 8000d2e:	48b5      	ldr	r0, [pc, #724]	@ (8001004 <SIM_Init+0x330>)
 8000d30:	f014 fbf0 	bl	8015514 <strcpy>
	strcpy(sys.MQTT.Info_Topic, config.info_topic);
 8000d34:	49b4      	ldr	r1, [pc, #720]	@ (8001008 <SIM_Init+0x334>)
 8000d36:	48b5      	ldr	r0, [pc, #724]	@ (800100c <SIM_Init+0x338>)
 8000d38:	f014 fbec 	bl	8015514 <strcpy>

	SIM_Power_On();
 8000d3c:	f000 fa74 	bl	8001228 <SIM_Power_On>
	HAL_Delay(5000);
 8000d40:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000d44:	f009 faf6 	bl	800a334 <HAL_Delay>

	SIM_Send_Command("AT\r");                                                                     //Verifica comunicazione
 8000d48:	48b1      	ldr	r0, [pc, #708]	@ (8001010 <SIM_Init+0x33c>)
 8000d4a:	f000 fa83 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8000d4e:	48b1      	ldr	r0, [pc, #708]	@ (8001014 <SIM_Init+0x340>)
 8000d50:	f000 febe 	bl	8001ad0 <SIM_Wait_Response>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <SIM_Init+0x8c>
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e23c      	b.n	80011da <SIM_Init+0x506>

	SIM_Send_Command("AT+IPR=921600\r");                                                          //Baudrate a 921600
 8000d60:	48ad      	ldr	r0, [pc, #692]	@ (8001018 <SIM_Init+0x344>)
 8000d62:	f000 fa77 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8000d66:	48ab      	ldr	r0, [pc, #684]	@ (8001014 <SIM_Init+0x340>)
 8000d68:	f000 feb2 	bl	8001ad0 <SIM_Wait_Response>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d002      	beq.n	8000d78 <SIM_Init+0xa4>
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e230      	b.n	80011da <SIM_Init+0x506>

	huart1.Init.BaudRate = 921600;
 8000d78:	4ba8      	ldr	r3, [pc, #672]	@ (800101c <SIM_Init+0x348>)
 8000d7a:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000d7e:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(SIM_UART);
 8000d80:	48a6      	ldr	r0, [pc, #664]	@ (800101c <SIM_Init+0x348>)
 8000d82:	f012 feff 	bl	8013b84 <HAL_UART_Init>

	SIM_Send_Command("AT+CFUN=1\r");                                                              //Full functionality
 8000d86:	48a6      	ldr	r0, [pc, #664]	@ (8001020 <SIM_Init+0x34c>)
 8000d88:	f000 fa64 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8000d8c:	48a1      	ldr	r0, [pc, #644]	@ (8001014 <SIM_Init+0x340>)
 8000d8e:	f000 fe9f 	bl	8001ad0 <SIM_Wait_Response>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <SIM_Init+0xca>
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	e21d      	b.n	80011da <SIM_Init+0x506>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //Modalità solo LTE o NB-IoT
 8000d9e:	48a1      	ldr	r0, [pc, #644]	@ (8001024 <SIM_Init+0x350>)
 8000da0:	f000 fa58 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8000da4:	489b      	ldr	r0, [pc, #620]	@ (8001014 <SIM_Init+0x340>)
 8000da6:	f000 fe93 	bl	8001ad0 <SIM_Wait_Response>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <SIM_Init+0xe2>
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295
 8000db4:	e211      	b.n	80011da <SIM_Init+0x506>

	SIM_Send_Command("AT+CMNB=2\r");                                                              //NB-IoT
 8000db6:	489c      	ldr	r0, [pc, #624]	@ (8001028 <SIM_Init+0x354>)
 8000db8:	f000 fa4c 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8000dbc:	4895      	ldr	r0, [pc, #596]	@ (8001014 <SIM_Init+0x340>)
 8000dbe:	f000 fe87 	bl	8001ad0 <SIM_Wait_Response>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d002      	beq.n	8000dce <SIM_Init+0xfa>
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dcc:	e205      	b.n	80011da <SIM_Init+0x506>

	SIM_Send_Command("AT+NBSC=1\r");                                                              //Abilitazione scrambling feature DA VEDERE SE L'OPERATORE LA RICHIEDE
 8000dce:	4897      	ldr	r0, [pc, #604]	@ (800102c <SIM_Init+0x358>)
 8000dd0:	f000 fa40 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8000dd4:	488f      	ldr	r0, [pc, #572]	@ (8001014 <SIM_Init+0x340>)
 8000dd6:	f000 fe7b 	bl	8001ad0 <SIM_Wait_Response>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <SIM_Init+0x112>
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	e1f9      	b.n	80011da <SIM_Init+0x506>

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 8000de6:	4892      	ldr	r0, [pc, #584]	@ (8001030 <SIM_Init+0x35c>)
 8000de8:	f000 fa34 	bl	8001254 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fa5b 	bl	80012ac <SIM_Receive_Response>
	int stat = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
	int n, stat_value;
	if(strstr(response, "+CEREG: ") != NULL)
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	498c      	ldr	r1, [pc, #560]	@ (8001034 <SIM_Init+0x360>)
 8000e02:	4618      	mov	r0, r3
 8000e04:	f014 fb44 	bl	8015490 <strstr>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d03a      	beq.n	8000e84 <SIM_Init+0x1b0>
	{
		while(stat != 1)
 8000e0e:	e035      	b.n	8000e7c <SIM_Init+0x1a8>
		{
			if(sscanf(response, "+CEREG: %d,%d", &n, &stat_value) >= 2) 
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	f107 0208 	add.w	r2, r7, #8
 8000e16:	f107 000c 	add.w	r0, r7, #12
 8000e1a:	4987      	ldr	r1, [pc, #540]	@ (8001038 <SIM_Init+0x364>)
 8000e1c:	f014 fac0 	bl	80153a0 <siscanf>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	dd1e      	ble.n	8000e64 <SIM_Init+0x190>
			{
				if(stat_value == 1 || stat_value == 5)
 8000e26:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e2a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d006      	beq.n	8000e42 <SIM_Init+0x16e>
 8000e34:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e38:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b05      	cmp	r3, #5
 8000e40:	d103      	bne.n	8000e4a <SIM_Init+0x176>
			    {
					 stat = 1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000e48:	e018      	b.n	8000e7c <SIM_Init+0x1a8>
				}
				 else
				{
					SIM_Send_Command("AT+CEREG?\r");
 8000e4a:	4879      	ldr	r0, [pc, #484]	@ (8001030 <SIM_Init+0x35c>)
 8000e4c:	f000 fa02 	bl	8001254 <SIM_Send_Command>
					SIM_Receive_Response(response);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fa29 	bl	80012ac <SIM_Receive_Response>
					HAL_Delay(1000);
 8000e5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e5e:	f009 fa69 	bl	800a334 <HAL_Delay>
 8000e62:	e00b      	b.n	8000e7c <SIM_Init+0x1a8>
				}
			}
			else  
			{
				SIM_Send_Command("AT+CEREG?\r");
 8000e64:	4872      	ldr	r0, [pc, #456]	@ (8001030 <SIM_Init+0x35c>)
 8000e66:	f000 f9f5 	bl	8001254 <SIM_Send_Command>
				SIM_Receive_Response(response);
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fa1c 	bl	80012ac <SIM_Receive_Response>
				HAL_Delay(1000);
 8000e74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e78:	f009 fa5c 	bl	800a334 <HAL_Delay>
		while(stat != 1)
 8000e7c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d1c5      	bne.n	8000e10 <SIM_Init+0x13c>
			}
		}

	}

	sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                    //Configurazione APN
 8000e84:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e88:	4a51      	ldr	r2, [pc, #324]	@ (8000fd0 <SIM_Init+0x2fc>)
 8000e8a:	496c      	ldr	r1, [pc, #432]	@ (800103c <SIM_Init+0x368>)
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f014 fa65 	bl	801535c <siprintf>
	SIM_Send_Command(command);
 8000e92:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f9dc 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8000e9c:	485d      	ldr	r0, [pc, #372]	@ (8001014 <SIM_Init+0x340>)
 8000e9e:	f000 fe17 	bl	8001ad0 <SIM_Wait_Response>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <SIM_Init+0x1da>
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eac:	e195      	b.n	80011da <SIM_Init+0x506>

	SIM_Send_Command("AT+CNACT=1\r");                                                             //Attivazione della rete
 8000eae:	4864      	ldr	r0, [pc, #400]	@ (8001040 <SIM_Init+0x36c>)
 8000eb0:	f000 f9d0 	bl	8001254 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 f9f7 	bl	80012ac <SIM_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	4960      	ldr	r1, [pc, #384]	@ (8001044 <SIM_Init+0x370>)
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f014 fae3 	bl	8015490 <strstr>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d115      	bne.n	8000efc <SIM_Init+0x228>
	{
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000ed0:	e00b      	b.n	8000eea <SIM_Init+0x216>
		{
			SIM_Send_Command("AT+CNACT=1\r");
 8000ed2:	485b      	ldr	r0, [pc, #364]	@ (8001040 <SIM_Init+0x36c>)
 8000ed4:	f000 f9be 	bl	8001254 <SIM_Send_Command>
			SIM_Receive_Response(response);
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f9e5 	bl	80012ac <SIM_Receive_Response>
			HAL_Delay(1000);
 8000ee2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ee6:	f009 fa25 	bl	800a334 <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	4955      	ldr	r1, [pc, #340]	@ (8001044 <SIM_Init+0x370>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f014 facd 	bl	8015490 <strstr>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0ea      	beq.n	8000ed2 <SIM_Init+0x1fe>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 8000efc:	4852      	ldr	r0, [pc, #328]	@ (8001048 <SIM_Init+0x374>)
 8000efe:	f000 f9a9 	bl	8001254 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f9d0 	bl	80012ac <SIM_Receive_Response>
	while(!SIM_Check_IP(response))
 8000f0c:	e00b      	b.n	8000f26 <SIM_Init+0x252>
	{
		SIM_Send_Command("AT+CNACT?\r");
 8000f0e:	484e      	ldr	r0, [pc, #312]	@ (8001048 <SIM_Init+0x374>)
 8000f10:	f000 f9a0 	bl	8001254 <SIM_Send_Command>
		SIM_Receive_Response(response);
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f9c7 	bl	80012ac <SIM_Receive_Response>
		HAL_Delay(1000);
 8000f1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f22:	f009 fa07 	bl	800a334 <HAL_Delay>
	while(!SIM_Check_IP(response))
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f9d8 	bl	80012e0 <SIM_Check_IP>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0eb      	beq.n	8000f0e <SIM_Init+0x23a>
	}

	sprintf(command, "AT+SMCONF=\"URL\",\"%s\",%s\r", sys.MQTT.server_name, sys.MQTT.port);       //Configurazione MQTT
 8000f36:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8000f3a:	4b28      	ldr	r3, [pc, #160]	@ (8000fdc <SIM_Init+0x308>)
 8000f3c:	4a26      	ldr	r2, [pc, #152]	@ (8000fd8 <SIM_Init+0x304>)
 8000f3e:	4943      	ldr	r1, [pc, #268]	@ (800104c <SIM_Init+0x378>)
 8000f40:	f014 fa0c 	bl	801535c <siprintf>
	SIM_Send_Command(command);
 8000f44:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f983 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8000f4e:	4831      	ldr	r0, [pc, #196]	@ (8001014 <SIM_Init+0x340>)
 8000f50:	f000 fdbe 	bl	8001ad0 <SIM_Wait_Response>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d002      	beq.n	8000f60 <SIM_Init+0x28c>
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e13c      	b.n	80011da <SIM_Init+0x506>

	sprintf(command, "AT+SMCONF=\"CLIENTID\",\"%s\"\r", sys.MQTT.clientID);
 8000f60:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f64:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd4 <SIM_Init+0x300>)
 8000f66:	493a      	ldr	r1, [pc, #232]	@ (8001050 <SIM_Init+0x37c>)
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f014 f9f7 	bl	801535c <siprintf>
	SIM_Send_Command(command);
 8000f6e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f96e 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8000f78:	4826      	ldr	r0, [pc, #152]	@ (8001014 <SIM_Init+0x340>)
 8000f7a:	f000 fda9 	bl	8001ad0 <SIM_Wait_Response>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d002      	beq.n	8000f8a <SIM_Init+0x2b6>
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	e127      	b.n	80011da <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONF=\"KEEPTIME\",60\r");
 8000f8a:	4832      	ldr	r0, [pc, #200]	@ (8001054 <SIM_Init+0x380>)
 8000f8c:	f000 f962 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8000f90:	4820      	ldr	r0, [pc, #128]	@ (8001014 <SIM_Init+0x340>)
 8000f92:	f000 fd9d 	bl	8001ad0 <SIM_Wait_Response>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <SIM_Init+0x2ce>
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	e11b      	b.n	80011da <SIM_Init+0x506>

	sprintf(command, "AT+SMCONF=\"USERNAME\",\"%s\"\r", sys.MQTT.username);
 8000fa2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe0 <SIM_Init+0x30c>)
 8000fa8:	492b      	ldr	r1, [pc, #172]	@ (8001058 <SIM_Init+0x384>)
 8000faa:	4618      	mov	r0, r3
 8000fac:	f014 f9d6 	bl	801535c <siprintf>
	SIM_Send_Command(command);
 8000fb0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f94d 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8000fba:	4816      	ldr	r0, [pc, #88]	@ (8001014 <SIM_Init+0x340>)
 8000fbc:	f000 fd88 	bl	8001ad0 <SIM_Wait_Response>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d04a      	beq.n	800105c <SIM_Init+0x388>
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	e106      	b.n	80011da <SIM_Init+0x506>
 8000fcc:	080165f4 	.word	0x080165f4
 8000fd0:	20001798 	.word	0x20001798
 8000fd4:	200019ac 	.word	0x200019ac
 8000fd8:	2000181c 	.word	0x2000181c
 8000fdc:	20001880 	.word	0x20001880
 8000fe0:	200018e4 	.word	0x200018e4
 8000fe4:	20001948 	.word	0x20001948
 8000fe8:	20001ba0 	.word	0x20001ba0
 8000fec:	20001c04 	.word	0x20001c04
 8000ff0:	20001cd4 	.word	0x20001cd4
 8000ff4:	20001a10 	.word	0x20001a10
 8000ff8:	20001d14 	.word	0x20001d14
 8000ffc:	20001a74 	.word	0x20001a74
 8001000:	20001d54 	.word	0x20001d54
 8001004:	20001ad8 	.word	0x20001ad8
 8001008:	20001d94 	.word	0x20001d94
 800100c:	20001b3c 	.word	0x20001b3c
 8001010:	080165f8 	.word	0x080165f8
 8001014:	080165fc 	.word	0x080165fc
 8001018:	08016600 	.word	0x08016600
 800101c:	20000624 	.word	0x20000624
 8001020:	08016610 	.word	0x08016610
 8001024:	0801661c 	.word	0x0801661c
 8001028:	08016628 	.word	0x08016628
 800102c:	08016634 	.word	0x08016634
 8001030:	08016640 	.word	0x08016640
 8001034:	0801664c 	.word	0x0801664c
 8001038:	08016658 	.word	0x08016658
 800103c:	08016668 	.word	0x08016668
 8001040:	08016680 	.word	0x08016680
 8001044:	0801668c 	.word	0x0801668c
 8001048:	080166a0 	.word	0x080166a0
 800104c:	080166ac 	.word	0x080166ac
 8001050:	080166c8 	.word	0x080166c8
 8001054:	080166e4 	.word	0x080166e4
 8001058:	08016700 	.word	0x08016700

	sprintf(command, "AT+SMCONF=\"PASSWORD\",\"%s\"\r", sys.MQTT.password);
 800105c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001060:	4a60      	ldr	r2, [pc, #384]	@ (80011e4 <SIM_Init+0x510>)
 8001062:	4961      	ldr	r1, [pc, #388]	@ (80011e8 <SIM_Init+0x514>)
 8001064:	4618      	mov	r0, r3
 8001066:	f014 f979 	bl	801535c <siprintf>
	SIM_Send_Command(command);
 800106a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f8f0 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001074:	485d      	ldr	r0, [pc, #372]	@ (80011ec <SIM_Init+0x518>)
 8001076:	f000 fd2b 	bl	8001ad0 <SIM_Wait_Response>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <SIM_Init+0x3b2>
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	e0a9      	b.n	80011da <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONF=\"QOS\",1\r");
 8001086:	485a      	ldr	r0, [pc, #360]	@ (80011f0 <SIM_Init+0x51c>)
 8001088:	f000 f8e4 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800108c:	4857      	ldr	r0, [pc, #348]	@ (80011ec <SIM_Init+0x518>)
 800108e:	f000 fd1f 	bl	8001ad0 <SIM_Wait_Response>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d002      	beq.n	800109e <SIM_Init+0x3ca>
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	e09d      	b.n	80011da <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONF=\"RETAIN\",0\r");
 800109e:	4855      	ldr	r0, [pc, #340]	@ (80011f4 <SIM_Init+0x520>)
 80010a0:	f000 f8d8 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80010a4:	4851      	ldr	r0, [pc, #324]	@ (80011ec <SIM_Init+0x518>)
 80010a6:	f000 fd13 	bl	8001ad0 <SIM_Wait_Response>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <SIM_Init+0x3e2>
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	e091      	b.n	80011da <SIM_Init+0x506>

	sprintf(command, "AT+SMCONF=\"TOPIC\",\"%s\"\r", sys.MQTT.Data_Topic);
 80010b6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80010ba:	4a4f      	ldr	r2, [pc, #316]	@ (80011f8 <SIM_Init+0x524>)
 80010bc:	494f      	ldr	r1, [pc, #316]	@ (80011fc <SIM_Init+0x528>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f014 f94c 	bl	801535c <siprintf>
	SIM_Send_Command(command);
 80010c4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 f8c3 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80010ce:	4847      	ldr	r0, [pc, #284]	@ (80011ec <SIM_Init+0x518>)
 80010d0:	f000 fcfe 	bl	8001ad0 <SIM_Wait_Response>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <SIM_Init+0x40c>
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	e07c      	b.n	80011da <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONN\r");                                                              //Connessione al broker MQTT
 80010e0:	4847      	ldr	r0, [pc, #284]	@ (8001200 <SIM_Init+0x52c>)
 80010e2:	f000 f8b7 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80010e6:	4841      	ldr	r0, [pc, #260]	@ (80011ec <SIM_Init+0x518>)
 80010e8:	f000 fcf2 	bl	8001ad0 <SIM_Wait_Response>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <SIM_Init+0x424>
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	e070      	b.n	80011da <SIM_Init+0x506>

	SIM_Send_Command("AT+SMSTATE?\r");                                                            //Verifica connessione al broker MQTT
 80010f8:	4842      	ldr	r0, [pc, #264]	@ (8001204 <SIM_Init+0x530>)
 80010fa:	f000 f8ab 	bl	8001254 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f8d2 	bl	80012ac <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response))
 8001108:	e00b      	b.n	8001122 <SIM_Init+0x44e>
	{
		SIM_Send_Command("AT+SMSTATE?\r");
 800110a:	483e      	ldr	r0, [pc, #248]	@ (8001204 <SIM_Init+0x530>)
 800110c:	f000 f8a2 	bl	8001254 <SIM_Send_Command>
		SIM_Receive_Response(response);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f8c9 	bl	80012ac <SIM_Receive_Response>
		HAL_Delay(1000);
 800111a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800111e:	f009 f909 	bl	800a334 <HAL_Delay>
	while(!SIM_Check_MQTT_State(response))
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f904 	bl	8001334 <SIM_Check_MQTT_State>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d0eb      	beq.n	800110a <SIM_Init+0x436>
	}

	sprintf(command, "AT+SMSUB=\"%s\",1\r", sys.MQTT.Command_Topic);                              //Iscrizione al topic per ricezione comandi dal server
 8001132:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001136:	4a34      	ldr	r2, [pc, #208]	@ (8001208 <SIM_Init+0x534>)
 8001138:	4934      	ldr	r1, [pc, #208]	@ (800120c <SIM_Init+0x538>)
 800113a:	4618      	mov	r0, r3
 800113c:	f014 f90e 	bl	801535c <siprintf>
	SIM_Send_Command(command);
 8001140:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f885 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800114a:	4828      	ldr	r0, [pc, #160]	@ (80011ec <SIM_Init+0x518>)
 800114c:	f000 fcc0 	bl	8001ad0 <SIM_Wait_Response>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <SIM_Init+0x488>
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	e03e      	b.n	80011da <SIM_Init+0x506>

	SIM_Send_Command("AT+CIPRXGET=1\r");                                                         //Impostazione ricezione manuale da server TCP
 800115c:	482c      	ldr	r0, [pc, #176]	@ (8001210 <SIM_Init+0x53c>)
 800115e:	f000 f879 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001162:	4822      	ldr	r0, [pc, #136]	@ (80011ec <SIM_Init+0x518>)
 8001164:	f000 fcb4 	bl	8001ad0 <SIM_Wait_Response>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d002      	beq.n	8001174 <SIM_Init+0x4a0>
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	e032      	b.n	80011da <SIM_Init+0x506>

	sprintf(command, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);        //Connessione TCP
 8001174:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001178:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <SIM_Init+0x540>)
 800117a:	4a27      	ldr	r2, [pc, #156]	@ (8001218 <SIM_Init+0x544>)
 800117c:	4927      	ldr	r1, [pc, #156]	@ (800121c <SIM_Init+0x548>)
 800117e:	f014 f8ed 	bl	801535c <siprintf>
	SIM_Send_Command(command);
 8001182:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f864 	bl	8001254 <SIM_Send_Command>
	if(SIM_Wait_Response("CONNECT OK") != HAL_OK) return -1;
 800118c:	4824      	ldr	r0, [pc, #144]	@ (8001220 <SIM_Init+0x54c>)
 800118e:	f000 fc9f 	bl	8001ad0 <SIM_Wait_Response>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <SIM_Init+0x4ca>
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	e01d      	b.n	80011da <SIM_Init+0x506>

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        //Verifica connessione al server TCP
 800119e:	4821      	ldr	r0, [pc, #132]	@ (8001224 <SIM_Init+0x550>)
 80011a0:	f000 f858 	bl	8001254 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f87f 	bl	80012ac <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response))
 80011ae:	e00b      	b.n	80011c8 <SIM_Init+0x4f4>
	{
		SIM_Send_Command("AT+CIPSTATUS=0\r");
 80011b0:	481c      	ldr	r0, [pc, #112]	@ (8001224 <SIM_Init+0x550>)
 80011b2:	f000 f84f 	bl	8001254 <SIM_Send_Command>
		SIM_Receive_Response(response);
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f876 	bl	80012ac <SIM_Receive_Response>
		HAL_Delay(1000);
 80011c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011c4:	f009 f8b6 	bl	800a334 <HAL_Delay>
	while(!SIM_Check_TCP_State(response))
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f8d7 	bl	8001380 <SIM_Check_TCP_State>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0eb      	beq.n	80011b0 <SIM_Init+0x4dc>
	}

	return 0;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20001948 	.word	0x20001948
 80011e8:	0801671c 	.word	0x0801671c
 80011ec:	080165fc 	.word	0x080165fc
 80011f0:	08016738 	.word	0x08016738
 80011f4:	0801674c 	.word	0x0801674c
 80011f8:	20001a10 	.word	0x20001a10
 80011fc:	08016764 	.word	0x08016764
 8001200:	0801677c 	.word	0x0801677c
 8001204:	08016788 	.word	0x08016788
 8001208:	20001a74 	.word	0x20001a74
 800120c:	08016798 	.word	0x08016798
 8001210:	080167ac 	.word	0x080167ac
 8001214:	20001c04 	.word	0x20001c04
 8001218:	20001ba0 	.word	0x20001ba0
 800121c:	080167bc 	.word	0x080167bc
 8001220:	080167d8 	.word	0x080167d8
 8001224:	080167e4 	.word	0x080167e4

08001228 <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001232:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001236:	f00c fa1f 	bl	800d678 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800123a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800123e:	f009 f879 	bl	800a334 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124c:	f00c fa14 	bl	800d678 <HAL_GPIO_WritePin>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}

08001254 <SIM_Send_Command>:
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
}

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7fe ffc1 	bl	80001e4 <strlen>
 8001262:	4603      	mov	r3, r0
 8001264:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(SIM_UART, (uint8_t*)command, len, 100);
 8001266:	89fa      	ldrh	r2, [r7, #14]
 8001268:	2364      	movs	r3, #100	@ 0x64
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4803      	ldr	r0, [pc, #12]	@ (800127c <SIM_Send_Command+0x28>)
 800126e:	f012 fd2d 	bl	8013ccc <HAL_UART_Transmit>
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000624 	.word	0x20000624

08001280 <SIM_Send_Command_DMA>:

/*------INVIO COMANDO AL MODULO LTE (DMA)------*/
void SIM_Send_Command_DMA(char* command)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7fe ffab 	bl	80001e4 <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit_DMA(SIM_UART, (uint8_t*)command, len);
 8001292:	89fb      	ldrh	r3, [r7, #14]
 8001294:	461a      	mov	r2, r3
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4803      	ldr	r0, [pc, #12]	@ (80012a8 <SIM_Send_Command_DMA+0x28>)
 800129a:	f012 fe69 	bl	8013f70 <HAL_UART_Transmit_DMA>
}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000624 	.word	0x20000624

080012ac <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
uint16_t SIM_Receive_Response(char* response)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	6078      	str	r0, [r7, #4]
	uint16_t max_size = 256;
 80012b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012b8:	81fb      	strh	r3, [r7, #14]
	uint16_t RxLen = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	81bb      	strh	r3, [r7, #12]

	HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t *)response, max_size, &RxLen, 1000);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	89fa      	ldrh	r2, [r7, #14]
 80012c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012c8:	9100      	str	r1, [sp, #0]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4803      	ldr	r0, [pc, #12]	@ (80012dc <SIM_Receive_Response+0x30>)
 80012ce:	f013 fe64 	bl	8014f9a <HAL_UARTEx_ReceiveToIdle>
	return RxLen;
 80012d2:	89bb      	ldrh	r3, [r7, #12]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000624 	.word	0x20000624

080012e0 <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 80012e8:	4910      	ldr	r1, [pc, #64]	@ (800132c <SIM_Check_IP+0x4c>)
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f014 f8d0 	bl	8015490 <strstr>
 80012f0:	6178      	str	r0, [r7, #20]
    if(cnact_pos != NULL) {
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d014      	beq.n	8001322 <SIM_Check_IP+0x42>
        int context_id, status;
        if(sscanf(cnact_pos, "+CNACT: %d,%d", &context_id, &status) >= 2) {
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	f107 0210 	add.w	r2, r7, #16
 8001300:	490b      	ldr	r1, [pc, #44]	@ (8001330 <SIM_Check_IP+0x50>)
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f014 f84c 	bl	80153a0 <siscanf>
 8001308:	4603      	mov	r3, r0
 800130a:	2b01      	cmp	r3, #1
 800130c:	dd09      	ble.n	8001322 <SIM_Check_IP+0x42>
            return (context_id == 1 && status == 1) ? 1 : 0;
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d104      	bne.n	800131e <SIM_Check_IP+0x3e>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <SIM_Check_IP+0x3e>
 800131a:	2301      	movs	r3, #1
 800131c:	e002      	b.n	8001324 <SIM_Check_IP+0x44>
 800131e:	2300      	movs	r3, #0
 8001320:	e000      	b.n	8001324 <SIM_Check_IP+0x44>
        }
    }
    return 0;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	080167f4 	.word	0x080167f4
 8001330:	080167fc 	.word	0x080167fc

08001334 <SIM_Check_MQTT_State>:

/*------CONTROLLO STATO CONNESSIONE MQTT------*/
int SIM_Check_MQTT_State(const char* response)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    char* smstate_pos = strstr(response, "+SMSTATE:");
 800133c:	490e      	ldr	r1, [pc, #56]	@ (8001378 <SIM_Check_MQTT_State+0x44>)
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f014 f8a6 	bl	8015490 <strstr>
 8001344:	60f8      	str	r0, [r7, #12]
    if(smstate_pos != NULL) {
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d010      	beq.n	800136e <SIM_Check_MQTT_State+0x3a>
        int mqtt_state;
        if(sscanf(smstate_pos, "+SMSTATE: %d", &mqtt_state) >= 1) {
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	461a      	mov	r2, r3
 8001352:	490a      	ldr	r1, [pc, #40]	@ (800137c <SIM_Check_MQTT_State+0x48>)
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f014 f823 	bl	80153a0 <siscanf>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	dd06      	ble.n	800136e <SIM_Check_MQTT_State+0x3a>
            return (mqtt_state == 1) ? 1 : 0;
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2b01      	cmp	r3, #1
 8001364:	bf0c      	ite	eq
 8001366:	2301      	moveq	r3, #1
 8001368:	2300      	movne	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	e000      	b.n	8001370 <SIM_Check_MQTT_State+0x3c>
        }
    }
    return 0;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	0801680c 	.word	0x0801680c
 800137c:	08016818 	.word	0x08016818

08001380 <SIM_Check_TCP_State>:

/*------CONTROLLO STATO CONNESSIONE TCP------*/
int SIM_Check_TCP_State(const char* response)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    char* cipstatus_pos = strstr(response, "+CIPSTATUS: 0");
 8001388:	490a      	ldr	r1, [pc, #40]	@ (80013b4 <SIM_Check_TCP_State+0x34>)
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f014 f880 	bl	8015490 <strstr>
 8001390:	60f8      	str	r0, [r7, #12]
    if(cipstatus_pos != NULL) {
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <SIM_Check_TCP_State+0x2a>
        // Cerca "CONNECTED" nella stessa riga
        if(strstr(cipstatus_pos, "CONNECTED") != NULL) {
 8001398:	4907      	ldr	r1, [pc, #28]	@ (80013b8 <SIM_Check_TCP_State+0x38>)
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f014 f878 	bl	8015490 <strstr>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SIM_Check_TCP_State+0x2a>
            return 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <SIM_Check_TCP_State+0x2c>
        }
    }
    return 0;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	08016828 	.word	0x08016828
 80013b8:	08016838 	.word	0x08016838

080013bc <SIM_Parse_Command>:

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Command(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
    char* buf = (char*)sim_rx_buffer;
 80013c2:	4b75      	ldr	r3, [pc, #468]	@ (8001598 <SIM_Parse_Command+0x1dc>)
 80013c4:	61fb      	str	r3, [r7, #28]

    if(strncmp(buf, "+SMSUB: ", 8) == 0)
 80013c6:	2208      	movs	r2, #8
 80013c8:	4974      	ldr	r1, [pc, #464]	@ (800159c <SIM_Parse_Command+0x1e0>)
 80013ca:	69f8      	ldr	r0, [r7, #28]
 80013cc:	f014 f83b 	bl	8015446 <strncmp>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f040 80dc 	bne.w	8001590 <SIM_Parse_Command+0x1d4>
    {
        char* pos = buf + 8;
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	3308      	adds	r3, #8
 80013dc:	61bb      	str	r3, [r7, #24]

        char* first_quote = strchr(pos, '"');
 80013de:	2122      	movs	r1, #34	@ 0x22
 80013e0:	69b8      	ldr	r0, [r7, #24]
 80013e2:	f014 f823 	bl	801542c <strchr>
 80013e6:	6178      	str	r0, [r7, #20]
        if(first_quote) {
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 80d0 	beq.w	8001590 <SIM_Parse_Command+0x1d4>
            char* second_quote = strchr(first_quote + 1, '"');
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	2122      	movs	r1, #34	@ 0x22
 80013f6:	4618      	mov	r0, r3
 80013f8:	f014 f818 	bl	801542c <strchr>
 80013fc:	6138      	str	r0, [r7, #16]

            if(second_quote) {
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80c5 	beq.w	8001590 <SIM_Parse_Command+0x1d4>
                char* third_quote = strchr(second_quote + 1, '"');
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	3301      	adds	r3, #1
 800140a:	2122      	movs	r1, #34	@ 0x22
 800140c:	4618      	mov	r0, r3
 800140e:	f014 f80d 	bl	801542c <strchr>
 8001412:	60f8      	str	r0, [r7, #12]

                if(third_quote) {
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 80ba 	beq.w	8001590 <SIM_Parse_Command+0x1d4>
                    char* cmd_pos = third_quote + 1;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3301      	adds	r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
                    char* fourth_quote = strchr(cmd_pos, '"');
 8001422:	2122      	movs	r1, #34	@ 0x22
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f014 f801 	bl	801542c <strchr>
 800142a:	6078      	str	r0, [r7, #4]

                    if(fourth_quote && (fourth_quote - cmd_pos) >= 3) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 80ae 	beq.w	8001590 <SIM_Parse_Command+0x1d4>
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	f340 80a8 	ble.w	8001590 <SIM_Parse_Command+0x1d4>

                        uint32_t cmd_val = (cmd_pos[2] << 16) | (cmd_pos[1] << 8) | cmd_pos[0];
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	3302      	adds	r3, #2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	041a      	lsls	r2, r3, #16
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	3301      	adds	r3, #1
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	4313      	orrs	r3, r2
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	7812      	ldrb	r2, [r2, #0]
 8001456:	4313      	orrs	r3, r2
 8001458:	603b      	str	r3, [r7, #0]

                        switch(cmd_val) {
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	4a50      	ldr	r2, [pc, #320]	@ (80015a0 <SIM_Parse_Command+0x1e4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	f000 808e 	beq.w	8001580 <SIM_Parse_Command+0x1c4>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	4a4e      	ldr	r2, [pc, #312]	@ (80015a0 <SIM_Parse_Command+0x1e4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	f200 808c 	bhi.w	8001586 <SIM_Parse_Command+0x1ca>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	4a4c      	ldr	r2, [pc, #304]	@ (80015a4 <SIM_Parse_Command+0x1e8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d03b      	beq.n	80014ee <SIM_Parse_Command+0x132>
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	4a4b      	ldr	r2, [pc, #300]	@ (80015a8 <SIM_Parse_Command+0x1ec>)
 800147a:	4293      	cmp	r3, r2
 800147c:	f080 8083 	bcs.w	8001586 <SIM_Parse_Command+0x1ca>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	4a4a      	ldr	r2, [pc, #296]	@ (80015ac <SIM_Parse_Command+0x1f0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d061      	beq.n	800154c <SIM_Parse_Command+0x190>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4a49      	ldr	r2, [pc, #292]	@ (80015b0 <SIM_Parse_Command+0x1f4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d27a      	bcs.n	8001586 <SIM_Parse_Command+0x1ca>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	4a48      	ldr	r2, [pc, #288]	@ (80015b4 <SIM_Parse_Command+0x1f8>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d066      	beq.n	8001566 <SIM_Parse_Command+0x1aa>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	4a46      	ldr	r2, [pc, #280]	@ (80015b4 <SIM_Parse_Command+0x1f8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d872      	bhi.n	8001586 <SIM_Parse_Command+0x1ca>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	4a45      	ldr	r2, [pc, #276]	@ (80015b8 <SIM_Parse_Command+0x1fc>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d034      	beq.n	8001512 <SIM_Parse_Command+0x156>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	4a43      	ldr	r2, [pc, #268]	@ (80015b8 <SIM_Parse_Command+0x1fc>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d86a      	bhi.n	8001586 <SIM_Parse_Command+0x1ca>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	4a42      	ldr	r2, [pc, #264]	@ (80015bc <SIM_Parse_Command+0x200>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d014      	beq.n	80014e2 <SIM_Parse_Command+0x126>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4a40      	ldr	r2, [pc, #256]	@ (80015bc <SIM_Parse_Command+0x200>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d862      	bhi.n	8001586 <SIM_Parse_Command+0x1ca>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	4a3f      	ldr	r2, [pc, #252]	@ (80015c0 <SIM_Parse_Command+0x204>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d018      	beq.n	80014fa <SIM_Parse_Command+0x13e>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	4a3d      	ldr	r2, [pc, #244]	@ (80015c0 <SIM_Parse_Command+0x204>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d85a      	bhi.n	8001586 <SIM_Parse_Command+0x1ca>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	4a3c      	ldr	r2, [pc, #240]	@ (80015c4 <SIM_Parse_Command+0x208>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d02f      	beq.n	8001538 <SIM_Parse_Command+0x17c>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	4a3b      	ldr	r2, [pc, #236]	@ (80015c8 <SIM_Parse_Command+0x20c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d012      	beq.n	8001506 <SIM_Parse_Command+0x14a>
								}
							case 0x545352: // RST
								HAL_NVIC_SystemReset();
								break;
							default: 
								break;
 80014e0:	e051      	b.n	8001586 <SIM_Parse_Command+0x1ca>
								flags.CMD.Idle = 1; 
 80014e2:	4a3a      	ldr	r2, [pc, #232]	@ (80015cc <SIM_Parse_Command+0x210>)
 80014e4:	7893      	ldrb	r3, [r2, #2]
 80014e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ea:	7093      	strb	r3, [r2, #2]
								break;    
 80014ec:	e050      	b.n	8001590 <SIM_Parse_Command+0x1d4>
								flags.CMD.Start_Meas = 1; 
 80014ee:	4a37      	ldr	r2, [pc, #220]	@ (80015cc <SIM_Parse_Command+0x210>)
 80014f0:	7893      	ldrb	r3, [r2, #2]
 80014f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014f6:	7093      	strb	r3, [r2, #2]
								break;
 80014f8:	e04a      	b.n	8001590 <SIM_Parse_Command+0x1d4>
								flags.CMD.Ping = 1; 
 80014fa:	4a34      	ldr	r2, [pc, #208]	@ (80015cc <SIM_Parse_Command+0x210>)
 80014fc:	7893      	ldrb	r3, [r2, #2]
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	7093      	strb	r3, [r2, #2]
								break;
 8001504:	e044      	b.n	8001590 <SIM_Parse_Command+0x1d4>
								flags.CMD.Data_Request = 1; 
 8001506:	4a31      	ldr	r2, [pc, #196]	@ (80015cc <SIM_Parse_Command+0x210>)
 8001508:	7893      	ldrb	r3, [r2, #2]
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	7093      	strb	r3, [r2, #2]
								break;
 8001510:	e03e      	b.n	8001590 <SIM_Parse_Command+0x1d4>
								if(!flags.CMD.Measure_Request)
 8001512:	4b2e      	ldr	r3, [pc, #184]	@ (80015cc <SIM_Parse_Command+0x210>)
 8001514:	789b      	ldrb	r3, [r3, #2]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d134      	bne.n	800158a <SIM_Parse_Command+0x1ce>
									Send_Measure_Addr = Saved_Bytes;
 8001520:	4b2b      	ldr	r3, [pc, #172]	@ (80015d0 <SIM_Parse_Command+0x214>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a2b      	ldr	r2, [pc, #172]	@ (80015d4 <SIM_Parse_Command+0x218>)
 8001526:	6013      	str	r3, [r2, #0]
									flags.CMD.Measure_Request = 1; 
 8001528:	4a28      	ldr	r2, [pc, #160]	@ (80015cc <SIM_Parse_Command+0x210>)
 800152a:	7893      	ldrb	r3, [r2, #2]
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	7093      	strb	r3, [r2, #2]
									Switch_Buffer();
 8001532:	f003 fe09 	bl	8005148 <Switch_Buffer>
								break;
 8001536:	e028      	b.n	800158a <SIM_Parse_Command+0x1ce>
								if(state == IDLE)
 8001538:	4b27      	ldr	r3, [pc, #156]	@ (80015d8 <SIM_Parse_Command+0x21c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d126      	bne.n	800158e <SIM_Parse_Command+0x1d2>
									flags.CMD.Start_OTA = 1;
 8001540:	4a22      	ldr	r2, [pc, #136]	@ (80015cc <SIM_Parse_Command+0x210>)
 8001542:	7893      	ldrb	r3, [r2, #2]
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	7093      	strb	r3, [r2, #2]
								break;
 800154a:	e020      	b.n	800158e <SIM_Parse_Command+0x1d2>
								if(state == IDLE)
 800154c:	4b22      	ldr	r3, [pc, #136]	@ (80015d8 <SIM_Parse_Command+0x21c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d108      	bne.n	8001566 <SIM_Parse_Command+0x1aa>
									flags.CMD.Set_Config = 1;
 8001554:	4a1d      	ldr	r2, [pc, #116]	@ (80015cc <SIM_Parse_Command+0x210>)
 8001556:	7893      	ldrb	r3, [r2, #2]
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	7093      	strb	r3, [r2, #2]
									SIM_Parse_Cfg(cmd_pos, fourth_quote);
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	68b8      	ldr	r0, [r7, #8]
 8001562:	f000 f83b 	bl	80015dc <SIM_Parse_Cfg>
								if(state == IDLE)
 8001566:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <SIM_Parse_Command+0x21c>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d108      	bne.n	8001580 <SIM_Parse_Command+0x1c4>
									flags.CMD.Get_Config = 1;
 800156e:	4a17      	ldr	r2, [pc, #92]	@ (80015cc <SIM_Parse_Command+0x210>)
 8001570:	7893      	ldrb	r3, [r2, #2]
 8001572:	f043 0320 	orr.w	r3, r3, #32
 8001576:	7093      	strb	r3, [r2, #2]
									SIM_Get_Cfg(cmd_pos, fourth_quote);
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	68b8      	ldr	r0, [r7, #8]
 800157c:	f000 f8ae 	bl	80016dc <SIM_Get_Cfg>
								HAL_NVIC_SystemReset();
 8001580:	f00a fbb1 	bl	800bce6 <HAL_NVIC_SystemReset>
								break;
 8001584:	e004      	b.n	8001590 <SIM_Parse_Command+0x1d4>
								break;
 8001586:	bf00      	nop
 8001588:	e002      	b.n	8001590 <SIM_Parse_Command+0x1d4>
								break;
 800158a:	bf00      	nop
 800158c:	e000      	b.n	8001590 <SIM_Parse_Command+0x1d4>
								break;
 800158e:	bf00      	nop
                    }
                }
            }
        }
    }
}
 8001590:	bf00      	nop
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200054ec 	.word	0x200054ec
 800159c:	08016844 	.word	0x08016844
 80015a0:	00545352 	.word	0x00545352
 80015a4:	00545253 	.word	0x00545253
 80015a8:	00545254 	.word	0x00545254
 80015ac:	00544553 	.word	0x00544553
 80015b0:	00544554 	.word	0x00544554
 80015b4:	00544547 	.word	0x00544547
 80015b8:	0052534d 	.word	0x0052534d
 80015bc:	004c4449 	.word	0x004c4449
 80015c0:	00474e50 	.word	0x00474e50
 80015c4:	0041544f 	.word	0x0041544f
 80015c8:	00444e53 	.word	0x00444e53
 80015cc:	20001c68 	.word	0x20001c68
 80015d0:	20004eb8 	.word	0x20004eb8
 80015d4:	20004ec0 	.word	0x20004ec0
 80015d8:	2000073c 	.word	0x2000073c

080015dc <SIM_Parse_Cfg>:

/*-----PARSING CONFIGURAZIONE-----*/
void SIM_Parse_Cfg(char* cmd_start, char* cmd_end)
{   
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
    memset(cfg_var, 0, sizeof(cfg_var));
 80015e6:	2214      	movs	r2, #20
 80015e8:	2100      	movs	r1, #0
 80015ea:	4839      	ldr	r0, [pc, #228]	@ (80016d0 <SIM_Parse_Cfg+0xf4>)
 80015ec:	f013 ff16 	bl	801541c <memset>
    memset(new_cfg_val, 0, sizeof(new_cfg_val));
 80015f0:	220a      	movs	r2, #10
 80015f2:	2100      	movs	r1, #0
 80015f4:	4837      	ldr	r0, [pc, #220]	@ (80016d4 <SIM_Parse_Cfg+0xf8>)
 80015f6:	f013 ff11 	bl	801541c <memset>
    
    char* pos = cmd_start + 4; // Salta "SET,"
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3304      	adds	r3, #4
 80015fe:	61fb      	str	r3, [r7, #28]
    
    // Prima virgola (dopo SET)
    char* comma1 = strchr(pos, ',');
 8001600:	212c      	movs	r1, #44	@ 0x2c
 8001602:	69f8      	ldr	r0, [r7, #28]
 8001604:	f013 ff12 	bl	801542c <strchr>
 8001608:	61b8      	str	r0, [r7, #24]
    if(!comma1 || comma1 >= cmd_end) return;
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d056      	beq.n	80016be <SIM_Parse_Cfg+0xe2>
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d252      	bcs.n	80016be <SIM_Parse_Cfg+0xe2>
    
    // Seconda virgola
    char* comma2 = strchr(comma1 + 1, ',');
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	3301      	adds	r3, #1
 800161c:	212c      	movs	r1, #44	@ 0x2c
 800161e:	4618      	mov	r0, r3
 8001620:	f013 ff04 	bl	801542c <strchr>
 8001624:	6178      	str	r0, [r7, #20]
    if(!comma2 || comma2 >= cmd_end) return;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d04a      	beq.n	80016c2 <SIM_Parse_Cfg+0xe6>
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d246      	bcs.n	80016c2 <SIM_Parse_Cfg+0xe6>
    
    // Terza virgola
    char* comma3 = strchr(comma2 + 1, ',');
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3301      	adds	r3, #1
 8001638:	212c      	movs	r1, #44	@ 0x2c
 800163a:	4618      	mov	r0, r3
 800163c:	f013 fef6 	bl	801542c <strchr>
 8001640:	6138      	str	r0, [r7, #16]
    if(!comma3 || comma3 >= cmd_end) return;
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d03e      	beq.n	80016c6 <SIM_Parse_Cfg+0xea>
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d23a      	bcs.n	80016c6 <SIM_Parse_Cfg+0xea>
    
    // Estrai cfg_var (tra SET, e prima virgola)
    int var_len = comma2 - comma1 - 1;
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	3b01      	subs	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
    if(var_len > 0 && var_len < sizeof(cfg_var)) 
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	dd0e      	ble.n	800167e <SIM_Parse_Cfg+0xa2>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b13      	cmp	r3, #19
 8001664:	d80b      	bhi.n	800167e <SIM_Parse_Cfg+0xa2>
	{
        strncpy(cfg_var, comma1 + 1, var_len);
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	3301      	adds	r3, #1
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	4619      	mov	r1, r3
 800166e:	4818      	ldr	r0, [pc, #96]	@ (80016d0 <SIM_Parse_Cfg+0xf4>)
 8001670:	f013 fefb 	bl	801546a <strncpy>
        cfg_var[var_len] = '\0';
 8001674:	4a16      	ldr	r2, [pc, #88]	@ (80016d0 <SIM_Parse_Cfg+0xf4>)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
    }
    
    // Estrai cfg_idx
    cfg_idx = atoi(comma2 + 1);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	4618      	mov	r0, r3
 8001684:	f013 fde0 	bl	8015248 <atoi>
 8001688:	4603      	mov	r3, r0
 800168a:	4a13      	ldr	r2, [pc, #76]	@ (80016d8 <SIM_Parse_Cfg+0xfc>)
 800168c:	6013      	str	r3, [r2, #0]
    
    // Estrai new_cfg_val
    int val_len = cmd_end - comma3 - 1;
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	3b01      	subs	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
    if(val_len > 0 && val_len < sizeof(new_cfg_val)) 
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	dd14      	ble.n	80016c8 <SIM_Parse_Cfg+0xec>
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b09      	cmp	r3, #9
 80016a2:	d811      	bhi.n	80016c8 <SIM_Parse_Cfg+0xec>
	{
        strncpy(new_cfg_val, comma3 + 1, val_len);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	3301      	adds	r3, #1
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	4619      	mov	r1, r3
 80016ac:	4809      	ldr	r0, [pc, #36]	@ (80016d4 <SIM_Parse_Cfg+0xf8>)
 80016ae:	f013 fedc 	bl	801546a <strncpy>
        new_cfg_val[val_len] = '\0';
 80016b2:	4a08      	ldr	r2, [pc, #32]	@ (80016d4 <SIM_Parse_Cfg+0xf8>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	4413      	add	r3, r2
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	e004      	b.n	80016c8 <SIM_Parse_Cfg+0xec>
    if(!comma1 || comma1 >= cmd_end) return;
 80016be:	bf00      	nop
 80016c0:	e002      	b.n	80016c8 <SIM_Parse_Cfg+0xec>
    if(!comma2 || comma2 >= cmd_end) return;
 80016c2:	bf00      	nop
 80016c4:	e000      	b.n	80016c8 <SIM_Parse_Cfg+0xec>
    if(!comma3 || comma3 >= cmd_end) return;
 80016c6:	bf00      	nop
    }
}
 80016c8:	3720      	adds	r7, #32
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20005cbc 	.word	0x20005cbc
 80016d4:	20005cd4 	.word	0x20005cd4
 80016d8:	20005cd0 	.word	0x20005cd0

080016dc <SIM_Get_Cfg>:

/*-----RECUPERO VALORE DI CONFIGURAZIONE-----*/
void SIM_Get_Cfg(char* cmd_start, char* cmd_end)
{   
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
	memset(cfg_var, 0, sizeof(cfg_var));
 80016e6:	2214      	movs	r2, #20
 80016e8:	2100      	movs	r1, #0
 80016ea:	4825      	ldr	r0, [pc, #148]	@ (8001780 <SIM_Get_Cfg+0xa4>)
 80016ec:	f013 fe96 	bl	801541c <memset>
	memset(new_cfg_val, 0, sizeof(new_cfg_val));
 80016f0:	220a      	movs	r2, #10
 80016f2:	2100      	movs	r1, #0
 80016f4:	4823      	ldr	r0, [pc, #140]	@ (8001784 <SIM_Get_Cfg+0xa8>)
 80016f6:	f013 fe91 	bl	801541c <memset>
	
	char* pos = cmd_start + 4; // Salta "GET,"
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3304      	adds	r3, #4
 80016fe:	617b      	str	r3, [r7, #20]
	
	// Prima virgola (dopo GET)
	char* comma1 = strchr(pos, ',');
 8001700:	212c      	movs	r1, #44	@ 0x2c
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f013 fe92 	bl	801542c <strchr>
 8001708:	6138      	str	r0, [r7, #16]
	if(!comma1 || comma1 >= cmd_end) return;
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d031      	beq.n	8001774 <SIM_Get_Cfg+0x98>
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d22d      	bcs.n	8001774 <SIM_Get_Cfg+0x98>
	
	// Seconda virgola
	char* comma2 = strchr(comma1 + 1, ',');
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	3301      	adds	r3, #1
 800171c:	212c      	movs	r1, #44	@ 0x2c
 800171e:	4618      	mov	r0, r3
 8001720:	f013 fe84 	bl	801542c <strchr>
 8001724:	60f8      	str	r0, [r7, #12]
	if(!comma2 || comma2 >= cmd_end) return;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d025      	beq.n	8001778 <SIM_Get_Cfg+0x9c>
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d221      	bcs.n	8001778 <SIM_Get_Cfg+0x9c>
	
	// Estrai cfg_var (tra GET, e prima virgola)
	int var_len = comma2 - comma1 - 1;
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	3b01      	subs	r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
	if(var_len > 0 && var_len < sizeof(cfg_var)) 
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	dd0e      	ble.n	8001762 <SIM_Get_Cfg+0x86>
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b13      	cmp	r3, #19
 8001748:	d80b      	bhi.n	8001762 <SIM_Get_Cfg+0x86>
	{
		strncpy(cfg_var, comma1 + 1, var_len);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	3301      	adds	r3, #1
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	4619      	mov	r1, r3
 8001752:	480b      	ldr	r0, [pc, #44]	@ (8001780 <SIM_Get_Cfg+0xa4>)
 8001754:	f013 fe89 	bl	801546a <strncpy>
		cfg_var[var_len] = '\0';
 8001758:	4a09      	ldr	r2, [pc, #36]	@ (8001780 <SIM_Get_Cfg+0xa4>)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	4413      	add	r3, r2
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
	}
	
	// Estrai cfg_idx
	cfg_idx = atoi(comma2 + 1);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3301      	adds	r3, #1
 8001766:	4618      	mov	r0, r3
 8001768:	f013 fd6e 	bl	8015248 <atoi>
 800176c:	4603      	mov	r3, r0
 800176e:	4a06      	ldr	r2, [pc, #24]	@ (8001788 <SIM_Get_Cfg+0xac>)
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e002      	b.n	800177a <SIM_Get_Cfg+0x9e>
	if(!comma1 || comma1 >= cmd_end) return;
 8001774:	bf00      	nop
 8001776:	e000      	b.n	800177a <SIM_Get_Cfg+0x9e>
	if(!comma2 || comma2 >= cmd_end) return;
 8001778:	bf00      	nop
}
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20005cbc 	.word	0x20005cbc
 8001784:	20005cd4 	.word	0x20005cd4
 8001788:	20005cd0 	.word	0x20005cd0

0800178c <SIM_publish_MQTT_Message_DMA>:

/*------PUBBLICAZIONE MESSAGGIO MQTT IN MODALITA' DMA------*/
void SIM_publish_MQTT_Message_DMA(const char* topic, const char* message)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b0c4      	sub	sp, #272	@ 0x110
 8001790:	af00      	add	r7, sp, #0
 8001792:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001796:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800179a:	6018      	str	r0, [r3, #0]
 800179c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80017a4:	6019      	str	r1, [r3, #0]
    char command[256];
    uint16_t len = (uint16_t)strlen(message);
 80017a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	f7fe fd18 	bl	80001e4 <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

    if(topic != NULL && strlen(topic) > 0)
 80017ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d014      	beq.n	80017f2 <SIM_publish_MQTT_Message_DMA+0x66>
 80017c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00c      	beq.n	80017f2 <SIM_publish_MQTT_Message_DMA+0x66>
	{
        sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 80017d8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80017dc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017e0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80017e4:	f107 000c 	add.w	r0, r7, #12
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	490b      	ldr	r1, [pc, #44]	@ (8001818 <SIM_publish_MQTT_Message_DMA+0x8c>)
 80017ec:	f013 fdb6 	bl	801535c <siprintf>
 80017f0:	e007      	b.n	8001802 <SIM_publish_MQTT_Message_DMA+0x76>
    } 
	else 
	{
        sprintf(command, "AT+SMPUB=%d\r", len);
 80017f2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4908      	ldr	r1, [pc, #32]	@ (800181c <SIM_publish_MQTT_Message_DMA+0x90>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f013 fdad 	bl	801535c <siprintf>
    }
    
    SIM_Send_Command_DMA(command);
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fd3a 	bl	8001280 <SIM_Send_Command_DMA>
}
 800180c:	bf00      	nop
 800180e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08016850 	.word	0x08016850
 800181c:	08016868 	.word	0x08016868

08001820 <SIM_publish_MQTT_Message>:

/*-----PUBBLICAZIONE MESSAGGIO MQTT-----*/
void SIM_publish_MQTT_Message(const char* topic, const char* message)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b0c4      	sub	sp, #272	@ 0x110
 8001824:	af00      	add	r7, sp, #0
 8001826:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800182a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800182e:	6018      	str	r0, [r3, #0]
 8001830:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001834:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001838:	6019      	str	r1, [r3, #0]
	char command[256];
	uint16_t len = (uint16_t)strlen(message);
 800183a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800183e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	f7fe fcce 	bl	80001e4 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

	if(topic != NULL && strlen(topic) > 0)
 800184e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001852:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d014      	beq.n	8001886 <SIM_publish_MQTT_Message+0x66>
 800185c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001860:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00c      	beq.n	8001886 <SIM_publish_MQTT_Message+0x66>
	{
		sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 800186c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8001870:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001874:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001878:	f107 000c 	add.w	r0, r7, #12
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	4917      	ldr	r1, [pc, #92]	@ (80018dc <SIM_publish_MQTT_Message+0xbc>)
 8001880:	f013 fd6c 	bl	801535c <siprintf>
 8001884:	e007      	b.n	8001896 <SIM_publish_MQTT_Message+0x76>
	} 
	else 
	{
		sprintf(command, "AT+SMPUB=%d\r", len);
 8001886:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	4914      	ldr	r1, [pc, #80]	@ (80018e0 <SIM_publish_MQTT_Message+0xc0>)
 8001890:	4618      	mov	r0, r3
 8001892:	f013 fd63 	bl	801535c <siprintf>
	}
	
	SIM_Send_Command(command);
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fcda 	bl	8001254 <SIM_Send_Command>
	SIM_Wait_Response(">");                       
 80018a0:	4810      	ldr	r0, [pc, #64]	@ (80018e4 <SIM_publish_MQTT_Message+0xc4>)
 80018a2:	f000 f915 	bl	8001ad0 <SIM_Wait_Response>
	HAL_UART_Transmit(SIM_UART, message, strlen(message), 1000);
 80018a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	f7fe fc98 	bl	80001e4 <strlen>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018bc:	f5a3 7188 	sub.w	r1, r3, #272	@ 0x110
 80018c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c4:	6809      	ldr	r1, [r1, #0]
 80018c6:	4808      	ldr	r0, [pc, #32]	@ (80018e8 <SIM_publish_MQTT_Message+0xc8>)
 80018c8:	f012 fa00 	bl	8013ccc <HAL_UART_Transmit>
    SIM_Wait_Response("OK");
 80018cc:	4807      	ldr	r0, [pc, #28]	@ (80018ec <SIM_publish_MQTT_Message+0xcc>)
 80018ce:	f000 f8ff 	bl	8001ad0 <SIM_Wait_Response>
}
 80018d2:	bf00      	nop
 80018d4:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	08016850 	.word	0x08016850
 80018e0:	08016868 	.word	0x08016868
 80018e4:	08016878 	.word	0x08016878
 80018e8:	20000624 	.word	0x20000624
 80018ec:	080165fc 	.word	0x080165fc

080018f0 <SIM_Send_TCP_Chunk_DMA>:
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
}

/*-----INVIO DATI AL SERVER TCP CON DMA-----*/
void SIM_Send_TCP_Chunk_DMA(uint8_t* data, uint16_t size)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b090      	sub	sp, #64	@ 0x40
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
    char cmd[50];

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 80018fc:	887a      	ldrh	r2, [r7, #2]
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	490d      	ldr	r1, [pc, #52]	@ (8001938 <SIM_Send_TCP_Chunk_DMA+0x48>)
 8001904:	4618      	mov	r0, r3
 8001906:	f013 fd29 	bl	801535c <siprintf>
    SIM_Send_Command_DMA(cmd);
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fcb6 	bl	8001280 <SIM_Send_Command_DMA>

    SIM_Wait_Response(">");                                    // Attesa prompt '>'
 8001914:	4809      	ldr	r0, [pc, #36]	@ (800193c <SIM_Send_TCP_Chunk_DMA+0x4c>)
 8001916:	f000 f8db 	bl	8001ad0 <SIM_Wait_Response>

    HAL_UART_Transmit(SIM_UART, data, size, 1000);             // Invia dati binari
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4807      	ldr	r0, [pc, #28]	@ (8001940 <SIM_Send_TCP_Chunk_DMA+0x50>)
 8001924:	f012 f9d2 	bl	8013ccc <HAL_UART_Transmit>
    
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
 8001928:	4806      	ldr	r0, [pc, #24]	@ (8001944 <SIM_Send_TCP_Chunk_DMA+0x54>)
 800192a:	f000 f8d1 	bl	8001ad0 <SIM_Wait_Response>
}
 800192e:	bf00      	nop
 8001930:	3740      	adds	r7, #64	@ 0x40
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	0801687c 	.word	0x0801687c
 800193c:	08016878 	.word	0x08016878
 8001940:	20000624 	.word	0x20000624
 8001944:	0801688c 	.word	0x0801688c

08001948 <SIM_Send_Infos>:

/*-----INVIO INFORMAZIONI AL SERVER MQTT-----*/
void SIM_Send_Infos(void)
{
 8001948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194a:	f5ad 7d3d 	sub.w	sp, sp, #756	@ 0x2f4
 800194e:	af10      	add	r7, sp, #64	@ 0x40
	uint16_t len = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	f8a7 32ae 	strh.w	r3, [r7, #686]	@ 0x2ae
	char command[128];
	char infos[512];
	uint16_t Vbatt = 0;
 8001956:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 800195a:	f2a3 2386 	subw	r3, r3, #646	@ 0x286
 800195e:	2200      	movs	r2, #0
 8001960:	801a      	strh	r2, [r3, #0]
	uint16_t new_temp = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	f8a7 32ac 	strh.w	r3, [r7, #684]	@ 0x2ac

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 8001968:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 800196c:	4619      	mov	r1, r3
 800196e:	203b      	movs	r0, #59	@ 0x3b
 8001970:	f000 fa06 	bl	8001d80 <BC_MultiRead_Reg>
	INA3221_Read_Measure(&Supply);
 8001974:	484c      	ldr	r0, [pc, #304]	@ (8001aa8 <SIM_Send_Infos+0x160>)
 8001976:	f7fe ff63 	bl	8000840 <INA3221_Read_Measure>
	if((new_temp = Read_Temperature()) != 0)
 800197a:	f7fe ff07 	bl	800078c <Read_Temperature>
 800197e:	4603      	mov	r3, r0
 8001980:	f8a7 32ac 	strh.w	r3, [r7, #684]	@ 0x2ac
 8001984:	f8b7 32ac 	ldrh.w	r3, [r7, #684]	@ 0x2ac
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <SIM_Send_Infos+0x4c>
	{
		Temperature = new_temp;
 800198c:	4a47      	ldr	r2, [pc, #284]	@ (8001aac <SIM_Send_Infos+0x164>)
 800198e:	f8b7 32ac 	ldrh.w	r3, [r7, #684]	@ 0x2ac
 8001992:	8013      	strh	r3, [r2, #0]
	}

	sprintf(infos, "%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, sys.onDate.Year, sys.onDate.Month, sys.onDate.Date, sys.onTime.Hours, sys.onTime.Minutes, sys.onTime.Seconds, Vbatt, config.samp_freq, config.buffering_secs, Supply.v1, Supply.v2, Supply.v3, Supply.i1, Supply.i2, Supply.i3, Temperature);
 8001994:	4b46      	ldr	r3, [pc, #280]	@ (8001ab0 <SIM_Send_Infos+0x168>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	469c      	mov	ip, r3
 800199a:	4b46      	ldr	r3, [pc, #280]	@ (8001ab4 <SIM_Send_Infos+0x16c>)
 800199c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80019a4:	469e      	mov	lr, r3
 80019a6:	4b43      	ldr	r3, [pc, #268]	@ (8001ab4 <SIM_Send_Infos+0x16c>)
 80019a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019b0:	461d      	mov	r5, r3
 80019b2:	4b40      	ldr	r3, [pc, #256]	@ (8001ab4 <SIM_Send_Infos+0x16c>)
 80019b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019bc:	461e      	mov	r6, r3
 80019be:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab4 <SIM_Send_Infos+0x16c>)
 80019c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ca:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab4 <SIM_Send_Infos+0x16c>)
 80019cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80019d4:	623b      	str	r3, [r7, #32]
 80019d6:	4b37      	ldr	r3, [pc, #220]	@ (8001ab4 <SIM_Send_Infos+0x16c>)
 80019d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019dc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80019e6:	f2a3 2386 	subw	r3, r3, #646	@ 0x286
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	4b30      	ldr	r3, [pc, #192]	@ (8001ab0 <SIM_Send_Infos+0x168>)
 80019f0:	885b      	ldrh	r3, [r3, #2]
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab0 <SIM_Send_Infos+0x168>)
 80019f6:	791b      	ldrb	r3, [r3, #4]
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa8 <SIM_Send_Infos+0x160>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	4b29      	ldr	r3, [pc, #164]	@ (8001aa8 <SIM_Send_Infos+0x160>)
 8001a02:	885b      	ldrh	r3, [r3, #2]
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	4b28      	ldr	r3, [pc, #160]	@ (8001aa8 <SIM_Send_Infos+0x160>)
 8001a08:	889b      	ldrh	r3, [r3, #4]
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	4b26      	ldr	r3, [pc, #152]	@ (8001aa8 <SIM_Send_Infos+0x160>)
 8001a0e:	88db      	ldrh	r3, [r3, #6]
 8001a10:	461c      	mov	r4, r3
 8001a12:	4b25      	ldr	r3, [pc, #148]	@ (8001aa8 <SIM_Send_Infos+0x160>)
 8001a14:	891b      	ldrh	r3, [r3, #8]
 8001a16:	4619      	mov	r1, r3
 8001a18:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <SIM_Send_Infos+0x160>)
 8001a1a:	895b      	ldrh	r3, [r3, #10]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <SIM_Send_Infos+0x164>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001a26:	930e      	str	r3, [sp, #56]	@ 0x38
 8001a28:	920d      	str	r2, [sp, #52]	@ 0x34
 8001a2a:	910c      	str	r1, [sp, #48]	@ 0x30
 8001a2c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	920a      	str	r2, [sp, #40]	@ 0x28
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	9209      	str	r2, [sp, #36]	@ 0x24
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	9208      	str	r2, [sp, #32]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	9207      	str	r2, [sp, #28]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	9206      	str	r2, [sp, #24]
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	9205      	str	r2, [sp, #20]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	9204      	str	r2, [sp, #16]
 8001a4a:	6a3a      	ldr	r2, [r7, #32]
 8001a4c:	9203      	str	r2, [sp, #12]
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a50:	9302      	str	r3, [sp, #8]
 8001a52:	9601      	str	r6, [sp, #4]
 8001a54:	9500      	str	r5, [sp, #0]
 8001a56:	4673      	mov	r3, lr
 8001a58:	4662      	mov	r2, ip
 8001a5a:	4917      	ldr	r1, [pc, #92]	@ (8001ab8 <SIM_Send_Infos+0x170>)
 8001a5c:	f013 fc7e 	bl	801535c <siprintf>
	len = (uint16_t)strlen(infos);
 8001a60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fbbd 	bl	80001e4 <strlen>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f8a7 32ae 	strh.w	r3, [r7, #686]	@ 0x2ae

	sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", sys.MQTT.Info_Topic, len);
 8001a70:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	@ 0x2ae
 8001a74:	f507 700b 	add.w	r0, r7, #556	@ 0x22c
 8001a78:	4a10      	ldr	r2, [pc, #64]	@ (8001abc <SIM_Send_Infos+0x174>)
 8001a7a:	4911      	ldr	r1, [pc, #68]	@ (8001ac0 <SIM_Send_Infos+0x178>)
 8001a7c:	f013 fc6e 	bl	801535c <siprintf>
	SIM_Wait_Response(">"); 
 8001a80:	4810      	ldr	r0, [pc, #64]	@ (8001ac4 <SIM_Send_Infos+0x17c>)
 8001a82:	f000 f825 	bl	8001ad0 <SIM_Wait_Response>
	HAL_UART_Transmit(SIM_UART, (uint8_t*)infos, len, 100);
 8001a86:	f8b7 22ae 	ldrh.w	r2, [r7, #686]	@ 0x2ae
 8001a8a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001a8e:	2364      	movs	r3, #100	@ 0x64
 8001a90:	480d      	ldr	r0, [pc, #52]	@ (8001ac8 <SIM_Send_Infos+0x180>)
 8001a92:	f012 f91b 	bl	8013ccc <HAL_UART_Transmit>
	SIM_Wait_Response("OK");
 8001a96:	480d      	ldr	r0, [pc, #52]	@ (8001acc <SIM_Send_Infos+0x184>)
 8001a98:	f000 f81a 	bl	8001ad0 <SIM_Wait_Response>
}
 8001a9c:	bf00      	nop
 8001a9e:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20003e3c 	.word	0x20003e3c
 8001aac:	20004718 	.word	0x20004718
 8001ab0:	20001c6c 	.word	0x20001c6c
 8001ab4:	20000740 	.word	0x20000740
 8001ab8:	08016894 	.word	0x08016894
 8001abc:	20001b3c 	.word	0x20001b3c
 8001ac0:	08016850 	.word	0x08016850
 8001ac4:	08016878 	.word	0x08016878
 8001ac8:	20000624 	.word	0x20000624
 8001acc:	080165fc 	.word	0x080165fc

08001ad0 <SIM_Wait_Response>:

/*-----ATTESA RISPOSTA-----*/
int SIM_Wait_Response(const char* expected)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0c8      	sub	sp, #288	@ 0x120
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ada:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ade:	6018      	str	r0, [r3, #0]
    char response[256];
    uint16_t timeout = 10000; // 10 secondi
 8001ae0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001ae4:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    uint32_t start_time = HAL_GetTick();
 8001ae8:	f008 fc18 	bl	800a31c <HAL_GetTick>
 8001aec:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    
    while((HAL_GetTick() - start_time) < timeout)
 8001af0:	e02a      	b.n	8001b48 <SIM_Wait_Response+0x78>
    {
        uint16_t RxLen = 0;
 8001af2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001af6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001afa:	2200      	movs	r2, #0
 8001afc:	801a      	strh	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t*)response, sizeof(response), &RxLen, 500);
 8001afe:	f107 030e 	add.w	r3, r7, #14
 8001b02:	f107 0110 	add.w	r1, r7, #16
 8001b06:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b0a:	9200      	str	r2, [sp, #0]
 8001b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b10:	4816      	ldr	r0, [pc, #88]	@ (8001b6c <SIM_Wait_Response+0x9c>)
 8001b12:	f013 fa42 	bl	8014f9a <HAL_UARTEx_ReceiveToIdle>
        
        if(RxLen > 0 && strstr(response, expected) != NULL)
 8001b16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b1a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00e      	beq.n	8001b42 <SIM_Wait_Response+0x72>
 8001b24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b28:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b2c:	f107 0210 	add.w	r2, r7, #16
 8001b30:	6819      	ldr	r1, [r3, #0]
 8001b32:	4610      	mov	r0, r2
 8001b34:	f013 fcac 	bl	8015490 <strstr>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SIM_Wait_Response+0x72>
        {
            return 0; 
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e00e      	b.n	8001b60 <SIM_Wait_Response+0x90>
        }
        
        HAL_Delay(10);
 8001b42:	200a      	movs	r0, #10
 8001b44:	f008 fbf6 	bl	800a334 <HAL_Delay>
    while((HAL_GetTick() - start_time) < timeout)
 8001b48:	f008 fbe8 	bl	800a31c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001b52:	1ad2      	subs	r2, r2, r3
 8001b54:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d3ca      	bcc.n	8001af2 <SIM_Wait_Response+0x22>
    }
	return -1;
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000624 	.word	0x20000624

08001b70 <SIM_Check_Connection>:

/*-----CONTROLLA STATO CONNESSIONE MQTT E TCP-----*/
void SIM_Check_Connection(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001b76:	af00      	add	r7, sp, #0
	char command_sim[256];
	char response_sim[256];

	SIM_Send_Command("AT+SMSTATE?\r");                                                            
 8001b78:	4823      	ldr	r0, [pc, #140]	@ (8001c08 <SIM_Check_Connection+0x98>)
 8001b7a:	f7ff fb6b 	bl	8001254 <SIM_Send_Command>
	SIM_Receive_Response(response_sim);
 8001b7e:	463b      	mov	r3, r7
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fb93 	bl	80012ac <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response_sim))
 8001b86:	e00c      	b.n	8001ba2 <SIM_Check_Connection+0x32>
	{
		SIM_Send_Command("AT+SMCONN\r");                                                              
 8001b88:	4820      	ldr	r0, [pc, #128]	@ (8001c0c <SIM_Check_Connection+0x9c>)
 8001b8a:	f7ff fb63 	bl	8001254 <SIM_Send_Command>
		SIM_Wait_Response("OK");
 8001b8e:	4820      	ldr	r0, [pc, #128]	@ (8001c10 <SIM_Check_Connection+0xa0>)
 8001b90:	f7ff ff9e 	bl	8001ad0 <SIM_Wait_Response>
		SIM_Send_Command("AT+SMSTATE?\r");                                                            
 8001b94:	481c      	ldr	r0, [pc, #112]	@ (8001c08 <SIM_Check_Connection+0x98>)
 8001b96:	f7ff fb5d 	bl	8001254 <SIM_Send_Command>
		SIM_Receive_Response(response_sim);
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fb85 	bl	80012ac <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response_sim))
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fbc5 	bl	8001334 <SIM_Check_MQTT_State>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0eb      	beq.n	8001b88 <SIM_Check_Connection+0x18>
	}
	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 8001bb0:	4818      	ldr	r0, [pc, #96]	@ (8001c14 <SIM_Check_Connection+0xa4>)
 8001bb2:	f7ff fb4f 	bl	8001254 <SIM_Send_Command>
	SIM_Receive_Response(response_sim);
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fb77 	bl	80012ac <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response_sim))
 8001bbe:	e015      	b.n	8001bec <SIM_Check_Connection+0x7c>
	{
		sprintf(command_sim, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);       
 8001bc0:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8001bc4:	4b14      	ldr	r3, [pc, #80]	@ (8001c18 <SIM_Check_Connection+0xa8>)
 8001bc6:	4a15      	ldr	r2, [pc, #84]	@ (8001c1c <SIM_Check_Connection+0xac>)
 8001bc8:	4915      	ldr	r1, [pc, #84]	@ (8001c20 <SIM_Check_Connection+0xb0>)
 8001bca:	f013 fbc7 	bl	801535c <siprintf>
		SIM_Send_Command(command_sim);
 8001bce:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fb3e 	bl	8001254 <SIM_Send_Command>
		SIM_Wait_Response("CONNECT OK");
 8001bd8:	4812      	ldr	r0, [pc, #72]	@ (8001c24 <SIM_Check_Connection+0xb4>)
 8001bda:	f7ff ff79 	bl	8001ad0 <SIM_Wait_Response>
		SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 8001bde:	480d      	ldr	r0, [pc, #52]	@ (8001c14 <SIM_Check_Connection+0xa4>)
 8001be0:	f7ff fb38 	bl	8001254 <SIM_Send_Command>
		SIM_Receive_Response(response_sim);
 8001be4:	463b      	mov	r3, r7
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fb60 	bl	80012ac <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response_sim))
 8001bec:	463b      	mov	r3, r7
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fbc6 	bl	8001380 <SIM_Check_TCP_State>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0e2      	beq.n	8001bc0 <SIM_Check_Connection+0x50>
	}
}
 8001bfa:	bf00      	nop
 8001bfc:	bf00      	nop
 8001bfe:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	08016788 	.word	0x08016788
 8001c0c:	0801677c 	.word	0x0801677c
 8001c10:	080165fc 	.word	0x080165fc
 8001c14:	080167e4 	.word	0x080167e4
 8001c18:	20001c04 	.word	0x20001c04
 8001c1c:	20001ba0 	.word	0x20001ba0
 8001c20:	080167bc 	.word	0x080167bc
 8001c24:	080167d8 	.word	0x080167d8

08001c28 <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 8001c2c:	211a      	movs	r1, #26
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 f830 	bl	8001c94 <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 8001c34:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f000 f877 	bl	8001d2c <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 8001c3e:	2164      	movs	r1, #100	@ 0x64
 8001c40:	2003      	movs	r0, #3
 8001c42:	f000 f873 	bl	8001d2c <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 8001c46:	2185      	movs	r1, #133	@ 0x85
 8001c48:	2010      	movs	r0, #16
 8001c4a:	f000 f823 	bl	8001c94 <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 8001c4e:	2196      	movs	r1, #150	@ 0x96
 8001c50:	2014      	movs	r0, #20
 8001c52:	f000 f81f 	bl	8001c94 <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 8001c56:	21ab      	movs	r1, #171	@ 0xab
 8001c58:	2015      	movs	r0, #21
 8001c5a:	f000 f81b 	bl	8001c94 <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 8001c5e:	21e1      	movs	r1, #225	@ 0xe1
 8001c60:	2028      	movs	r0, #40	@ 0x28
 8001c62:	f000 f817 	bl	8001c94 <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 8001c66:	21d7      	movs	r1, #215	@ 0xd7
 8001c68:	2029      	movs	r0, #41	@ 0x29
 8001c6a:	f000 f813 	bl	8001c94 <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 8001c6e:	217f      	movs	r1, #127	@ 0x7f
 8001c70:	202a      	movs	r0, #42	@ 0x2a
 8001c72:	f000 f80f 	bl	8001c94 <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 8001c76:	211f      	movs	r1, #31
 8001c78:	202b      	movs	r0, #43	@ 0x2b
 8001c7a:	f000 f80b 	bl	8001c94 <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 8001c7e:	21fc      	movs	r1, #252	@ 0xfc
 8001c80:	202c      	movs	r0, #44	@ 0x2c
 8001c82:	f000 f807 	bl	8001c94 <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 8001c86:	21f4      	movs	r1, #244	@ 0xf4
 8001c88:	202d      	movs	r0, #45	@ 0x2d
 8001c8a:	f000 f803 	bl	8001c94 <BC_Write_Reg>
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	460a      	mov	r2, r1
 8001c9e:	71fb      	strb	r3, [r7, #7]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca8:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 8001cae:	79bb      	ldrb	r3, [r7, #6]
 8001cb0:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 8001cb2:	f107 0208 	add.w	r2, r7, #8
 8001cb6:	2364      	movs	r3, #100	@ 0x64
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2302      	movs	r3, #2
 8001cbc:	21d6      	movs	r1, #214	@ 0xd6
 8001cbe:	4806      	ldr	r0, [pc, #24]	@ (8001cd8 <BC_Write_Reg+0x44>)
 8001cc0:	f00b fd8e 	bl	800d7e0 <HAL_I2C_Master_Transmit>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <BC_Write_Reg+0x3a>
	{
		result = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8001cce:	68fb      	ldr	r3, [r7, #12]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200002e8 	.word	0x200002e8

08001cdc <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cec:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8001cee:	1dfa      	adds	r2, r7, #7
 8001cf0:	2364      	movs	r3, #100	@ 0x64
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	21d6      	movs	r1, #214	@ 0xd6
 8001cf8:	480b      	ldr	r0, [pc, #44]	@ (8001d28 <BC_Read_Reg+0x4c>)
 8001cfa:	f00b fd71 	bl	800d7e0 <HAL_I2C_Master_Transmit>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10c      	bne.n	8001d1e <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 8001d04:	2364      	movs	r3, #100	@ 0x64
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	21d6      	movs	r1, #214	@ 0xd6
 8001d0e:	4806      	ldr	r0, [pc, #24]	@ (8001d28 <BC_Read_Reg+0x4c>)
 8001d10:	f00b fe7e 	bl	800da10 <HAL_I2C_Master_Receive>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <BC_Read_Reg+0x42>
		{
			result = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200002e8 	.word	0x200002e8

08001d2c <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	4603      	mov	r3, r0
 8001d34:	460a      	mov	r2, r1
 8001d36:	71fb      	strb	r3, [r7, #7]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d40:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 8001d46:	88bb      	ldrh	r3, [r7, #4]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 8001d50:	88bb      	ldrh	r3, [r7, #4]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 8001d56:	f107 0208 	add.w	r2, r7, #8
 8001d5a:	2364      	movs	r3, #100	@ 0x64
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	2303      	movs	r3, #3
 8001d60:	21d6      	movs	r1, #214	@ 0xd6
 8001d62:	4806      	ldr	r0, [pc, #24]	@ (8001d7c <BC_MultiWrite_Reg+0x50>)
 8001d64:	f00b fd3c 	bl	800d7e0 <HAL_I2C_Master_Transmit>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8001d72:	68fb      	ldr	r3, [r7, #12]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200002e8 	.word	0x200002e8

08001d80 <BC_MultiRead_Reg>:

/*------LETTURA REGISTRO 16 BIT------*/
int BC_MultiRead_Reg(uint8_t reg, uint16_t *rdata)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d90:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8001d92:	2300      	movs	r3, #0
 8001d94:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8001d96:	1dfa      	adds	r2, r7, #7
 8001d98:	2364      	movs	r3, #100	@ 0x64
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	21d6      	movs	r1, #214	@ 0xd6
 8001da0:	4811      	ldr	r0, [pc, #68]	@ (8001de8 <BC_MultiRead_Reg+0x68>)
 8001da2:	f00b fd1d 	bl	800d7e0 <HAL_I2C_Master_Transmit>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d118      	bne.n	8001dde <BC_MultiRead_Reg+0x5e>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, data, 2, 100) == HAL_OK)
 8001dac:	f107 0208 	add.w	r2, r7, #8
 8001db0:	2364      	movs	r3, #100	@ 0x64
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2302      	movs	r3, #2
 8001db6:	21d6      	movs	r1, #214	@ 0xd6
 8001db8:	480b      	ldr	r0, [pc, #44]	@ (8001de8 <BC_MultiRead_Reg+0x68>)
 8001dba:	f00b fe29 	bl	800da10 <HAL_I2C_Master_Receive>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10c      	bne.n	8001dde <BC_MultiRead_Reg+0x5e>
		{
			result = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 8001dc8:	7a3b      	ldrb	r3, [r7, #8]
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	b21a      	sxth	r2, r3
 8001dd0:	7a7b      	ldrb	r3, [r7, #9]
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 8001dde:	68fb      	ldr	r3, [r7, #12]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200002e8 	.word	0x200002e8

08001dec <BC_Read_Flags>:

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 8001dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df0:	b09b      	sub	sp, #108	@ 0x6c
 8001df2:	af02      	add	r7, sp, #8
 8001df4:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int result = -1;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t data[6] = {0};
 8001dfc:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8001e00:	2300      	movs	r3, #0
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	8093      	strh	r3, [r2, #4]
	uint8_t reg = REG22_CHARGER_FLAG_0;
 8001e06:	2322      	movs	r3, #34	@ 0x22
 8001e08:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8001e0c:	f107 0253 	add.w	r2, r7, #83	@ 0x53
 8001e10:	2364      	movs	r3, #100	@ 0x64
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2301      	movs	r3, #1
 8001e16:	21d6      	movs	r1, #214	@ 0xd6
 8001e18:	484a      	ldr	r0, [pc, #296]	@ (8001f44 <BC_Read_Flags+0x158>)
 8001e1a:	f00b fce1 	bl	800d7e0 <HAL_I2C_Master_Transmit>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f040 8089 	bne.w	8001f38 <BC_Read_Flags+0x14c>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 8001e26:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8001e2a:	2364      	movs	r3, #100	@ 0x64
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2306      	movs	r3, #6
 8001e30:	21d6      	movs	r1, #214	@ 0xd6
 8001e32:	4844      	ldr	r0, [pc, #272]	@ (8001f44 <BC_Read_Flags+0x158>)
 8001e34:	f00b fdec 	bl	800da10 <HAL_I2C_Master_Receive>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d17c      	bne.n	8001f38 <BC_Read_Flags+0x14c>
		{
			result = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = ((uint64_t)data[0] << 40) | ((uint64_t)data[1] << 32) | ((uint64_t)data[2] << 24) | ((uint64_t)data[3] << 16) | ((uint64_t)data[4] << 8) | (uint64_t)data[5];
 8001e42:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2200      	movs	r2, #0
 8001e4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e4c:	647a      	str	r2, [r7, #68]	@ 0x44
 8001e4e:	f04f 0000 	mov.w	r0, #0
 8001e52:	f04f 0100 	mov.w	r1, #0
 8001e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e58:	0219      	lsls	r1, r3, #8
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2200      	movs	r2, #0
 8001e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e66:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8001e72:	0033      	movs	r3, r6
 8001e74:	2200      	movs	r2, #0
 8001e76:	ea40 0802 	orr.w	r8, r0, r2
 8001e7a:	ea41 0903 	orr.w	r9, r1, r3
 8001e7e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2200      	movs	r2, #0
 8001e86:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e88:	637a      	str	r2, [r7, #52]	@ 0x34
 8001e8a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8001e8e:	460b      	mov	r3, r1
 8001e90:	0a1d      	lsrs	r5, r3, #8
 8001e92:	460b      	mov	r3, r1
 8001e94:	061c      	lsls	r4, r3, #24
 8001e96:	ea48 0304 	orr.w	r3, r8, r4
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e9c:	ea49 0305 	orr.w	r3, r9, r5
 8001ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ea2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	627a      	str	r2, [r7, #36]	@ 0x24
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001eba:	4629      	mov	r1, r5
 8001ebc:	040b      	lsls	r3, r1, #16
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	040a      	lsls	r2, r1, #16
 8001ec8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001ecc:	4621      	mov	r1, r4
 8001ece:	4311      	orrs	r1, r2
 8001ed0:	61b9      	str	r1, [r7, #24]
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	4319      	orrs	r1, r3
 8001ed6:	61f9      	str	r1, [r7, #28]
 8001ed8:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2200      	movs	r2, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	617a      	str	r2, [r7, #20]
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	020b      	lsls	r3, r1, #8
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8001efa:	4621      	mov	r1, r4
 8001efc:	020a      	lsls	r2, r1, #8
 8001efe:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001f02:	4621      	mov	r1, r4
 8001f04:	ea41 0a02 	orr.w	sl, r1, r2
 8001f08:	4629      	mov	r1, r5
 8001f0a:	ea41 0b03 	orr.w	fp, r1, r3
 8001f0e:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2200      	movs	r2, #0
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	60fa      	str	r2, [r7, #12]
 8001f1a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	ea4a 0303 	orr.w	r3, sl, r3
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	4613      	mov	r3, r2
 8001f28:	ea4b 0303 	orr.w	r3, fp, r3
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f30:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f34:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 8001f38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3764      	adds	r7, #100	@ 0x64
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f44:	200002e8 	.word	0x200002e8

08001f48 <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 8001f48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 8001f54:	2100      	movs	r1, #0
 8001f56:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 8001f58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f401 5380 	and.w	r3, r1, #4096	@ 0x1000
 8001f62:	4313      	orrs	r3, r2
 8001f64:	d00c      	beq.n	8001f80 <BC_Manage_Interrupts+0x38>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8001f66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	0a0a      	lsrs	r2, r1, #8
 8001f74:	2300      	movs	r3, #0
 8001f76:	b2d3      	uxtb	r3, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	2022      	movs	r0, #34	@ 0x22
 8001f7c:	f7ff fe8a 	bl	8001c94 <BC_Write_Reg>
	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 8001f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f84:	f04f 0800 	mov.w	r8, #0
 8001f88:	f403 6980 	and.w	r9, r3, #1024	@ 0x400
 8001f8c:	ea58 0309 	orrs.w	r3, r8, r9
 8001f90:	d020      	beq.n	8001fd4 <BC_Manage_Interrupts+0x8c>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, &status);
 8001f92:	f107 030f 	add.w	r3, r7, #15
 8001f96:	4619      	mov	r1, r3
 8001f98:	201b      	movs	r0, #27
 8001f9a:	f7ff fe9f 	bl	8001cdc <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d004      	beq.n	8001fb2 <BC_Manage_Interrupts+0x6a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80);                //Usa Pannello
 8001fa8:	2180      	movs	r1, #128	@ 0x80
 8001faa:	2013      	movs	r0, #19
 8001fac:	f7ff fe72 	bl	8001c94 <BC_Write_Reg>
 8001fb0:	e003      	b.n	8001fba <BC_Manage_Interrupts+0x72>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40);                //Usa Turbina
 8001fb2:	2140      	movs	r1, #64	@ 0x40
 8001fb4:	2013      	movs	r0, #19
 8001fb6:	f7ff fe6d 	bl	8001c94 <BC_Write_Reg>
		}
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8001fba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	0a0a      	lsrs	r2, r1, #8
 8001fc8:	2300      	movs	r3, #0
 8001fca:	b2d3      	uxtb	r3, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	2022      	movs	r0, #34	@ 0x22
 8001fd0:	f7ff fe60 	bl	8001c94 <BC_Write_Reg>
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 8001fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fd8:	2400      	movs	r4, #0
 8001fda:	f403 7500 	and.w	r5, r3, #512	@ 0x200
 8001fde:	ea54 0305 	orrs.w	r3, r4, r5
 8001fe2:	d00c      	beq.n	8001ffe <BC_Manage_Interrupts+0xb6>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 8001fe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	0a0a      	lsrs	r2, r1, #8
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	b2d3      	uxtb	r3, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	2022      	movs	r0, #34	@ 0x22
 8001ffa:	f7ff fe4b 	bl	8001c94 <BC_Write_Reg>
	}

	flags = 0;
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	e9c7 2300 	strd	r2, r3, [r7]
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002014 <HAL_UARTEx_RxEventCallback>:
	}
}

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]
	if(huart == SIM_UART)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a31      	ldr	r2, [pc, #196]	@ (80020e8 <HAL_UARTEx_RxEventCallback+0xd4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d155      	bne.n	80020d4 <HAL_UARTEx_RxEventCallback+0xc0>
	{
		if(*(uint8_t*)sim_rx_buffer == '>')
 8002028:	4b30      	ldr	r3, [pc, #192]	@ (80020ec <HAL_UARTEx_RxEventCallback+0xd8>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b3e      	cmp	r3, #62	@ 0x3e
 800202e:	d120      	bne.n	8002072 <HAL_UARTEx_RxEventCallback+0x5e>
		{
			if(flags.CMD.Measure_Request)
 8002030:	4b2f      	ldr	r3, [pc, #188]	@ (80020f0 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002032:	789b      	ldrb	r3, [r3, #2]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_UARTEx_RxEventCallback+0x36>
			{
				flags.TCP_ReadytoSend = 1;
 800203e:	4a2c      	ldr	r2, [pc, #176]	@ (80020f0 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002040:	7853      	ldrb	r3, [r2, #1]
 8002042:	f043 0302 	orr.w	r3, r3, #2
 8002046:	7053      	strb	r3, [r2, #1]
 8002048:	e044      	b.n	80020d4 <HAL_UARTEx_RxEventCallback+0xc0>
			}
			else if(flags.CMD.Data_Request)
 800204a:	4b29      	ldr	r3, [pc, #164]	@ (80020f0 <HAL_UARTEx_RxEventCallback+0xdc>)
 800204c:	789b      	ldrb	r3, [r3, #2]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d03d      	beq.n	80020d4 <HAL_UARTEx_RxEventCallback+0xc0>
			{
				flags.MQTT_ReadytoSend = 1;
 8002058:	4a25      	ldr	r2, [pc, #148]	@ (80020f0 <HAL_UARTEx_RxEventCallback+0xdc>)
 800205a:	7853      	ldrb	r3, [r2, #1]
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 8002062:	4b24      	ldr	r3, [pc, #144]	@ (80020f4 <HAL_UARTEx_RxEventCallback+0xe0>)
 8002064:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002068:	461a      	mov	r2, r3
 800206a:	2300      	movs	r3, #0
 800206c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002070:	e030      	b.n	80020d4 <HAL_UARTEx_RxEventCallback+0xc0>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8002072:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <HAL_UARTEx_RxEventCallback+0xd8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a20      	ldr	r2, [pc, #128]	@ (80020f8 <HAL_UARTEx_RxEventCallback+0xe4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d10a      	bne.n	8002092 <HAL_UARTEx_RxEventCallback+0x7e>
				*(uint32_t*)(sim_rx_buffer + 4) == 0x203A4255)       // "UB: "
 800207c:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <HAL_UARTEx_RxEventCallback+0xe8>)
 800207e:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8002080:	4a1f      	ldr	r2, [pc, #124]	@ (8002100 <HAL_UARTEx_RxEventCallback+0xec>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d105      	bne.n	8002092 <HAL_UARTEx_RxEventCallback+0x7e>
		{     
			flags.MQTT_Message_Rx = 1;
 8002086:	4a1a      	ldr	r2, [pc, #104]	@ (80020f0 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002088:	7813      	ldrb	r3, [r2, #0]
 800208a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800208e:	7013      	strb	r3, [r2, #0]
 8002090:	e020      	b.n	80020d4 <HAL_UARTEx_RxEventCallback+0xc0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&           // "SEND"
 8002092:	4b16      	ldr	r3, [pc, #88]	@ (80020ec <HAL_UARTEx_RxEventCallback+0xd8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1b      	ldr	r2, [pc, #108]	@ (8002104 <HAL_UARTEx_RxEventCallback+0xf0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d10a      	bne.n	80020b2 <HAL_UARTEx_RxEventCallback+0x9e>
       			*(uint32_t*)(sim_rx_buffer + 4) == 0x004B204F)       // " OK\0"
 800209c:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <HAL_UARTEx_RxEventCallback+0xe8>)
 800209e:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&           // "SEND"
 80020a0:	4a19      	ldr	r2, [pc, #100]	@ (8002108 <HAL_UARTEx_RxEventCallback+0xf4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d105      	bne.n	80020b2 <HAL_UARTEx_RxEventCallback+0x9e>
		{
			flags.TCP_isSending = 0;
 80020a6:	4a12      	ldr	r2, [pc, #72]	@ (80020f0 <HAL_UARTEx_RxEventCallback+0xdc>)
 80020a8:	7853      	ldrb	r3, [r2, #1]
 80020aa:	f023 0304 	bic.w	r3, r3, #4
 80020ae:	7053      	strb	r3, [r2, #1]
 80020b0:	e010      	b.n	80020d4 <HAL_UARTEx_RxEventCallback+0xc0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x4552524F)            //"ERRO"
 80020b2:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <HAL_UARTEx_RxEventCallback+0xd8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a15      	ldr	r2, [pc, #84]	@ (800210c <HAL_UARTEx_RxEventCallback+0xf8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d10b      	bne.n	80020d4 <HAL_UARTEx_RxEventCallback+0xc0>
		{
			flags.MQTT_ReadytoSend = 0;
 80020bc:	4a0c      	ldr	r2, [pc, #48]	@ (80020f0 <HAL_UARTEx_RxEventCallback+0xdc>)
 80020be:	7853      	ldrb	r3, [r2, #1]
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	7053      	strb	r3, [r2, #1]
			sys.SIM_Prompt_Status = 0;
 80020c6:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <HAL_UARTEx_RxEventCallback+0xe0>)
 80020c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020cc:	461a      	mov	r2, r3
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
		}
	}
	
	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80020d4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80020d8:	4904      	ldr	r1, [pc, #16]	@ (80020ec <HAL_UARTEx_RxEventCallback+0xd8>)
 80020da:	4803      	ldr	r0, [pc, #12]	@ (80020e8 <HAL_UARTEx_RxEventCallback+0xd4>)
 80020dc:	f013 f860 	bl	80151a0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000624 	.word	0x20000624
 80020ec:	200054ec 	.word	0x200054ec
 80020f0:	20001c68 	.word	0x20001c68
 80020f4:	20000740 	.word	0x20000740
 80020f8:	534d532b 	.word	0x534d532b
 80020fc:	200054f0 	.word	0x200054f0
 8002100:	203a4255 	.word	0x203a4255
 8002104:	444e4553 	.word	0x444e4553
 8002108:	004b204f 	.word	0x004b204f
 800210c:	4552524f 	.word	0x4552524f

08002110 <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_UART_TxCpltCallback>:

/* ------CALLBACK UART TX COMPLETE------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_ADC_ConvHalfCpltCallback>:

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a09      	ldr	r2, [pc, #36]	@ (8002168 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d109      	bne.n	800215c <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8002148:	4a08      	ldr	r2, [pc, #32]	@ (800216c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800214a:	7813      	ldrb	r3, [r2, #0]
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 8002152:	4a06      	ldr	r2, [pc, #24]	@ (800216c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002154:	7813      	ldrb	r3, [r2, #0]
 8002156:	f043 0302 	orr.w	r3, r3, #2
 800215a:	7013      	strb	r3, [r2, #0]
	}
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	20000218 	.word	0x20000218
 800216c:	20001c68 	.word	0x20001c68

08002170 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a09      	ldr	r2, [pc, #36]	@ (80021a0 <HAL_ADC_ConvCpltCallback+0x30>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d109      	bne.n	8002194 <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8002180:	4a08      	ldr	r2, [pc, #32]	@ (80021a4 <HAL_ADC_ConvCpltCallback+0x34>)
 8002182:	7813      	ldrb	r3, [r2, #0]
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 800218a:	4a06      	ldr	r2, [pc, #24]	@ (80021a4 <HAL_ADC_ConvCpltCallback+0x34>)
 800218c:	7813      	ldrb	r3, [r2, #0]
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	7013      	strb	r3, [r2, #0]
	}
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	20000218 	.word	0x20000218
 80021a4:	20001c68 	.word	0x20001c68

080021a8 <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b092      	sub	sp, #72	@ 0x48
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;
	RTC_AlarmTypeDef sAlarm = {0};
 80021b0:	f107 0308 	add.w	r3, r7, #8
 80021b4:	222c      	movs	r2, #44	@ 0x2c
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f013 f92f 	bl	801541c <memset>

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 80021be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021c2:	2200      	movs	r2, #0
 80021c4:	4619      	mov	r1, r3
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f00e f8fd 	bl	80103c6 <HAL_RTC_GetTime>

	sys.Low_th = Low_TH_Array[gTime.Hours];
 80021cc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b17      	ldr	r3, [pc, #92]	@ (8002230 <HAL_RTC_AlarmAEventCallback+0x88>)
 80021d4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80021d8:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <HAL_RTC_AlarmAEventCallback+0x8c>)
 80021da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021de:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sys.High_th = High_TH_Array[gTime.Hours];
 80021e0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b14      	ldr	r3, [pc, #80]	@ (8002238 <HAL_RTC_AlarmAEventCallback+0x90>)
 80021e8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80021ec:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <HAL_RTC_AlarmAEventCallback+0x8c>)
 80021ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021f2:	861a      	strh	r2, [r3, #48]	@ 0x30

	sAlarm.AlarmTime.Hours = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 8002200:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <HAL_RTC_AlarmAEventCallback+0x94>)
 8002202:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002204:	2300      	movs	r3, #0
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002208:	2300      	movs	r3, #0
 800220a:	62bb      	str	r3, [r7, #40]	@ 0x28
    sAlarm.AlarmDateWeekDay = 1;
 800220c:	2301      	movs	r3, #1
 800220e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    sAlarm.Alarm = RTC_ALARM_A;
 8002212:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002216:	633b      	str	r3, [r7, #48]	@ 0x30
    
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 8002218:	f107 0308 	add.w	r3, r7, #8
 800221c:	2200      	movs	r2, #0
 800221e:	4619      	mov	r1, r3
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f00e f9b3 	bl	801058c <HAL_RTC_SetAlarm_IT>
}
 8002226:	bf00      	nop
 8002228:	3748      	adds	r7, #72	@ 0x48
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200054ac 	.word	0x200054ac
 8002234:	20000740 	.word	0x20000740
 8002238:	2000547c 	.word	0x2000547c
 800223c:	80800080 	.word	0x80800080

08002240 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800224a:	4802      	ldr	r0, [pc, #8]	@ (8002254 <extflash_cs_set+0x14>)
 800224c:	f00b fa14 	bl	800d678 <HAL_GPIO_WritePin>
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	48000400 	.word	0x48000400

08002258 <extflash_cs_reset>:

void extflash_cs_reset()
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 800225c:	2201      	movs	r2, #1
 800225e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002262:	4802      	ldr	r0, [pc, #8]	@ (800226c <extflash_cs_reset+0x14>)
 8002264:	f00b fa08 	bl	800d678 <HAL_GPIO_WritePin>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	48000400 	.word	0x48000400

08002270 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 8002274:	2201      	movs	r2, #1
 8002276:	2140      	movs	r1, #64	@ 0x40
 8002278:	4802      	ldr	r0, [pc, #8]	@ (8002284 <extflash_wp_reset+0x14>)
 800227a:	f00b f9fd 	bl	800d678 <HAL_GPIO_WritePin>
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	48000800 	.word	0x48000800

08002288 <extflash_hard_reset>:


void extflash_hard_reset()
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 800228c:	2200      	movs	r2, #0
 800228e:	2180      	movs	r1, #128	@ 0x80
 8002290:	4806      	ldr	r0, [pc, #24]	@ (80022ac <extflash_hard_reset+0x24>)
 8002292:	f00b f9f1 	bl	800d678 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8002296:	2032      	movs	r0, #50	@ 0x32
 8002298:	f008 f84c 	bl	800a334 <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 800229c:	2201      	movs	r2, #1
 800229e:	2180      	movs	r1, #128	@ 0x80
 80022a0:	4802      	ldr	r0, [pc, #8]	@ (80022ac <extflash_hard_reset+0x24>)
 80022a2:	f00b f9e9 	bl	800d678 <HAL_GPIO_WritePin>

	return;
 80022a6:	bf00      	nop
}
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	48000800 	.word	0x48000800

080022b0 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	785b      	ldrb	r3, [r3, #1]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00d      	beq.n	80022f4 <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	0a1b      	lsrs	r3, r3, #8
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 80022f4:	f7ff ffa4 	bl	8002240 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 80022f8:	f107 010f 	add.w	r1, r7, #15
 80022fc:	2364      	movs	r3, #100	@ 0x64
 80022fe:	2201      	movs	r2, #1
 8002300:	4823      	ldr	r0, [pc, #140]	@ (8002390 <extflash_send_cmd+0xe0>)
 8002302:	f00e fc42 	bl	8010b8a <HAL_SPI_Transmit>

	if(command->address_en != 0)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	785b      	ldrb	r3, [r3, #1]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d006      	beq.n	800231c <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 800230e:	f107 0118 	add.w	r1, r7, #24
 8002312:	2364      	movs	r3, #100	@ 0x64
 8002314:	2203      	movs	r2, #3
 8002316:	481e      	ldr	r0, [pc, #120]	@ (8002390 <extflash_send_cmd+0xe0>)
 8002318:	f00e fc37 	bl	8010b8a <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	88db      	ldrh	r3, [r3, #6]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00e      	beq.n	8002342 <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	88db      	ldrh	r3, [r3, #6]
 8002328:	2b08      	cmp	r3, #8
 800232a:	bf28      	it	cs
 800232c:	2308      	movcs	r3, #8
 800232e:	b29b      	uxth	r3, r3
 8002330:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 8002332:	7ffb      	ldrb	r3, [r7, #31]
 8002334:	b29a      	uxth	r2, r3
 8002336:	f107 0110 	add.w	r1, r7, #16
 800233a:	2364      	movs	r3, #100	@ 0x64
 800233c:	4814      	ldr	r0, [pc, #80]	@ (8002390 <extflash_send_cmd+0xe0>)
 800233e:	f00e fc24 	bl	8010b8a <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	885b      	ldrh	r3, [r3, #2]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <extflash_send_cmd+0xb2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d007      	beq.n	8002362 <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68d9      	ldr	r1, [r3, #12]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	885a      	ldrh	r2, [r3, #2]
 800235a:	2364      	movs	r3, #100	@ 0x64
 800235c:	480c      	ldr	r0, [pc, #48]	@ (8002390 <extflash_send_cmd+0xe0>)
 800235e:	f00e fc14 	bl	8010b8a <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	889b      	ldrh	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <extflash_send_cmd+0xd2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6919      	ldr	r1, [r3, #16]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	889a      	ldrh	r2, [r3, #4]
 800237a:	2364      	movs	r3, #100	@ 0x64
 800237c:	4804      	ldr	r0, [pc, #16]	@ (8002390 <extflash_send_cmd+0xe0>)
 800237e:	f00e fd7a 	bl	8010e76 <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 8002382:	f7ff ff69 	bl	8002258 <extflash_cs_reset>

	return 0;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200003a4 	.word	0x200003a4

08002394 <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 80023ac:	2381      	movs	r3, #129	@ 0x81
 80023ae:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 80023b8:	2301      	movs	r3, #1
 80023ba:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff73 	bl	80022b0 <extflash_send_cmd>
 80023ca:	4603      	mov	r3, r0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 80023e8:	2382      	movs	r3, #130	@ 0x82
 80023ea:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ff5e 	bl	80022b0 <extflash_send_cmd>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b088      	sub	sp, #32
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002408:	f107 030c 	add.w	r3, r7, #12
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <extflash_set_write_protection+0x24>
 800241e:	2306      	movs	r3, #6
 8002420:	e000      	b.n	8002424 <extflash_set_write_protection+0x26>
 8002422:	2304      	movs	r3, #4
 8002424:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 8002426:	f107 030c 	add.w	r3, r7, #12
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ff40 	bl	80022b0 <extflash_send_cmd>
 8002430:	4603      	mov	r3, r0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b08a      	sub	sp, #40	@ 0x28
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	4613      	mov	r3, r2
 8002446:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 8002458:	235a      	movs	r3, #90	@ 0x5a
 800245a:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 800245c:	2301      	movs	r3, #1
 800245e:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002464:	2301      	movs	r3, #1
 8002466:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	b29b      	uxth	r3, r3
 800246c:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff1a 	bl	80022b0 <extflash_send_cmd>
 800247c:	4603      	mov	r3, r0

}
 800247e:	4618      	mov	r0, r3
 8002480:	3728      	adds	r7, #40	@ 0x28
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b08a      	sub	sp, #40	@ 0x28
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	4613      	mov	r3, r2
 8002492:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 80024a4:	230b      	movs	r3, #11
 80024a6:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 80024a8:	2301      	movs	r3, #1
 80024aa:	757b      	strb	r3, [r7, #21]
	command.address = address;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 80024b0:	2301      	movs	r3, #1
 80024b2:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fef5 	bl	80022b0 <extflash_send_cmd>
 80024c6:	4603      	mov	r3, r0

}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3728      	adds	r7, #40	@ 0x28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 80024d8:	f107 030c 	add.w	r3, r7, #12
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 80024e8:	23d7      	movs	r3, #215	@ 0xd7
 80024ea:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 80024ec:	2301      	movs	r3, #1
 80024ee:	737b      	strb	r3, [r7, #13]
	command.address = address;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fed9 	bl	80022b0 <extflash_send_cmd>
 80024fe:	4603      	mov	r3, r0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3720      	adds	r7, #32
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 8002512:	f107 030c 	add.w	r3, r7, #12
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	609a      	str	r2, [r3, #8]
 800251e:	60da      	str	r2, [r3, #12]
 8002520:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002526:	2301      	movs	r3, #1
 8002528:	737b      	strb	r3, [r7, #13]
	command.address = address;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 800252e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002532:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff feb7 	bl	80022b0 <extflash_send_cmd>
 8002542:	4603      	mov	r3, r0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	@ 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 8002560:	f007 fedc 	bl	800a31c <HAL_GetTick>
 8002564:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	031b      	lsls	r3, r3, #12
 800256e:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002570:	f107 0317 	add.w	r3, r7, #23
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff0d 	bl	8002394 <extflash_read_extended_read_reg>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	da10      	bge.n	80025a2 <extflash_sector_read+0x56>
 8002580:	f04f 33ff 	mov.w	r3, #4294967295
 8002584:	e037      	b.n	80025f6 <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002586:	f107 0317 	add.w	r3, r7, #23
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ff02 	bl	8002394 <extflash_read_extended_read_reg>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	da02      	bge.n	800259c <extflash_sector_read+0x50>
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	e02c      	b.n	80025f6 <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 800259c:	2001      	movs	r0, #1
 800259e:	f007 fec9 	bl	800a334 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d020      	beq.n	80025ee <extflash_sector_read+0xa2>
 80025ac:	f007 feb6 	bl	800a31c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025ba:	d3e4      	bcc.n	8002586 <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 80025bc:	e017      	b.n	80025ee <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 80025be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025c4:	6a38      	ldr	r0, [r7, #32]
 80025c6:	f7ff ff5e 	bl	8002486 <extflash_raw_read>
 80025ca:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	da02      	bge.n	80025d8 <extflash_sector_read+0x8c>
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e00e      	b.n	80025f6 <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025de:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 80025e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1e4      	bne.n	80025be <extflash_sector_read+0x72>
	}

	return 0;
 80025f4:	2300      	movs	r3, #0

}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3728      	adds	r7, #40	@ 0x28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 800260a:	f007 fe87 	bl	800a31c <HAL_GetTick>
 800260e:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002610:	f107 030b 	add.w	r3, r7, #11
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff febd 	bl	8002394 <extflash_read_extended_read_reg>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	da10      	bge.n	8002642 <extflash_wait_for_wop+0x44>
 8002620:	f04f 33ff 	mov.w	r3, #4294967295
 8002624:	e023      	b.n	800266e <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002626:	f107 030b 	add.w	r3, r7, #11
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff feb2 	bl	8002394 <extflash_read_extended_read_reg>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	da02      	bge.n	800263c <extflash_wait_for_wop+0x3e>
 8002636:	f04f 33ff 	mov.w	r3, #4294967295
 800263a:	e018      	b.n	800266e <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 800263c:	2001      	movs	r0, #1
 800263e:	f007 fe79 	bl	800a334 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 8002642:	7afb      	ldrb	r3, [r7, #11]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <extflash_wait_for_wop+0x5e>
 800264c:	f007 fe66 	bl	800a31c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	429a      	cmp	r2, r3
 800265a:	d8e4      	bhi.n	8002626 <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 800265c:	7afb      	ldrb	r3, [r7, #11]
 800265e:	f003 030e 	and.w	r3, r3, #14
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 8002666:	f06f 0301 	mvn.w	r3, #1
 800266a:	e000      	b.n	800266e <extflash_wait_for_wop+0x70>
	}

	return 0;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b088      	sub	sp, #32
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	031b      	lsls	r3, r3, #12
 800268e:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 8002690:	f7ff fea0 	bl	80023d4 <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 8002694:	e04e      	b.n	8002734 <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002696:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800269a:	f7ff ffb0 	bl	80025fe <extflash_wait_for_wop>
 800269e:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db4a      	blt.n	800273c <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7ff fea9 	bl	80023fe <extflash_set_write_protection>
 80026ac:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	db45      	blt.n	8002740 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 80026b4:	69b8      	ldr	r0, [r7, #24]
 80026b6:	f7ff ff0b 	bl	80024d0 <extflash_raw_erase>
 80026ba:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	db40      	blt.n	8002744 <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 80026c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026c6:	f7ff ff9a 	bl	80025fe <extflash_wait_for_wop>
 80026ca:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	db3a      	blt.n	8002748 <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e021      	b.n	800271c <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7ff fe90 	bl	80023fe <extflash_set_write_protection>
 80026de:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	db1e      	blt.n	8002724 <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 80026e6:	69f9      	ldr	r1, [r7, #28]
 80026e8:	69b8      	ldr	r0, [r7, #24]
 80026ea:	f7ff ff0d 	bl	8002508 <extflash_raw_page_write>
 80026ee:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db18      	blt.n	8002728 <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80026fc:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002704:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002706:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800270a:	f7ff ff78 	bl	80025fe <extflash_wait_for_wop>
 800270e:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	db0a      	blt.n	800272c <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3301      	adds	r3, #1
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b0f      	cmp	r3, #15
 8002720:	ddda      	ble.n	80026d8 <extflash_sector_write+0x62>
 8002722:	e004      	b.n	800272e <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002724:	bf00      	nop
 8002726:	e002      	b.n	800272e <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002728:	bf00      	nop
 800272a:	e000      	b.n	800272e <extflash_sector_write+0xb8>
			if(result < 0)break;
 800272c:	bf00      	nop
		}

		nsectors--;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3b01      	subs	r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1ad      	bne.n	8002696 <extflash_sector_write+0x20>
 800273a:	e006      	b.n	800274a <extflash_sector_write+0xd4>
		if(result < 0)break;
 800273c:	bf00      	nop
 800273e:	e004      	b.n	800274a <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002740:	bf00      	nop
 8002742:	e002      	b.n	800274a <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002744:	bf00      	nop
 8002746:	e000      	b.n	800274a <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002748:	bf00      	nop
	}

	extflash_set_write_protection(1);
 800274a:	2001      	movs	r0, #1
 800274c:	f7ff fe57 	bl	80023fe <extflash_set_write_protection>

	return 0;
 8002750:	2300      	movs	r3, #0

}
 8002752:	4618      	mov	r0, r3
 8002754:	3720      	adds	r7, #32
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 800275e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 8002770:	4b03      	ldr	r3, [pc, #12]	@ (8002780 <extflash_get_sector_count+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000210 	.word	0x20000210

08002784 <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
	return exflashInitDone;
 8002788:	4b03      	ldr	r3, [pc, #12]	@ (8002798 <extflash_is_initialized+0x14>)
 800278a:	781b      	ldrb	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000214 	.word	0x20000214

0800279c <extflash_init>:

int extflash_init()
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 80027a2:	2300      	movs	r3, #0
 80027a4:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 80027a6:	f107 0308 	add.w	r3, r7, #8
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	60da      	str	r2, [r3, #12]
 80027b4:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 80027ba:	4b26      	ldr	r3, [pc, #152]	@ (8002854 <extflash_init+0xb8>)
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 80027c0:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <extflash_init+0xbc>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 80027c6:	f7ff fd5f 	bl	8002288 <extflash_hard_reset>
	extflash_cs_reset();
 80027ca:	f7ff fd45 	bl	8002258 <extflash_cs_reset>
	extflash_wp_reset();
 80027ce:	f7ff fd4f 	bl	8002270 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 80027d2:	2390      	movs	r3, #144	@ 0x90
 80027d4:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 80027de:	2302      	movs	r3, #2
 80027e0:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 80027e2:	f107 031c 	add.w	r3, r7, #28
 80027e6:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 80027e8:	f107 0308 	add.w	r3, r7, #8
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fd5f 	bl	80022b0 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 80027f2:	7f3b      	ldrb	r3, [r7, #28]
 80027f4:	2b9d      	cmp	r3, #157	@ 0x9d
 80027f6:	d102      	bne.n	80027fe <extflash_init+0x62>
 80027f8:	7f7b      	ldrb	r3, [r7, #29]
 80027fa:	2b17      	cmp	r3, #23
 80027fc:	d002      	beq.n	8002804 <extflash_init+0x68>
	{
		return -1;
 80027fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002802:	e022      	b.n	800284a <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 8002804:	f107 0308 	add.w	r3, r7, #8
 8002808:	2214      	movs	r2, #20
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f012 fe05 	bl	801541c <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	2204      	movs	r2, #4
 8002816:	4619      	mov	r1, r3
 8002818:	2034      	movs	r0, #52	@ 0x34
 800281a:	f7ff fe0e 	bl	800243a <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a0e      	ldr	r2, [pc, #56]	@ (800285c <extflash_init+0xc0>)
 8002822:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 8002824:	4b0d      	ldr	r3, [pc, #52]	@ (800285c <extflash_init+0xc0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	4a0c      	ldr	r2, [pc, #48]	@ (800285c <extflash_init+0xc0>)
 800282c:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 800282e:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <extflash_init+0xc0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	08db      	lsrs	r3, r3, #3
 8002834:	4a09      	ldr	r2, [pc, #36]	@ (800285c <extflash_init+0xc0>)
 8002836:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 8002838:	4b08      	ldr	r3, [pc, #32]	@ (800285c <extflash_init+0xc0>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	0b1b      	lsrs	r3, r3, #12
 800283e:	4a06      	ldr	r2, [pc, #24]	@ (8002858 <extflash_init+0xbc>)
 8002840:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 8002842:	4b04      	ldr	r3, [pc, #16]	@ (8002854 <extflash_init+0xb8>)
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]

	return 0;
 8002848:	2300      	movs	r3, #0

}
 800284a:	4618      	mov	r0, r3
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000214 	.word	0x20000214
 8002858:	20000210 	.word	0x20000210
 800285c:	2000020c 	.word	0x2000020c

08002860 <System_Init>:
#include "lsm6dsv16x_rw.h"
#include "DS18B20.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 8002864:	4b1e      	ldr	r3, [pc, #120]	@ (80028e0 <System_Init+0x80>)
 8002866:	4a1f      	ldr	r2, [pc, #124]	@ (80028e4 <System_Init+0x84>)
 8002868:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 800286a:	4b1d      	ldr	r3, [pc, #116]	@ (80028e0 <System_Init+0x80>)
 800286c:	4a1e      	ldr	r2, [pc, #120]	@ (80028e8 <System_Init+0x88>)
 800286e:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 8002870:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <System_Init+0x80>)
 8002872:	4a1e      	ldr	r2, [pc, #120]	@ (80028ec <System_Init+0x8c>)
 8002874:	60da      	str	r2, [r3, #12]

	LED_Start(ORG_LED, 1, FAST);
 8002876:	2202      	movs	r2, #2
 8002878:	2101      	movs	r1, #1
 800287a:	2000      	movs	r0, #0
 800287c:	f000 fa64 	bl	8002d48 <LED_Start>

	BC_Init();
 8002880:	f7ff f9d2 	bl	8001c28 <BC_Init>
	INA3221_Init();
 8002884:	f7fd ffba 	bl	80007fc <INA3221_Init>
	FatFS_Init();
 8002888:	f000 f838 	bl	80028fc <FatFS_Init>
	Config_Init();
 800288c:	f000 f97e 	bl	8002b8c <Config_Init>
	Acc_Init(&acc);
 8002890:	4813      	ldr	r0, [pc, #76]	@ (80028e0 <System_Init+0x80>)
 8002892:	f000 f8cf 	bl	8002a34 <Acc_Init>
	while(SIM_Init() != HAL_OK);
 8002896:	bf00      	nop
 8002898:	f7fe fa1c 	bl	8000cd4 <SIM_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1fa      	bne.n	8002898 <System_Init+0x38>
	RTC_Init();
 80028a2:	f7fe f859 	bl	8000958 <RTC_Init>
	Temperature = Read_Temperature();
 80028a6:	f7fd ff71 	bl	800078c <Read_Temperature>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b10      	ldr	r3, [pc, #64]	@ (80028f0 <System_Init+0x90>)
 80028b0:	801a      	strh	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80028b2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80028b6:	490f      	ldr	r1, [pc, #60]	@ (80028f4 <System_Init+0x94>)
 80028b8:	480f      	ldr	r0, [pc, #60]	@ (80028f8 <System_Init+0x98>)
 80028ba:	f012 fc71 	bl	80151a0 <HAL_UARTEx_ReceiveToIdle_DMA>

	LED_Start(RED_LED, 1, ON);
 80028be:	2201      	movs	r2, #1
 80028c0:	2101      	movs	r1, #1
 80028c2:	2004      	movs	r0, #4
 80028c4:	f000 fa40 	bl	8002d48 <LED_Start>
	HAL_Delay(9000);
 80028c8:	f242 3028 	movw	r0, #9000	@ 0x2328
 80028cc:	f007 fd32 	bl	800a334 <HAL_Delay>

	LED_Stop(RED_LED);
 80028d0:	2004      	movs	r0, #4
 80028d2:	f000 fac5 	bl	8002e60 <LED_Stop>
	LED_Stop(ORG_LED);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f000 fac2 	bl	8002e60 <LED_Stop>
}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	200054dc 	.word	0x200054dc
 80028e4:	08003683 	.word	0x08003683
 80028e8:	080036db 	.word	0x080036db
 80028ec:	20000408 	.word	0x20000408
 80028f0:	20004718 	.word	0x20004718
 80028f4:	200054ec 	.word	0x200054ec
 80028f8:	20000624 	.word	0x20000624

080028fc <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]

	do
	{
		sys.RAM_Mounted = 0;
 8002912:	4b41      	ldr	r3, [pc, #260]	@ (8002a18 <FatFS_Init+0x11c>)
 8002914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002918:	461a      	mov	r2, r3
 800291a:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800291e:	f023 0302 	bic.w	r3, r3, #2
 8002922:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		
		mkfs_opt.fmt = FM_FAT32;
 8002926:	2302      	movs	r3, #2
 8002928:	713b      	strb	r3, [r7, #4]
		mkfs_opt.au_size = 1024; 
 800292a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800292e:	613b      	str	r3, [r7, #16]
		mkfs_opt.n_fat = 1;
 8002930:	2301      	movs	r3, #1
 8002932:	717b      	strb	r3, [r7, #5]
		mkfs_opt.align = 1;
 8002934:	2301      	movs	r3, #1
 8002936:	60bb      	str	r3, [r7, #8]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 8002938:	1d39      	adds	r1, r7, #4
 800293a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800293e:	4a37      	ldr	r2, [pc, #220]	@ (8002a1c <FatFS_Init+0x120>)
 8002940:	4837      	ldr	r0, [pc, #220]	@ (8002a20 <FatFS_Init+0x124>)
 8002942:	f007 f809 	bl	8009958 <f_mkfs>
 8002946:	4603      	mov	r3, r0
 8002948:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d114      	bne.n	800297a <FatFS_Init+0x7e>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 8002950:	2201      	movs	r2, #1
 8002952:	4933      	ldr	r1, [pc, #204]	@ (8002a20 <FatFS_Init+0x124>)
 8002954:	4833      	ldr	r0, [pc, #204]	@ (8002a24 <FatFS_Init+0x128>)
 8002956:	f006 f97d 	bl	8008c54 <f_mount>
 800295a:	4603      	mov	r3, r0
 800295c:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 800295e:	7dfb      	ldrb	r3, [r7, #23]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10c      	bne.n	800297e <FatFS_Init+0x82>
		{
			break;
		}

		sys.RAM_Mounted = 1;
 8002964:	4b2c      	ldr	r3, [pc, #176]	@ (8002a18 <FatFS_Init+0x11c>)
 8002966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800296a:	461a      	mov	r2, r3
 800296c:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 8002978:	e002      	b.n	8002980 <FatFS_Init+0x84>
			break;
 800297a:	bf00      	nop
 800297c:	e000      	b.n	8002980 <FatFS_Init+0x84>
			break;
 800297e:	bf00      	nop
	} while (1);

	do
	{
		sys.FLASH_Mounted = 0;
 8002980:	4b25      	ldr	r3, [pc, #148]	@ (8002a18 <FatFS_Init+0x11c>)
 8002982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002986:	461a      	mov	r2, r3
 8002988:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800298c:	f023 0304 	bic.w	r3, r3, #4
 8002990:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		fRes = f_mount(&flash_fs, "/flash", 1);
 8002994:	2201      	movs	r2, #1
 8002996:	4924      	ldr	r1, [pc, #144]	@ (8002a28 <FatFS_Init+0x12c>)
 8002998:	4824      	ldr	r0, [pc, #144]	@ (8002a2c <FatFS_Init+0x130>)
 800299a:	f006 f95b 	bl	8008c54 <f_mount>
 800299e:	4603      	mov	r3, r0
 80029a0:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
 80029a4:	2b0d      	cmp	r3, #13
 80029a6:	d124      	bne.n	80029f2 <FatFS_Init+0xf6>
		{
			memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	2210      	movs	r2, #16
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f012 fd34 	bl	801541c <memset>
			mkfs_opt.fmt = FM_FAT32;
 80029b4:	2302      	movs	r3, #2
 80029b6:	713b      	strb	r3, [r7, #4]
			mkfs_opt.au_size = 4096;    
 80029b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029bc:	613b      	str	r3, [r7, #16]
			mkfs_opt.n_fat = 1;
 80029be:	2301      	movs	r3, #1
 80029c0:	717b      	strb	r3, [r7, #5]
			mkfs_opt.align = 1;
 80029c2:	2301      	movs	r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 80029c6:	1d39      	adds	r1, r7, #4
 80029c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029cc:	4a18      	ldr	r2, [pc, #96]	@ (8002a30 <FatFS_Init+0x134>)
 80029ce:	4816      	ldr	r0, [pc, #88]	@ (8002a28 <FatFS_Init+0x12c>)
 80029d0:	f006 ffc2 	bl	8009958 <f_mkfs>
 80029d4:	4603      	mov	r3, r0
 80029d6:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d114      	bne.n	8002a08 <FatFS_Init+0x10c>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 80029de:	2201      	movs	r2, #1
 80029e0:	4911      	ldr	r1, [pc, #68]	@ (8002a28 <FatFS_Init+0x12c>)
 80029e2:	4812      	ldr	r0, [pc, #72]	@ (8002a2c <FatFS_Init+0x130>)
 80029e4:	f006 f936 	bl	8008c54 <f_mount>
 80029e8:	4603      	mov	r3, r0
 80029ea:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10c      	bne.n	8002a0c <FatFS_Init+0x110>
			{
				break;
			}
		}

		sys.FLASH_Mounted = 1;
 80029f2:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <FatFS_Init+0x11c>)
 80029f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029f8:	461a      	mov	r2, r3
 80029fa:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 8002a06:	e002      	b.n	8002a0e <FatFS_Init+0x112>
				break;
 8002a08:	bf00      	nop
 8002a0a:	e000      	b.n	8002a0e <FatFS_Init+0x112>
				break;
 8002a0c:	bf00      	nop
	} while (1);


}
 8002a0e:	bf00      	nop
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000740 	.word	0x20000740
 8002a1c:	20001e08 	.word	0x20001e08
 8002a20:	080168c8 	.word	0x080168c8
 8002a24:	20001dd4 	.word	0x20001dd4
 8002a28:	080168d0 	.word	0x080168d0
 8002a2c:	20002e08 	.word	0x20002e08
 8002a30:	20002e3c 	.word	0x20002e3c

08002a34 <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
void Acc_Init(stmdev_ctx_t* acc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 8002a3c:	f107 0310 	add.w	r3, r7, #16
 8002a40:	2100      	movs	r1, #0
 8002a42:	460a      	mov	r2, r1
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	460a      	mov	r2, r1
 8002a48:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 8002a52:	7c3b      	ldrb	r3, [r7, #16]
 8002a54:	f043 0308 	orr.w	r3, r3, #8
 8002a58:	743b      	strb	r3, [r7, #16]


	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8002a5a:	f107 030f 	add.w	r3, r7, #15
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fae1 	bl	8003028 <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	2b70      	cmp	r3, #112	@ 0x70
 8002a6a:	d01f      	beq.n	8002aac <Acc_Init+0x78>
		while (acc_whoamI != LSM6DSV16X_ID)
 8002a6c:	e01b      	b.n	8002aa6 <Acc_Init+0x72>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8002a6e:	f107 030f 	add.w	r3, r7, #15
 8002a72:	4619      	mov	r1, r3
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fad7 	bl	8003028 <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d10f      	bne.n	8002aa6 <Acc_Init+0x72>
			{
				sys.ACC_Present = 0;
 8002a86:	4b3e      	ldr	r3, [pc, #248]	@ (8002b80 <Acc_Init+0x14c>)
 8002a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				flags.ACC_Complete = 1;
 8002a9a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b84 <Acc_Init+0x150>)
 8002a9c:	7813      	ldrb	r3, [r2, #0]
 8002a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002aa2:	7013      	strb	r3, [r2, #0]
 8002aa4:	e069      	b.n	8002b7a <Acc_Init+0x146>
		while (acc_whoamI != LSM6DSV16X_ID)
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	2b70      	cmp	r3, #112	@ 0x70
 8002aaa:	d1e0      	bne.n	8002a6e <Acc_Init+0x3a>
				return;
			}
		}
	sys.ACC_Present = 1;
 8002aac:	4b34      	ldr	r3, [pc, #208]	@ (8002b80 <Acc_Init+0x14c>)
 8002aae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fa0a 	bl	8002edc <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 8002ac8:	f107 0316 	add.w	r3, r7, #22
 8002acc:	4619      	mov	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fa54 	bl	8002f7c <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 8002ad4:	200a      	movs	r0, #10
 8002ad6:	f007 fc2d 	bl	800a334 <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 8002ada:	7dbb      	ldrb	r3, [r7, #22]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f3      	bne.n	8002ac8 <Acc_Init+0x94>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fb9d 	bl	8003222 <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 8002ae8:	2101      	movs	r1, #1
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fda3 	bl	8003636 <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 8002af0:	2100      	movs	r1, #0
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fafa 	bl	80030ec <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 8002af8:	2100      	movs	r1, #0
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fb6b 	bl	80031d6 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 8002b00:	2109      	movs	r1, #9
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fd25 	bl	8003552 <lsm6dsv16x_fifo_xl_batch_set>
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 8002b08:	2100      	movs	r1, #0
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fd47 	bl	800359e <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 8002b10:	2100      	movs	r1, #0
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fd69 	bl	80035ea <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8002b18:	2100      	movs	r1, #0
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fa95 	bl	800304a <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8002b20:	2100      	movs	r1, #0
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fb08 	bl	8003138 <lsm6dsv16x_gy_data_rate_set>
	lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 8002b28:	2110      	movs	r1, #16
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fb9f 	bl	800326e <lsm6dsv16x_odr_trig_cfg_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 8002b30:	2103      	movs	r1, #3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fada 	bl	80030ec <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 8002b38:	2103      	movs	r1, #3
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fb4b 	bl	80031d6 <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 8002b40:	2101      	movs	r1, #1
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fcbf 	bl	80034c6 <lsm6dsv16x_den_polarity_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 8002b48:	2109      	movs	r1, #9
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fa7d 	bl	800304a <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 8002b50:	2100      	movs	r1, #0
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fbda 	bl	800330c <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 8002b58:	2104      	movs	r1, #4
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fbb0 	bl	80032c0 <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 8002b60:	21c8      	movs	r1, #200	@ 0xc8
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fcd5 	bl	8003512 <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 8002b68:	f107 0310 	add.w	r3, r7, #16
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fbf2 	bl	8003358 <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 8002b74:	4b04      	ldr	r3, [pc, #16]	@ (8002b88 <Acc_Init+0x154>)
 8002b76:	2204      	movs	r2, #4
 8002b78:	615a      	str	r2, [r3, #20]
}
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000740 	.word	0x20000740
 8002b84:	20001c68 	.word	0x20001c68
 8002b88:	40010400 	.word	0x40010400

08002b8c <Config_Init>:

/*-----INIZiALIZZAZIONE CONFIGURAZIONE-----*/
void Config_Init(void)
{
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
    FIL config_file;
    UINT bytes_read;
    UINT bytes_written;

    if (f_open(&config_file, CONFIG_FILE, FA_READ) == FR_OK) 
 8002b96:	f107 0318 	add.w	r3, r7, #24
 8002b9a:	3b0c      	subs	r3, #12
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	4960      	ldr	r1, [pc, #384]	@ (8002d20 <Config_Init+0x194>)
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f006 f8a1 	bl	8008ce8 <f_open>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d121      	bne.n	8002bf0 <Config_Init+0x64>
	{
        if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 8002bac:	f107 0318 	add.w	r3, r7, #24
 8002bb0:	3b10      	subs	r3, #16
 8002bb2:	f107 0018 	add.w	r0, r7, #24
 8002bb6:	380c      	subs	r0, #12
 8002bb8:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8002bbc:	4959      	ldr	r1, [pc, #356]	@ (8002d24 <Config_Init+0x198>)
 8002bbe:	f006 fa2b 	bl	8009018 <f_read>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10d      	bne.n	8002be4 <Config_Init+0x58>
 8002bc8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002bcc:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002bd0:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8002bd4:	d106      	bne.n	8002be4 <Config_Init+0x58>
		{
			f_close(&config_file);
 8002bd6:	f107 0318 	add.w	r3, r7, #24
 8002bda:	3b0c      	subs	r3, #12
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f006 fd77 	bl	80096d0 <f_close>
			return;
 8002be2:	e098      	b.n	8002d16 <Config_Init+0x18a>
        }
        f_close(&config_file);
 8002be4:	f107 0318 	add.w	r3, r7, #24
 8002be8:	3b0c      	subs	r3, #12
 8002bea:	4618      	mov	r0, r3
 8002bec:	f006 fd70 	bl	80096d0 <f_close>
    }

    config.device_id = 0;
 8002bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8002d24 <Config_Init+0x198>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
	config.samp_freq = 800;
 8002bf6:	4b4b      	ldr	r3, [pc, #300]	@ (8002d24 <Config_Init+0x198>)
 8002bf8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002bfc:	805a      	strh	r2, [r3, #2]
	config.buffering_secs = 30;
 8002bfe:	4b49      	ldr	r3, [pc, #292]	@ (8002d24 <Config_Init+0x198>)
 8002c00:	221e      	movs	r2, #30
 8002c02:	711a      	strb	r2, [r3, #4]
	config.hammer_th = 2048;
 8002c04:	4b47      	ldr	r3, [pc, #284]	@ (8002d24 <Config_Init+0x198>)
 8002c06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c0a:	80da      	strh	r2, [r3, #6]
    for(int i = 0; i < 24; i++) 
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002c12:	f102 0214 	add.w	r2, r2, #20
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	e01f      	b.n	8002c5a <Config_Init+0xce>
	{
        config.low_th[i] = 0;
 8002c1a:	4a42      	ldr	r2, [pc, #264]	@ (8002d24 <Config_Init+0x198>)
 8002c1c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002c20:	f103 0314 	add.w	r3, r3, #20
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3304      	adds	r3, #4
 8002c28:	2100      	movs	r1, #0
 8002c2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        config.high_th[i] = 4096;
 8002c2e:	4a3d      	ldr	r2, [pc, #244]	@ (8002d24 <Config_Init+0x198>)
 8002c30:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002c34:	f103 0314 	add.w	r3, r3, #20
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	331c      	adds	r3, #28
 8002c3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < 24; i++) 
 8002c44:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002c48:	f103 0314 	add.w	r3, r3, #20
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002c54:	f102 0214 	add.w	r2, r2, #20
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002c5e:	f103 0314 	add.w	r3, r3, #20
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b17      	cmp	r3, #23
 8002c66:	ddd8      	ble.n	8002c1a <Config_Init+0x8e>
    }
    strcpy(config.data_topic, "Data_Topic");
 8002c68:	4a2f      	ldr	r2, [pc, #188]	@ (8002d28 <Config_Init+0x19c>)
 8002c6a:	4b30      	ldr	r3, [pc, #192]	@ (8002d2c <Config_Init+0x1a0>)
 8002c6c:	cb03      	ldmia	r3!, {r0, r1}
 8002c6e:	6010      	str	r0, [r2, #0]
 8002c70:	6051      	str	r1, [r2, #4]
 8002c72:	8819      	ldrh	r1, [r3, #0]
 8002c74:	789b      	ldrb	r3, [r3, #2]
 8002c76:	8111      	strh	r1, [r2, #8]
 8002c78:	7293      	strb	r3, [r2, #10]
    strcpy(config.command_topic, "Command_Topic");  
 8002c7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002d30 <Config_Init+0x1a4>)
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d34 <Config_Init+0x1a8>)
 8002c7e:	4614      	mov	r4, r2
 8002c80:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c82:	6020      	str	r0, [r4, #0]
 8002c84:	6061      	str	r1, [r4, #4]
 8002c86:	60a2      	str	r2, [r4, #8]
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	81a3      	strh	r3, [r4, #12]
    strcpy(config.ota_topic, "OTA_Topic");
 8002c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8002d38 <Config_Init+0x1ac>)
 8002c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d3c <Config_Init+0x1b0>)
 8002c90:	cb03      	ldmia	r3!, {r0, r1}
 8002c92:	6010      	str	r0, [r2, #0]
 8002c94:	6051      	str	r1, [r2, #4]
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	8113      	strh	r3, [r2, #8]
	strcpy(config.info_topic, "Info_Topic");
 8002c9a:	4a29      	ldr	r2, [pc, #164]	@ (8002d40 <Config_Init+0x1b4>)
 8002c9c:	4b29      	ldr	r3, [pc, #164]	@ (8002d44 <Config_Init+0x1b8>)
 8002c9e:	cb03      	ldmia	r3!, {r0, r1}
 8002ca0:	6010      	str	r0, [r2, #0]
 8002ca2:	6051      	str	r1, [r2, #4]
 8002ca4:	8819      	ldrh	r1, [r3, #0]
 8002ca6:	789b      	ldrb	r3, [r3, #2]
 8002ca8:	8111      	strh	r1, [r2, #8]
 8002caa:	7293      	strb	r3, [r2, #10]
    
    if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8002cac:	f107 0318 	add.w	r3, r7, #24
 8002cb0:	3b0c      	subs	r3, #12
 8002cb2:	220a      	movs	r2, #10
 8002cb4:	491a      	ldr	r1, [pc, #104]	@ (8002d20 <Config_Init+0x194>)
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f006 f816 	bl	8008ce8 <f_open>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d128      	bne.n	8002d14 <Config_Init+0x188>
    {
        return;
    }

    if (f_write(&config_file, &config, sizeof(Config_Typedef), &bytes_written) != FR_OK || bytes_written != sizeof(Config_Typedef)) 
 8002cc2:	f107 0318 	add.w	r3, r7, #24
 8002cc6:	3b14      	subs	r3, #20
 8002cc8:	f107 0018 	add.w	r0, r7, #24
 8002ccc:	380c      	subs	r0, #12
 8002cce:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8002cd2:	4914      	ldr	r1, [pc, #80]	@ (8002d24 <Config_Init+0x198>)
 8002cd4:	f006 faf3 	bl	80092be <f_write>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <Config_Init+0x160>
 8002cde:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ce2:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002ce6:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8002cea:	d006      	beq.n	8002cfa <Config_Init+0x16e>
	{
        f_close(&config_file);
 8002cec:	f107 0318 	add.w	r3, r7, #24
 8002cf0:	3b0c      	subs	r3, #12
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f006 fcec 	bl	80096d0 <f_close>
        return;
 8002cf8:	e00d      	b.n	8002d16 <Config_Init+0x18a>
    }
    
    f_sync(&config_file);
 8002cfa:	f107 0318 	add.w	r3, r7, #24
 8002cfe:	3b0c      	subs	r3, #12
 8002d00:	4618      	mov	r0, r3
 8002d02:	f006 fc65 	bl	80095d0 <f_sync>
    f_close(&config_file);
 8002d06:	f107 0318 	add.w	r3, r7, #24
 8002d0a:	3b0c      	subs	r3, #12
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f006 fcdf 	bl	80096d0 <f_close>
 8002d12:	e000      	b.n	8002d16 <Config_Init+0x18a>
        return;
 8002d14:	bf00      	nop
}
 8002d16:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd90      	pop	{r4, r7, pc}
 8002d20:	080168d8 	.word	0x080168d8
 8002d24:	20001c6c 	.word	0x20001c6c
 8002d28:	20001cd4 	.word	0x20001cd4
 8002d2c:	080168ec 	.word	0x080168ec
 8002d30:	20001d14 	.word	0x20001d14
 8002d34:	080168f8 	.word	0x080168f8
 8002d38:	20001d54 	.word	0x20001d54
 8002d3c:	08016908 	.word	0x08016908
 8002d40:	20001d94 	.word	0x20001d94
 8002d44:	08016914 	.word	0x08016914

08002d48 <LED_Start>:
#include "leds.h"
#include "peripherals.h"

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint32_t freq_hz, uint8_t mode)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	@ 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	4613      	mov	r3, r2
 8002d54:	71fb      	strb	r3, [r7, #7]
    TIM_HandleTypeDef *htim = LED_TIMER;
 8002d56:	4b3f      	ldr	r3, [pc, #252]	@ (8002e54 <LED_Start+0x10c>)
 8002d58:	61bb      	str	r3, [r7, #24]
    uint32_t prescaler = (uint32_t)(SystemCoreClock / 1000000 - 1);
 8002d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e58 <LED_Start+0x110>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e5c <LED_Start+0x114>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	0c9b      	lsrs	r3, r3, #18
 8002d66:	3b01      	subs	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]
    uint32_t period = (prescaler / freq_hz) - 1;
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d72:	3b01      	subs	r3, #1
 8002d74:	613b      	str	r3, [r7, #16]
	uint32_t pulse = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]

	switch(mode)
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d00d      	beq.n	8002d9c <LED_Start+0x54>
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	dc0f      	bgt.n	8002da4 <LED_Start+0x5c>
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d002      	beq.n	8002d8e <LED_Start+0x46>
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d003      	beq.n	8002d94 <LED_Start+0x4c>
 8002d8c:	e00a      	b.n	8002da4 <LED_Start+0x5c>
	{
		case ON:
			pulse = period; 
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	61fb      	str	r3, [r7, #28]
		    break;
 8002d92:	e007      	b.n	8002da4 <LED_Start+0x5c>
		case FAST:
			pulse = period / 2;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
			break;
 8002d9a:	e003      	b.n	8002da4 <LED_Start+0x5c>
		case SLOW:
			pulse = period / 4;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	61fb      	str	r3, [r7, #28]
			break;
 8002da2:	bf00      	nop
	}

    // Imposta periodo e prescaler
    htim->Instance->PSC = prescaler;
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	629a      	str	r2, [r3, #40]	@ 0x28
    htim->Instance->ARR = period;
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	62da      	str	r2, [r3, #44]	@ 0x2c
    htim->Instance->CCR1 = (LED == GRN_LED) ? pulse : htim->Instance->CCR1;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d003      	beq.n	8002dc2 <LED_Start+0x7a>
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc0:	e000      	b.n	8002dc4 <LED_Start+0x7c>
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	6353      	str	r3, [r2, #52]	@ 0x34
    htim->Instance->CCR2 = (LED == ORG_LED) ? pulse : htim->Instance->CCR2;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <LED_Start+0x90>
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd6:	e000      	b.n	8002dda <LED_Start+0x92>
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	6393      	str	r3, [r2, #56]	@ 0x38
    htim->Instance->CCR3 = (LED == RED_LED) ? pulse : htim->Instance->CCR3;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d003      	beq.n	8002dee <LED_Start+0xa6>
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dec:	e000      	b.n	8002df0 <LED_Start+0xa8>
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	63d3      	str	r3, [r2, #60]	@ 0x3c

    // Avvia PWM solo se non già attivo
    switch(LED)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d009      	beq.n	8002e10 <LED_Start+0xc8>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d821      	bhi.n	8002e46 <LED_Start+0xfe>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00c      	beq.n	8002e22 <LED_Start+0xda>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d012      	beq.n	8002e34 <LED_Start+0xec>
            break;
        case RED_LED:
            htim->Instance->CCER |= TIM_CCER_CC3E;
            break;
    }
}
 8002e0e:	e01a      	b.n	8002e46 <LED_Start+0xfe>
            htim->Instance->CCER |= TIM_CCER_CC1E;
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6a1a      	ldr	r2, [r3, #32]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	621a      	str	r2, [r3, #32]
            break;
 8002e20:	e011      	b.n	8002e46 <LED_Start+0xfe>
            htim->Instance->CCER |= TIM_CCER_CC2E;
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0210 	orr.w	r2, r2, #16
 8002e30:	621a      	str	r2, [r3, #32]
            break;
 8002e32:	e008      	b.n	8002e46 <LED_Start+0xfe>
            htim->Instance->CCER |= TIM_CCER_CC3E;
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a1a      	ldr	r2, [r3, #32]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e42:	621a      	str	r2, [r3, #32]
            break;
 8002e44:	bf00      	nop
}
 8002e46:	bf00      	nop
 8002e48:	3724      	adds	r7, #36	@ 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	2000046c 	.word	0x2000046c
 8002e58:	20000168 	.word	0x20000168
 8002e5c:	431bde83 	.word	0x431bde83

08002e60 <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(LED_TIMER, LED);
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4803      	ldr	r0, [pc, #12]	@ (8002e78 <LED_Stop+0x18>)
 8002e6c:	f00f f964 	bl	8012138 <HAL_TIM_PWM_Stop>
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	2000046c 	.word	0x2000046c

08002e7c <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	461a      	mov	r2, r3
 8002e88:	460b      	mov	r3, r1
 8002e8a:	72fb      	strb	r3, [r7, #11]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	685c      	ldr	r4, [r3, #4]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	68d8      	ldr	r0, [r3, #12]
 8002e98:	893b      	ldrh	r3, [r7, #8]
 8002e9a:	7af9      	ldrb	r1, [r7, #11]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	47a0      	blx	r4
 8002ea0:	6178      	str	r0, [r7, #20]

  return ret;
 8002ea2:	697b      	ldr	r3, [r7, #20]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd90      	pop	{r4, r7, pc}

08002eac <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	460b      	mov	r3, r1
 8002eba:	72fb      	strb	r3, [r7, #11]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681c      	ldr	r4, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	68d8      	ldr	r0, [r3, #12]
 8002ec8:	893b      	ldrh	r3, [r7, #8]
 8002eca:	7af9      	ldrb	r1, [r7, #11]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	47a0      	blx	r4
 8002ed0:	6178      	str	r0, [r7, #20]

  return ret;
 8002ed2:	697b      	ldr	r3, [r7, #20]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd90      	pop	{r4, r7, pc}

08002edc <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002ee8:	f107 020c 	add.w	r2, r7, #12
 8002eec:	2301      	movs	r3, #1
 8002eee:	2112      	movs	r1, #18
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ffc3 	bl	8002e7c <lsm6dsv16x_read_reg>
 8002ef6:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002ef8:	f107 0210 	add.w	r2, r7, #16
 8002efc:	2301      	movs	r3, #1
 8002efe:	2101      	movs	r1, #1
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff ffbb 	bl	8002e7c <lsm6dsv16x_read_reg>
 8002f06:	4602      	mov	r2, r0
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <lsm6dsv16x_reset_set+0x3c>
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	e02d      	b.n	8002f74 <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	7b3b      	ldrb	r3, [r7, #12]
 8002f24:	f362 13c7 	bfi	r3, r2, #7, #1
 8002f28:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	085b      	lsrs	r3, r3, #1
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	7b3b      	ldrb	r3, [r7, #12]
 8002f36:	f362 0300 	bfi	r3, r2, #0, #1
 8002f3a:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	7c3b      	ldrb	r3, [r7, #16]
 8002f46:	f362 0382 	bfi	r3, r2, #2, #1
 8002f4a:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002f4c:	f107 020c 	add.w	r2, r7, #12
 8002f50:	2301      	movs	r3, #1
 8002f52:	2112      	movs	r1, #18
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ffa9 	bl	8002eac <lsm6dsv16x_write_reg>
 8002f5a:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002f5c:	f107 0210 	add.w	r2, r7, #16
 8002f60:	2301      	movs	r3, #1
 8002f62:	2101      	movs	r1, #1
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff ffa1 	bl	8002eac <lsm6dsv16x_write_reg>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	4413      	add	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  return ret;
 8002f72:	697b      	ldr	r3, [r7, #20]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002f86:	f107 020c 	add.w	r2, r7, #12
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	2112      	movs	r1, #18
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ff74 	bl	8002e7c <lsm6dsv16x_read_reg>
 8002f94:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002f96:	f107 0210 	add.w	r2, r7, #16
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ff6c 	bl	8002e7c <lsm6dsv16x_read_reg>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	4413      	add	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <lsm6dsv16x_reset_get+0x3a>
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	e033      	b.n	800301e <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 8002fb6:	7b3b      	ldrb	r3, [r7, #12]
 8002fb8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	009a      	lsls	r2, r3, #2
 8002fc0:	7b3b      	ldrb	r3, [r7, #12]
 8002fc2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	7c3a      	ldrb	r2, [r7, #16]
 8002fce:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d81c      	bhi.n	8003014 <lsm6dsv16x_reset_get+0x98>
 8002fda:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe0 <lsm6dsv16x_reset_get+0x64>)
 8002fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe0:	08002ff5 	.word	0x08002ff5
 8002fe4:	08002ffd 	.word	0x08002ffd
 8002fe8:	08003005 	.word	0x08003005
 8002fec:	08003015 	.word	0x08003015
 8002ff0:	0800300d 	.word	0x0800300d
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
      break;
 8002ffa:	e00f      	b.n	800301c <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
      break;
 8003002:	e00b      	b.n	800301c <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2202      	movs	r2, #2
 8003008:	701a      	strb	r2, [r3, #0]
      break;
 800300a:	e007      	b.n	800301c <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2204      	movs	r2, #4
 8003010:	701a      	strb	r2, [r3, #0]
      break;
 8003012:	e003      	b.n	800301c <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
      break;
 800301a:	bf00      	nop
  }

  return ret;
 800301c:	697b      	ldr	r3, [r7, #20]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop

08003028 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 8003032:	2301      	movs	r3, #1
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	210f      	movs	r1, #15
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ff1f 	bl	8002e7c <lsm6dsv16x_read_reg>
 800303e:	60f8      	str	r0, [r7, #12]

  return ret;
 8003040:	68fb      	ldr	r3, [r7, #12]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003056:	f107 0210 	add.w	r2, r7, #16
 800305a:	2301      	movs	r3, #1
 800305c:	2110      	movs	r1, #16
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ff0c 	bl	8002e7c <lsm6dsv16x_read_reg>
 8003064:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <lsm6dsv16x_xl_data_rate_set+0x26>
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	e039      	b.n	80030e4 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	b2da      	uxtb	r2, r3
 8003078:	7c3b      	ldrb	r3, [r7, #16]
 800307a:	f362 0303 	bfi	r3, r2, #0, #4
 800307e:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003080:	f107 0210 	add.w	r2, r7, #16
 8003084:	2301      	movs	r3, #1
 8003086:	2110      	movs	r1, #16
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ff0f 	bl	8002eac <lsm6dsv16x_write_reg>
 800308e:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <lsm6dsv16x_xl_data_rate_set+0x50>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	e024      	b.n	80030e4 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01d      	beq.n	80030e2 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80030a6:	f107 020c 	add.w	r2, r7, #12
 80030aa:	2301      	movs	r3, #1
 80030ac:	2162      	movs	r1, #98	@ 0x62
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff fee4 	bl	8002e7c <lsm6dsv16x_read_reg>
 80030b4:	4602      	mov	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	4413      	add	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	7b3b      	ldrb	r3, [r7, #12]
 80030c6:	f362 0301 	bfi	r3, r2, #0, #2
 80030ca:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80030cc:	f107 020c 	add.w	r2, r7, #12
 80030d0:	2301      	movs	r3, #1
 80030d2:	2162      	movs	r1, #98	@ 0x62
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff fee9 	bl	8002eac <lsm6dsv16x_write_reg>
 80030da:	4602      	mov	r2, r0
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	4413      	add	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80030e2:	697b      	ldr	r3, [r7, #20]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80030f8:	f107 0208 	add.w	r2, r7, #8
 80030fc:	2301      	movs	r3, #1
 80030fe:	2110      	movs	r1, #16
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff febb 	bl	8002e7c <lsm6dsv16x_read_reg>
 8003106:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10f      	bne.n	800312e <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	b2da      	uxtb	r2, r3
 8003116:	7a3b      	ldrb	r3, [r7, #8]
 8003118:	f362 1306 	bfi	r3, r2, #4, #3
 800311c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800311e:	f107 0208 	add.w	r2, r7, #8
 8003122:	2301      	movs	r3, #1
 8003124:	2110      	movs	r1, #16
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fec0 	bl	8002eac <lsm6dsv16x_write_reg>
 800312c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800312e:	68fb      	ldr	r3, [r7, #12]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003144:	f107 0210 	add.w	r2, r7, #16
 8003148:	2301      	movs	r3, #1
 800314a:	2111      	movs	r1, #17
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fe95 	bl	8002e7c <lsm6dsv16x_read_reg>
 8003152:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	b2da      	uxtb	r2, r3
 800315c:	7c3b      	ldrb	r3, [r7, #16]
 800315e:	f362 0303 	bfi	r3, r2, #0, #4
 8003162:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003164:	f107 0210 	add.w	r2, r7, #16
 8003168:	2301      	movs	r3, #1
 800316a:	2111      	movs	r1, #17
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff fe9d 	bl	8002eac <lsm6dsv16x_write_reg>
 8003172:	4602      	mov	r2, r0
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	4413      	add	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	e024      	b.n	80031ce <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800318a:	7cfb      	ldrb	r3, [r7, #19]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01d      	beq.n	80031cc <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003190:	f107 020c 	add.w	r2, r7, #12
 8003194:	2301      	movs	r3, #1
 8003196:	2162      	movs	r1, #98	@ 0x62
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff fe6f 	bl	8002e7c <lsm6dsv16x_read_reg>
 800319e:	4602      	mov	r2, r0
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	4413      	add	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 80031a6:	7cfb      	ldrb	r3, [r7, #19]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	7b3b      	ldrb	r3, [r7, #12]
 80031b0:	f362 0301 	bfi	r3, r2, #0, #2
 80031b4:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80031b6:	f107 020c 	add.w	r2, r7, #12
 80031ba:	2301      	movs	r3, #1
 80031bc:	2162      	movs	r1, #98	@ 0x62
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff fe74 	bl	8002eac <lsm6dsv16x_write_reg>
 80031c4:	4602      	mov	r2, r0
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	4413      	add	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80031cc:	697b      	ldr	r3, [r7, #20]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80031e2:	f107 0208 	add.w	r2, r7, #8
 80031e6:	2301      	movs	r3, #1
 80031e8:	2111      	movs	r1, #17
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff fe46 	bl	8002e7c <lsm6dsv16x_read_reg>
 80031f0:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10f      	bne.n	8003218 <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	7a3b      	ldrb	r3, [r7, #8]
 8003202:	f362 1306 	bfi	r3, r2, #4, #3
 8003206:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003208:	f107 0208 	add.w	r2, r7, #8
 800320c:	2301      	movs	r3, #1
 800320e:	2111      	movs	r1, #17
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff fe4b 	bl	8002eac <lsm6dsv16x_write_reg>
 8003216:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003218:	68fb      	ldr	r3, [r7, #12]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800322e:	f107 0208 	add.w	r2, r7, #8
 8003232:	2301      	movs	r3, #1
 8003234:	2112      	movs	r1, #18
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff fe20 	bl	8002e7c <lsm6dsv16x_read_reg>
 800323c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10f      	bne.n	8003264 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	b2da      	uxtb	r2, r3
 800324c:	7a3b      	ldrb	r3, [r7, #8]
 800324e:	f362 1386 	bfi	r3, r2, #6, #1
 8003252:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003254:	f107 0208 	add.w	r2, r7, #8
 8003258:	2301      	movs	r3, #1
 800325a:	2112      	movs	r1, #18
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff fe25 	bl	8002eac <lsm6dsv16x_write_reg>
 8003262:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003264:	68fb      	ldr	r3, [r7, #12]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d802      	bhi.n	800328c <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295
 800328a:	e015      	b.n	80032b8 <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 800328c:	f107 0208 	add.w	r2, r7, #8
 8003290:	2301      	movs	r3, #1
 8003292:	2106      	movs	r1, #6
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff fdf1 	bl	8002e7c <lsm6dsv16x_read_reg>
 800329a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 80032a6:	f107 0208 	add.w	r2, r7, #8
 80032aa:	2301      	movs	r3, #1
 80032ac:	2106      	movs	r1, #6
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff fdfc 	bl	8002eac <lsm6dsv16x_write_reg>
 80032b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80032b6:	68fb      	ldr	r3, [r7, #12]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80032cc:	f107 0208 	add.w	r2, r7, #8
 80032d0:	2301      	movs	r3, #1
 80032d2:	2115      	movs	r1, #21
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff fdd1 	bl	8002e7c <lsm6dsv16x_read_reg>
 80032da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10f      	bne.n	8003302 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	7a3b      	ldrb	r3, [r7, #8]
 80032ec:	f362 0303 	bfi	r3, r2, #0, #4
 80032f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80032f2:	f107 0208 	add.w	r2, r7, #8
 80032f6:	2301      	movs	r3, #1
 80032f8:	2115      	movs	r1, #21
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff fdd6 	bl	8002eac <lsm6dsv16x_write_reg>
 8003300:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003302:	68fb      	ldr	r3, [r7, #12]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003318:	f107 0208 	add.w	r2, r7, #8
 800331c:	2301      	movs	r3, #1
 800331e:	2117      	movs	r1, #23
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff fdab 	bl	8002e7c <lsm6dsv16x_read_reg>
 8003326:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10f      	bne.n	800334e <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	b2da      	uxtb	r2, r3
 8003336:	7a3b      	ldrb	r3, [r7, #8]
 8003338:	f362 0301 	bfi	r3, r2, #0, #2
 800333c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 800333e:	f107 0208 	add.w	r2, r7, #8
 8003342:	2301      	movs	r3, #1
 8003344:	2117      	movs	r1, #23
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff fdb0 	bl	8002eac <lsm6dsv16x_write_reg>
 800334c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800334e:	68fb      	ldr	r3, [r7, #12]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003362:	f107 0210 	add.w	r2, r7, #16
 8003366:	2301      	movs	r3, #1
 8003368:	210d      	movs	r1, #13
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff fd86 	bl	8002e7c <lsm6dsv16x_read_reg>
 8003370:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <lsm6dsv16x_pin_int1_route_set+0x24>
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	e0a0      	b.n	80034be <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003384:	b2da      	uxtb	r2, r3
 8003386:	7c3b      	ldrb	r3, [r7, #16]
 8003388:	f362 0300 	bfi	r3, r2, #0, #1
 800338c:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003396:	b2da      	uxtb	r2, r3
 8003398:	7c3b      	ldrb	r3, [r7, #16]
 800339a:	f362 0341 	bfi	r3, r2, #1, #1
 800339e:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	7c3b      	ldrb	r3, [r7, #16]
 80033ac:	f362 03c3 	bfi	r3, r2, #3, #1
 80033b0:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	7c3b      	ldrb	r3, [r7, #16]
 80033be:	f362 1304 	bfi	r3, r2, #4, #1
 80033c2:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	7c3b      	ldrb	r3, [r7, #16]
 80033d0:	f362 1345 	bfi	r3, r2, #5, #1
 80033d4:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	7c3b      	ldrb	r3, [r7, #16]
 80033e2:	f362 1386 	bfi	r3, r2, #6, #1
 80033e6:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80033e8:	f107 0210 	add.w	r2, r7, #16
 80033ec:	2301      	movs	r3, #1
 80033ee:	210d      	movs	r1, #13
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff fd5b 	bl	8002eac <lsm6dsv16x_write_reg>
 80033f6:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <lsm6dsv16x_pin_int1_route_set+0xaa>
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	e05d      	b.n	80034be <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003402:	f107 020c 	add.w	r2, r7, #12
 8003406:	2301      	movs	r3, #1
 8003408:	215e      	movs	r1, #94	@ 0x5e
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff fd36 	bl	8002e7c <lsm6dsv16x_read_reg>
 8003410:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <lsm6dsv16x_pin_int1_route_set+0xc4>
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	e050      	b.n	80034be <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	785b      	ldrb	r3, [r3, #1]
 8003420:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003424:	b2da      	uxtb	r2, r3
 8003426:	7b3b      	ldrb	r3, [r7, #12]
 8003428:	f362 0300 	bfi	r3, r2, #0, #1
 800342c:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	785b      	ldrb	r3, [r3, #1]
 8003432:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003436:	b2da      	uxtb	r2, r3
 8003438:	7b3b      	ldrb	r3, [r7, #12]
 800343a:	f362 0341 	bfi	r3, r2, #1, #1
 800343e:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	785b      	ldrb	r3, [r3, #1]
 8003444:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003448:	b2da      	uxtb	r2, r3
 800344a:	7b3b      	ldrb	r3, [r7, #12]
 800344c:	f362 0382 	bfi	r3, r2, #2, #1
 8003450:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	785b      	ldrb	r3, [r3, #1]
 8003456:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800345a:	b2da      	uxtb	r2, r3
 800345c:	7b3b      	ldrb	r3, [r7, #12]
 800345e:	f362 1386 	bfi	r3, r2, #6, #1
 8003462:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	785b      	ldrb	r3, [r3, #1]
 8003468:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800346c:	b2da      	uxtb	r2, r3
 800346e:	7b3b      	ldrb	r3, [r7, #12]
 8003470:	f362 03c3 	bfi	r3, r2, #3, #1
 8003474:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	785b      	ldrb	r3, [r3, #1]
 800347a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800347e:	b2da      	uxtb	r2, r3
 8003480:	7b3b      	ldrb	r3, [r7, #12]
 8003482:	f362 1345 	bfi	r3, r2, #5, #1
 8003486:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	785b      	ldrb	r3, [r3, #1]
 800348c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003490:	b2da      	uxtb	r2, r3
 8003492:	7b3b      	ldrb	r3, [r7, #12]
 8003494:	f362 1304 	bfi	r3, r2, #4, #1
 8003498:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	789b      	ldrb	r3, [r3, #2]
 800349e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	7b3b      	ldrb	r3, [r7, #12]
 80034a6:	f362 13c7 	bfi	r3, r2, #7, #1
 80034aa:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80034ac:	f107 020c 	add.w	r2, r7, #12
 80034b0:	2301      	movs	r3, #1
 80034b2:	215e      	movs	r1, #94	@ 0x5e
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff fcf9 	bl	8002eac <lsm6dsv16x_write_reg>
 80034ba:	6178      	str	r0, [r7, #20]

  return ret;
 80034bc:	697b      	ldr	r3, [r7, #20]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 80034d2:	f107 0208 	add.w	r2, r7, #8
 80034d6:	2301      	movs	r3, #1
 80034d8:	2113      	movs	r1, #19
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff fcce 	bl	8002e7c <lsm6dsv16x_read_reg>
 80034e0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10f      	bne.n	8003508 <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	7a3b      	ldrb	r3, [r7, #8]
 80034f2:	f362 0300 	bfi	r3, r2, #0, #1
 80034f6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 80034f8:	f107 0208 	add.w	r2, r7, #8
 80034fc:	2301      	movs	r3, #1
 80034fe:	2113      	movs	r1, #19
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff fcd3 	bl	8002eac <lsm6dsv16x_write_reg>
 8003506:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003508:	68fb      	ldr	r3, [r7, #12]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 800351e:	f107 0208 	add.w	r2, r7, #8
 8003522:	2301      	movs	r3, #1
 8003524:	2107      	movs	r1, #7
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff fca8 	bl	8002e7c <lsm6dsv16x_read_reg>
 800352c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d109      	bne.n	8003548 <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8003538:	f107 0208 	add.w	r2, r7, #8
 800353c:	2301      	movs	r3, #1
 800353e:	2107      	movs	r1, #7
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff fcb3 	bl	8002eac <lsm6dsv16x_write_reg>
 8003546:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003548:	68fb      	ldr	r3, [r7, #12]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 800355e:	f107 0208 	add.w	r2, r7, #8
 8003562:	2301      	movs	r3, #1
 8003564:	2109      	movs	r1, #9
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff fc88 	bl	8002e7c <lsm6dsv16x_read_reg>
 800356c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10f      	bne.n	8003594 <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	b2da      	uxtb	r2, r3
 800357c:	7a3b      	ldrb	r3, [r7, #8]
 800357e:	f362 0303 	bfi	r3, r2, #0, #4
 8003582:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003584:	f107 0208 	add.w	r2, r7, #8
 8003588:	2301      	movs	r3, #1
 800358a:	2109      	movs	r1, #9
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff fc8d 	bl	8002eac <lsm6dsv16x_write_reg>
 8003592:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003594:	68fb      	ldr	r3, [r7, #12]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	460b      	mov	r3, r1
 80035a8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 80035aa:	f107 0208 	add.w	r2, r7, #8
 80035ae:	2301      	movs	r3, #1
 80035b0:	2109      	movs	r1, #9
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff fc62 	bl	8002e7c <lsm6dsv16x_read_reg>
 80035b8:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10f      	bne.n	80035e0 <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	7a3b      	ldrb	r3, [r7, #8]
 80035ca:	f362 1307 	bfi	r3, r2, #4, #4
 80035ce:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 80035d0:	f107 0208 	add.w	r2, r7, #8
 80035d4:	2301      	movs	r3, #1
 80035d6:	2109      	movs	r1, #9
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff fc67 	bl	8002eac <lsm6dsv16x_write_reg>
 80035de:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80035e0:	68fb      	ldr	r3, [r7, #12]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	460b      	mov	r3, r1
 80035f4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 80035f6:	f107 0208 	add.w	r2, r7, #8
 80035fa:	2301      	movs	r3, #1
 80035fc:	210a      	movs	r1, #10
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff fc3c 	bl	8002e7c <lsm6dsv16x_read_reg>
 8003604:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10f      	bne.n	800362c <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	b2da      	uxtb	r2, r3
 8003614:	7a3b      	ldrb	r3, [r7, #8]
 8003616:	f362 0302 	bfi	r3, r2, #0, #3
 800361a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 800361c:	f107 0208 	add.w	r2, r7, #8
 8003620:	2301      	movs	r3, #1
 8003622:	210a      	movs	r1, #10
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff fc41 	bl	8002eac <lsm6dsv16x_write_reg>
 800362a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800362c:	68fb      	ldr	r3, [r7, #12]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8003642:	f107 0208 	add.w	r2, r7, #8
 8003646:	2301      	movs	r3, #1
 8003648:	2103      	movs	r1, #3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff fc16 	bl	8002e7c <lsm6dsv16x_read_reg>
 8003650:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10f      	bne.n	8003678 <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	b2da      	uxtb	r2, r3
 8003660:	7a3b      	ldrb	r3, [r7, #8]
 8003662:	f362 0300 	bfi	r3, r2, #0, #1
 8003666:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8003668:	f107 0208 	add.w	r2, r7, #8
 800366c:	2301      	movs	r3, #1
 800366e:	2103      	movs	r1, #3
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff fc1b 	bl	8002eac <lsm6dsv16x_write_reg>
 8003676:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003678:	68fb      	ldr	r3, [r7, #12]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	461a      	mov	r2, r3
 800368e:	460b      	mov	r3, r1
 8003690:	72fb      	strb	r3, [r7, #11]
 8003692:	4613      	mov	r3, r2
 8003694:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8003696:	2200      	movs	r2, #0
 8003698:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800369c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036a0:	f009 ffea 	bl	800d678 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80036a4:	f107 010b 	add.w	r1, r7, #11
 80036a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036ac:	2201      	movs	r2, #1
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f00d fa6b 	bl	8010b8a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 80036b4:	893a      	ldrh	r2, [r7, #8]
 80036b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f00d fa64 	bl	8010b8a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 80036c2:	2201      	movs	r2, #1
 80036c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036cc:	f009 ffd4 	bl	800d678 <HAL_GPIO_WritePin>
	return 0;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	461a      	mov	r2, r3
 80036e6:	460b      	mov	r3, r1
 80036e8:	72fb      	strb	r3, [r7, #11]
 80036ea:	4613      	mov	r3, r2
 80036ec:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 80036ee:	7afb      	ldrb	r3, [r7, #11]
 80036f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 80036f8:	2200      	movs	r2, #0
 80036fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003702:	f009 ffb9 	bl	800d678 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8003706:	f107 010b 	add.w	r1, r7, #11
 800370a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800370e:	2201      	movs	r2, #1
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f00d fa3a 	bl	8010b8a <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 8003716:	893a      	ldrh	r2, [r7, #8]
 8003718:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f00d fba9 	bl	8010e76 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8003724:	2201      	movs	r2, #1
 8003726:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800372a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800372e:	f009 ffa3 	bl	800d678 <HAL_GPIO_WritePin>
	return 0;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003740:	f3bf 8f4f 	dsb	sy
}
 8003744:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003746:	4b06      	ldr	r3, [pc, #24]	@ (8003760 <__NVIC_SystemReset+0x24>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800374e:	4904      	ldr	r1, [pc, #16]	@ (8003760 <__NVIC_SystemReset+0x24>)
 8003750:	4b04      	ldr	r3, [pc, #16]	@ (8003764 <__NVIC_SystemReset+0x28>)
 8003752:	4313      	orrs	r3, r2
 8003754:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003756:	f3bf 8f4f 	dsb	sy
}
 800375a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800375c:	bf00      	nop
 800375e:	e7fd      	b.n	800375c <__NVIC_SystemReset+0x20>
 8003760:	e000ed00 	.word	0xe000ed00
 8003764:	05fa0004 	.word	0x05fa0004

08003768 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376a:	b091      	sub	sp, #68	@ 0x44
 800376c:	af0c      	add	r7, sp, #48	@ 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800376e:	f006 fd6c 	bl	800a24a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003772:	f000 fa91 	bl	8003c98 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003776:	f000 ff65 	bl	8004644 <MX_GPIO_Init>
	MX_DMA_Init();
 800377a:	f000 ff35 	bl	80045e8 <MX_DMA_Init>
	MX_QUADSPI_Init();
 800377e:	f000 fbb7 	bl	8003ef0 <MX_QUADSPI_Init>
	MX_SPI2_Init();
 8003782:	f000 fc6d 	bl	8004060 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 8003786:	f000 feff 	bl	8004588 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 800378a:	f000 fad7 	bl	8003d3c <MX_ADC1_Init>
	MX_I2C3_Init();
 800378e:	f000 fb6f 	bl	8003e70 <MX_I2C3_Init>
	MX_TIM2_Init();
 8003792:	f000 fd89 	bl	80042a8 <MX_TIM2_Init>
	MX_UART4_Init();
 8003796:	f000 fec7 	bl	8004528 <MX_UART4_Init>
	MX_TIM1_Init();
 800379a:	f000 fcdd 	bl	8004158 <MX_TIM1_Init>
	MX_CRC_Init();
 800379e:	f000 fb45 	bl	8003e2c <MX_CRC_Init>
	MX_TIM4_Init();
 80037a2:	f000 fe4d 	bl	8004440 <MX_TIM4_Init>
	MX_RTC_Init();
 80037a6:	f000 fbc9 	bl	8003f3c <MX_RTC_Init>
	MX_SPI3_Init();
 80037aa:	f000 fc97 	bl	80040dc <MX_SPI3_Init>
	MX_TIM3_Init();
 80037ae:	f000 fdcf 	bl	8004350 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	System_Init();
 80037b2:	f7ff f855 	bl	8002860 <System_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state)
 80037b6:	4b97      	ldr	r3, [pc, #604]	@ (8003a14 <main+0x2ac>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	f200 8242 	bhi.w	8003c44 <main+0x4dc>
 80037c0:	a201      	add	r2, pc, #4	@ (adr r2, 80037c8 <main+0x60>)
 80037c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080038c3 	.word	0x080038c3
 80037d0:	080038cf 	.word	0x080038cf
 80037d4:	08003b73 	.word	0x08003b73
		{
		case IDLE:
			if(flags.MQTT_Message_Rx)
 80037d8:	4b8f      	ldr	r3, [pc, #572]	@ (8003a18 <main+0x2b0>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d054      	beq.n	8003890 <main+0x128>
			{
				SIM_Parse_Command();
 80037e6:	f7fd fde9 	bl	80013bc <SIM_Parse_Command>
				flags.MQTT_Message_Rx = 0;
 80037ea:	4a8b      	ldr	r2, [pc, #556]	@ (8003a18 <main+0x2b0>)
 80037ec:	7813      	ldrb	r3, [r2, #0]
 80037ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037f2:	7013      	strb	r3, [r2, #0]
				if(flags.CMD.Start_Meas)
 80037f4:	4b88      	ldr	r3, [pc, #544]	@ (8003a18 <main+0x2b0>)
 80037f6:	789b      	ldrb	r3, [r3, #2]
 80037f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d008      	beq.n	8003814 <main+0xac>
				{
					state = MEASURE_INIT_STATE;
 8003802:	4b84      	ldr	r3, [pc, #528]	@ (8003a14 <main+0x2ac>)
 8003804:	2201      	movs	r2, #1
 8003806:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_Meas = 0;
 8003808:	4a83      	ldr	r2, [pc, #524]	@ (8003a18 <main+0x2b0>)
 800380a:	7893      	ldrb	r3, [r2, #2]
 800380c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003810:	7093      	strb	r3, [r2, #2]
			else if(HAL_GetTick() - sys.SIM_Connection_Timeout > SIM_CONNECTION_TIMEOUT_MS)                  // Controllo connessione MQTT e TCP ogni 60 secondi
					{
				SIM_Check_Connection();
				sys.SIM_Connection_Timeout = HAL_GetTick();
					}
			break;
 8003812:	e219      	b.n	8003c48 <main+0x4e0>
				else if(flags.CMD.Set_Config)
 8003814:	4b80      	ldr	r3, [pc, #512]	@ (8003a18 <main+0x2b0>)
 8003816:	789b      	ldrb	r3, [r3, #2]
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <main+0xca>
					Apply_Config();
 8003822:	f002 fa01 	bl	8005c28 <Apply_Config>
					flags.CMD.Set_Config = 0;
 8003826:	4a7c      	ldr	r2, [pc, #496]	@ (8003a18 <main+0x2b0>)
 8003828:	7893      	ldrb	r3, [r2, #2]
 800382a:	f023 0310 	bic.w	r3, r3, #16
 800382e:	7093      	strb	r3, [r2, #2]
			break;
 8003830:	e20a      	b.n	8003c48 <main+0x4e0>
				else if(flags.CMD.Get_Config)
 8003832:	4b79      	ldr	r3, [pc, #484]	@ (8003a18 <main+0x2b0>)
 8003834:	789b      	ldrb	r3, [r3, #2]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <main+0xe8>
					Get_Config();
 8003840:	f002 fb78 	bl	8005f34 <Get_Config>
					flags.CMD.Get_Config = 0;
 8003844:	4a74      	ldr	r2, [pc, #464]	@ (8003a18 <main+0x2b0>)
 8003846:	7893      	ldrb	r3, [r2, #2]
 8003848:	f023 0320 	bic.w	r3, r3, #32
 800384c:	7093      	strb	r3, [r2, #2]
			break;
 800384e:	e1fb      	b.n	8003c48 <main+0x4e0>
				else if(flags.CMD.Start_OTA)
 8003850:	4b71      	ldr	r3, [pc, #452]	@ (8003a18 <main+0x2b0>)
 8003852:	789b      	ldrb	r3, [r3, #2]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <main+0x108>
					state = OTA_STATE;
 800385e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a14 <main+0x2ac>)
 8003860:	2203      	movs	r2, #3
 8003862:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_OTA = 0;
 8003864:	4a6c      	ldr	r2, [pc, #432]	@ (8003a18 <main+0x2b0>)
 8003866:	7893      	ldrb	r3, [r2, #2]
 8003868:	f023 0304 	bic.w	r3, r3, #4
 800386c:	7093      	strb	r3, [r2, #2]
			break;
 800386e:	e1eb      	b.n	8003c48 <main+0x4e0>
				else if(flags.CMD.Ping)
 8003870:	4b69      	ldr	r3, [pc, #420]	@ (8003a18 <main+0x2b0>)
 8003872:	789b      	ldrb	r3, [r3, #2]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 81e4 	beq.w	8003c48 <main+0x4e0>
					SIM_Send_Infos();
 8003880:	f7fe f862 	bl	8001948 <SIM_Send_Infos>
					flags.CMD.Ping = 0;
 8003884:	4a64      	ldr	r2, [pc, #400]	@ (8003a18 <main+0x2b0>)
 8003886:	7893      	ldrb	r3, [r2, #2]
 8003888:	f023 0308 	bic.w	r3, r3, #8
 800388c:	7093      	strb	r3, [r2, #2]
			break;
 800388e:	e1db      	b.n	8003c48 <main+0x4e0>
			else if(HAL_GetTick() - sys.SIM_Connection_Timeout > SIM_CONNECTION_TIMEOUT_MS)                  // Controllo connessione MQTT e TCP ogni 60 secondi
 8003890:	f006 fd44 	bl	800a31c <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	4b61      	ldr	r3, [pc, #388]	@ (8003a1c <main+0x2b4>)
 8003898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800389c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80038a6:	4293      	cmp	r3, r2
 80038a8:	f240 81ce 	bls.w	8003c48 <main+0x4e0>
				SIM_Check_Connection();
 80038ac:	f7fe f960 	bl	8001b70 <SIM_Check_Connection>
				sys.SIM_Connection_Timeout = HAL_GetTick();
 80038b0:	f006 fd34 	bl	800a31c <HAL_GetTick>
 80038b4:	4603      	mov	r3, r0
 80038b6:	4a59      	ldr	r2, [pc, #356]	@ (8003a1c <main+0x2b4>)
 80038b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80038bc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
			break;
 80038c0:	e1c2      	b.n	8003c48 <main+0x4e0>

		case MEASURE_INIT_STATE:
			Start_Measure();
 80038c2:	f001 fcb9 	bl	8005238 <Start_Measure>
			state = MEASURING_STATE;
 80038c6:	4b53      	ldr	r3, [pc, #332]	@ (8003a14 <main+0x2ac>)
 80038c8:	2202      	movs	r2, #2
 80038ca:	701a      	strb	r2, [r3, #0]
			break;
 80038cc:	e1bf      	b.n	8003c4e <main+0x4e6>

		case MEASURING_STATE:
			if(flags.ADC_Complete && flags.ACC_Complete)
 80038ce:	4b52      	ldr	r3, [pc, #328]	@ (8003a18 <main+0x2b0>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 81b7 	beq.w	8003c4c <main+0x4e4>
 80038de:	4b4e      	ldr	r3, [pc, #312]	@ (8003a18 <main+0x2b0>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 81af 	beq.w	8003c4c <main+0x4e4>
			{
				Save_Data();
 80038ee:	f001 f9ff 	bl	8004cf0 <Save_Data>
				if(flags.BC_Interrupt)
 80038f2:	4b49      	ldr	r3, [pc, #292]	@ (8003a18 <main+0x2b0>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d010      	beq.n	8003922 <main+0x1ba>
				{
					BC_Read_Flags(&sys.BC_Flags);
 8003900:	4847      	ldr	r0, [pc, #284]	@ (8003a20 <main+0x2b8>)
 8003902:	f7fe fa73 	bl	8001dec <BC_Read_Flags>
					BC_Manage_Interrupts(sys.BC_Flags);
 8003906:	4b45      	ldr	r3, [pc, #276]	@ (8003a1c <main+0x2b4>)
 8003908:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800390c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003910:	4610      	mov	r0, r2
 8003912:	4619      	mov	r1, r3
 8003914:	f7fe fb18 	bl	8001f48 <BC_Manage_Interrupts>
					flags.BC_Interrupt = 0;
 8003918:	4a3f      	ldr	r2, [pc, #252]	@ (8003a18 <main+0x2b0>)
 800391a:	7813      	ldrb	r3, [r2, #0]
 800391c:	f023 0320 	bic.w	r3, r3, #32
 8003920:	7013      	strb	r3, [r2, #0]
				}
				if(flags.MQTT_Message_Rx)
 8003922:	4b3d      	ldr	r3, [pc, #244]	@ (8003a18 <main+0x2b0>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <main+0x1e0>
				{
					SIM_Parse_Command();
 8003930:	f7fd fd44 	bl	80013bc <SIM_Parse_Command>
					flags.SIM_isConnected = 1;
 8003934:	4a38      	ldr	r2, [pc, #224]	@ (8003a18 <main+0x2b0>)
 8003936:	7853      	ldrb	r3, [r2, #1]
 8003938:	f043 0308 	orr.w	r3, r3, #8
 800393c:	7053      	strb	r3, [r2, #1]
					flags.MQTT_Message_Rx = 0;
 800393e:	4a36      	ldr	r2, [pc, #216]	@ (8003a18 <main+0x2b0>)
 8003940:	7813      	ldrb	r3, [r2, #0]
 8003942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003946:	7013      	strb	r3, [r2, #0]
				}
				if(flags.CMD.Data_Request)
 8003948:	4b33      	ldr	r3, [pc, #204]	@ (8003a18 <main+0x2b0>)
 800394a:	789b      	ldrb	r3, [r3, #2]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d04c      	beq.n	80039f0 <main+0x288>
				{
					sprintf(MQTT_Logging, "%u:%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, Last_Pressure, Last_Volume, Last_Acceleration.x, Last_Acceleration.y, Last_Acceleration.z, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 8003956:	4b33      	ldr	r3, [pc, #204]	@ (8003a24 <main+0x2bc>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	469c      	mov	ip, r3
 800395c:	4b32      	ldr	r3, [pc, #200]	@ (8003a28 <main+0x2c0>)
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	469e      	mov	lr, r3
 8003962:	4b32      	ldr	r3, [pc, #200]	@ (8003a2c <main+0x2c4>)
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	4b31      	ldr	r3, [pc, #196]	@ (8003a30 <main+0x2c8>)
 800396a:	885b      	ldrh	r3, [r3, #2]
 800396c:	4619      	mov	r1, r3
 800396e:	4b30      	ldr	r3, [pc, #192]	@ (8003a30 <main+0x2c8>)
 8003970:	889b      	ldrh	r3, [r3, #4]
 8003972:	4618      	mov	r0, r3
 8003974:	4b2e      	ldr	r3, [pc, #184]	@ (8003a30 <main+0x2c8>)
 8003976:	88db      	ldrh	r3, [r3, #6]
 8003978:	461c      	mov	r4, r3
 800397a:	4b2e      	ldr	r3, [pc, #184]	@ (8003a34 <main+0x2cc>)
 800397c:	88db      	ldrh	r3, [r3, #6]
 800397e:	461d      	mov	r5, r3
 8003980:	4b2c      	ldr	r3, [pc, #176]	@ (8003a34 <main+0x2cc>)
 8003982:	891b      	ldrh	r3, [r3, #8]
 8003984:	461e      	mov	r6, r3
 8003986:	4b2b      	ldr	r3, [pc, #172]	@ (8003a34 <main+0x2cc>)
 8003988:	895b      	ldrh	r3, [r3, #10]
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	4b29      	ldr	r3, [pc, #164]	@ (8003a34 <main+0x2cc>)
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	4b28      	ldr	r3, [pc, #160]	@ (8003a34 <main+0x2cc>)
 8003994:	885b      	ldrh	r3, [r3, #2]
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	4b26      	ldr	r3, [pc, #152]	@ (8003a34 <main+0x2cc>)
 800399a:	889b      	ldrh	r3, [r3, #4]
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	4b26      	ldr	r3, [pc, #152]	@ (8003a38 <main+0x2d0>)
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	9308      	str	r3, [sp, #32]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	9307      	str	r3, [sp, #28]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	9306      	str	r3, [sp, #24]
 80039b4:	9605      	str	r6, [sp, #20]
 80039b6:	9504      	str	r5, [sp, #16]
 80039b8:	9403      	str	r4, [sp, #12]
 80039ba:	9002      	str	r0, [sp, #8]
 80039bc:	9101      	str	r1, [sp, #4]
 80039be:	9200      	str	r2, [sp, #0]
 80039c0:	4673      	mov	r3, lr
 80039c2:	4662      	mov	r2, ip
 80039c4:	491d      	ldr	r1, [pc, #116]	@ (8003a3c <main+0x2d4>)
 80039c6:	481e      	ldr	r0, [pc, #120]	@ (8003a40 <main+0x2d8>)
 80039c8:	f011 fcc8 	bl	801535c <siprintf>
					SIM_publish_MQTT_Message_DMA(NULL, MQTT_Logging);
 80039cc:	491c      	ldr	r1, [pc, #112]	@ (8003a40 <main+0x2d8>)
 80039ce:	2000      	movs	r0, #0
 80039d0:	f7fd fedc 	bl	800178c <SIM_publish_MQTT_Message_DMA>
					sys.SIM_Prompt_Status = HAL_GetTick();
 80039d4:	f006 fca2 	bl	800a31c <HAL_GetTick>
 80039d8:	4603      	mov	r3, r0
 80039da:	4a10      	ldr	r2, [pc, #64]	@ (8003a1c <main+0x2b4>)
 80039dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80039e0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
					flags.CMD.Data_Request = 0;
 80039e4:	4a0c      	ldr	r2, [pc, #48]	@ (8003a18 <main+0x2b0>)
 80039e6:	7893      	ldrb	r3, [r2, #2]
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	7093      	strb	r3, [r2, #2]
 80039ee:	e06c      	b.n	8003aca <main+0x362>
				}
				else if(flags.CMD.Idle)
 80039f0:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <main+0x2b0>)
 80039f2:	789b      	ldrb	r3, [r3, #2]
 80039f4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d022      	beq.n	8003a44 <main+0x2dc>
				{
					state = IDLE;
 80039fe:	4b05      	ldr	r3, [pc, #20]	@ (8003a14 <main+0x2ac>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
					Stop_Measure();
 8003a04:	f001 fcd6 	bl	80053b4 <Stop_Measure>
					flags.CMD.Idle = 0;
 8003a08:	4a03      	ldr	r2, [pc, #12]	@ (8003a18 <main+0x2b0>)
 8003a0a:	7893      	ldrb	r3, [r2, #2]
 8003a0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a10:	7093      	strb	r3, [r2, #2]
 8003a12:	e05a      	b.n	8003aca <main+0x362>
 8003a14:	2000073c 	.word	0x2000073c
 8003a18:	20001c68 	.word	0x20001c68
 8003a1c:	20000740 	.word	0x20000740
 8003a20:	20001778 	.word	0x20001778
 8003a24:	20001c6c 	.word	0x20001c6c
 8003a28:	2000470c 	.word	0x2000470c
 8003a2c:	2000470e 	.word	0x2000470e
 8003a30:	20004710 	.word	0x20004710
 8003a34:	20003e3c 	.word	0x20003e3c
 8003a38:	20004718 	.word	0x20004718
 8003a3c:	08016920 	.word	0x08016920
 8003a40:	2000471c 	.word	0x2000471c
				}
				else if(flags.CMD.Measure_Request)
 8003a44:	4b82      	ldr	r3, [pc, #520]	@ (8003c50 <main+0x4e8>)
 8003a46:	789b      	ldrb	r3, [r3, #2]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d03b      	beq.n	8003aca <main+0x362>
				{
					if(!flags.TCP_isSending)
 8003a52:	4b7f      	ldr	r3, [pc, #508]	@ (8003c50 <main+0x4e8>)
 8003a54:	785b      	ldrb	r3, [r3, #1]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d134      	bne.n	8003aca <main+0x362>
					{
						Send_Measure_Addr = Send_Measure_Chunk(sys.RAM_Buffer_Base_tosend, sys.Inactive_RAM_Len, Send_Measure_Addr);
 8003a60:	4b7c      	ldr	r3, [pc, #496]	@ (8003c54 <main+0x4ec>)
 8003a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a66:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003a6a:	4a7a      	ldr	r2, [pc, #488]	@ (8003c54 <main+0x4ec>)
 8003a6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a70:	f8d2 10d0 	ldr.w	r1, [r2, #208]	@ 0xd0
 8003a74:	4a78      	ldr	r2, [pc, #480]	@ (8003c58 <main+0x4f0>)
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 fd7d 	bl	8005578 <Send_Measure_Chunk>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4a75      	ldr	r2, [pc, #468]	@ (8003c58 <main+0x4f0>)
 8003a82:	6013      	str	r3, [r2, #0]
						if(flags.TCP_ReadytoSend)
 8003a84:	4b72      	ldr	r3, [pc, #456]	@ (8003c50 <main+0x4e8>)
 8003a86:	785b      	ldrb	r3, [r3, #1]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01b      	beq.n	8003aca <main+0x362>
						{
							SIM_Send_Command_DMA(MQTT_Logging);
 8003a92:	4872      	ldr	r0, [pc, #456]	@ (8003c5c <main+0x4f4>)
 8003a94:	f7fd fbf4 	bl	8001280 <SIM_Send_Command_DMA>
							flags.TCP_isSending = 1;
 8003a98:	4a6d      	ldr	r2, [pc, #436]	@ (8003c50 <main+0x4e8>)
 8003a9a:	7853      	ldrb	r3, [r2, #1]
 8003a9c:	f043 0304 	orr.w	r3, r3, #4
 8003aa0:	7053      	strb	r3, [r2, #1]
							flags.TCP_ReadytoSend = 0;
 8003aa2:	4a6b      	ldr	r2, [pc, #428]	@ (8003c50 <main+0x4e8>)
 8003aa4:	7853      	ldrb	r3, [r2, #1]
 8003aa6:	f023 0302 	bic.w	r3, r3, #2
 8003aaa:	7053      	strb	r3, [r2, #1]
							if (Send_Measure_Addr == 0)
 8003aac:	4b6a      	ldr	r3, [pc, #424]	@ (8003c58 <main+0x4f0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <main+0x362>
							{
								memset(tcp_chunk, 0, 1460);
 8003ab4:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4869      	ldr	r0, [pc, #420]	@ (8003c60 <main+0x4f8>)
 8003abc:	f011 fcae 	bl	801541c <memset>
								flags.CMD.Measure_Request = 0;
 8003ac0:	4a63      	ldr	r2, [pc, #396]	@ (8003c50 <main+0x4e8>)
 8003ac2:	7893      	ldrb	r3, [r2, #2]
 8003ac4:	f023 0302 	bic.w	r3, r3, #2
 8003ac8:	7093      	strb	r3, [r2, #2]
							}
						}
					}
				}
				if(flags.MQTT_ReadytoSend)
 8003aca:	4b61      	ldr	r3, [pc, #388]	@ (8003c50 <main+0x4e8>)
 8003acc:	785b      	ldrb	r3, [r3, #1]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <main+0x380>
				{
					SIM_Send_Command_DMA(MQTT_Logging);
 8003ad8:	4860      	ldr	r0, [pc, #384]	@ (8003c5c <main+0x4f4>)
 8003ada:	f7fd fbd1 	bl	8001280 <SIM_Send_Command_DMA>
					flags.MQTT_ReadytoSend = 0;
 8003ade:	4a5c      	ldr	r2, [pc, #368]	@ (8003c50 <main+0x4e8>)
 8003ae0:	7853      	ldrb	r3, [r2, #1]
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	7053      	strb	r3, [r2, #1]
				}
				if(sys.SIM_Prompt_Status > 0 && (HAL_GetTick() - sys.SIM_Prompt_Status) > SIM_PROMPT_TIMEOUT_MS)
 8003ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8003c54 <main+0x4ec>)
 8003aea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003aee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <main+0x3bc>
 8003af6:	f006 fc11 	bl	800a31c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	4b55      	ldr	r3, [pc, #340]	@ (8003c54 <main+0x4ec>)
 8003afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b02:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d909      	bls.n	8003b24 <main+0x3bc>
				{
					SIM_Send_Command_DMA("AT+SMCONN\r");
 8003b10:	4854      	ldr	r0, [pc, #336]	@ (8003c64 <main+0x4fc>)
 8003b12:	f7fd fbb5 	bl	8001280 <SIM_Send_Command_DMA>
					sys.SIM_Prompt_Status = 0;
 8003b16:	4b4f      	ldr	r3, [pc, #316]	@ (8003c54 <main+0x4ec>)
 8003b18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
				}
				if(HAL_GetTick() - sys.SIM_Connection_Timeout > SIM_CONNECTION_TIMEOUT_MS)
 8003b24:	f006 fbfa 	bl	800a31c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c54 <main+0x4ec>)
 8003b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	f240 8086 	bls.w	8003c4c <main+0x4e4>
				{
					sys.SIM_Connection_Timeout = HAL_GetTick();
 8003b40:	f006 fbec 	bl	800a31c <HAL_GetTick>
 8003b44:	4603      	mov	r3, r0
 8003b46:	4a43      	ldr	r2, [pc, #268]	@ (8003c54 <main+0x4ec>)
 8003b48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b4c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
					if(flags.SIM_isConnected)
 8003b50:	4b3f      	ldr	r3, [pc, #252]	@ (8003c50 <main+0x4e8>)
 8003b52:	785b      	ldrb	r3, [r3, #1]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <main+0x402>
					{
						flags.SIM_isConnected = 0;
 8003b5e:	4a3c      	ldr	r2, [pc, #240]	@ (8003c50 <main+0x4e8>)
 8003b60:	7853      	ldrb	r3, [r2, #1]
 8003b62:	f023 0308 	bic.w	r3, r3, #8
 8003b66:	7053      	strb	r3, [r2, #1]
					{
						state = IDLE;
					}
				}
			}
				break;
 8003b68:	e070      	b.n	8003c4c <main+0x4e4>
						state = IDLE;
 8003b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c68 <main+0x500>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
				break;
 8003b70:	e06c      	b.n	8003c4c <main+0x4e4>

		case OTA_STATE:
			if(OTA_Init() == HAL_OK)
 8003b72:	f000 fe63 	bl	800483c <OTA_Init>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d155      	bne.n	8003c28 <main+0x4c0>
			{
				HAL_UART_DMAStop(SIM_UART);
 8003b7c:	483b      	ldr	r0, [pc, #236]	@ (8003c6c <main+0x504>)
 8003b7e:	f010 fa73 	bl	8014068 <HAL_UART_DMAStop>
				HAL_Delay(100);
 8003b82:	2064      	movs	r0, #100	@ 0x64
 8003b84:	f006 fbd6 	bl	800a334 <HAL_Delay>
				SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_READY");
 8003b88:	4939      	ldr	r1, [pc, #228]	@ (8003c70 <main+0x508>)
 8003b8a:	483a      	ldr	r0, [pc, #232]	@ (8003c74 <main+0x50c>)
 8003b8c:	f7fd fe48 	bl	8001820 <SIM_publish_MQTT_Message>
				if(OTA_Receive() == HAL_OK)
 8003b90:	f000 fe80 	bl	8004894 <OTA_Receive>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d138      	bne.n	8003c0c <main+0x4a4>
				{
					SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_RECEIVED");
 8003b9a:	4937      	ldr	r1, [pc, #220]	@ (8003c78 <main+0x510>)
 8003b9c:	4835      	ldr	r0, [pc, #212]	@ (8003c74 <main+0x50c>)
 8003b9e:	f7fd fe3f 	bl	8001820 <SIM_publish_MQTT_Message>
					if(OTA_CRC_Check() == HAL_OK)
 8003ba2:	f000 fefb 	bl	800499c <OTA_CRC_Check>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d109      	bne.n	8003bc0 <main+0x458>
					{
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_CRC_OK");
 8003bac:	4933      	ldr	r1, [pc, #204]	@ (8003c7c <main+0x514>)
 8003bae:	4831      	ldr	r0, [pc, #196]	@ (8003c74 <main+0x50c>)
 8003bb0:	f7fd fe36 	bl	8001820 <SIM_publish_MQTT_Message>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
						state = IDLE;
						break;
					}

					if(OTA_Apply() == HAL_OK)
 8003bb4:	f000 ff9a 	bl	8004aec <OTA_Apply>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d118      	bne.n	8003bf0 <main+0x488>
 8003bbe:	e00d      	b.n	8003bdc <main+0x474>
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_CRC_ERROR");
 8003bc0:	492f      	ldr	r1, [pc, #188]	@ (8003c80 <main+0x518>)
 8003bc2:	482c      	ldr	r0, [pc, #176]	@ (8003c74 <main+0x50c>)
 8003bc4:	f7fd fe2c 	bl	8001820 <SIM_publish_MQTT_Message>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8003bc8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003bcc:	492d      	ldr	r1, [pc, #180]	@ (8003c84 <main+0x51c>)
 8003bce:	4827      	ldr	r0, [pc, #156]	@ (8003c6c <main+0x504>)
 8003bd0:	f011 fae6 	bl	80151a0 <HAL_UARTEx_ReceiveToIdle_DMA>
						state = IDLE;
 8003bd4:	4b24      	ldr	r3, [pc, #144]	@ (8003c68 <main+0x500>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	701a      	strb	r2, [r3, #0]
						break;
 8003bda:	e038      	b.n	8003c4e <main+0x4e6>
					{
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_SUCCESS");
 8003bdc:	492a      	ldr	r1, [pc, #168]	@ (8003c88 <main+0x520>)
 8003bde:	4825      	ldr	r0, [pc, #148]	@ (8003c74 <main+0x50c>)
 8003be0:	f7fd fe1e 	bl	8001820 <SIM_publish_MQTT_Message>
						HAL_Delay(500);
 8003be4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003be8:	f006 fba4 	bl	800a334 <HAL_Delay>
						NVIC_SystemReset();
 8003bec:	f7ff fda6 	bl	800373c <__NVIC_SystemReset>
					}
					else
					{
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_APPLY_ERROR");
 8003bf0:	4926      	ldr	r1, [pc, #152]	@ (8003c8c <main+0x524>)
 8003bf2:	4820      	ldr	r0, [pc, #128]	@ (8003c74 <main+0x50c>)
 8003bf4:	f7fd fe14 	bl	8001820 <SIM_publish_MQTT_Message>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8003bf8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003bfc:	4921      	ldr	r1, [pc, #132]	@ (8003c84 <main+0x51c>)
 8003bfe:	481b      	ldr	r0, [pc, #108]	@ (8003c6c <main+0x504>)
 8003c00:	f011 face 	bl	80151a0 <HAL_UARTEx_ReceiveToIdle_DMA>
						state = IDLE;
 8003c04:	4b18      	ldr	r3, [pc, #96]	@ (8003c68 <main+0x500>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
			{
				SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_INIT_ERROR");
				HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
				state = IDLE;
			}
			break;
 8003c0a:	e020      	b.n	8003c4e <main+0x4e6>
					SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_RECEIVE_ERROR");
 8003c0c:	4920      	ldr	r1, [pc, #128]	@ (8003c90 <main+0x528>)
 8003c0e:	4819      	ldr	r0, [pc, #100]	@ (8003c74 <main+0x50c>)
 8003c10:	f7fd fe06 	bl	8001820 <SIM_publish_MQTT_Message>
					HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8003c14:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003c18:	491a      	ldr	r1, [pc, #104]	@ (8003c84 <main+0x51c>)
 8003c1a:	4814      	ldr	r0, [pc, #80]	@ (8003c6c <main+0x504>)
 8003c1c:	f011 fac0 	bl	80151a0 <HAL_UARTEx_ReceiveToIdle_DMA>
					state = IDLE;
 8003c20:	4b11      	ldr	r3, [pc, #68]	@ (8003c68 <main+0x500>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
			break;
 8003c26:	e012      	b.n	8003c4e <main+0x4e6>
				SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_INIT_ERROR");
 8003c28:	491a      	ldr	r1, [pc, #104]	@ (8003c94 <main+0x52c>)
 8003c2a:	4812      	ldr	r0, [pc, #72]	@ (8003c74 <main+0x50c>)
 8003c2c:	f7fd fdf8 	bl	8001820 <SIM_publish_MQTT_Message>
				HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8003c30:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003c34:	4913      	ldr	r1, [pc, #76]	@ (8003c84 <main+0x51c>)
 8003c36:	480d      	ldr	r0, [pc, #52]	@ (8003c6c <main+0x504>)
 8003c38:	f011 fab2 	bl	80151a0 <HAL_UARTEx_ReceiveToIdle_DMA>
				state = IDLE;
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c68 <main+0x500>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	701a      	strb	r2, [r3, #0]
			break;
 8003c42:	e004      	b.n	8003c4e <main+0x4e6>

		default:
			break;
 8003c44:	bf00      	nop
 8003c46:	e5b6      	b.n	80037b6 <main+0x4e>
			break;
 8003c48:	bf00      	nop
 8003c4a:	e5b4      	b.n	80037b6 <main+0x4e>
				break;
 8003c4c:	bf00      	nop
		switch(state)
 8003c4e:	e5b2      	b.n	80037b6 <main+0x4e>
 8003c50:	20001c68 	.word	0x20001c68
 8003c54:	20000740 	.word	0x20000740
 8003c58:	20004ec0 	.word	0x20004ec0
 8003c5c:	2000471c 	.word	0x2000471c
 8003c60:	20004ec4 	.word	0x20004ec4
 8003c64:	08016948 	.word	0x08016948
 8003c68:	2000073c 	.word	0x2000073c
 8003c6c:	20000624 	.word	0x20000624
 8003c70:	08016954 	.word	0x08016954
 8003c74:	20001b3c 	.word	0x20001b3c
 8003c78:	08016960 	.word	0x08016960
 8003c7c:	08016970 	.word	0x08016970
 8003c80:	0801697c 	.word	0x0801697c
 8003c84:	200054ec 	.word	0x200054ec
 8003c88:	0801698c 	.word	0x0801698c
 8003c8c:	08016998 	.word	0x08016998
 8003c90:	080169a8 	.word	0x080169a8
 8003c94:	080169bc 	.word	0x080169bc

08003c98 <SystemClock_Config>:
	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void)
	{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b096      	sub	sp, #88	@ 0x58
 8003c9c:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c9e:	f107 0314 	add.w	r3, r7, #20
 8003ca2:	2244      	movs	r2, #68	@ 0x44
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f011 fbb8 	bl	801541c <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cac:	463b      	mov	r3, r7
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	609a      	str	r2, [r3, #8]
 8003cb6:	60da      	str	r2, [r3, #12]
 8003cb8:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003cba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003cbe:	f00a fae9 	bl	800e294 <HAL_PWREx_ControlVoltageScaling>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <SystemClock_Config+0x34>
		{
			Error_Handler();
 8003cc8:	f000 fdb2 	bl	8004830 <Error_Handler>
		}

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003ccc:	2309      	movs	r3, #9
 8003cce:	617b      	str	r3, [r7, #20]
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003cd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cd4:	61bb      	str	r3, [r7, #24]
		RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	643b      	str	r3, [r7, #64]	@ 0x40
		RCC_OscInitStruct.PLL.PLLM = 1;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	647b      	str	r3, [r7, #68]	@ 0x44
		RCC_OscInitStruct.PLL.PLLN = 20;
 8003ce6:	2314      	movs	r3, #20
 8003ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003cea:	2307      	movs	r3, #7
 8003cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
		RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	653b      	str	r3, [r7, #80]	@ 0x50
		RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	657b      	str	r3, [r7, #84]	@ 0x54
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cf6:	f107 0314 	add.w	r3, r7, #20
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f00a ff82 	bl	800ec04 <HAL_RCC_OscConfig>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <SystemClock_Config+0x72>
		{
			Error_Handler();
 8003d06:	f000 fd93 	bl	8004830 <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d0a:	230f      	movs	r3, #15
 8003d0c:	603b      	str	r3, [r7, #0]
				|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	607b      	str	r3, [r7, #4]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60bb      	str	r3, [r7, #8]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	613b      	str	r3, [r7, #16]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003d1e:	463b      	mov	r3, r7
 8003d20:	2104      	movs	r1, #4
 8003d22:	4618      	mov	r0, r3
 8003d24:	f00b fb4a 	bl	800f3bc <HAL_RCC_ClockConfig>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <SystemClock_Config+0x9a>
		{
			Error_Handler();
 8003d2e:	f000 fd7f 	bl	8004830 <Error_Handler>
		}
	}
 8003d32:	bf00      	nop
 8003d34:	3758      	adds	r7, #88	@ 0x58
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <MX_ADC1_Init>:
	 * @brief ADC1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_ADC1_Init(void)
	{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08a      	sub	sp, #40	@ 0x28
 8003d40:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN ADC1_Init 0 */

		/* USER CODE END ADC1_Init 0 */

		ADC_MultiModeTypeDef multimode = {0};
 8003d42:	f107 031c 	add.w	r3, r7, #28
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	609a      	str	r2, [r3, #8]
		ADC_ChannelConfTypeDef sConfig = {0};
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	611a      	str	r2, [r3, #16]
 8003d5c:	615a      	str	r2, [r3, #20]

		/* USER CODE END ADC1_Init 1 */

		/** Common config
		 */
		hadc1.Instance = ADC1;
 8003d5e:	4b30      	ldr	r3, [pc, #192]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003d60:	4a30      	ldr	r2, [pc, #192]	@ (8003e24 <MX_ADC1_Init+0xe8>)
 8003d62:	601a      	str	r2, [r3, #0]
		hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003d64:	4b2e      	ldr	r3, [pc, #184]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	605a      	str	r2, [r3, #4]
		hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
		hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d70:	4b2b      	ldr	r3, [pc, #172]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
		hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003d76:	4b2a      	ldr	r3, [pc, #168]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
		hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003d7c:	4b28      	ldr	r3, [pc, #160]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003d7e:	2208      	movs	r2, #8
 8003d80:	615a      	str	r2, [r3, #20]
		hadc1.Init.LowPowerAutoWait = DISABLE;
 8003d82:	4b27      	ldr	r3, [pc, #156]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	761a      	strb	r2, [r3, #24]
		hadc1.Init.ContinuousConvMode = DISABLE;
 8003d88:	4b25      	ldr	r3, [pc, #148]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	765a      	strb	r2, [r3, #25]
		hadc1.Init.NbrOfConversion = 1;
 8003d8e:	4b24      	ldr	r3, [pc, #144]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	61da      	str	r2, [r3, #28]
		hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003d94:	4b22      	ldr	r3, [pc, #136]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2020 	strb.w	r2, [r3, #32]
		hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8003d9c:	4b20      	ldr	r3, [pc, #128]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003d9e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003da2:	629a      	str	r2, [r3, #40]	@ 0x28
		hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003da4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003da6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003daa:	62da      	str	r2, [r3, #44]	@ 0x2c
		hadc1.Init.DMAContinuousRequests = ENABLE;
 8003dac:	4b1c      	ldr	r3, [pc, #112]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003db4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	635a      	str	r2, [r3, #52]	@ 0x34
		hadc1.Init.OversamplingMode = DISABLE;
 8003dba:	4b19      	ldr	r3, [pc, #100]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003dc2:	4817      	ldr	r0, [pc, #92]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003dc4:	f006 fcfe 	bl	800a7c4 <HAL_ADC_Init>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_ADC1_Init+0x96>
		{
			Error_Handler();
 8003dce:	f000 fd2f 	bl	8004830 <Error_Handler>
		}

		/** Configure the ADC multi-mode
		 */
		multimode.Mode = ADC_MODE_INDEPENDENT;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
		if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003dd6:	f107 031c 	add.w	r3, r7, #28
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4810      	ldr	r0, [pc, #64]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003dde:	f007 fdb7 	bl	800b950 <HAL_ADCEx_MultiModeConfigChannel>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MX_ADC1_Init+0xb0>
		{
			Error_Handler();
 8003de8:	f000 fd22 	bl	8004830 <Error_Handler>
		}

		/** Configure Regular Channel
		 */
		sConfig.Channel = ADC_CHANNEL_9;
 8003dec:	4b0e      	ldr	r3, [pc, #56]	@ (8003e28 <MX_ADC1_Init+0xec>)
 8003dee:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8003df0:	2306      	movs	r3, #6
 8003df2:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003df8:	237f      	movs	r3, #127	@ 0x7f
 8003dfa:	613b      	str	r3, [r7, #16]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	617b      	str	r3, [r7, #20]
		sConfig.Offset = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61bb      	str	r3, [r7, #24]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e04:	1d3b      	adds	r3, r7, #4
 8003e06:	4619      	mov	r1, r3
 8003e08:	4805      	ldr	r0, [pc, #20]	@ (8003e20 <MX_ADC1_Init+0xe4>)
 8003e0a:	f006 ff53 	bl	800acb4 <HAL_ADC_ConfigChannel>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <MX_ADC1_Init+0xdc>
		{
			Error_Handler();
 8003e14:	f000 fd0c 	bl	8004830 <Error_Handler>
		}
		/* USER CODE BEGIN ADC1_Init 2 */

		/* USER CODE END ADC1_Init 2 */

	}
 8003e18:	bf00      	nop
 8003e1a:	3728      	adds	r7, #40	@ 0x28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20000218 	.word	0x20000218
 8003e24:	50040000 	.word	0x50040000
 8003e28:	25b00200 	.word	0x25b00200

08003e2c <MX_CRC_Init>:
	 * @brief CRC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_CRC_Init(void)
	{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
		/* USER CODE END CRC_Init 0 */

		/* USER CODE BEGIN CRC_Init 1 */

		/* USER CODE END CRC_Init 1 */
		hcrc.Instance = CRC;
 8003e30:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <MX_CRC_Init+0x3c>)
 8003e32:	4a0e      	ldr	r2, [pc, #56]	@ (8003e6c <MX_CRC_Init+0x40>)
 8003e34:	601a      	str	r2, [r3, #0]
		hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003e36:	4b0c      	ldr	r3, [pc, #48]	@ (8003e68 <MX_CRC_Init+0x3c>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	711a      	strb	r2, [r3, #4]
		hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e68 <MX_CRC_Init+0x3c>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	715a      	strb	r2, [r3, #5]
		hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003e42:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <MX_CRC_Init+0x3c>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	615a      	str	r2, [r3, #20]
		hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003e48:	4b07      	ldr	r3, [pc, #28]	@ (8003e68 <MX_CRC_Init+0x3c>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	619a      	str	r2, [r3, #24]
		hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003e4e:	4b06      	ldr	r3, [pc, #24]	@ (8003e68 <MX_CRC_Init+0x3c>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	621a      	str	r2, [r3, #32]
		if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003e54:	4804      	ldr	r0, [pc, #16]	@ (8003e68 <MX_CRC_Init+0x3c>)
 8003e56:	f007 ff57 	bl	800bd08 <HAL_CRC_Init>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <MX_CRC_Init+0x38>
		{
			Error_Handler();
 8003e60:	f000 fce6 	bl	8004830 <Error_Handler>
		}
		/* USER CODE BEGIN CRC_Init 2 */

		/* USER CODE END CRC_Init 2 */

	}
 8003e64:	bf00      	nop
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	200002c4 	.word	0x200002c4
 8003e6c:	40023000 	.word	0x40023000

08003e70 <MX_I2C3_Init>:
	 * @brief I2C3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_I2C3_Init(void)
	{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
		/* USER CODE END I2C3_Init 0 */

		/* USER CODE BEGIN I2C3_Init 1 */

		/* USER CODE END I2C3_Init 1 */
		hi2c3.Instance = I2C3;
 8003e74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee4 <MX_I2C3_Init+0x74>)
 8003e76:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee8 <MX_I2C3_Init+0x78>)
 8003e78:	601a      	str	r2, [r3, #0]
		hi2c3.Init.Timing = 0x10909CEC;
 8003e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee4 <MX_I2C3_Init+0x74>)
 8003e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003eec <MX_I2C3_Init+0x7c>)
 8003e7e:	605a      	str	r2, [r3, #4]
		hi2c3.Init.OwnAddress1 = 0;
 8003e80:	4b18      	ldr	r3, [pc, #96]	@ (8003ee4 <MX_I2C3_Init+0x74>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	609a      	str	r2, [r3, #8]
		hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e86:	4b17      	ldr	r3, [pc, #92]	@ (8003ee4 <MX_I2C3_Init+0x74>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	60da      	str	r2, [r3, #12]
		hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e8c:	4b15      	ldr	r3, [pc, #84]	@ (8003ee4 <MX_I2C3_Init+0x74>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	611a      	str	r2, [r3, #16]
		hi2c3.Init.OwnAddress2 = 0;
 8003e92:	4b14      	ldr	r3, [pc, #80]	@ (8003ee4 <MX_I2C3_Init+0x74>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	615a      	str	r2, [r3, #20]
		hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003e98:	4b12      	ldr	r3, [pc, #72]	@ (8003ee4 <MX_I2C3_Init+0x74>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	619a      	str	r2, [r3, #24]
		hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e9e:	4b11      	ldr	r3, [pc, #68]	@ (8003ee4 <MX_I2C3_Init+0x74>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	61da      	str	r2, [r3, #28]
		hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee4 <MX_I2C3_Init+0x74>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003eaa:	480e      	ldr	r0, [pc, #56]	@ (8003ee4 <MX_I2C3_Init+0x74>)
 8003eac:	f009 fbfc 	bl	800d6a8 <HAL_I2C_Init>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <MX_I2C3_Init+0x4a>
		{
			Error_Handler();
 8003eb6:	f000 fcbb 	bl	8004830 <Error_Handler>
		}

		/** Configure Analogue filter
		 */
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4809      	ldr	r0, [pc, #36]	@ (8003ee4 <MX_I2C3_Init+0x74>)
 8003ebe:	f00a f943 	bl	800e148 <HAL_I2CEx_ConfigAnalogFilter>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <MX_I2C3_Init+0x5c>
		{
			Error_Handler();
 8003ec8:	f000 fcb2 	bl	8004830 <Error_Handler>
		}

		/** Configure Digital filter
		 */
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4805      	ldr	r0, [pc, #20]	@ (8003ee4 <MX_I2C3_Init+0x74>)
 8003ed0:	f00a f985 	bl	800e1de <HAL_I2CEx_ConfigDigitalFilter>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <MX_I2C3_Init+0x6e>
		{
			Error_Handler();
 8003eda:	f000 fca9 	bl	8004830 <Error_Handler>
		}
		/* USER CODE BEGIN I2C3_Init 2 */

		/* USER CODE END I2C3_Init 2 */

	}
 8003ede:	bf00      	nop
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	200002e8 	.word	0x200002e8
 8003ee8:	40005c00 	.word	0x40005c00
 8003eec:	10909cec 	.word	0x10909cec

08003ef0 <MX_QUADSPI_Init>:
	 * @brief QUADSPI Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_QUADSPI_Init(void)
	{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN QUADSPI_Init 1 */

		/* USER CODE END QUADSPI_Init 1 */
		/* QUADSPI parameter configuration*/
		hqspi.Instance = QUADSPI;
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8003f34 <MX_QUADSPI_Init+0x44>)
 8003ef6:	4a10      	ldr	r2, [pc, #64]	@ (8003f38 <MX_QUADSPI_Init+0x48>)
 8003ef8:	601a      	str	r2, [r3, #0]
		hqspi.Init.ClockPrescaler = 1;
 8003efa:	4b0e      	ldr	r3, [pc, #56]	@ (8003f34 <MX_QUADSPI_Init+0x44>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	605a      	str	r2, [r3, #4]
		hqspi.Init.FifoThreshold = 1;
 8003f00:	4b0c      	ldr	r3, [pc, #48]	@ (8003f34 <MX_QUADSPI_Init+0x44>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	609a      	str	r2, [r3, #8]
		hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8003f06:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <MX_QUADSPI_Init+0x44>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	60da      	str	r2, [r3, #12]
		hqspi.Init.FlashSize = 1;
 8003f0c:	4b09      	ldr	r3, [pc, #36]	@ (8003f34 <MX_QUADSPI_Init+0x44>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	611a      	str	r2, [r3, #16]
		hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8003f12:	4b08      	ldr	r3, [pc, #32]	@ (8003f34 <MX_QUADSPI_Init+0x44>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	615a      	str	r2, [r3, #20]
		hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8003f18:	4b06      	ldr	r3, [pc, #24]	@ (8003f34 <MX_QUADSPI_Init+0x44>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	619a      	str	r2, [r3, #24]
		if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003f1e:	4805      	ldr	r0, [pc, #20]	@ (8003f34 <MX_QUADSPI_Init+0x44>)
 8003f20:	f00a fa0e 	bl	800e340 <HAL_QSPI_Init>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <MX_QUADSPI_Init+0x3e>
		{
			Error_Handler();
 8003f2a:	f000 fc81 	bl	8004830 <Error_Handler>
		}
		/* USER CODE BEGIN QUADSPI_Init 2 */

		/* USER CODE END QUADSPI_Init 2 */

	}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	2000033c 	.word	0x2000033c
 8003f38:	a0001000 	.word	0xa0001000

08003f3c <MX_RTC_Init>:
	 * @brief RTC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_RTC_Init(void)
	{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b092      	sub	sp, #72	@ 0x48
 8003f40:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN RTC_Init 0 */

		/* USER CODE END RTC_Init 0 */

		RTC_TimeTypeDef sTime = {0};
 8003f42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	609a      	str	r2, [r3, #8]
 8003f4e:	60da      	str	r2, [r3, #12]
 8003f50:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 8003f52:	2300      	movs	r3, #0
 8003f54:	633b      	str	r3, [r7, #48]	@ 0x30
		RTC_AlarmTypeDef sAlarm = {0};
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	222c      	movs	r2, #44	@ 0x2c
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f011 fa5d 	bl	801541c <memset>

		/* USER CODE END RTC_Init 1 */

		/** Initialize RTC Only
		 */
		hrtc.Instance = RTC;
 8003f62:	4b3c      	ldr	r3, [pc, #240]	@ (8004054 <MX_RTC_Init+0x118>)
 8003f64:	4a3c      	ldr	r2, [pc, #240]	@ (8004058 <MX_RTC_Init+0x11c>)
 8003f66:	601a      	str	r2, [r3, #0]
		hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003f68:	4b3a      	ldr	r3, [pc, #232]	@ (8004054 <MX_RTC_Init+0x118>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	605a      	str	r2, [r3, #4]
		hrtc.Init.AsynchPrediv = 127;
 8003f6e:	4b39      	ldr	r3, [pc, #228]	@ (8004054 <MX_RTC_Init+0x118>)
 8003f70:	227f      	movs	r2, #127	@ 0x7f
 8003f72:	609a      	str	r2, [r3, #8]
		hrtc.Init.SynchPrediv = 255;
 8003f74:	4b37      	ldr	r3, [pc, #220]	@ (8004054 <MX_RTC_Init+0x118>)
 8003f76:	22ff      	movs	r2, #255	@ 0xff
 8003f78:	60da      	str	r2, [r3, #12]
		hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003f7a:	4b36      	ldr	r3, [pc, #216]	@ (8004054 <MX_RTC_Init+0x118>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	611a      	str	r2, [r3, #16]
		hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003f80:	4b34      	ldr	r3, [pc, #208]	@ (8004054 <MX_RTC_Init+0x118>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	615a      	str	r2, [r3, #20]
		hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003f86:	4b33      	ldr	r3, [pc, #204]	@ (8004054 <MX_RTC_Init+0x118>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	619a      	str	r2, [r3, #24]
		hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003f8c:	4b31      	ldr	r3, [pc, #196]	@ (8004054 <MX_RTC_Init+0x118>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	61da      	str	r2, [r3, #28]
		if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003f92:	4830      	ldr	r0, [pc, #192]	@ (8004054 <MX_RTC_Init+0x118>)
 8003f94:	f00c f8f2 	bl	801017c <HAL_RTC_Init>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <MX_RTC_Init+0x66>
		{
			Error_Handler();
 8003f9e:	f000 fc47 	bl	8004830 <Error_Handler>

		/* USER CODE END Check_RTC_BKUP */

		/** Initialize RTC and set the Time and Date
		 */
		sTime.Hours = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
		sTime.Minutes = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
		sTime.Seconds = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	643b      	str	r3, [r7, #64]	@ 0x40
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	647b      	str	r3, [r7, #68]	@ 0x44
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003fbc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4823      	ldr	r0, [pc, #140]	@ (8004054 <MX_RTC_Init+0x118>)
 8003fc6:	f00c f961 	bl	801028c <HAL_RTC_SetTime>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <MX_RTC_Init+0x98>
		{
			Error_Handler();
 8003fd0:	f000 fc2e 	bl	8004830 <Error_Handler>
		}
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		sDate.Month = RTC_MONTH_JANUARY;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		sDate.Date = 1;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
		sDate.Year = 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003fec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4817      	ldr	r0, [pc, #92]	@ (8004054 <MX_RTC_Init+0x118>)
 8003ff6:	f00c fa42 	bl	801047e <HAL_RTC_SetDate>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <MX_RTC_Init+0xc8>
		{
			Error_Handler();
 8004000:	f000 fc16 	bl	8004830 <Error_Handler>
		}

		/** Enable the Alarm A
		 */
		sAlarm.AlarmTime.Hours = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	713b      	strb	r3, [r7, #4]
		sAlarm.AlarmTime.Minutes = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	717b      	strb	r3, [r7, #5]
		sAlarm.AlarmTime.Seconds = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	71bb      	strb	r3, [r7, #6]
		sAlarm.AlarmTime.SubSeconds = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	60bb      	str	r3, [r7, #8]
		sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
		sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
		sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800401c:	4b0f      	ldr	r3, [pc, #60]	@ (800405c <MX_RTC_Init+0x120>)
 800401e:	61bb      	str	r3, [r7, #24]
				|RTC_ALARMMASK_SECONDS;
		sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004020:	2300      	movs	r3, #0
 8004022:	623b      	str	r3, [r7, #32]
		sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004024:	2300      	movs	r3, #0
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
		sAlarm.AlarmDateWeekDay = 1;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		sAlarm.Alarm = RTC_ALARM_A;
 800402e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004032:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8004034:	1d3b      	adds	r3, r7, #4
 8004036:	2200      	movs	r2, #0
 8004038:	4619      	mov	r1, r3
 800403a:	4806      	ldr	r0, [pc, #24]	@ (8004054 <MX_RTC_Init+0x118>)
 800403c:	f00c faa6 	bl	801058c <HAL_RTC_SetAlarm_IT>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <MX_RTC_Init+0x10e>
		{
			Error_Handler();
 8004046:	f000 fbf3 	bl	8004830 <Error_Handler>
		}
		/* USER CODE BEGIN RTC_Init 2 */

		/* USER CODE END RTC_Init 2 */

	}
 800404a:	bf00      	nop
 800404c:	3748      	adds	r7, #72	@ 0x48
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000380 	.word	0x20000380
 8004058:	40002800 	.word	0x40002800
 800405c:	80800080 	.word	0x80800080

08004060 <MX_SPI2_Init>:
	 * @brief SPI2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI2_Init(void)
	{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI2_Init 1 */

		/* USER CODE END SPI2_Init 1 */
		/* SPI2 parameter configuration*/
		hspi2.Instance = SPI2;
 8004064:	4b1b      	ldr	r3, [pc, #108]	@ (80040d4 <MX_SPI2_Init+0x74>)
 8004066:	4a1c      	ldr	r2, [pc, #112]	@ (80040d8 <MX_SPI2_Init+0x78>)
 8004068:	601a      	str	r2, [r3, #0]
		hspi2.Init.Mode = SPI_MODE_MASTER;
 800406a:	4b1a      	ldr	r3, [pc, #104]	@ (80040d4 <MX_SPI2_Init+0x74>)
 800406c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004070:	605a      	str	r2, [r3, #4]
		hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004072:	4b18      	ldr	r3, [pc, #96]	@ (80040d4 <MX_SPI2_Init+0x74>)
 8004074:	2200      	movs	r2, #0
 8004076:	609a      	str	r2, [r3, #8]
		hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004078:	4b16      	ldr	r3, [pc, #88]	@ (80040d4 <MX_SPI2_Init+0x74>)
 800407a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800407e:	60da      	str	r2, [r3, #12]
		hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004080:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <MX_SPI2_Init+0x74>)
 8004082:	2200      	movs	r2, #0
 8004084:	611a      	str	r2, [r3, #16]
		hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004086:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <MX_SPI2_Init+0x74>)
 8004088:	2200      	movs	r2, #0
 800408a:	615a      	str	r2, [r3, #20]
		hspi2.Init.NSS = SPI_NSS_SOFT;
 800408c:	4b11      	ldr	r3, [pc, #68]	@ (80040d4 <MX_SPI2_Init+0x74>)
 800408e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004092:	619a      	str	r2, [r3, #24]
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004094:	4b0f      	ldr	r3, [pc, #60]	@ (80040d4 <MX_SPI2_Init+0x74>)
 8004096:	2200      	movs	r2, #0
 8004098:	61da      	str	r2, [r3, #28]
		hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800409a:	4b0e      	ldr	r3, [pc, #56]	@ (80040d4 <MX_SPI2_Init+0x74>)
 800409c:	2200      	movs	r2, #0
 800409e:	621a      	str	r2, [r3, #32]
		hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040a0:	4b0c      	ldr	r3, [pc, #48]	@ (80040d4 <MX_SPI2_Init+0x74>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	625a      	str	r2, [r3, #36]	@ 0x24
		hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040a6:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <MX_SPI2_Init+0x74>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	629a      	str	r2, [r3, #40]	@ 0x28
		hspi2.Init.CRCPolynomial = 7;
 80040ac:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <MX_SPI2_Init+0x74>)
 80040ae:	2207      	movs	r2, #7
 80040b0:	62da      	str	r2, [r3, #44]	@ 0x2c
		hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80040b2:	4b08      	ldr	r3, [pc, #32]	@ (80040d4 <MX_SPI2_Init+0x74>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	@ 0x30
		hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80040b8:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <MX_SPI2_Init+0x74>)
 80040ba:	2208      	movs	r2, #8
 80040bc:	635a      	str	r2, [r3, #52]	@ 0x34
		if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040be:	4805      	ldr	r0, [pc, #20]	@ (80040d4 <MX_SPI2_Init+0x74>)
 80040c0:	f00c fcc0 	bl	8010a44 <HAL_SPI_Init>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <MX_SPI2_Init+0x6e>
		{
			Error_Handler();
 80040ca:	f000 fbb1 	bl	8004830 <Error_Handler>
		}
		/* USER CODE BEGIN SPI2_Init 2 */

		/* USER CODE END SPI2_Init 2 */

	}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	200003a4 	.word	0x200003a4
 80040d8:	40003800 	.word	0x40003800

080040dc <MX_SPI3_Init>:
	 * @brief SPI3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI3_Init(void)
	{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI3_Init 1 */

		/* USER CODE END SPI3_Init 1 */
		/* SPI3 parameter configuration*/
		hspi3.Instance = SPI3;
 80040e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004150 <MX_SPI3_Init+0x74>)
 80040e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004154 <MX_SPI3_Init+0x78>)
 80040e4:	601a      	str	r2, [r3, #0]
		hspi3.Init.Mode = SPI_MODE_MASTER;
 80040e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004150 <MX_SPI3_Init+0x74>)
 80040e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80040ec:	605a      	str	r2, [r3, #4]
		hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80040ee:	4b18      	ldr	r3, [pc, #96]	@ (8004150 <MX_SPI3_Init+0x74>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
		hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80040f4:	4b16      	ldr	r3, [pc, #88]	@ (8004150 <MX_SPI3_Init+0x74>)
 80040f6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80040fa:	60da      	str	r2, [r3, #12]
		hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040fc:	4b14      	ldr	r3, [pc, #80]	@ (8004150 <MX_SPI3_Init+0x74>)
 80040fe:	2200      	movs	r2, #0
 8004100:	611a      	str	r2, [r3, #16]
		hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004102:	4b13      	ldr	r3, [pc, #76]	@ (8004150 <MX_SPI3_Init+0x74>)
 8004104:	2200      	movs	r2, #0
 8004106:	615a      	str	r2, [r3, #20]
		hspi3.Init.NSS = SPI_NSS_SOFT;
 8004108:	4b11      	ldr	r3, [pc, #68]	@ (8004150 <MX_SPI3_Init+0x74>)
 800410a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800410e:	619a      	str	r2, [r3, #24]
		hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004110:	4b0f      	ldr	r3, [pc, #60]	@ (8004150 <MX_SPI3_Init+0x74>)
 8004112:	2200      	movs	r2, #0
 8004114:	61da      	str	r2, [r3, #28]
		hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004116:	4b0e      	ldr	r3, [pc, #56]	@ (8004150 <MX_SPI3_Init+0x74>)
 8004118:	2200      	movs	r2, #0
 800411a:	621a      	str	r2, [r3, #32]
		hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800411c:	4b0c      	ldr	r3, [pc, #48]	@ (8004150 <MX_SPI3_Init+0x74>)
 800411e:	2200      	movs	r2, #0
 8004120:	625a      	str	r2, [r3, #36]	@ 0x24
		hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004122:	4b0b      	ldr	r3, [pc, #44]	@ (8004150 <MX_SPI3_Init+0x74>)
 8004124:	2200      	movs	r2, #0
 8004126:	629a      	str	r2, [r3, #40]	@ 0x28
		hspi3.Init.CRCPolynomial = 7;
 8004128:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <MX_SPI3_Init+0x74>)
 800412a:	2207      	movs	r2, #7
 800412c:	62da      	str	r2, [r3, #44]	@ 0x2c
		hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800412e:	4b08      	ldr	r3, [pc, #32]	@ (8004150 <MX_SPI3_Init+0x74>)
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	@ 0x30
		hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004134:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <MX_SPI3_Init+0x74>)
 8004136:	2208      	movs	r2, #8
 8004138:	635a      	str	r2, [r3, #52]	@ 0x34
		if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800413a:	4805      	ldr	r0, [pc, #20]	@ (8004150 <MX_SPI3_Init+0x74>)
 800413c:	f00c fc82 	bl	8010a44 <HAL_SPI_Init>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_SPI3_Init+0x6e>
		{
			Error_Handler();
 8004146:	f000 fb73 	bl	8004830 <Error_Handler>
		}
		/* USER CODE BEGIN SPI3_Init 2 */

		/* USER CODE END SPI3_Init 2 */

	}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000408 	.word	0x20000408
 8004154:	40003c00 	.word	0x40003c00

08004158 <MX_TIM1_Init>:
	 * @brief TIM1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM1_Init(void)
	{
 8004158:	b580      	push	{r7, lr}
 800415a:	b096      	sub	sp, #88	@ 0x58
 800415c:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM1_Init 0 */

		/* USER CODE END TIM1_Init 0 */

		TIM_MasterConfigTypeDef sMasterConfig = {0};
 800415e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = {0};
 800416a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	605a      	str	r2, [r3, #4]
 8004174:	609a      	str	r2, [r3, #8]
 8004176:	60da      	str	r2, [r3, #12]
 8004178:	611a      	str	r2, [r3, #16]
 800417a:	615a      	str	r2, [r3, #20]
 800417c:	619a      	str	r2, [r3, #24]
		TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800417e:	1d3b      	adds	r3, r7, #4
 8004180:	222c      	movs	r2, #44	@ 0x2c
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f011 f949 	bl	801541c <memset>

		/* USER CODE BEGIN TIM1_Init 1 */

		/* USER CODE END TIM1_Init 1 */
		htim1.Instance = TIM1;
 800418a:	4b45      	ldr	r3, [pc, #276]	@ (80042a0 <MX_TIM1_Init+0x148>)
 800418c:	4a45      	ldr	r2, [pc, #276]	@ (80042a4 <MX_TIM1_Init+0x14c>)
 800418e:	601a      	str	r2, [r3, #0]
		htim1.Init.Prescaler = 1599;
 8004190:	4b43      	ldr	r3, [pc, #268]	@ (80042a0 <MX_TIM1_Init+0x148>)
 8004192:	f240 623f 	movw	r2, #1599	@ 0x63f
 8004196:	605a      	str	r2, [r3, #4]
		htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004198:	4b41      	ldr	r3, [pc, #260]	@ (80042a0 <MX_TIM1_Init+0x148>)
 800419a:	2200      	movs	r2, #0
 800419c:	609a      	str	r2, [r3, #8]
		htim1.Init.Period = 49999;
 800419e:	4b40      	ldr	r3, [pc, #256]	@ (80042a0 <MX_TIM1_Init+0x148>)
 80041a0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80041a4:	60da      	str	r2, [r3, #12]
		htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041a6:	4b3e      	ldr	r3, [pc, #248]	@ (80042a0 <MX_TIM1_Init+0x148>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	611a      	str	r2, [r3, #16]
		htim1.Init.RepetitionCounter = 0;
 80041ac:	4b3c      	ldr	r3, [pc, #240]	@ (80042a0 <MX_TIM1_Init+0x148>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	615a      	str	r2, [r3, #20]
		htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041b2:	4b3b      	ldr	r3, [pc, #236]	@ (80042a0 <MX_TIM1_Init+0x148>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80041b8:	4839      	ldr	r0, [pc, #228]	@ (80042a0 <MX_TIM1_Init+0x148>)
 80041ba:	f00d fbc6 	bl	801194a <HAL_TIM_OC_Init>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MX_TIM1_Init+0x70>
		{
			Error_Handler();
 80041c4:	f000 fb34 	bl	8004830 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c8:	2300      	movs	r3, #0
 80041ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80041cc:	2300      	movs	r3, #0
 80041ce:	653b      	str	r3, [r7, #80]	@ 0x50
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041d0:	2300      	movs	r3, #0
 80041d2:	657b      	str	r3, [r7, #84]	@ 0x54
		if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80041d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80041d8:	4619      	mov	r1, r3
 80041da:	4831      	ldr	r0, [pc, #196]	@ (80042a0 <MX_TIM1_Init+0x148>)
 80041dc:	f00f fbcc 	bl	8013978 <HAL_TIMEx_MasterConfigSynchronization>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <MX_TIM1_Init+0x92>
		{
			Error_Handler();
 80041e6:	f000 fb23 	bl	8004830 <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80041ea:	2300      	movs	r3, #0
 80041ec:	633b      	str	r3, [r7, #48]	@ 0x30
		sConfigOC.Pulse = 0;
 80041ee:	2300      	movs	r3, #0
 80041f0:	637b      	str	r3, [r7, #52]	@ 0x34
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041f2:	2300      	movs	r3, #0
 80041f4:	63bb      	str	r3, [r7, #56]	@ 0x38
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041f6:	2300      	movs	r3, #0
 80041f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	643b      	str	r3, [r7, #64]	@ 0x40
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041fe:	2300      	movs	r3, #0
 8004200:	647b      	str	r3, [r7, #68]	@ 0x44
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004202:	2300      	movs	r3, #0
 8004204:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004206:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800420a:	2200      	movs	r2, #0
 800420c:	4619      	mov	r1, r3
 800420e:	4824      	ldr	r0, [pc, #144]	@ (80042a0 <MX_TIM1_Init+0x148>)
 8004210:	f00e fa88 	bl	8012724 <HAL_TIM_OC_ConfigChannel>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <MX_TIM1_Init+0xc6>
		{
			Error_Handler();
 800421a:	f000 fb09 	bl	8004830 <Error_Handler>
		}
		if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800421e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004222:	2204      	movs	r2, #4
 8004224:	4619      	mov	r1, r3
 8004226:	481e      	ldr	r0, [pc, #120]	@ (80042a0 <MX_TIM1_Init+0x148>)
 8004228:	f00e fa7c 	bl	8012724 <HAL_TIM_OC_ConfigChannel>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <MX_TIM1_Init+0xde>
		{
			Error_Handler();
 8004232:	f000 fafd 	bl	8004830 <Error_Handler>
		}
		if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004236:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800423a:	2208      	movs	r2, #8
 800423c:	4619      	mov	r1, r3
 800423e:	4818      	ldr	r0, [pc, #96]	@ (80042a0 <MX_TIM1_Init+0x148>)
 8004240:	f00e fa70 	bl	8012724 <HAL_TIM_OC_ConfigChannel>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <MX_TIM1_Init+0xf6>
		{
			Error_Handler();
 800424a:	f000 faf1 	bl	8004830 <Error_Handler>
		}
		sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800424e:	2300      	movs	r3, #0
 8004250:	607b      	str	r3, [r7, #4]
		sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]
		sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
		sBreakDeadTimeConfig.DeadTime = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
		sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
		sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004262:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004266:	61bb      	str	r3, [r7, #24]
		sBreakDeadTimeConfig.BreakFilter = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	61fb      	str	r3, [r7, #28]
		sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800426c:	2300      	movs	r3, #0
 800426e:	623b      	str	r3, [r7, #32]
		sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004270:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
		sBreakDeadTimeConfig.Break2Filter = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	62bb      	str	r3, [r7, #40]	@ 0x28
		sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800427a:	2300      	movs	r3, #0
 800427c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800427e:	1d3b      	adds	r3, r7, #4
 8004280:	4619      	mov	r1, r3
 8004282:	4807      	ldr	r0, [pc, #28]	@ (80042a0 <MX_TIM1_Init+0x148>)
 8004284:	f00f fc00 	bl	8013a88 <HAL_TIMEx_ConfigBreakDeadTime>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <MX_TIM1_Init+0x13a>
		{
			Error_Handler();
 800428e:	f000 facf 	bl	8004830 <Error_Handler>
		}
		/* USER CODE BEGIN TIM1_Init 2 */

		/* USER CODE END TIM1_Init 2 */
		HAL_TIM_MspPostInit(&htim1);
 8004292:	4803      	ldr	r0, [pc, #12]	@ (80042a0 <MX_TIM1_Init+0x148>)
 8004294:	f002 fd24 	bl	8006ce0 <HAL_TIM_MspPostInit>

	}
 8004298:	bf00      	nop
 800429a:	3758      	adds	r7, #88	@ 0x58
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	2000046c 	.word	0x2000046c
 80042a4:	40012c00 	.word	0x40012c00

080042a8 <MX_TIM2_Init>:
	 * @brief TIM2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM2_Init(void)
	{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM2_Init 0 */

		/* USER CODE END TIM2_Init 0 */

		TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042ae:	f107 0314 	add.w	r3, r7, #20
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	609a      	str	r2, [r3, #8]
		TIM_IC_InitTypeDef sConfigIC = {0};
 80042ba:	1d3b      	adds	r3, r7, #4
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	609a      	str	r2, [r3, #8]
 80042c4:	60da      	str	r2, [r3, #12]

		/* USER CODE BEGIN TIM2_Init 1 */

		/* USER CODE END TIM2_Init 1 */
		htim2.Instance = TIM2;
 80042c6:	4b21      	ldr	r3, [pc, #132]	@ (800434c <MX_TIM2_Init+0xa4>)
 80042c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80042cc:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 0;
 80042ce:	4b1f      	ldr	r3, [pc, #124]	@ (800434c <MX_TIM2_Init+0xa4>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042d4:	4b1d      	ldr	r3, [pc, #116]	@ (800434c <MX_TIM2_Init+0xa4>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 4294967295;
 80042da:	4b1c      	ldr	r3, [pc, #112]	@ (800434c <MX_TIM2_Init+0xa4>)
 80042dc:	f04f 32ff 	mov.w	r2, #4294967295
 80042e0:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042e2:	4b1a      	ldr	r3, [pc, #104]	@ (800434c <MX_TIM2_Init+0xa4>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042e8:	4b18      	ldr	r3, [pc, #96]	@ (800434c <MX_TIM2_Init+0xa4>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80042ee:	4817      	ldr	r0, [pc, #92]	@ (800434c <MX_TIM2_Init+0xa4>)
 80042f0:	f00d ffb8 	bl	8012264 <HAL_TIM_IC_Init>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_TIM2_Init+0x56>
		{
			Error_Handler();
 80042fa:	f000 fa99 	bl	8004830 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004306:	f107 0314 	add.w	r3, r7, #20
 800430a:	4619      	mov	r1, r3
 800430c:	480f      	ldr	r0, [pc, #60]	@ (800434c <MX_TIM2_Init+0xa4>)
 800430e:	f00f fb33 	bl	8013978 <HAL_TIMEx_MasterConfigSynchronization>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <MX_TIM2_Init+0x74>
		{
			Error_Handler();
 8004318:	f000 fa8a 	bl	8004830 <Error_Handler>
		}
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800431c:	2300      	movs	r3, #0
 800431e:	607b      	str	r3, [r7, #4]
		sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004320:	2301      	movs	r3, #1
 8004322:	60bb      	str	r3, [r7, #8]
		sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]
		sConfigIC.ICFilter = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800432c:	1d3b      	adds	r3, r7, #4
 800432e:	2200      	movs	r2, #0
 8004330:	4619      	mov	r1, r3
 8004332:	4806      	ldr	r0, [pc, #24]	@ (800434c <MX_TIM2_Init+0xa4>)
 8004334:	f00e fa70 	bl	8012818 <HAL_TIM_IC_ConfigChannel>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <MX_TIM2_Init+0x9a>
		{
			Error_Handler();
 800433e:	f000 fa77 	bl	8004830 <Error_Handler>
		}
		/* USER CODE BEGIN TIM2_Init 2 */

		/* USER CODE END TIM2_Init 2 */

	}
 8004342:	bf00      	nop
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	200004b8 	.word	0x200004b8

08004350 <MX_TIM3_Init>:
	 * @brief TIM3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM3_Init(void)
	{
 8004350:	b580      	push	{r7, lr}
 8004352:	b090      	sub	sp, #64	@ 0x40
 8004354:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM3_Init 0 */

		/* USER CODE END TIM3_Init 0 */

		TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004356:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	605a      	str	r2, [r3, #4]
 8004360:	609a      	str	r2, [r3, #8]
 8004362:	60da      	str	r2, [r3, #12]
 8004364:	611a      	str	r2, [r3, #16]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004366:	f107 0320 	add.w	r3, r7, #32
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	605a      	str	r2, [r3, #4]
 8004370:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = {0};
 8004372:	1d3b      	adds	r3, r7, #4
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	60da      	str	r2, [r3, #12]
 800437e:	611a      	str	r2, [r3, #16]
 8004380:	615a      	str	r2, [r3, #20]
 8004382:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM3_Init 1 */

		/* USER CODE END TIM3_Init 1 */
		htim3.Instance = TIM3;
 8004384:	4b2c      	ldr	r3, [pc, #176]	@ (8004438 <MX_TIM3_Init+0xe8>)
 8004386:	4a2d      	ldr	r2, [pc, #180]	@ (800443c <MX_TIM3_Init+0xec>)
 8004388:	601a      	str	r2, [r3, #0]
		htim3.Init.Prescaler = 0;
 800438a:	4b2b      	ldr	r3, [pc, #172]	@ (8004438 <MX_TIM3_Init+0xe8>)
 800438c:	2200      	movs	r2, #0
 800438e:	605a      	str	r2, [r3, #4]
		htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004390:	4b29      	ldr	r3, [pc, #164]	@ (8004438 <MX_TIM3_Init+0xe8>)
 8004392:	2200      	movs	r2, #0
 8004394:	609a      	str	r2, [r3, #8]
		htim3.Init.Period = 31;
 8004396:	4b28      	ldr	r3, [pc, #160]	@ (8004438 <MX_TIM3_Init+0xe8>)
 8004398:	221f      	movs	r2, #31
 800439a:	60da      	str	r2, [r3, #12]
		htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800439c:	4b26      	ldr	r3, [pc, #152]	@ (8004438 <MX_TIM3_Init+0xe8>)
 800439e:	2200      	movs	r2, #0
 80043a0:	611a      	str	r2, [r3, #16]
		htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043a2:	4b25      	ldr	r3, [pc, #148]	@ (8004438 <MX_TIM3_Init+0xe8>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80043a8:	4823      	ldr	r0, [pc, #140]	@ (8004438 <MX_TIM3_Init+0xe8>)
 80043aa:	f00d fa77 	bl	801189c <HAL_TIM_Base_Init>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <MX_TIM3_Init+0x68>
		{
			Error_Handler();
 80043b4:	f000 fa3c 	bl	8004830 <Error_Handler>
		}
		if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80043b8:	481f      	ldr	r0, [pc, #124]	@ (8004438 <MX_TIM3_Init+0xe8>)
 80043ba:	f00d fd55 	bl	8011e68 <HAL_TIM_PWM_Init>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <MX_TIM3_Init+0x78>
		{
			Error_Handler();
 80043c4:	f000 fa34 	bl	8004830 <Error_Handler>
		}
		sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80043c8:	2307      	movs	r3, #7
 80043ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80043cc:	2330      	movs	r3, #48	@ 0x30
 80043ce:	633b      	str	r3, [r7, #48]	@ 0x30
		if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80043d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043d4:	4619      	mov	r1, r3
 80043d6:	4818      	ldr	r0, [pc, #96]	@ (8004438 <MX_TIM3_Init+0xe8>)
 80043d8:	f00e fc97 	bl	8012d0a <HAL_TIM_SlaveConfigSynchro>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <MX_TIM3_Init+0x96>
		{
			Error_Handler();
 80043e2:	f000 fa25 	bl	8004830 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043e6:	2300      	movs	r3, #0
 80043e8:	623b      	str	r3, [r7, #32]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80043ee:	f107 0320 	add.w	r3, r7, #32
 80043f2:	4619      	mov	r1, r3
 80043f4:	4810      	ldr	r0, [pc, #64]	@ (8004438 <MX_TIM3_Init+0xe8>)
 80043f6:	f00f fabf 	bl	8013978 <HAL_TIMEx_MasterConfigSynchronization>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <MX_TIM3_Init+0xb4>
		{
			Error_Handler();
 8004400:	f000 fa16 	bl	8004830 <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004404:	2360      	movs	r3, #96	@ 0x60
 8004406:	607b      	str	r3, [r7, #4]
		sConfigOC.Pulse = 15;
 8004408:	230f      	movs	r3, #15
 800440a:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
		if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004414:	1d3b      	adds	r3, r7, #4
 8004416:	2208      	movs	r2, #8
 8004418:	4619      	mov	r1, r3
 800441a:	4807      	ldr	r0, [pc, #28]	@ (8004438 <MX_TIM3_Init+0xe8>)
 800441c:	f00e fa98 	bl	8012950 <HAL_TIM_PWM_ConfigChannel>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <MX_TIM3_Init+0xda>
		{
			Error_Handler();
 8004426:	f000 fa03 	bl	8004830 <Error_Handler>
		}
		/* USER CODE BEGIN TIM3_Init 2 */

		/* USER CODE END TIM3_Init 2 */
		HAL_TIM_MspPostInit(&htim3);
 800442a:	4803      	ldr	r0, [pc, #12]	@ (8004438 <MX_TIM3_Init+0xe8>)
 800442c:	f002 fc58 	bl	8006ce0 <HAL_TIM_MspPostInit>

	}
 8004430:	bf00      	nop
 8004432:	3740      	adds	r7, #64	@ 0x40
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000504 	.word	0x20000504
 800443c:	40000400 	.word	0x40000400

08004440 <MX_TIM4_Init>:
	 * @brief TIM4 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM4_Init(void)
	{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08e      	sub	sp, #56	@ 0x38
 8004444:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM4_Init 0 */

		/* USER CODE END TIM4_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004446:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	605a      	str	r2, [r3, #4]
 8004450:	609a      	str	r2, [r3, #8]
 8004452:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004454:	f107 031c 	add.w	r3, r7, #28
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = {0};
 8004460:	463b      	mov	r3, r7
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	605a      	str	r2, [r3, #4]
 8004468:	609a      	str	r2, [r3, #8]
 800446a:	60da      	str	r2, [r3, #12]
 800446c:	611a      	str	r2, [r3, #16]
 800446e:	615a      	str	r2, [r3, #20]
 8004470:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM4_Init 1 */

		/* USER CODE END TIM4_Init 1 */
		htim4.Instance = TIM4;
 8004472:	4b2b      	ldr	r3, [pc, #172]	@ (8004520 <MX_TIM4_Init+0xe0>)
 8004474:	4a2b      	ldr	r2, [pc, #172]	@ (8004524 <MX_TIM4_Init+0xe4>)
 8004476:	601a      	str	r2, [r3, #0]
		htim4.Init.Prescaler = 99;
 8004478:	4b29      	ldr	r3, [pc, #164]	@ (8004520 <MX_TIM4_Init+0xe0>)
 800447a:	2263      	movs	r2, #99	@ 0x63
 800447c:	605a      	str	r2, [r3, #4]
		htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800447e:	4b28      	ldr	r3, [pc, #160]	@ (8004520 <MX_TIM4_Init+0xe0>)
 8004480:	2200      	movs	r2, #0
 8004482:	609a      	str	r2, [r3, #8]
		htim4.Init.Period = 999;
 8004484:	4b26      	ldr	r3, [pc, #152]	@ (8004520 <MX_TIM4_Init+0xe0>)
 8004486:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800448a:	60da      	str	r2, [r3, #12]
		htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800448c:	4b24      	ldr	r3, [pc, #144]	@ (8004520 <MX_TIM4_Init+0xe0>)
 800448e:	2200      	movs	r2, #0
 8004490:	611a      	str	r2, [r3, #16]
		htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004492:	4b23      	ldr	r3, [pc, #140]	@ (8004520 <MX_TIM4_Init+0xe0>)
 8004494:	2280      	movs	r2, #128	@ 0x80
 8004496:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004498:	4821      	ldr	r0, [pc, #132]	@ (8004520 <MX_TIM4_Init+0xe0>)
 800449a:	f00d f9ff 	bl	801189c <HAL_TIM_Base_Init>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <MX_TIM4_Init+0x68>
		{
			Error_Handler();
 80044a4:	f000 f9c4 	bl	8004830 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044ac:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80044ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044b2:	4619      	mov	r1, r3
 80044b4:	481a      	ldr	r0, [pc, #104]	@ (8004520 <MX_TIM4_Init+0xe0>)
 80044b6:	f00e fb5f 	bl	8012b78 <HAL_TIM_ConfigClockSource>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <MX_TIM4_Init+0x84>
		{
			Error_Handler();
 80044c0:	f000 f9b6 	bl	8004830 <Error_Handler>
		}
		if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80044c4:	4816      	ldr	r0, [pc, #88]	@ (8004520 <MX_TIM4_Init+0xe0>)
 80044c6:	f00d fa40 	bl	801194a <HAL_TIM_OC_Init>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <MX_TIM4_Init+0x94>
		{
			Error_Handler();
 80044d0:	f000 f9ae 	bl	8004830 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80044d4:	2320      	movs	r3, #32
 80044d6:	61fb      	str	r3, [r7, #28]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044d8:	2300      	movs	r3, #0
 80044da:	627b      	str	r3, [r7, #36]	@ 0x24
		if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80044dc:	f107 031c 	add.w	r3, r7, #28
 80044e0:	4619      	mov	r1, r3
 80044e2:	480f      	ldr	r0, [pc, #60]	@ (8004520 <MX_TIM4_Init+0xe0>)
 80044e4:	f00f fa48 	bl	8013978 <HAL_TIMEx_MasterConfigSynchronization>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <MX_TIM4_Init+0xb2>
		{
			Error_Handler();
 80044ee:	f000 f99f 	bl	8004830 <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80044f2:	2300      	movs	r3, #0
 80044f4:	603b      	str	r3, [r7, #0]
		sConfigOC.Pulse = 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	607b      	str	r3, [r7, #4]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004502:	463b      	mov	r3, r7
 8004504:	2208      	movs	r2, #8
 8004506:	4619      	mov	r1, r3
 8004508:	4805      	ldr	r0, [pc, #20]	@ (8004520 <MX_TIM4_Init+0xe0>)
 800450a:	f00e f90b 	bl	8012724 <HAL_TIM_OC_ConfigChannel>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <MX_TIM4_Init+0xd8>
		{
			Error_Handler();
 8004514:	f000 f98c 	bl	8004830 <Error_Handler>
		}
		/* USER CODE BEGIN TIM4_Init 2 */

		/* USER CODE END TIM4_Init 2 */

	}
 8004518:	bf00      	nop
 800451a:	3738      	adds	r7, #56	@ 0x38
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000550 	.word	0x20000550
 8004524:	40000800 	.word	0x40000800

08004528 <MX_UART4_Init>:
	 * @brief UART4 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_UART4_Init(void)
	{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
		/* USER CODE END UART4_Init 0 */

		/* USER CODE BEGIN UART4_Init 1 */

		/* USER CODE END UART4_Init 1 */
		huart4.Instance = UART4;
 800452c:	4b14      	ldr	r3, [pc, #80]	@ (8004580 <MX_UART4_Init+0x58>)
 800452e:	4a15      	ldr	r2, [pc, #84]	@ (8004584 <MX_UART4_Init+0x5c>)
 8004530:	601a      	str	r2, [r3, #0]
		huart4.Init.BaudRate = 115200;
 8004532:	4b13      	ldr	r3, [pc, #76]	@ (8004580 <MX_UART4_Init+0x58>)
 8004534:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004538:	605a      	str	r2, [r3, #4]
		huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800453a:	4b11      	ldr	r3, [pc, #68]	@ (8004580 <MX_UART4_Init+0x58>)
 800453c:	2200      	movs	r2, #0
 800453e:	609a      	str	r2, [r3, #8]
		huart4.Init.StopBits = UART_STOPBITS_1;
 8004540:	4b0f      	ldr	r3, [pc, #60]	@ (8004580 <MX_UART4_Init+0x58>)
 8004542:	2200      	movs	r2, #0
 8004544:	60da      	str	r2, [r3, #12]
		huart4.Init.Parity = UART_PARITY_NONE;
 8004546:	4b0e      	ldr	r3, [pc, #56]	@ (8004580 <MX_UART4_Init+0x58>)
 8004548:	2200      	movs	r2, #0
 800454a:	611a      	str	r2, [r3, #16]
		huart4.Init.Mode = UART_MODE_TX_RX;
 800454c:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <MX_UART4_Init+0x58>)
 800454e:	220c      	movs	r2, #12
 8004550:	615a      	str	r2, [r3, #20]
		huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004552:	4b0b      	ldr	r3, [pc, #44]	@ (8004580 <MX_UART4_Init+0x58>)
 8004554:	2200      	movs	r2, #0
 8004556:	619a      	str	r2, [r3, #24]
		huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004558:	4b09      	ldr	r3, [pc, #36]	@ (8004580 <MX_UART4_Init+0x58>)
 800455a:	2200      	movs	r2, #0
 800455c:	61da      	str	r2, [r3, #28]
		huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800455e:	4b08      	ldr	r3, [pc, #32]	@ (8004580 <MX_UART4_Init+0x58>)
 8004560:	2200      	movs	r2, #0
 8004562:	621a      	str	r2, [r3, #32]
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004564:	4b06      	ldr	r3, [pc, #24]	@ (8004580 <MX_UART4_Init+0x58>)
 8004566:	2200      	movs	r2, #0
 8004568:	625a      	str	r2, [r3, #36]	@ 0x24
		if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 800456a:	4805      	ldr	r0, [pc, #20]	@ (8004580 <MX_UART4_Init+0x58>)
 800456c:	f00f fb58 	bl	8013c20 <HAL_HalfDuplex_Init>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <MX_UART4_Init+0x52>
		{
			Error_Handler();
 8004576:	f000 f95b 	bl	8004830 <Error_Handler>
		}
		/* USER CODE BEGIN UART4_Init 2 */

		/* USER CODE END UART4_Init 2 */

	}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	2000059c 	.word	0x2000059c
 8004584:	40004c00 	.word	0x40004c00

08004588 <MX_USART1_UART_Init>:
	 * @brief USART1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART1_UART_Init(void)
	{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
		/* USER CODE END USART1_Init 0 */

		/* USER CODE BEGIN USART1_Init 1 */

		/* USER CODE END USART1_Init 1 */
		huart1.Instance = USART1;
 800458c:	4b14      	ldr	r3, [pc, #80]	@ (80045e0 <MX_USART1_UART_Init+0x58>)
 800458e:	4a15      	ldr	r2, [pc, #84]	@ (80045e4 <MX_USART1_UART_Init+0x5c>)
 8004590:	601a      	str	r2, [r3, #0]
		huart1.Init.BaudRate = 115200;
 8004592:	4b13      	ldr	r3, [pc, #76]	@ (80045e0 <MX_USART1_UART_Init+0x58>)
 8004594:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004598:	605a      	str	r2, [r3, #4]
		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800459a:	4b11      	ldr	r3, [pc, #68]	@ (80045e0 <MX_USART1_UART_Init+0x58>)
 800459c:	2200      	movs	r2, #0
 800459e:	609a      	str	r2, [r3, #8]
		huart1.Init.StopBits = UART_STOPBITS_1;
 80045a0:	4b0f      	ldr	r3, [pc, #60]	@ (80045e0 <MX_USART1_UART_Init+0x58>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	60da      	str	r2, [r3, #12]
		huart1.Init.Parity = UART_PARITY_NONE;
 80045a6:	4b0e      	ldr	r3, [pc, #56]	@ (80045e0 <MX_USART1_UART_Init+0x58>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	611a      	str	r2, [r3, #16]
		huart1.Init.Mode = UART_MODE_TX_RX;
 80045ac:	4b0c      	ldr	r3, [pc, #48]	@ (80045e0 <MX_USART1_UART_Init+0x58>)
 80045ae:	220c      	movs	r2, #12
 80045b0:	615a      	str	r2, [r3, #20]
		huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80045b2:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <MX_USART1_UART_Init+0x58>)
 80045b4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80045b8:	619a      	str	r2, [r3, #24]
		huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045ba:	4b09      	ldr	r3, [pc, #36]	@ (80045e0 <MX_USART1_UART_Init+0x58>)
 80045bc:	2200      	movs	r2, #0
 80045be:	61da      	str	r2, [r3, #28]
		huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045c0:	4b07      	ldr	r3, [pc, #28]	@ (80045e0 <MX_USART1_UART_Init+0x58>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	621a      	str	r2, [r3, #32]
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045c6:	4b06      	ldr	r3, [pc, #24]	@ (80045e0 <MX_USART1_UART_Init+0x58>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	625a      	str	r2, [r3, #36]	@ 0x24
		if (HAL_UART_Init(&huart1) != HAL_OK)
 80045cc:	4804      	ldr	r0, [pc, #16]	@ (80045e0 <MX_USART1_UART_Init+0x58>)
 80045ce:	f00f fad9 	bl	8013b84 <HAL_UART_Init>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <MX_USART1_UART_Init+0x54>
		{
			Error_Handler();
 80045d8:	f000 f92a 	bl	8004830 <Error_Handler>
		}
		/* USER CODE BEGIN USART1_Init 2 */

		/* USER CODE END USART1_Init 2 */

	}
 80045dc:	bf00      	nop
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20000624 	.word	0x20000624
 80045e4:	40013800 	.word	0x40013800

080045e8 <MX_DMA_Init>:

	/**
	 * Enable DMA controller clock
	 */
	static void MX_DMA_Init(void)
	{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0

		/* DMA controller clock enable */
		__HAL_RCC_DMA1_CLK_ENABLE();
 80045ee:	4b14      	ldr	r3, [pc, #80]	@ (8004640 <MX_DMA_Init+0x58>)
 80045f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045f2:	4a13      	ldr	r2, [pc, #76]	@ (8004640 <MX_DMA_Init+0x58>)
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80045fa:	4b11      	ldr	r3, [pc, #68]	@ (8004640 <MX_DMA_Init+0x58>)
 80045fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	607b      	str	r3, [r7, #4]
 8004604:	687b      	ldr	r3, [r7, #4]

		/* DMA interrupt init */
		/* DMA1_Channel1_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004606:	2200      	movs	r2, #0
 8004608:	2100      	movs	r1, #0
 800460a:	200b      	movs	r0, #11
 800460c:	f007 fb41 	bl	800bc92 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004610:	200b      	movs	r0, #11
 8004612:	f007 fb5a 	bl	800bcca <HAL_NVIC_EnableIRQ>
		/* DMA1_Channel4_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004616:	2200      	movs	r2, #0
 8004618:	2100      	movs	r1, #0
 800461a:	200e      	movs	r0, #14
 800461c:	f007 fb39 	bl	800bc92 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004620:	200e      	movs	r0, #14
 8004622:	f007 fb52 	bl	800bcca <HAL_NVIC_EnableIRQ>
		/* DMA1_Channel5_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004626:	2200      	movs	r2, #0
 8004628:	2100      	movs	r1, #0
 800462a:	200f      	movs	r0, #15
 800462c:	f007 fb31 	bl	800bc92 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004630:	200f      	movs	r0, #15
 8004632:	f007 fb4a 	bl	800bcca <HAL_NVIC_EnableIRQ>

	}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000

08004644 <MX_GPIO_Init>:
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void)
	{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08a      	sub	sp, #40	@ 0x28
 8004648:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 800464a:	f107 0314 	add.w	r3, r7, #20
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	605a      	str	r2, [r3, #4]
 8004654:	609a      	str	r2, [r3, #8]
 8004656:	60da      	str	r2, [r3, #12]
 8004658:	611a      	str	r2, [r3, #16]
		/* USER CODE BEGIN MX_GPIO_Init_1 */
		/* USER CODE END MX_GPIO_Init_1 */

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800465a:	4b71      	ldr	r3, [pc, #452]	@ (8004820 <MX_GPIO_Init+0x1dc>)
 800465c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465e:	4a70      	ldr	r2, [pc, #448]	@ (8004820 <MX_GPIO_Init+0x1dc>)
 8004660:	f043 0304 	orr.w	r3, r3, #4
 8004664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004666:	4b6e      	ldr	r3, [pc, #440]	@ (8004820 <MX_GPIO_Init+0x1dc>)
 8004668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOH_CLK_ENABLE();
 8004672:	4b6b      	ldr	r3, [pc, #428]	@ (8004820 <MX_GPIO_Init+0x1dc>)
 8004674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004676:	4a6a      	ldr	r2, [pc, #424]	@ (8004820 <MX_GPIO_Init+0x1dc>)
 8004678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800467c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800467e:	4b68      	ldr	r3, [pc, #416]	@ (8004820 <MX_GPIO_Init+0x1dc>)
 8004680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800468a:	4b65      	ldr	r3, [pc, #404]	@ (8004820 <MX_GPIO_Init+0x1dc>)
 800468c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800468e:	4a64      	ldr	r2, [pc, #400]	@ (8004820 <MX_GPIO_Init+0x1dc>)
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004696:	4b62      	ldr	r3, [pc, #392]	@ (8004820 <MX_GPIO_Init+0x1dc>)
 8004698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	60bb      	str	r3, [r7, #8]
 80046a0:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80046a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004820 <MX_GPIO_Init+0x1dc>)
 80046a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004820 <MX_GPIO_Init+0x1dc>)
 80046a8:	f043 0302 	orr.w	r3, r3, #2
 80046ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004820 <MX_GPIO_Init+0x1dc>)
 80046b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	607b      	str	r3, [r7, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80046ba:	4b59      	ldr	r3, [pc, #356]	@ (8004820 <MX_GPIO_Init+0x1dc>)
 80046bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046be:	4a58      	ldr	r2, [pc, #352]	@ (8004820 <MX_GPIO_Init+0x1dc>)
 80046c0:	f043 0308 	orr.w	r3, r3, #8
 80046c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046c6:	4b56      	ldr	r3, [pc, #344]	@ (8004820 <MX_GPIO_Init+0x1dc>)
 80046c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	683b      	ldr	r3, [r7, #0]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 80046d2:	2200      	movs	r2, #0
 80046d4:	2108      	movs	r1, #8
 80046d6:	4853      	ldr	r0, [pc, #332]	@ (8004824 <MX_GPIO_Init+0x1e0>)
 80046d8:	f008 ffce 	bl	800d678 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 80046dc:	2201      	movs	r2, #1
 80046de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80046e2:	4851      	ldr	r0, [pc, #324]	@ (8004828 <MX_GPIO_Init+0x1e4>)
 80046e4:	f008 ffc8 	bl	800d678 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 80046e8:	2201      	movs	r2, #1
 80046ea:	21c0      	movs	r1, #192	@ 0xc0
 80046ec:	484d      	ldr	r0, [pc, #308]	@ (8004824 <MX_GPIO_Init+0x1e0>)
 80046ee:	f008 ffc3 	bl	800d678 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin, GPIO_PIN_SET);
 80046f2:	2201      	movs	r2, #1
 80046f4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80046f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046fc:	f008 ffbc 	bl	800d678 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8004700:	2200      	movs	r2, #0
 8004702:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800470a:	f008 ffb5 	bl	800d678 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 800470e:	2200      	movs	r2, #0
 8004710:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004714:	4844      	ldr	r0, [pc, #272]	@ (8004828 <MX_GPIO_Init+0x1e4>)
 8004716:	f008 ffaf 	bl	800d678 <HAL_GPIO_WritePin>

		/*Configure GPIO pins : USR_BTN_Pin PC4 */
		GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 800471a:	f242 0310 	movw	r3, #8208	@ 0x2010
 800471e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004720:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004724:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800472a:	f107 0314 	add.w	r3, r7, #20
 800472e:	4619      	mov	r1, r3
 8004730:	483c      	ldr	r0, [pc, #240]	@ (8004824 <MX_GPIO_Init+0x1e0>)
 8004732:	f008 fdf7 	bl	800d324 <HAL_GPIO_Init>

		/*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
		GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 8004736:	23c8      	movs	r3, #200	@ 0xc8
 8004738:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800473a:	2301      	movs	r3, #1
 800473c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004742:	2300      	movs	r3, #0
 8004744:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004746:	f107 0314 	add.w	r3, r7, #20
 800474a:	4619      	mov	r1, r3
 800474c:	4835      	ldr	r0, [pc, #212]	@ (8004824 <MX_GPIO_Init+0x1e0>)
 800474e:	f008 fde9 	bl	800d324 <HAL_GPIO_Init>

		/*Configure GPIO pin : PA3 */
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004752:	2308      	movs	r3, #8
 8004754:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800475e:	f107 0314 	add.w	r3, r7, #20
 8004762:	4619      	mov	r1, r3
 8004764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004768:	f008 fddc 	bl	800d324 <HAL_GPIO_Init>

		/*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
		GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 800476c:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8004770:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004772:	2301      	movs	r3, #1
 8004774:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004776:	2300      	movs	r3, #0
 8004778:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800477a:	2300      	movs	r3, #0
 800477c:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800477e:	f107 0314 	add.w	r3, r7, #20
 8004782:	4619      	mov	r1, r3
 8004784:	4828      	ldr	r0, [pc, #160]	@ (8004828 <MX_GPIO_Init+0x1e4>)
 8004786:	f008 fdcd 	bl	800d324 <HAL_GPIO_Init>

		/*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin */
		GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin;
 800478a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800478e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004790:	2311      	movs	r3, #17
 8004792:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004794:	2300      	movs	r3, #0
 8004796:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004798:	2300      	movs	r3, #0
 800479a:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800479c:	f107 0314 	add.w	r3, r7, #20
 80047a0:	4619      	mov	r1, r3
 80047a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80047a6:	f008 fdbd 	bl	800d324 <HAL_GPIO_Init>

		/*Configure GPIO pin : ACC_nCS_Pin */
		GPIO_InitStruct.Pin = ACC_nCS_Pin;
 80047aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ae:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047b0:	2301      	movs	r3, #1
 80047b2:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047b8:	2300      	movs	r3, #0
 80047ba:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(ACC_nCS_GPIO_Port, &GPIO_InitStruct);
 80047bc:	f107 0314 	add.w	r3, r7, #20
 80047c0:	4619      	mov	r1, r3
 80047c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80047c6:	f008 fdad 	bl	800d324 <HAL_GPIO_Init>

		/*Configure GPIO pin : PD2 */
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047ca:	2304      	movs	r3, #4
 80047cc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80047d2:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047d8:	f107 0314 	add.w	r3, r7, #20
 80047dc:	4619      	mov	r1, r3
 80047de:	4813      	ldr	r0, [pc, #76]	@ (800482c <MX_GPIO_Init+0x1e8>)
 80047e0:	f008 fda0 	bl	800d324 <HAL_GPIO_Init>

		/*Configure GPIO pin : DCD_Pin */
		GPIO_InitStruct.Pin = DCD_Pin;
 80047e4:	2320      	movs	r3, #32
 80047e6:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 80047f0:	f107 0314 	add.w	r3, r7, #20
 80047f4:	4619      	mov	r1, r3
 80047f6:	480c      	ldr	r0, [pc, #48]	@ (8004828 <MX_GPIO_Init+0x1e4>)
 80047f8:	f008 fd94 	bl	800d324 <HAL_GPIO_Init>

		/*Configure GPIO pin : PB8 */
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 80047fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004800:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004802:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004806:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004808:	2300      	movs	r3, #0
 800480a:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800480c:	f107 0314 	add.w	r3, r7, #20
 8004810:	4619      	mov	r1, r3
 8004812:	4805      	ldr	r0, [pc, #20]	@ (8004828 <MX_GPIO_Init+0x1e4>)
 8004814:	f008 fd86 	bl	800d324 <HAL_GPIO_Init>

		/* USER CODE BEGIN MX_GPIO_Init_2 */
		/* USER CODE END MX_GPIO_Init_2 */
	}
 8004818:	bf00      	nop
 800481a:	3728      	adds	r7, #40	@ 0x28
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40021000 	.word	0x40021000
 8004824:	48000800 	.word	0x48000800
 8004828:	48000400 	.word	0x48000400
 800482c:	48000c00 	.word	0x48000c00

08004830 <Error_Handler>:
	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void)
	{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004834:	b672      	cpsid	i
}
 8004836:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 8004838:	bf00      	nop
 800483a:	e7fd      	b.n	8004838 <Error_Handler+0x8>

0800483c <OTA_Init>:
#include "string.h"


/*-----INIZIALIZZAZIONE OTA-----*/
int OTA_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	71fb      	strb	r3, [r7, #7]

	if (sys.OTA_File_isOpen)
 8004846:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <OTA_Init+0x4c>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <OTA_Init+0x1e>
	{
		f_close(&sys.OTA_File);
 8004854:	480d      	ldr	r0, [pc, #52]	@ (800488c <OTA_Init+0x50>)
 8004856:	f004 ff3b 	bl	80096d0 <f_close>
	}

	sys.OTA_File_isOpen = 0;
 800485a:	4a0b      	ldr	r2, [pc, #44]	@ (8004888 <OTA_Init+0x4c>)
 800485c:	7813      	ldrb	r3, [r2, #0]
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	7013      	strb	r3, [r2, #0]

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 8004864:	220b      	movs	r2, #11
 8004866:	490a      	ldr	r1, [pc, #40]	@ (8004890 <OTA_Init+0x54>)
 8004868:	4808      	ldr	r0, [pc, #32]	@ (800488c <OTA_Init+0x50>)
 800486a:	f004 fa3d 	bl	8008ce8 <f_open>
 800486e:	4603      	mov	r3, r0
 8004870:	71fb      	strb	r3, [r7, #7]

	if (fRes != FR_OK)
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <OTA_Init+0x42>
	{
		return -1;
 8004878:	f04f 33ff 	mov.w	r3, #4294967295
 800487c:	e000      	b.n	8004880 <OTA_Init+0x44>
	}

	return 0;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	20000740 	.word	0x20000740
 800488c:	20000744 	.word	0x20000744
 8004890:	080169cc 	.word	0x080169cc

08004894 <OTA_Receive>:

/*-----RICEZIONE FILE OTA-----*/
int OTA_Receive(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
 800489a:	af00      	add	r7, sp, #0
	uint8_t rx_buffer[1200];
	uint16_t rx_len = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	f8a7 34c6 	strh.w	r3, [r7, #1222]	@ 0x4c6
	UINT bytes_written = 0;
 80048a2:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80048a6:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
	
	SIM_Wait_Response("+CIPRXGET: 1");
 80048ae:	4834      	ldr	r0, [pc, #208]	@ (8004980 <OTA_Receive+0xec>)
 80048b0:	f7fd f90e 	bl	8001ad0 <SIM_Wait_Response>

	while(1)
	{
		SIM_Send_Command("AT+CIPRXGET=2,1024\r");
 80048b4:	4833      	ldr	r0, [pc, #204]	@ (8004984 <OTA_Receive+0xf0>)
 80048b6:	f7fc fccd 	bl	8001254 <SIM_Send_Command>
		rx_len = SIM_Receive_Response((char*)rx_buffer);
 80048ba:	f107 0308 	add.w	r3, r7, #8
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fc fcf4 	bl	80012ac <SIM_Receive_Response>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f8a7 34c6 	strh.w	r3, [r7, #1222]	@ 0x4c6

		char *info = strstr((char*)rx_buffer, "+CIPRXGET: 2,");
 80048ca:	f107 0308 	add.w	r3, r7, #8
 80048ce:	492e      	ldr	r1, [pc, #184]	@ (8004988 <OTA_Receive+0xf4>)
 80048d0:	4618      	mov	r0, r3
 80048d2:	f010 fddd 	bl	8015490 <strstr>
 80048d6:	f8c7 04c0 	str.w	r0, [r7, #1216]	@ 0x4c0
		if (info) 
 80048da:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0e8      	beq.n	80048b4 <OTA_Receive+0x20>
		{
			int actual_len = atoi(info + strlen("+CIPRXGET: 2,"));
 80048e2:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 80048e6:	330d      	adds	r3, #13
 80048e8:	4618      	mov	r0, r3
 80048ea:	f010 fcad 	bl	8015248 <atoi>
 80048ee:	f8c7 04bc 	str.w	r0, [r7, #1212]	@ 0x4bc
			char *data_start = strstr(info, "\r\n");
 80048f2:	4926      	ldr	r1, [pc, #152]	@ (800498c <OTA_Receive+0xf8>)
 80048f4:	f8d7 04c0 	ldr.w	r0, [r7, #1216]	@ 0x4c0
 80048f8:	f010 fdca 	bl	8015490 <strstr>
 80048fc:	f8c7 04b8 	str.w	r0, [r7, #1208]	@ 0x4b8
			if (actual_len == 0)
 8004900:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8004904:	2b00      	cmp	r3, #0
 8004906:	d02b      	beq.n	8004960 <OTA_Receive+0xcc>
            {
                break;           // Fine file
            }
			if (data_start) 
 8004908:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800490c:	2b00      	cmp	r3, #0
 800490e:	d021      	beq.n	8004954 <OTA_Receive+0xc0>
			{
				data_start += 2; // Salta "\r\n"
 8004910:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8004914:	3302      	adds	r3, #2
 8004916:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
				SIM_Wait_Response("OK");
 800491a:	481d      	ldr	r0, [pc, #116]	@ (8004990 <OTA_Receive+0xfc>)
 800491c:	f7fd f8d8 	bl	8001ad0 <SIM_Wait_Response>
				SIM_Wait_Response("+CIPRXGET: 1");
 8004920:	4817      	ldr	r0, [pc, #92]	@ (8004980 <OTA_Receive+0xec>)
 8004922:	f7fd f8d5 	bl	8001ad0 <SIM_Wait_Response>
				f_write(&sys.OTA_File, data_start, actual_len, &bytes_written);
 8004926:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	@ 0x4bc
 800492a:	1d3b      	adds	r3, r7, #4
 800492c:	f8d7 14b8 	ldr.w	r1, [r7, #1208]	@ 0x4b8
 8004930:	4818      	ldr	r0, [pc, #96]	@ (8004994 <OTA_Receive+0x100>)
 8004932:	f004 fcc4 	bl	80092be <f_write>
				if(bytes_written != actual_len)
 8004936:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800493a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8004944:	429a      	cmp	r2, r3
 8004946:	d0b5      	beq.n	80048b4 <OTA_Receive+0x20>
				{
					f_close(&sys.OTA_File);
 8004948:	4812      	ldr	r0, [pc, #72]	@ (8004994 <OTA_Receive+0x100>)
 800494a:	f004 fec1 	bl	80096d0 <f_close>
					return -1; 
 800494e:	f04f 33ff 	mov.w	r3, #4294967295
 8004952:	e00f      	b.n	8004974 <OTA_Receive+0xe0>
				}
			}
			else
			{
				f_close(&sys.OTA_File);
 8004954:	480f      	ldr	r0, [pc, #60]	@ (8004994 <OTA_Receive+0x100>)
 8004956:	f004 febb 	bl	80096d0 <f_close>
				return -1; 
 800495a:	f04f 33ff 	mov.w	r3, #4294967295
 800495e:	e009      	b.n	8004974 <OTA_Receive+0xe0>
                break;           // Fine file
 8004960:	bf00      	nop
			}
		}
	}

	f_close(&sys.OTA_File);
 8004962:	480c      	ldr	r0, [pc, #48]	@ (8004994 <OTA_Receive+0x100>)
 8004964:	f004 feb4 	bl	80096d0 <f_close>
    sys.OTA_File_isOpen = 0;
 8004968:	4a0b      	ldr	r2, [pc, #44]	@ (8004998 <OTA_Receive+0x104>)
 800496a:	7813      	ldrb	r3, [r2, #0]
 800496c:	f023 0301 	bic.w	r3, r3, #1
 8004970:	7013      	strb	r3, [r2, #0]
	return 0;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	f507 6799 	add.w	r7, r7, #1224	@ 0x4c8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	080169dc 	.word	0x080169dc
 8004984:	080169ec 	.word	0x080169ec
 8004988:	08016a00 	.word	0x08016a00
 800498c:	08016a10 	.word	0x08016a10
 8004990:	08016a14 	.word	0x08016a14
 8004994:	20000744 	.word	0x20000744
 8004998:	20000740 	.word	0x20000740

0800499c <OTA_CRC_Check>:

int OTA_CRC_Check(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b0cc      	sub	sp, #304	@ 0x130
 80049a0:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
	UINT read = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	uint16_t ota_crc = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
	uint8_t rx_buffer[20];

	SIM_Wait_Response("+CIPRXGET: 1");
 80049b4:	4846      	ldr	r0, [pc, #280]	@ (8004ad0 <OTA_CRC_Check+0x134>)
 80049b6:	f7fd f88b 	bl	8001ad0 <SIM_Wait_Response>
	SIM_Send_Command("AT+CIPRXGET=2,2\r");
 80049ba:	4846      	ldr	r0, [pc, #280]	@ (8004ad4 <OTA_CRC_Check+0x138>)
 80049bc:	f7fc fc4a 	bl	8001254 <SIM_Send_Command>
	SIM_Receive_Response((char*)rx_buffer);
 80049c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fc fc71 	bl	80012ac <SIM_Receive_Response>
	char *info = strstr((char*)rx_buffer, "+CIPRXGET: 2,");
 80049ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ce:	4942      	ldr	r1, [pc, #264]	@ (8004ad8 <OTA_CRC_Check+0x13c>)
 80049d0:	4618      	mov	r0, r3
 80049d2:	f010 fd5d 	bl	8015490 <strstr>
 80049d6:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124

	if (info)
 80049da:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <OTA_CRC_Check+0x58>
	{
		ota_crc = atoi(info + strlen("+CIPRXGET: 2,"));
 80049e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80049e6:	330d      	adds	r3, #13
 80049e8:	4618      	mov	r0, r3
 80049ea:	f010 fc2d 	bl	8015248 <atoi>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
	}

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 80049f4:	2201      	movs	r2, #1
 80049f6:	4939      	ldr	r1, [pc, #228]	@ (8004adc <OTA_CRC_Check+0x140>)
 80049f8:	4839      	ldr	r0, [pc, #228]	@ (8004ae0 <OTA_CRC_Check+0x144>)
 80049fa:	f004 f975 	bl	8008ce8 <f_open>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
	if (fRes != FR_OK)
 8004a04:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <OTA_CRC_Check+0x76>
	{
		return -1;
 8004a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a10:	e059      	b.n	8004ac6 <OTA_CRC_Check+0x12a>
	}
	uint32_t size = f_size(&sys.OTA_File);
 8004a12:	4b34      	ldr	r3, [pc, #208]	@ (8004ae4 <OTA_CRC_Check+0x148>)
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	uint16_t calc_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&size, 1);
 8004a1a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8004a1e:	2201      	movs	r2, #1
 8004a20:	4619      	mov	r1, r3
 8004a22:	4831      	ldr	r0, [pc, #196]	@ (8004ae8 <OTA_CRC_Check+0x14c>)
 8004a24:	f007 f9d4 	bl	800bdd0 <HAL_CRC_Calculate>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
	while (size > 0)
 8004a2e:	e039      	b.n	8004aa4 <OTA_CRC_Check+0x108>
	{
		uint8_t buffer[256];
		UINT to_read = (size > sizeof(buffer)) ? sizeof(buffer) : size;
 8004a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a38:	bf28      	it	cs
 8004a3a:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8004a3e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		if (f_read(&sys.OTA_File, buffer, to_read, &read) != FR_OK || read == 0)
 8004a42:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8004a46:	1d39      	adds	r1, r7, #4
 8004a48:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8004a4c:	4824      	ldr	r0, [pc, #144]	@ (8004ae0 <OTA_CRC_Check+0x144>)
 8004a4e:	f004 fae3 	bl	8009018 <f_read>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d103      	bne.n	8004a60 <OTA_CRC_Check+0xc4>
 8004a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <OTA_CRC_Check+0xd0>
		{
			f_close(&sys.OTA_File);
 8004a60:	481f      	ldr	r0, [pc, #124]	@ (8004ae0 <OTA_CRC_Check+0x144>)
 8004a62:	f004 fe35 	bl	80096d0 <f_close>
			return -1;
 8004a66:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6a:	e02c      	b.n	8004ac6 <OTA_CRC_Check+0x12a>
		}
		calc_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buffer, read / 4 + (read % 4 != 0));
 8004a6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a70:	089b      	lsrs	r3, r3, #2
 8004a72:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8004a76:	f002 0203 	and.w	r2, r2, #3
 8004a7a:	2a00      	cmp	r2, #0
 8004a7c:	bf14      	ite	ne
 8004a7e:	2201      	movne	r2, #1
 8004a80:	2200      	moveq	r2, #0
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	441a      	add	r2, r3
 8004a86:	1d3b      	adds	r3, r7, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4817      	ldr	r0, [pc, #92]	@ (8004ae8 <OTA_CRC_Check+0x14c>)
 8004a8c:	f007 f9a0 	bl	800bdd0 <HAL_CRC_Calculate>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
		size -= read;
 8004a96:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8004a9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	while (size > 0)
 8004aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1c1      	bne.n	8004a30 <OTA_CRC_Check+0x94>
	}

	f_close(&sys.OTA_File);
 8004aac:	480c      	ldr	r0, [pc, #48]	@ (8004ae0 <OTA_CRC_Check+0x144>)
 8004aae:	f004 fe0f 	bl	80096d0 <f_close>

	if (calc_crc != ota_crc)
 8004ab2:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 8004ab6:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d002      	beq.n	8004ac4 <OTA_CRC_Check+0x128>
	{
		return -1; // CRC non corrisponde
 8004abe:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac2:	e000      	b.n	8004ac6 <OTA_CRC_Check+0x12a>
	}
	
	return 0; // CRC OK
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	080169dc 	.word	0x080169dc
 8004ad4:	08016a18 	.word	0x08016a18
 8004ad8:	08016a00 	.word	0x08016a00
 8004adc:	080169cc 	.word	0x080169cc
 8004ae0:	20000744 	.word	0x20000744
 8004ae4:	20000740 	.word	0x20000740
 8004ae8:	200002c4 	.word	0x200002c4

08004aec <OTA_Apply>:


/*-----APPLICAZIONE UPDATE-----*/
int OTA_Apply(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b09a      	sub	sp, #104	@ 0x68
 8004af0:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	int32_t result = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t ota_bank = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	uint32_t faddr = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t size = 0;
 8004b06:	2300      	movs	r3, #0
 8004b08:	663b      	str	r3, [r7, #96]	@ 0x60
	uint64_t pword = 0;
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint32_t faddr_off = 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint16_t crc = 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	UINT read = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t PageError = 0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	63bb      	str	r3, [r7, #56]	@ 0x38
	FLASH_EraseInitTypeDef erase_cfg = {0};
 8004b28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	605a      	str	r2, [r3, #4]
 8004b32:	609a      	str	r2, [r3, #8]
 8004b34:	60da      	str	r2, [r3, #12]

	const uint32_t BANKSIZE = FLASH_SIZE >> 1;
 8004b36:	4b69      	ldr	r3, [pc, #420]	@ (8004cdc <OTA_Apply+0x1f0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d006      	beq.n	8004b52 <OTA_Apply+0x66>
 8004b44:	4b65      	ldr	r3, [pc, #404]	@ (8004cdc <OTA_Apply+0x1f0>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	029b      	lsls	r3, r3, #10
 8004b4a:	085a      	lsrs	r2, r3, #1
 8004b4c:	4b64      	ldr	r3, [pc, #400]	@ (8004ce0 <OTA_Apply+0x1f4>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	e001      	b.n	8004b56 <OTA_Apply+0x6a>
 8004b52:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004b56:	64fb      	str	r3, [r7, #76]	@ 0x4c

	FLASH_OBProgramInitTypeDef ob = {0};
 8004b58:	463b      	mov	r3, r7
 8004b5a:	2228      	movs	r2, #40	@ 0x28
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f010 fc5c 	bl	801541c <memset>

	HAL_FLASHEx_OBGetConfig(&ob);
 8004b64:	463b      	mov	r3, r7
 8004b66:	4618      	mov	r0, r3
 8004b68:	f007 ffb0 	bl	800cacc <HAL_FLASHEx_OBGetConfig>

	if ((ob.USERConfig & FLASH_OPTR_DUALBANK) == 0)
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <OTA_Apply+0x90>
	{
		return -1;
 8004b76:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7a:	e0aa      	b.n	8004cd2 <OTA_Apply+0x1e6>
	}

	ota_bank = (ob.USERConfig & FLASH_OPTR_BFB2) ? FLASH_BANK_1 : FLASH_BANK_2;
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <OTA_Apply+0x9e>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <OTA_Apply+0xa0>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

	// L'indirizzo deve essere sempre quello del banco 2 (se fa il boot da BANK2 il BANK1 viene rimappato)
	faddr = FLASH_BASE + BANKSIZE;
 8004b90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b92:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8004b96:	657b      	str	r3, [r7, #84]	@ 0x54

	if (HAL_FLASH_Unlock() != HAL_OK)
 8004b98:	f007 fd6c 	bl	800c674 <HAL_FLASH_Unlock>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <OTA_Apply+0xbc>
	{
		return -1;
 8004ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba6:	e094      	b.n	8004cd2 <OTA_Apply+0x1e6>
	}

	f_close(&sys.OTA_File);
 8004ba8:	484e      	ldr	r0, [pc, #312]	@ (8004ce4 <OTA_Apply+0x1f8>)
 8004baa:	f004 fd91 	bl	80096d0 <f_close>
	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 8004bae:	2201      	movs	r2, #1
 8004bb0:	494d      	ldr	r1, [pc, #308]	@ (8004ce8 <OTA_Apply+0x1fc>)
 8004bb2:	484c      	ldr	r0, [pc, #304]	@ (8004ce4 <OTA_Apply+0x1f8>)
 8004bb4:	f004 f898 	bl	8008ce8 <f_open>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

	if (fRes != FR_OK)
 8004bbe:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <OTA_Apply+0xe2>
	{
		result = -1;
 8004bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bca:	667b      	str	r3, [r7, #100]	@ 0x64
		goto DONE;
 8004bcc:	e07b      	b.n	8004cc6 <OTA_Apply+0x1da>
	}

	if ((size = f_size(&sys.OTA_File)) > BANKSIZE)
 8004bce:	4b47      	ldr	r3, [pc, #284]	@ (8004cec <OTA_Apply+0x200>)
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bd4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d903      	bls.n	8004be4 <OTA_Apply+0xf8>
	{
		result = -1;
 8004bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004be0:	667b      	str	r3, [r7, #100]	@ 0x64
		goto DONE;
 8004be2:	e070      	b.n	8004cc6 <OTA_Apply+0x1da>
	}

	erase_cfg.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8004be4:	2301      	movs	r3, #1
 8004be6:	62bb      	str	r3, [r7, #40]	@ 0x28
	erase_cfg.Banks = ota_bank;
 8004be8:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8004bec:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_FLASHEx_Erase(&erase_cfg, &PageError) != HAL_OK)
 8004bee:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8004bf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f007 fe5d 	bl	800c8b8 <HAL_FLASHEx_Erase>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d026      	beq.n	8004c52 <OTA_Apply+0x166>
	{
		result = -1;
 8004c04:	f04f 33ff 	mov.w	r3, #4294967295
 8004c08:	667b      	str	r3, [r7, #100]	@ 0x64
		goto DONE;
 8004c0a:	e05c      	b.n	8004cc6 <OTA_Apply+0x1da>
	}

	while (size > 0)
	{
		pword = 0;
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		if (f_read(&sys.OTA_File, (uint8_t *)&pword, sizeof(pword), &read) < 0)
 8004c18:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004c1c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8004c20:	2208      	movs	r2, #8
 8004c22:	4830      	ldr	r0, [pc, #192]	@ (8004ce4 <OTA_Apply+0x1f8>)
 8004c24:	f004 f9f8 	bl	8009018 <f_read>
			break;
		if (read == 0)
 8004c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d015      	beq.n	8004c5a <OTA_Apply+0x16e>
			break;
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, faddr + faddr_off, pword) != HAL_OK)
 8004c2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c32:	18d1      	adds	r1, r2, r3
 8004c34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c38:	2000      	movs	r0, #0
 8004c3a:	f007 fcaf 	bl	800c59c <HAL_FLASH_Program>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10c      	bne.n	8004c5e <OTA_Apply+0x172>
			break;
		faddr_off += sizeof(pword);
 8004c44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c46:	3308      	adds	r3, #8
 8004c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
		size -= read;
 8004c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	663b      	str	r3, [r7, #96]	@ 0x60
	while (size > 0)
 8004c52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1d9      	bne.n	8004c0c <OTA_Apply+0x120>
 8004c58:	e002      	b.n	8004c60 <OTA_Apply+0x174>
			break;
 8004c5a:	bf00      	nop
 8004c5c:	e000      	b.n	8004c60 <OTA_Apply+0x174>
			break;
 8004c5e:	bf00      	nop
	}

	if (size > 0)
 8004c60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <OTA_Apply+0x182>
	{
		result = -1;
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6a:	667b      	str	r3, [r7, #100]	@ 0x64
		goto DONE;
 8004c6c:	e02b      	b.n	8004cc6 <OTA_Apply+0x1da>
	}

	HAL_FLASH_Lock();
 8004c6e:	f007 fd23 	bl	800c6b8 <HAL_FLASH_Lock>

	HAL_FLASHEx_OBGetConfig(&ob);
 8004c72:	463b      	mov	r3, r7
 8004c74:	4618      	mov	r0, r3
 8004c76:	f007 ff29 	bl	800cacc <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_Unlock();
 8004c7a:	f007 fcfb 	bl	800c674 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 8004c7e:	f007 fd2b 	bl	800c6d8 <HAL_FLASH_OB_Unlock>

	ob.OptionType = OPTIONBYTE_USER;
 8004c82:	2304      	movs	r3, #4
 8004c84:	603b      	str	r3, [r7, #0]
	ob.USERType = OB_USER_BFB2;
 8004c86:	2380      	movs	r3, #128	@ 0x80
 8004c88:	617b      	str	r3, [r7, #20]
	ob.USERConfig = (ota_bank == FLASH_BANK_2) ? FLASH_OPTR_BFB2 : 0;
 8004c8a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d102      	bne.n	8004c98 <OTA_Apply+0x1ac>
 8004c92:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004c96:	e000      	b.n	8004c9a <OTA_Apply+0x1ae>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_OBProgram(&ob) != HAL_OK)
 8004c9c:	463b      	mov	r3, r7
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f007 fea6 	bl	800c9f0 <HAL_FLASHEx_OBProgram>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <OTA_Apply+0x1ce>
	{
		HAL_FLASH_OB_Lock();
 8004caa:	f007 fd31 	bl	800c710 <HAL_FLASH_OB_Lock>
		HAL_FLASH_Lock();
 8004cae:	f007 fd03 	bl	800c6b8 <HAL_FLASH_Lock>
		result = -1;
 8004cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb6:	667b      	str	r3, [r7, #100]	@ 0x64
		goto DONE;
 8004cb8:	e005      	b.n	8004cc6 <OTA_Apply+0x1da>
	}

	HAL_FLASH_OB_Launch();
 8004cba:	f007 fd39 	bl	800c730 <HAL_FLASH_OB_Launch>
	HAL_FLASH_OB_Lock();
 8004cbe:	f007 fd27 	bl	800c710 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8004cc2:	f007 fcf9 	bl	800c6b8 <HAL_FLASH_Lock>

	DONE:

	f_close(&sys.OTA_File);
 8004cc6:	4807      	ldr	r0, [pc, #28]	@ (8004ce4 <OTA_Apply+0x1f8>)
 8004cc8:	f004 fd02 	bl	80096d0 <f_close>

	HAL_FLASH_Lock();
 8004ccc:	f007 fcf4 	bl	800c6b8 <HAL_FLASH_Lock>

	return result;
 8004cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3768      	adds	r7, #104	@ 0x68
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	1fff75e0 	.word	0x1fff75e0
 8004ce0:	01fffe00 	.word	0x01fffe00
 8004ce4:	20000744 	.word	0x20000744
 8004ce8:	080169cc 	.word	0x080169cc
 8004cec:	20000740 	.word	0x20000740

08004cf0 <Save_Data>:
#include "stdlib.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 8004cf0:	b590      	push	{r4, r7, lr}
 8004cf2:	f2ad 4ddc 	subw	sp, sp, #1244	@ 0x4dc
 8004cf6:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 8004cf8:	4b78      	ldr	r3, [pc, #480]	@ (8004edc <Save_Data+0x1ec>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d037      	beq.n	8004d76 <Save_Data+0x86>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[0], PRESS_HALF_LEN);
 8004d06:	4b76      	ldr	r3, [pc, #472]	@ (8004ee0 <Save_Data+0x1f0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	4b75      	ldr	r3, [pc, #468]	@ (8004ee4 <Save_Data+0x1f4>)
 8004d0e:	4413      	add	r3, r2
 8004d10:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8004d14:	4974      	ldr	r1, [pc, #464]	@ (8004ee8 <Save_Data+0x1f8>)
 8004d16:	4618      	mov	r0, r3
 8004d18:	f010 fc04 	bl	8015524 <memcpy>
		Last_Pressure = 0;
 8004d1c:	4b73      	ldr	r3, [pc, #460]	@ (8004eec <Save_Data+0x1fc>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8004d28:	e00f      	b.n	8004d4a <Save_Data+0x5a>
		{
			Last_Pressure += Pressure[i];
 8004d2a:	4a6f      	ldr	r2, [pc, #444]	@ (8004ee8 <Save_Data+0x1f8>)
 8004d2c:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8004d30:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004d34:	4b6d      	ldr	r3, [pc, #436]	@ (8004eec <Save_Data+0x1fc>)
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	4413      	add	r3, r2
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	4b6b      	ldr	r3, [pc, #428]	@ (8004eec <Save_Data+0x1fc>)
 8004d3e:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 8004d40:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8004d44:	3301      	adds	r3, #1
 8004d46:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8004d4a:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8004d4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d50:	ddeb      	ble.n	8004d2a <Save_Data+0x3a>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8004d52:	4b66      	ldr	r3, [pc, #408]	@ (8004eec <Save_Data+0x1fc>)
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	4a66      	ldr	r2, [pc, #408]	@ (8004ef0 <Save_Data+0x200>)
 8004d58:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5c:	099b      	lsrs	r3, r3, #6
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	4b62      	ldr	r3, [pc, #392]	@ (8004eec <Save_Data+0x1fc>)
 8004d62:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 8004d64:	4860      	ldr	r0, [pc, #384]	@ (8004ee8 <Save_Data+0x1f8>)
 8004d66:	f000 fb41 	bl	80053ec <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 8004d6a:	4a5c      	ldr	r2, [pc, #368]	@ (8004edc <Save_Data+0x1ec>)
 8004d6c:	7813      	ldrb	r3, [r2, #0]
 8004d6e:	f023 0302 	bic.w	r3, r3, #2
 8004d72:	7013      	strb	r3, [r2, #0]
 8004d74:	e03e      	b.n	8004df4 <Save_Data+0x104>
	}
	else if(flags.ADC_Full_Buffer)
 8004d76:	4b59      	ldr	r3, [pc, #356]	@ (8004edc <Save_Data+0x1ec>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d037      	beq.n	8004df4 <Save_Data+0x104>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_HALF_LEN);
 8004d84:	4b56      	ldr	r3, [pc, #344]	@ (8004ee0 <Save_Data+0x1f0>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4b56      	ldr	r3, [pc, #344]	@ (8004ee4 <Save_Data+0x1f4>)
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8004d92:	4958      	ldr	r1, [pc, #352]	@ (8004ef4 <Save_Data+0x204>)
 8004d94:	4618      	mov	r0, r3
 8004d96:	f010 fbc5 	bl	8015524 <memcpy>
		Last_Pressure = 0;
 8004d9a:	4b54      	ldr	r3, [pc, #336]	@ (8004eec <Save_Data+0x1fc>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8004da0:	23c8      	movs	r3, #200	@ 0xc8
 8004da2:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8004da6:	e00f      	b.n	8004dc8 <Save_Data+0xd8>
		{
			Last_Pressure += Pressure[i];
 8004da8:	4a4f      	ldr	r2, [pc, #316]	@ (8004ee8 <Save_Data+0x1f8>)
 8004daa:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8004dae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004db2:	4b4e      	ldr	r3, [pc, #312]	@ (8004eec <Save_Data+0x1fc>)
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	4413      	add	r3, r2
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	4b4c      	ldr	r3, [pc, #304]	@ (8004eec <Save_Data+0x1fc>)
 8004dbc:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 8004dbe:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8004dc8:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8004dcc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004dd0:	dbea      	blt.n	8004da8 <Save_Data+0xb8>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 8004dd2:	4b46      	ldr	r3, [pc, #280]	@ (8004eec <Save_Data+0x1fc>)
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	4a46      	ldr	r2, [pc, #280]	@ (8004ef0 <Save_Data+0x200>)
 8004dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ddc:	099b      	lsrs	r3, r3, #6
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	4b42      	ldr	r3, [pc, #264]	@ (8004eec <Save_Data+0x1fc>)
 8004de2:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 8004de4:	4843      	ldr	r0, [pc, #268]	@ (8004ef4 <Save_Data+0x204>)
 8004de6:	f000 fb01 	bl	80053ec <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 8004dea:	4a3c      	ldr	r2, [pc, #240]	@ (8004edc <Save_Data+0x1ec>)
 8004dec:	7813      	ldrb	r3, [r2, #0]
 8004dee:	f023 0304 	bic.w	r3, r3, #4
 8004df2:	7013      	strb	r3, [r2, #0]
	}
	flags.ADC_Complete = 0;
 8004df4:	4a39      	ldr	r2, [pc, #228]	@ (8004edc <Save_Data+0x1ec>)
 8004df6:	7813      	ldrb	r3, [r2, #0]
 8004df8:	f023 0301 	bic.w	r3, r3, #1
 8004dfc:	7013      	strb	r3, [r2, #0]
	Address_Offset += PRESS_HALF_LEN;
 8004dfe:	4b38      	ldr	r3, [pc, #224]	@ (8004ee0 <Save_Data+0x1f0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8004e06:	4a36      	ldr	r2, [pc, #216]	@ (8004ee0 <Save_Data+0x1f0>)
 8004e08:	6013      	str	r3, [r2, #0]

	memcpy(Saving_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 8004e0a:	4b35      	ldr	r3, [pc, #212]	@ (8004ee0 <Save_Data+0x1f0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	4b34      	ldr	r3, [pc, #208]	@ (8004ee4 <Save_Data+0x1f4>)
 8004e12:	4413      	add	r3, r2
 8004e14:	2228      	movs	r2, #40	@ 0x28
 8004e16:	4938      	ldr	r1, [pc, #224]	@ (8004ef8 <Save_Data+0x208>)
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f010 fb83 	bl	8015524 <memcpy>
	uint8_t current_period_cnt = Period_cnt;
 8004e1e:	4b37      	ldr	r3, [pc, #220]	@ (8004efc <Save_Data+0x20c>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	Last_Volume = 0;
 8004e26:	4b36      	ldr	r3, [pc, #216]	@ (8004f00 <Save_Data+0x210>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8004e32:	e010      	b.n	8004e56 <Save_Data+0x166>
	{
		Last_Volume += Volume_Period[i];
 8004e34:	4a30      	ldr	r2, [pc, #192]	@ (8004ef8 <Save_Data+0x208>)
 8004e36:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8004e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	4b2f      	ldr	r3, [pc, #188]	@ (8004f00 <Save_Data+0x210>)
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	4413      	add	r3, r2
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	4b2d      	ldr	r3, [pc, #180]	@ (8004f00 <Save_Data+0x210>)
 8004e4a:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 8004e4c:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8004e50:	3301      	adds	r3, #1
 8004e52:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8004e56:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8004e5a:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	dbe8      	blt.n	8004e34 <Save_Data+0x144>
	}
	Last_Volume = (uint16_t)(Last_Volume / current_period_cnt);
 8004e62:	4b27      	ldr	r3, [pc, #156]	@ (8004f00 <Save_Data+0x210>)
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8004e6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	4b23      	ldr	r3, [pc, #140]	@ (8004f00 <Save_Data+0x210>)
 8004e74:	801a      	strh	r2, [r3, #0]
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8004e76:	2228      	movs	r2, #40	@ 0x28
 8004e78:	2100      	movs	r1, #0
 8004e7a:	481f      	ldr	r0, [pc, #124]	@ (8004ef8 <Save_Data+0x208>)
 8004e7c:	f010 face 	bl	801541c <memset>
	Period_cnt = 0;
 8004e80:	4b1e      	ldr	r3, [pc, #120]	@ (8004efc <Save_Data+0x20c>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
	Address_Offset += MAX_VOLUME_LEN;
 8004e86:	4b16      	ldr	r3, [pc, #88]	@ (8004ee0 <Save_Data+0x1f0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3328      	adds	r3, #40	@ 0x28
 8004e8c:	4a14      	ldr	r2, [pc, #80]	@ (8004ee0 <Save_Data+0x1f0>)
 8004e8e:	6013      	str	r3, [r2, #0]

	if(sys.ACC_Present)
 8004e90:	4b1c      	ldr	r3, [pc, #112]	@ (8004f04 <Save_Data+0x214>)
 8004e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e96:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80a4 	beq.w	8004fee <Save_Data+0x2fe>
	{
		memcpy(Saving_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 8004ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee0 <Save_Data+0x1f0>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee4 <Save_Data+0x1f4>)
 8004eae:	4413      	add	r3, r2
 8004eb0:	4a15      	ldr	r2, [pc, #84]	@ (8004f08 <Save_Data+0x218>)
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f010 fb32 	bl	8015524 <memcpy>
		Last_Acceleration.x = 0;
 8004ec0:	4b12      	ldr	r3, [pc, #72]	@ (8004f0c <Save_Data+0x21c>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = 0;
 8004ec6:	4b11      	ldr	r3, [pc, #68]	@ (8004f0c <Save_Data+0x21c>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = 0;
 8004ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8004f0c <Save_Data+0x21c>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8004ed8:	e064      	b.n	8004fa4 <Save_Data+0x2b4>
 8004eda:	bf00      	nop
 8004edc:	20001c68 	.word	0x20001c68
 8004ee0:	20004eb0 	.word	0x20004eb0
 8004ee4:	20004780 	.word	0x20004780
 8004ee8:	20003e4c 	.word	0x20003e4c
 8004eec:	2000470c 	.word	0x2000470c
 8004ef0:	51eb851f 	.word	0x51eb851f
 8004ef4:	20003fdc 	.word	0x20003fdc
 8004ef8:	2000416c 	.word	0x2000416c
 8004efc:	20003e48 	.word	0x20003e48
 8004f00:	2000470e 	.word	0x2000470e
 8004f04:	20000740 	.word	0x20000740
 8004f08:	20004194 	.word	0x20004194
 8004f0c:	20004710 	.word	0x20004710
		{
			Last_Acceleration.x += Acceleration[i+1] | (Acceleration[i+2] << 8); 
 8004f10:	4b81      	ldr	r3, [pc, #516]	@ (8005118 <Save_Data+0x428>)
 8004f12:	885a      	ldrh	r2, [r3, #2]
 8004f14:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004f18:	3301      	adds	r3, #1
 8004f1a:	4980      	ldr	r1, [pc, #512]	@ (800511c <Save_Data+0x42c>)
 8004f1c:	5ccb      	ldrb	r3, [r1, r3]
 8004f1e:	b219      	sxth	r1, r3
 8004f20:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004f24:	3302      	adds	r3, #2
 8004f26:	487d      	ldr	r0, [pc, #500]	@ (800511c <Save_Data+0x42c>)
 8004f28:	5cc3      	ldrb	r3, [r0, r3]
 8004f2a:	b21b      	sxth	r3, r3
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	b21b      	sxth	r3, r3
 8004f30:	430b      	orrs	r3, r1
 8004f32:	b21b      	sxth	r3, r3
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	4413      	add	r3, r2
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	4b77      	ldr	r3, [pc, #476]	@ (8005118 <Save_Data+0x428>)
 8004f3c:	805a      	strh	r2, [r3, #2]
			Last_Acceleration.y += Acceleration[i+3] | (Acceleration[i+4] << 8); 
 8004f3e:	4b76      	ldr	r3, [pc, #472]	@ (8005118 <Save_Data+0x428>)
 8004f40:	889a      	ldrh	r2, [r3, #4]
 8004f42:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004f46:	3303      	adds	r3, #3
 8004f48:	4974      	ldr	r1, [pc, #464]	@ (800511c <Save_Data+0x42c>)
 8004f4a:	5ccb      	ldrb	r3, [r1, r3]
 8004f4c:	b219      	sxth	r1, r3
 8004f4e:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004f52:	3304      	adds	r3, #4
 8004f54:	4871      	ldr	r0, [pc, #452]	@ (800511c <Save_Data+0x42c>)
 8004f56:	5cc3      	ldrb	r3, [r0, r3]
 8004f58:	b21b      	sxth	r3, r3
 8004f5a:	021b      	lsls	r3, r3, #8
 8004f5c:	b21b      	sxth	r3, r3
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	b21b      	sxth	r3, r3
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	4b6b      	ldr	r3, [pc, #428]	@ (8005118 <Save_Data+0x428>)
 8004f6a:	809a      	strh	r2, [r3, #4]
			Last_Acceleration.z += Acceleration[i+5] | (Acceleration[i+6] << 8); 
 8004f6c:	4b6a      	ldr	r3, [pc, #424]	@ (8005118 <Save_Data+0x428>)
 8004f6e:	88da      	ldrh	r2, [r3, #6]
 8004f70:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004f74:	3305      	adds	r3, #5
 8004f76:	4969      	ldr	r1, [pc, #420]	@ (800511c <Save_Data+0x42c>)
 8004f78:	5ccb      	ldrb	r3, [r1, r3]
 8004f7a:	b219      	sxth	r1, r3
 8004f7c:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004f80:	3306      	adds	r3, #6
 8004f82:	4866      	ldr	r0, [pc, #408]	@ (800511c <Save_Data+0x42c>)
 8004f84:	5cc3      	ldrb	r3, [r0, r3]
 8004f86:	b21b      	sxth	r3, r3
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	b21b      	sxth	r3, r3
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	b21b      	sxth	r3, r3
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	4b60      	ldr	r3, [pc, #384]	@ (8005118 <Save_Data+0x428>)
 8004f98:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8004f9a:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004f9e:	3307      	adds	r3, #7
 8004fa0:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8004fa4:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8004fa8:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8004fac:	dbb0      	blt.n	8004f10 <Save_Data+0x220>
		}
		Last_Acceleration.x = (uint16_t)(Last_Acceleration.x / (ACCELERATION_LEN / 7));
 8004fae:	4b5a      	ldr	r3, [pc, #360]	@ (8005118 <Save_Data+0x428>)
 8004fb0:	885b      	ldrh	r3, [r3, #2]
 8004fb2:	4a5b      	ldr	r2, [pc, #364]	@ (8005120 <Save_Data+0x430>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	099b      	lsrs	r3, r3, #6
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	4b56      	ldr	r3, [pc, #344]	@ (8005118 <Save_Data+0x428>)
 8004fbe:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = (uint16_t)(Last_Acceleration.y / (ACCELERATION_LEN / 7));
 8004fc0:	4b55      	ldr	r3, [pc, #340]	@ (8005118 <Save_Data+0x428>)
 8004fc2:	889b      	ldrh	r3, [r3, #4]
 8004fc4:	4a56      	ldr	r2, [pc, #344]	@ (8005120 <Save_Data+0x430>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	099b      	lsrs	r3, r3, #6
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	4b52      	ldr	r3, [pc, #328]	@ (8005118 <Save_Data+0x428>)
 8004fd0:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = (uint16_t)(Last_Acceleration.z / (ACCELERATION_LEN / 7));
 8004fd2:	4b51      	ldr	r3, [pc, #324]	@ (8005118 <Save_Data+0x428>)
 8004fd4:	88db      	ldrh	r3, [r3, #6]
 8004fd6:	4a52      	ldr	r2, [pc, #328]	@ (8005120 <Save_Data+0x430>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	099b      	lsrs	r3, r3, #6
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8005118 <Save_Data+0x428>)
 8004fe2:	80da      	strh	r2, [r3, #6]
		flags.ACC_Complete = 0;
 8004fe4:	4a4f      	ldr	r2, [pc, #316]	@ (8005124 <Save_Data+0x434>)
 8004fe6:	7813      	ldrb	r3, [r2, #0]
 8004fe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fec:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += ACCELERATION_LEN;
 8004fee:	4b4e      	ldr	r3, [pc, #312]	@ (8005128 <Save_Data+0x438>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8004ff6:	4a4c      	ldr	r2, [pc, #304]	@ (8005128 <Save_Data+0x438>)
 8004ff8:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 8004ffa:	484c      	ldr	r0, [pc, #304]	@ (800512c <Save_Data+0x43c>)
 8004ffc:	f7fb fc20 	bl	8000840 <INA3221_Read_Measure>
	uint16_t new_temp = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
	if((new_temp = Read_Temperature()) != 0)
 8005006:	f7fb fbc1 	bl	800078c <Read_Temperature>
 800500a:	4603      	mov	r3, r0
 800500c:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
 8005010:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <Save_Data+0x330>
	{
		Temperature = new_temp;
 8005018:	4a45      	ldr	r2, [pc, #276]	@ (8005130 <Save_Data+0x440>)
 800501a:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 800501e:	8013      	strh	r3, [r2, #0]
	}

	uint8_t compressed_data[MAX_COMPRESSED_SIZE];
	Compressed_Sample_Typedef sample;
    sample.compressed_size = Compress_Sample(Saving_Buffer, SAVING_BUFFER_LEN, compressed_data);
 8005020:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8005024:	f2a3 44cc 	subw	r4, r3, #1228	@ 0x4cc
 8005028:	4638      	mov	r0, r7
 800502a:	f107 0314 	add.w	r3, r7, #20
 800502e:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 8005032:	4940      	ldr	r1, [pc, #256]	@ (8005134 <Save_Data+0x444>)
 8005034:	f000 fb3e 	bl	80056b4 <Compress_Sample>
 8005038:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 800503c:	f5a3 629b 	sub.w	r2, r3, #1240	@ 0x4d8
 8005040:	4623      	mov	r3, r4
 8005042:	6810      	ldr	r0, [r2, #0]
 8005044:	6018      	str	r0, [r3, #0]
 8005046:	8892      	ldrh	r2, [r2, #4]
 8005048:	809a      	strh	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800504a:	b672      	cpsid	i
}
 800504c:	bf00      	nop

	__disable_irq();
	RAM_Save_Measure(&sample, compressed_data);
 800504e:	f107 0214 	add.w	r2, r7, #20
 8005052:	f107 030c 	add.w	r3, r7, #12
 8005056:	4611      	mov	r1, r2
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fa2b 	bl	80054b4 <RAM_Save_Measure>
  __ASM volatile ("cpsie i" : : : "memory");
 800505e:	b662      	cpsie	i
}
 8005060:	bf00      	nop
	__enable_irq();

	Address_Offset = 0;
 8005062:	4b31      	ldr	r3, [pc, #196]	@ (8005128 <Save_Data+0x438>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 8005068:	4b2e      	ldr	r3, [pc, #184]	@ (8005124 <Save_Data+0x434>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d106      	bne.n	8005084 <Save_Data+0x394>
 8005076:	4b2b      	ldr	r3, [pc, #172]	@ (8005124 <Save_Data+0x434>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d043      	beq.n	800510c <Save_Data+0x41c>
	{
		Cycles_After_Warning++;
 8005084:	4b2c      	ldr	r3, [pc, #176]	@ (8005138 <Save_Data+0x448>)
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	3301      	adds	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	4b2a      	ldr	r3, [pc, #168]	@ (8005138 <Save_Data+0x448>)
 800508e:	801a      	strh	r2, [r3, #0]
		if(Cycles_After_Warning >= config.buffering_secs * (config.samp_freq / ACC_FIFO_WATERMARK))
 8005090:	4b29      	ldr	r3, [pc, #164]	@ (8005138 <Save_Data+0x448>)
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	4619      	mov	r1, r3
 8005096:	4b29      	ldr	r3, [pc, #164]	@ (800513c <Save_Data+0x44c>)
 8005098:	791b      	ldrb	r3, [r3, #4]
 800509a:	4618      	mov	r0, r3
 800509c:	4b27      	ldr	r3, [pc, #156]	@ (800513c <Save_Data+0x44c>)
 800509e:	885b      	ldrh	r3, [r3, #2]
 80050a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005120 <Save_Data+0x430>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	099b      	lsrs	r3, r3, #6
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	fb00 f303 	mul.w	r3, r0, r3
 80050ae:	4299      	cmp	r1, r3
 80050b0:	db2c      	blt.n	800510c <Save_Data+0x41c>
		{
			if(!flags.CMD.Measure_Request)
 80050b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005124 <Save_Data+0x434>)
 80050b4:	789b      	ldrb	r3, [r3, #2]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d125      	bne.n	800510c <Save_Data+0x41c>
			{
				Switch_Buffer();
 80050c0:	f000 f842 	bl	8005148 <Switch_Buffer>
				flags.CMD.Measure_Request = 1;
 80050c4:	4a17      	ldr	r2, [pc, #92]	@ (8005124 <Save_Data+0x434>)
 80050c6:	7893      	ldrb	r3, [r2, #2]
 80050c8:	f043 0302 	orr.w	r3, r3, #2
 80050cc:	7093      	strb	r3, [r2, #2]
				Send_Measure_Addr = Saved_Bytes;
 80050ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005140 <Save_Data+0x450>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005144 <Save_Data+0x454>)
 80050d4:	6013      	str	r3, [r2, #0]
				Cycles_After_Warning = 0;
 80050d6:	4b18      	ldr	r3, [pc, #96]	@ (8005138 <Save_Data+0x448>)
 80050d8:	2200      	movs	r2, #0
 80050da:	801a      	strh	r2, [r3, #0]
				if(flags.Hammer_Detected)
 80050dc:	4b11      	ldr	r3, [pc, #68]	@ (8005124 <Save_Data+0x434>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d004      	beq.n	80050f4 <Save_Data+0x404>
				{
					flags.Hammer_Detected = 0;
 80050ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005124 <Save_Data+0x434>)
 80050ec:	7813      	ldrb	r3, [r2, #0]
 80050ee:	f023 0308 	bic.w	r3, r3, #8
 80050f2:	7013      	strb	r3, [r2, #0]
				}
				if(flags.Threshold_Detected)
 80050f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <Save_Data+0x434>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d004      	beq.n	800510c <Save_Data+0x41c>
				{
					flags.Threshold_Detected = 0;
 8005102:	4a08      	ldr	r2, [pc, #32]	@ (8005124 <Save_Data+0x434>)
 8005104:	7813      	ldrb	r3, [r2, #0]
 8005106:	f023 0310 	bic.w	r3, r3, #16
 800510a:	7013      	strb	r3, [r2, #0]
				}
			}
		}
	}

}
 800510c:	bf00      	nop
 800510e:	f207 47dc 	addw	r7, r7, #1244	@ 0x4dc
 8005112:	46bd      	mov	sp, r7
 8005114:	bd90      	pop	{r4, r7, pc}
 8005116:	bf00      	nop
 8005118:	20004710 	.word	0x20004710
 800511c:	20004194 	.word	0x20004194
 8005120:	51eb851f 	.word	0x51eb851f
 8005124:	20001c68 	.word	0x20001c68
 8005128:	20004eb0 	.word	0x20004eb0
 800512c:	20003e3c 	.word	0x20003e3c
 8005130:	20004718 	.word	0x20004718
 8005134:	20004780 	.word	0x20004780
 8005138:	20004eb4 	.word	0x20004eb4
 800513c:	20001c6c 	.word	0x20001c6c
 8005140:	20004eb8 	.word	0x20004eb8
 8005144:	20004ec0 	.word	0x20004ec0

08005148 <Switch_Buffer>:

/*-----CAMBIO BUFFER-----*/
void Switch_Buffer(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
    sys.Inactive_RAM_Len = sys.Current_RAM_Len;
 800514c:	4b23      	ldr	r3, [pc, #140]	@ (80051dc <Switch_Buffer+0x94>)
 800514e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005152:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005156:	4a21      	ldr	r2, [pc, #132]	@ (80051dc <Switch_Buffer+0x94>)
 8005158:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800515c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

    if (sys.Active_RAM_Buffer == 0) 
 8005160:	4b1e      	ldr	r3, [pc, #120]	@ (80051dc <Switch_Buffer+0x94>)
 8005162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005166:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d116      	bne.n	800519c <Switch_Buffer+0x54>
	{
		sys.RAM_Buffer_Base_tosend = RAM_SECOND_BUFFER_ADD;
 800516e:	4b1b      	ldr	r3, [pc, #108]	@ (80051dc <Switch_Buffer+0x94>)
 8005170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005174:	461a      	mov	r2, r3
 8005176:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800517a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 1;
 800517e:	4b17      	ldr	r3, [pc, #92]	@ (80051dc <Switch_Buffer+0x94>)
 8005180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005184:	2201      	movs	r2, #1
 8005186:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_SECOND_BUFFER_ADD;
 800518a:	4b14      	ldr	r3, [pc, #80]	@ (80051dc <Switch_Buffer+0x94>)
 800518c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005190:	461a      	mov	r2, r3
 8005192:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005196:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
 800519a:	e013      	b.n	80051c4 <Switch_Buffer+0x7c>
    } 
	else 
	{
		sys.RAM_Buffer_Base_tosend = RAM_FIRST_BUFFER_ADD;
 800519c:	4b0f      	ldr	r3, [pc, #60]	@ (80051dc <Switch_Buffer+0x94>)
 800519e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051a2:	461a      	mov	r2, r3
 80051a4:	2300      	movs	r3, #0
 80051a6:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 0;
 80051aa:	4b0c      	ldr	r3, [pc, #48]	@ (80051dc <Switch_Buffer+0x94>)
 80051ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 80051b6:	4b09      	ldr	r3, [pc, #36]	@ (80051dc <Switch_Buffer+0x94>)
 80051b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051bc:	461a      	mov	r2, r3
 80051be:	2300      	movs	r3, #0
 80051c0:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
    }

    sys.Current_RAM_Len = 0;
 80051c4:	4b05      	ldr	r3, [pc, #20]	@ (80051dc <Switch_Buffer+0x94>)
 80051c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051ca:	461a      	mov	r2, r3
 80051cc:	2300      	movs	r3, #0
 80051ce:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 80051d2:	bf00      	nop
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	20000740 	.word	0x20000740

080051e0 <Erase_RAM_Data>:

/*-----CANCELLAZIONE DATI RAM-----*/
void Erase_RAM_Data(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 80051e6:	af00      	add	r7, sp, #0
	uint8_t zero_buffer[1024] = {0};
 80051e8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80051ec:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80051f0:	4618      	mov	r0, r3
 80051f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051f6:	461a      	mov	r2, r3
 80051f8:	2100      	movs	r1, #0
 80051fa:	f010 f90f 	bl	801541c <memset>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 80051fe:	2300      	movs	r3, #0
 8005200:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005204:	e00d      	b.n	8005222 <Erase_RAM_Data+0x42>
	{
		RAM_Write(addr, sizeof(zero_buffer), zero_buffer);
 8005206:	1d3b      	adds	r3, r7, #4
 8005208:	461a      	mov	r2, r3
 800520a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800520e:	f8d7 0404 	ldr.w	r0, [r7, #1028]	@ 0x404
 8005212:	f001 f9e5 	bl	80065e0 <RAM_Write>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8005216:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 800521a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800521e:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005222:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8005226:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800522a:	d3ec      	bcc.n	8005206 <Erase_RAM_Data+0x26>
	}
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <Start_Measure>:


/*-----AVVIO MISURA-----*/
void Start_Measure(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
	Erase_RAM_Data();
 800523c:	f7ff ffd0 	bl	80051e0 <Erase_RAM_Data>
	sys.RAM_Samples_Number = (config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * 2;
 8005240:	4b4a      	ldr	r3, [pc, #296]	@ (800536c <Start_Measure+0x134>)
 8005242:	885b      	ldrh	r3, [r3, #2]
 8005244:	4a4a      	ldr	r2, [pc, #296]	@ (8005370 <Start_Measure+0x138>)
 8005246:	fba2 2303 	umull	r2, r3, r2, r3
 800524a:	099b      	lsrs	r3, r3, #6
 800524c:	b29b      	uxth	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	4b46      	ldr	r3, [pc, #280]	@ (800536c <Start_Measure+0x134>)
 8005252:	791b      	ldrb	r3, [r3, #4]
 8005254:	fb02 f303 	mul.w	r3, r2, r3
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	461a      	mov	r2, r3
 800525c:	4b45      	ldr	r3, [pc, #276]	@ (8005374 <Start_Measure+0x13c>)
 800525e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005262:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	sys.Active_RAM_Buffer = 0;
 8005266:	4b43      	ldr	r3, [pc, #268]	@ (8005374 <Start_Measure+0x13c>)
 8005268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800526c:	2200      	movs	r2, #0
 800526e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
	sys.Inactive_RAM_Len = 0;
 8005272:	4b40      	ldr	r3, [pc, #256]	@ (8005374 <Start_Measure+0x13c>)
 8005274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005278:	461a      	mov	r2, r3
 800527a:	2300      	movs	r3, #0
 800527c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
	sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8005280:	4b3c      	ldr	r3, [pc, #240]	@ (8005374 <Start_Measure+0x13c>)
 8005282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005286:	461a      	mov	r2, r3
 8005288:	2300      	movs	r3, #0
 800528a:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
	sys.Current_RAM_Len = 0;
 800528e:	4b39      	ldr	r3, [pc, #228]	@ (8005374 <Start_Measure+0x13c>)
 8005290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005294:	461a      	mov	r2, r3
 8005296:	2300      	movs	r3, #0
 8005298:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
	flags.SIM_isConnected = 1;
 800529c:	4a36      	ldr	r2, [pc, #216]	@ (8005378 <Start_Measure+0x140>)
 800529e:	7853      	ldrb	r3, [r2, #1]
 80052a0:	f043 0308 	orr.w	r3, r3, #8
 80052a4:	7053      	strb	r3, [r2, #1]
	memset(Pressure, 0, sizeof(Pressure));
 80052a6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80052aa:	2100      	movs	r1, #0
 80052ac:	4833      	ldr	r0, [pc, #204]	@ (800537c <Start_Measure+0x144>)
 80052ae:	f010 f8b5 	bl	801541c <memset>
	memset(Volume_Period, 0, sizeof(Volume_Period));
 80052b2:	2228      	movs	r2, #40	@ 0x28
 80052b4:	2100      	movs	r1, #0
 80052b6:	4832      	ldr	r0, [pc, #200]	@ (8005380 <Start_Measure+0x148>)
 80052b8:	f010 f8b0 	bl	801541c <memset>
	memset(Acceleration, 0, sizeof(Acceleration));
 80052bc:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 80052c0:	2100      	movs	r1, #0
 80052c2:	4830      	ldr	r0, [pc, #192]	@ (8005384 <Start_Measure+0x14c>)
 80052c4:	f010 f8aa 	bl	801541c <memset>
	memset(&Supply, 0, sizeof(Supply));
 80052c8:	220c      	movs	r2, #12
 80052ca:	2100      	movs	r1, #0
 80052cc:	482e      	ldr	r0, [pc, #184]	@ (8005388 <Start_Measure+0x150>)
 80052ce:	f010 f8a5 	bl	801541c <memset>
	Temperature = 0;
 80052d2:	4b2e      	ldr	r3, [pc, #184]	@ (800538c <Start_Measure+0x154>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	801a      	strh	r2, [r3, #0]
	Saved_Bytes = 0;
 80052d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005390 <Start_Measure+0x158>)
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
	Saved_Samples = 0;
 80052de:	4b2d      	ldr	r3, [pc, #180]	@ (8005394 <Start_Measure+0x15c>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	801a      	strh	r2, [r3, #0]
	Address_Offset = 0;
 80052e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005398 <Start_Measure+0x160>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
	Cycles_After_Warning = 0;
 80052ea:	4b2c      	ldr	r3, [pc, #176]	@ (800539c <Start_Measure+0x164>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	801a      	strh	r2, [r3, #0]
	Clear_Flags();
 80052f0:	f000 ff24 	bl	800613c <Clear_Flags>

	ADC_TIMER->Instance->PSC = 100 - 1;
 80052f4:	4b2a      	ldr	r3, [pc, #168]	@ (80053a0 <Start_Measure+0x168>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2263      	movs	r2, #99	@ 0x63
 80052fa:	629a      	str	r2, [r3, #40]	@ 0x28
	ADC_TIMER->Instance->ARR = (uint32_t)(SystemCoreClock / (ADC_TIMER->Instance->PSC * config.samp_freq)) - 1;
 80052fc:	4b29      	ldr	r3, [pc, #164]	@ (80053a4 <Start_Measure+0x16c>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	4b27      	ldr	r3, [pc, #156]	@ (80053a0 <Start_Measure+0x168>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005306:	4919      	ldr	r1, [pc, #100]	@ (800536c <Start_Measure+0x134>)
 8005308:	8849      	ldrh	r1, [r1, #2]
 800530a:	fb01 f303 	mul.w	r3, r1, r3
 800530e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005312:	4b23      	ldr	r3, [pc, #140]	@ (80053a0 <Start_Measure+0x168>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3a01      	subs	r2, #1
 8005318:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->ARR = (uint32_t)(config.samp_freq / 25) - 1;
 800531a:	4b14      	ldr	r3, [pc, #80]	@ (800536c <Start_Measure+0x134>)
 800531c:	885b      	ldrh	r3, [r3, #2]
 800531e:	4a14      	ldr	r2, [pc, #80]	@ (8005370 <Start_Measure+0x138>)
 8005320:	fba2 2303 	umull	r2, r3, r2, r3
 8005324:	08db      	lsrs	r3, r3, #3
 8005326:	b29b      	uxth	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	4b1f      	ldr	r3, [pc, #124]	@ (80053a8 <Start_Measure+0x170>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3a01      	subs	r2, #1
 8005330:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->CCR3 = (uint32_t)((ACC_TIMER->Instance->ARR + 1) / 2);
 8005332:	4b1d      	ldr	r3, [pc, #116]	@ (80053a8 <Start_Measure+0x170>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	4b1b      	ldr	r3, [pc, #108]	@ (80053a8 <Start_Measure+0x170>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	0852      	lsrs	r2, r2, #1
 8005340:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_IC_Start_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8005342:	2100      	movs	r1, #0
 8005344:	4819      	ldr	r0, [pc, #100]	@ (80053ac <Start_Measure+0x174>)
 8005346:	f00c ffe5 	bl	8012314 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 800534a:	2108      	movs	r1, #8
 800534c:	4816      	ldr	r0, [pc, #88]	@ (80053a8 <Start_Measure+0x170>)
 800534e:	f00c fded 	bl	8011f2c <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 8005352:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005356:	4909      	ldr	r1, [pc, #36]	@ (800537c <Start_Measure+0x144>)
 8005358:	4815      	ldr	r0, [pc, #84]	@ (80053b0 <Start_Measure+0x178>)
 800535a:	f005 fb83 	bl	800aa64 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start_IT(ADC_TIMER, TIM_CHANNEL_3);
 800535e:	2108      	movs	r1, #8
 8005360:	480f      	ldr	r0, [pc, #60]	@ (80053a0 <Start_Measure+0x168>)
 8005362:	f00c fb49 	bl	80119f8 <HAL_TIM_OC_Start_IT>
}
 8005366:	bf00      	nop
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20001c6c 	.word	0x20001c6c
 8005370:	51eb851f 	.word	0x51eb851f
 8005374:	20000740 	.word	0x20000740
 8005378:	20001c68 	.word	0x20001c68
 800537c:	20003e4c 	.word	0x20003e4c
 8005380:	2000416c 	.word	0x2000416c
 8005384:	20004194 	.word	0x20004194
 8005388:	20003e3c 	.word	0x20003e3c
 800538c:	20004718 	.word	0x20004718
 8005390:	20004eb8 	.word	0x20004eb8
 8005394:	20004ebc 	.word	0x20004ebc
 8005398:	20004eb0 	.word	0x20004eb0
 800539c:	20004eb4 	.word	0x20004eb4
 80053a0:	20000550 	.word	0x20000550
 80053a4:	20000168 	.word	0x20000168
 80053a8:	20000504 	.word	0x20000504
 80053ac:	200004b8 	.word	0x200004b8
 80053b0:	20000218 	.word	0x20000218

080053b4 <Stop_Measure>:

/*-----FINE MISURA-----*/
void Stop_Measure(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(PRESSURE_ADC);
 80053b8:	4808      	ldr	r0, [pc, #32]	@ (80053dc <Stop_Measure+0x28>)
 80053ba:	f005 fc0f 	bl	800abdc <HAL_ADC_Stop_DMA>
	HAL_TIM_OC_Stop_IT(ADC_TIMER, TIM_CHANNEL_3);
 80053be:	2108      	movs	r1, #8
 80053c0:	4807      	ldr	r0, [pc, #28]	@ (80053e0 <Stop_Measure+0x2c>)
 80053c2:	f00c fc6d 	bl	8011ca0 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_PWM_Stop(ACC_TIMER, TIM_CHANNEL_3);
 80053c6:	2108      	movs	r1, #8
 80053c8:	4806      	ldr	r0, [pc, #24]	@ (80053e4 <Stop_Measure+0x30>)
 80053ca:	f00c feb5 	bl	8012138 <HAL_TIM_PWM_Stop>
	HAL_TIM_IC_Stop_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 80053ce:	2100      	movs	r1, #0
 80053d0:	4805      	ldr	r0, [pc, #20]	@ (80053e8 <Stop_Measure+0x34>)
 80053d2:	f00d f8e9 	bl	80125a8 <HAL_TIM_IC_Stop_IT>
}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000218 	.word	0x20000218
 80053e0:	20000550 	.word	0x20000550
 80053e4:	20000504 	.word	0x20000504
 80053e8:	200004b8 	.word	0x200004b8

080053ec <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8005400:	2301      	movs	r3, #1
 8005402:	60bb      	str	r3, [r7, #8]
 8005404:	e03a      	b.n	800547c <Warning_Detection+0x90>
	{
		if(Data[i] > max)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4413      	add	r3, r2
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	89fa      	ldrh	r2, [r7, #14]
 8005412:	429a      	cmp	r2, r3
 8005414:	d206      	bcs.n	8005424 <Warning_Detection+0x38>
		{
			max = Data[i];
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	4413      	add	r3, r2
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	81fb      	strh	r3, [r7, #14]
 8005422:	e00d      	b.n	8005440 <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	4413      	add	r3, r2
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	89ba      	ldrh	r2, [r7, #12]
 8005430:	429a      	cmp	r2, r3
 8005432:	d905      	bls.n	8005440 <Warning_Detection+0x54>
		{
			min = Data[i];
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	4413      	add	r3, r2
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	4413      	add	r3, r2
 8005448:	881a      	ldrh	r2, [r3, #0]
 800544a:	4b17      	ldr	r3, [pc, #92]	@ (80054a8 <Warning_Detection+0xbc>)
 800544c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005450:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005452:	429a      	cmp	r2, r3
 8005454:	d30a      	bcc.n	800546c <Warning_Detection+0x80>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	4413      	add	r3, r2
 800545e:	881a      	ldrh	r2, [r3, #0]
 8005460:	4b11      	ldr	r3, [pc, #68]	@ (80054a8 <Warning_Detection+0xbc>)
 8005462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005466:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005468:	429a      	cmp	r2, r3
 800546a:	d904      	bls.n	8005476 <Warning_Detection+0x8a>
		{
			flags.Threshold_Detected= 1;
 800546c:	4a0f      	ldr	r2, [pc, #60]	@ (80054ac <Warning_Detection+0xc0>)
 800546e:	7813      	ldrb	r3, [r2, #0]
 8005470:	f043 0310 	orr.w	r3, r3, #16
 8005474:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	3301      	adds	r3, #1
 800547a:	60bb      	str	r3, [r7, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005480:	ddc1      	ble.n	8005406 <Warning_Detection+0x1a>
		}
	}

	if(max - min >= Hammer_Th)
 8005482:	89fa      	ldrh	r2, [r7, #14]
 8005484:	89bb      	ldrh	r3, [r7, #12]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	4a09      	ldr	r2, [pc, #36]	@ (80054b0 <Warning_Detection+0xc4>)
 800548a:	8812      	ldrh	r2, [r2, #0]
 800548c:	4293      	cmp	r3, r2
 800548e:	db04      	blt.n	800549a <Warning_Detection+0xae>
	{
		flags.Hammer_Detected = 1;
 8005490:	4a06      	ldr	r2, [pc, #24]	@ (80054ac <Warning_Detection+0xc0>)
 8005492:	7813      	ldrb	r3, [r2, #0]
 8005494:	f043 0308 	orr.w	r3, r3, #8
 8005498:	7013      	strb	r3, [r2, #0]
	}

}
 800549a:	bf00      	nop
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	20000740 	.word	0x20000740
 80054ac:	20001c68 	.word	0x20001c68
 80054b0:	20005478 	.word	0x20005478

080054b4 <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(Compressed_Sample_Typedef* sample, uint8_t* compressed_data)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
    uint32_t samples_size = sample->compressed_size.pressure_size +
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	461a      	mov	r2, r3
                            sample->compressed_size.volume_size +
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	885b      	ldrh	r3, [r3, #2]
 80054ca:	b29b      	uxth	r3, r3
    uint32_t samples_size = sample->compressed_size.pressure_size +
 80054cc:	4413      	add	r3, r2
                            sample->compressed_size.acceleration_size;
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	8892      	ldrh	r2, [r2, #4]
 80054d2:	b292      	uxth	r2, r2
                            sample->compressed_size.volume_size +
 80054d4:	4413      	add	r3, r2
    uint32_t samples_size = sample->compressed_size.pressure_size +
 80054d6:	613b      	str	r3, [r7, #16]
    uint32_t total_size = METADATA_SIZE + samples_size;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	3306      	adds	r3, #6
 80054dc:	60fb      	str	r3, [r7, #12]
    uint32_t address = sys.Current_RAM_Base + sys.Current_RAM_Len;
 80054de:	4b23      	ldr	r3, [pc, #140]	@ (800556c <RAM_Save_Measure+0xb8>)
 80054e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054e4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80054e8:	4b20      	ldr	r3, [pc, #128]	@ (800556c <RAM_Save_Measure+0xb8>)
 80054ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80054f2:	4413      	add	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]

	if(Saved_Samples >= sys.RAM_Samples_Number) 
 80054f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005570 <RAM_Save_Measure+0xbc>)
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	4b1b      	ldr	r3, [pc, #108]	@ (800556c <RAM_Save_Measure+0xb8>)
 80054fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005502:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005506:	429a      	cmp	r2, r3
 8005508:	d312      	bcc.n	8005530 <RAM_Save_Measure+0x7c>
	{
		sys.Current_RAM_Len = Saved_Bytes;
 800550a:	4b1a      	ldr	r3, [pc, #104]	@ (8005574 <RAM_Save_Measure+0xc0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a17      	ldr	r2, [pc, #92]	@ (800556c <RAM_Save_Measure+0xb8>)
 8005510:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005514:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
		Saved_Bytes = 0;
 8005518:	4b16      	ldr	r3, [pc, #88]	@ (8005574 <RAM_Save_Measure+0xc0>)
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
		Saved_Samples = 0;
 800551e:	4b14      	ldr	r3, [pc, #80]	@ (8005570 <RAM_Save_Measure+0xbc>)
 8005520:	2200      	movs	r2, #0
 8005522:	801a      	strh	r2, [r3, #0]
		address = sys.Current_RAM_Base;
 8005524:	4b11      	ldr	r3, [pc, #68]	@ (800556c <RAM_Save_Measure+0xb8>)
 8005526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800552a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800552e:	617b      	str	r3, [r7, #20]
    }

	RAM_Write(address, METADATA_SIZE, (uint8_t*)sample);
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	2106      	movs	r1, #6
 8005534:	6978      	ldr	r0, [r7, #20]
 8005536:	f001 f853 	bl	80065e0 <RAM_Write>
    address += METADATA_SIZE;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	3306      	adds	r3, #6
 800553e:	617b      	str	r3, [r7, #20]

	RAM_Write(address, samples_size, compressed_data);
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	6939      	ldr	r1, [r7, #16]
 8005544:	6978      	ldr	r0, [r7, #20]
 8005546:	f001 f84b 	bl	80065e0 <RAM_Write>
    
    Saved_Bytes += total_size;
 800554a:	4b0a      	ldr	r3, [pc, #40]	@ (8005574 <RAM_Save_Measure+0xc0>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	4a08      	ldr	r2, [pc, #32]	@ (8005574 <RAM_Save_Measure+0xc0>)
 8005554:	6013      	str	r3, [r2, #0]
	Saved_Samples++;
 8005556:	4b06      	ldr	r3, [pc, #24]	@ (8005570 <RAM_Save_Measure+0xbc>)
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	4b04      	ldr	r3, [pc, #16]	@ (8005570 <RAM_Save_Measure+0xbc>)
 8005560:	801a      	strh	r2, [r3, #0]
}
 8005562:	bf00      	nop
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000740 	.word	0x20000740
 8005570:	20004ebc 	.word	0x20004ebc
 8005574:	20004eb8 	.word	0x20004eb8

08005578 <Send_Measure_Chunk>:

/*-----INVIO CHUNK MISURA-----*/
uint32_t Send_Measure_Chunk(uint32_t buffer_base, uint32_t buffer_len, uint32_t start_address)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08c      	sub	sp, #48	@ 0x30
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
    uint32_t chunk_fill = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t address = start_address;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t end_address = start_address; // Per fermarsi quando si torna al punto di partenza
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	623b      	str	r3, [r7, #32]
    uint8_t first_loop = 1;
 8005590:	2301      	movs	r3, #1
 8005592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (buffer_len == 0) 
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <Send_Measure_Chunk+0x28>
	{
        return 0;
 800559c:	2300      	movs	r3, #0
 800559e:	e083      	b.n	80056a8 <Send_Measure_Chunk+0x130>
    }

    do {
        // Gestione wrap-around circolare
        if (address >= buffer_base + buffer_len) 
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4413      	add	r3, r2
 80055a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d301      	bcc.n	80055b0 <Send_Measure_Chunk+0x38>
		{
            address = buffer_base;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Controlla se c'è spazio per i metadata
        if ((buffer_base + buffer_len - address) < METADATA_SIZE && address < buffer_base + buffer_len) 
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	441a      	add	r2, r3
 80055b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b05      	cmp	r3, #5
 80055bc:	d805      	bhi.n	80055ca <Send_Measure_Chunk+0x52>
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4413      	add	r3, r2
 80055c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d357      	bcc.n	800567a <Send_Measure_Chunk+0x102>
		{
            break;
        }
        if ((chunk_fill + METADATA_SIZE) > sizeof(tcp_chunk)) 
 80055ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055cc:	3306      	adds	r3, #6
 80055ce:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d853      	bhi.n	800567e <Send_Measure_Chunk+0x106>
            break;
        }

        // Leggi header sample
        Compressed_Sample_Typedef sample_header;
        RAM_Read(address, METADATA_SIZE, (uint8_t*)&sample_header);
 80055d6:	f107 0310 	add.w	r3, r7, #16
 80055da:	461a      	mov	r2, r3
 80055dc:	2106      	movs	r1, #6
 80055de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055e0:	f001 f80f 	bl	8006602 <RAM_Read>

        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 80055e4:	8a3b      	ldrh	r3, [r7, #16]
 80055e6:	461a      	mov	r2, r3
                               sample_header.compressed_size.volume_size +
 80055e8:	8a7b      	ldrh	r3, [r7, #18]
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 80055ea:	4413      	add	r3, r2
                               sample_header.compressed_size.acceleration_size;
 80055ec:	8aba      	ldrh	r2, [r7, #20]
                               sample_header.compressed_size.volume_size +
 80055ee:	4413      	add	r3, r2
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 80055f0:	61fb      	str	r3, [r7, #28]
        uint32_t sample_total_size = METADATA_SIZE + sample_size;
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	3306      	adds	r3, #6
 80055f6:	61bb      	str	r3, [r7, #24]

        if ((chunk_fill + sample_total_size) > sizeof(tcp_chunk)) 
 80055f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	4413      	add	r3, r2
 80055fe:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8005602:	4293      	cmp	r3, r2
 8005604:	d83d      	bhi.n	8005682 <Send_Measure_Chunk+0x10a>
		{
            break;
        }

        RAM_Read(address, METADATA_SIZE, tcp_chunk + chunk_fill);
 8005606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005608:	4a29      	ldr	r2, [pc, #164]	@ (80056b0 <Send_Measure_Chunk+0x138>)
 800560a:	4413      	add	r3, r2
 800560c:	461a      	mov	r2, r3
 800560e:	2106      	movs	r1, #6
 8005610:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005612:	f000 fff6 	bl	8006602 <RAM_Read>
        chunk_fill += METADATA_SIZE;
 8005616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005618:	3306      	adds	r3, #6
 800561a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        address += METADATA_SIZE;
 800561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561e:	3306      	adds	r3, #6
 8005620:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (address >= buffer_base + buffer_len) address = buffer_base;
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4413      	add	r3, r2
 8005628:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800562a:	429a      	cmp	r2, r3
 800562c:	d301      	bcc.n	8005632 <Send_Measure_Chunk+0xba>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	62bb      	str	r3, [r7, #40]	@ 0x28

        RAM_Read(address, sample_size, tcp_chunk + chunk_fill);
 8005632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005634:	4a1e      	ldr	r2, [pc, #120]	@ (80056b0 <Send_Measure_Chunk+0x138>)
 8005636:	4413      	add	r3, r2
 8005638:	461a      	mov	r2, r3
 800563a:	69f9      	ldr	r1, [r7, #28]
 800563c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800563e:	f000 ffe0 	bl	8006602 <RAM_Read>
        chunk_fill += sample_size;
 8005642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	4413      	add	r3, r2
 8005648:	62fb      	str	r3, [r7, #44]	@ 0x2c
        address += sample_size;
 800564a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	4413      	add	r3, r2
 8005650:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (address >= buffer_base + buffer_len) address = buffer_base;
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4413      	add	r3, r2
 8005658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800565a:	429a      	cmp	r2, r3
 800565c:	d301      	bcc.n	8005662 <Send_Measure_Chunk+0xea>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Fermati se hai completato il giro
        if (address == end_address && !first_loop) 
 8005662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	429a      	cmp	r2, r3
 8005668:	d103      	bne.n	8005672 <Send_Measure_Chunk+0xfa>
 800566a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <Send_Measure_Chunk+0x10e>
		{
            break;
        }
        first_loop = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    do {
 8005678:	e792      	b.n	80055a0 <Send_Measure_Chunk+0x28>
            break;
 800567a:	bf00      	nop
 800567c:	e004      	b.n	8005688 <Send_Measure_Chunk+0x110>
            break;
 800567e:	bf00      	nop
 8005680:	e002      	b.n	8005688 <Send_Measure_Chunk+0x110>
            break;
 8005682:	bf00      	nop
 8005684:	e000      	b.n	8005688 <Send_Measure_Chunk+0x110>
            break;
 8005686:	bf00      	nop
    } while (1);

    if (chunk_fill > 0) 
 8005688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <Send_Measure_Chunk+0x122>
	{
        SIM_Send_TCP_Chunk_DMA(tcp_chunk, chunk_fill);
 800568e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005690:	b29b      	uxth	r3, r3
 8005692:	4619      	mov	r1, r3
 8005694:	4806      	ldr	r0, [pc, #24]	@ (80056b0 <Send_Measure_Chunk+0x138>)
 8005696:	f7fc f92b 	bl	80018f0 <SIM_Send_TCP_Chunk_DMA>
    }

    // Se hai completato il giro, ritorna 0
    if (address == end_address) 
 800569a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d101      	bne.n	80056a6 <Send_Measure_Chunk+0x12e>
	{
        return 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	e000      	b.n	80056a8 <Send_Measure_Chunk+0x130>
    }
    return address;
 80056a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3730      	adds	r7, #48	@ 0x30
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20004ec4 	.word	0x20004ec4

080056b4 <Compress_Sample>:

/*-----COMPRESSIONE DATI-----*/
Compressed_Sizes_Typedef Compress_Sample(uint8_t *input, uint16_t input_len, uint8_t *output)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b09c      	sub	sp, #112	@ 0x70
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	80fb      	strh	r3, [r7, #6]
	uint16_t out_idx = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	uint8_t packed_byte = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
	Compressed_Sizes_Typedef sizes = {0, 0, 0};
 80056d0:	2300      	movs	r3, #0
 80056d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80056d4:	2300      	movs	r3, #0
 80056d6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80056d8:	2300      	movs	r3, #0
 80056da:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    AdpcmState_Typedef press_state = {0, 0}, flow_state = {0, 0};
 80056dc:	2300      	movs	r3, #0
 80056de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80056e6:	2300      	movs	r3, #0
 80056e8:	843b      	strh	r3, [r7, #32]
 80056ea:	2300      	movs	r3, #0
 80056ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    AdpcmState_Typedef acc_x_state = {0, 0}, acc_y_state = {0, 0}, acc_z_state = {0, 0};
 80056f0:	2300      	movs	r3, #0
 80056f2:	83bb      	strh	r3, [r7, #28]
 80056f4:	2300      	movs	r3, #0
 80056f6:	77bb      	strb	r3, [r7, #30]
 80056f8:	2300      	movs	r3, #0
 80056fa:	833b      	strh	r3, [r7, #24]
 80056fc:	2300      	movs	r3, #0
 80056fe:	76bb      	strb	r3, [r7, #26]
 8005700:	2300      	movs	r3, #0
 8005702:	82bb      	strh	r3, [r7, #20]
 8005704:	2300      	movs	r3, #0
 8005706:	75bb      	strb	r3, [r7, #22]

	// --- 1. Pressione ---
	uint16_t *adc = (uint16_t*)input;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	653b      	str	r3, [r7, #80]	@ 0x50
	uint16_t pressure_start = out_idx;
 800570c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005710:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

	output[out_idx++] = adc[0] & 0xFF;
 8005714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005716:	881a      	ldrh	r2, [r3, #0]
 8005718:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800571c:	1c59      	adds	r1, r3, #1
 800571e:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 8005722:	4619      	mov	r1, r3
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	440b      	add	r3, r1
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = adc[0] >> 8;
 800572c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	0a1b      	lsrs	r3, r3, #8
 8005732:	b29a      	uxth	r2, r3
 8005734:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005738:	1c59      	adds	r1, r3, #1
 800573a:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 800573e:	4619      	mov	r1, r3
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	440b      	add	r3, r1
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	701a      	strb	r2, [r3, #0]
	press_state.previous_value = adc[0];
 8005748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b21b      	sxth	r3, r3
 800574e:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 8005750:	2301      	movs	r3, #1
 8005752:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005754:	e033      	b.n	80057be <Compress_Sample+0x10a>
	{
		uint8_t nibble = ADPCM_Compression(adc[i], &press_state, step_size_table_12bit);
 8005756:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800575c:	4413      	add	r3, r2
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	b21b      	sxth	r3, r3
 8005762:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8005766:	4a9a      	ldr	r2, [pc, #616]	@ (80059d0 <Compress_Sample+0x31c>)
 8005768:	4618      	mov	r0, r3
 800576a:	f000 f9d1 	bl	8005b10 <ADPCM_Compression>
 800576e:	4603      	mov	r3, r0
 8005770:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		if (i % 2 != 0) 
 8005774:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d004      	beq.n	8005788 <Compress_Sample+0xd4>
		{
			packed_byte = nibble;
 800577e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005782:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8005786:	e017      	b.n	80057b8 <Compress_Sample+0x104>
		} else 
		{
			packed_byte |= (nibble << 4);
 8005788:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	b25a      	sxtb	r2, r3
 8005790:	f997 306d 	ldrsb.w	r3, [r7, #109]	@ 0x6d
 8005794:	4313      	orrs	r3, r2
 8005796:	b25b      	sxtb	r3, r3
 8005798:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
			output[out_idx++] = packed_byte;
 800579c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	f8a7 206e 	strh.w	r2, [r7, #110]	@ 0x6e
 80057a6:	461a      	mov	r2, r3
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	4413      	add	r3, r2
 80057ac:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80057b0:	701a      	strb	r2, [r3, #0]
			packed_byte = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 80057b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057ba:	3301      	adds	r3, #1
 80057bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80057c2:	ddc8      	ble.n	8005756 <Compress_Sample+0xa2>
	if (PRESS_HALF_SAMPLES % 2 != 0) 
	{
		output[out_idx++] = packed_byte;
		packed_byte = 0;
	}
	sizes.pressure_size = out_idx - pressure_start;
 80057c4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80057c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	853b      	strh	r3, [r7, #40]	@ 0x28

	// --- 2. Flusso (RLE) ---
	uint32_t *counter = (uint32_t*)(input + PRESS_HALF_LEN);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80057d8:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint16_t volume_start = out_idx;
 80057da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80057de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	uint32_t prev = counter[0];
 80057e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	667b      	str	r3, [r7, #100]	@ 0x64
	uint16_t run_len = 1;
 80057e8:	2301      	movs	r3, #1
 80057ea:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 80057ee:	2301      	movs	r3, #1
 80057f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057f2:	e058      	b.n	80058a6 <Compress_Sample+0x1f2>
		if (counter[i] == prev && run_len < 255) {
 80057f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057fa:	4413      	add	r3, r2
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005800:	429a      	cmp	r2, r3
 8005802:	d109      	bne.n	8005818 <Compress_Sample+0x164>
 8005804:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005808:	2bfe      	cmp	r3, #254	@ 0xfe
 800580a:	d805      	bhi.n	8005818 <Compress_Sample+0x164>
			run_len++;
 800580c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005810:	3301      	adds	r3, #1
 8005812:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005816:	e043      	b.n	80058a0 <Compress_Sample+0x1ec>
		} else {
			// Scrivi valore e run_len (4 byte valore + 1 byte run_len)
			output[out_idx++] = prev & 0xFF;
 8005818:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	f8a7 206e 	strh.w	r2, [r7, #110]	@ 0x6e
 8005822:	461a      	mov	r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	4413      	add	r3, r2
 8005828:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 8) & 0xFF;
 800582e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005830:	0a1a      	lsrs	r2, r3, #8
 8005832:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005836:	1c59      	adds	r1, r3, #1
 8005838:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 800583c:	4619      	mov	r1, r3
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	440b      	add	r3, r1
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 16) & 0xFF;
 8005846:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005848:	0c1a      	lsrs	r2, r3, #16
 800584a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800584e:	1c59      	adds	r1, r3, #1
 8005850:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 8005854:	4619      	mov	r1, r3
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	440b      	add	r3, r1
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 24) & 0xFF;
 800585e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005860:	0e1a      	lsrs	r2, r3, #24
 8005862:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005866:	1c59      	adds	r1, r3, #1
 8005868:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 800586c:	4619      	mov	r1, r3
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	440b      	add	r3, r1
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = run_len;
 8005876:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	f8a7 206e 	strh.w	r2, [r7, #110]	@ 0x6e
 8005880:	461a      	mov	r2, r3
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	4413      	add	r3, r2
 8005886:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
			prev = counter[i];
 800588e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005894:	4413      	add	r3, r2
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	667b      	str	r3, [r7, #100]	@ 0x64
			run_len = 1;
 800589a:	2301      	movs	r3, #1
 800589c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 80058a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058a2:	3301      	adds	r3, #1
 80058a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058a8:	2b09      	cmp	r3, #9
 80058aa:	dda3      	ble.n	80057f4 <Compress_Sample+0x140>
		}
	}
	// Scrivi l'ultimo run
	output[out_idx++] = prev & 0xFF;
 80058ac:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	f8a7 206e 	strh.w	r2, [r7, #110]	@ 0x6e
 80058b6:	461a      	mov	r2, r3
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	4413      	add	r3, r2
 80058bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 8) & 0xFF;
 80058c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058c4:	0a1a      	lsrs	r2, r3, #8
 80058c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80058ca:	1c59      	adds	r1, r3, #1
 80058cc:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 80058d0:	4619      	mov	r1, r3
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	440b      	add	r3, r1
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 16) & 0xFF;
 80058da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058dc:	0c1a      	lsrs	r2, r3, #16
 80058de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80058e2:	1c59      	adds	r1, r3, #1
 80058e4:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 80058e8:	4619      	mov	r1, r3
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	440b      	add	r3, r1
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 24) & 0xFF;
 80058f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058f4:	0e1a      	lsrs	r2, r3, #24
 80058f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 8005900:	4619      	mov	r1, r3
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	440b      	add	r3, r1
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = run_len;
 800590a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	f8a7 206e 	strh.w	r2, [r7, #110]	@ 0x6e
 8005914:	461a      	mov	r2, r3
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	4413      	add	r3, r2
 800591a:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]

	sizes.volume_size = out_idx - volume_start;
 8005922:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8005926:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	b29b      	uxth	r3, r3
 800592e:	857b      	strh	r3, [r7, #42]	@ 0x2a

	// --- 3. Accelerometro (3 canali separati) ---
	uint8_t *accel = input + PRESS_HALF_LEN + MAX_VOLUME_LEN;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005936:	643b      	str	r3, [r7, #64]	@ 0x40
	uint16_t accel_start = out_idx;
 8005938:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800593c:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	uint16_t x0 = accel[1] | (accel[2] << 8);
 800593e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005940:	3301      	adds	r3, #1
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	b21a      	sxth	r2, r3
 8005946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005948:	3302      	adds	r3, #2
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	b21b      	sxth	r3, r3
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	b21b      	sxth	r3, r3
 8005952:	4313      	orrs	r3, r2
 8005954:	b21b      	sxth	r3, r3
 8005956:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	uint16_t y0 = accel[3] | (accel[4] << 8);
 8005958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800595a:	3303      	adds	r3, #3
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	b21a      	sxth	r2, r3
 8005960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005962:	3304      	adds	r3, #4
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	b21b      	sxth	r3, r3
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	b21b      	sxth	r3, r3
 800596c:	4313      	orrs	r3, r2
 800596e:	b21b      	sxth	r3, r3
 8005970:	877b      	strh	r3, [r7, #58]	@ 0x3a
	uint16_t z0 = accel[5] | (accel[6] << 8);
 8005972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005974:	3305      	adds	r3, #5
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	b21a      	sxth	r2, r3
 800597a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800597c:	3306      	adds	r3, #6
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	b21b      	sxth	r3, r3
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	b21b      	sxth	r3, r3
 8005986:	4313      	orrs	r3, r2
 8005988:	b21b      	sxth	r3, r3
 800598a:	873b      	strh	r3, [r7, #56]	@ 0x38
	acc_x_state.previous_value = x0;
 800598c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8005990:	83bb      	strh	r3, [r7, #28]
	acc_y_state.previous_value = y0;
 8005992:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8005996:	833b      	strh	r3, [r7, #24]
	acc_z_state.previous_value = z0;
 8005998:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800599c:	82bb      	strh	r3, [r7, #20]
	for(int k=0; k<7; ++k) output[out_idx++] = accel[k];
 800599e:	2300      	movs	r3, #0
 80059a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059a2:	e00f      	b.n	80059c4 <Compress_Sample+0x310>
 80059a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059a8:	441a      	add	r2, r3
 80059aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80059ae:	1c59      	adds	r1, r3, #1
 80059b0:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 80059b4:	4619      	mov	r1, r3
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	440b      	add	r3, r1
 80059ba:	7812      	ldrb	r2, [r2, #0]
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059c0:	3301      	adds	r3, #1
 80059c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059c6:	2b06      	cmp	r3, #6
 80059c8:	ddec      	ble.n	80059a4 <Compress_Sample+0x2f0>
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 80059ca:	2301      	movs	r3, #1
 80059cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80059ce:	e087      	b.n	8005ae0 <Compress_Sample+0x42c>
 80059d0:	200000b0 	.word	0x200000b0
	{
		uint16_t x = accel[i*7+1] | (accel[i*7+2] << 8);
 80059d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80059d6:	4613      	mov	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	3301      	adds	r3, #1
 80059de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059e0:	4413      	add	r3, r2
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	b219      	sxth	r1, r3
 80059e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80059e8:	4613      	mov	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	3302      	adds	r3, #2
 80059f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059f2:	4413      	add	r3, r2
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	b21b      	sxth	r3, r3
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	b21b      	sxth	r3, r3
 80059fc:	430b      	orrs	r3, r1
 80059fe:	b21b      	sxth	r3, r3
 8005a00:	86fb      	strh	r3, [r7, #54]	@ 0x36
		uint16_t y = accel[i*7+3] | (accel[i*7+4] << 8);
 8005a02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a04:	4613      	mov	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	3303      	adds	r3, #3
 8005a0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a0e:	4413      	add	r3, r2
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	b219      	sxth	r1, r3
 8005a14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a20:	4413      	add	r3, r2
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	b21b      	sxth	r3, r3
 8005a26:	021b      	lsls	r3, r3, #8
 8005a28:	b21b      	sxth	r3, r3
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	b21b      	sxth	r3, r3
 8005a2e:	86bb      	strh	r3, [r7, #52]	@ 0x34
		uint16_t z = accel[i*7+5] | (accel[i*7+6] << 8);
 8005a30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a32:	4613      	mov	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	3305      	adds	r3, #5
 8005a3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a3c:	4413      	add	r3, r2
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	b219      	sxth	r1, r3
 8005a42:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a44:	4613      	mov	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	1a9b      	subs	r3, r3, r2
 8005a4a:	3306      	adds	r3, #6
 8005a4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a4e:	4413      	add	r3, r2
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	b21b      	sxth	r3, r3
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	b21b      	sxth	r3, r3
 8005a58:	430b      	orrs	r3, r1
 8005a5a:	b21b      	sxth	r3, r3
 8005a5c:	867b      	strh	r3, [r7, #50]	@ 0x32
		uint8_t nibble_x = ADPCM_Compression(x, &acc_x_state, step_size_table_16bit);
 8005a5e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005a62:	f107 011c 	add.w	r1, r7, #28
 8005a66:	4a29      	ldr	r2, [pc, #164]	@ (8005b0c <Compress_Sample+0x458>)
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 f851 	bl	8005b10 <ADPCM_Compression>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		uint8_t nibble_y = ADPCM_Compression(y, &acc_y_state, step_size_table_16bit);
 8005a74:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8005a78:	f107 0118 	add.w	r1, r7, #24
 8005a7c:	4a23      	ldr	r2, [pc, #140]	@ (8005b0c <Compress_Sample+0x458>)
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 f846 	bl	8005b10 <ADPCM_Compression>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		uint8_t nibble_z = ADPCM_Compression(z, &acc_z_state, step_size_table_16bit);
 8005a8a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8005a8e:	f107 0114 	add.w	r1, r7, #20
 8005a92:	4a1e      	ldr	r2, [pc, #120]	@ (8005b0c <Compress_Sample+0x458>)
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 f83b 	bl	8005b10 <ADPCM_Compression>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		output[out_idx++] = nibble_x | (nibble_y << 4);
 8005aa0:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	b25a      	sxtb	r2, r3
 8005aa8:	f997 3031 	ldrsb.w	r3, [r7, #49]	@ 0x31
 8005aac:	4313      	orrs	r3, r2
 8005aae:	b25a      	sxtb	r2, r3
 8005ab0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005ab4:	1c59      	adds	r1, r3, #1
 8005ab6:	f8a7 106e 	strh.w	r1, [r7, #110]	@ 0x6e
 8005aba:	4619      	mov	r1, r3
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	440b      	add	r3, r1
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]
		output[out_idx++] = nibble_z;
 8005ac4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	f8a7 206e 	strh.w	r2, [r7, #110]	@ 0x6e
 8005ace:	461a      	mov	r2, r3
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005ad8:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 8005ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005adc:	3301      	adds	r3, #1
 8005ade:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ae2:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ae4:	f77f af76 	ble.w	80059d4 <Compress_Sample+0x320>
	}
	sizes.acceleration_size = out_idx - accel_start;
 8005ae8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8005aec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	return sizes;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	461a      	mov	r2, r3
 8005af8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005afc:	6818      	ldr	r0, [r3, #0]
 8005afe:	6010      	str	r0, [r2, #0]
 8005b00:	889b      	ldrh	r3, [r3, #4]
 8005b02:	8093      	strh	r3, [r2, #4]
}
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	3770      	adds	r7, #112	@ 0x70
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20000000 	.word	0x20000000

08005b10 <ADPCM_Compression>:

/*-----FUNZIONE DI COMPRESSIONE ADPCM-----*/
uint8_t ADPCM_Compression(int16_t sample, AdpcmState_Typedef* state, uint16_t* step_size_table) 
{
 8005b10:	b480      	push	{r7}
 8005b12:	b08b      	sub	sp, #44	@ 0x2c
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	81fb      	strh	r3, [r7, #14]
    int32_t diff = (int32_t)sample - state->previous_value;
 8005b1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005b28:	1a9b      	subs	r3, r3, r2
 8005b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t step = step_size_table[state->step_index];
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	4413      	add	r3, r2
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	837b      	strh	r3, [r7, #26]
    uint8_t nibble = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if (diff < 0) 
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	da05      	bge.n	8005b54 <ADPCM_Compression+0x44>
	{
        nibble = 8; // Bit di segno
 8005b48:	2308      	movs	r3, #8
 8005b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        diff = -diff;
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	425b      	negs	r3, r3
 8005b52:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calcola il nibble quantizzato
    uint32_t temp = (uint32_t)diff * 4;
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	617b      	str	r3, [r7, #20]
    if (temp < step) 
 8005b5a:	8b7b      	ldrh	r3, [r7, #26]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d312      	bcc.n	8005b88 <ADPCM_Compression+0x78>
	{
        nibble |= 0;
    } 
	else 
	{
        nibble |= (uint8_t)((temp / step > 7) ? 7 : (temp / step));
 8005b62:	8b7b      	ldrh	r3, [r7, #26]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6a:	2b07      	cmp	r3, #7
 8005b6c:	d805      	bhi.n	8005b7a <ADPCM_Compression+0x6a>
 8005b6e:	8b7b      	ldrh	r3, [r7, #26]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b76:	b25b      	sxtb	r3, r3
 8005b78:	e000      	b.n	8005b7c <ADPCM_Compression+0x6c>
 8005b7a:	2307      	movs	r3, #7
 8005b7c:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 8005b80:	4313      	orrs	r3, r2
 8005b82:	b25b      	sxtb	r3, r3
 8005b84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    // Ricostruisci il valore per la predizione successiva (usando solo il nibble)
    int32_t reconstructed_diff = (step * (nibble & 7)) / 4 + step / 8;
 8005b88:	8b7b      	ldrh	r3, [r7, #26]
 8005b8a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005b8e:	f002 0207 	and.w	r2, r2, #7
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	da00      	bge.n	8005b9c <ADPCM_Compression+0x8c>
 8005b9a:	3303      	adds	r3, #3
 8005b9c:	109b      	asrs	r3, r3, #2
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	8b7b      	ldrh	r3, [r7, #26]
 8005ba2:	08db      	lsrs	r3, r3, #3
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	61fb      	str	r3, [r7, #28]
    if (nibble & 8) {
 8005baa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <ADPCM_Compression+0xac>
        reconstructed_diff = -reconstructed_diff;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	425b      	negs	r3, r3
 8005bba:	61fb      	str	r3, [r7, #28]
    }
    
    state->previous_value += reconstructed_diff;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	4413      	add	r3, r2
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	b21a      	sxth	r2, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	801a      	strh	r2, [r3, #0]
    // Clamp del valore predetto
    if (state->previous_value > 32767) state->previous_value = 32767;
    if (state->previous_value < -32768) state->previous_value = -32768;

    // Aggiorna l'indice dello step
    state->step_index += index_adjustment_table[nibble & 7];
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	4910      	ldr	r1, [pc, #64]	@ (8005c24 <ADPCM_Compression+0x114>)
 8005be4:	56cb      	ldrsb	r3, [r1, r3]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	4413      	add	r3, r2
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	b25a      	sxtb	r2, r3
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	709a      	strb	r2, [r3, #2]
    if (state->step_index < 0) state->step_index = 0;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	da02      	bge.n	8005c02 <ADPCM_Compression+0xf2>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	709a      	strb	r2, [r3, #2]
    if (state->step_index > 87) state->step_index = 87;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005c08:	2b57      	cmp	r3, #87	@ 0x57
 8005c0a:	dd02      	ble.n	8005c12 <ADPCM_Compression+0x102>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2257      	movs	r2, #87	@ 0x57
 8005c10:	709a      	strb	r2, [r3, #2]

    return nibble;
 8005c12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	372c      	adds	r7, #44	@ 0x2c
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	20000160 	.word	0x20000160

08005c28 <Apply_Config>:


/*-----APPLICA VALORI CONFIGURAZIONE-----*/
void Apply_Config(void)
{
 8005c28:	b590      	push	{r4, r7, lr}
 8005c2a:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
	FIL config_file;
	UINT bytes_written;
	
	if(strcmp(cfg_var, "DEVICE_ID") == 0) 
 8005c32:	49a8      	ldr	r1, [pc, #672]	@ (8005ed4 <Apply_Config+0x2ac>)
 8005c34:	48a8      	ldr	r0, [pc, #672]	@ (8005ed8 <Apply_Config+0x2b0>)
 8005c36:	f7fa facb 	bl	80001d0 <strcmp>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d107      	bne.n	8005c50 <Apply_Config+0x28>
	{
		config.device_id = (uint8_t)atoi(new_cfg_val);
 8005c40:	48a6      	ldr	r0, [pc, #664]	@ (8005edc <Apply_Config+0x2b4>)
 8005c42:	f00f fb01 	bl	8015248 <atoi>
 8005c46:	4603      	mov	r3, r0
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	4ba5      	ldr	r3, [pc, #660]	@ (8005ee0 <Apply_Config+0x2b8>)
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	e10a      	b.n	8005e66 <Apply_Config+0x23e>
    }
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8005c50:	49a4      	ldr	r1, [pc, #656]	@ (8005ee4 <Apply_Config+0x2bc>)
 8005c52:	48a1      	ldr	r0, [pc, #644]	@ (8005ed8 <Apply_Config+0x2b0>)
 8005c54:	f7fa fabc 	bl	80001d0 <strcmp>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d132      	bne.n	8005cc4 <Apply_Config+0x9c>
	{
		if((uint16_t)atoi(new_cfg_val) != 800 && (uint16_t)atoi(new_cfg_val) != 1600)
 8005c5e:	489f      	ldr	r0, [pc, #636]	@ (8005edc <Apply_Config+0x2b4>)
 8005c60:	f00f faf2 	bl	8015248 <atoi>
 8005c64:	4603      	mov	r3, r0
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8005c6c:	d008      	beq.n	8005c80 <Apply_Config+0x58>
 8005c6e:	489b      	ldr	r0, [pc, #620]	@ (8005edc <Apply_Config+0x2b4>)
 8005c70:	f00f faea 	bl	8015248 <atoi>
 8005c74:	4603      	mov	r3, r0
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005c7c:	f040 811d 	bne.w	8005eba <Apply_Config+0x292>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 8005c80:	4b97      	ldr	r3, [pc, #604]	@ (8005ee0 <Apply_Config+0x2b8>)
 8005c82:	885b      	ldrh	r3, [r3, #2]
 8005c84:	4a98      	ldr	r2, [pc, #608]	@ (8005ee8 <Apply_Config+0x2c0>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	099b      	lsrs	r3, r3, #6
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	461a      	mov	r2, r3
 8005c90:	4b93      	ldr	r3, [pc, #588]	@ (8005ee0 <Apply_Config+0x2b8>)
 8005c92:	791b      	ldrb	r3, [r3, #4]
 8005c94:	fb02 f303 	mul.w	r3, r2, r3
 8005c98:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005c9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ca0:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	461c      	mov	r4, r3
 8005ca8:	f000 fcde 	bl	8006668 <psram_get_size>
 8005cac:	4603      	mov	r3, r0
 8005cae:	429c      	cmp	r4, r3
 8005cb0:	f240 80d9 	bls.w	8005e66 <Apply_Config+0x23e>
			{
				config.samp_freq = (uint16_t)atoi(new_cfg_val);
 8005cb4:	4889      	ldr	r0, [pc, #548]	@ (8005edc <Apply_Config+0x2b4>)
 8005cb6:	f00f fac7 	bl	8015248 <atoi>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	4b88      	ldr	r3, [pc, #544]	@ (8005ee0 <Apply_Config+0x2b8>)
 8005cc0:	805a      	strh	r2, [r3, #2]
 8005cc2:	e0d0      	b.n	8005e66 <Apply_Config+0x23e>
			}
		}
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8005cc4:	4989      	ldr	r1, [pc, #548]	@ (8005eec <Apply_Config+0x2c4>)
 8005cc6:	4884      	ldr	r0, [pc, #528]	@ (8005ed8 <Apply_Config+0x2b0>)
 8005cc8:	f7fa fa82 	bl	80001d0 <strcmp>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d131      	bne.n	8005d36 <Apply_Config+0x10e>
	{
		if((uint8_t)atoi(new_cfg_val) < 5 || (uint8_t)atoi(new_cfg_val) > 30)
 8005cd2:	4882      	ldr	r0, [pc, #520]	@ (8005edc <Apply_Config+0x2b4>)
 8005cd4:	f00f fab8 	bl	8015248 <atoi>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	f240 80ee 	bls.w	8005ebe <Apply_Config+0x296>
 8005ce2:	487e      	ldr	r0, [pc, #504]	@ (8005edc <Apply_Config+0x2b4>)
 8005ce4:	f00f fab0 	bl	8015248 <atoi>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b1e      	cmp	r3, #30
 8005cee:	f200 80e6 	bhi.w	8005ebe <Apply_Config+0x296>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 8005cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8005ee0 <Apply_Config+0x2b8>)
 8005cf4:	885b      	ldrh	r3, [r3, #2]
 8005cf6:	4a7c      	ldr	r2, [pc, #496]	@ (8005ee8 <Apply_Config+0x2c0>)
 8005cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfc:	099b      	lsrs	r3, r3, #6
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	461a      	mov	r2, r3
 8005d02:	4b77      	ldr	r3, [pc, #476]	@ (8005ee0 <Apply_Config+0x2b8>)
 8005d04:	791b      	ldrb	r3, [r3, #4]
 8005d06:	fb02 f303 	mul.w	r3, r2, r3
 8005d0a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005d0e:	fb02 f303 	mul.w	r3, r2, r3
 8005d12:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	461c      	mov	r4, r3
 8005d1a:	f000 fca5 	bl	8006668 <psram_get_size>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	429c      	cmp	r4, r3
 8005d22:	f240 80a0 	bls.w	8005e66 <Apply_Config+0x23e>
			{
				config.buffering_secs = (uint8_t)atoi(new_cfg_val);
 8005d26:	486d      	ldr	r0, [pc, #436]	@ (8005edc <Apply_Config+0x2b4>)
 8005d28:	f00f fa8e 	bl	8015248 <atoi>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	4b6b      	ldr	r3, [pc, #428]	@ (8005ee0 <Apply_Config+0x2b8>)
 8005d32:	711a      	strb	r2, [r3, #4]
 8005d34:	e097      	b.n	8005e66 <Apply_Config+0x23e>
			}
		}
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8005d36:	496e      	ldr	r1, [pc, #440]	@ (8005ef0 <Apply_Config+0x2c8>)
 8005d38:	4867      	ldr	r0, [pc, #412]	@ (8005ed8 <Apply_Config+0x2b0>)
 8005d3a:	f7fa fa49 	bl	80001d0 <strcmp>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d107      	bne.n	8005d54 <Apply_Config+0x12c>
	{
		config.hammer_th = (uint16_t)atoi(new_cfg_val);
 8005d44:	4865      	ldr	r0, [pc, #404]	@ (8005edc <Apply_Config+0x2b4>)
 8005d46:	f00f fa7f 	bl	8015248 <atoi>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	4b64      	ldr	r3, [pc, #400]	@ (8005ee0 <Apply_Config+0x2b8>)
 8005d50:	80da      	strh	r2, [r3, #6]
 8005d52:	e088      	b.n	8005e66 <Apply_Config+0x23e>
	}
    else if(strcmp(cfg_var, "HIGH_TH") == 0) 
 8005d54:	4967      	ldr	r1, [pc, #412]	@ (8005ef4 <Apply_Config+0x2cc>)
 8005d56:	4860      	ldr	r0, [pc, #384]	@ (8005ed8 <Apply_Config+0x2b0>)
 8005d58:	f7fa fa3a 	bl	80001d0 <strcmp>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d113      	bne.n	8005d8a <Apply_Config+0x162>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8005d62:	4b65      	ldr	r3, [pc, #404]	@ (8005ef8 <Apply_Config+0x2d0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	db7d      	blt.n	8005e66 <Apply_Config+0x23e>
 8005d6a:	4b63      	ldr	r3, [pc, #396]	@ (8005ef8 <Apply_Config+0x2d0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b17      	cmp	r3, #23
 8005d70:	dc79      	bgt.n	8005e66 <Apply_Config+0x23e>
		{
            config.high_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8005d72:	485a      	ldr	r0, [pc, #360]	@ (8005edc <Apply_Config+0x2b4>)
 8005d74:	f00f fa68 	bl	8015248 <atoi>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8005ef8 <Apply_Config+0x2d0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	b291      	uxth	r1, r2
 8005d80:	4a57      	ldr	r2, [pc, #348]	@ (8005ee0 <Apply_Config+0x2b8>)
 8005d82:	331c      	adds	r3, #28
 8005d84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005d88:	e06d      	b.n	8005e66 <Apply_Config+0x23e>
        }
    }
    else if(strcmp(cfg_var, "LOW_TH") == 0) 
 8005d8a:	495c      	ldr	r1, [pc, #368]	@ (8005efc <Apply_Config+0x2d4>)
 8005d8c:	4852      	ldr	r0, [pc, #328]	@ (8005ed8 <Apply_Config+0x2b0>)
 8005d8e:	f7fa fa1f 	bl	80001d0 <strcmp>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d113      	bne.n	8005dc0 <Apply_Config+0x198>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8005d98:	4b57      	ldr	r3, [pc, #348]	@ (8005ef8 <Apply_Config+0x2d0>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	db62      	blt.n	8005e66 <Apply_Config+0x23e>
 8005da0:	4b55      	ldr	r3, [pc, #340]	@ (8005ef8 <Apply_Config+0x2d0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b17      	cmp	r3, #23
 8005da6:	dc5e      	bgt.n	8005e66 <Apply_Config+0x23e>
		{
            config.low_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8005da8:	484c      	ldr	r0, [pc, #304]	@ (8005edc <Apply_Config+0x2b4>)
 8005daa:	f00f fa4d 	bl	8015248 <atoi>
 8005dae:	4602      	mov	r2, r0
 8005db0:	4b51      	ldr	r3, [pc, #324]	@ (8005ef8 <Apply_Config+0x2d0>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	b291      	uxth	r1, r2
 8005db6:	4a4a      	ldr	r2, [pc, #296]	@ (8005ee0 <Apply_Config+0x2b8>)
 8005db8:	3304      	adds	r3, #4
 8005dba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005dbe:	e052      	b.n	8005e66 <Apply_Config+0x23e>
        }
    }
    else if(strcmp(cfg_var, "DATA_TOPIC") == 0) 
 8005dc0:	494f      	ldr	r1, [pc, #316]	@ (8005f00 <Apply_Config+0x2d8>)
 8005dc2:	4845      	ldr	r0, [pc, #276]	@ (8005ed8 <Apply_Config+0x2b0>)
 8005dc4:	f7fa fa04 	bl	80001d0 <strcmp>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10d      	bne.n	8005dea <Apply_Config+0x1c2>
	{
        strncpy(config.data_topic, new_cfg_val, sizeof(config.data_topic) - 1);
 8005dce:	223f      	movs	r2, #63	@ 0x3f
 8005dd0:	4942      	ldr	r1, [pc, #264]	@ (8005edc <Apply_Config+0x2b4>)
 8005dd2:	484c      	ldr	r0, [pc, #304]	@ (8005f04 <Apply_Config+0x2dc>)
 8005dd4:	f00f fb49 	bl	801546a <strncpy>
        config.data_topic[sizeof(config.data_topic) - 1] = '\0';
 8005dd8:	4b41      	ldr	r3, [pc, #260]	@ (8005ee0 <Apply_Config+0x2b8>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
		strcpy(sys.MQTT.Data_Topic, config.data_topic);
 8005de0:	4948      	ldr	r1, [pc, #288]	@ (8005f04 <Apply_Config+0x2dc>)
 8005de2:	4849      	ldr	r0, [pc, #292]	@ (8005f08 <Apply_Config+0x2e0>)
 8005de4:	f00f fb96 	bl	8015514 <strcpy>
 8005de8:	e03d      	b.n	8005e66 <Apply_Config+0x23e>
    }
    else if(strcmp(cfg_var, "CMD_TOPIC") == 0) 
 8005dea:	4948      	ldr	r1, [pc, #288]	@ (8005f0c <Apply_Config+0x2e4>)
 8005dec:	483a      	ldr	r0, [pc, #232]	@ (8005ed8 <Apply_Config+0x2b0>)
 8005dee:	f7fa f9ef 	bl	80001d0 <strcmp>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10d      	bne.n	8005e14 <Apply_Config+0x1ec>
	{
        strncpy(config.command_topic, new_cfg_val, sizeof(config.command_topic) - 1);
 8005df8:	223f      	movs	r2, #63	@ 0x3f
 8005dfa:	4938      	ldr	r1, [pc, #224]	@ (8005edc <Apply_Config+0x2b4>)
 8005dfc:	4844      	ldr	r0, [pc, #272]	@ (8005f10 <Apply_Config+0x2e8>)
 8005dfe:	f00f fb34 	bl	801546a <strncpy>
        config.command_topic[sizeof(config.command_topic) - 1] = '\0';
 8005e02:	4b37      	ldr	r3, [pc, #220]	@ (8005ee0 <Apply_Config+0x2b8>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7
		strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8005e0a:	4941      	ldr	r1, [pc, #260]	@ (8005f10 <Apply_Config+0x2e8>)
 8005e0c:	4841      	ldr	r0, [pc, #260]	@ (8005f14 <Apply_Config+0x2ec>)
 8005e0e:	f00f fb81 	bl	8015514 <strcpy>
 8005e12:	e028      	b.n	8005e66 <Apply_Config+0x23e>
    }
	else if(strcmp(cfg_var, "INFO_TOPIC") == 0)
 8005e14:	4940      	ldr	r1, [pc, #256]	@ (8005f18 <Apply_Config+0x2f0>)
 8005e16:	4830      	ldr	r0, [pc, #192]	@ (8005ed8 <Apply_Config+0x2b0>)
 8005e18:	f7fa f9da 	bl	80001d0 <strcmp>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10d      	bne.n	8005e3e <Apply_Config+0x216>
	{
		strncpy(config.info_topic, new_cfg_val, sizeof(config.info_topic) - 1);
 8005e22:	223f      	movs	r2, #63	@ 0x3f
 8005e24:	492d      	ldr	r1, [pc, #180]	@ (8005edc <Apply_Config+0x2b4>)
 8005e26:	483d      	ldr	r0, [pc, #244]	@ (8005f1c <Apply_Config+0x2f4>)
 8005e28:	f00f fb1f 	bl	801546a <strncpy>
		config.info_topic[sizeof(config.info_topic) - 1] = '\0';
 8005e2c:	4b2c      	ldr	r3, [pc, #176]	@ (8005ee0 <Apply_Config+0x2b8>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2167 	strb.w	r2, [r3, #359]	@ 0x167
		strcpy(sys.MQTT.Info_Topic, config.info_topic);
 8005e34:	4939      	ldr	r1, [pc, #228]	@ (8005f1c <Apply_Config+0x2f4>)
 8005e36:	483a      	ldr	r0, [pc, #232]	@ (8005f20 <Apply_Config+0x2f8>)
 8005e38:	f00f fb6c 	bl	8015514 <strcpy>
 8005e3c:	e013      	b.n	8005e66 <Apply_Config+0x23e>
	}
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 8005e3e:	4939      	ldr	r1, [pc, #228]	@ (8005f24 <Apply_Config+0x2fc>)
 8005e40:	4825      	ldr	r0, [pc, #148]	@ (8005ed8 <Apply_Config+0x2b0>)
 8005e42:	f7fa f9c5 	bl	80001d0 <strcmp>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d13a      	bne.n	8005ec2 <Apply_Config+0x29a>
	{
		strncpy(config.ota_topic, new_cfg_val, sizeof(config.ota_topic) - 1);
 8005e4c:	223f      	movs	r2, #63	@ 0x3f
 8005e4e:	4923      	ldr	r1, [pc, #140]	@ (8005edc <Apply_Config+0x2b4>)
 8005e50:	4835      	ldr	r0, [pc, #212]	@ (8005f28 <Apply_Config+0x300>)
 8005e52:	f00f fb0a 	bl	801546a <strncpy>
		config.ota_topic[sizeof(config.ota_topic) - 1] = '\0';
 8005e56:	4b22      	ldr	r3, [pc, #136]	@ (8005ee0 <Apply_Config+0x2b8>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
		strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8005e5e:	4932      	ldr	r1, [pc, #200]	@ (8005f28 <Apply_Config+0x300>)
 8005e60:	4832      	ldr	r0, [pc, #200]	@ (8005f2c <Apply_Config+0x304>)
 8005e62:	f00f fb57 	bl	8015514 <strcpy>
	else
	{
		return;
	}

	if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 8005e66:	f107 0310 	add.w	r3, r7, #16
 8005e6a:	3b08      	subs	r3, #8
 8005e6c:	220a      	movs	r2, #10
 8005e6e:	4930      	ldr	r1, [pc, #192]	@ (8005f30 <Apply_Config+0x308>)
 8005e70:	4618      	mov	r0, r3
 8005e72:	f002 ff39 	bl	8008ce8 <f_open>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d124      	bne.n	8005ec6 <Apply_Config+0x29e>
	{
		f_write(&config_file, &config, sizeof(config), &bytes_written);
 8005e7c:	f107 0310 	add.w	r3, r7, #16
 8005e80:	3b0c      	subs	r3, #12
 8005e82:	f107 0010 	add.w	r0, r7, #16
 8005e86:	3808      	subs	r0, #8
 8005e88:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8005e8c:	4914      	ldr	r1, [pc, #80]	@ (8005ee0 <Apply_Config+0x2b8>)
 8005e8e:	f003 fa16 	bl	80092be <f_write>
		f_close(&config_file);
 8005e92:	f107 0310 	add.w	r3, r7, #16
 8005e96:	3b08      	subs	r3, #8
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f003 fc19 	bl	80096d0 <f_close>
	else
	{
		return;
	}
	
	memset(cfg_var, 0, sizeof(cfg_var));
 8005e9e:	2214      	movs	r2, #20
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	480d      	ldr	r0, [pc, #52]	@ (8005ed8 <Apply_Config+0x2b0>)
 8005ea4:	f00f faba 	bl	801541c <memset>
	cfg_idx = 0;
 8005ea8:	4b13      	ldr	r3, [pc, #76]	@ (8005ef8 <Apply_Config+0x2d0>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8005eae:	220a      	movs	r2, #10
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	480a      	ldr	r0, [pc, #40]	@ (8005edc <Apply_Config+0x2b4>)
 8005eb4:	f00f fab2 	bl	801541c <memset>
 8005eb8:	e006      	b.n	8005ec8 <Apply_Config+0x2a0>
			return;
 8005eba:	bf00      	nop
 8005ebc:	e004      	b.n	8005ec8 <Apply_Config+0x2a0>
			return;
 8005ebe:	bf00      	nop
 8005ec0:	e002      	b.n	8005ec8 <Apply_Config+0x2a0>
		return;
 8005ec2:	bf00      	nop
 8005ec4:	e000      	b.n	8005ec8 <Apply_Config+0x2a0>
		return;
 8005ec6:	bf00      	nop
}
 8005ec8:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd90      	pop	{r4, r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	08016a2c 	.word	0x08016a2c
 8005ed8:	20005cbc 	.word	0x20005cbc
 8005edc:	20005cd4 	.word	0x20005cd4
 8005ee0:	20001c6c 	.word	0x20001c6c
 8005ee4:	08016a38 	.word	0x08016a38
 8005ee8:	51eb851f 	.word	0x51eb851f
 8005eec:	08016a44 	.word	0x08016a44
 8005ef0:	08016a50 	.word	0x08016a50
 8005ef4:	08016a5c 	.word	0x08016a5c
 8005ef8:	20005cd0 	.word	0x20005cd0
 8005efc:	08016a64 	.word	0x08016a64
 8005f00:	08016a6c 	.word	0x08016a6c
 8005f04:	20001cd4 	.word	0x20001cd4
 8005f08:	20001a10 	.word	0x20001a10
 8005f0c:	08016a78 	.word	0x08016a78
 8005f10:	20001d14 	.word	0x20001d14
 8005f14:	20001a74 	.word	0x20001a74
 8005f18:	08016a84 	.word	0x08016a84
 8005f1c:	20001d94 	.word	0x20001d94
 8005f20:	20001b3c 	.word	0x20001b3c
 8005f24:	08016a90 	.word	0x08016a90
 8005f28:	20001d54 	.word	0x20001d54
 8005f2c:	20001ad8 	.word	0x20001ad8
 8005f30:	08016a9c 	.word	0x08016a9c

08005f34 <Get_Config>:

/*-----RECUPERO E INVIO VALORE DI CONFIGURAZIONE-----*/
void Get_Config(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b0a2      	sub	sp, #136	@ 0x88
 8005f38:	af00      	add	r7, sp, #0
	char value_str[128] = {0};
 8005f3a:	1d3b      	adds	r3, r7, #4
 8005f3c:	2280      	movs	r2, #128	@ 0x80
 8005f3e:	2100      	movs	r1, #0
 8005f40:	4618      	mov	r0, r3
 8005f42:	f00f fa6b 	bl	801541c <memset>
	const char* topic = sys.MQTT.Info_Topic;
 8005f46:	4b68      	ldr	r3, [pc, #416]	@ (80060e8 <Get_Config+0x1b4>)
 8005f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	if(strcmp(cfg_var, "DEVICE_ID") == 0)
 8005f4c:	4967      	ldr	r1, [pc, #412]	@ (80060ec <Get_Config+0x1b8>)
 8005f4e:	4868      	ldr	r0, [pc, #416]	@ (80060f0 <Get_Config+0x1bc>)
 8005f50:	f7fa f93e 	bl	80001d0 <strcmp>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d108      	bne.n	8005f6c <Get_Config+0x38>
	{
		sprintf(value_str, "%u", config.device_id);
 8005f5a:	4b66      	ldr	r3, [pc, #408]	@ (80060f4 <Get_Config+0x1c0>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	1d3b      	adds	r3, r7, #4
 8005f62:	4965      	ldr	r1, [pc, #404]	@ (80060f8 <Get_Config+0x1c4>)
 8005f64:	4618      	mov	r0, r3
 8005f66:	f00f f9f9 	bl	801535c <siprintf>
 8005f6a:	e0a5      	b.n	80060b8 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8005f6c:	4963      	ldr	r1, [pc, #396]	@ (80060fc <Get_Config+0x1c8>)
 8005f6e:	4860      	ldr	r0, [pc, #384]	@ (80060f0 <Get_Config+0x1bc>)
 8005f70:	f7fa f92e 	bl	80001d0 <strcmp>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d108      	bne.n	8005f8c <Get_Config+0x58>
	{
		sprintf(value_str, "%u", config.samp_freq);
 8005f7a:	4b5e      	ldr	r3, [pc, #376]	@ (80060f4 <Get_Config+0x1c0>)
 8005f7c:	885b      	ldrh	r3, [r3, #2]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	1d3b      	adds	r3, r7, #4
 8005f82:	495d      	ldr	r1, [pc, #372]	@ (80060f8 <Get_Config+0x1c4>)
 8005f84:	4618      	mov	r0, r3
 8005f86:	f00f f9e9 	bl	801535c <siprintf>
 8005f8a:	e095      	b.n	80060b8 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8005f8c:	495c      	ldr	r1, [pc, #368]	@ (8006100 <Get_Config+0x1cc>)
 8005f8e:	4858      	ldr	r0, [pc, #352]	@ (80060f0 <Get_Config+0x1bc>)
 8005f90:	f7fa f91e 	bl	80001d0 <strcmp>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d108      	bne.n	8005fac <Get_Config+0x78>
	{
		sprintf(value_str, "%u", config.buffering_secs);
 8005f9a:	4b56      	ldr	r3, [pc, #344]	@ (80060f4 <Get_Config+0x1c0>)
 8005f9c:	791b      	ldrb	r3, [r3, #4]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	1d3b      	adds	r3, r7, #4
 8005fa2:	4955      	ldr	r1, [pc, #340]	@ (80060f8 <Get_Config+0x1c4>)
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f00f f9d9 	bl	801535c <siprintf>
 8005faa:	e085      	b.n	80060b8 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8005fac:	4955      	ldr	r1, [pc, #340]	@ (8006104 <Get_Config+0x1d0>)
 8005fae:	4850      	ldr	r0, [pc, #320]	@ (80060f0 <Get_Config+0x1bc>)
 8005fb0:	f7fa f90e 	bl	80001d0 <strcmp>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d108      	bne.n	8005fcc <Get_Config+0x98>
	{
		sprintf(value_str, "%u", config.hammer_th);
 8005fba:	4b4e      	ldr	r3, [pc, #312]	@ (80060f4 <Get_Config+0x1c0>)
 8005fbc:	88db      	ldrh	r3, [r3, #6]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	1d3b      	adds	r3, r7, #4
 8005fc2:	494d      	ldr	r1, [pc, #308]	@ (80060f8 <Get_Config+0x1c4>)
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f00f f9c9 	bl	801535c <siprintf>
 8005fca:	e075      	b.n	80060b8 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "HIGH_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8005fcc:	494e      	ldr	r1, [pc, #312]	@ (8006108 <Get_Config+0x1d4>)
 8005fce:	4848      	ldr	r0, [pc, #288]	@ (80060f0 <Get_Config+0x1bc>)
 8005fd0:	f7fa f8fe 	bl	80001d0 <strcmp>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d114      	bne.n	8006004 <Get_Config+0xd0>
 8005fda:	4b4c      	ldr	r3, [pc, #304]	@ (800610c <Get_Config+0x1d8>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	db10      	blt.n	8006004 <Get_Config+0xd0>
 8005fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800610c <Get_Config+0x1d8>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b17      	cmp	r3, #23
 8005fe8:	dc0c      	bgt.n	8006004 <Get_Config+0xd0>
	{
		sprintf(value_str, "%u", config.high_th[cfg_idx]);
 8005fea:	4b48      	ldr	r3, [pc, #288]	@ (800610c <Get_Config+0x1d8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a41      	ldr	r2, [pc, #260]	@ (80060f4 <Get_Config+0x1c0>)
 8005ff0:	331c      	adds	r3, #28
 8005ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	1d3b      	adds	r3, r7, #4
 8005ffa:	493f      	ldr	r1, [pc, #252]	@ (80060f8 <Get_Config+0x1c4>)
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f00f f9ad 	bl	801535c <siprintf>
 8006002:	e059      	b.n	80060b8 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "LOW_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 8006004:	4942      	ldr	r1, [pc, #264]	@ (8006110 <Get_Config+0x1dc>)
 8006006:	483a      	ldr	r0, [pc, #232]	@ (80060f0 <Get_Config+0x1bc>)
 8006008:	f7fa f8e2 	bl	80001d0 <strcmp>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d114      	bne.n	800603c <Get_Config+0x108>
 8006012:	4b3e      	ldr	r3, [pc, #248]	@ (800610c <Get_Config+0x1d8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	db10      	blt.n	800603c <Get_Config+0x108>
 800601a:	4b3c      	ldr	r3, [pc, #240]	@ (800610c <Get_Config+0x1d8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b17      	cmp	r3, #23
 8006020:	dc0c      	bgt.n	800603c <Get_Config+0x108>
	{
		sprintf(value_str, "%u", config.low_th[cfg_idx]);
 8006022:	4b3a      	ldr	r3, [pc, #232]	@ (800610c <Get_Config+0x1d8>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a33      	ldr	r2, [pc, #204]	@ (80060f4 <Get_Config+0x1c0>)
 8006028:	3304      	adds	r3, #4
 800602a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800602e:	461a      	mov	r2, r3
 8006030:	1d3b      	adds	r3, r7, #4
 8006032:	4931      	ldr	r1, [pc, #196]	@ (80060f8 <Get_Config+0x1c4>)
 8006034:	4618      	mov	r0, r3
 8006036:	f00f f991 	bl	801535c <siprintf>
 800603a:	e03d      	b.n	80060b8 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "DATA_TOPIC") == 0)
 800603c:	4935      	ldr	r1, [pc, #212]	@ (8006114 <Get_Config+0x1e0>)
 800603e:	482c      	ldr	r0, [pc, #176]	@ (80060f0 <Get_Config+0x1bc>)
 8006040:	f7fa f8c6 	bl	80001d0 <strcmp>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <Get_Config+0x124>
	{
		strncpy(value_str, config.data_topic, sizeof(value_str)-1);
 800604a:	1d3b      	adds	r3, r7, #4
 800604c:	227f      	movs	r2, #127	@ 0x7f
 800604e:	4932      	ldr	r1, [pc, #200]	@ (8006118 <Get_Config+0x1e4>)
 8006050:	4618      	mov	r0, r3
 8006052:	f00f fa0a 	bl	801546a <strncpy>
 8006056:	e02f      	b.n	80060b8 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "CMD_TOPIC") == 0)
 8006058:	4930      	ldr	r1, [pc, #192]	@ (800611c <Get_Config+0x1e8>)
 800605a:	4825      	ldr	r0, [pc, #148]	@ (80060f0 <Get_Config+0x1bc>)
 800605c:	f7fa f8b8 	bl	80001d0 <strcmp>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <Get_Config+0x140>
	{
		strncpy(value_str, config.command_topic, sizeof(value_str)-1);
 8006066:	1d3b      	adds	r3, r7, #4
 8006068:	227f      	movs	r2, #127	@ 0x7f
 800606a:	492d      	ldr	r1, [pc, #180]	@ (8006120 <Get_Config+0x1ec>)
 800606c:	4618      	mov	r0, r3
 800606e:	f00f f9fc 	bl	801546a <strncpy>
 8006072:	e021      	b.n	80060b8 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "INFO_TOPIC") == 0)
 8006074:	492b      	ldr	r1, [pc, #172]	@ (8006124 <Get_Config+0x1f0>)
 8006076:	481e      	ldr	r0, [pc, #120]	@ (80060f0 <Get_Config+0x1bc>)
 8006078:	f7fa f8aa 	bl	80001d0 <strcmp>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d106      	bne.n	8006090 <Get_Config+0x15c>
	{
		strncpy(value_str, config.info_topic, sizeof(value_str)-1);
 8006082:	1d3b      	adds	r3, r7, #4
 8006084:	227f      	movs	r2, #127	@ 0x7f
 8006086:	4928      	ldr	r1, [pc, #160]	@ (8006128 <Get_Config+0x1f4>)
 8006088:	4618      	mov	r0, r3
 800608a:	f00f f9ee 	bl	801546a <strncpy>
 800608e:	e013      	b.n	80060b8 <Get_Config+0x184>
	}
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 8006090:	4926      	ldr	r1, [pc, #152]	@ (800612c <Get_Config+0x1f8>)
 8006092:	4817      	ldr	r0, [pc, #92]	@ (80060f0 <Get_Config+0x1bc>)
 8006094:	f7fa f89c 	bl	80001d0 <strcmp>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <Get_Config+0x178>
	{
		strncpy(value_str, config.ota_topic, sizeof(value_str)-1);
 800609e:	1d3b      	adds	r3, r7, #4
 80060a0:	227f      	movs	r2, #127	@ 0x7f
 80060a2:	4923      	ldr	r1, [pc, #140]	@ (8006130 <Get_Config+0x1fc>)
 80060a4:	4618      	mov	r0, r3
 80060a6:	f00f f9e0 	bl	801546a <strncpy>
 80060aa:	e005      	b.n	80060b8 <Get_Config+0x184>
	}
	else
	{
		strncpy(value_str, "UNKNOWN", sizeof(value_str)-1);
 80060ac:	1d3b      	adds	r3, r7, #4
 80060ae:	227f      	movs	r2, #127	@ 0x7f
 80060b0:	4920      	ldr	r1, [pc, #128]	@ (8006134 <Get_Config+0x200>)
 80060b2:	4618      	mov	r0, r3
 80060b4:	f00f f9d9 	bl	801546a <strncpy>
	}

	memset(cfg_var, 0, sizeof(cfg_var));
 80060b8:	2214      	movs	r2, #20
 80060ba:	2100      	movs	r1, #0
 80060bc:	480c      	ldr	r0, [pc, #48]	@ (80060f0 <Get_Config+0x1bc>)
 80060be:	f00f f9ad 	bl	801541c <memset>
	cfg_idx = 0;
 80060c2:	4b12      	ldr	r3, [pc, #72]	@ (800610c <Get_Config+0x1d8>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 80060c8:	220a      	movs	r2, #10
 80060ca:	2100      	movs	r1, #0
 80060cc:	481a      	ldr	r0, [pc, #104]	@ (8006138 <Get_Config+0x204>)
 80060ce:	f00f f9a5 	bl	801541c <memset>

	SIM_publish_MQTT_Message(topic, value_str);
 80060d2:	1d3b      	adds	r3, r7, #4
 80060d4:	4619      	mov	r1, r3
 80060d6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80060da:	f7fb fba1 	bl	8001820 <SIM_publish_MQTT_Message>
}
 80060de:	bf00      	nop
 80060e0:	3788      	adds	r7, #136	@ 0x88
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20001b3c 	.word	0x20001b3c
 80060ec:	08016a2c 	.word	0x08016a2c
 80060f0:	20005cbc 	.word	0x20005cbc
 80060f4:	20001c6c 	.word	0x20001c6c
 80060f8:	08016ab0 	.word	0x08016ab0
 80060fc:	08016a38 	.word	0x08016a38
 8006100:	08016a44 	.word	0x08016a44
 8006104:	08016a50 	.word	0x08016a50
 8006108:	08016a5c 	.word	0x08016a5c
 800610c:	20005cd0 	.word	0x20005cd0
 8006110:	08016a64 	.word	0x08016a64
 8006114:	08016a6c 	.word	0x08016a6c
 8006118:	20001cd4 	.word	0x20001cd4
 800611c:	08016a78 	.word	0x08016a78
 8006120:	20001d14 	.word	0x20001d14
 8006124:	08016a84 	.word	0x08016a84
 8006128:	20001d94 	.word	0x20001d94
 800612c:	08016a90 	.word	0x08016a90
 8006130:	20001d54 	.word	0x20001d54
 8006134:	08016ab4 	.word	0x08016ab4
 8006138:	20005cd4 	.word	0x20005cd4

0800613c <Clear_Flags>:

/*-----AZZERAMENTO FLAG-----*/
void Clear_Flags(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
	memset(&sys, 0, sizeof(sys));
 8006140:	f241 5228 	movw	r2, #5416	@ 0x1528
 8006144:	2100      	movs	r1, #0
 8006146:	480c      	ldr	r0, [pc, #48]	@ (8006178 <Clear_Flags+0x3c>)
 8006148:	f00f f968 	bl	801541c <memset>
	if(!sys.ACC_Present)
 800614c:	4b0a      	ldr	r3, [pc, #40]	@ (8006178 <Clear_Flags+0x3c>)
 800614e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006152:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d109      	bne.n	8006174 <Clear_Flags+0x38>
	{
		sys.ACC_Present = 1;
 8006160:	4b05      	ldr	r3, [pc, #20]	@ (8006178 <Clear_Flags+0x3c>)
 8006162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006166:	461a      	mov	r2, r3
 8006168:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	}
}
 8006174:	bf00      	nop
 8006176:	bd80      	pop	{r7, pc}
 8006178:	20000740 	.word	0x20000740

0800617c <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08e      	sub	sp, #56	@ 0x38
 8006180:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 8006182:	463b      	mov	r3, r7
 8006184:	2238      	movs	r2, #56	@ 0x38
 8006186:	2100      	movs	r1, #0
 8006188:	4618      	mov	r0, r3
 800618a:	f00f f947 	bl	801541c <memset>

	sCommand.Instruction = 0x66;
 800618e:	2366      	movs	r3, #102	@ 0x66
 8006190:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006192:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006196:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80061a0:	463b      	mov	r3, r7
 80061a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061a6:	4619      	mov	r1, r3
 80061a8:	480e      	ldr	r0, [pc, #56]	@ (80061e4 <psram_reset+0x68>)
 80061aa:	f008 f93f 	bl	800e42c <HAL_QSPI_Command>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <psram_reset+0x3e>
	{
		return -1;
 80061b4:	f04f 33ff 	mov.w	r3, #4294967295
 80061b8:	e00f      	b.n	80061da <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 80061ba:	2399      	movs	r3, #153	@ 0x99
 80061bc:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80061be:	463b      	mov	r3, r7
 80061c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061c4:	4619      	mov	r1, r3
 80061c6:	4807      	ldr	r0, [pc, #28]	@ (80061e4 <psram_reset+0x68>)
 80061c8:	f008 f930 	bl	800e42c <HAL_QSPI_Command>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d002      	beq.n	80061d8 <psram_reset+0x5c>
	{
		return -1;
 80061d2:	f04f 33ff 	mov.w	r3, #4294967295
 80061d6:	e000      	b.n	80061da <psram_reset+0x5e>
	}

	return 0;
 80061d8:	2300      	movs	r3, #0

}
 80061da:	4618      	mov	r0, r3
 80061dc:	3738      	adds	r7, #56	@ 0x38
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	2000033c 	.word	0x2000033c

080061e8 <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b090      	sub	sp, #64	@ 0x40
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 80061f2:	f107 0308 	add.w	r3, r7, #8
 80061f6:	2238      	movs	r2, #56	@ 0x38
 80061f8:	2100      	movs	r1, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f00f f90e 	bl	801541c <memset>

	if(!psramInitDone)return -1;
 8006200:	4b1c      	ldr	r3, [pc, #112]	@ (8006274 <psram_qpi_mode+0x8c>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d102      	bne.n	800620e <psram_qpi_mode+0x26>
 8006208:	f04f 33ff 	mov.w	r3, #4294967295
 800620c:	e02d      	b.n	800626a <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 800620e:	4b1a      	ldr	r3, [pc, #104]	@ (8006278 <psram_qpi_mode+0x90>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d108      	bne.n	8006228 <psram_qpi_mode+0x40>
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d105      	bne.n	8006228 <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 800621c:	23f5      	movs	r3, #245	@ 0xf5
 800621e:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8006220:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006224:	623b      	str	r3, [r7, #32]
 8006226:	e00e      	b.n	8006246 <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8006228:	4b13      	ldr	r3, [pc, #76]	@ (8006278 <psram_qpi_mode+0x90>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d108      	bne.n	8006242 <psram_qpi_mode+0x5a>
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d105      	bne.n	8006242 <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 8006236:	2335      	movs	r3, #53	@ 0x35
 8006238:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800623a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800623e:	623b      	str	r3, [r7, #32]
 8006240:	e001      	b.n	8006246 <psram_qpi_mode+0x5e>

	}else{

		return 0;
 8006242:	2300      	movs	r3, #0
 8006244:	e011      	b.n	800626a <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006246:	f107 0308 	add.w	r3, r7, #8
 800624a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800624e:	4619      	mov	r1, r3
 8006250:	480a      	ldr	r0, [pc, #40]	@ (800627c <psram_qpi_mode+0x94>)
 8006252:	f008 f8eb 	bl	800e42c <HAL_QSPI_Command>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <psram_qpi_mode+0x7a>
	{
		return -1;
 800625c:	f04f 33ff 	mov.w	r3, #4294967295
 8006260:	e003      	b.n	800626a <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 8006262:	4a05      	ldr	r2, [pc, #20]	@ (8006278 <psram_qpi_mode+0x90>)
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	7013      	strb	r3, [r2, #0]

	return 0;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3740      	adds	r7, #64	@ 0x40
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20005cde 	.word	0x20005cde
 8006278:	20005cdf 	.word	0x20005cdf
 800627c:	2000033c 	.word	0x2000033c

08006280 <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b090      	sub	sp, #64	@ 0x40
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 800628a:	f107 0308 	add.w	r3, r7, #8
 800628e:	2238      	movs	r2, #56	@ 0x38
 8006290:	2100      	movs	r1, #0
 8006292:	4618      	mov	r0, r3
 8006294:	f00f f8c2 	bl	801541c <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <psram_read_id+0x24>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b07      	cmp	r3, #7
 80062a2:	dc02      	bgt.n	80062aa <psram_read_id+0x2a>
 80062a4:	f06f 0301 	mvn.w	r3, #1
 80062a8:	e034      	b.n	8006314 <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 80062aa:	239f      	movs	r3, #159	@ 0x9f
 80062ac:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80062ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062b2:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80062b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80062bc:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80062be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 80062c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 80062ca:	2308      	movs	r3, #8
 80062cc:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80062ce:	2300      	movs	r3, #0
 80062d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80062d2:	2300      	movs	r3, #0
 80062d4:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80062d6:	2300      	movs	r3, #0
 80062d8:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80062da:	2300      	movs	r3, #0
 80062dc:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062de:	f107 0308 	add.w	r3, r7, #8
 80062e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e6:	4619      	mov	r1, r3
 80062e8:	480c      	ldr	r0, [pc, #48]	@ (800631c <psram_read_id+0x9c>)
 80062ea:	f008 f89f 	bl	800e42c <HAL_QSPI_Command>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <psram_read_id+0x7a>
	{
		return -1;
 80062f4:	f04f 33ff 	mov.w	r3, #4294967295
 80062f8:	e00c      	b.n	8006314 <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4806      	ldr	r0, [pc, #24]	@ (800631c <psram_read_id+0x9c>)
 8006302:	f008 f988 	bl	800e616 <HAL_QSPI_Receive>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <psram_read_id+0x92>
	{
		return -1;
 800630c:	f04f 33ff 	mov.w	r3, #4294967295
 8006310:	e000      	b.n	8006314 <psram_read_id+0x94>
	}


	return 0;
 8006312:	2300      	movs	r3, #0

}
 8006314:	4618      	mov	r0, r3
 8006316:	3740      	adds	r7, #64	@ 0x40
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	2000033c 	.word	0x2000033c

08006320 <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b092      	sub	sp, #72	@ 0x48
 8006324:	af00      	add	r7, sp, #0
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	607b      	str	r3, [r7, #4]
 800632a:	4603      	mov	r3, r0
 800632c:	73fb      	strb	r3, [r7, #15]
 800632e:	4613      	mov	r3, r2
 8006330:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 8006332:	f107 0310 	add.w	r3, r7, #16
 8006336:	2238      	movs	r2, #56	@ 0x38
 8006338:	2100      	movs	r1, #0
 800633a:	4618      	mov	r0, r3
 800633c:	f00f f86e 	bl	801541c <memset>

	sCommand.Address = address;
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006344:	2300      	movs	r3, #0
 8006346:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006348:	2300      	movs	r3, #0
 800634a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800634c:	2300      	movs	r3, #0
 800634e:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006350:	2300      	movs	r3, #0
 8006352:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 8006354:	89bb      	ldrh	r3, [r7, #12]
 8006356:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 8006358:	4b33      	ldr	r3, [pc, #204]	@ (8006428 <psram_internal_read_write+0x108>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01a      	beq.n	8006396 <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <psram_internal_read_write+0x4a>
 8006366:	2338      	movs	r3, #56	@ 0x38
 8006368:	e000      	b.n	800636c <psram_internal_read_write+0x4c>
 800636a:	23eb      	movs	r3, #235	@ 0xeb
 800636c:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 800636e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006372:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006374:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006378:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 800637a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800637e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 8006380:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8006384:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <psram_internal_read_write+0x70>
 800638c:	2300      	movs	r3, #0
 800638e:	e000      	b.n	8006392 <psram_internal_read_write+0x72>
 8006390:	2306      	movs	r3, #6
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
 8006394:	e019      	b.n	80063ca <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <psram_internal_read_write+0x80>
 800639c:	2302      	movs	r3, #2
 800639e:	e000      	b.n	80063a2 <psram_internal_read_write+0x82>
 80063a0:	230b      	movs	r3, #11
 80063a2:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80063a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80063a8:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80063aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80063ae:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 80063b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 80063b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063ba:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <psram_internal_read_write+0xa6>
 80063c2:	2300      	movs	r3, #0
 80063c4:	e000      	b.n	80063c8 <psram_internal_read_write+0xa8>
 80063c6:	2308      	movs	r3, #8
 80063c8:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80063ca:	f107 0310 	add.w	r3, r7, #16
 80063ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063d2:	4619      	mov	r1, r3
 80063d4:	4815      	ldr	r0, [pc, #84]	@ (800642c <psram_internal_read_write+0x10c>)
 80063d6:	f008 f829 	bl	800e42c <HAL_QSPI_Command>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <psram_internal_read_write+0xc6>
	{
		return -1;
 80063e0:	f04f 33ff 	mov.w	r3, #4294967295
 80063e4:	e01b      	b.n	800641e <psram_internal_read_write+0xfe>
	}

	if(write)
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00b      	beq.n	8006404 <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80063ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	480e      	ldr	r0, [pc, #56]	@ (800642c <psram_internal_read_write+0x10c>)
 80063f4:	f008 f878 	bl	800e4e8 <HAL_QSPI_Transmit>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00e      	beq.n	800641c <psram_internal_read_write+0xfc>
		{
			return -1;
 80063fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006402:	e00c      	b.n	800641e <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	4808      	ldr	r0, [pc, #32]	@ (800642c <psram_internal_read_write+0x10c>)
 800640c:	f008 f903 	bl	800e616 <HAL_QSPI_Receive>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <psram_internal_read_write+0xfc>
		{
			return -1;
 8006416:	f04f 33ff 	mov.w	r3, #4294967295
 800641a:	e000      	b.n	800641e <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3748      	adds	r7, #72	@ 0x48
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20005cdf 	.word	0x20005cdf
 800642c:	2000033c 	.word	0x2000033c

08006430 <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af00      	add	r7, sp, #0
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8006440:	2300      	movs	r3, #0
 8006442:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	029b      	lsls	r3, r3, #10
 800644c:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 800644e:	e018      	b.n	8006482 <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 8006450:	7bf8      	ldrb	r0, [r7, #15]
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006458:	69b9      	ldr	r1, [r7, #24]
 800645a:	f7ff ff61 	bl	8006320 <psram_internal_read_write>
 800645e:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2b00      	cmp	r3, #0
 8006464:	da02      	bge.n	800646c <psram_sector_read_write+0x3c>
 8006466:	f04f 33ff 	mov.w	r3, #4294967295
 800646a:	e00e      	b.n	800648a <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006472:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800647a:	61fb      	str	r3, [r7, #28]
		nsectors--;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3b01      	subs	r3, #1
 8006480:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e3      	bne.n	8006450 <psram_sector_read_write+0x20>
	}

	return 0;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <psram_read_write>:



int psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	607a      	str	r2, [r7, #4]
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	4603      	mov	r3, r0
 80064a2:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 80064a4:	2300      	movs	r3, #0
 80064a6:	61bb      	str	r3, [r7, #24]
	uint32_t trBytes = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	61fb      	str	r3, [r7, #28]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 80064b0:	4b1e      	ldr	r3, [pc, #120]	@ (800652c <psram_read_write+0x98>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <psram_read_write+0x2a>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <psram_read_write+0x30>
 80064be:	f04f 33ff 	mov.w	r3, #4294967295
 80064c2:	e02e      	b.n	8006522 <psram_read_write+0x8e>
	if(address + nbytes >= psramSize)return -2;
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	441a      	add	r2, r3
 80064ca:	4b19      	ldr	r3, [pc, #100]	@ (8006530 <psram_read_write+0x9c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d323      	bcc.n	800651a <psram_read_write+0x86>
 80064d2:	f06f 0301 	mvn.w	r3, #1
 80064d6:	e024      	b.n	8006522 <psram_read_write+0x8e>

	while(nbytes > 0)
	{
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064de:	bf28      	it	cs
 80064e0:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80064e4:	617b      	str	r3, [r7, #20]
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	7bf8      	ldrb	r0, [r7, #15]
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	68b9      	ldr	r1, [r7, #8]
 80064f0:	f7ff ff16 	bl	8006320 <psram_internal_read_write>
 80064f4:	61b8      	str	r0, [r7, #24]

		if(result < 0)return -1;
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	da02      	bge.n	8006502 <psram_read_write+0x6e>
 80064fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006500:	e00f      	b.n	8006522 <psram_read_write+0x8e>

		address += trBytes;
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	4413      	add	r3, r2
 8006508:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	4413      	add	r3, r2
 8006510:	61fb      	str	r3, [r7, #28]
		nbytes -= trBytes;
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	607b      	str	r3, [r7, #4]
	while(nbytes > 0)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1db      	bne.n	80064d8 <psram_read_write+0x44>
	}

	return 0;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3720      	adds	r7, #32
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20005cde 	.word	0x20005cde
 8006530:	20005ce8 	.word	0x20005ce8

08006534 <raw_psram_read_write>:

int raw_psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	607a      	str	r2, [r7, #4]
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	4603      	mov	r3, r0
 8006542:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	617b      	str	r3, [r7, #20]
	uint32_t trBytes = 0;
 8006548:	2300      	movs	r3, #0
 800654a:	61fb      	str	r3, [r7, #28]
	uint8_t *wPtr = pBuffer;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	61bb      	str	r3, [r7, #24]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8006550:	4b21      	ldr	r3, [pc, #132]	@ (80065d8 <raw_psram_read_write+0xa4>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <raw_psram_read_write+0x2a>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <raw_psram_read_write+0x30>
 800655e:	f04f 33ff 	mov.w	r3, #4294967295
 8006562:	e035      	b.n	80065d0 <raw_psram_read_write+0x9c>
	if(address + nbytes >= psramSize)return -2;
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	441a      	add	r2, r3
 800656a:	4b1c      	ldr	r3, [pc, #112]	@ (80065dc <raw_psram_read_write+0xa8>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d302      	bcc.n	8006578 <raw_psram_read_write+0x44>
 8006572:	f06f 0301 	mvn.w	r3, #1
 8006576:	e02b      	b.n	80065d0 <raw_psram_read_write+0x9c>

	trBytes = 1024 - address % 1024;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800657e:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8006582:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8006584:	e020      	b.n	80065c8 <raw_psram_read_write+0x94>
	{
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	b29a      	uxth	r2, r3
 800658a:	7bf8      	ldrb	r0, [r7, #15]
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	f7ff fec6 	bl	8006320 <psram_internal_read_write>
 8006594:	6178      	str	r0, [r7, #20]

		if(result < 0)return -1;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	da02      	bge.n	80065a2 <raw_psram_read_write+0x6e>
 800659c:	f04f 33ff 	mov.w	r3, #4294967295
 80065a0:	e016      	b.n	80065d0 <raw_psram_read_write+0x9c>

		address += trBytes;
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	4413      	add	r3, r2
 80065a8:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	4413      	add	r3, r2
 80065b0:	61bb      	str	r3, [r7, #24]
		nbytes -= trBytes;
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	607b      	str	r3, [r7, #4]
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065c0:	bf28      	it	cs
 80065c2:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80065c6:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1db      	bne.n	8006586 <raw_psram_read_write+0x52>
	}

	return 0;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3720      	adds	r7, #32
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	20005cde 	.word	0x20005cde
 80065dc:	20005ce8 	.word	0x20005ce8

080065e0 <RAM_Write>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int RAM_Write(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
	return raw_psram_read_write(1, address, nbytes, pBuffer);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	68f9      	ldr	r1, [r7, #12]
 80065f2:	2001      	movs	r0, #1
 80065f4:	f7ff ff9e 	bl	8006534 <raw_psram_read_write>
 80065f8:	4603      	mov	r3, r0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <RAM_Read>:

int RAM_Read(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	607a      	str	r2, [r7, #4]
	return psram_read_write(0, address, nbytes, pBuffer);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	68f9      	ldr	r1, [r7, #12]
 8006614:	2000      	movs	r0, #0
 8006616:	f7ff ff3d 	bl	8006494 <psram_read_write>
 800661a:	4603      	mov	r3, r0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <psram_is_initialized>:


int psram_is_initialized()
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
	return psramInitDone;
 8006628:	4b03      	ldr	r3, [pc, #12]	@ (8006638 <psram_is_initialized+0x14>)
 800662a:	781b      	ldrb	r3, [r3, #0]
}
 800662c:	4618      	mov	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	20005cde 	.word	0x20005cde

0800663c <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 8006640:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 8006644:	4618      	mov	r0, r3
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
	...

08006650 <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
	return psramNumPages;
 8006654:	4b03      	ldr	r3, [pc, #12]	@ (8006664 <psram_get_sector_count+0x14>)
 8006656:	681b      	ldr	r3, [r3, #0]
}
 8006658:	4618      	mov	r0, r3
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	20005cec 	.word	0x20005cec

08006668 <psram_get_size>:

unsigned int psram_get_size()
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
	return psramSize;
 800666c:	4b03      	ldr	r3, [pc, #12]	@ (800667c <psram_get_size+0x14>)
 800666e:	681b      	ldr	r3, [r3, #0]
}
 8006670:	4618      	mov	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	20005ce8 	.word	0x20005ce8

08006680 <psram_init>:

int psram_init()
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 8006686:	23ff      	movs	r3, #255	@ 0xff
 8006688:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 800668a:	4b20      	ldr	r3, [pc, #128]	@ (800670c <psram_init+0x8c>)
 800668c:	2200      	movs	r2, #0
 800668e:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 8006690:	f7ff fd74 	bl	800617c <psram_reset>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	da02      	bge.n	80066a0 <psram_init+0x20>
 800669a:	f04f 33ff 	mov.w	r3, #4294967295
 800669e:	e030      	b.n	8006702 <psram_init+0x82>

	memset(psramId, 0xFF, sizeof(psramId));
 80066a0:	2208      	movs	r2, #8
 80066a2:	21ff      	movs	r1, #255	@ 0xff
 80066a4:	481a      	ldr	r0, [pc, #104]	@ (8006710 <psram_init+0x90>)
 80066a6:	f00e feb9 	bl	801541c <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 80066aa:	2108      	movs	r1, #8
 80066ac:	4818      	ldr	r0, [pc, #96]	@ (8006710 <psram_init+0x90>)
 80066ae:	f7ff fde7 	bl	8006280 <psram_read_id>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	da02      	bge.n	80066be <psram_init+0x3e>
 80066b8:	f04f 33ff 	mov.w	r3, #4294967295
 80066bc:	e021      	b.n	8006702 <psram_init+0x82>

	density = psramId[2] >> 5;
 80066be:	4b14      	ldr	r3, [pc, #80]	@ (8006710 <psram_init+0x90>)
 80066c0:	789b      	ldrb	r3, [r3, #2]
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_64MB)
 80066c6:	4b12      	ldr	r3, [pc, #72]	@ (8006710 <psram_init+0x90>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b0d      	cmp	r3, #13
 80066cc:	d117      	bne.n	80066fe <psram_init+0x7e>
 80066ce:	4b10      	ldr	r3, [pc, #64]	@ (8006710 <psram_init+0x90>)
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	2b5d      	cmp	r3, #93	@ 0x5d
 80066d4:	d113      	bne.n	80066fe <psram_init+0x7e>
 80066d6:	79fb      	ldrb	r3, [r7, #7]
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d810      	bhi.n	80066fe <psram_init+0x7e>
	{
		psramSize = PSRAM_DENSITY_64MB_EADDR;
 80066dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006714 <psram_init+0x94>)
 80066de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80066e2:	601a      	str	r2, [r3, #0]
		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 80066e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006714 <psram_init+0x94>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	0a9b      	lsrs	r3, r3, #10
 80066ea:	4a0b      	ldr	r2, [pc, #44]	@ (8006718 <psram_init+0x98>)
 80066ec:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 80066ee:	2001      	movs	r0, #1
 80066f0:	f7ff fd7a 	bl	80061e8 <psram_qpi_mode>

		psramInitDone = 1;
 80066f4:	4b05      	ldr	r3, [pc, #20]	@ (800670c <psram_init+0x8c>)
 80066f6:	2201      	movs	r2, #1
 80066f8:	701a      	strb	r2, [r3, #0]
		return 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	e001      	b.n	8006702 <psram_init+0x82>
	}else{
		return -1;
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20005cde 	.word	0x20005cde
 8006710:	20005ce0 	.word	0x20005ce0
 8006714:	20005ce8 	.word	0x20005ce8
 8006718:	20005cec 	.word	0x20005cec

0800671c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006722:	4b0f      	ldr	r3, [pc, #60]	@ (8006760 <HAL_MspInit+0x44>)
 8006724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006726:	4a0e      	ldr	r2, [pc, #56]	@ (8006760 <HAL_MspInit+0x44>)
 8006728:	f043 0301 	orr.w	r3, r3, #1
 800672c:	6613      	str	r3, [r2, #96]	@ 0x60
 800672e:	4b0c      	ldr	r3, [pc, #48]	@ (8006760 <HAL_MspInit+0x44>)
 8006730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	607b      	str	r3, [r7, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800673a:	4b09      	ldr	r3, [pc, #36]	@ (8006760 <HAL_MspInit+0x44>)
 800673c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800673e:	4a08      	ldr	r2, [pc, #32]	@ (8006760 <HAL_MspInit+0x44>)
 8006740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006744:	6593      	str	r3, [r2, #88]	@ 0x58
 8006746:	4b06      	ldr	r3, [pc, #24]	@ (8006760 <HAL_MspInit+0x44>)
 8006748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800674a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	40021000 	.word	0x40021000

08006764 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b0ac      	sub	sp, #176	@ 0xb0
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800676c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006770:	2200      	movs	r2, #0
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	605a      	str	r2, [r3, #4]
 8006776:	609a      	str	r2, [r3, #8]
 8006778:	60da      	str	r2, [r3, #12]
 800677a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800677c:	f107 0314 	add.w	r3, r7, #20
 8006780:	2288      	movs	r2, #136	@ 0x88
 8006782:	2100      	movs	r1, #0
 8006784:	4618      	mov	r0, r3
 8006786:	f00e fe49 	bl	801541c <memset>
  if(hadc->Instance==ADC1)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a3d      	ldr	r2, [pc, #244]	@ (8006884 <HAL_ADC_MspInit+0x120>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d172      	bne.n	800687a <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006794:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006798:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800679a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800679e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80067a2:	2303      	movs	r3, #3
 80067a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80067a6:	2301      	movs	r3, #1
 80067a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80067aa:	2308      	movs	r3, #8
 80067ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80067ae:	2307      	movs	r3, #7
 80067b0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80067b2:	2302      	movs	r3, #2
 80067b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80067b6:	2302      	movs	r3, #2
 80067b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80067ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80067be:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80067c0:	f107 0314 	add.w	r3, r7, #20
 80067c4:	4618      	mov	r0, r3
 80067c6:	f009 f81d 	bl	800f804 <HAL_RCCEx_PeriphCLKConfig>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80067d0:	f7fe f82e 	bl	8004830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80067d4:	4b2c      	ldr	r3, [pc, #176]	@ (8006888 <HAL_ADC_MspInit+0x124>)
 80067d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006888 <HAL_ADC_MspInit+0x124>)
 80067da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80067de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067e0:	4b29      	ldr	r3, [pc, #164]	@ (8006888 <HAL_ADC_MspInit+0x124>)
 80067e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067e8:	613b      	str	r3, [r7, #16]
 80067ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067ec:	4b26      	ldr	r3, [pc, #152]	@ (8006888 <HAL_ADC_MspInit+0x124>)
 80067ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f0:	4a25      	ldr	r2, [pc, #148]	@ (8006888 <HAL_ADC_MspInit+0x124>)
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067f8:	4b23      	ldr	r3, [pc, #140]	@ (8006888 <HAL_ADC_MspInit+0x124>)
 80067fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006804:	2310      	movs	r3, #16
 8006806:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800680a:	230b      	movs	r3, #11
 800680c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006810:	2300      	movs	r3, #0
 8006812:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006816:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800681a:	4619      	mov	r1, r3
 800681c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006820:	f006 fd80 	bl	800d324 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006824:	4b19      	ldr	r3, [pc, #100]	@ (800688c <HAL_ADC_MspInit+0x128>)
 8006826:	4a1a      	ldr	r2, [pc, #104]	@ (8006890 <HAL_ADC_MspInit+0x12c>)
 8006828:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800682a:	4b18      	ldr	r3, [pc, #96]	@ (800688c <HAL_ADC_MspInit+0x128>)
 800682c:	2200      	movs	r2, #0
 800682e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006830:	4b16      	ldr	r3, [pc, #88]	@ (800688c <HAL_ADC_MspInit+0x128>)
 8006832:	2200      	movs	r2, #0
 8006834:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006836:	4b15      	ldr	r3, [pc, #84]	@ (800688c <HAL_ADC_MspInit+0x128>)
 8006838:	2200      	movs	r2, #0
 800683a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800683c:	4b13      	ldr	r3, [pc, #76]	@ (800688c <HAL_ADC_MspInit+0x128>)
 800683e:	2280      	movs	r2, #128	@ 0x80
 8006840:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006842:	4b12      	ldr	r3, [pc, #72]	@ (800688c <HAL_ADC_MspInit+0x128>)
 8006844:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006848:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800684a:	4b10      	ldr	r3, [pc, #64]	@ (800688c <HAL_ADC_MspInit+0x128>)
 800684c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006850:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006852:	4b0e      	ldr	r3, [pc, #56]	@ (800688c <HAL_ADC_MspInit+0x128>)
 8006854:	2220      	movs	r2, #32
 8006856:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006858:	4b0c      	ldr	r3, [pc, #48]	@ (800688c <HAL_ADC_MspInit+0x128>)
 800685a:	2200      	movs	r2, #0
 800685c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800685e:	480b      	ldr	r0, [pc, #44]	@ (800688c <HAL_ADC_MspInit+0x128>)
 8006860:	f005 fc5a 	bl	800c118 <HAL_DMA_Init>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 800686a:	f7fd ffe1 	bl	8004830 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a06      	ldr	r2, [pc, #24]	@ (800688c <HAL_ADC_MspInit+0x128>)
 8006872:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006874:	4a05      	ldr	r2, [pc, #20]	@ (800688c <HAL_ADC_MspInit+0x128>)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800687a:	bf00      	nop
 800687c:	37b0      	adds	r7, #176	@ 0xb0
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	50040000 	.word	0x50040000
 8006888:	40021000 	.word	0x40021000
 800688c:	2000027c 	.word	0x2000027c
 8006890:	40020008 	.word	0x40020008

08006894 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a0a      	ldr	r2, [pc, #40]	@ (80068cc <HAL_CRC_MspInit+0x38>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d10b      	bne.n	80068be <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80068a6:	4b0a      	ldr	r3, [pc, #40]	@ (80068d0 <HAL_CRC_MspInit+0x3c>)
 80068a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068aa:	4a09      	ldr	r2, [pc, #36]	@ (80068d0 <HAL_CRC_MspInit+0x3c>)
 80068ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80068b2:	4b07      	ldr	r3, [pc, #28]	@ (80068d0 <HAL_CRC_MspInit+0x3c>)
 80068b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80068be:	bf00      	nop
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40023000 	.word	0x40023000
 80068d0:	40021000 	.word	0x40021000

080068d4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b0ac      	sub	sp, #176	@ 0xb0
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	605a      	str	r2, [r3, #4]
 80068e6:	609a      	str	r2, [r3, #8]
 80068e8:	60da      	str	r2, [r3, #12]
 80068ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80068ec:	f107 0314 	add.w	r3, r7, #20
 80068f0:	2288      	movs	r2, #136	@ 0x88
 80068f2:	2100      	movs	r1, #0
 80068f4:	4618      	mov	r0, r3
 80068f6:	f00e fd91 	bl	801541c <memset>
  if(hi2c->Instance==I2C3)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a21      	ldr	r2, [pc, #132]	@ (8006984 <HAL_I2C_MspInit+0xb0>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d13b      	bne.n	800697c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8006904:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006908:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800690a:	2300      	movs	r3, #0
 800690c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800690e:	f107 0314 	add.w	r3, r7, #20
 8006912:	4618      	mov	r0, r3
 8006914:	f008 ff76 	bl	800f804 <HAL_RCCEx_PeriphCLKConfig>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800691e:	f7fd ff87 	bl	8004830 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006922:	4b19      	ldr	r3, [pc, #100]	@ (8006988 <HAL_I2C_MspInit+0xb4>)
 8006924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006926:	4a18      	ldr	r2, [pc, #96]	@ (8006988 <HAL_I2C_MspInit+0xb4>)
 8006928:	f043 0304 	orr.w	r3, r3, #4
 800692c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800692e:	4b16      	ldr	r3, [pc, #88]	@ (8006988 <HAL_I2C_MspInit+0xb4>)
 8006930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	613b      	str	r3, [r7, #16]
 8006938:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800693a:	2303      	movs	r3, #3
 800693c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006940:	2312      	movs	r3, #18
 8006942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006946:	2300      	movs	r3, #0
 8006948:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800694c:	2303      	movs	r3, #3
 800694e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006952:	2304      	movs	r3, #4
 8006954:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006958:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800695c:	4619      	mov	r1, r3
 800695e:	480b      	ldr	r0, [pc, #44]	@ (800698c <HAL_I2C_MspInit+0xb8>)
 8006960:	f006 fce0 	bl	800d324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006964:	4b08      	ldr	r3, [pc, #32]	@ (8006988 <HAL_I2C_MspInit+0xb4>)
 8006966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006968:	4a07      	ldr	r2, [pc, #28]	@ (8006988 <HAL_I2C_MspInit+0xb4>)
 800696a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800696e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006970:	4b05      	ldr	r3, [pc, #20]	@ (8006988 <HAL_I2C_MspInit+0xb4>)
 8006972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006974:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800697c:	bf00      	nop
 800697e:	37b0      	adds	r7, #176	@ 0xb0
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40005c00 	.word	0x40005c00
 8006988:	40021000 	.word	0x40021000
 800698c:	48000800 	.word	0x48000800

08006990 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08a      	sub	sp, #40	@ 0x28
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006998:	f107 0314 	add.w	r3, r7, #20
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	605a      	str	r2, [r3, #4]
 80069a2:	609a      	str	r2, [r3, #8]
 80069a4:	60da      	str	r2, [r3, #12]
 80069a6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a26      	ldr	r2, [pc, #152]	@ (8006a48 <HAL_QSPI_MspInit+0xb8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d145      	bne.n	8006a3e <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80069b2:	4b26      	ldr	r3, [pc, #152]	@ (8006a4c <HAL_QSPI_MspInit+0xbc>)
 80069b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b6:	4a25      	ldr	r2, [pc, #148]	@ (8006a4c <HAL_QSPI_MspInit+0xbc>)
 80069b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80069be:	4b23      	ldr	r3, [pc, #140]	@ (8006a4c <HAL_QSPI_MspInit+0xbc>)
 80069c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c6:	613b      	str	r3, [r7, #16]
 80069c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069ca:	4b20      	ldr	r3, [pc, #128]	@ (8006a4c <HAL_QSPI_MspInit+0xbc>)
 80069cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ce:	4a1f      	ldr	r2, [pc, #124]	@ (8006a4c <HAL_QSPI_MspInit+0xbc>)
 80069d0:	f043 0301 	orr.w	r3, r3, #1
 80069d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069d6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a4c <HAL_QSPI_MspInit+0xbc>)
 80069d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069e2:	4b1a      	ldr	r3, [pc, #104]	@ (8006a4c <HAL_QSPI_MspInit+0xbc>)
 80069e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069e6:	4a19      	ldr	r2, [pc, #100]	@ (8006a4c <HAL_QSPI_MspInit+0xbc>)
 80069e8:	f043 0302 	orr.w	r3, r3, #2
 80069ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069ee:	4b17      	ldr	r3, [pc, #92]	@ (8006a4c <HAL_QSPI_MspInit+0xbc>)
 80069f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	60bb      	str	r3, [r7, #8]
 80069f8:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80069fa:	23c0      	movs	r3, #192	@ 0xc0
 80069fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069fe:	2302      	movs	r3, #2
 8006a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a06:	2303      	movs	r3, #3
 8006a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006a0a:	230a      	movs	r3, #10
 8006a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a0e:	f107 0314 	add.w	r3, r7, #20
 8006a12:	4619      	mov	r1, r3
 8006a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a18:	f006 fc84 	bl	800d324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8006a1c:	f640 4303 	movw	r3, #3075	@ 0xc03
 8006a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a22:	2302      	movs	r3, #2
 8006a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006a2e:	230a      	movs	r3, #10
 8006a30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a32:	f107 0314 	add.w	r3, r7, #20
 8006a36:	4619      	mov	r1, r3
 8006a38:	4805      	ldr	r0, [pc, #20]	@ (8006a50 <HAL_QSPI_MspInit+0xc0>)
 8006a3a:	f006 fc73 	bl	800d324 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8006a3e:	bf00      	nop
 8006a40:	3728      	adds	r7, #40	@ 0x28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	a0001000 	.word	0xa0001000
 8006a4c:	40021000 	.word	0x40021000
 8006a50:	48000400 	.word	0x48000400

08006a54 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b0a4      	sub	sp, #144	@ 0x90
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006a5c:	f107 0308 	add.w	r3, r7, #8
 8006a60:	2288      	movs	r2, #136	@ 0x88
 8006a62:	2100      	movs	r1, #0
 8006a64:	4618      	mov	r0, r3
 8006a66:	f00e fcd9 	bl	801541c <memset>
  if(hrtc->Instance==RTC)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a14      	ldr	r2, [pc, #80]	@ (8006ac0 <HAL_RTC_MspInit+0x6c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d120      	bne.n	8006ab6 <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006a74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a78:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006a7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006a82:	f107 0308 	add.w	r3, r7, #8
 8006a86:	4618      	mov	r0, r3
 8006a88:	f008 febc 	bl	800f804 <HAL_RCCEx_PeriphCLKConfig>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006a92:	f7fd fecd 	bl	8004830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006a96:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac4 <HAL_RTC_MspInit+0x70>)
 8006a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a9c:	4a09      	ldr	r2, [pc, #36]	@ (8006ac4 <HAL_RTC_MspInit+0x70>)
 8006a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	2029      	movs	r0, #41	@ 0x29
 8006aac:	f005 f8f1 	bl	800bc92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8006ab0:	2029      	movs	r0, #41	@ 0x29
 8006ab2:	f005 f90a 	bl	800bcca <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8006ab6:	bf00      	nop
 8006ab8:	3790      	adds	r7, #144	@ 0x90
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40002800 	.word	0x40002800
 8006ac4:	40021000 	.word	0x40021000

08006ac8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b08c      	sub	sp, #48	@ 0x30
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ad0:	f107 031c 	add.w	r3, r7, #28
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	605a      	str	r2, [r3, #4]
 8006ada:	609a      	str	r2, [r3, #8]
 8006adc:	60da      	str	r2, [r3, #12]
 8006ade:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a2f      	ldr	r2, [pc, #188]	@ (8006ba4 <HAL_SPI_MspInit+0xdc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d129      	bne.n	8006b3e <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006aea:	4b2f      	ldr	r3, [pc, #188]	@ (8006ba8 <HAL_SPI_MspInit+0xe0>)
 8006aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aee:	4a2e      	ldr	r2, [pc, #184]	@ (8006ba8 <HAL_SPI_MspInit+0xe0>)
 8006af0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006af6:	4b2c      	ldr	r3, [pc, #176]	@ (8006ba8 <HAL_SPI_MspInit+0xe0>)
 8006af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006afe:	61bb      	str	r3, [r7, #24]
 8006b00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b02:	4b29      	ldr	r3, [pc, #164]	@ (8006ba8 <HAL_SPI_MspInit+0xe0>)
 8006b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b06:	4a28      	ldr	r2, [pc, #160]	@ (8006ba8 <HAL_SPI_MspInit+0xe0>)
 8006b08:	f043 0302 	orr.w	r3, r3, #2
 8006b0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b0e:	4b26      	ldr	r3, [pc, #152]	@ (8006ba8 <HAL_SPI_MspInit+0xe0>)
 8006b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006b1a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8006b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b20:	2302      	movs	r3, #2
 8006b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b24:	2300      	movs	r3, #0
 8006b26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006b2c:	2305      	movs	r3, #5
 8006b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b30:	f107 031c 	add.w	r3, r7, #28
 8006b34:	4619      	mov	r1, r3
 8006b36:	481d      	ldr	r0, [pc, #116]	@ (8006bac <HAL_SPI_MspInit+0xe4>)
 8006b38:	f006 fbf4 	bl	800d324 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006b3c:	e02d      	b.n	8006b9a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a1b      	ldr	r2, [pc, #108]	@ (8006bb0 <HAL_SPI_MspInit+0xe8>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d128      	bne.n	8006b9a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006b48:	4b17      	ldr	r3, [pc, #92]	@ (8006ba8 <HAL_SPI_MspInit+0xe0>)
 8006b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b4c:	4a16      	ldr	r2, [pc, #88]	@ (8006ba8 <HAL_SPI_MspInit+0xe0>)
 8006b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b54:	4b14      	ldr	r3, [pc, #80]	@ (8006ba8 <HAL_SPI_MspInit+0xe0>)
 8006b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b5c:	613b      	str	r3, [r7, #16]
 8006b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b60:	4b11      	ldr	r3, [pc, #68]	@ (8006ba8 <HAL_SPI_MspInit+0xe0>)
 8006b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b64:	4a10      	ldr	r2, [pc, #64]	@ (8006ba8 <HAL_SPI_MspInit+0xe0>)
 8006b66:	f043 0304 	orr.w	r3, r3, #4
 8006b6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba8 <HAL_SPI_MspInit+0xe0>)
 8006b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	60fb      	str	r3, [r7, #12]
 8006b76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006b78:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8006b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b7e:	2302      	movs	r3, #2
 8006b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b86:	2303      	movs	r3, #3
 8006b88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006b8a:	2306      	movs	r3, #6
 8006b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b8e:	f107 031c 	add.w	r3, r7, #28
 8006b92:	4619      	mov	r1, r3
 8006b94:	4807      	ldr	r0, [pc, #28]	@ (8006bb4 <HAL_SPI_MspInit+0xec>)
 8006b96:	f006 fbc5 	bl	800d324 <HAL_GPIO_Init>
}
 8006b9a:	bf00      	nop
 8006b9c:	3730      	adds	r7, #48	@ 0x30
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	40003800 	.word	0x40003800
 8006ba8:	40021000 	.word	0x40021000
 8006bac:	48000400 	.word	0x48000400
 8006bb0:	40003c00 	.word	0x40003c00
 8006bb4:	48000800 	.word	0x48000800

08006bb8 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8006bf0 <HAL_TIM_OC_MspInit+0x38>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d10b      	bne.n	8006be2 <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006bca:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf4 <HAL_TIM_OC_MspInit+0x3c>)
 8006bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bce:	4a09      	ldr	r2, [pc, #36]	@ (8006bf4 <HAL_TIM_OC_MspInit+0x3c>)
 8006bd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006bd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8006bd6:	4b07      	ldr	r3, [pc, #28]	@ (8006bf4 <HAL_TIM_OC_MspInit+0x3c>)
 8006bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8006be2:	bf00      	nop
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	40012c00 	.word	0x40012c00
 8006bf4:	40021000 	.word	0x40021000

08006bf8 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08a      	sub	sp, #40	@ 0x28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c00:	f107 0314 	add.w	r3, r7, #20
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	605a      	str	r2, [r3, #4]
 8006c0a:	609a      	str	r2, [r3, #8]
 8006c0c:	60da      	str	r2, [r3, #12]
 8006c0e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c18:	d128      	bne.n	8006c6c <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006c1a:	4b16      	ldr	r3, [pc, #88]	@ (8006c74 <HAL_TIM_IC_MspInit+0x7c>)
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c1e:	4a15      	ldr	r2, [pc, #84]	@ (8006c74 <HAL_TIM_IC_MspInit+0x7c>)
 8006c20:	f043 0301 	orr.w	r3, r3, #1
 8006c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c26:	4b13      	ldr	r3, [pc, #76]	@ (8006c74 <HAL_TIM_IC_MspInit+0x7c>)
 8006c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c32:	4b10      	ldr	r3, [pc, #64]	@ (8006c74 <HAL_TIM_IC_MspInit+0x7c>)
 8006c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c36:	4a0f      	ldr	r2, [pc, #60]	@ (8006c74 <HAL_TIM_IC_MspInit+0x7c>)
 8006c38:	f043 0301 	orr.w	r3, r3, #1
 8006c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c74 <HAL_TIM_IC_MspInit+0x7c>)
 8006c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006c4a:	2320      	movs	r3, #32
 8006c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c4e:	2302      	movs	r3, #2
 8006c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c52:	2301      	movs	r3, #1
 8006c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c56:	2300      	movs	r3, #0
 8006c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c5e:	f107 0314 	add.w	r3, r7, #20
 8006c62:	4619      	mov	r1, r3
 8006c64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006c68:	f006 fb5c 	bl	800d324 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8006c6c:	bf00      	nop
 8006c6e:	3728      	adds	r7, #40	@ 0x28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40021000 	.word	0x40021000

08006c78 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a13      	ldr	r2, [pc, #76]	@ (8006cd4 <HAL_TIM_Base_MspInit+0x5c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d10c      	bne.n	8006ca4 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006c8a:	4b13      	ldr	r3, [pc, #76]	@ (8006cd8 <HAL_TIM_Base_MspInit+0x60>)
 8006c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c8e:	4a12      	ldr	r2, [pc, #72]	@ (8006cd8 <HAL_TIM_Base_MspInit+0x60>)
 8006c90:	f043 0302 	orr.w	r3, r3, #2
 8006c94:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c96:	4b10      	ldr	r3, [pc, #64]	@ (8006cd8 <HAL_TIM_Base_MspInit+0x60>)
 8006c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006ca2:	e010      	b.n	8006cc6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8006cdc <HAL_TIM_Base_MspInit+0x64>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d10b      	bne.n	8006cc6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006cae:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd8 <HAL_TIM_Base_MspInit+0x60>)
 8006cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cb2:	4a09      	ldr	r2, [pc, #36]	@ (8006cd8 <HAL_TIM_Base_MspInit+0x60>)
 8006cb4:	f043 0304 	orr.w	r3, r3, #4
 8006cb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cba:	4b07      	ldr	r3, [pc, #28]	@ (8006cd8 <HAL_TIM_Base_MspInit+0x60>)
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cbe:	f003 0304 	and.w	r3, r3, #4
 8006cc2:	60bb      	str	r3, [r7, #8]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
}
 8006cc6:	bf00      	nop
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40000400 	.word	0x40000400
 8006cd8:	40021000 	.word	0x40021000
 8006cdc:	40000800 	.word	0x40000800

08006ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08a      	sub	sp, #40	@ 0x28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ce8:	f107 0314 	add.w	r3, r7, #20
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	605a      	str	r2, [r3, #4]
 8006cf2:	609a      	str	r2, [r3, #8]
 8006cf4:	60da      	str	r2, [r3, #12]
 8006cf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a23      	ldr	r2, [pc, #140]	@ (8006d8c <HAL_TIM_MspPostInit+0xac>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d11e      	bne.n	8006d40 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d02:	4b23      	ldr	r3, [pc, #140]	@ (8006d90 <HAL_TIM_MspPostInit+0xb0>)
 8006d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d06:	4a22      	ldr	r2, [pc, #136]	@ (8006d90 <HAL_TIM_MspPostInit+0xb0>)
 8006d08:	f043 0301 	orr.w	r3, r3, #1
 8006d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d0e:	4b20      	ldr	r3, [pc, #128]	@ (8006d90 <HAL_TIM_MspPostInit+0xb0>)
 8006d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8006d1a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8006d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d20:	2302      	movs	r3, #2
 8006d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d30:	f107 0314 	add.w	r3, r7, #20
 8006d34:	4619      	mov	r1, r3
 8006d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d3a:	f006 faf3 	bl	800d324 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006d3e:	e021      	b.n	8006d84 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a13      	ldr	r2, [pc, #76]	@ (8006d94 <HAL_TIM_MspPostInit+0xb4>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d11c      	bne.n	8006d84 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d4a:	4b11      	ldr	r3, [pc, #68]	@ (8006d90 <HAL_TIM_MspPostInit+0xb0>)
 8006d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d4e:	4a10      	ldr	r2, [pc, #64]	@ (8006d90 <HAL_TIM_MspPostInit+0xb0>)
 8006d50:	f043 0304 	orr.w	r3, r3, #4
 8006d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d56:	4b0e      	ldr	r3, [pc, #56]	@ (8006d90 <HAL_TIM_MspPostInit+0xb0>)
 8006d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d5a:	f003 0304 	and.w	r3, r3, #4
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006d62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d70:	2300      	movs	r3, #0
 8006d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006d74:	2302      	movs	r3, #2
 8006d76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d78:	f107 0314 	add.w	r3, r7, #20
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	4806      	ldr	r0, [pc, #24]	@ (8006d98 <HAL_TIM_MspPostInit+0xb8>)
 8006d80:	f006 fad0 	bl	800d324 <HAL_GPIO_Init>
}
 8006d84:	bf00      	nop
 8006d86:	3728      	adds	r7, #40	@ 0x28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40012c00 	.word	0x40012c00
 8006d90:	40021000 	.word	0x40021000
 8006d94:	40000400 	.word	0x40000400
 8006d98:	48000800 	.word	0x48000800

08006d9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b0ae      	sub	sp, #184	@ 0xb8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006da4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	605a      	str	r2, [r3, #4]
 8006dae:	609a      	str	r2, [r3, #8]
 8006db0:	60da      	str	r2, [r3, #12]
 8006db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006db4:	f107 031c 	add.w	r3, r7, #28
 8006db8:	2288      	movs	r2, #136	@ 0x88
 8006dba:	2100      	movs	r1, #0
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f00e fb2d 	bl	801541c <memset>
  if(huart->Instance==UART4)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a6b      	ldr	r2, [pc, #428]	@ (8006f74 <HAL_UART_MspInit+0x1d8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d13c      	bne.n	8006e46 <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006dcc:	2308      	movs	r3, #8
 8006dce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006dd4:	f107 031c 	add.w	r3, r7, #28
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f008 fd13 	bl	800f804 <HAL_RCCEx_PeriphCLKConfig>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006de4:	f7fd fd24 	bl	8004830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006de8:	4b63      	ldr	r3, [pc, #396]	@ (8006f78 <HAL_UART_MspInit+0x1dc>)
 8006dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dec:	4a62      	ldr	r2, [pc, #392]	@ (8006f78 <HAL_UART_MspInit+0x1dc>)
 8006dee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006df2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006df4:	4b60      	ldr	r3, [pc, #384]	@ (8006f78 <HAL_UART_MspInit+0x1dc>)
 8006df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006dfc:	61bb      	str	r3, [r7, #24]
 8006dfe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e00:	4b5d      	ldr	r3, [pc, #372]	@ (8006f78 <HAL_UART_MspInit+0x1dc>)
 8006e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e04:	4a5c      	ldr	r2, [pc, #368]	@ (8006f78 <HAL_UART_MspInit+0x1dc>)
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e0c:	4b5a      	ldr	r3, [pc, #360]	@ (8006f78 <HAL_UART_MspInit+0x1dc>)
 8006e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	617b      	str	r3, [r7, #20]
 8006e16:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e1e:	2312      	movs	r3, #18
 8006e20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006e30:	2308      	movs	r3, #8
 8006e32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006e40:	f006 fa70 	bl	800d324 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8006e44:	e092      	b.n	8006f6c <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART1)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a4c      	ldr	r2, [pc, #304]	@ (8006f7c <HAL_UART_MspInit+0x1e0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	f040 808d 	bne.w	8006f6c <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006e52:	2301      	movs	r3, #1
 8006e54:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006e56:	2300      	movs	r3, #0
 8006e58:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e5a:	f107 031c 	add.w	r3, r7, #28
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f008 fcd0 	bl	800f804 <HAL_RCCEx_PeriphCLKConfig>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8006e6a:	f7fd fce1 	bl	8004830 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006e6e:	4b42      	ldr	r3, [pc, #264]	@ (8006f78 <HAL_UART_MspInit+0x1dc>)
 8006e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e72:	4a41      	ldr	r2, [pc, #260]	@ (8006f78 <HAL_UART_MspInit+0x1dc>)
 8006e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e78:	6613      	str	r3, [r2, #96]	@ 0x60
 8006e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8006f78 <HAL_UART_MspInit+0x1dc>)
 8006e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e82:	613b      	str	r3, [r7, #16]
 8006e84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e86:	4b3c      	ldr	r3, [pc, #240]	@ (8006f78 <HAL_UART_MspInit+0x1dc>)
 8006e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e8a:	4a3b      	ldr	r2, [pc, #236]	@ (8006f78 <HAL_UART_MspInit+0x1dc>)
 8006e8c:	f043 0302 	orr.w	r3, r3, #2
 8006e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e92:	4b39      	ldr	r3, [pc, #228]	@ (8006f78 <HAL_UART_MspInit+0x1dc>)
 8006e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8006e9e:	23d8      	movs	r3, #216	@ 0xd8
 8006ea0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006eb6:	2307      	movs	r3, #7
 8006eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ebc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	482f      	ldr	r0, [pc, #188]	@ (8006f80 <HAL_UART_MspInit+0x1e4>)
 8006ec4:	f006 fa2e 	bl	800d324 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8006f84 <HAL_UART_MspInit+0x1e8>)
 8006eca:	4a2f      	ldr	r2, [pc, #188]	@ (8006f88 <HAL_UART_MspInit+0x1ec>)
 8006ecc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8006ece:	4b2d      	ldr	r3, [pc, #180]	@ (8006f84 <HAL_UART_MspInit+0x1e8>)
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8006f84 <HAL_UART_MspInit+0x1e8>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006eda:	4b2a      	ldr	r3, [pc, #168]	@ (8006f84 <HAL_UART_MspInit+0x1e8>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006ee0:	4b28      	ldr	r3, [pc, #160]	@ (8006f84 <HAL_UART_MspInit+0x1e8>)
 8006ee2:	2280      	movs	r2, #128	@ 0x80
 8006ee4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ee6:	4b27      	ldr	r3, [pc, #156]	@ (8006f84 <HAL_UART_MspInit+0x1e8>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006eec:	4b25      	ldr	r3, [pc, #148]	@ (8006f84 <HAL_UART_MspInit+0x1e8>)
 8006eee:	2200      	movs	r2, #0
 8006ef0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006ef2:	4b24      	ldr	r3, [pc, #144]	@ (8006f84 <HAL_UART_MspInit+0x1e8>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006ef8:	4b22      	ldr	r3, [pc, #136]	@ (8006f84 <HAL_UART_MspInit+0x1e8>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006efe:	4821      	ldr	r0, [pc, #132]	@ (8006f84 <HAL_UART_MspInit+0x1e8>)
 8006f00:	f005 f90a 	bl	800c118 <HAL_DMA_Init>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <HAL_UART_MspInit+0x172>
      Error_Handler();
 8006f0a:	f7fd fc91 	bl	8004830 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a1c      	ldr	r2, [pc, #112]	@ (8006f84 <HAL_UART_MspInit+0x1e8>)
 8006f12:	675a      	str	r2, [r3, #116]	@ 0x74
 8006f14:	4a1b      	ldr	r2, [pc, #108]	@ (8006f84 <HAL_UART_MspInit+0x1e8>)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8006f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8006f8c <HAL_UART_MspInit+0x1f0>)
 8006f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8006f90 <HAL_UART_MspInit+0x1f4>)
 8006f1e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8006f20:	4b1a      	ldr	r3, [pc, #104]	@ (8006f8c <HAL_UART_MspInit+0x1f0>)
 8006f22:	2202      	movs	r2, #2
 8006f24:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f26:	4b19      	ldr	r3, [pc, #100]	@ (8006f8c <HAL_UART_MspInit+0x1f0>)
 8006f28:	2210      	movs	r2, #16
 8006f2a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f2c:	4b17      	ldr	r3, [pc, #92]	@ (8006f8c <HAL_UART_MspInit+0x1f0>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f32:	4b16      	ldr	r3, [pc, #88]	@ (8006f8c <HAL_UART_MspInit+0x1f0>)
 8006f34:	2280      	movs	r2, #128	@ 0x80
 8006f36:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f38:	4b14      	ldr	r3, [pc, #80]	@ (8006f8c <HAL_UART_MspInit+0x1f0>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f3e:	4b13      	ldr	r3, [pc, #76]	@ (8006f8c <HAL_UART_MspInit+0x1f0>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006f44:	4b11      	ldr	r3, [pc, #68]	@ (8006f8c <HAL_UART_MspInit+0x1f0>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006f4a:	4b10      	ldr	r3, [pc, #64]	@ (8006f8c <HAL_UART_MspInit+0x1f0>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006f50:	480e      	ldr	r0, [pc, #56]	@ (8006f8c <HAL_UART_MspInit+0x1f0>)
 8006f52:	f005 f8e1 	bl	800c118 <HAL_DMA_Init>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8006f5c:	f7fd fc68 	bl	8004830 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a0a      	ldr	r2, [pc, #40]	@ (8006f8c <HAL_UART_MspInit+0x1f0>)
 8006f64:	671a      	str	r2, [r3, #112]	@ 0x70
 8006f66:	4a09      	ldr	r2, [pc, #36]	@ (8006f8c <HAL_UART_MspInit+0x1f0>)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8006f6c:	bf00      	nop
 8006f6e:	37b8      	adds	r7, #184	@ 0xb8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40004c00 	.word	0x40004c00
 8006f78:	40021000 	.word	0x40021000
 8006f7c:	40013800 	.word	0x40013800
 8006f80:	48000400 	.word	0x48000400
 8006f84:	200006ac 	.word	0x200006ac
 8006f88:	40020058 	.word	0x40020058
 8006f8c:	200006f4 	.word	0x200006f4
 8006f90:	40020044 	.word	0x40020044

08006f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006f98:	bf00      	nop
 8006f9a:	e7fd      	b.n	8006f98 <NMI_Handler+0x4>

08006f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006fa0:	bf00      	nop
 8006fa2:	e7fd      	b.n	8006fa0 <HardFault_Handler+0x4>

08006fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006fa8:	bf00      	nop
 8006faa:	e7fd      	b.n	8006fa8 <MemManage_Handler+0x4>

08006fac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006fb0:	bf00      	nop
 8006fb2:	e7fd      	b.n	8006fb0 <BusFault_Handler+0x4>

08006fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006fb8:	bf00      	nop
 8006fba:	e7fd      	b.n	8006fb8 <UsageFault_Handler+0x4>

08006fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006fc0:	bf00      	nop
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006fce:	bf00      	nop
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006fdc:	bf00      	nop
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006fea:	f003 f983 	bl	800a2f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006fee:	bf00      	nop
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006ff8:	4802      	ldr	r0, [pc, #8]	@ (8007004 <DMA1_Channel1_IRQHandler+0x10>)
 8006ffa:	f005 f9e3 	bl	800c3c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006ffe:	bf00      	nop
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	2000027c 	.word	0x2000027c

08007008 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800700c:	4802      	ldr	r0, [pc, #8]	@ (8007018 <DMA1_Channel4_IRQHandler+0x10>)
 800700e:	f005 f9d9 	bl	800c3c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007012:	bf00      	nop
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	200006f4 	.word	0x200006f4

0800701c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007020:	4802      	ldr	r0, [pc, #8]	@ (800702c <DMA1_Channel5_IRQHandler+0x10>)
 8007022:	f005 f9cf 	bl	800c3c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8007026:	bf00      	nop
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	200006ac 	.word	0x200006ac

08007030 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8007034:	4802      	ldr	r0, [pc, #8]	@ (8007040 <RTC_Alarm_IRQHandler+0x10>)
 8007036:	f009 fbe5 	bl	8010804 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800703a:	bf00      	nop
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000380 	.word	0x20000380

08007044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800704c:	4a14      	ldr	r2, [pc, #80]	@ (80070a0 <_sbrk+0x5c>)
 800704e:	4b15      	ldr	r3, [pc, #84]	@ (80070a4 <_sbrk+0x60>)
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007058:	4b13      	ldr	r3, [pc, #76]	@ (80070a8 <_sbrk+0x64>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d102      	bne.n	8007066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007060:	4b11      	ldr	r3, [pc, #68]	@ (80070a8 <_sbrk+0x64>)
 8007062:	4a12      	ldr	r2, [pc, #72]	@ (80070ac <_sbrk+0x68>)
 8007064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007066:	4b10      	ldr	r3, [pc, #64]	@ (80070a8 <_sbrk+0x64>)
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4413      	add	r3, r2
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	429a      	cmp	r2, r3
 8007072:	d207      	bcs.n	8007084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007074:	f00e fa22 	bl	80154bc <__errno>
 8007078:	4603      	mov	r3, r0
 800707a:	220c      	movs	r2, #12
 800707c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800707e:	f04f 33ff 	mov.w	r3, #4294967295
 8007082:	e009      	b.n	8007098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007084:	4b08      	ldr	r3, [pc, #32]	@ (80070a8 <_sbrk+0x64>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800708a:	4b07      	ldr	r3, [pc, #28]	@ (80070a8 <_sbrk+0x64>)
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4413      	add	r3, r2
 8007092:	4a05      	ldr	r2, [pc, #20]	@ (80070a8 <_sbrk+0x64>)
 8007094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007096:	68fb      	ldr	r3, [r7, #12]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	20018000 	.word	0x20018000
 80070a4:	00000400 	.word	0x00000400
 80070a8:	20005cf0 	.word	0x20005cf0
 80070ac:	20005e50 	.word	0x20005e50

080070b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80070b4:	4b06      	ldr	r3, [pc, #24]	@ (80070d0 <SystemInit+0x20>)
 80070b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ba:	4a05      	ldr	r2, [pc, #20]	@ (80070d0 <SystemInit+0x20>)
 80070bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80070c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80070c4:	bf00      	nop
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	e000ed00 	.word	0xe000ed00

080070d4 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <disk_status+0x16>
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d00c      	beq.n	8007102 <disk_status+0x2e>
 80070e8:	e017      	b.n	800711a <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 80070ea:	f7ff fa9b 	bl	8006624 <psram_is_initialized>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d102      	bne.n	80070fa <disk_status+0x26>
		{
			stat = STA_NOINIT;
 80070f4:	2301      	movs	r3, #1
 80070f6:	73fb      	strb	r3, [r7, #15]
 80070f8:	e001      	b.n	80070fe <disk_status+0x2a>
		}else{
			stat = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
 8007100:	e00c      	b.n	800711c <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8007102:	f7fb fb3f 	bl	8002784 <extflash_is_initialized>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d102      	bne.n	8007112 <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 800710c:	2301      	movs	r3, #1
 800710e:	73fb      	strb	r3, [r7, #15]
 8007110:	e001      	b.n	8007116 <disk_status+0x42>
		}else{
			stat = 0;
 8007112:	2300      	movs	r3, #0
 8007114:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	e000      	b.n	800711c <disk_status+0x48>

	}
	return STA_NOINIT;
 800711a:	2301      	movs	r3, #1
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <disk_initialize+0x16>
 8007134:	2b01      	cmp	r3, #1
 8007136:	d00c      	beq.n	8007152 <disk_initialize+0x2e>
 8007138:	e017      	b.n	800716a <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 800713a:	f7ff faa1 	bl	8006680 <psram_init>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	da02      	bge.n	800714a <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 8007144:	2302      	movs	r3, #2
 8007146:	73fb      	strb	r3, [r7, #15]
 8007148:	e001      	b.n	800714e <disk_initialize+0x2a>
		}else{
			stat = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	e00c      	b.n	800716c <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 8007152:	f7fb fb23 	bl	800279c <extflash_init>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	da02      	bge.n	8007162 <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 800715c:	2302      	movs	r3, #2
 800715e:	73fb      	strb	r3, [r7, #15]
 8007160:	e001      	b.n	8007166 <disk_initialize+0x42>
		}else{
			stat = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007166:	7bfb      	ldrb	r3, [r7, #15]
 8007168:	e000      	b.n	800716c <disk_initialize+0x48>

	}
	return STA_NOINIT;
 800716a:	2301      	movs	r3, #1
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	607a      	str	r2, [r7, #4]
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	4603      	mov	r3, r0
 8007182:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <disk_read+0x1c>
 800718a:	2b01      	cmp	r3, #1
 800718c:	d010      	beq.n	80071b0 <disk_read+0x3c>
 800718e:	e01e      	b.n	80071ce <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	6879      	ldr	r1, [r7, #4]
 8007196:	2000      	movs	r0, #0
 8007198:	f7ff f94a 	bl	8006430 <psram_sector_read_write>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	da02      	bge.n	80071a8 <disk_read+0x34>
		{
			res = RES_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	75fb      	strb	r3, [r7, #23]
 80071a6:	e001      	b.n	80071ac <disk_read+0x38>
		}else{

			res = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	e00f      	b.n	80071d0 <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7fb f9c9 	bl	800254c <extflash_sector_read>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	da02      	bge.n	80071c6 <disk_read+0x52>
		{
			res = RES_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	75fb      	strb	r3, [r7, #23]
 80071c4:	e001      	b.n	80071ca <disk_read+0x56>
		}else{

			res = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	e000      	b.n	80071d0 <disk_read+0x5c>

	}

	return RES_PARERR;
 80071ce:	2304      	movs	r3, #4
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
 80071e2:	603b      	str	r3, [r7, #0]
 80071e4:	4603      	mov	r3, r0
 80071e6:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <disk_write+0x20>
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d010      	beq.n	8007218 <disk_write+0x40>
 80071f6:	e01e      	b.n	8007236 <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	2001      	movs	r0, #1
 8007200:	f7ff f916 	bl	8006430 <psram_sector_read_write>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	da02      	bge.n	8007210 <disk_write+0x38>
		{
			res = RES_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	75fb      	strb	r3, [r7, #23]
 800720e:	e001      	b.n	8007214 <disk_write+0x3c>
		}else{

			res = 0;
 8007210:	2300      	movs	r3, #0
 8007212:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007214:	7dfb      	ldrb	r3, [r7, #23]
 8007216:	e00f      	b.n	8007238 <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7fb fa2a 	bl	8002676 <extflash_sector_write>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	da02      	bge.n	800722e <disk_write+0x56>
		{
			res = RES_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	75fb      	strb	r3, [r7, #23]
 800722c:	e001      	b.n	8007232 <disk_write+0x5a>
		}else{

			res = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	e000      	b.n	8007238 <disk_write+0x60>

	}

	return RES_PARERR;
 8007236:	2304      	movs	r3, #4
}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	4603      	mov	r3, r0
 8007248:	603a      	str	r2, [r7, #0]
 800724a:	71fb      	strb	r3, [r7, #7]
 800724c:	460b      	mov	r3, r1
 800724e:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 8007250:	2304      	movs	r3, #4
 8007252:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <disk_ioctl+0x20>
 800725a:	2b01      	cmp	r3, #1
 800725c:	d036      	beq.n	80072cc <disk_ioctl+0x8c>
 800725e:	e06b      	b.n	8007338 <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 8007260:	f7ff f9e0 	bl	8006624 <psram_is_initialized>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <disk_ioctl+0x2e>
 800726a:	2303      	movs	r3, #3
 800726c:	e065      	b.n	800733a <disk_ioctl+0xfa>

		switch(cmd)
 800726e:	79bb      	ldrb	r3, [r7, #6]
 8007270:	2b04      	cmp	r3, #4
 8007272:	d826      	bhi.n	80072c2 <disk_ioctl+0x82>
 8007274:	a201      	add	r2, pc, #4	@ (adr r2, 800727c <disk_ioctl+0x3c>)
 8007276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727a:	bf00      	nop
 800727c:	080072bd 	.word	0x080072bd
 8007280:	08007291 	.word	0x08007291
 8007284:	080072a1 	.word	0x080072a1
 8007288:	080072b1 	.word	0x080072b1
 800728c:	080072bd 	.word	0x080072bd
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 8007290:	f7ff f9de 	bl	8006650 <psram_get_sector_count>
 8007294:	4602      	mov	r2, r0
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	601a      	str	r2, [r3, #0]
				res = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
				break;
 800729e:	e013      	b.n	80072c8 <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 80072a0:	f7ff f9cc 	bl	800663c <psram_get_sector_size>
 80072a4:	4602      	mov	r2, r0
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	601a      	str	r2, [r3, #0]
				res = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]
				break;
 80072ae:	e00b      	b.n	80072c8 <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2201      	movs	r2, #1
 80072b4:	601a      	str	r2, [r3, #0]
				res = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	73fb      	strb	r3, [r7, #15]
				break;
 80072ba:	e005      	b.n	80072c8 <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 80072bc:	2300      	movs	r3, #0
 80072be:	73fb      	strb	r3, [r7, #15]
				break;
 80072c0:	e002      	b.n	80072c8 <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 80072c2:	2304      	movs	r3, #4
 80072c4:	73fb      	strb	r3, [r7, #15]
				break;
 80072c6:	bf00      	nop
		}

		return res;
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	e036      	b.n	800733a <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 80072cc:	f7fb fa5a 	bl	8002784 <extflash_is_initialized>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <disk_ioctl+0x9a>
 80072d6:	2303      	movs	r3, #3
 80072d8:	e02f      	b.n	800733a <disk_ioctl+0xfa>

		switch(cmd)
 80072da:	79bb      	ldrb	r3, [r7, #6]
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d826      	bhi.n	800732e <disk_ioctl+0xee>
 80072e0:	a201      	add	r2, pc, #4	@ (adr r2, 80072e8 <disk_ioctl+0xa8>)
 80072e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e6:	bf00      	nop
 80072e8:	08007329 	.word	0x08007329
 80072ec:	080072fd 	.word	0x080072fd
 80072f0:	0800730d 	.word	0x0800730d
 80072f4:	0800731d 	.word	0x0800731d
 80072f8:	08007329 	.word	0x08007329
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 80072fc:	f7fb fa36 	bl	800276c <extflash_get_sector_count>
 8007300:	4602      	mov	r2, r0
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	601a      	str	r2, [r3, #0]
				res = 0;
 8007306:	2300      	movs	r3, #0
 8007308:	73fb      	strb	r3, [r7, #15]
				break;
 800730a:	e013      	b.n	8007334 <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 800730c:	f7fb fa25 	bl	800275a <extflash_get_sector_size>
 8007310:	4602      	mov	r2, r0
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	601a      	str	r2, [r3, #0]
				res = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]
				break;
 800731a:	e00b      	b.n	8007334 <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2201      	movs	r2, #1
 8007320:	601a      	str	r2, [r3, #0]
				res = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	73fb      	strb	r3, [r7, #15]
				break;
 8007326:	e005      	b.n	8007334 <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]
				break;
 800732c:	e002      	b.n	8007334 <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 800732e:	2304      	movs	r3, #4
 8007330:	73fb      	strb	r3, [r7, #15]
				break;
 8007332:	bf00      	nop
		}

		return res;
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	e000      	b.n	800733a <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 8007338:	2304      	movs	r3, #4
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop

08007344 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3301      	adds	r3, #1
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007354:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007358:	021b      	lsls	r3, r3, #8
 800735a:	b21a      	sxth	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	b21b      	sxth	r3, r3
 8007362:	4313      	orrs	r3, r2
 8007364:	b21b      	sxth	r3, r3
 8007366:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007368:	89fb      	ldrh	r3, [r7, #14]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007376:	b480      	push	{r7}
 8007378:	b085      	sub	sp, #20
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	3303      	adds	r3, #3
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	3202      	adds	r2, #2
 800738e:	7812      	ldrb	r2, [r2, #0]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	021b      	lsls	r3, r3, #8
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	3201      	adds	r2, #1
 800739c:	7812      	ldrb	r2, [r2, #0]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	021b      	lsls	r3, r3, #8
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	7812      	ldrb	r2, [r2, #0]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]
	return rv;
 80073ae:	68fb      	ldr	r3, [r7, #12]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	607a      	str	r2, [r7, #4]
 80073ce:	887a      	ldrh	r2, [r7, #2]
 80073d0:	b2d2      	uxtb	r2, r2
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	887b      	ldrh	r3, [r7, #2]
 80073d6:	0a1b      	lsrs	r3, r3, #8
 80073d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	887a      	ldrh	r2, [r7, #2]
 80073e2:	b2d2      	uxtb	r2, r2
 80073e4:	701a      	strb	r2, [r3, #0]
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	607a      	str	r2, [r7, #4]
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	0a1b      	lsrs	r3, r3, #8
 800740c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	b2d2      	uxtb	r2, r2
 8007418:	701a      	strb	r2, [r3, #0]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	0a1b      	lsrs	r3, r3, #8
 800741e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	607a      	str	r2, [r7, #4]
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	b2d2      	uxtb	r2, r2
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	0a1b      	lsrs	r3, r3, #8
 8007430:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	1c5a      	adds	r2, r3, #1
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	4603      	mov	r3, r0
 8007452:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <dbc_1st+0x14>
 800745a:	2300      	movs	r3, #0
 800745c:	e000      	b.n	8007460 <dbc_1st+0x16>
#endif
	return 0;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	4603      	mov	r3, r0
 8007474:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <dbc_2nd+0x14>
 800747c:	2300      	movs	r3, #0
 800747e:	e000      	b.n	8007482 <dbc_2nd+0x16>
#endif
	return 0;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	791b      	ldrb	r3, [r3, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d02c      	beq.n	80074fc <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	7858      	ldrb	r0, [r3, #1]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074b0:	2301      	movs	r3, #1
 80074b2:	f7ff fe91 	bl	80071d8 <disk_write>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d11d      	bne.n	80074f8 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ca:	1ad2      	subs	r2, r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d213      	bcs.n	80074fc <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	78db      	ldrb	r3, [r3, #3]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d10f      	bne.n	80074fc <sync_window+0x6e>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	7858      	ldrb	r0, [r3, #1]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	441a      	add	r2, r3
 80074f0:	2301      	movs	r3, #1
 80074f2:	f7ff fe71 	bl	80071d8 <disk_write>
 80074f6:	e001      	b.n	80074fc <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d01b      	beq.n	8007556 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7ff ffb5 	bl	800748e <sync_window>
 8007524:	4603      	mov	r3, r0
 8007526:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d113      	bne.n	8007556 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	7858      	ldrb	r0, [r3, #1]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007538:	2301      	movs	r3, #1
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	f7ff fe1a 	bl	8007174 <disk_read>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d004      	beq.n	8007550 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8007546:	f04f 33ff 	mov.w	r3, #4294967295
 800754a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800754c:	2301      	movs	r3, #1
 800754e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff ff90 	bl	800748e <sync_window>
 800756e:	4603      	mov	r3, r0
 8007570:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d158      	bne.n	800762a <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b03      	cmp	r3, #3
 800757e:	d148      	bne.n	8007612 <sync_fs+0xb2>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	795b      	ldrb	r3, [r3, #5]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d144      	bne.n	8007612 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3334      	adds	r3, #52	@ 0x34
 800758c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007590:	2100      	movs	r1, #0
 8007592:	4618      	mov	r0, r3
 8007594:	f00d ff42 	bl	801541c <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3334      	adds	r3, #52	@ 0x34
 800759c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80075a0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff ff09 	bl	80073bc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	3334      	adds	r3, #52	@ 0x34
 80075ae:	4921      	ldr	r1, [pc, #132]	@ (8007634 <sync_fs+0xd4>)
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7ff ff1e 	bl	80073f2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3334      	adds	r3, #52	@ 0x34
 80075ba:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80075be:	491e      	ldr	r1, [pc, #120]	@ (8007638 <sync_fs+0xd8>)
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff ff16 	bl	80073f2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3334      	adds	r3, #52	@ 0x34
 80075ca:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	4619      	mov	r1, r3
 80075d4:	4610      	mov	r0, r2
 80075d6:	f7ff ff0c 	bl	80073f2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3334      	adds	r3, #52	@ 0x34
 80075de:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	4619      	mov	r1, r3
 80075e8:	4610      	mov	r0, r2
 80075ea:	f7ff ff02 	bl	80073f2 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	7858      	ldrb	r0, [r3, #1]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007606:	2301      	movs	r3, #1
 8007608:	f7ff fde6 	bl	80071d8 <disk_write>
			fs->fsi_flag = 0;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	785b      	ldrb	r3, [r3, #1]
 8007616:	2200      	movs	r2, #0
 8007618:	2100      	movs	r1, #0
 800761a:	4618      	mov	r0, r3
 800761c:	f7ff fe10 	bl	8007240 <disk_ioctl>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <sync_fs+0xca>
 8007626:	2301      	movs	r3, #1
 8007628:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	41615252 	.word	0x41615252
 8007638:	61417272 	.word	0x61417272

0800763c <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	3b02      	subs	r3, #2
 800764a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	3b02      	subs	r3, #2
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d301      	bcc.n	800765c <clst2sect+0x20>
 8007658:	2300      	movs	r3, #0
 800765a:	e008      	b.n	800766e <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	895b      	ldrh	r3, [r3, #10]
 8007664:	4619      	mov	r1, r3
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	fb01 f303 	mul.w	r3, r1, r3
 800766c:	4413      	add	r3, r2
}
 800766e:	4618      	mov	r0, r3
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b086      	sub	sp, #24
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d904      	bls.n	800769a <get_fat+0x20>
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d302      	bcc.n	80076a0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800769a:	2301      	movs	r3, #1
 800769c:	617b      	str	r3, [r7, #20]
 800769e:	e0ba      	b.n	8007816 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80076a0:	f04f 33ff 	mov.w	r3, #4294967295
 80076a4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	f000 8082 	beq.w	80077b4 <get_fat+0x13a>
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	f300 80a6 	bgt.w	8007802 <get_fat+0x188>
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d002      	beq.n	80076c0 <get_fat+0x46>
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d055      	beq.n	800776a <get_fat+0xf0>
 80076be:	e0a0      	b.n	8007802 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	085b      	lsrs	r3, r3, #1
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	899b      	ldrh	r3, [r3, #12]
 80076d6:	4619      	mov	r1, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	fbb3 f3f1 	udiv	r3, r3, r1
 80076de:	4413      	add	r3, r2
 80076e0:	4619      	mov	r1, r3
 80076e2:	6938      	ldr	r0, [r7, #16]
 80076e4:	f7ff ff0f 	bl	8007506 <move_window>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f040 808c 	bne.w	8007808 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	60fa      	str	r2, [r7, #12]
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	8992      	ldrh	r2, [r2, #12]
 80076fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80076fe:	fb01 f202 	mul.w	r2, r1, r2
 8007702:	1a9b      	subs	r3, r3, r2
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	4413      	add	r3, r2
 8007708:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800770c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	899b      	ldrh	r3, [r3, #12]
 8007716:	4619      	mov	r1, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	fbb3 f3f1 	udiv	r3, r3, r1
 800771e:	4413      	add	r3, r2
 8007720:	4619      	mov	r1, r3
 8007722:	6938      	ldr	r0, [r7, #16]
 8007724:	f7ff feef 	bl	8007506 <move_window>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d16e      	bne.n	800780c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	899b      	ldrh	r3, [r3, #12]
 8007732:	461a      	mov	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	fbb3 f1f2 	udiv	r1, r3, r2
 800773a:	fb01 f202 	mul.w	r2, r1, r2
 800773e:	1a9b      	subs	r3, r3, r2
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4413      	add	r3, r2
 8007744:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007748:	021b      	lsls	r3, r3, #8
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	4313      	orrs	r3, r2
 800774e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <get_fat+0xe6>
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	091b      	lsrs	r3, r3, #4
 800775e:	e002      	b.n	8007766 <get_fat+0xec>
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007766:	617b      	str	r3, [r7, #20]
			break;
 8007768:	e055      	b.n	8007816 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	899b      	ldrh	r3, [r3, #12]
 8007772:	085b      	lsrs	r3, r3, #1
 8007774:	b29b      	uxth	r3, r3
 8007776:	4619      	mov	r1, r3
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	fbb3 f3f1 	udiv	r3, r3, r1
 800777e:	4413      	add	r3, r2
 8007780:	4619      	mov	r1, r3
 8007782:	6938      	ldr	r0, [r7, #16]
 8007784:	f7ff febf 	bl	8007506 <move_window>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d140      	bne.n	8007810 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	8992      	ldrh	r2, [r2, #12]
 800779c:	fbb3 f0f2 	udiv	r0, r3, r2
 80077a0:	fb00 f202 	mul.w	r2, r0, r2
 80077a4:	1a9b      	subs	r3, r3, r2
 80077a6:	440b      	add	r3, r1
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7ff fdcb 	bl	8007344 <ld_word>
 80077ae:	4603      	mov	r3, r0
 80077b0:	617b      	str	r3, [r7, #20]
			break;
 80077b2:	e030      	b.n	8007816 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	899b      	ldrh	r3, [r3, #12]
 80077bc:	089b      	lsrs	r3, r3, #2
 80077be:	b29b      	uxth	r3, r3
 80077c0:	4619      	mov	r1, r3
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80077c8:	4413      	add	r3, r2
 80077ca:	4619      	mov	r1, r3
 80077cc:	6938      	ldr	r0, [r7, #16]
 80077ce:	f7ff fe9a 	bl	8007506 <move_window>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d11d      	bne.n	8007814 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	8992      	ldrh	r2, [r2, #12]
 80077e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80077ea:	fb00 f202 	mul.w	r2, r0, r2
 80077ee:	1a9b      	subs	r3, r3, r2
 80077f0:	440b      	add	r3, r1
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7ff fdbf 	bl	8007376 <ld_dword>
 80077f8:	4603      	mov	r3, r0
 80077fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80077fe:	617b      	str	r3, [r7, #20]
			break;
 8007800:	e009      	b.n	8007816 <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 8007802:	2301      	movs	r3, #1
 8007804:	617b      	str	r3, [r7, #20]
 8007806:	e006      	b.n	8007816 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007808:	bf00      	nop
 800780a:	e004      	b.n	8007816 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800780c:	bf00      	nop
 800780e:	e002      	b.n	8007816 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007810:	bf00      	nop
 8007812:	e000      	b.n	8007816 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007814:	bf00      	nop
		}
	}

	return val;
 8007816:	697b      	ldr	r3, [r7, #20]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007820:	b590      	push	{r4, r7, lr}
 8007822:	b089      	sub	sp, #36	@ 0x24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800782c:	2302      	movs	r3, #2
 800782e:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2b01      	cmp	r3, #1
 8007834:	f240 8109 	bls.w	8007a4a <put_fat+0x22a>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	429a      	cmp	r2, r3
 8007840:	f080 8103 	bcs.w	8007a4a <put_fat+0x22a>
		switch (fs->fs_type) {
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	2b03      	cmp	r3, #3
 800784a:	f000 80b6 	beq.w	80079ba <put_fat+0x19a>
 800784e:	2b03      	cmp	r3, #3
 8007850:	f300 80fb 	bgt.w	8007a4a <put_fat+0x22a>
 8007854:	2b01      	cmp	r3, #1
 8007856:	d003      	beq.n	8007860 <put_fat+0x40>
 8007858:	2b02      	cmp	r3, #2
 800785a:	f000 8083 	beq.w	8007964 <put_fat+0x144>
 800785e:	e0f4      	b.n	8007a4a <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	61bb      	str	r3, [r7, #24]
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	085b      	lsrs	r3, r3, #1
 8007868:	69ba      	ldr	r2, [r7, #24]
 800786a:	4413      	add	r3, r2
 800786c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	899b      	ldrh	r3, [r3, #12]
 8007876:	4619      	mov	r1, r3
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	fbb3 f3f1 	udiv	r3, r3, r1
 800787e:	4413      	add	r3, r2
 8007880:	4619      	mov	r1, r3
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f7ff fe3f 	bl	8007506 <move_window>
 8007888:	4603      	mov	r3, r0
 800788a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800788c:	7ffb      	ldrb	r3, [r7, #31]
 800788e:	2b00      	cmp	r3, #0
 8007890:	f040 80d4 	bne.w	8007a3c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	1c5a      	adds	r2, r3, #1
 800789e:	61ba      	str	r2, [r7, #24]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	8992      	ldrh	r2, [r2, #12]
 80078a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80078a8:	fb00 f202 	mul.w	r2, r0, r2
 80078ac:	1a9b      	subs	r3, r3, r2
 80078ae:	440b      	add	r3, r1
 80078b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00d      	beq.n	80078d8 <put_fat+0xb8>
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	b25b      	sxtb	r3, r3
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	b25a      	sxtb	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	b25b      	sxtb	r3, r3
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	b25b      	sxtb	r3, r3
 80078d0:	4313      	orrs	r3, r2
 80078d2:	b25b      	sxtb	r3, r3
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	e001      	b.n	80078dc <put_fat+0xbc>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2201      	movs	r2, #1
 80078e4:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	899b      	ldrh	r3, [r3, #12]
 80078ee:	4619      	mov	r1, r3
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80078f6:	4413      	add	r3, r2
 80078f8:	4619      	mov	r1, r3
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7ff fe03 	bl	8007506 <move_window>
 8007900:	4603      	mov	r3, r0
 8007902:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007904:	7ffb      	ldrb	r3, [r7, #31]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f040 809a 	bne.w	8007a40 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	899b      	ldrh	r3, [r3, #12]
 8007916:	461a      	mov	r2, r3
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	fbb3 f0f2 	udiv	r0, r3, r2
 800791e:	fb00 f202 	mul.w	r2, r0, r2
 8007922:	1a9b      	subs	r3, r3, r2
 8007924:	440b      	add	r3, r1
 8007926:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <put_fat+0x11a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	091b      	lsrs	r3, r3, #4
 8007936:	b2db      	uxtb	r3, r3
 8007938:	e00e      	b.n	8007958 <put_fat+0x138>
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	b25b      	sxtb	r3, r3
 8007940:	f023 030f 	bic.w	r3, r3, #15
 8007944:	b25a      	sxtb	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	0a1b      	lsrs	r3, r3, #8
 800794a:	b25b      	sxtb	r3, r3
 800794c:	f003 030f 	and.w	r3, r3, #15
 8007950:	b25b      	sxtb	r3, r3
 8007952:	4313      	orrs	r3, r2
 8007954:	b25b      	sxtb	r3, r3
 8007956:	b2db      	uxtb	r3, r3
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2201      	movs	r2, #1
 8007960:	711a      	strb	r2, [r3, #4]
			break;
 8007962:	e072      	b.n	8007a4a <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	899b      	ldrh	r3, [r3, #12]
 800796c:	085b      	lsrs	r3, r3, #1
 800796e:	b29b      	uxth	r3, r3
 8007970:	4619      	mov	r1, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	fbb3 f3f1 	udiv	r3, r3, r1
 8007978:	4413      	add	r3, r2
 800797a:	4619      	mov	r1, r3
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f7ff fdc2 	bl	8007506 <move_window>
 8007982:	4603      	mov	r3, r0
 8007984:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007986:	7ffb      	ldrb	r3, [r7, #31]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d15b      	bne.n	8007a44 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	8992      	ldrh	r2, [r2, #12]
 800799a:	fbb3 f0f2 	udiv	r0, r3, r2
 800799e:	fb00 f202 	mul.w	r2, r0, r2
 80079a2:	1a9b      	subs	r3, r3, r2
 80079a4:	440b      	add	r3, r1
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	b292      	uxth	r2, r2
 80079aa:	4611      	mov	r1, r2
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7ff fd05 	bl	80073bc <st_word>
			fs->wflag = 1;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2201      	movs	r2, #1
 80079b6:	711a      	strb	r2, [r3, #4]
			break;
 80079b8:	e047      	b.n	8007a4a <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	899b      	ldrh	r3, [r3, #12]
 80079c2:	089b      	lsrs	r3, r3, #2
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	4619      	mov	r1, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80079ce:	4413      	add	r3, r2
 80079d0:	4619      	mov	r1, r3
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f7ff fd97 	bl	8007506 <move_window>
 80079d8:	4603      	mov	r3, r0
 80079da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079dc:	7ffb      	ldrb	r3, [r7, #31]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d132      	bne.n	8007a48 <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	8992      	ldrh	r2, [r2, #12]
 80079f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80079fa:	fb00 f202 	mul.w	r2, r0, r2
 80079fe:	1a9b      	subs	r3, r3, r2
 8007a00:	440b      	add	r3, r1
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff fcb7 	bl	8007376 <ld_dword>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007a0e:	4323      	orrs	r3, r4
 8007a10:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	8992      	ldrh	r2, [r2, #12]
 8007a20:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a24:	fb00 f202 	mul.w	r2, r0, r2
 8007a28:	1a9b      	subs	r3, r3, r2
 8007a2a:	440b      	add	r3, r1
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7ff fcdf 	bl	80073f2 <st_dword>
			fs->wflag = 1;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2201      	movs	r2, #1
 8007a38:	711a      	strb	r2, [r3, #4]
			break;
 8007a3a:	e006      	b.n	8007a4a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007a3c:	bf00      	nop
 8007a3e:	e004      	b.n	8007a4a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007a40:	bf00      	nop
 8007a42:	e002      	b.n	8007a4a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007a44:	bf00      	nop
 8007a46:	e000      	b.n	8007a4a <put_fat+0x22a>
			if (res != FR_OK) break;
 8007a48:	bf00      	nop
		}
	}
	return res;
 8007a4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3724      	adds	r7, #36	@ 0x24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd90      	pop	{r4, r7, pc}

08007a54 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d904      	bls.n	8007a7a <remove_chain+0x26>
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d301      	bcc.n	8007a7e <remove_chain+0x2a>
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	e04b      	b.n	8007b16 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00c      	beq.n	8007a9e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007a84:	f04f 32ff 	mov.w	r2, #4294967295
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	69b8      	ldr	r0, [r7, #24]
 8007a8c:	f7ff fec8 	bl	8007820 <put_fat>
 8007a90:	4603      	mov	r3, r0
 8007a92:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007a94:	7ffb      	ldrb	r3, [r7, #31]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <remove_chain+0x4a>
 8007a9a:	7ffb      	ldrb	r3, [r7, #31]
 8007a9c:	e03b      	b.n	8007b16 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f7ff fdea 	bl	800767a <get_fat>
 8007aa6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d031      	beq.n	8007b12 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d101      	bne.n	8007ab8 <remove_chain+0x64>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e02e      	b.n	8007b16 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abe:	d101      	bne.n	8007ac4 <remove_chain+0x70>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e028      	b.n	8007b16 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	68b9      	ldr	r1, [r7, #8]
 8007ac8:	69b8      	ldr	r0, [r7, #24]
 8007aca:	f7ff fea9 	bl	8007820 <put_fat>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007ad2:	7ffb      	ldrb	r3, [r7, #31]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <remove_chain+0x88>
 8007ad8:	7ffb      	ldrb	r3, [r7, #31]
 8007ada:	e01c      	b.n	8007b16 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	695a      	ldr	r2, [r3, #20]
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	3b02      	subs	r3, #2
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d20b      	bcs.n	8007b02 <remove_chain+0xae>
			fs->free_clst++;
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	795b      	ldrb	r3, [r3, #5]
 8007af8:	f043 0301 	orr.w	r3, r3, #1
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d3c6      	bcc.n	8007a9e <remove_chain+0x4a>
 8007b10:	e000      	b.n	8007b14 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007b12:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3720      	adds	r7, #32
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b088      	sub	sp, #32
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10d      	bne.n	8007b50 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d004      	beq.n	8007b4a <create_chain+0x2c>
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d31b      	bcc.n	8007b82 <create_chain+0x64>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	61bb      	str	r3, [r7, #24]
 8007b4e:	e018      	b.n	8007b82 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff fd91 	bl	800767a <get_fat>
 8007b58:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d801      	bhi.n	8007b64 <create_chain+0x46>
 8007b60:	2301      	movs	r3, #1
 8007b62:	e0a9      	b.n	8007cb8 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6a:	d101      	bne.n	8007b70 <create_chain+0x52>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	e0a3      	b.n	8007cb8 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d201      	bcs.n	8007b7e <create_chain+0x60>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	e09c      	b.n	8007cb8 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <create_chain+0x70>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e094      	b.n	8007cb8 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d129      	bne.n	8007bee <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	69fa      	ldr	r2, [r7, #28]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d301      	bcc.n	8007bae <create_chain+0x90>
 8007baa:	2302      	movs	r3, #2
 8007bac:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8007bae:	69f9      	ldr	r1, [r7, #28]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff fd62 	bl	800767a <get_fat>
 8007bb6:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d003      	beq.n	8007bc6 <create_chain+0xa8>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc4:	d101      	bne.n	8007bca <create_chain+0xac>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	e076      	b.n	8007cb8 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00e      	beq.n	8007bee <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d906      	bls.n	8007bea <create_chain+0xcc>
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d201      	bcs.n	8007bea <create_chain+0xcc>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d129      	bne.n	8007c48 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	69fa      	ldr	r2, [r7, #28]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d307      	bcc.n	8007c18 <create_chain+0xfa>
					ncl = 2;
 8007c08:	2302      	movs	r3, #2
 8007c0a:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d901      	bls.n	8007c18 <create_chain+0xfa>
 8007c14:	2300      	movs	r3, #0
 8007c16:	e04f      	b.n	8007cb8 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007c18:	69f9      	ldr	r1, [r7, #28]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7ff fd2d 	bl	800767a <get_fat>
 8007c20:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00e      	beq.n	8007c46 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d003      	beq.n	8007c36 <create_chain+0x118>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d101      	bne.n	8007c3a <create_chain+0x11c>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	e03e      	b.n	8007cb8 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d1da      	bne.n	8007bf8 <create_chain+0xda>
 8007c42:	2300      	movs	r3, #0
 8007c44:	e038      	b.n	8007cb8 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8007c46:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8007c48:	f04f 32ff 	mov.w	r2, #4294967295
 8007c4c:	69f9      	ldr	r1, [r7, #28]
 8007c4e:	6938      	ldr	r0, [r7, #16]
 8007c50:	f7ff fde6 	bl	8007820 <put_fat>
 8007c54:	4603      	mov	r3, r0
 8007c56:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d109      	bne.n	8007c72 <create_chain+0x154>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d006      	beq.n	8007c72 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8007c64:	69fa      	ldr	r2, [r7, #28]
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6938      	ldr	r0, [r7, #16]
 8007c6a:	f7ff fdd9 	bl	8007820 <put_fat>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d116      	bne.n	8007ca6 <create_chain+0x188>
		fs->last_clst = ncl;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	695a      	ldr	r2, [r3, #20]
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	3b02      	subs	r3, #2
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d804      	bhi.n	8007c96 <create_chain+0x178>
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	1e5a      	subs	r2, r3, #1
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	795b      	ldrb	r3, [r3, #5]
 8007c9a:	f043 0301 	orr.w	r3, r3, #1
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	715a      	strb	r2, [r3, #5]
 8007ca4:	e007      	b.n	8007cb6 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d102      	bne.n	8007cb2 <create_chain+0x194>
 8007cac:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb0:	e000      	b.n	8007cb4 <create_chain+0x196>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007cb6:	69fb      	ldr	r3, [r7, #28]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3720      	adds	r7, #32
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7ff fbdf 	bl	800748e <sync_window>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <dir_clear+0x1a>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e036      	b.n	8007d48 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7ff fcad 	bl	800763c <clst2sect>
 8007ce2:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3334      	adds	r3, #52	@ 0x34
 8007cee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f00d fb91 	bl	801541c <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3334      	adds	r3, #52	@ 0x34
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	2301      	movs	r3, #1
 8007d02:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8007d04:	2300      	movs	r3, #0
 8007d06:	617b      	str	r3, [r7, #20]
 8007d08:	e003      	b.n	8007d12 <dir_clear+0x52>
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	4413      	add	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	895b      	ldrh	r3, [r3, #10]
 8007d16:	461a      	mov	r2, r3
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d20b      	bcs.n	8007d36 <dir_clear+0x76>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7858      	ldrb	r0, [r3, #1]
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	441a      	add	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	68f9      	ldr	r1, [r7, #12]
 8007d2c:	f7ff fa54 	bl	80071d8 <disk_write>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d0e9      	beq.n	8007d0a <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	895b      	ldrh	r3, [r3, #10]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	bf14      	ite	ne
 8007d42:	2301      	movne	r3, #1
 8007d44:	2300      	moveq	r3, #0
 8007d46:	b2db      	uxtb	r3, r3
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d66:	d204      	bcs.n	8007d72 <dir_sdi+0x22>
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	f003 031f 	and.w	r3, r3, #31
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007d72:	2302      	movs	r3, #2
 8007d74:	e071      	b.n	8007e5a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d106      	bne.n	8007d96 <dir_sdi+0x46>
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d902      	bls.n	8007d96 <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d94:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10c      	bne.n	8007db6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	095b      	lsrs	r3, r3, #5
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	8912      	ldrh	r2, [r2, #8]
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d301      	bcc.n	8007dac <dir_sdi+0x5c>
 8007da8:	2302      	movs	r3, #2
 8007daa:	e056      	b.n	8007e5a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	619a      	str	r2, [r3, #24]
 8007db4:	e02d      	b.n	8007e12 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	895b      	ldrh	r3, [r3, #10]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	899b      	ldrh	r3, [r3, #12]
 8007dc0:	fb02 f303 	mul.w	r3, r2, r3
 8007dc4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007dc6:	e019      	b.n	8007dfc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6979      	ldr	r1, [r7, #20]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff fc54 	bl	800767a <get_fat>
 8007dd2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dda:	d101      	bne.n	8007de0 <dir_sdi+0x90>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e03c      	b.n	8007e5a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d904      	bls.n	8007df0 <dir_sdi+0xa0>
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d301      	bcc.n	8007df4 <dir_sdi+0xa4>
 8007df0:	2302      	movs	r3, #2
 8007df2:	e032      	b.n	8007e5a <dir_sdi+0x10a>
			ofs -= csz;
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d2e1      	bcs.n	8007dc8 <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 8007e04:	6979      	ldr	r1, [r7, #20]
 8007e06:	6938      	ldr	r0, [r7, #16]
 8007e08:	f7ff fc18 	bl	800763c <clst2sect>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <dir_sdi+0xd4>
 8007e20:	2302      	movs	r3, #2
 8007e22:	e01a      	b.n	8007e5a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	699a      	ldr	r2, [r3, #24]
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	899b      	ldrh	r3, [r3, #12]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e34:	441a      	add	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	899b      	ldrh	r3, [r3, #12]
 8007e44:	461a      	mov	r2, r3
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e4c:	fb00 f202 	mul.w	r2, r0, r2
 8007e50:	1a9b      	subs	r3, r3, r2
 8007e52:	18ca      	adds	r2, r1, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b086      	sub	sp, #24
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	3320      	adds	r3, #32
 8007e78:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e80:	d302      	bcc.n	8007e88 <dir_next+0x26>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <dir_next+0x32>
 8007e90:	2304      	movs	r3, #4
 8007e92:	e088      	b.n	8007fa6 <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	899b      	ldrh	r3, [r3, #12]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ea0:	fb01 f202 	mul.w	r2, r1, r2
 8007ea4:	1a9b      	subs	r3, r3, r2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d16a      	bne.n	8007f80 <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	1c5a      	adds	r2, r3, #1
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	095b      	lsrs	r3, r3, #5
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	8912      	ldrh	r2, [r2, #8]
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d35b      	bcc.n	8007f80 <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	619a      	str	r2, [r3, #24]
 8007ece:	2304      	movs	r3, #4
 8007ed0:	e069      	b.n	8007fa6 <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	899b      	ldrh	r3, [r3, #12]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	8952      	ldrh	r2, [r2, #10]
 8007ee2:	3a01      	subs	r2, #1
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d14a      	bne.n	8007f80 <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	f7ff fbc1 	bl	800767a <get_fat>
 8007ef8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d801      	bhi.n	8007f04 <dir_next+0xa2>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e050      	b.n	8007fa6 <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0a:	d101      	bne.n	8007f10 <dir_next+0xae>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e04a      	b.n	8007fa6 <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d328      	bcc.n	8007f6c <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d104      	bne.n	8007f2a <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	619a      	str	r2, [r3, #24]
 8007f26:	2304      	movs	r3, #4
 8007f28:	e03d      	b.n	8007fa6 <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	f7ff fdf3 	bl	8007b1e <create_chain>
 8007f38:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <dir_next+0xe2>
 8007f40:	2307      	movs	r3, #7
 8007f42:	e030      	b.n	8007fa6 <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d101      	bne.n	8007f4e <dir_next+0xec>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e02b      	b.n	8007fa6 <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f54:	d101      	bne.n	8007f5a <dir_next+0xf8>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e025      	b.n	8007fa6 <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8007f5a:	6979      	ldr	r1, [r7, #20]
 8007f5c:	6938      	ldr	r0, [r7, #16]
 8007f5e:	f7ff feaf 	bl	8007cc0 <dir_clear>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <dir_next+0x10a>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e01c      	b.n	8007fa6 <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8007f72:	6979      	ldr	r1, [r7, #20]
 8007f74:	6938      	ldr	r0, [r7, #16]
 8007f76:	f7ff fb61 	bl	800763c <clst2sect>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	899b      	ldrh	r3, [r3, #12]
 8007f90:	461a      	mov	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f98:	fb00 f202 	mul.w	r2, r0, r2
 8007f9c:	1a9b      	subs	r3, r3, r2
 8007f9e:	18ca      	adds	r2, r1, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b086      	sub	sp, #24
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff fec5 	bl	8007d50 <dir_sdi>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d12b      	bne.n	8008028 <dir_alloc+0x7a>
		n = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f7ff fa93 	bl	8007506 <move_window>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d11d      	bne.n	8008026 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2be5      	cmp	r3, #229	@ 0xe5
 8007ff2:	d004      	beq.n	8007ffe <dir_alloc+0x50>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	69db      	ldr	r3, [r3, #28]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d107      	bne.n	800800e <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	3301      	adds	r3, #1
 8008002:	613b      	str	r3, [r7, #16]
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	429a      	cmp	r2, r3
 800800a:	d102      	bne.n	8008012 <dir_alloc+0x64>
 800800c:	e00c      	b.n	8008028 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 800800e:	2300      	movs	r3, #0
 8008010:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8008012:	2101      	movs	r1, #1
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7ff ff24 	bl	8007e62 <dir_next>
 800801a:	4603      	mov	r3, r0
 800801c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800801e:	7dfb      	ldrb	r3, [r7, #23]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d0d7      	beq.n	8007fd4 <dir_alloc+0x26>
 8008024:	e000      	b.n	8008028 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008026:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	2b04      	cmp	r3, #4
 800802c:	d101      	bne.n	8008032 <dir_alloc+0x84>
 800802e:	2307      	movs	r3, #7
 8008030:	75fb      	strb	r3, [r7, #23]
	return res;
 8008032:	7dfb      	ldrb	r3, [r7, #23]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	331a      	adds	r3, #26
 800804a:	4618      	mov	r0, r3
 800804c:	f7ff f97a 	bl	8007344 <ld_word>
 8008050:	4603      	mov	r3, r0
 8008052:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b03      	cmp	r3, #3
 800805a:	d109      	bne.n	8008070 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	3314      	adds	r3, #20
 8008060:	4618      	mov	r0, r3
 8008062:	f7ff f96f 	bl	8007344 <ld_word>
 8008066:	4603      	mov	r3, r0
 8008068:	041b      	lsls	r3, r3, #16
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	4313      	orrs	r3, r2
 800806e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008070:	68fb      	ldr	r3, [r7, #12]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	331a      	adds	r3, #26
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	b292      	uxth	r2, r2
 800808e:	4611      	mov	r1, r2
 8008090:	4618      	mov	r0, r3
 8008092:	f7ff f993 	bl	80073bc <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b03      	cmp	r3, #3
 800809c:	d109      	bne.n	80080b2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f103 0214 	add.w	r2, r3, #20
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	0c1b      	lsrs	r3, r3, #16
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	4619      	mov	r1, r3
 80080ac:	4610      	mov	r0, r2
 80080ae:	f7ff f985 	bl	80073bc <st_word>
	}
}
 80080b2:	bf00      	nop
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b086      	sub	sp, #24
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80080c8:	2100      	movs	r1, #0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7ff fe40 	bl	8007d50 <dir_sdi>
 80080d0:	4603      	mov	r3, r0
 80080d2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <dir_find+0x24>
 80080da:	7dfb      	ldrb	r3, [r7, #23]
 80080dc:	e03e      	b.n	800815c <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	4619      	mov	r1, r3
 80080e4:	6938      	ldr	r0, [r7, #16]
 80080e6:	f7ff fa0e 	bl	8007506 <move_window>
 80080ea:	4603      	mov	r3, r0
 80080ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d12f      	bne.n	8008154 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d102      	bne.n	8008108 <dir_find+0x4e>
 8008102:	2304      	movs	r3, #4
 8008104:	75fb      	strb	r3, [r7, #23]
 8008106:	e028      	b.n	800815a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	330b      	adds	r3, #11
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008114:	b2da      	uxtb	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	330b      	adds	r3, #11
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	f003 0308 	and.w	r3, r3, #8
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10a      	bne.n	8008140 <dir_find+0x86>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	69d8      	ldr	r0, [r3, #28]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	3320      	adds	r3, #32
 8008132:	220b      	movs	r2, #11
 8008134:	4619      	mov	r1, r3
 8008136:	f00d f961 	bl	80153fc <memcmp>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00b      	beq.n	8008158 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008140:	2100      	movs	r1, #0
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7ff fe8d 	bl	8007e62 <dir_next>
 8008148:	4603      	mov	r3, r0
 800814a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d0c5      	beq.n	80080de <dir_find+0x24>
 8008152:	e002      	b.n	800815a <dir_find+0xa0>
		if (res != FR_OK) break;
 8008154:	bf00      	nop
 8008156:	e000      	b.n	800815a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008158:	bf00      	nop

	return res;
 800815a:	7dfb      	ldrb	r3, [r7, #23]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008172:	2101      	movs	r1, #1
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff ff1a 	bl	8007fae <dir_alloc>
 800817a:	4603      	mov	r3, r0
 800817c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800817e:	7bfb      	ldrb	r3, [r7, #15]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d11c      	bne.n	80081be <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	4619      	mov	r1, r3
 800818a:	68b8      	ldr	r0, [r7, #8]
 800818c:	f7ff f9bb 	bl	8007506 <move_window>
 8008190:	4603      	mov	r3, r0
 8008192:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d111      	bne.n	80081be <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	2220      	movs	r2, #32
 80081a0:	2100      	movs	r1, #0
 80081a2:	4618      	mov	r0, r3
 80081a4:	f00d f93a 	bl	801541c <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	69d8      	ldr	r0, [r3, #28]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3320      	adds	r3, #32
 80081b0:	220b      	movs	r2, #11
 80081b2:	4619      	mov	r1, r3
 80081b4:	f00d f9b6 	bl	8015524 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2201      	movs	r2, #1
 80081bc:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08a      	sub	sp, #40	@ 0x28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	3320      	adds	r3, #32
 80081dc:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 80081de:	220b      	movs	r2, #11
 80081e0:	2120      	movs	r1, #32
 80081e2:	6938      	ldr	r0, [r7, #16]
 80081e4:	f00d f91a 	bl	801541c <memset>
	si = i = 0; ni = 8;
 80081e8:	2300      	movs	r3, #0
 80081ea:	61bb      	str	r3, [r7, #24]
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	61fb      	str	r3, [r7, #28]
 80081f0:	2308      	movs	r3, #8
 80081f2:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	61fa      	str	r2, [r7, #28]
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4413      	add	r3, r2
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008204:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008208:	2b20      	cmp	r3, #32
 800820a:	f240 8089 	bls.w	8008320 <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 800820e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008212:	2b2f      	cmp	r3, #47	@ 0x2f
 8008214:	d007      	beq.n	8008226 <create_name+0x5e>
 8008216:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800821a:	2b5c      	cmp	r3, #92	@ 0x5c
 800821c:	d110      	bne.n	8008240 <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 800821e:	e002      	b.n	8008226 <create_name+0x5e>
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	3301      	adds	r3, #1
 8008224:	61fb      	str	r3, [r7, #28]
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	4413      	add	r3, r2
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	2b2f      	cmp	r3, #47	@ 0x2f
 8008230:	d0f6      	beq.n	8008220 <create_name+0x58>
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	4413      	add	r3, r2
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2b5c      	cmp	r3, #92	@ 0x5c
 800823c:	d0f0      	beq.n	8008220 <create_name+0x58>
			break;
 800823e:	e070      	b.n	8008322 <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8008240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008244:	2b2e      	cmp	r3, #46	@ 0x2e
 8008246:	d003      	beq.n	8008250 <create_name+0x88>
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	429a      	cmp	r2, r3
 800824e:	d30d      	bcc.n	800826c <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8008250:	6a3b      	ldr	r3, [r7, #32]
 8008252:	2b0b      	cmp	r3, #11
 8008254:	d003      	beq.n	800825e <create_name+0x96>
 8008256:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800825a:	2b2e      	cmp	r3, #46	@ 0x2e
 800825c:	d001      	beq.n	8008262 <create_name+0x9a>
 800825e:	2306      	movs	r3, #6
 8008260:	e081      	b.n	8008366 <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 8008262:	2308      	movs	r3, #8
 8008264:	61bb      	str	r3, [r7, #24]
 8008266:	230b      	movs	r3, #11
 8008268:	623b      	str	r3, [r7, #32]
			continue;
 800826a:	e058      	b.n	800831e <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 800826c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008270:	2b00      	cmp	r3, #0
 8008272:	da07      	bge.n	8008284 <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8008274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800827c:	4a3c      	ldr	r2, [pc, #240]	@ (8008370 <create_name+0x1a8>)
 800827e:	5cd3      	ldrb	r3, [r2, r3]
 8008280:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8008284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008288:	4618      	mov	r0, r3
 800828a:	f7ff f8de 	bl	800744a <dbc_1st>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d024      	beq.n	80082de <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	1c5a      	adds	r2, r3, #1
 8008298:	61fa      	str	r2, [r7, #28]
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	4413      	add	r3, r2
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff f8e1 	bl	800746c <dbc_2nd>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <create_name+0xf2>
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	3b01      	subs	r3, #1
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d301      	bcc.n	80082be <create_name+0xf6>
 80082ba:	2306      	movs	r3, #6
 80082bc:	e053      	b.n	8008366 <create_name+0x19e>
			sfn[i++] = c;
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	61ba      	str	r2, [r7, #24]
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	4413      	add	r3, r2
 80082c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80082cc:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	1c5a      	adds	r2, r3, #1
 80082d2:	61ba      	str	r2, [r7, #24]
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	4413      	add	r3, r2
 80082d8:	7bfa      	ldrb	r2, [r7, #15]
 80082da:	701a      	strb	r2, [r3, #0]
 80082dc:	e78a      	b.n	80081f4 <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80082de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082e2:	4619      	mov	r1, r3
 80082e4:	4823      	ldr	r0, [pc, #140]	@ (8008374 <create_name+0x1ac>)
 80082e6:	f00d f8a1 	bl	801542c <strchr>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <create_name+0x12c>
 80082f0:	2306      	movs	r3, #6
 80082f2:	e038      	b.n	8008366 <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80082f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082f8:	2b60      	cmp	r3, #96	@ 0x60
 80082fa:	d908      	bls.n	800830e <create_name+0x146>
 80082fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008300:	2b7a      	cmp	r3, #122	@ 0x7a
 8008302:	d804      	bhi.n	800830e <create_name+0x146>
 8008304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008308:	3b20      	subs	r3, #32
 800830a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	61ba      	str	r2, [r7, #24]
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	4413      	add	r3, r2
 8008318:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800831c:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 800831e:	e769      	b.n	80081f4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008320:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	441a      	add	r2, r3
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <create_name+0x16e>
 8008332:	2306      	movs	r3, #6
 8008334:	e017      	b.n	8008366 <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	2be5      	cmp	r3, #229	@ 0xe5
 800833c:	d102      	bne.n	8008344 <create_name+0x17c>
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	2205      	movs	r2, #5
 8008342:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8008344:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008348:	2b20      	cmp	r3, #32
 800834a:	d905      	bls.n	8008358 <create_name+0x190>
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	4413      	add	r3, r2
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	2b20      	cmp	r3, #32
 8008356:	d801      	bhi.n	800835c <create_name+0x194>
 8008358:	2204      	movs	r2, #4
 800835a:	e000      	b.n	800835e <create_name+0x196>
 800835c:	2200      	movs	r2, #0
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	330b      	adds	r3, #11
 8008362:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008364:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8008366:	4618      	mov	r0, r3
 8008368:	3728      	adds	r7, #40	@ 0x28
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	08016b6c 	.word	0x08016b6c
 8008374:	08016ac8 	.word	0x08016ac8

08008378 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8008388:	e002      	b.n	8008390 <follow_path+0x18>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	3301      	adds	r3, #1
 800838e:	603b      	str	r3, [r7, #0]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b2f      	cmp	r3, #47	@ 0x2f
 8008396:	d0f8      	beq.n	800838a <follow_path+0x12>
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2b5c      	cmp	r3, #92	@ 0x5c
 800839e:	d0f4      	beq.n	800838a <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b1f      	cmp	r3, #31
 80083ac:	d80a      	bhi.n	80083c4 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2280      	movs	r2, #128	@ 0x80
 80083b2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 80083b6:	2100      	movs	r1, #0
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff fcc9 	bl	8007d50 <dir_sdi>
 80083be:	4603      	mov	r3, r0
 80083c0:	75fb      	strb	r3, [r7, #23]
 80083c2:	e048      	b.n	8008456 <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80083c4:	463b      	mov	r3, r7
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7ff fefd 	bl	80081c8 <create_name>
 80083ce:	4603      	mov	r3, r0
 80083d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d139      	bne.n	800844c <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7ff fe6e 	bl	80080ba <dir_find>
 80083de:	4603      	mov	r3, r0
 80083e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80083e8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00a      	beq.n	8008406 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d12c      	bne.n	8008450 <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d127      	bne.n	8008450 <follow_path+0xd8>
 8008400:	2305      	movs	r3, #5
 8008402:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008404:	e024      	b.n	8008450 <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8008406:	7bfb      	ldrb	r3, [r7, #15]
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d121      	bne.n	8008454 <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	799b      	ldrb	r3, [r3, #6]
 8008414:	f003 0310 	and.w	r3, r3, #16
 8008418:	2b00      	cmp	r3, #0
 800841a:	d102      	bne.n	8008422 <follow_path+0xaa>
				res = FR_NO_PATH; break;
 800841c:	2305      	movs	r3, #5
 800841e:	75fb      	strb	r3, [r7, #23]
 8008420:	e019      	b.n	8008456 <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	8992      	ldrh	r2, [r2, #12]
 8008430:	fbb3 f0f2 	udiv	r0, r3, r2
 8008434:	fb00 f202 	mul.w	r2, r0, r2
 8008438:	1a9b      	subs	r3, r3, r2
 800843a:	440b      	add	r3, r1
 800843c:	4619      	mov	r1, r3
 800843e:	6938      	ldr	r0, [r7, #16]
 8008440:	f7ff fdfc 	bl	800803c <ld_clust>
 8008444:	4602      	mov	r2, r0
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800844a:	e7bb      	b.n	80083c4 <follow_path+0x4c>
			if (res != FR_OK) break;
 800844c:	bf00      	nop
 800844e:	e002      	b.n	8008456 <follow_path+0xde>
				break;
 8008450:	bf00      	nop
 8008452:	e000      	b.n	8008456 <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8008454:	bf00      	nop
			}
		}
	}

	return res;
 8008456:	7dfb      	ldrb	r3, [r7, #23]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8008460:	b480      	push	{r7}
 8008462:	b08b      	sub	sp, #44	@ 0x2c
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8008468:	f04f 33ff 	mov.w	r3, #4294967295
 800846c:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	627b      	str	r3, [r7, #36]	@ 0x24
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 8008478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <get_ldnumber+0x22>
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	e080      	b.n	8008584 <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	1c5a      	adds	r2, r3, #1
 8008486:	623a      	str	r2, [r7, #32]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 800848c:	7ffb      	ldrb	r3, [r7, #31]
 800848e:	2b20      	cmp	r3, #32
 8008490:	d902      	bls.n	8008498 <get_ldnumber+0x38>
 8008492:	7ffb      	ldrb	r3, [r7, #31]
 8008494:	2b3a      	cmp	r3, #58	@ 0x3a
 8008496:	d1f4      	bne.n	8008482 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8008498:	7ffb      	ldrb	r3, [r7, #31]
 800849a:	2b3a      	cmp	r3, #58	@ 0x3a
 800849c:	d11c      	bne.n	80084d8 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 800849e:	2302      	movs	r3, #2
 80084a0:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80084a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80084a8:	d90c      	bls.n	80084c4 <get_ldnumber+0x64>
 80084aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	2b39      	cmp	r3, #57	@ 0x39
 80084b0:	d808      	bhi.n	80084c4 <get_ldnumber+0x64>
 80084b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b4:	3302      	adds	r3, #2
 80084b6:	6a3a      	ldr	r2, [r7, #32]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d103      	bne.n	80084c4 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 80084bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	3b30      	subs	r3, #48	@ 0x30
 80084c2:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	dc04      	bgt.n	80084d4 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a3a      	ldr	r2, [r7, #32]
 80084d2:	601a      	str	r2, [r3, #0]
		}
		return vol;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	e055      	b.n	8008584 <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 80084d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80084de:	d14e      	bne.n	800857e <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 80084e0:	e002      	b.n	80084e8 <get_ldnumber+0x88>
 80084e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e4:	3301      	adds	r3, #1
 80084e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80084e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ea:	3301      	adds	r3, #1
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80084f0:	d0f7      	beq.n	80084e2 <get_ldnumber+0x82>
		i = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 80084f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f8:	623b      	str	r3, [r7, #32]
 80084fa:	4a25      	ldr	r2, [pc, #148]	@ (8008590 <get_ldnumber+0x130>)
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008502:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	1c5a      	adds	r2, r3, #1
 8008508:	613a      	str	r2, [r7, #16]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	73fb      	strb	r3, [r7, #15]
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	3301      	adds	r3, #1
 8008512:	623b      	str	r3, [r7, #32]
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	2b60      	cmp	r3, #96	@ 0x60
 800851e:	d905      	bls.n	800852c <get_ldnumber+0xcc>
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	2b7a      	cmp	r3, #122	@ 0x7a
 8008524:	d802      	bhi.n	800852c <get_ldnumber+0xcc>
 8008526:	7bfb      	ldrb	r3, [r7, #15]
 8008528:	3b20      	subs	r3, #32
 800852a:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 800852c:	7ffb      	ldrb	r3, [r7, #31]
 800852e:	2b60      	cmp	r3, #96	@ 0x60
 8008530:	d905      	bls.n	800853e <get_ldnumber+0xde>
 8008532:	7ffb      	ldrb	r3, [r7, #31]
 8008534:	2b7a      	cmp	r3, #122	@ 0x7a
 8008536:	d802      	bhi.n	800853e <get_ldnumber+0xde>
 8008538:	7ffb      	ldrb	r3, [r7, #31]
 800853a:	3b20      	subs	r3, #32
 800853c:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d003      	beq.n	800854c <get_ldnumber+0xec>
 8008544:	7bfa      	ldrb	r2, [r7, #15]
 8008546:	7ffb      	ldrb	r3, [r7, #31]
 8008548:	429a      	cmp	r2, r3
 800854a:	d0db      	beq.n	8008504 <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d105      	bne.n	800855e <get_ldnumber+0xfe>
 8008552:	7ffb      	ldrb	r3, [r7, #31]
 8008554:	2b2f      	cmp	r3, #47	@ 0x2f
 8008556:	d008      	beq.n	800856a <get_ldnumber+0x10a>
 8008558:	7ffb      	ldrb	r3, [r7, #31]
 800855a:	2b20      	cmp	r3, #32
 800855c:	d905      	bls.n	800856a <get_ldnumber+0x10a>
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	3301      	adds	r3, #1
 8008562:	61bb      	str	r3, [r7, #24]
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	2b01      	cmp	r3, #1
 8008568:	ddc5      	ble.n	80084f6 <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	2b01      	cmp	r3, #1
 800856e:	dc04      	bgt.n	800857a <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a3a      	ldr	r2, [r7, #32]
 8008578:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	e002      	b.n	8008584 <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 800857e:	2300      	movs	r3, #0
 8008580:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8008582:	697b      	ldr	r3, [r7, #20]
}
 8008584:	4618      	mov	r0, r3
 8008586:	372c      	adds	r7, #44	@ 0x2c
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	2000016c 	.word	0x2000016c

08008594 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	711a      	strb	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f04f 32ff 	mov.w	r2, #4294967295
 80085aa:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7fe ffa9 	bl	8007506 <move_window>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <check_fs+0x2a>
 80085ba:	2304      	movs	r3, #4
 80085bc:	e088      	b.n	80086d0 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	3334      	adds	r3, #52	@ 0x34
 80085c2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe febc 	bl	8007344 <ld_word>
 80085cc:	4603      	mov	r3, r0
 80085ce:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80085d6:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 80085d8:	7b7b      	ldrb	r3, [r7, #13]
 80085da:	2beb      	cmp	r3, #235	@ 0xeb
 80085dc:	d005      	beq.n	80085ea <check_fs+0x56>
 80085de:	7b7b      	ldrb	r3, [r7, #13]
 80085e0:	2be9      	cmp	r3, #233	@ 0xe9
 80085e2:	d002      	beq.n	80085ea <check_fs+0x56>
 80085e4:	7b7b      	ldrb	r3, [r7, #13]
 80085e6:	2be8      	cmp	r3, #232	@ 0xe8
 80085e8:	d16a      	bne.n	80086c0 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 80085ea:	89fb      	ldrh	r3, [r7, #14]
 80085ec:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d10c      	bne.n	800860e <check_fs+0x7a>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3334      	adds	r3, #52	@ 0x34
 80085f8:	3352      	adds	r3, #82	@ 0x52
 80085fa:	2208      	movs	r2, #8
 80085fc:	4936      	ldr	r1, [pc, #216]	@ (80086d8 <check_fs+0x144>)
 80085fe:	4618      	mov	r0, r3
 8008600:	f00c fefc 	bl	80153fc <memcmp>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 800860a:	2300      	movs	r3, #0
 800860c:	e060      	b.n	80086d0 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3334      	adds	r3, #52	@ 0x34
 8008612:	330b      	adds	r3, #11
 8008614:	4618      	mov	r0, r3
 8008616:	f7fe fe95 	bl	8007344 <ld_word>
 800861a:	4603      	mov	r3, r0
 800861c:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008624:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8008626:	897a      	ldrh	r2, [r7, #10]
 8008628:	897b      	ldrh	r3, [r7, #10]
 800862a:	3b01      	subs	r3, #1
 800862c:	4013      	ands	r3, r2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d146      	bne.n	80086c0 <check_fs+0x12c>
 8008632:	897b      	ldrh	r3, [r7, #10]
 8008634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008638:	d342      	bcc.n	80086c0 <check_fs+0x12c>
 800863a:	897b      	ldrh	r3, [r7, #10]
 800863c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008640:	d83e      	bhi.n	80086c0 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8008642:	7b7b      	ldrb	r3, [r7, #13]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d03b      	beq.n	80086c0 <check_fs+0x12c>
 8008648:	7b7a      	ldrb	r2, [r7, #13]
 800864a:	7b7b      	ldrb	r3, [r7, #13]
 800864c:	3b01      	subs	r3, #1
 800864e:	4013      	ands	r3, r2
 8008650:	2b00      	cmp	r3, #0
 8008652:	d135      	bne.n	80086c0 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3334      	adds	r3, #52	@ 0x34
 8008658:	330e      	adds	r3, #14
 800865a:	4618      	mov	r0, r3
 800865c:	f7fe fe72 	bl	8007344 <ld_word>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d02c      	beq.n	80086c0 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800866c:	3b01      	subs	r3, #1
 800866e:	2b01      	cmp	r3, #1
 8008670:	d826      	bhi.n	80086c0 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	3334      	adds	r3, #52	@ 0x34
 8008676:	3311      	adds	r3, #17
 8008678:	4618      	mov	r0, r3
 800867a:	f7fe fe63 	bl	8007344 <ld_word>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d01d      	beq.n	80086c0 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3334      	adds	r3, #52	@ 0x34
 8008688:	3313      	adds	r3, #19
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe fe5a 	bl	8007344 <ld_word>
 8008690:	4603      	mov	r3, r0
 8008692:	2b7f      	cmp	r3, #127	@ 0x7f
 8008694:	d809      	bhi.n	80086aa <check_fs+0x116>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	3334      	adds	r3, #52	@ 0x34
 800869a:	3320      	adds	r3, #32
 800869c:	4618      	mov	r0, r3
 800869e:	f7fe fe6a 	bl	8007376 <ld_dword>
 80086a2:	4603      	mov	r3, r0
 80086a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086a8:	d30a      	bcc.n	80086c0 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	3334      	adds	r3, #52	@ 0x34
 80086ae:	3316      	adds	r3, #22
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fe fe47 	bl	8007344 <ld_word>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 80086bc:	2300      	movs	r3, #0
 80086be:	e007      	b.n	80086d0 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 80086c0:	89fb      	ldrh	r3, [r7, #14]
 80086c2:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d101      	bne.n	80086ce <check_fs+0x13a>
 80086ca:	2302      	movs	r3, #2
 80086cc:	e000      	b.n	80086d0 <check_fs+0x13c>
 80086ce:	2303      	movs	r3, #3
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	08016ad8 	.word	0x08016ad8

080086dc <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b088      	sub	sp, #32
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 80086e6:	2100      	movs	r1, #0
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7ff ff53 	bl	8008594 <check_fs>
 80086ee:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d007      	beq.n	8008706 <find_volume+0x2a>
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d802      	bhi.n	8008702 <find_volume+0x26>
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <find_volume+0x2a>
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	e045      	b.n	8008792 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8008706:	2300      	movs	r3, #0
 8008708:	61fb      	str	r3, [r7, #28]
 800870a:	e014      	b.n	8008736 <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	011b      	lsls	r3, r3, #4
 8008716:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 800871a:	4413      	add	r3, r2
 800871c:	4618      	mov	r0, r3
 800871e:	f7fe fe2a 	bl	8007376 <ld_dword>
 8008722:	4602      	mov	r2, r0
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	3320      	adds	r3, #32
 800872a:	443b      	add	r3, r7
 800872c:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	3301      	adds	r3, #1
 8008734:	61fb      	str	r3, [r7, #28]
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	2b03      	cmp	r3, #3
 800873a:	d9e7      	bls.n	800870c <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <find_volume+0x6c>
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	3b01      	subs	r3, #1
 8008746:	e000      	b.n	800874a <find_volume+0x6e>
 8008748:	2300      	movs	r3, #0
 800874a:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	3320      	adds	r3, #32
 8008752:	443b      	add	r3, r7
 8008754:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00b      	beq.n	8008774 <find_volume+0x98>
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	3320      	adds	r3, #32
 8008762:	443b      	add	r3, r7
 8008764:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff ff12 	bl	8008594 <check_fs>
 8008770:	4603      	mov	r3, r0
 8008772:	e000      	b.n	8008776 <find_volume+0x9a>
 8008774:	2303      	movs	r3, #3
 8008776:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d108      	bne.n	8008790 <find_volume+0xb4>
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d905      	bls.n	8008790 <find_volume+0xb4>
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	3301      	adds	r3, #1
 8008788:	61fb      	str	r3, [r7, #28]
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	2b03      	cmp	r3, #3
 800878e:	d9dd      	bls.n	800874c <find_volume+0x70>
	return fmt;
 8008790:	69bb      	ldr	r3, [r7, #24]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3720      	adds	r7, #32
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b090      	sub	sp, #64	@ 0x40
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	4613      	mov	r3, r2
 80087a8:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f7ff fe55 	bl	8008460 <get_ldnumber>
 80087b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 80087b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	da01      	bge.n	80087c2 <mount_volume+0x26>
 80087be:	230b      	movs	r3, #11
 80087c0:	e207      	b.n	8008bd2 <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80087c2:	4aa2      	ldr	r2, [pc, #648]	@ (8008a4c <mount_volume+0x2b0>)
 80087c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80087cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d101      	bne.n	80087d6 <mount_volume+0x3a>
 80087d2:	230c      	movs	r3, #12
 80087d4:	e1fd      	b.n	8008bd2 <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80087dc:	79fb      	ldrb	r3, [r7, #7]
 80087de:	f023 0301 	bic.w	r3, r3, #1
 80087e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80087e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d01a      	beq.n	8008822 <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 80087ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ee:	785b      	ldrb	r3, [r3, #1]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fe fc6f 	bl	80070d4 <disk_status>
 80087f6:	4603      	mov	r3, r0
 80087f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80087fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008800:	f003 0301 	and.w	r3, r3, #1
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10c      	bne.n	8008822 <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008808:	79fb      	ldrb	r3, [r7, #7]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d007      	beq.n	800881e <mount_volume+0x82>
 800880e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008812:	f003 0304 	and.w	r3, r3, #4
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 800881a:	230a      	movs	r3, #10
 800881c:	e1d9      	b.n	8008bd2 <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800881e:	2300      	movs	r3, #0
 8008820:	e1d7      	b.n	8008bd2 <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8008822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008824:	2200      	movs	r2, #0
 8008826:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8008828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882a:	785b      	ldrb	r3, [r3, #1]
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe fc79 	bl	8007124 <disk_initialize>
 8008832:	4603      	mov	r3, r0
 8008834:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008844:	2303      	movs	r3, #3
 8008846:	e1c4      	b.n	8008bd2 <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d007      	beq.n	800885e <mount_volume+0xc2>
 800884e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008852:	f003 0304 	and.w	r3, r3, #4
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 800885a:	230a      	movs	r3, #10
 800885c:	e1b9      	b.n	8008bd2 <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800885e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008860:	7858      	ldrb	r0, [r3, #1]
 8008862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008864:	330c      	adds	r3, #12
 8008866:	461a      	mov	r2, r3
 8008868:	2102      	movs	r1, #2
 800886a:	f7fe fce9 	bl	8007240 <disk_ioctl>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <mount_volume+0xdc>
 8008874:	2301      	movs	r3, #1
 8008876:	e1ac      	b.n	8008bd2 <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800887a:	899b      	ldrh	r3, [r3, #12]
 800887c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008880:	d80d      	bhi.n	800889e <mount_volume+0x102>
 8008882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008884:	899b      	ldrh	r3, [r3, #12]
 8008886:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800888a:	d308      	bcc.n	800889e <mount_volume+0x102>
 800888c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888e:	899b      	ldrh	r3, [r3, #12]
 8008890:	461a      	mov	r2, r3
 8008892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008894:	899b      	ldrh	r3, [r3, #12]
 8008896:	3b01      	subs	r3, #1
 8008898:	4013      	ands	r3, r2
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <mount_volume+0x106>
 800889e:	2301      	movs	r3, #1
 80088a0:	e197      	b.n	8008bd2 <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 80088a2:	2100      	movs	r1, #0
 80088a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088a6:	f7ff ff19 	bl	80086dc <find_volume>
 80088aa:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 80088ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	d101      	bne.n	80088b6 <mount_volume+0x11a>
 80088b2:	2301      	movs	r3, #1
 80088b4:	e18d      	b.n	8008bd2 <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d901      	bls.n	80088c0 <mount_volume+0x124>
 80088bc:	230d      	movs	r3, #13
 80088be:	e188      	b.n	8008bd2 <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 80088c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088c4:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80088c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c8:	3334      	adds	r3, #52	@ 0x34
 80088ca:	330b      	adds	r3, #11
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe fd39 	bl	8007344 <ld_word>
 80088d2:	4603      	mov	r3, r0
 80088d4:	461a      	mov	r2, r3
 80088d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d8:	899b      	ldrh	r3, [r3, #12]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d001      	beq.n	80088e2 <mount_volume+0x146>
 80088de:	230d      	movs	r3, #13
 80088e0:	e177      	b.n	8008bd2 <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80088e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e4:	3334      	adds	r3, #52	@ 0x34
 80088e6:	3316      	adds	r3, #22
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fe fd2b 	bl	8007344 <ld_word>
 80088ee:	4603      	mov	r3, r0
 80088f0:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80088f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d106      	bne.n	8008906 <mount_volume+0x16a>
 80088f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fa:	3334      	adds	r3, #52	@ 0x34
 80088fc:	3324      	adds	r3, #36	@ 0x24
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fe fd39 	bl	8007376 <ld_dword>
 8008904:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 8008906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008908:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800890a:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800890c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008914:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008918:	78db      	ldrb	r3, [r3, #3]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d005      	beq.n	800892a <mount_volume+0x18e>
 800891e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008920:	78db      	ldrb	r3, [r3, #3]
 8008922:	2b02      	cmp	r3, #2
 8008924:	d001      	beq.n	800892a <mount_volume+0x18e>
 8008926:	230d      	movs	r3, #13
 8008928:	e153      	b.n	8008bd2 <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800892a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892c:	78db      	ldrb	r3, [r3, #3]
 800892e:	461a      	mov	r2, r3
 8008930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008932:	fb02 f303 	mul.w	r3, r2, r3
 8008936:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800893e:	461a      	mov	r2, r3
 8008940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008942:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008946:	895b      	ldrh	r3, [r3, #10]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d008      	beq.n	800895e <mount_volume+0x1c2>
 800894c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894e:	895b      	ldrh	r3, [r3, #10]
 8008950:	461a      	mov	r2, r3
 8008952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008954:	895b      	ldrh	r3, [r3, #10]
 8008956:	3b01      	subs	r3, #1
 8008958:	4013      	ands	r3, r2
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <mount_volume+0x1c6>
 800895e:	230d      	movs	r3, #13
 8008960:	e137      	b.n	8008bd2 <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008964:	3334      	adds	r3, #52	@ 0x34
 8008966:	3311      	adds	r3, #17
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe fceb 	bl	8007344 <ld_word>
 800896e:	4603      	mov	r3, r0
 8008970:	461a      	mov	r2, r3
 8008972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008974:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	891b      	ldrh	r3, [r3, #8]
 800897a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800897c:	8992      	ldrh	r2, [r2, #12]
 800897e:	0952      	lsrs	r2, r2, #5
 8008980:	b292      	uxth	r2, r2
 8008982:	fbb3 f1f2 	udiv	r1, r3, r2
 8008986:	fb01 f202 	mul.w	r2, r1, r2
 800898a:	1a9b      	subs	r3, r3, r2
 800898c:	b29b      	uxth	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <mount_volume+0x1fa>
 8008992:	230d      	movs	r3, #13
 8008994:	e11d      	b.n	8008bd2 <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008998:	3334      	adds	r3, #52	@ 0x34
 800899a:	3313      	adds	r3, #19
 800899c:	4618      	mov	r0, r3
 800899e:	f7fe fcd1 	bl	8007344 <ld_word>
 80089a2:	4603      	mov	r3, r0
 80089a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80089a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d106      	bne.n	80089ba <mount_volume+0x21e>
 80089ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ae:	3334      	adds	r3, #52	@ 0x34
 80089b0:	3320      	adds	r3, #32
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fcdf 	bl	8007376 <ld_dword>
 80089b8:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80089ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089bc:	3334      	adds	r3, #52	@ 0x34
 80089be:	330e      	adds	r3, #14
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fcbf 	bl	8007344 <ld_word>
 80089c6:	4603      	mov	r3, r0
 80089c8:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80089ca:	8bfb      	ldrh	r3, [r7, #30]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <mount_volume+0x238>
 80089d0:	230d      	movs	r3, #13
 80089d2:	e0fe      	b.n	8008bd2 <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80089d4:	8bfa      	ldrh	r2, [r7, #30]
 80089d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d8:	4413      	add	r3, r2
 80089da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089dc:	8911      	ldrh	r1, [r2, #8]
 80089de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089e0:	8992      	ldrh	r2, [r2, #12]
 80089e2:	0952      	lsrs	r2, r2, #5
 80089e4:	b292      	uxth	r2, r2
 80089e6:	fbb1 f2f2 	udiv	r2, r1, r2
 80089ea:	b292      	uxth	r2, r2
 80089ec:	4413      	add	r3, r2
 80089ee:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80089f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d201      	bcs.n	80089fc <mount_volume+0x260>
 80089f8:	230d      	movs	r3, #13
 80089fa:	e0ea      	b.n	8008bd2 <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80089fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a04:	8952      	ldrh	r2, [r2, #10]
 8008a06:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <mount_volume+0x27a>
 8008a12:	230d      	movs	r3, #13
 8008a14:	e0dd      	b.n	8008bd2 <mount_volume+0x436>
		fmt = 0;
 8008a16:	2300      	movs	r3, #0
 8008a18:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8008a50 <mount_volume+0x2b4>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d801      	bhi.n	8008a26 <mount_volume+0x28a>
 8008a22:	2303      	movs	r3, #3
 8008a24:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d801      	bhi.n	8008a34 <mount_volume+0x298>
 8008a30:	2302      	movs	r3, #2
 8008a32:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d801      	bhi.n	8008a42 <mount_volume+0x2a6>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d105      	bne.n	8008a54 <mount_volume+0x2b8>
 8008a48:	230d      	movs	r3, #13
 8008a4a:	e0c2      	b.n	8008bd2 <mount_volume+0x436>
 8008a4c:	20005cf4 	.word	0x20005cf4
 8008a50:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	1c9a      	adds	r2, r3, #2
 8008a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5e:	6a3a      	ldr	r2, [r7, #32]
 8008a60:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008a62:	8bfa      	ldrh	r2, [r7, #30]
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	441a      	add	r2, r3
 8008a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008a6c:	6a3a      	ldr	r2, [r7, #32]
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	441a      	add	r2, r3
 8008a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a74:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8008a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a78:	2b03      	cmp	r3, #3
 8008a7a:	d11e      	bne.n	8008aba <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7e:	3334      	adds	r3, #52	@ 0x34
 8008a80:	332a      	adds	r3, #42	@ 0x2a
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fe fc5e 	bl	8007344 <ld_word>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <mount_volume+0x2f6>
 8008a8e:	230d      	movs	r3, #13
 8008a90:	e09f      	b.n	8008bd2 <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a94:	891b      	ldrh	r3, [r3, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <mount_volume+0x302>
 8008a9a:	230d      	movs	r3, #13
 8008a9c:	e099      	b.n	8008bd2 <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa0:	3334      	adds	r3, #52	@ 0x34
 8008aa2:	332c      	adds	r3, #44	@ 0x2c
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fe fc66 	bl	8007376 <ld_dword>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aae:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ab8:	e01e      	b.n	8008af8 <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008abc:	891b      	ldrh	r3, [r3, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <mount_volume+0x32a>
 8008ac2:	230d      	movs	r3, #13
 8008ac4:	e085      	b.n	8008bd2 <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008acc:	441a      	add	r2, r3
 8008ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d103      	bne.n	8008ae0 <mount_volume+0x344>
 8008ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	e00a      	b.n	8008af6 <mount_volume+0x35a>
 8008ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae2:	699a      	ldr	r2, [r3, #24]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	005b      	lsls	r3, r3, #1
 8008ae8:	4413      	add	r3, r2
 8008aea:	085a      	lsrs	r2, r3, #1
 8008aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	f003 0301 	and.w	r3, r3, #1
 8008af4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008af6:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afa:	69da      	ldr	r2, [r3, #28]
 8008afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afe:	899b      	ldrh	r3, [r3, #12]
 8008b00:	4619      	mov	r1, r3
 8008b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b04:	440b      	add	r3, r1
 8008b06:	3b01      	subs	r3, #1
 8008b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b0a:	8989      	ldrh	r1, [r1, #12]
 8008b0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d201      	bcs.n	8008b18 <mount_volume+0x37c>
 8008b14:	230d      	movs	r3, #13
 8008b16:	e05c      	b.n	8008bd2 <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b1e:	615a      	str	r2, [r3, #20]
 8008b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b22:	695a      	ldr	r2, [r3, #20]
 8008b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b26:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2a:	2280      	movs	r2, #128	@ 0x80
 8008b2c:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d13f      	bne.n	8008bb4 <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b36:	3334      	adds	r3, #52	@ 0x34
 8008b38:	3330      	adds	r3, #48	@ 0x30
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe fc02 	bl	8007344 <ld_word>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d136      	bne.n	8008bb4 <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b4e:	f7fe fcda 	bl	8007506 <move_window>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d12d      	bne.n	8008bb4 <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 8008b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8008b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b60:	3334      	adds	r3, #52	@ 0x34
 8008b62:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fe fbec 	bl	8007344 <ld_word>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d11d      	bne.n	8008bb4 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7a:	3334      	adds	r3, #52	@ 0x34
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fe fbfa 	bl	8007376 <ld_dword>
 8008b82:	4603      	mov	r3, r0
 8008b84:	4a15      	ldr	r2, [pc, #84]	@ (8008bdc <mount_volume+0x440>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d114      	bne.n	8008bb4 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8c:	3334      	adds	r3, #52	@ 0x34
 8008b8e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe fbef 	bl	8007376 <ld_dword>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	4a11      	ldr	r2, [pc, #68]	@ (8008be0 <mount_volume+0x444>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d109      	bne.n	8008bb4 <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba2:	3334      	adds	r3, #52	@ 0x34
 8008ba4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fe fbe4 	bl	8007376 <ld_dword>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8008bbc:	4b09      	ldr	r3, [pc, #36]	@ (8008be4 <mount_volume+0x448>)
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	4b07      	ldr	r3, [pc, #28]	@ (8008be4 <mount_volume+0x448>)
 8008bc6:	801a      	strh	r2, [r3, #0]
 8008bc8:	4b06      	ldr	r3, [pc, #24]	@ (8008be4 <mount_volume+0x448>)
 8008bca:	881a      	ldrh	r2, [r3, #0]
 8008bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bce:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3740      	adds	r7, #64	@ 0x40
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	41615252 	.word	0x41615252
 8008be0:	61417272 	.word	0x61417272
 8008be4:	20005cfc 	.word	0x20005cfc

08008be8 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008bf2:	2309      	movs	r3, #9
 8008bf4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01c      	beq.n	8008c36 <validate+0x4e>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d018      	beq.n	8008c36 <validate+0x4e>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d013      	beq.n	8008c36 <validate+0x4e>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	889a      	ldrh	r2, [r3, #4]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	88db      	ldrh	r3, [r3, #6]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d10c      	bne.n	8008c36 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	785b      	ldrb	r3, [r3, #1]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe fa56 	bl	80070d4 <disk_status>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <validate+0x4e>
			res = FR_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d102      	bne.n	8008c42 <validate+0x5a>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	e000      	b.n	8008c44 <validate+0x5c>
 8008c42:	2300      	movs	r3, #0
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	6013      	str	r3, [r2, #0]
	return res;
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b088      	sub	sp, #32
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8008c66:	f107 0310 	add.w	r3, r7, #16
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7ff fbf8 	bl	8008460 <get_ldnumber>
 8008c70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	da01      	bge.n	8008c7c <f_mount+0x28>
 8008c78:	230b      	movs	r3, #11
 8008c7a:	e02e      	b.n	8008cda <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8008c7c:	4a19      	ldr	r2, [pc, #100]	@ (8008ce4 <f_mount+0x90>)
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c84:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d007      	beq.n	8008c9c <f_mount+0x48>
		FatFs[vol] = 0;
 8008c8c:	4a15      	ldr	r2, [pc, #84]	@ (8008ce4 <f_mount+0x90>)
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	2100      	movs	r1, #0
 8008c92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00b      	beq.n	8008cba <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	69fa      	ldr	r2, [r7, #28]
 8008ca6:	b2d2      	uxtb	r2, r2
 8008ca8:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	490c      	ldr	r1, [pc, #48]	@ (8008ce4 <f_mount+0x90>)
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8008cba:	79fb      	ldrb	r3, [r7, #7]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <f_mount+0x70>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	e00a      	b.n	8008cda <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008cc4:	f107 010c 	add.w	r1, r7, #12
 8008cc8:	f107 0308 	add.w	r3, r7, #8
 8008ccc:	2200      	movs	r2, #0
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7ff fd64 	bl	800879c <mount_volume>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3720      	adds	r7, #32
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20005cf4 	.word	0x20005cf4

08008ce8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b098      	sub	sp, #96	@ 0x60
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <f_open+0x18>
 8008cfc:	2309      	movs	r3, #9
 8008cfe:	e184      	b.n	800900a <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d06:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 8008d08:	79fa      	ldrb	r2, [r7, #7]
 8008d0a:	f107 0114 	add.w	r1, r7, #20
 8008d0e:	f107 0308 	add.w	r3, r7, #8
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7ff fd42 	bl	800879c <mount_volume>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008d1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f040 8168 	bne.w	8008ff8 <f_open+0x310>
		dj.obj.fs = fs;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	f107 0318 	add.w	r3, r7, #24
 8008d32:	4611      	mov	r1, r2
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7ff fb1f 	bl	8008378 <follow_path>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8008d40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d107      	bne.n	8008d58 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008d48:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d4c:	b25b      	sxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	da02      	bge.n	8008d58 <f_open+0x70>
				res = FR_INVALID_NAME;
 8008d52:	2306      	movs	r3, #6
 8008d54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	f003 031c 	and.w	r3, r3, #28
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d077      	beq.n	8008e52 <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 8008d62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d010      	beq.n	8008d8c <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008d6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d107      	bne.n	8008d82 <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8008d72:	f107 0318 	add.w	r3, r7, #24
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7ff f9f4 	bl	8008164 <dir_register>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008d82:	79fb      	ldrb	r3, [r7, #7]
 8008d84:	f043 0308 	orr.w	r3, r3, #8
 8008d88:	71fb      	strb	r3, [r7, #7]
 8008d8a:	e010      	b.n	8008dae <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008d8c:	7fbb      	ldrb	r3, [r7, #30]
 8008d8e:	f003 0311 	and.w	r3, r3, #17
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <f_open+0xb6>
					res = FR_DENIED;
 8008d96:	2307      	movs	r3, #7
 8008d98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008d9c:	e007      	b.n	8008dae <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	f003 0304 	and.w	r3, r3, #4
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d002      	beq.n	8008dae <f_open+0xc6>
 8008da8:	2308      	movs	r3, #8
 8008daa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8008dae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d167      	bne.n	8008e86 <f_open+0x19e>
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	f003 0308 	and.w	r3, r3, #8
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d062      	beq.n	8008e86 <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 8008dc0:	4b94      	ldr	r3, [pc, #592]	@ (8009014 <f_open+0x32c>)
 8008dc2:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 8008dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc6:	330e      	adds	r3, #14
 8008dc8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fe fb11 	bl	80073f2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dd2:	3316      	adds	r3, #22
 8008dd4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe fb0b 	bl	80073f2 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008de0:	4611      	mov	r1, r2
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7ff f92a 	bl	800803c <ld_clust>
 8008de8:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dec:	330b      	adds	r3, #11
 8008dee:	2220      	movs	r2, #32
 8008df0:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008df6:	2200      	movs	r2, #0
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7ff f93e 	bl	800807a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e00:	331c      	adds	r3, #28
 8008e02:	2100      	movs	r1, #0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fe faf4 	bl	80073f2 <st_dword>
					fs->wflag = 1;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8008e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d037      	beq.n	8008e86 <f_open+0x19e>
						sc = fs->winsect;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8008e1c:	f107 0318 	add.w	r3, r7, #24
 8008e20:	2200      	movs	r2, #0
 8008e22:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fe fe15 	bl	8007a54 <remove_chain>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008e30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d126      	bne.n	8008e86 <f_open+0x19e>
							res = move_window(fs, sc);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fe fb62 	bl	8007506 <move_window>
 8008e42:	4603      	mov	r3, r0
 8008e44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e4c:	3a01      	subs	r2, #1
 8008e4e:	611a      	str	r2, [r3, #16]
 8008e50:	e019      	b.n	8008e86 <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8008e52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d115      	bne.n	8008e86 <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8008e5a:	7fbb      	ldrb	r3, [r7, #30]
 8008e5c:	f003 0310 	and.w	r3, r3, #16
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <f_open+0x184>
					res = FR_NO_FILE;
 8008e64:	2304      	movs	r3, #4
 8008e66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008e6a:	e00c      	b.n	8008e86 <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	f003 0302 	and.w	r3, r3, #2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d007      	beq.n	8008e86 <f_open+0x19e>
 8008e76:	7fbb      	ldrb	r3, [r7, #30]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d002      	beq.n	8008e86 <f_open+0x19e>
						res = FR_DENIED;
 8008e80:	2307      	movs	r3, #7
 8008e82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008e86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10f      	bne.n	8008eae <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8008e8e:	79fb      	ldrb	r3, [r7, #7]
 8008e90:	f003 0308 	and.w	r3, r3, #8
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <f_open+0x1b8>
 8008e98:	79fb      	ldrb	r3, [r7, #7]
 8008e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e9e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8008ea8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008eae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f040 80a0 	bne.w	8008ff8 <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7ff f8bc 	bl	800803c <ld_clust>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ecc:	331c      	adds	r3, #28
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe fa51 	bl	8007376 <ld_dword>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	88da      	ldrh	r2, [r3, #6]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	79fa      	ldrb	r2, [r7, #7]
 8008eec:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3328      	adds	r3, #40	@ 0x28
 8008f04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008f08:	2100      	movs	r1, #0
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f00c fa86 	bl	801541c <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d06e      	beq.n	8008ff8 <f_open+0x310>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d06a      	beq.n	8008ff8 <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	68da      	ldr	r2, [r3, #12]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	895b      	ldrh	r3, [r3, #10]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	899b      	ldrh	r3, [r3, #12]
 8008f34:	fb02 f303 	mul.w	r3, r2, r3
 8008f38:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f46:	e016      	b.n	8008f76 <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fe fb94 	bl	800767a <get_fat>
 8008f52:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008f54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d802      	bhi.n	8008f60 <f_open+0x278>
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008f60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f66:	d102      	bne.n	8008f6e <f_open+0x286>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d103      	bne.n	8008f86 <f_open+0x29e>
 8008f7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d8e0      	bhi.n	8008f48 <f_open+0x260>
				}
				fp->clust = clst;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f8a:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d131      	bne.n	8008ff8 <f_open+0x310>
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	899b      	ldrh	r3, [r3, #12]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fa0:	fb01 f202 	mul.w	r2, r1, r2
 8008fa4:	1a9b      	subs	r3, r3, r2
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d026      	beq.n	8008ff8 <f_open+0x310>
					sc = clst2sect(fs, clst);
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fe fb44 	bl	800763c <clst2sect>
 8008fb4:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 8008fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d103      	bne.n	8008fc4 <f_open+0x2dc>
						res = FR_INT_ERR;
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008fc2:	e019      	b.n	8008ff8 <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	899b      	ldrh	r3, [r3, #12]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8008fd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fd2:	441a      	add	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	7858      	ldrb	r0, [r3, #1]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	69da      	ldr	r2, [r3, #28]
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	f7fe f8c4 	bl	8007174 <disk_read>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <f_open+0x310>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008ff8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d002      	beq.n	8009006 <f_open+0x31e>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009006:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800900a:	4618      	mov	r0, r3
 800900c:	3760      	adds	r7, #96	@ 0x60
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	54210000 	.word	0x54210000

08009018 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b08e      	sub	sp, #56	@ 0x38
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
 8009024:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	2200      	movs	r2, #0
 800902e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f107 0214 	add.w	r2, r7, #20
 8009036:	4611      	mov	r1, r2
 8009038:	4618      	mov	r0, r3
 800903a:	f7ff fdd5 	bl	8008be8 <validate>
 800903e:	4603      	mov	r3, r0
 8009040:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009044:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009048:	2b00      	cmp	r3, #0
 800904a:	d107      	bne.n	800905c <f_read+0x44>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	7c5b      	ldrb	r3, [r3, #17]
 8009050:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009054:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <f_read+0x4a>
 800905c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009060:	e129      	b.n	80092b6 <f_read+0x29e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	7c1b      	ldrb	r3, [r3, #16]
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	d101      	bne.n	8009072 <f_read+0x5a>
 800906e:	2307      	movs	r3, #7
 8009070:	e121      	b.n	80092b6 <f_read+0x29e>
	remain = fp->obj.objsize - fp->fptr;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	429a      	cmp	r2, r3
 8009084:	f240 8112 	bls.w	80092ac <f_read+0x294>
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800908c:	e10e      	b.n	80092ac <f_read+0x294>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	8992      	ldrh	r2, [r2, #12]
 8009096:	fbb3 f1f2 	udiv	r1, r3, r2
 800909a:	fb01 f202 	mul.w	r2, r1, r2
 800909e:	1a9b      	subs	r3, r3, r2
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f040 80c9 	bne.w	8009238 <f_read+0x220>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	8992      	ldrh	r2, [r2, #12]
 80090ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	8952      	ldrh	r2, [r2, #10]
 80090b6:	3a01      	subs	r2, #1
 80090b8:	4013      	ands	r3, r2
 80090ba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d123      	bne.n	800910a <f_read+0xf2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d103      	bne.n	80090d2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80090d0:	e007      	b.n	80090e2 <f_read+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	4619      	mov	r1, r3
 80090da:	4610      	mov	r0, r2
 80090dc:	f7fe facd 	bl	800767a <get_fat>
 80090e0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d804      	bhi.n	80090f2 <f_read+0xda>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2202      	movs	r2, #2
 80090ec:	745a      	strb	r2, [r3, #17]
 80090ee:	2302      	movs	r3, #2
 80090f0:	e0e1      	b.n	80092b6 <f_read+0x29e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80090f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f8:	d104      	bne.n	8009104 <f_read+0xec>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2201      	movs	r2, #1
 80090fe:	745a      	strb	r2, [r3, #17]
 8009100:	2301      	movs	r3, #1
 8009102:	e0d8      	b.n	80092b6 <f_read+0x29e>
				fp->clust = clst;				/* Update current cluster */
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009108:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	4619      	mov	r1, r3
 8009112:	4610      	mov	r0, r2
 8009114:	f7fe fa92 	bl	800763c <clst2sect>
 8009118:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d104      	bne.n	800912a <f_read+0x112>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2202      	movs	r2, #2
 8009124:	745a      	strb	r2, [r3, #17]
 8009126:	2302      	movs	r3, #2
 8009128:	e0c5      	b.n	80092b6 <f_read+0x29e>
			sect += csect;
 800912a:	69ba      	ldr	r2, [r7, #24]
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	4413      	add	r3, r2
 8009130:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	899b      	ldrh	r3, [r3, #12]
 8009136:	461a      	mov	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	fbb3 f3f2 	udiv	r3, r3, r2
 800913e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8009140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009142:	2b00      	cmp	r3, #0
 8009144:	d041      	beq.n	80091ca <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009146:	69fa      	ldr	r2, [r7, #28]
 8009148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914a:	4413      	add	r3, r2
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	8952      	ldrh	r2, [r2, #10]
 8009150:	4293      	cmp	r3, r2
 8009152:	d905      	bls.n	8009160 <f_read+0x148>
					cc = fs->csize - csect;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	895b      	ldrh	r3, [r3, #10]
 8009158:	461a      	mov	r2, r3
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	7858      	ldrb	r0, [r3, #1]
 8009164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800916a:	f7fe f803 	bl	8007174 <disk_read>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d004      	beq.n	800917e <f_read+0x166>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2201      	movs	r2, #1
 8009178:	745a      	strb	r2, [r3, #17]
 800917a:	2301      	movs	r3, #1
 800917c:	e09b      	b.n	80092b6 <f_read+0x29e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	7c1b      	ldrb	r3, [r3, #16]
 8009182:	b25b      	sxtb	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	da18      	bge.n	80091ba <f_read+0x1a2>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	69da      	ldr	r2, [r3, #28]
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009192:	429a      	cmp	r2, r3
 8009194:	d911      	bls.n	80091ba <f_read+0x1a2>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	69da      	ldr	r2, [r3, #28]
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	8992      	ldrh	r2, [r2, #12]
 80091a2:	fb02 f303 	mul.w	r3, r2, r3
 80091a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091a8:	18d0      	adds	r0, r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	899b      	ldrh	r3, [r3, #12]
 80091b4:	461a      	mov	r2, r3
 80091b6:	f00c f9b5 	bl	8015524 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	899b      	ldrh	r3, [r3, #12]
 80091be:	461a      	mov	r2, r3
 80091c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c2:	fb02 f303 	mul.w	r3, r2, r3
 80091c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80091c8:	e05c      	b.n	8009284 <f_read+0x26c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	69ba      	ldr	r2, [r7, #24]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d02e      	beq.n	8009232 <f_read+0x21a>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	7c1b      	ldrb	r3, [r3, #16]
 80091d8:	b25b      	sxtb	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	da18      	bge.n	8009210 <f_read+0x1f8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	7858      	ldrb	r0, [r3, #1]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	69da      	ldr	r2, [r3, #28]
 80091ec:	2301      	movs	r3, #1
 80091ee:	f7fd fff3 	bl	80071d8 <disk_write>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d004      	beq.n	8009202 <f_read+0x1ea>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2201      	movs	r2, #1
 80091fc:	745a      	strb	r2, [r3, #17]
 80091fe:	2301      	movs	r3, #1
 8009200:	e059      	b.n	80092b6 <f_read+0x29e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	7c1b      	ldrb	r3, [r3, #16]
 8009206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800920a:	b2da      	uxtb	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	7858      	ldrb	r0, [r3, #1]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800921a:	2301      	movs	r3, #1
 800921c:	69ba      	ldr	r2, [r7, #24]
 800921e:	f7fd ffa9 	bl	8007174 <disk_read>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d004      	beq.n	8009232 <f_read+0x21a>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2201      	movs	r2, #1
 800922c:	745a      	strb	r2, [r3, #17]
 800922e:	2301      	movs	r3, #1
 8009230:	e041      	b.n	80092b6 <f_read+0x29e>
			}
#endif
			fp->sect = sect;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	69ba      	ldr	r2, [r7, #24]
 8009236:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	899b      	ldrh	r3, [r3, #12]
 800923c:	4618      	mov	r0, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	8992      	ldrh	r2, [r2, #12]
 8009246:	fbb3 f1f2 	udiv	r1, r3, r2
 800924a:	fb01 f202 	mul.w	r2, r1, r2
 800924e:	1a9b      	subs	r3, r3, r2
 8009250:	1ac3      	subs	r3, r0, r3
 8009252:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	429a      	cmp	r2, r3
 800925a:	d901      	bls.n	8009260 <f_read+0x248>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	8992      	ldrh	r2, [r2, #12]
 800926e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009272:	fb00 f202 	mul.w	r2, r0, r2
 8009276:	1a9b      	subs	r3, r3, r2
 8009278:	440b      	add	r3, r1
 800927a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800927c:	4619      	mov	r1, r3
 800927e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009280:	f00c f950 	bl	8015524 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	607b      	str	r3, [r7, #4]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009292:	441a      	add	r2, r3
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	601a      	str	r2, [r3, #0]
 8009298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800929a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800929c:	4413      	add	r3, r2
 800929e:	627b      	str	r3, [r7, #36]	@ 0x24
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	695a      	ldr	r2, [r3, #20]
 80092a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a6:	441a      	add	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	615a      	str	r2, [r3, #20]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f47f aeed 	bne.w	800908e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3738      	adds	r7, #56	@ 0x38
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b08c      	sub	sp, #48	@ 0x30
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	607a      	str	r2, [r7, #4]
 80092ca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	2200      	movs	r2, #0
 80092d4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f107 0210 	add.w	r2, r7, #16
 80092dc:	4611      	mov	r1, r2
 80092de:	4618      	mov	r0, r3
 80092e0:	f7ff fc82 	bl	8008be8 <validate>
 80092e4:	4603      	mov	r3, r0
 80092e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80092ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d107      	bne.n	8009302 <f_write+0x44>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	7c5b      	ldrb	r3, [r3, #17]
 80092f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80092fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d002      	beq.n	8009308 <f_write+0x4a>
 8009302:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009306:	e15e      	b.n	80095c6 <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	7c1b      	ldrb	r3, [r3, #16]
 800930c:	f003 0302 	and.w	r3, r3, #2
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <f_write+0x5a>
 8009314:	2307      	movs	r3, #7
 8009316:	e156      	b.n	80095c6 <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	695a      	ldr	r2, [r3, #20]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	441a      	add	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	429a      	cmp	r2, r3
 8009326:	f080 8140 	bcs.w	80095aa <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	43db      	mvns	r3, r3
 8009330:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8009332:	e13a      	b.n	80095aa <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	8992      	ldrh	r2, [r2, #12]
 800933c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009340:	fb01 f202 	mul.w	r2, r1, r2
 8009344:	1a9b      	subs	r3, r3, r2
 8009346:	2b00      	cmp	r3, #0
 8009348:	f040 80e5 	bne.w	8009516 <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	8992      	ldrh	r2, [r2, #12]
 8009354:	fbb3 f3f2 	udiv	r3, r3, r2
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	8952      	ldrh	r2, [r2, #10]
 800935c:	3a01      	subs	r2, #1
 800935e:	4013      	ands	r3, r2
 8009360:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d137      	bne.n	80093d8 <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10c      	bne.n	800938a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10e      	bne.n	800939a <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2100      	movs	r1, #0
 8009380:	4618      	mov	r0, r3
 8009382:	f7fe fbcc 	bl	8007b1e <create_chain>
 8009386:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009388:	e007      	b.n	800939a <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	4619      	mov	r1, r3
 8009392:	4610      	mov	r0, r2
 8009394:	f7fe fbc3 	bl	8007b1e <create_chain>
 8009398:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800939a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800939c:	2b00      	cmp	r3, #0
 800939e:	f000 8109 	beq.w	80095b4 <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80093a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d104      	bne.n	80093b2 <f_write+0xf4>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2202      	movs	r2, #2
 80093ac:	745a      	strb	r2, [r3, #17]
 80093ae:	2302      	movs	r3, #2
 80093b0:	e109      	b.n	80095c6 <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80093b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b8:	d104      	bne.n	80093c4 <f_write+0x106>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2201      	movs	r2, #1
 80093be:	745a      	strb	r2, [r3, #17]
 80093c0:	2301      	movs	r3, #1
 80093c2:	e100      	b.n	80095c6 <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093c8:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d102      	bne.n	80093d8 <f_write+0x11a>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093d6:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	7c1b      	ldrb	r3, [r3, #16]
 80093dc:	b25b      	sxtb	r3, r3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	da18      	bge.n	8009414 <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	7858      	ldrb	r0, [r3, #1]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	69da      	ldr	r2, [r3, #28]
 80093f0:	2301      	movs	r3, #1
 80093f2:	f7fd fef1 	bl	80071d8 <disk_write>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d004      	beq.n	8009406 <f_write+0x148>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2201      	movs	r2, #1
 8009400:	745a      	strb	r2, [r3, #17]
 8009402:	2301      	movs	r3, #1
 8009404:	e0df      	b.n	80095c6 <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	7c1b      	ldrb	r3, [r3, #16]
 800940a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800940e:	b2da      	uxtb	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	4619      	mov	r1, r3
 800941c:	4610      	mov	r0, r2
 800941e:	f7fe f90d 	bl	800763c <clst2sect>
 8009422:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d104      	bne.n	8009434 <f_write+0x176>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2202      	movs	r2, #2
 800942e:	745a      	strb	r2, [r3, #17]
 8009430:	2302      	movs	r3, #2
 8009432:	e0c8      	b.n	80095c6 <f_write+0x308>
			sect += csect;
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	4413      	add	r3, r2
 800943a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	899b      	ldrh	r3, [r3, #12]
 8009440:	461a      	mov	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	fbb3 f3f2 	udiv	r3, r3, r2
 8009448:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800944a:	6a3b      	ldr	r3, [r7, #32]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d043      	beq.n	80094d8 <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009450:	69ba      	ldr	r2, [r7, #24]
 8009452:	6a3b      	ldr	r3, [r7, #32]
 8009454:	4413      	add	r3, r2
 8009456:	693a      	ldr	r2, [r7, #16]
 8009458:	8952      	ldrh	r2, [r2, #10]
 800945a:	4293      	cmp	r3, r2
 800945c:	d905      	bls.n	800946a <f_write+0x1ac>
					cc = fs->csize - csect;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	895b      	ldrh	r3, [r3, #10]
 8009462:	461a      	mov	r2, r3
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	7858      	ldrb	r0, [r3, #1]
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	69f9      	ldr	r1, [r7, #28]
 8009474:	f7fd feb0 	bl	80071d8 <disk_write>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d004      	beq.n	8009488 <f_write+0x1ca>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2201      	movs	r2, #1
 8009482:	745a      	strb	r2, [r3, #17]
 8009484:	2301      	movs	r3, #1
 8009486:	e09e      	b.n	80095c6 <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	69da      	ldr	r2, [r3, #28]
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	6a3a      	ldr	r2, [r7, #32]
 8009492:	429a      	cmp	r2, r3
 8009494:	d918      	bls.n	80094c8 <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	69da      	ldr	r2, [r3, #28]
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	8992      	ldrh	r2, [r2, #12]
 80094a8:	fb02 f303 	mul.w	r3, r2, r3
 80094ac:	69fa      	ldr	r2, [r7, #28]
 80094ae:	18d1      	adds	r1, r2, r3
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	899b      	ldrh	r3, [r3, #12]
 80094b4:	461a      	mov	r2, r3
 80094b6:	f00c f835 	bl	8015524 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	7c1b      	ldrb	r3, [r3, #16]
 80094be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	899b      	ldrh	r3, [r3, #12]
 80094cc:	461a      	mov	r2, r3
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	fb02 f303 	mul.w	r3, r2, r3
 80094d4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80094d6:	e04b      	b.n	8009570 <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	69db      	ldr	r3, [r3, #28]
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d016      	beq.n	8009510 <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	695a      	ldr	r2, [r3, #20]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d210      	bcs.n	8009510 <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	7858      	ldrb	r0, [r3, #1]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80094f8:	2301      	movs	r3, #1
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	f7fd fe3a 	bl	8007174 <disk_read>
 8009500:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009502:	2b00      	cmp	r3, #0
 8009504:	d004      	beq.n	8009510 <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2201      	movs	r2, #1
 800950a:	745a      	strb	r2, [r3, #17]
 800950c:	2301      	movs	r3, #1
 800950e:	e05a      	b.n	80095c6 <f_write+0x308>
			}
#endif
			fp->sect = sect;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	899b      	ldrh	r3, [r3, #12]
 800951a:	4618      	mov	r0, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	8992      	ldrh	r2, [r2, #12]
 8009524:	fbb3 f1f2 	udiv	r1, r3, r2
 8009528:	fb01 f202 	mul.w	r2, r1, r2
 800952c:	1a9b      	subs	r3, r3, r2
 800952e:	1ac3      	subs	r3, r0, r3
 8009530:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	429a      	cmp	r2, r3
 8009538:	d901      	bls.n	800953e <f_write+0x280>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	8992      	ldrh	r2, [r2, #12]
 800954c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009550:	fb00 f202 	mul.w	r2, r0, r2
 8009554:	1a9b      	subs	r3, r3, r2
 8009556:	440b      	add	r3, r1
 8009558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800955a:	69f9      	ldr	r1, [r7, #28]
 800955c:	4618      	mov	r0, r3
 800955e:	f00b ffe1 	bl	8015524 <memcpy>
		fp->flag |= FA_DIRTY;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	7c1b      	ldrb	r3, [r3, #16]
 8009566:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800956a:	b2da      	uxtb	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	607b      	str	r3, [r7, #4]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957e:	441a      	add	r2, r3
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009588:	4413      	add	r3, r2
 800958a:	61fb      	str	r3, [r7, #28]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	695a      	ldr	r2, [r3, #20]
 8009590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009592:	441a      	add	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	615a      	str	r2, [r3, #20]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	695b      	ldr	r3, [r3, #20]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	bf38      	it	cc
 80095a4:	461a      	movcc	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	60da      	str	r2, [r3, #12]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f47f aec1 	bne.w	8009334 <f_write+0x76>
 80095b2:	e000      	b.n	80095b6 <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80095b4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	7c1b      	ldrb	r3, [r3, #16]
 80095ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3730      	adds	r7, #48	@ 0x30
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f107 0208 	add.w	r2, r7, #8
 80095de:	4611      	mov	r1, r2
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7ff fb01 	bl	8008be8 <validate>
 80095e6:	4603      	mov	r3, r0
 80095e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d167      	bne.n	80096c0 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	7c1b      	ldrb	r3, [r3, #16]
 80095f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d061      	beq.n	80096c0 <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	7c1b      	ldrb	r3, [r3, #16]
 8009600:	b25b      	sxtb	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	da15      	bge.n	8009632 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	7858      	ldrb	r0, [r3, #1]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	69da      	ldr	r2, [r3, #28]
 8009614:	2301      	movs	r3, #1
 8009616:	f7fd fddf 	bl	80071d8 <disk_write>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d001      	beq.n	8009624 <f_sync+0x54>
 8009620:	2301      	movs	r3, #1
 8009622:	e04e      	b.n	80096c2 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	7c1b      	ldrb	r3, [r3, #16]
 8009628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800962c:	b2da      	uxtb	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009632:	4b26      	ldr	r3, [pc, #152]	@ (80096cc <f_sync+0xfc>)
 8009634:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a1b      	ldr	r3, [r3, #32]
 800963c:	4619      	mov	r1, r3
 800963e:	4610      	mov	r0, r2
 8009640:	f7fd ff61 	bl	8007506 <move_window>
 8009644:	4603      	mov	r3, r0
 8009646:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009648:	7dfb      	ldrb	r3, [r7, #23]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d138      	bne.n	80096c0 <f_sync+0xf0>
					dir = fp->dir_ptr;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009652:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	330b      	adds	r3, #11
 8009658:	781a      	ldrb	r2, [r3, #0]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	330b      	adds	r3, #11
 800965e:	f042 0220 	orr.w	r2, r2, #32
 8009662:	b2d2      	uxtb	r2, r2
 8009664:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	461a      	mov	r2, r3
 8009670:	68f9      	ldr	r1, [r7, #12]
 8009672:	f7fe fd02 	bl	800807a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f103 021c 	add.w	r2, r3, #28
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	4619      	mov	r1, r3
 8009682:	4610      	mov	r0, r2
 8009684:	f7fd feb5 	bl	80073f2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3316      	adds	r3, #22
 800968c:	6939      	ldr	r1, [r7, #16]
 800968e:	4618      	mov	r0, r3
 8009690:	f7fd feaf 	bl	80073f2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	3312      	adds	r3, #18
 8009698:	2100      	movs	r1, #0
 800969a:	4618      	mov	r0, r3
 800969c:	f7fd fe8e 	bl	80073bc <st_word>
					fs->wflag = 1;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2201      	movs	r2, #1
 80096a4:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fd ff59 	bl	8007560 <sync_fs>
 80096ae:	4603      	mov	r3, r0
 80096b0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	7c1b      	ldrb	r3, [r3, #16]
 80096b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3718      	adds	r7, #24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	54210000 	.word	0x54210000

080096d0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7ff ff79 	bl	80095d0 <f_sync>
 80096de:	4603      	mov	r3, r0
 80096e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10e      	bne.n	8009706 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f107 0208 	add.w	r2, r7, #8
 80096ee:	4611      	mov	r1, r2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7ff fa79 	bl	8008be8 <validate>
 80096f6:	4603      	mov	r3, r0
 80096f8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d102      	bne.n	8009706 <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009706:	7bfb      	ldrb	r3, [r7, #15]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b08e      	sub	sp, #56	@ 0x38
 8009714:	af00      	add	r7, sp, #0
 8009716:	60b9      	str	r1, [r7, #8]
 8009718:	607b      	str	r3, [r7, #4]
 800971a:	4603      	mov	r3, r0
 800971c:	73fb      	strb	r3, [r7, #15]
 800971e:	4613      	mov	r3, r2
 8009720:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8009722:	f107 0210 	add.w	r2, r7, #16
 8009726:	7bfb      	ldrb	r3, [r7, #15]
 8009728:	2101      	movs	r1, #1
 800972a:	4618      	mov	r0, r3
 800972c:	f7fd fd88 	bl	8007240 <disk_ioctl>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <create_partition+0x2a>
 8009736:	2301      	movs	r3, #1
 8009738:	e108      	b.n	800994c <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800973e:	233f      	movs	r3, #63	@ 0x3f
 8009740:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8009742:	2308      	movs	r3, #8
 8009744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009748:	e004      	b.n	8009754 <create_partition+0x44>
 800974a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800974e:	005b      	lsls	r3, r3, #1
 8009750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009754:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00a      	beq.n	8009772 <create_partition+0x62>
 800975c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009760:	6a3a      	ldr	r2, [r7, #32]
 8009762:	fbb2 f2f3 	udiv	r2, r2, r3
 8009766:	7ffb      	ldrb	r3, [r7, #31]
 8009768:	fbb2 f3f3 	udiv	r3, r2, r3
 800976c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009770:	d8eb      	bhi.n	800974a <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 8009772:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009776:	2b00      	cmp	r3, #0
 8009778:	d102      	bne.n	8009780 <create_partition+0x70>
 800977a:	23ff      	movs	r3, #255	@ 0xff
 800977c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 8009780:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009784:	2100      	movs	r1, #0
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f00b fe48 	bl	801541c <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009792:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8009794:	2300      	movs	r3, #0
 8009796:	637b      	str	r3, [r7, #52]	@ 0x34
 8009798:	7ffb      	ldrb	r3, [r7, #31]
 800979a:	633b      	str	r3, [r7, #48]	@ 0x30
 800979c:	e0b5      	b.n	800990a <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800979e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	4413      	add	r3, r2
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 80097aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ac:	2b64      	cmp	r3, #100	@ 0x64
 80097ae:	d80d      	bhi.n	80097cc <create_partition+0xbc>
 80097b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b2:	2b64      	cmp	r3, #100	@ 0x64
 80097b4:	d008      	beq.n	80097c8 <create_partition+0xb8>
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	4a66      	ldr	r2, [pc, #408]	@ (8009954 <create_partition+0x244>)
 80097ba:	fba2 2303 	umull	r2, r3, r2, r3
 80097be:	095b      	lsrs	r3, r3, #5
 80097c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097c2:	fb02 f303 	mul.w	r3, r2, r3
 80097c6:	e000      	b.n	80097ca <create_partition+0xba>
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 80097cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d0:	4413      	add	r3, r2
 80097d2:	6a3a      	ldr	r2, [r7, #32]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d305      	bcc.n	80097e4 <create_partition+0xd4>
 80097d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097dc:	4413      	add	r3, r2
 80097de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d903      	bls.n	80097ec <create_partition+0xdc>
 80097e4:	6a3a      	ldr	r2, [r7, #32]
 80097e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 80097ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 8097 	beq.w	8009922 <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 80097f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f6:	3308      	adds	r3, #8
 80097f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fd fdf9 	bl	80073f2 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 8009800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009802:	330c      	adds	r3, #12
 8009804:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009806:	4618      	mov	r0, r3
 8009808:	f7fd fdf3 	bl	80073f2 <st_dword>
			pte[PTE_System] = sys;					/* System type */
 800980c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980e:	3304      	adds	r3, #4
 8009810:	7bba      	ldrb	r2, [r7, #14]
 8009812:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 8009814:	7ffb      	ldrb	r3, [r7, #31]
 8009816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009818:	fbb2 f2f3 	udiv	r2, r2, r3
 800981c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009820:	fbb2 f3f3 	udiv	r3, r2, r3
 8009824:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 8009826:	7ffb      	ldrb	r3, [r7, #31]
 8009828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800982a:	fbb2 f3f3 	udiv	r3, r2, r3
 800982e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009832:	fbb3 f1f2 	udiv	r1, r3, r2
 8009836:	fb01 f202 	mul.w	r2, r1, r2
 800983a:	1a9b      	subs	r3, r3, r2
 800983c:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800983e:	7ffa      	ldrb	r2, [r7, #31]
 8009840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009842:	fbb3 f1f2 	udiv	r1, r3, r2
 8009846:	fb01 f202 	mul.w	r2, r1, r2
 800984a:	1a9b      	subs	r3, r3, r2
 800984c:	b2db      	uxtb	r3, r3
 800984e:	3301      	adds	r3, #1
 8009850:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 8009852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009854:	3301      	adds	r3, #1
 8009856:	7dfa      	ldrb	r2, [r7, #23]
 8009858:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	089b      	lsrs	r3, r3, #2
 800985e:	b2db      	uxtb	r3, r3
 8009860:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009864:	b2d9      	uxtb	r1, r3
 8009866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009868:	3302      	adds	r3, #2
 800986a:	7dba      	ldrb	r2, [r7, #22]
 800986c:	430a      	orrs	r2, r1
 800986e:	b2d2      	uxtb	r2, r2
 8009870:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 8009872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009874:	3303      	adds	r3, #3
 8009876:	69ba      	ldr	r2, [r7, #24]
 8009878:	b2d2      	uxtb	r2, r2
 800987a:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800987c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800987e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009880:	4413      	add	r3, r2
 8009882:	1e5a      	subs	r2, r3, #1
 8009884:	7ffb      	ldrb	r3, [r7, #31]
 8009886:	fbb2 f2f3 	udiv	r2, r2, r3
 800988a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800988e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009892:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 8009894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009898:	4413      	add	r3, r2
 800989a:	1e5a      	subs	r2, r3, #1
 800989c:	7ffb      	ldrb	r3, [r7, #31]
 800989e:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80098a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80098aa:	fb01 f202 	mul.w	r2, r1, r2
 80098ae:	1a9b      	subs	r3, r3, r2
 80098b0:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 80098b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b6:	4413      	add	r3, r2
 80098b8:	3b01      	subs	r3, #1
 80098ba:	7ffa      	ldrb	r2, [r7, #31]
 80098bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80098c0:	fb01 f202 	mul.w	r2, r1, r2
 80098c4:	1a9b      	subs	r3, r3, r2
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	3301      	adds	r3, #1
 80098ca:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 80098cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ce:	3305      	adds	r3, #5
 80098d0:	7dfa      	ldrb	r2, [r7, #23]
 80098d2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	089b      	lsrs	r3, r3, #2
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80098de:	b2d9      	uxtb	r1, r3
 80098e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e2:	3306      	adds	r3, #6
 80098e4:	7dba      	ldrb	r2, [r7, #22]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	b2d2      	uxtb	r2, r2
 80098ea:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 80098ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ee:	3307      	adds	r3, #7
 80098f0:	69ba      	ldr	r2, [r7, #24]
 80098f2:	b2d2      	uxtb	r2, r2
 80098f4:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 80098f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f8:	3310      	adds	r3, #16
 80098fa:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 80098fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098fe:	3301      	adds	r3, #1
 8009900:	637b      	str	r3, [r7, #52]	@ 0x34
 8009902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009906:	4413      	add	r3, r2
 8009908:	633b      	str	r3, [r7, #48]	@ 0x30
 800990a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990c:	2b03      	cmp	r3, #3
 800990e:	d809      	bhi.n	8009924 <create_partition+0x214>
 8009910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009912:	2b00      	cmp	r3, #0
 8009914:	d006      	beq.n	8009924 <create_partition+0x214>
 8009916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	429a      	cmp	r2, r3
 800991c:	f4ff af3f 	bcc.w	800979e <create_partition+0x8e>
 8009920:	e000      	b.n	8009924 <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 8009922:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800992a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800992e:	4618      	mov	r0, r3
 8009930:	f7fd fd44 	bl	80073bc <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8009934:	7bf8      	ldrb	r0, [r7, #15]
 8009936:	2301      	movs	r3, #1
 8009938:	2200      	movs	r2, #0
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	f7fd fc4c 	bl	80071d8 <disk_write>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <create_partition+0x23a>
 8009946:	2301      	movs	r3, #1
 8009948:	e000      	b.n	800994c <create_partition+0x23c>
	}

	return FR_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3738      	adds	r7, #56	@ 0x38
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	51eb851f 	.word	0x51eb851f

08009958 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b09e      	sub	sp, #120	@ 0x78
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8009966:	f107 030c 	add.w	r3, r7, #12
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe fd78 	bl	8008460 <get_ldnumber>
 8009970:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 8009972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009974:	2b00      	cmp	r3, #0
 8009976:	da02      	bge.n	800997e <f_mkfs+0x26>
 8009978:	230b      	movs	r3, #11
 800997a:	f000 bc39 	b.w	800a1f0 <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800997e:	4a90      	ldr	r2, [pc, #576]	@ (8009bc0 <f_mkfs+0x268>)
 8009980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d005      	beq.n	8009996 <f_mkfs+0x3e>
 800998a:	4a8d      	ldr	r2, [pc, #564]	@ (8009bc0 <f_mkfs+0x268>)
 800998c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800998e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009992:	2200      	movs	r2, #0
 8009994:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8009996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009998:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 800999c:	2300      	movs	r3, #0
 800999e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 80099a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fd fbbc 	bl	8007124 <disk_initialize>
 80099ac:	4603      	mov	r3, r0
 80099ae:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 80099b2:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <f_mkfs+0x6c>
 80099be:	2303      	movs	r3, #3
 80099c0:	f000 bc16 	b.w	800a1f0 <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 80099c4:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80099c8:	f003 0304 	and.w	r3, r3, #4
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <f_mkfs+0x7e>
 80099d0:	230a      	movs	r3, #10
 80099d2:	f000 bc0d 	b.w	800a1f0 <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <f_mkfs+0x88>
 80099dc:	4b79      	ldr	r3, [pc, #484]	@ (8009bc4 <f_mkfs+0x26c>)
 80099de:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d107      	bne.n	80099fc <f_mkfs+0xa4>
 80099ec:	f107 021c 	add.w	r2, r7, #28
 80099f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099f4:	2103      	movs	r1, #3
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fd fc22 	bl	8007240 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d009      	beq.n	8009a16 <f_mkfs+0xbe>
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a08:	d805      	bhi.n	8009a16 <f_mkfs+0xbe>
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	1e5a      	subs	r2, r3, #1
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	4013      	ands	r3, r2
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <f_mkfs+0xc2>
 8009a16:	2301      	movs	r3, #1
 8009a18:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 8009a1a:	f107 0220 	add.w	r2, r7, #32
 8009a1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a22:	2102      	movs	r1, #2
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fd fc0b 	bl	8007240 <disk_ioctl>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <f_mkfs+0xdc>
 8009a30:	2301      	movs	r3, #1
 8009a32:	e3dd      	b.n	800a1f0 <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 8009a34:	8c3b      	ldrh	r3, [r7, #32]
 8009a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a3a:	d80a      	bhi.n	8009a52 <f_mkfs+0xfa>
 8009a3c:	8c3b      	ldrh	r3, [r7, #32]
 8009a3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a42:	d306      	bcc.n	8009a52 <f_mkfs+0xfa>
 8009a44:	8c3b      	ldrh	r3, [r7, #32]
 8009a46:	461a      	mov	r2, r3
 8009a48:	8c3b      	ldrh	r3, [r7, #32]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <f_mkfs+0xfe>
 8009a52:	2301      	movs	r3, #1
 8009a54:	e3cc      	b.n	800a1f0 <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	f003 030f 	and.w	r3, r3, #15
 8009a5e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	785b      	ldrb	r3, [r3, #1]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d006      	beq.n	8009a78 <f_mkfs+0x120>
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	785b      	ldrb	r3, [r3, #1]
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d802      	bhi.n	8009a78 <f_mkfs+0x120>
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	785b      	ldrb	r3, [r3, #1]
 8009a76:	e000      	b.n	8009a7a <f_mkfs+0x122>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d013      	beq.n	8009aac <f_mkfs+0x154>
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a8c:	d80e      	bhi.n	8009aac <f_mkfs+0x154>
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	8c3a      	ldrh	r2, [r7, #32]
 8009a94:	0952      	lsrs	r2, r2, #5
 8009a96:	b292      	uxth	r2, r2
 8009a98:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a9c:	fb01 f202 	mul.w	r2, r1, r2
 8009aa0:	1a9b      	subs	r3, r3, r2
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d102      	bne.n	8009aac <f_mkfs+0x154>
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	e001      	b.n	8009ab0 <f_mkfs+0x158>
 8009aac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009aba:	d80a      	bhi.n	8009ad2 <f_mkfs+0x17a>
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	68da      	ldr	r2, [r3, #12]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	4013      	ands	r3, r2
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d102      	bne.n	8009ad2 <f_mkfs+0x17a>
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	e000      	b.n	8009ad4 <f_mkfs+0x17c>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 8009ad6:	8c3b      	ldrh	r3, [r7, #32]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 8009ae2:	8c3b      	ldrh	r3, [r7, #32]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aec:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8009aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d101      	bne.n	8009af8 <f_mkfs+0x1a0>
 8009af4:	2311      	movs	r3, #17
 8009af6:	e37b      	b.n	800a1f0 <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 8009afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <f_mkfs+0x1ae>
 8009b02:	2311      	movs	r3, #17
 8009b04:	e374      	b.n	800a1f0 <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	61bb      	str	r3, [r7, #24]
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8009b0e:	f107 0218 	add.w	r2, r7, #24
 8009b12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b16:	2101      	movs	r1, #1
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fd fb91 	bl	8007240 <disk_ioctl>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <f_mkfs+0x1d0>
 8009b24:	2301      	movs	r3, #1
 8009b26:	e363      	b.n	800a1f0 <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 8009b28:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8009b2c:	f003 0308 	and.w	r3, r3, #8
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d108      	bne.n	8009b46 <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	2b3f      	cmp	r3, #63	@ 0x3f
 8009b38:	d905      	bls.n	8009b46 <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 8009b3a:	233f      	movs	r3, #63	@ 0x3f
 8009b3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b3e:	69ba      	ldr	r2, [r7, #24]
 8009b40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b4a:	d801      	bhi.n	8009b50 <f_mkfs+0x1f8>
 8009b4c:	230e      	movs	r3, #14
 8009b4e:	e34f      	b.n	800a1f0 <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 8009b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b52:	2b80      	cmp	r3, #128	@ 0x80
 8009b54:	d901      	bls.n	8009b5a <f_mkfs+0x202>
 8009b56:	2380      	movs	r3, #128	@ 0x80
 8009b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 8009b5a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d009      	beq.n	8009b7a <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 8009b66:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d103      	bne.n	8009b7a <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 8009b72:	2303      	movs	r3, #3
 8009b74:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8009b78:	e00a      	b.n	8009b90 <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8009b7a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8009b7e:	f003 0301 	and.w	r3, r3, #1
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <f_mkfs+0x232>
 8009b86:	2313      	movs	r3, #19
 8009b88:	e332      	b.n	800a1f0 <f_mkfs+0x898>
		fsty = FS_FAT16;
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 8009b96:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 8009b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 8009b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b9e:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 8009ba0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009ba4:	2b03      	cmp	r3, #3
 8009ba6:	d141      	bne.n	8009c2c <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 8009ba8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d120      	bne.n	8009bf0 <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	0c5b      	lsrs	r3, r3, #17
 8009bb2:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bb8:	2301      	movs	r3, #1
 8009bba:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bbc:	e00a      	b.n	8009bd4 <f_mkfs+0x27c>
 8009bbe:	bf00      	nop
 8009bc0:	20005cf4 	.word	0x20005cf4
 8009bc4:	08016bec 	.word	0x08016bec
 8009bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bca:	3301      	adds	r3, #1
 8009bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bd0:	005b      	lsls	r3, r3, #1
 8009bd2:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bd4:	4a95      	ldr	r2, [pc, #596]	@ (8009e2c <f_mkfs+0x4d4>)
 8009bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d007      	beq.n	8009bf0 <f_mkfs+0x298>
 8009be0:	4a92      	ldr	r2, [pc, #584]	@ (8009e2c <f_mkfs+0x4d4>)
 8009be2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009be8:	461a      	mov	r2, r3
 8009bea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d2eb      	bcs.n	8009bc8 <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 8009bf0:	69ba      	ldr	r2, [r7, #24]
 8009bf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8009bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bfc:	3302      	adds	r3, #2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	8c3a      	ldrh	r2, [r7, #32]
 8009c02:	4413      	add	r3, r2
 8009c04:	3b01      	subs	r3, #1
 8009c06:	8c3a      	ldrh	r2, [r7, #32]
 8009c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c0c:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 8009c0e:	2320      	movs	r3, #32
 8009c10:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 8009c12:	2300      	movs	r3, #0
 8009c14:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8009c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c18:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d903      	bls.n	8009c28 <f_mkfs+0x2d0>
 8009c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c22:	4a83      	ldr	r2, [pc, #524]	@ (8009e30 <f_mkfs+0x4d8>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d94b      	bls.n	8009cc0 <f_mkfs+0x368>
 8009c28:	230e      	movs	r3, #14
 8009c2a:	e2e1      	b.n	800a1f0 <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 8009c2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d11b      	bne.n	8009c6a <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	0b1b      	lsrs	r3, r3, #12
 8009c36:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8009c38:	2300      	movs	r3, #0
 8009c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c40:	e005      	b.n	8009c4e <f_mkfs+0x2f6>
 8009c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c44:	3301      	adds	r3, #1
 8009c46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c4a:	005b      	lsls	r3, r3, #1
 8009c4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c4e:	4a79      	ldr	r2, [pc, #484]	@ (8009e34 <f_mkfs+0x4dc>)
 8009c50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d007      	beq.n	8009c6a <f_mkfs+0x312>
 8009c5a:	4a76      	ldr	r2, [pc, #472]	@ (8009e34 <f_mkfs+0x4dc>)
 8009c5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c62:	461a      	mov	r2, r3
 8009c64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d2eb      	bcs.n	8009c42 <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 8009c6a:	69ba      	ldr	r2, [r7, #24]
 8009c6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c72:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 8009c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c76:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d904      	bls.n	8009c88 <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8009c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c80:	3302      	adds	r3, #2
 8009c82:	005b      	lsls	r3, r3, #1
 8009c84:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c86:	e00a      	b.n	8009c9e <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8009c8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c90:	4613      	mov	r3, r2
 8009c92:	005b      	lsls	r3, r3, #1
 8009c94:	4413      	add	r3, r2
 8009c96:	3301      	adds	r3, #1
 8009c98:	085b      	lsrs	r3, r3, #1
 8009c9a:	3303      	adds	r3, #3
 8009c9c:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8009c9e:	8c3b      	ldrh	r3, [r7, #32]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ca4:	4413      	add	r3, r2
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	8c3a      	ldrh	r2, [r7, #32]
 8009caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cae:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 8009cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb6:	015b      	lsls	r3, r3, #5
 8009cb8:	8c3a      	ldrh	r2, [r7, #32]
 8009cba:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cbe:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8009cc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009cc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cc4:	4413      	add	r3, r2
 8009cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 8009cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009ccc:	fb03 f202 	mul.w	r2, r3, r2
 8009cd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cd2:	4413      	add	r3, r2
 8009cd4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009cd6:	4413      	add	r3, r2
 8009cd8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8009cda:	69fa      	ldr	r2, [r7, #28]
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cde:	4413      	add	r3, r2
 8009ce0:	1e5a      	subs	r2, r3, #1
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	425b      	negs	r3, r3
 8009ce6:	401a      	ands	r2, r3
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 8009cee:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	d108      	bne.n	8009d08 <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 8009cf6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009cf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cfa:	4413      	add	r3, r2
 8009cfc:	677b      	str	r3, [r7, #116]	@ 0x74
 8009cfe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009d00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d02:	4413      	add	r3, r2
 8009d04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d06:	e019      	b.n	8009d3c <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 8009d08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009d0c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d12:	fb01 f202 	mul.w	r2, r1, r2
 8009d16:	1a9b      	subs	r3, r3, r2
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d008      	beq.n	8009d2e <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 8009d1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d24:	3301      	adds	r3, #1
 8009d26:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 8009d2e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009d38:	4413      	add	r3, r2
 8009d3a:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8009d3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d3e:	011a      	lsls	r2, r3, #4
 8009d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d42:	441a      	add	r2, r3
 8009d44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d46:	1ad2      	subs	r2, r2, r3
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d901      	bls.n	8009d52 <f_mkfs+0x3fa>
 8009d4e:	230e      	movs	r3, #14
 8009d50:	e24e      	b.n	800a1f0 <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d56:	1ad2      	subs	r2, r2, r3
 8009d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d5c:	fb01 f303 	mul.w	r3, r1, r3
 8009d60:	1ad2      	subs	r2, r2, r3
 8009d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d64:	1ad2      	subs	r2, r2, r3
 8009d66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 8009d6e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d10f      	bne.n	8009d96 <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 8009d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d78:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d80a      	bhi.n	8009d96 <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8009d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d105      	bne.n	8009d92 <f_mkfs+0x43a>
 8009d86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d88:	085b      	lsrs	r3, r3, #1
 8009d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d145      	bne.n	8009e1e <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8009d92:	230e      	movs	r3, #14
 8009d94:	e22c      	b.n	800a1f0 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 8009d96:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d134      	bne.n	8009e08 <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8009d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d91f      	bls.n	8009de8 <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 8009da8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d107      	bne.n	8009dbe <f_mkfs+0x466>
 8009dae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	2b40      	cmp	r3, #64	@ 0x40
 8009db4:	d803      	bhi.n	8009dbe <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 8009db6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009db8:	005b      	lsls	r3, r3, #1
 8009dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dbc:	e034      	b.n	8009e28 <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 8009dbe:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8009dc2:	f003 0302 	and.w	r3, r3, #2
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d003      	beq.n	8009dd2 <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8009dca:	2303      	movs	r3, #3
 8009dcc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8009dd0:	e02a      	b.n	8009e28 <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d105      	bne.n	8009de4 <f_mkfs+0x48c>
 8009dd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009dda:	005b      	lsls	r3, r3, #1
 8009ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009de0:	2b80      	cmp	r3, #128	@ 0x80
 8009de2:	d91e      	bls.n	8009e22 <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8009de4:	230e      	movs	r3, #14
 8009de6:	e203      	b.n	800a1f0 <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8009de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dea:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d80a      	bhi.n	8009e08 <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d105      	bne.n	8009e04 <f_mkfs+0x4ac>
 8009df8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009dfa:	005b      	lsls	r3, r3, #1
 8009dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e00:	2b80      	cmp	r3, #128	@ 0x80
 8009e02:	d910      	bls.n	8009e26 <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8009e04:	230e      	movs	r3, #14
 8009e06:	e1f3      	b.n	800a1f0 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 8009e08:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d113      	bne.n	8009e38 <f_mkfs+0x4e0>
 8009e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e12:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d90e      	bls.n	8009e38 <f_mkfs+0x4e0>
 8009e1a:	230e      	movs	r3, #14
 8009e1c:	e1e8      	b.n	800a1f0 <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8009e1e:	bf00      	nop
 8009e20:	e6bc      	b.n	8009b9c <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009e22:	bf00      	nop
 8009e24:	e6ba      	b.n	8009b9c <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009e26:	bf00      	nop
			pau = sz_au;
 8009e28:	e6b8      	b.n	8009b9c <f_mkfs+0x244>
 8009e2a:	bf00      	nop
 8009e2c:	08016bfc 	.word	0x08016bfc
 8009e30:	0ffffff5 	.word	0x0ffffff5
 8009e34:	08016c0c 	.word	0x08016c0c

			/* Ok, it is the valid cluster configuration */
			break;
 8009e38:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 8009e3a:	8c3b      	ldrh	r3, [r7, #32]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	2100      	movs	r1, #0
 8009e40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e42:	f00b faeb 	bl	801541c <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8009e46:	220b      	movs	r2, #11
 8009e48:	49b1      	ldr	r1, [pc, #708]	@ (800a110 <f_mkfs+0x7b8>)
 8009e4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e4c:	f00b fb6a 	bl	8015524 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8009e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e52:	330b      	adds	r3, #11
 8009e54:	8c3a      	ldrh	r2, [r7, #32]
 8009e56:	4611      	mov	r1, r2
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fd faaf 	bl	80073bc <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	330d      	adds	r3, #13
 8009e62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e64:	b2d2      	uxtb	r2, r2
 8009e66:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8009e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6a:	330e      	adds	r3, #14
 8009e6c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009e6e:	b292      	uxth	r2, r2
 8009e70:	4611      	mov	r1, r2
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fd faa2 	bl	80073bc <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8009e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7a:	3310      	adds	r3, #16
 8009e7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009e7e:	b2d2      	uxtb	r2, r2
 8009e80:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 8009e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e84:	f103 0211 	add.w	r2, r3, #17
 8009e88:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009e8c:	2b03      	cmp	r3, #3
 8009e8e:	d002      	beq.n	8009e96 <f_mkfs+0x53e>
 8009e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	e000      	b.n	8009e98 <f_mkfs+0x540>
 8009e96:	2300      	movs	r3, #0
 8009e98:	4619      	mov	r1, r3
 8009e9a:	4610      	mov	r0, r2
 8009e9c:	f7fd fa8e 	bl	80073bc <st_word>
		if (sz_vol < 0x10000) {
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ea6:	d208      	bcs.n	8009eba <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eaa:	3313      	adds	r3, #19
 8009eac:	69ba      	ldr	r2, [r7, #24]
 8009eae:	b292      	uxth	r2, r2
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fd fa82 	bl	80073bc <st_word>
 8009eb8:	e006      	b.n	8009ec8 <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 8009eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebc:	3320      	adds	r3, #32
 8009ebe:	69ba      	ldr	r2, [r7, #24]
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fd fa95 	bl	80073f2 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eca:	3315      	adds	r3, #21
 8009ecc:	22f8      	movs	r2, #248	@ 0xf8
 8009ece:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed2:	3318      	adds	r3, #24
 8009ed4:	213f      	movs	r1, #63	@ 0x3f
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fd fa70 	bl	80073bc <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8009edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ede:	331a      	adds	r3, #26
 8009ee0:	21ff      	movs	r1, #255	@ 0xff
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fd fa6a 	bl	80073bc <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eea:	331c      	adds	r3, #28
 8009eec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fd fa7f 	bl	80073f2 <st_dword>
		if (fsty == FS_FAT32) {
 8009ef4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d12d      	bne.n	8009f58 <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 8009efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efe:	3343      	adds	r3, #67	@ 0x43
 8009f00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fd fa75 	bl	80073f2 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8009f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0a:	3324      	adds	r3, #36	@ 0x24
 8009f0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fd fa6f 	bl	80073f2 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8009f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f16:	332c      	adds	r3, #44	@ 0x2c
 8009f18:	2102      	movs	r1, #2
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7fd fa69 	bl	80073f2 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8009f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f22:	3330      	adds	r3, #48	@ 0x30
 8009f24:	2101      	movs	r1, #1
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fd fa48 	bl	80073bc <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2e:	3332      	adds	r3, #50	@ 0x32
 8009f30:	2106      	movs	r1, #6
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fd fa42 	bl	80073bc <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8009f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3a:	3340      	adds	r3, #64	@ 0x40
 8009f3c:	2280      	movs	r2, #128	@ 0x80
 8009f3e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8009f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f42:	3342      	adds	r3, #66	@ 0x42
 8009f44:	2229      	movs	r2, #41	@ 0x29
 8009f46:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8009f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f4a:	3347      	adds	r3, #71	@ 0x47
 8009f4c:	2213      	movs	r2, #19
 8009f4e:	4971      	ldr	r1, [pc, #452]	@ (800a114 <f_mkfs+0x7bc>)
 8009f50:	4618      	mov	r0, r3
 8009f52:	f00b fae7 	bl	8015524 <memcpy>
 8009f56:	e01c      	b.n	8009f92 <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 8009f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5a:	3327      	adds	r3, #39	@ 0x27
 8009f5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fd fa47 	bl	80073f2 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8009f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f66:	3316      	adds	r3, #22
 8009f68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009f6a:	b292      	uxth	r2, r2
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fd fa24 	bl	80073bc <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8009f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f76:	3324      	adds	r3, #36	@ 0x24
 8009f78:	2280      	movs	r2, #128	@ 0x80
 8009f7a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7e:	3326      	adds	r3, #38	@ 0x26
 8009f80:	2229      	movs	r2, #41	@ 0x29
 8009f82:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8009f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f86:	332b      	adds	r3, #43	@ 0x2b
 8009f88:	2213      	movs	r2, #19
 8009f8a:	4963      	ldr	r1, [pc, #396]	@ (800a118 <f_mkfs+0x7c0>)
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f00b fac9 	bl	8015524 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8009f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f94:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009f98:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7fd fa0d 	bl	80073bc <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8009fa2:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009faa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009fac:	f7fd f914 	bl	80071d8 <disk_write>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d001      	beq.n	8009fba <f_mkfs+0x662>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e11a      	b.n	800a1f0 <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 8009fba:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8009fbe:	2b03      	cmp	r3, #3
 8009fc0:	d140      	bne.n	800a044 <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8009fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fc4:	1d9a      	adds	r2, r3, #6
 8009fc6:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8009fca:	2301      	movs	r3, #1
 8009fcc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009fce:	f7fd f903 	bl	80071d8 <disk_write>
			memset(buf, 0, ss);
 8009fd2:	8c3b      	ldrh	r3, [r7, #32]
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fda:	f00b fa1f 	bl	801541c <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8009fde:	494f      	ldr	r1, [pc, #316]	@ (800a11c <f_mkfs+0x7c4>)
 8009fe0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fe2:	f7fd fa06 	bl	80073f2 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009fec:	494c      	ldr	r1, [pc, #304]	@ (800a120 <f_mkfs+0x7c8>)
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fd f9ff 	bl	80073f2 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	4619      	mov	r1, r3
 800a000:	4610      	mov	r0, r2
 800a002:	f7fd f9f6 	bl	80073f2 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800a006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a008:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a00c:	2102      	movs	r1, #2
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fd f9ef 	bl	80073f2 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800a014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a016:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a01a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fd f9cc 	bl	80073bc <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800a024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a026:	1dda      	adds	r2, r3, #7
 800a028:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800a02c:	2301      	movs	r3, #1
 800a02e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a030:	f7fd f8d2 	bl	80071d8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800a034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a036:	1c5a      	adds	r2, r3, #1
 800a038:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800a03c:	2301      	movs	r3, #1
 800a03e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a040:	f7fd f8ca 	bl	80071d8 <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 800a044:	8c3b      	ldrh	r3, [r7, #32]
 800a046:	461a      	mov	r2, r3
 800a048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a04a:	fb02 f303 	mul.w	r3, r2, r3
 800a04e:	461a      	mov	r2, r3
 800a050:	2100      	movs	r1, #0
 800a052:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a054:	f00b f9e2 	bl	801541c <memset>
		sect = b_fat;		/* FAT start sector */
 800a058:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a05a:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800a05c:	2300      	movs	r3, #0
 800a05e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a060:	e04b      	b.n	800a0fa <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 800a062:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a066:	2b03      	cmp	r3, #3
 800a068:	d113      	bne.n	800a092 <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800a06a:	f06f 0107 	mvn.w	r1, #7
 800a06e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a070:	f7fd f9bf 	bl	80073f2 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 800a074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a076:	3304      	adds	r3, #4
 800a078:	f04f 31ff 	mov.w	r1, #4294967295
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fd f9b8 	bl	80073f2 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800a082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a084:	3308      	adds	r3, #8
 800a086:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fd f9b1 	bl	80073f2 <st_dword>
 800a090:	e00b      	b.n	800a0aa <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800a092:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a096:	2b01      	cmp	r3, #1
 800a098:	d101      	bne.n	800a09e <f_mkfs+0x746>
 800a09a:	4b22      	ldr	r3, [pc, #136]	@ (800a124 <f_mkfs+0x7cc>)
 800a09c:	e001      	b.n	800a0a2 <f_mkfs+0x74a>
 800a09e:	f06f 0307 	mvn.w	r3, #7
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0a6:	f7fd f9a4 	bl	80073f2 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800a0aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800a0ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a0b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	bf28      	it	cs
 800a0b6:	4613      	movcs	r3, r2
 800a0b8:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800a0ba:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800a0be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a0c0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a0c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a0c4:	f7fd f888 	bl	80071d8 <disk_write>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <f_mkfs+0x77a>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e08e      	b.n	800a1f0 <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800a0d2:	8c3b      	ldrh	r3, [r7, #32]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0da:	f00b f99f 	bl	801541c <memset>
				sect += n; nsect -= n;
 800a0de:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a0e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a0e2:	4413      	add	r3, r2
 800a0e4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a0e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a0ea:	1ad3      	subs	r3, r2, r3
 800a0ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 800a0ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1dc      	bne.n	800a0ae <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800a0f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d3af      	bcc.n	800a062 <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800a102:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a106:	2b03      	cmp	r3, #3
 800a108:	d10e      	bne.n	800a128 <f_mkfs+0x7d0>
 800a10a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a10c:	e00d      	b.n	800a12a <f_mkfs+0x7d2>
 800a10e:	bf00      	nop
 800a110:	08016ae4 	.word	0x08016ae4
 800a114:	08016af0 	.word	0x08016af0
 800a118:	08016b04 	.word	0x08016b04
 800a11c:	41615252 	.word	0x41615252
 800a120:	61417272 	.word	0x61417272
 800a124:	00fffff8 	.word	0x00fffff8
 800a128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a12a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800a12c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a12e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a130:	4293      	cmp	r3, r2
 800a132:	bf28      	it	cs
 800a134:	4613      	movcs	r3, r2
 800a136:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800a138:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800a13c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a13e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a140:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a142:	f7fd f849 	bl	80071d8 <disk_write>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <f_mkfs+0x7f8>
 800a14c:	2301      	movs	r3, #1
 800a14e:	e04f      	b.n	800a1f0 <f_mkfs+0x898>
			sect += n; nsect -= n;
 800a150:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a154:	4413      	add	r3, r2
 800a156:	673b      	str	r3, [r7, #112]	@ 0x70
 800a158:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a15a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 800a160:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e2      	bne.n	800a12c <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 800a166:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a16a:	2b03      	cmp	r3, #3
 800a16c:	d103      	bne.n	800a176 <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 800a16e:	230c      	movs	r3, #12
 800a170:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800a174:	e012      	b.n	800a19c <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a17c:	d303      	bcc.n	800a186 <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 800a17e:	2306      	movs	r3, #6
 800a180:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800a184:	e00a      	b.n	800a19c <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 800a186:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d103      	bne.n	800a196 <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 800a18e:	2304      	movs	r3, #4
 800a190:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800a194:	e002      	b.n	800a19c <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 800a196:	2301      	movs	r3, #1
 800a198:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 800a19c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a1a0:	f003 0308 	and.w	r3, r3, #8
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d116      	bne.n	800a1d6 <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	613b      	str	r3, [r7, #16]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 800a1b0:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800a1b4:	f107 0110 	add.w	r1, r7, #16
 800a1b8:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1be:	f7ff faa7 	bl	8009710 <create_partition>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 800a1c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d002      	beq.n	800a1d6 <f_mkfs+0x87e>
 800a1d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a1d4:	e00c      	b.n	800a1f0 <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800a1d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2100      	movs	r1, #0
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7fd f82e 	bl	8007240 <disk_ioctl>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <f_mkfs+0x896>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e000      	b.n	800a1f0 <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3778      	adds	r7, #120	@ 0x78
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800a1f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a230 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a1fc:	f7fc ff58 	bl	80070b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a200:	480c      	ldr	r0, [pc, #48]	@ (800a234 <LoopForever+0x6>)
  ldr r1, =_edata
 800a202:	490d      	ldr	r1, [pc, #52]	@ (800a238 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a204:	4a0d      	ldr	r2, [pc, #52]	@ (800a23c <LoopForever+0xe>)
  movs r3, #0
 800a206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a208:	e002      	b.n	800a210 <LoopCopyDataInit>

0800a20a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a20a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a20c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a20e:	3304      	adds	r3, #4

0800a210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a214:	d3f9      	bcc.n	800a20a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a216:	4a0a      	ldr	r2, [pc, #40]	@ (800a240 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a218:	4c0a      	ldr	r4, [pc, #40]	@ (800a244 <LoopForever+0x16>)
  movs r3, #0
 800a21a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a21c:	e001      	b.n	800a222 <LoopFillZerobss>

0800a21e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a21e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a220:	3204      	adds	r2, #4

0800a222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a224:	d3fb      	bcc.n	800a21e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a226:	f00b f94f 	bl	80154c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a22a:	f7f9 fa9d 	bl	8003768 <main>

0800a22e <LoopForever>:

LoopForever:
    b LoopForever
 800a22e:	e7fe      	b.n	800a22e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800a230:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800a234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a238:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800a23c:	08016d7c 	.word	0x08016d7c
  ldr r2, =_sbss
 800a240:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800a244:	20005e4c 	.word	0x20005e4c

0800a248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a248:	e7fe      	b.n	800a248 <ADC1_2_IRQHandler>

0800a24a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b082      	sub	sp, #8
 800a24e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a254:	2003      	movs	r0, #3
 800a256:	f001 fd11 	bl	800bc7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a25a:	200f      	movs	r0, #15
 800a25c:	f000 f80e 	bl	800a27c <HAL_InitTick>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	71fb      	strb	r3, [r7, #7]
 800a26a:	e001      	b.n	800a270 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a26c:	f7fc fa56 	bl	800671c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a270:	79fb      	ldrb	r3, [r7, #7]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
	...

0800a27c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800a288:	4b17      	ldr	r3, [pc, #92]	@ (800a2e8 <HAL_InitTick+0x6c>)
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d023      	beq.n	800a2d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800a290:	4b16      	ldr	r3, [pc, #88]	@ (800a2ec <HAL_InitTick+0x70>)
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	4b14      	ldr	r3, [pc, #80]	@ (800a2e8 <HAL_InitTick+0x6c>)
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	4619      	mov	r1, r3
 800a29a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a29e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f001 fd21 	bl	800bcee <HAL_SYSTICK_Config>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10f      	bne.n	800a2d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b0f      	cmp	r3, #15
 800a2b6:	d809      	bhi.n	800a2cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	6879      	ldr	r1, [r7, #4]
 800a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c0:	f001 fce7 	bl	800bc92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a2c4:	4a0a      	ldr	r2, [pc, #40]	@ (800a2f0 <HAL_InitTick+0x74>)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6013      	str	r3, [r2, #0]
 800a2ca:	e007      	b.n	800a2dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	73fb      	strb	r3, [r7, #15]
 800a2d0:	e004      	b.n	800a2dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	73fb      	strb	r3, [r7, #15]
 800a2d6:	e001      	b.n	800a2dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000178 	.word	0x20000178
 800a2ec:	20000168 	.word	0x20000168
 800a2f0:	20000174 	.word	0x20000174

0800a2f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a2f8:	4b06      	ldr	r3, [pc, #24]	@ (800a314 <HAL_IncTick+0x20>)
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	4b06      	ldr	r3, [pc, #24]	@ (800a318 <HAL_IncTick+0x24>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4413      	add	r3, r2
 800a304:	4a04      	ldr	r2, [pc, #16]	@ (800a318 <HAL_IncTick+0x24>)
 800a306:	6013      	str	r3, [r2, #0]
}
 800a308:	bf00      	nop
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	20000178 	.word	0x20000178
 800a318:	20005d00 	.word	0x20005d00

0800a31c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a31c:	b480      	push	{r7}
 800a31e:	af00      	add	r7, sp, #0
  return uwTick;
 800a320:	4b03      	ldr	r3, [pc, #12]	@ (800a330 <HAL_GetTick+0x14>)
 800a322:	681b      	ldr	r3, [r3, #0]
}
 800a324:	4618      	mov	r0, r3
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	20005d00 	.word	0x20005d00

0800a334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a33c:	f7ff ffee 	bl	800a31c <HAL_GetTick>
 800a340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34c:	d005      	beq.n	800a35a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800a34e:	4b0a      	ldr	r3, [pc, #40]	@ (800a378 <HAL_Delay+0x44>)
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	461a      	mov	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4413      	add	r3, r2
 800a358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a35a:	bf00      	nop
 800a35c:	f7ff ffde 	bl	800a31c <HAL_GetTick>
 800a360:	4602      	mov	r2, r0
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d8f7      	bhi.n	800a35c <HAL_Delay+0x28>
  {
  }
}
 800a36c:	bf00      	nop
 800a36e:	bf00      	nop
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	20000178 	.word	0x20000178

0800a37c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	431a      	orrs	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	609a      	str	r2, [r3, #8]
}
 800a396:	bf00      	nop
 800a398:	370c      	adds	r7, #12
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b083      	sub	sp, #12
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	431a      	orrs	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	609a      	str	r2, [r3, #8]
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b087      	sub	sp, #28
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
 800a3f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	3360      	adds	r3, #96	@ 0x60
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4413      	add	r3, r2
 800a3fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	4b08      	ldr	r3, [pc, #32]	@ (800a428 <LL_ADC_SetOffset+0x44>)
 800a406:	4013      	ands	r3, r2
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	430a      	orrs	r2, r1
 800a412:	4313      	orrs	r3, r2
 800a414:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800a41c:	bf00      	nop
 800a41e:	371c      	adds	r7, #28
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	03fff000 	.word	0x03fff000

0800a42c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	3360      	adds	r3, #96	@ 0x60
 800a43a:	461a      	mov	r2, r3
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4413      	add	r3, r2
 800a442:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800a458:	b480      	push	{r7}
 800a45a:	b087      	sub	sp, #28
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	3360      	adds	r3, #96	@ 0x60
 800a468:	461a      	mov	r2, r3
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	4413      	add	r3, r2
 800a470:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	431a      	orrs	r2, r3
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800a482:	bf00      	nop
 800a484:	371c      	adds	r7, #28
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d101      	bne.n	800a4a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e000      	b.n	800a4a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	3330      	adds	r3, #48	@ 0x30
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	0a1b      	lsrs	r3, r3, #8
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	f003 030c 	and.w	r3, r3, #12
 800a4d0:	4413      	add	r3, r2
 800a4d2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	f003 031f 	and.w	r3, r3, #31
 800a4de:	211f      	movs	r1, #31
 800a4e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a4e4:	43db      	mvns	r3, r3
 800a4e6:	401a      	ands	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	0e9b      	lsrs	r3, r3, #26
 800a4ec:	f003 011f 	and.w	r1, r3, #31
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	f003 031f 	and.w	r3, r3, #31
 800a4f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a4fa:	431a      	orrs	r2, r3
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a500:	bf00      	nop
 800a502:	371c      	adds	r7, #28
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b087      	sub	sp, #28
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3314      	adds	r3, #20
 800a51c:	461a      	mov	r2, r3
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	0e5b      	lsrs	r3, r3, #25
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	f003 0304 	and.w	r3, r3, #4
 800a528:	4413      	add	r3, r2
 800a52a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	0d1b      	lsrs	r3, r3, #20
 800a534:	f003 031f 	and.w	r3, r3, #31
 800a538:	2107      	movs	r1, #7
 800a53a:	fa01 f303 	lsl.w	r3, r1, r3
 800a53e:	43db      	mvns	r3, r3
 800a540:	401a      	ands	r2, r3
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	0d1b      	lsrs	r3, r3, #20
 800a546:	f003 031f 	and.w	r3, r3, #31
 800a54a:	6879      	ldr	r1, [r7, #4]
 800a54c:	fa01 f303 	lsl.w	r3, r1, r3
 800a550:	431a      	orrs	r2, r3
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a556:	bf00      	nop
 800a558:	371c      	adds	r7, #28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
	...

0800a564 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a57c:	43db      	mvns	r3, r3
 800a57e:	401a      	ands	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f003 0318 	and.w	r3, r3, #24
 800a586:	4908      	ldr	r1, [pc, #32]	@ (800a5a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 800a588:	40d9      	lsrs	r1, r3
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	400b      	ands	r3, r1
 800a58e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a592:	431a      	orrs	r2, r3
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800a59a:	bf00      	nop
 800a59c:	3714      	adds	r7, #20
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	0007ffff 	.word	0x0007ffff

0800a5ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	f003 031f 	and.w	r3, r3, #31
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800a5d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	6093      	str	r3, [r2, #8]
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a600:	d101      	bne.n	800a606 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a602:	2301      	movs	r3, #1
 800a604:	e000      	b.n	800a608 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800a624:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a628:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a64c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a650:	d101      	bne.n	800a656 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a652:	2301      	movs	r3, #1
 800a654:	e000      	b.n	800a658 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a674:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a678:	f043 0201 	orr.w	r2, r3, #1
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a69c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a6a0:	f043 0202 	orr.w	r2, r3, #2
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d101      	bne.n	800a6cc <LL_ADC_IsEnabled+0x18>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e000      	b.n	800a6ce <LL_ADC_IsEnabled+0x1a>
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	370c      	adds	r7, #12
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b083      	sub	sp, #12
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	f003 0302 	and.w	r3, r3, #2
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d101      	bne.n	800a6f2 <LL_ADC_IsDisableOngoing+0x18>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e000      	b.n	800a6f4 <LL_ADC_IsDisableOngoing+0x1a>
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a710:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a714:	f043 0204 	orr.w	r2, r3, #4
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a738:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a73c:	f043 0210 	orr.w	r2, r3, #16
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	f003 0304 	and.w	r3, r3, #4
 800a760:	2b04      	cmp	r3, #4
 800a762:	d101      	bne.n	800a768 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a764:	2301      	movs	r3, #1
 800a766:	e000      	b.n	800a76a <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	370c      	adds	r7, #12
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800a776:	b480      	push	{r7}
 800a778:	b083      	sub	sp, #12
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a786:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a78a:	f043 0220 	orr.w	r2, r3, #32
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800a792:	bf00      	nop
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b083      	sub	sp, #12
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	f003 0308 	and.w	r3, r3, #8
 800a7ae:	2b08      	cmp	r3, #8
 800a7b0:	d101      	bne.n	800a7b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e000      	b.n	800a7b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a7c4:	b590      	push	{r4, r7, lr}
 800a7c6:	b089      	sub	sp, #36	@ 0x24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d101      	bne.n	800a7de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e130      	b.n	800aa40 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d109      	bne.n	800a800 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7fb ffb9 	bl	8006764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4618      	mov	r0, r3
 800a806:	f7ff fef1 	bl	800a5ec <LL_ADC_IsDeepPowerDownEnabled>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d004      	beq.n	800a81a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff fed7 	bl	800a5c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4618      	mov	r0, r3
 800a820:	f7ff ff0c 	bl	800a63c <LL_ADC_IsInternalRegulatorEnabled>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d115      	bne.n	800a856 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4618      	mov	r0, r3
 800a830:	f7ff fef0 	bl	800a614 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a834:	4b84      	ldr	r3, [pc, #528]	@ (800aa48 <HAL_ADC_Init+0x284>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	099b      	lsrs	r3, r3, #6
 800a83a:	4a84      	ldr	r2, [pc, #528]	@ (800aa4c <HAL_ADC_Init+0x288>)
 800a83c:	fba2 2303 	umull	r2, r3, r2, r3
 800a840:	099b      	lsrs	r3, r3, #6
 800a842:	3301      	adds	r3, #1
 800a844:	005b      	lsls	r3, r3, #1
 800a846:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a848:	e002      	b.n	800a850 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	3b01      	subs	r3, #1
 800a84e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1f9      	bne.n	800a84a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7ff feee 	bl	800a63c <LL_ADC_IsInternalRegulatorEnabled>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10d      	bne.n	800a882 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a86a:	f043 0210 	orr.w	r2, r3, #16
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a876:	f043 0201 	orr.w	r2, r3, #1
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff ff62 	bl	800a750 <LL_ADC_REG_IsConversionOngoing>
 800a88c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a892:	f003 0310 	and.w	r3, r3, #16
 800a896:	2b00      	cmp	r3, #0
 800a898:	f040 80c9 	bne.w	800aa2e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f040 80c5 	bne.w	800aa2e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8a8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800a8ac:	f043 0202 	orr.w	r2, r3, #2
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7ff fefb 	bl	800a6b4 <LL_ADC_IsEnabled>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d115      	bne.n	800a8f0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a8c4:	4862      	ldr	r0, [pc, #392]	@ (800aa50 <HAL_ADC_Init+0x28c>)
 800a8c6:	f7ff fef5 	bl	800a6b4 <LL_ADC_IsEnabled>
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4861      	ldr	r0, [pc, #388]	@ (800aa54 <HAL_ADC_Init+0x290>)
 800a8ce:	f7ff fef1 	bl	800a6b4 <LL_ADC_IsEnabled>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	431c      	orrs	r4, r3
 800a8d6:	4860      	ldr	r0, [pc, #384]	@ (800aa58 <HAL_ADC_Init+0x294>)
 800a8d8:	f7ff feec 	bl	800a6b4 <LL_ADC_IsEnabled>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	4323      	orrs	r3, r4
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d105      	bne.n	800a8f0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	485c      	ldr	r0, [pc, #368]	@ (800aa5c <HAL_ADC_Init+0x298>)
 800a8ec:	f7ff fd46 	bl	800a37c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	7e5b      	ldrb	r3, [r3, #25]
 800a8f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a8fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800a900:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800a906:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a90e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a910:	4313      	orrs	r3, r2
 800a912:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d106      	bne.n	800a92c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a922:	3b01      	subs	r3, #1
 800a924:	045b      	lsls	r3, r3, #17
 800a926:	69ba      	ldr	r2, [r7, #24]
 800a928:	4313      	orrs	r3, r2
 800a92a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a930:	2b00      	cmp	r3, #0
 800a932:	d009      	beq.n	800a948 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a938:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a940:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a942:	69ba      	ldr	r2, [r7, #24]
 800a944:	4313      	orrs	r3, r2
 800a946:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68da      	ldr	r2, [r3, #12]
 800a94e:	4b44      	ldr	r3, [pc, #272]	@ (800aa60 <HAL_ADC_Init+0x29c>)
 800a950:	4013      	ands	r3, r2
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	6812      	ldr	r2, [r2, #0]
 800a956:	69b9      	ldr	r1, [r7, #24]
 800a958:	430b      	orrs	r3, r1
 800a95a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4618      	mov	r0, r3
 800a962:	f7ff ff1c 	bl	800a79e <LL_ADC_INJ_IsConversionOngoing>
 800a966:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d13d      	bne.n	800a9ea <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d13a      	bne.n	800a9ea <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a978:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a980:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a982:	4313      	orrs	r3, r2
 800a984:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a990:	f023 0302 	bic.w	r3, r3, #2
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	6812      	ldr	r2, [r2, #0]
 800a998:	69b9      	ldr	r1, [r7, #24]
 800a99a:	430b      	orrs	r3, r1
 800a99c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d118      	bne.n	800a9da <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a9b2:	f023 0304 	bic.w	r3, r3, #4
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a9be:	4311      	orrs	r1, r2
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a9c4:	4311      	orrs	r1, r2
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	431a      	orrs	r2, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f042 0201 	orr.w	r2, r2, #1
 800a9d6:	611a      	str	r2, [r3, #16]
 800a9d8:	e007      	b.n	800a9ea <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	691a      	ldr	r2, [r3, #16]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f022 0201 	bic.w	r2, r2, #1
 800a9e8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d10c      	bne.n	800aa0c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9f8:	f023 010f 	bic.w	r1, r3, #15
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	69db      	ldr	r3, [r3, #28]
 800aa00:	1e5a      	subs	r2, r3, #1
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	430a      	orrs	r2, r1
 800aa08:	631a      	str	r2, [r3, #48]	@ 0x30
 800aa0a:	e007      	b.n	800aa1c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f022 020f 	bic.w	r2, r2, #15
 800aa1a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa20:	f023 0303 	bic.w	r3, r3, #3
 800aa24:	f043 0201 	orr.w	r2, r3, #1
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	655a      	str	r2, [r3, #84]	@ 0x54
 800aa2c:	e007      	b.n	800aa3e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa32:	f043 0210 	orr.w	r2, r3, #16
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800aa3e:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3724      	adds	r7, #36	@ 0x24
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd90      	pop	{r4, r7, pc}
 800aa48:	20000168 	.word	0x20000168
 800aa4c:	053e2d63 	.word	0x053e2d63
 800aa50:	50040000 	.word	0x50040000
 800aa54:	50040100 	.word	0x50040100
 800aa58:	50040200 	.word	0x50040200
 800aa5c:	50040300 	.word	0x50040300
 800aa60:	fff0c007 	.word	0xfff0c007

0800aa64 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800aa70:	4853      	ldr	r0, [pc, #332]	@ (800abc0 <HAL_ADC_Start_DMA+0x15c>)
 800aa72:	f7ff fd9b 	bl	800a5ac <LL_ADC_GetMultimode>
 800aa76:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7ff fe67 	bl	800a750 <LL_ADC_REG_IsConversionOngoing>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f040 8093 	bne.w	800abb0 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d101      	bne.n	800aa98 <HAL_ADC_Start_DMA+0x34>
 800aa94:	2302      	movs	r3, #2
 800aa96:	e08e      	b.n	800abb6 <HAL_ADC_Start_DMA+0x152>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a47      	ldr	r2, [pc, #284]	@ (800abc4 <HAL_ADC_Start_DMA+0x160>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d008      	beq.n	800aabc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d005      	beq.n	800aabc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	2b05      	cmp	r3, #5
 800aab4:	d002      	beq.n	800aabc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	2b09      	cmp	r3, #9
 800aaba:	d172      	bne.n	800aba2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f000 fda7 	bl	800b610 <ADC_Enable>
 800aac2:	4603      	mov	r3, r0
 800aac4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800aac6:	7dfb      	ldrb	r3, [r7, #23]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d165      	bne.n	800ab98 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aad0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800aad4:	f023 0301 	bic.w	r3, r3, #1
 800aad8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a38      	ldr	r2, [pc, #224]	@ (800abc8 <HAL_ADC_Start_DMA+0x164>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d002      	beq.n	800aaf0 <HAL_ADC_Start_DMA+0x8c>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	e000      	b.n	800aaf2 <HAL_ADC_Start_DMA+0x8e>
 800aaf0:	4b36      	ldr	r3, [pc, #216]	@ (800abcc <HAL_ADC_Start_DMA+0x168>)
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	6812      	ldr	r2, [r2, #0]
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d002      	beq.n	800ab00 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d105      	bne.n	800ab0c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab04:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d006      	beq.n	800ab26 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab1c:	f023 0206 	bic.w	r2, r3, #6
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	659a      	str	r2, [r3, #88]	@ 0x58
 800ab24:	e002      	b.n	800ab2c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab30:	4a27      	ldr	r2, [pc, #156]	@ (800abd0 <HAL_ADC_Start_DMA+0x16c>)
 800ab32:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab38:	4a26      	ldr	r2, [pc, #152]	@ (800abd4 <HAL_ADC_Start_DMA+0x170>)
 800ab3a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab40:	4a25      	ldr	r2, [pc, #148]	@ (800abd8 <HAL_ADC_Start_DMA+0x174>)
 800ab42:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	221c      	movs	r2, #28
 800ab4a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	685a      	ldr	r2, [r3, #4]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f042 0210 	orr.w	r2, r2, #16
 800ab62:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68da      	ldr	r2, [r3, #12]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f042 0201 	orr.w	r2, r2, #1
 800ab72:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3340      	adds	r3, #64	@ 0x40
 800ab7e:	4619      	mov	r1, r3
 800ab80:	68ba      	ldr	r2, [r7, #8]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f001 fb80 	bl	800c288 <HAL_DMA_Start_IT>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7ff fdb5 	bl	800a700 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800ab96:	e00d      	b.n	800abb4 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800aba0:	e008      	b.n	800abb4 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800abae:	e001      	b.n	800abb4 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800abb0:	2302      	movs	r3, #2
 800abb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800abb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3718      	adds	r7, #24
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	50040300 	.word	0x50040300
 800abc4:	50040200 	.word	0x50040200
 800abc8:	50040100 	.word	0x50040100
 800abcc:	50040000 	.word	0x50040000
 800abd0:	0800b7db 	.word	0x0800b7db
 800abd4:	0800b8b3 	.word	0x0800b8b3
 800abd8:	0800b8cf 	.word	0x0800b8cf

0800abdc <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800abea:	2b01      	cmp	r3, #1
 800abec:	d101      	bne.n	800abf2 <HAL_ADC_Stop_DMA+0x16>
 800abee:	2302      	movs	r3, #2
 800abf0:	e051      	b.n	800ac96 <HAL_ADC_Stop_DMA+0xba>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2201      	movs	r2, #1
 800abf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800abfa:	2103      	movs	r1, #3
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fc4b 	bl	800b498 <ADC_ConversionStop>
 800ac02:	4603      	mov	r3, r0
 800ac04:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800ac06:	7bfb      	ldrb	r3, [r7, #15]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d13f      	bne.n	800ac8c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68da      	ldr	r2, [r3, #12]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f022 0201 	bic.w	r2, r2, #1
 800ac1a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac20:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d10f      	bne.n	800ac4a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f001 fb8a 	bl	800c348 <HAL_DMA_Abort>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d005      	beq.n	800ac4a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f022 0210 	bic.w	r2, r2, #16
 800ac58:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d105      	bne.n	800ac6c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fd5b 	bl	800b71c <ADC_Disable>
 800ac66:	4603      	mov	r3, r0
 800ac68:	73fb      	strb	r3, [r7, #15]
 800ac6a:	e002      	b.n	800ac72 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fd55 	bl	800b71c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d109      	bne.n	800ac8c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac7c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800ac80:	f023 0301 	bic.w	r3, r3, #1
 800ac84:	f043 0201 	orr.w	r2, r3, #1
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800aca6:	bf00      	nop
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
	...

0800acb4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b0b6      	sub	sp, #216	@ 0xd8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800acbe:	2300      	movs	r3, #0
 800acc0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800acc4:	2300      	movs	r3, #0
 800acc6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d101      	bne.n	800acd6 <HAL_ADC_ConfigChannel+0x22>
 800acd2:	2302      	movs	r3, #2
 800acd4:	e3c9      	b.n	800b46a <HAL_ADC_ConfigChannel+0x7b6>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2201      	movs	r2, #1
 800acda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7ff fd34 	bl	800a750 <LL_ADC_REG_IsConversionOngoing>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	f040 83aa 	bne.w	800b444 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	2b05      	cmp	r3, #5
 800acfe:	d824      	bhi.n	800ad4a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	3b02      	subs	r3, #2
 800ad06:	2b03      	cmp	r3, #3
 800ad08:	d81b      	bhi.n	800ad42 <HAL_ADC_ConfigChannel+0x8e>
 800ad0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad10 <HAL_ADC_ConfigChannel+0x5c>)
 800ad0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad10:	0800ad21 	.word	0x0800ad21
 800ad14:	0800ad29 	.word	0x0800ad29
 800ad18:	0800ad31 	.word	0x0800ad31
 800ad1c:	0800ad39 	.word	0x0800ad39
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800ad20:	230c      	movs	r3, #12
 800ad22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ad26:	e010      	b.n	800ad4a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800ad28:	2312      	movs	r3, #18
 800ad2a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ad2e:	e00c      	b.n	800ad4a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800ad30:	2318      	movs	r3, #24
 800ad32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ad36:	e008      	b.n	800ad4a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800ad38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ad40:	e003      	b.n	800ad4a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800ad42:	2306      	movs	r3, #6
 800ad44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800ad48:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6818      	ldr	r0, [r3, #0]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	461a      	mov	r2, r3
 800ad54:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800ad58:	f7ff fbac 	bl	800a4b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7ff fcf5 	bl	800a750 <LL_ADC_REG_IsConversionOngoing>
 800ad66:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7ff fd15 	bl	800a79e <LL_ADC_INJ_IsConversionOngoing>
 800ad74:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800ad78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f040 81a4 	bne.w	800b0ca <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800ad82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f040 819f 	bne.w	800b0ca <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6818      	ldr	r0, [r3, #0]
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	6819      	ldr	r1, [r3, #0]
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	f7ff fbb7 	bl	800a50c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	695a      	ldr	r2, [r3, #20]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	08db      	lsrs	r3, r3, #3
 800adaa:	f003 0303 	and.w	r3, r3, #3
 800adae:	005b      	lsls	r3, r3, #1
 800adb0:	fa02 f303 	lsl.w	r3, r2, r3
 800adb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	2b04      	cmp	r3, #4
 800adbe:	d00a      	beq.n	800add6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6818      	ldr	r0, [r3, #0]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	6919      	ldr	r1, [r3, #16]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800add0:	f7ff fb08 	bl	800a3e4 <LL_ADC_SetOffset>
 800add4:	e179      	b.n	800b0ca <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2100      	movs	r1, #0
 800addc:	4618      	mov	r0, r3
 800adde:	f7ff fb25 	bl	800a42c <LL_ADC_GetOffsetChannel>
 800ade2:	4603      	mov	r3, r0
 800ade4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10a      	bne.n	800ae02 <HAL_ADC_ConfigChannel+0x14e>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2100      	movs	r1, #0
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7ff fb1a 	bl	800a42c <LL_ADC_GetOffsetChannel>
 800adf8:	4603      	mov	r3, r0
 800adfa:	0e9b      	lsrs	r3, r3, #26
 800adfc:	f003 021f 	and.w	r2, r3, #31
 800ae00:	e01e      	b.n	800ae40 <HAL_ADC_ConfigChannel+0x18c>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2100      	movs	r1, #0
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7ff fb0f 	bl	800a42c <LL_ADC_GetOffsetChannel>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ae18:	fa93 f3a3 	rbit	r3, r3
 800ae1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ae20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ae24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800ae28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800ae30:	2320      	movs	r3, #32
 800ae32:	e004      	b.n	800ae3e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800ae34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae38:	fab3 f383 	clz	r3, r3
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d105      	bne.n	800ae58 <HAL_ADC_ConfigChannel+0x1a4>
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	0e9b      	lsrs	r3, r3, #26
 800ae52:	f003 031f 	and.w	r3, r3, #31
 800ae56:	e018      	b.n	800ae8a <HAL_ADC_ConfigChannel+0x1d6>
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae64:	fa93 f3a3 	rbit	r3, r3
 800ae68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800ae6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ae70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800ae74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d101      	bne.n	800ae80 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800ae7c:	2320      	movs	r3, #32
 800ae7e:	e004      	b.n	800ae8a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800ae80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ae84:	fab3 f383 	clz	r3, r3
 800ae88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d106      	bne.n	800ae9c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2200      	movs	r2, #0
 800ae94:	2100      	movs	r1, #0
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7ff fade 	bl	800a458 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2101      	movs	r1, #1
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7ff fac2 	bl	800a42c <LL_ADC_GetOffsetChannel>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10a      	bne.n	800aec8 <HAL_ADC_ConfigChannel+0x214>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2101      	movs	r1, #1
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7ff fab7 	bl	800a42c <LL_ADC_GetOffsetChannel>
 800aebe:	4603      	mov	r3, r0
 800aec0:	0e9b      	lsrs	r3, r3, #26
 800aec2:	f003 021f 	and.w	r2, r3, #31
 800aec6:	e01e      	b.n	800af06 <HAL_ADC_ConfigChannel+0x252>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2101      	movs	r1, #1
 800aece:	4618      	mov	r0, r3
 800aed0:	f7ff faac 	bl	800a42c <LL_ADC_GetOffsetChannel>
 800aed4:	4603      	mov	r3, r0
 800aed6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aeda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aede:	fa93 f3a3 	rbit	r3, r3
 800aee2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800aee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aeea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800aeee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d101      	bne.n	800aefa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800aef6:	2320      	movs	r3, #32
 800aef8:	e004      	b.n	800af04 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800aefa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800aefe:	fab3 f383 	clz	r3, r3
 800af02:	b2db      	uxtb	r3, r3
 800af04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d105      	bne.n	800af1e <HAL_ADC_ConfigChannel+0x26a>
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	0e9b      	lsrs	r3, r3, #26
 800af18:	f003 031f 	and.w	r3, r3, #31
 800af1c:	e018      	b.n	800af50 <HAL_ADC_ConfigChannel+0x29c>
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800af2a:	fa93 f3a3 	rbit	r3, r3
 800af2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800af32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800af36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800af3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d101      	bne.n	800af46 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800af42:	2320      	movs	r3, #32
 800af44:	e004      	b.n	800af50 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800af46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af4a:	fab3 f383 	clz	r3, r3
 800af4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800af50:	429a      	cmp	r2, r3
 800af52:	d106      	bne.n	800af62 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2200      	movs	r2, #0
 800af5a:	2101      	movs	r1, #1
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7ff fa7b 	bl	800a458 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2102      	movs	r1, #2
 800af68:	4618      	mov	r0, r3
 800af6a:	f7ff fa5f 	bl	800a42c <LL_ADC_GetOffsetChannel>
 800af6e:	4603      	mov	r3, r0
 800af70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10a      	bne.n	800af8e <HAL_ADC_ConfigChannel+0x2da>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2102      	movs	r1, #2
 800af7e:	4618      	mov	r0, r3
 800af80:	f7ff fa54 	bl	800a42c <LL_ADC_GetOffsetChannel>
 800af84:	4603      	mov	r3, r0
 800af86:	0e9b      	lsrs	r3, r3, #26
 800af88:	f003 021f 	and.w	r2, r3, #31
 800af8c:	e01e      	b.n	800afcc <HAL_ADC_ConfigChannel+0x318>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2102      	movs	r1, #2
 800af94:	4618      	mov	r0, r3
 800af96:	f7ff fa49 	bl	800a42c <LL_ADC_GetOffsetChannel>
 800af9a:	4603      	mov	r3, r0
 800af9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800afa4:	fa93 f3a3 	rbit	r3, r3
 800afa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800afac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800afb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800afb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d101      	bne.n	800afc0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800afbc:	2320      	movs	r3, #32
 800afbe:	e004      	b.n	800afca <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800afc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800afc4:	fab3 f383 	clz	r3, r3
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d105      	bne.n	800afe4 <HAL_ADC_ConfigChannel+0x330>
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	0e9b      	lsrs	r3, r3, #26
 800afde:	f003 031f 	and.w	r3, r3, #31
 800afe2:	e014      	b.n	800b00e <HAL_ADC_ConfigChannel+0x35a>
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800afec:	fa93 f3a3 	rbit	r3, r3
 800aff0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800aff2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aff4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800aff8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800b000:	2320      	movs	r3, #32
 800b002:	e004      	b.n	800b00e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800b004:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b008:	fab3 f383 	clz	r3, r3
 800b00c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b00e:	429a      	cmp	r2, r3
 800b010:	d106      	bne.n	800b020 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2200      	movs	r2, #0
 800b018:	2102      	movs	r1, #2
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7ff fa1c 	bl	800a458 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2103      	movs	r1, #3
 800b026:	4618      	mov	r0, r3
 800b028:	f7ff fa00 	bl	800a42c <LL_ADC_GetOffsetChannel>
 800b02c:	4603      	mov	r3, r0
 800b02e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10a      	bne.n	800b04c <HAL_ADC_ConfigChannel+0x398>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2103      	movs	r1, #3
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7ff f9f5 	bl	800a42c <LL_ADC_GetOffsetChannel>
 800b042:	4603      	mov	r3, r0
 800b044:	0e9b      	lsrs	r3, r3, #26
 800b046:	f003 021f 	and.w	r2, r3, #31
 800b04a:	e017      	b.n	800b07c <HAL_ADC_ConfigChannel+0x3c8>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2103      	movs	r1, #3
 800b052:	4618      	mov	r0, r3
 800b054:	f7ff f9ea 	bl	800a42c <LL_ADC_GetOffsetChannel>
 800b058:	4603      	mov	r3, r0
 800b05a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b05c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b05e:	fa93 f3a3 	rbit	r3, r3
 800b062:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800b064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b066:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800b068:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d101      	bne.n	800b072 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800b06e:	2320      	movs	r3, #32
 800b070:	e003      	b.n	800b07a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800b072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b074:	fab3 f383 	clz	r3, r3
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b084:	2b00      	cmp	r3, #0
 800b086:	d105      	bne.n	800b094 <HAL_ADC_ConfigChannel+0x3e0>
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	0e9b      	lsrs	r3, r3, #26
 800b08e:	f003 031f 	and.w	r3, r3, #31
 800b092:	e011      	b.n	800b0b8 <HAL_ADC_ConfigChannel+0x404>
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b09a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b09c:	fa93 f3a3 	rbit	r3, r3
 800b0a0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800b0a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b0a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800b0a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800b0ac:	2320      	movs	r3, #32
 800b0ae:	e003      	b.n	800b0b8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800b0b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b0b2:	fab3 f383 	clz	r3, r3
 800b0b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d106      	bne.n	800b0ca <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	2103      	movs	r1, #3
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7ff f9c7 	bl	800a458 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7ff faf0 	bl	800a6b4 <LL_ADC_IsEnabled>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	f040 8140 	bne.w	800b35c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6818      	ldr	r0, [r3, #0]
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	6819      	ldr	r1, [r3, #0]
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	f7ff fa3b 	bl	800a564 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	4a8f      	ldr	r2, [pc, #572]	@ (800b330 <HAL_ADC_ConfigChannel+0x67c>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	f040 8131 	bne.w	800b35c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10b      	bne.n	800b122 <HAL_ADC_ConfigChannel+0x46e>
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	0e9b      	lsrs	r3, r3, #26
 800b110:	3301      	adds	r3, #1
 800b112:	f003 031f 	and.w	r3, r3, #31
 800b116:	2b09      	cmp	r3, #9
 800b118:	bf94      	ite	ls
 800b11a:	2301      	movls	r3, #1
 800b11c:	2300      	movhi	r3, #0
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	e019      	b.n	800b156 <HAL_ADC_ConfigChannel+0x4a2>
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b128:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b12a:	fa93 f3a3 	rbit	r3, r3
 800b12e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800b130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b132:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800b134:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b136:	2b00      	cmp	r3, #0
 800b138:	d101      	bne.n	800b13e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800b13a:	2320      	movs	r3, #32
 800b13c:	e003      	b.n	800b146 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800b13e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b140:	fab3 f383 	clz	r3, r3
 800b144:	b2db      	uxtb	r3, r3
 800b146:	3301      	adds	r3, #1
 800b148:	f003 031f 	and.w	r3, r3, #31
 800b14c:	2b09      	cmp	r3, #9
 800b14e:	bf94      	ite	ls
 800b150:	2301      	movls	r3, #1
 800b152:	2300      	movhi	r3, #0
 800b154:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b156:	2b00      	cmp	r3, #0
 800b158:	d079      	beq.n	800b24e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b162:	2b00      	cmp	r3, #0
 800b164:	d107      	bne.n	800b176 <HAL_ADC_ConfigChannel+0x4c2>
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	0e9b      	lsrs	r3, r3, #26
 800b16c:	3301      	adds	r3, #1
 800b16e:	069b      	lsls	r3, r3, #26
 800b170:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b174:	e015      	b.n	800b1a2 <HAL_ADC_ConfigChannel+0x4ee>
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b17c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b17e:	fa93 f3a3 	rbit	r3, r3
 800b182:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800b184:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b186:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800b188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d101      	bne.n	800b192 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800b18e:	2320      	movs	r3, #32
 800b190:	e003      	b.n	800b19a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800b192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b194:	fab3 f383 	clz	r3, r3
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	3301      	adds	r3, #1
 800b19c:	069b      	lsls	r3, r3, #26
 800b19e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d109      	bne.n	800b1c2 <HAL_ADC_ConfigChannel+0x50e>
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	0e9b      	lsrs	r3, r3, #26
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	f003 031f 	and.w	r3, r3, #31
 800b1ba:	2101      	movs	r1, #1
 800b1bc:	fa01 f303 	lsl.w	r3, r1, r3
 800b1c0:	e017      	b.n	800b1f2 <HAL_ADC_ConfigChannel+0x53e>
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1ca:	fa93 f3a3 	rbit	r3, r3
 800b1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800b1d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1d2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800b1d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d101      	bne.n	800b1de <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800b1da:	2320      	movs	r3, #32
 800b1dc:	e003      	b.n	800b1e6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800b1de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1e0:	fab3 f383 	clz	r3, r3
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	f003 031f 	and.w	r3, r3, #31
 800b1ec:	2101      	movs	r1, #1
 800b1ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b1f2:	ea42 0103 	orr.w	r1, r2, r3
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10a      	bne.n	800b218 <HAL_ADC_ConfigChannel+0x564>
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	0e9b      	lsrs	r3, r3, #26
 800b208:	3301      	adds	r3, #1
 800b20a:	f003 021f 	and.w	r2, r3, #31
 800b20e:	4613      	mov	r3, r2
 800b210:	005b      	lsls	r3, r3, #1
 800b212:	4413      	add	r3, r2
 800b214:	051b      	lsls	r3, r3, #20
 800b216:	e018      	b.n	800b24a <HAL_ADC_ConfigChannel+0x596>
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b21e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b220:	fa93 f3a3 	rbit	r3, r3
 800b224:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800b226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b228:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800b22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800b230:	2320      	movs	r3, #32
 800b232:	e003      	b.n	800b23c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800b234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b236:	fab3 f383 	clz	r3, r3
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	3301      	adds	r3, #1
 800b23e:	f003 021f 	and.w	r2, r3, #31
 800b242:	4613      	mov	r3, r2
 800b244:	005b      	lsls	r3, r3, #1
 800b246:	4413      	add	r3, r2
 800b248:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b24a:	430b      	orrs	r3, r1
 800b24c:	e081      	b.n	800b352 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b256:	2b00      	cmp	r3, #0
 800b258:	d107      	bne.n	800b26a <HAL_ADC_ConfigChannel+0x5b6>
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	0e9b      	lsrs	r3, r3, #26
 800b260:	3301      	adds	r3, #1
 800b262:	069b      	lsls	r3, r3, #26
 800b264:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b268:	e015      	b.n	800b296 <HAL_ADC_ConfigChannel+0x5e2>
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b272:	fa93 f3a3 	rbit	r3, r3
 800b276:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800b278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800b27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800b282:	2320      	movs	r3, #32
 800b284:	e003      	b.n	800b28e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800b286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b288:	fab3 f383 	clz	r3, r3
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	3301      	adds	r3, #1
 800b290:	069b      	lsls	r3, r3, #26
 800b292:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d109      	bne.n	800b2b6 <HAL_ADC_ConfigChannel+0x602>
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	0e9b      	lsrs	r3, r3, #26
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	f003 031f 	and.w	r3, r3, #31
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2b4:	e017      	b.n	800b2e6 <HAL_ADC_ConfigChannel+0x632>
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	fa93 f3a3 	rbit	r3, r3
 800b2c2:	61bb      	str	r3, [r7, #24]
  return result;
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800b2c8:	6a3b      	ldr	r3, [r7, #32]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d101      	bne.n	800b2d2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800b2ce:	2320      	movs	r3, #32
 800b2d0:	e003      	b.n	800b2da <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800b2d2:	6a3b      	ldr	r3, [r7, #32]
 800b2d4:	fab3 f383 	clz	r3, r3
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	3301      	adds	r3, #1
 800b2dc:	f003 031f 	and.w	r3, r3, #31
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b2e6:	ea42 0103 	orr.w	r1, r2, r3
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10d      	bne.n	800b312 <HAL_ADC_ConfigChannel+0x65e>
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	0e9b      	lsrs	r3, r3, #26
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	f003 021f 	and.w	r2, r3, #31
 800b302:	4613      	mov	r3, r2
 800b304:	005b      	lsls	r3, r3, #1
 800b306:	4413      	add	r3, r2
 800b308:	3b1e      	subs	r3, #30
 800b30a:	051b      	lsls	r3, r3, #20
 800b30c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b310:	e01e      	b.n	800b350 <HAL_ADC_ConfigChannel+0x69c>
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	fa93 f3a3 	rbit	r3, r3
 800b31e:	60fb      	str	r3, [r7, #12]
  return result;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d104      	bne.n	800b334 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800b32a:	2320      	movs	r3, #32
 800b32c:	e006      	b.n	800b33c <HAL_ADC_ConfigChannel+0x688>
 800b32e:	bf00      	nop
 800b330:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	fab3 f383 	clz	r3, r3
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	3301      	adds	r3, #1
 800b33e:	f003 021f 	and.w	r2, r3, #31
 800b342:	4613      	mov	r3, r2
 800b344:	005b      	lsls	r3, r3, #1
 800b346:	4413      	add	r3, r2
 800b348:	3b1e      	subs	r3, #30
 800b34a:	051b      	lsls	r3, r3, #20
 800b34c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b350:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800b352:	683a      	ldr	r2, [r7, #0]
 800b354:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b356:	4619      	mov	r1, r3
 800b358:	f7ff f8d8 	bl	800a50c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	4b44      	ldr	r3, [pc, #272]	@ (800b474 <HAL_ADC_ConfigChannel+0x7c0>)
 800b362:	4013      	ands	r3, r2
 800b364:	2b00      	cmp	r3, #0
 800b366:	d07a      	beq.n	800b45e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b368:	4843      	ldr	r0, [pc, #268]	@ (800b478 <HAL_ADC_ConfigChannel+0x7c4>)
 800b36a:	f7ff f82d 	bl	800a3c8 <LL_ADC_GetCommonPathInternalCh>
 800b36e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a41      	ldr	r2, [pc, #260]	@ (800b47c <HAL_ADC_ConfigChannel+0x7c8>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d12c      	bne.n	800b3d6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b37c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b380:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d126      	bne.n	800b3d6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a3c      	ldr	r2, [pc, #240]	@ (800b480 <HAL_ADC_ConfigChannel+0x7cc>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d004      	beq.n	800b39c <HAL_ADC_ConfigChannel+0x6e8>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a3b      	ldr	r2, [pc, #236]	@ (800b484 <HAL_ADC_ConfigChannel+0x7d0>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d15d      	bne.n	800b458 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b39c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b3a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4834      	ldr	r0, [pc, #208]	@ (800b478 <HAL_ADC_ConfigChannel+0x7c4>)
 800b3a8:	f7fe fffb 	bl	800a3a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b3ac:	4b36      	ldr	r3, [pc, #216]	@ (800b488 <HAL_ADC_ConfigChannel+0x7d4>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	099b      	lsrs	r3, r3, #6
 800b3b2:	4a36      	ldr	r2, [pc, #216]	@ (800b48c <HAL_ADC_ConfigChannel+0x7d8>)
 800b3b4:	fba2 2303 	umull	r2, r3, r2, r3
 800b3b8:	099b      	lsrs	r3, r3, #6
 800b3ba:	1c5a      	adds	r2, r3, #1
 800b3bc:	4613      	mov	r3, r2
 800b3be:	005b      	lsls	r3, r3, #1
 800b3c0:	4413      	add	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800b3c6:	e002      	b.n	800b3ce <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1f9      	bne.n	800b3c8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b3d4:	e040      	b.n	800b458 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a2d      	ldr	r2, [pc, #180]	@ (800b490 <HAL_ADC_ConfigChannel+0x7dc>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d118      	bne.n	800b412 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b3e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b3e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d112      	bne.n	800b412 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a23      	ldr	r2, [pc, #140]	@ (800b480 <HAL_ADC_ConfigChannel+0x7cc>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d004      	beq.n	800b400 <HAL_ADC_ConfigChannel+0x74c>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a22      	ldr	r2, [pc, #136]	@ (800b484 <HAL_ADC_ConfigChannel+0x7d0>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d12d      	bne.n	800b45c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b404:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b408:	4619      	mov	r1, r3
 800b40a:	481b      	ldr	r0, [pc, #108]	@ (800b478 <HAL_ADC_ConfigChannel+0x7c4>)
 800b40c:	f7fe ffc9 	bl	800a3a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b410:	e024      	b.n	800b45c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a1f      	ldr	r2, [pc, #124]	@ (800b494 <HAL_ADC_ConfigChannel+0x7e0>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d120      	bne.n	800b45e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b41c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b420:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b424:	2b00      	cmp	r3, #0
 800b426:	d11a      	bne.n	800b45e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a14      	ldr	r2, [pc, #80]	@ (800b480 <HAL_ADC_ConfigChannel+0x7cc>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d115      	bne.n	800b45e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b432:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b436:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b43a:	4619      	mov	r1, r3
 800b43c:	480e      	ldr	r0, [pc, #56]	@ (800b478 <HAL_ADC_ConfigChannel+0x7c4>)
 800b43e:	f7fe ffb0 	bl	800a3a2 <LL_ADC_SetCommonPathInternalCh>
 800b442:	e00c      	b.n	800b45e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b448:	f043 0220 	orr.w	r2, r3, #32
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b450:	2301      	movs	r3, #1
 800b452:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800b456:	e002      	b.n	800b45e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b458:	bf00      	nop
 800b45a:	e000      	b.n	800b45e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b45c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800b466:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	37d8      	adds	r7, #216	@ 0xd8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	80080000 	.word	0x80080000
 800b478:	50040300 	.word	0x50040300
 800b47c:	c7520000 	.word	0xc7520000
 800b480:	50040000 	.word	0x50040000
 800b484:	50040200 	.word	0x50040200
 800b488:	20000168 	.word	0x20000168
 800b48c:	053e2d63 	.word	0x053e2d63
 800b490:	cb840000 	.word	0xcb840000
 800b494:	80000001 	.word	0x80000001

0800b498 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b088      	sub	sp, #32
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7ff f94e 	bl	800a750 <LL_ADC_REG_IsConversionOngoing>
 800b4b4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7ff f96f 	bl	800a79e <LL_ADC_INJ_IsConversionOngoing>
 800b4c0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d103      	bne.n	800b4d0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	f000 8098 	beq.w	800b600 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d02a      	beq.n	800b534 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	7e5b      	ldrb	r3, [r3, #25]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d126      	bne.n	800b534 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	7e1b      	ldrb	r3, [r3, #24]
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d122      	bne.n	800b534 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800b4f2:	e014      	b.n	800b51e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	4a45      	ldr	r2, [pc, #276]	@ (800b60c <ADC_ConversionStop+0x174>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d90d      	bls.n	800b518 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b500:	f043 0210 	orr.w	r2, r3, #16
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b50c:	f043 0201 	orr.w	r2, r3, #1
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	e074      	b.n	800b602 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	3301      	adds	r3, #1
 800b51c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b528:	2b40      	cmp	r3, #64	@ 0x40
 800b52a:	d1e3      	bne.n	800b4f4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2240      	movs	r2, #64	@ 0x40
 800b532:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	2b02      	cmp	r3, #2
 800b538:	d014      	beq.n	800b564 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4618      	mov	r0, r3
 800b540:	f7ff f906 	bl	800a750 <LL_ADC_REG_IsConversionOngoing>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00c      	beq.n	800b564 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4618      	mov	r0, r3
 800b550:	f7ff f8c3 	bl	800a6da <LL_ADC_IsDisableOngoing>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d104      	bne.n	800b564 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4618      	mov	r0, r3
 800b560:	f7ff f8e2 	bl	800a728 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	2b01      	cmp	r3, #1
 800b568:	d014      	beq.n	800b594 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4618      	mov	r0, r3
 800b570:	f7ff f915 	bl	800a79e <LL_ADC_INJ_IsConversionOngoing>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00c      	beq.n	800b594 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4618      	mov	r0, r3
 800b580:	f7ff f8ab 	bl	800a6da <LL_ADC_IsDisableOngoing>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d104      	bne.n	800b594 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4618      	mov	r0, r3
 800b590:	f7ff f8f1 	bl	800a776 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	2b02      	cmp	r3, #2
 800b598:	d005      	beq.n	800b5a6 <ADC_ConversionStop+0x10e>
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	2b03      	cmp	r3, #3
 800b59e:	d105      	bne.n	800b5ac <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800b5a0:	230c      	movs	r3, #12
 800b5a2:	617b      	str	r3, [r7, #20]
        break;
 800b5a4:	e005      	b.n	800b5b2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800b5a6:	2308      	movs	r3, #8
 800b5a8:	617b      	str	r3, [r7, #20]
        break;
 800b5aa:	e002      	b.n	800b5b2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800b5ac:	2304      	movs	r3, #4
 800b5ae:	617b      	str	r3, [r7, #20]
        break;
 800b5b0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800b5b2:	f7fe feb3 	bl	800a31c <HAL_GetTick>
 800b5b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b5b8:	e01b      	b.n	800b5f2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800b5ba:	f7fe feaf 	bl	800a31c <HAL_GetTick>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	2b05      	cmp	r3, #5
 800b5c6:	d914      	bls.n	800b5f2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	689a      	ldr	r2, [r3, #8]
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	4013      	ands	r3, r2
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00d      	beq.n	800b5f2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5da:	f043 0210 	orr.w	r2, r3, #16
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5e6:	f043 0201 	orr.w	r2, r3, #1
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e007      	b.n	800b602 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	689a      	ldr	r2, [r3, #8]
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1dc      	bne.n	800b5ba <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	3720      	adds	r7, #32
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	a33fffff 	.word	0xa33fffff

0800b610 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800b618:	2300      	movs	r3, #0
 800b61a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4618      	mov	r0, r3
 800b622:	f7ff f847 	bl	800a6b4 <LL_ADC_IsEnabled>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d169      	bne.n	800b700 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689a      	ldr	r2, [r3, #8]
 800b632:	4b36      	ldr	r3, [pc, #216]	@ (800b70c <ADC_Enable+0xfc>)
 800b634:	4013      	ands	r3, r2
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00d      	beq.n	800b656 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b63e:	f043 0210 	orr.w	r2, r3, #16
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b64a:	f043 0201 	orr.w	r2, r3, #1
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	e055      	b.n	800b702 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7ff f802 	bl	800a664 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b660:	482b      	ldr	r0, [pc, #172]	@ (800b710 <ADC_Enable+0x100>)
 800b662:	f7fe feb1 	bl	800a3c8 <LL_ADC_GetCommonPathInternalCh>
 800b666:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800b668:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d013      	beq.n	800b698 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b670:	4b28      	ldr	r3, [pc, #160]	@ (800b714 <ADC_Enable+0x104>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	099b      	lsrs	r3, r3, #6
 800b676:	4a28      	ldr	r2, [pc, #160]	@ (800b718 <ADC_Enable+0x108>)
 800b678:	fba2 2303 	umull	r2, r3, r2, r3
 800b67c:	099b      	lsrs	r3, r3, #6
 800b67e:	1c5a      	adds	r2, r3, #1
 800b680:	4613      	mov	r3, r2
 800b682:	005b      	lsls	r3, r3, #1
 800b684:	4413      	add	r3, r2
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b68a:	e002      	b.n	800b692 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	3b01      	subs	r3, #1
 800b690:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1f9      	bne.n	800b68c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b698:	f7fe fe40 	bl	800a31c <HAL_GetTick>
 800b69c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b69e:	e028      	b.n	800b6f2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7ff f805 	bl	800a6b4 <LL_ADC_IsEnabled>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d104      	bne.n	800b6ba <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7fe ffd5 	bl	800a664 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b6ba:	f7fe fe2f 	bl	800a31c <HAL_GetTick>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d914      	bls.n	800b6f2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f003 0301 	and.w	r3, r3, #1
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d00d      	beq.n	800b6f2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6da:	f043 0210 	orr.w	r2, r3, #16
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6e6:	f043 0201 	orr.w	r2, r3, #1
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e007      	b.n	800b702 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 0301 	and.w	r3, r3, #1
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d1cf      	bne.n	800b6a0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	8000003f 	.word	0x8000003f
 800b710:	50040300 	.word	0x50040300
 800b714:	20000168 	.word	0x20000168
 800b718:	053e2d63 	.word	0x053e2d63

0800b71c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe ffd6 	bl	800a6da <LL_ADC_IsDisableOngoing>
 800b72e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4618      	mov	r0, r3
 800b736:	f7fe ffbd 	bl	800a6b4 <LL_ADC_IsEnabled>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d047      	beq.n	800b7d0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d144      	bne.n	800b7d0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	f003 030d 	and.w	r3, r3, #13
 800b750:	2b01      	cmp	r3, #1
 800b752:	d10c      	bne.n	800b76e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fe ff97 	bl	800a68c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2203      	movs	r2, #3
 800b764:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b766:	f7fe fdd9 	bl	800a31c <HAL_GetTick>
 800b76a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b76c:	e029      	b.n	800b7c2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b772:	f043 0210 	orr.w	r2, r3, #16
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b77e:	f043 0201 	orr.w	r2, r3, #1
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e023      	b.n	800b7d2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b78a:	f7fe fdc7 	bl	800a31c <HAL_GetTick>
 800b78e:	4602      	mov	r2, r0
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	2b02      	cmp	r3, #2
 800b796:	d914      	bls.n	800b7c2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	f003 0301 	and.w	r3, r3, #1
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00d      	beq.n	800b7c2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7aa:	f043 0210 	orr.w	r2, r3, #16
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7b6:	f043 0201 	orr.w	r2, r3, #1
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e007      	b.n	800b7d2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	f003 0301 	and.w	r3, r3, #1
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1dc      	bne.n	800b78a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3710      	adds	r7, #16
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b084      	sub	sp, #16
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7e6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d14b      	bne.n	800b88c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 0308 	and.w	r3, r3, #8
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d021      	beq.n	800b852 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4618      	mov	r0, r3
 800b814:	f7fe fe3b 	bl	800a48e <LL_ADC_REG_IsTriggerSourceSWStart>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d032      	beq.n	800b884 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	68db      	ldr	r3, [r3, #12]
 800b824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d12b      	bne.n	800b884 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b830:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b83c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b840:	2b00      	cmp	r3, #0
 800b842:	d11f      	bne.n	800b884 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b848:	f043 0201 	orr.w	r2, r3, #1
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	655a      	str	r2, [r3, #84]	@ 0x54
 800b850:	e018      	b.n	800b884 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	f003 0302 	and.w	r3, r3, #2
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d111      	bne.n	800b884 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b864:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b870:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b874:	2b00      	cmp	r3, #0
 800b876:	d105      	bne.n	800b884 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b87c:	f043 0201 	orr.w	r2, r3, #1
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f7f6 fc73 	bl	8002170 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b88a:	e00e      	b.n	800b8aa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b890:	f003 0310 	and.w	r3, r3, #16
 800b894:	2b00      	cmp	r3, #0
 800b896:	d003      	beq.n	800b8a0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f7ff fa00 	bl	800ac9e <HAL_ADC_ErrorCallback>
}
 800b89e:	e004      	b.n	800b8aa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	4798      	blx	r3
}
 800b8aa:	bf00      	nop
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b084      	sub	sp, #16
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8be:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f7f6 fc39 	bl	8002138 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b8c6:	bf00      	nop
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b084      	sub	sp, #16
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8da:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8ec:	f043 0204 	orr.w	r2, r3, #4
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f7ff f9d2 	bl	800ac9e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b8fa:	bf00      	nop
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <LL_ADC_IsEnabled>:
{
 800b902:	b480      	push	{r7}
 800b904:	b083      	sub	sp, #12
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	f003 0301 	and.w	r3, r3, #1
 800b912:	2b01      	cmp	r3, #1
 800b914:	d101      	bne.n	800b91a <LL_ADC_IsEnabled+0x18>
 800b916:	2301      	movs	r3, #1
 800b918:	e000      	b.n	800b91c <LL_ADC_IsEnabled+0x1a>
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <LL_ADC_REG_IsConversionOngoing>:
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	f003 0304 	and.w	r3, r3, #4
 800b938:	2b04      	cmp	r3, #4
 800b93a:	d101      	bne.n	800b940 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b93c:	2301      	movs	r3, #1
 800b93e:	e000      	b.n	800b942 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	370c      	adds	r7, #12
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr
	...

0800b950 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800b950:	b590      	push	{r4, r7, lr}
 800b952:	b09f      	sub	sp, #124	@ 0x7c
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b95a:	2300      	movs	r3, #0
 800b95c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b966:	2b01      	cmp	r3, #1
 800b968:	d101      	bne.n	800b96e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800b96a:	2302      	movs	r3, #2
 800b96c:	e093      	b.n	800ba96 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2201      	movs	r2, #1
 800b972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800b976:	2300      	movs	r3, #0
 800b978:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800b97a:	2300      	movs	r3, #0
 800b97c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a47      	ldr	r2, [pc, #284]	@ (800baa0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d102      	bne.n	800b98e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800b988:	4b46      	ldr	r3, [pc, #280]	@ (800baa4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800b98a:	60bb      	str	r3, [r7, #8]
 800b98c:	e001      	b.n	800b992 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800b98e:	2300      	movs	r3, #0
 800b990:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10b      	bne.n	800b9b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b99c:	f043 0220 	orr.w	r2, r3, #32
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e072      	b.n	800ba96 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7ff ffb8 	bl	800b928 <LL_ADC_REG_IsConversionOngoing>
 800b9b8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7ff ffb2 	bl	800b928 <LL_ADC_REG_IsConversionOngoing>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d154      	bne.n	800ba74 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800b9ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d151      	bne.n	800ba74 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800b9d0:	4b35      	ldr	r3, [pc, #212]	@ (800baa8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800b9d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d02c      	beq.n	800ba36 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800b9dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	6859      	ldr	r1, [r3, #4]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b9ee:	035b      	lsls	r3, r3, #13
 800b9f0:	430b      	orrs	r3, r1
 800b9f2:	431a      	orrs	r2, r3
 800b9f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b9f8:	4829      	ldr	r0, [pc, #164]	@ (800baa0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800b9fa:	f7ff ff82 	bl	800b902 <LL_ADC_IsEnabled>
 800b9fe:	4604      	mov	r4, r0
 800ba00:	4828      	ldr	r0, [pc, #160]	@ (800baa4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800ba02:	f7ff ff7e 	bl	800b902 <LL_ADC_IsEnabled>
 800ba06:	4603      	mov	r3, r0
 800ba08:	431c      	orrs	r4, r3
 800ba0a:	4828      	ldr	r0, [pc, #160]	@ (800baac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800ba0c:	f7ff ff79 	bl	800b902 <LL_ADC_IsEnabled>
 800ba10:	4603      	mov	r3, r0
 800ba12:	4323      	orrs	r3, r4
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d137      	bne.n	800ba88 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800ba18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800ba20:	f023 030f 	bic.w	r3, r3, #15
 800ba24:	683a      	ldr	r2, [r7, #0]
 800ba26:	6811      	ldr	r1, [r2, #0]
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	6892      	ldr	r2, [r2, #8]
 800ba2c:	430a      	orrs	r2, r1
 800ba2e:	431a      	orrs	r2, r3
 800ba30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba32:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ba34:	e028      	b.n	800ba88 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800ba36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ba3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba40:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ba42:	4817      	ldr	r0, [pc, #92]	@ (800baa0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800ba44:	f7ff ff5d 	bl	800b902 <LL_ADC_IsEnabled>
 800ba48:	4604      	mov	r4, r0
 800ba4a:	4816      	ldr	r0, [pc, #88]	@ (800baa4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800ba4c:	f7ff ff59 	bl	800b902 <LL_ADC_IsEnabled>
 800ba50:	4603      	mov	r3, r0
 800ba52:	431c      	orrs	r4, r3
 800ba54:	4815      	ldr	r0, [pc, #84]	@ (800baac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800ba56:	f7ff ff54 	bl	800b902 <LL_ADC_IsEnabled>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	4323      	orrs	r3, r4
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d112      	bne.n	800ba88 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800ba62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800ba6a:	f023 030f 	bic.w	r3, r3, #15
 800ba6e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ba70:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ba72:	e009      	b.n	800ba88 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba78:	f043 0220 	orr.w	r2, r3, #32
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800ba80:	2301      	movs	r3, #1
 800ba82:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800ba86:	e000      	b.n	800ba8a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800ba88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800ba92:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	377c      	adds	r7, #124	@ 0x7c
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd90      	pop	{r4, r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	50040000 	.word	0x50040000
 800baa4:	50040100 	.word	0x50040100
 800baa8:	50040300 	.word	0x50040300
 800baac:	50040200 	.word	0x50040200

0800bab0 <__NVIC_SetPriorityGrouping>:
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f003 0307 	and.w	r3, r3, #7
 800babe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bac0:	4b0c      	ldr	r3, [pc, #48]	@ (800baf4 <__NVIC_SetPriorityGrouping+0x44>)
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800bacc:	4013      	ands	r3, r2
 800bace:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bad8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800badc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bae2:	4a04      	ldr	r2, [pc, #16]	@ (800baf4 <__NVIC_SetPriorityGrouping+0x44>)
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	60d3      	str	r3, [r2, #12]
}
 800bae8:	bf00      	nop
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr
 800baf4:	e000ed00 	.word	0xe000ed00

0800baf8 <__NVIC_GetPriorityGrouping>:
{
 800baf8:	b480      	push	{r7}
 800bafa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bafc:	4b04      	ldr	r3, [pc, #16]	@ (800bb10 <__NVIC_GetPriorityGrouping+0x18>)
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	0a1b      	lsrs	r3, r3, #8
 800bb02:	f003 0307 	and.w	r3, r3, #7
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr
 800bb10:	e000ed00 	.word	0xe000ed00

0800bb14 <__NVIC_EnableIRQ>:
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	db0b      	blt.n	800bb3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bb26:	79fb      	ldrb	r3, [r7, #7]
 800bb28:	f003 021f 	and.w	r2, r3, #31
 800bb2c:	4907      	ldr	r1, [pc, #28]	@ (800bb4c <__NVIC_EnableIRQ+0x38>)
 800bb2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb32:	095b      	lsrs	r3, r3, #5
 800bb34:	2001      	movs	r0, #1
 800bb36:	fa00 f202 	lsl.w	r2, r0, r2
 800bb3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bb3e:	bf00      	nop
 800bb40:	370c      	adds	r7, #12
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	e000e100 	.word	0xe000e100

0800bb50 <__NVIC_SetPriority>:
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	4603      	mov	r3, r0
 800bb58:	6039      	str	r1, [r7, #0]
 800bb5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	db0a      	blt.n	800bb7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	490c      	ldr	r1, [pc, #48]	@ (800bb9c <__NVIC_SetPriority+0x4c>)
 800bb6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb6e:	0112      	lsls	r2, r2, #4
 800bb70:	b2d2      	uxtb	r2, r2
 800bb72:	440b      	add	r3, r1
 800bb74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bb78:	e00a      	b.n	800bb90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	4908      	ldr	r1, [pc, #32]	@ (800bba0 <__NVIC_SetPriority+0x50>)
 800bb80:	79fb      	ldrb	r3, [r7, #7]
 800bb82:	f003 030f 	and.w	r3, r3, #15
 800bb86:	3b04      	subs	r3, #4
 800bb88:	0112      	lsls	r2, r2, #4
 800bb8a:	b2d2      	uxtb	r2, r2
 800bb8c:	440b      	add	r3, r1
 800bb8e:	761a      	strb	r2, [r3, #24]
}
 800bb90:	bf00      	nop
 800bb92:	370c      	adds	r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	e000e100 	.word	0xe000e100
 800bba0:	e000ed00 	.word	0xe000ed00

0800bba4 <NVIC_EncodePriority>:
{
 800bba4:	b480      	push	{r7}
 800bba6:	b089      	sub	sp, #36	@ 0x24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f003 0307 	and.w	r3, r3, #7
 800bbb6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	f1c3 0307 	rsb	r3, r3, #7
 800bbbe:	2b04      	cmp	r3, #4
 800bbc0:	bf28      	it	cs
 800bbc2:	2304      	movcs	r3, #4
 800bbc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	3304      	adds	r3, #4
 800bbca:	2b06      	cmp	r3, #6
 800bbcc:	d902      	bls.n	800bbd4 <NVIC_EncodePriority+0x30>
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	3b03      	subs	r3, #3
 800bbd2:	e000      	b.n	800bbd6 <NVIC_EncodePriority+0x32>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe2:	43da      	mvns	r2, r3
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	401a      	ands	r2, r3
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bbec:	f04f 31ff 	mov.w	r1, #4294967295
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	fa01 f303 	lsl.w	r3, r1, r3
 800bbf6:	43d9      	mvns	r1, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bbfc:	4313      	orrs	r3, r2
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3724      	adds	r7, #36	@ 0x24
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr
	...

0800bc0c <__NVIC_SystemReset>:
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800bc10:	f3bf 8f4f 	dsb	sy
}
 800bc14:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800bc16:	4b06      	ldr	r3, [pc, #24]	@ (800bc30 <__NVIC_SystemReset+0x24>)
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800bc1e:	4904      	ldr	r1, [pc, #16]	@ (800bc30 <__NVIC_SystemReset+0x24>)
 800bc20:	4b04      	ldr	r3, [pc, #16]	@ (800bc34 <__NVIC_SystemReset+0x28>)
 800bc22:	4313      	orrs	r3, r2
 800bc24:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bc26:	f3bf 8f4f 	dsb	sy
}
 800bc2a:	bf00      	nop
    __NOP();
 800bc2c:	bf00      	nop
 800bc2e:	e7fd      	b.n	800bc2c <__NVIC_SystemReset+0x20>
 800bc30:	e000ed00 	.word	0xe000ed00
 800bc34:	05fa0004 	.word	0x05fa0004

0800bc38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	3b01      	subs	r3, #1
 800bc44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc48:	d301      	bcc.n	800bc4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e00f      	b.n	800bc6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bc4e:	4a0a      	ldr	r2, [pc, #40]	@ (800bc78 <SysTick_Config+0x40>)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	3b01      	subs	r3, #1
 800bc54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bc56:	210f      	movs	r1, #15
 800bc58:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5c:	f7ff ff78 	bl	800bb50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bc60:	4b05      	ldr	r3, [pc, #20]	@ (800bc78 <SysTick_Config+0x40>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bc66:	4b04      	ldr	r3, [pc, #16]	@ (800bc78 <SysTick_Config+0x40>)
 800bc68:	2207      	movs	r2, #7
 800bc6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	e000e010 	.word	0xe000e010

0800bc7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f7ff ff13 	bl	800bab0 <__NVIC_SetPriorityGrouping>
}
 800bc8a:	bf00      	nop
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b086      	sub	sp, #24
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	4603      	mov	r3, r0
 800bc9a:	60b9      	str	r1, [r7, #8]
 800bc9c:	607a      	str	r2, [r7, #4]
 800bc9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800bca0:	2300      	movs	r3, #0
 800bca2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800bca4:	f7ff ff28 	bl	800baf8 <__NVIC_GetPriorityGrouping>
 800bca8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	68b9      	ldr	r1, [r7, #8]
 800bcae:	6978      	ldr	r0, [r7, #20]
 800bcb0:	f7ff ff78 	bl	800bba4 <NVIC_EncodePriority>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcba:	4611      	mov	r1, r2
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7ff ff47 	bl	800bb50 <__NVIC_SetPriority>
}
 800bcc2:	bf00      	nop
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b082      	sub	sp, #8
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bcd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7ff ff1b 	bl	800bb14 <__NVIC_EnableIRQ>
}
 800bcde:	bf00      	nop
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800bcea:	f7ff ff8f 	bl	800bc0c <__NVIC_SystemReset>

0800bcee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b082      	sub	sp, #8
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7ff ff9e 	bl	800bc38 <SysTick_Config>
 800bcfc:	4603      	mov	r3, r0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3708      	adds	r7, #8
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
	...

0800bd08 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d101      	bne.n	800bd1a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	e054      	b.n	800bdc4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	7f5b      	ldrb	r3, [r3, #29]
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d105      	bne.n	800bd30 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f7fa fdb2 	bl	8006894 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2202      	movs	r2, #2
 800bd34:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	791b      	ldrb	r3, [r3, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d10c      	bne.n	800bd58 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a22      	ldr	r2, [pc, #136]	@ (800bdcc <HAL_CRC_Init+0xc4>)
 800bd44:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	689a      	ldr	r2, [r3, #8]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f022 0218 	bic.w	r2, r2, #24
 800bd54:	609a      	str	r2, [r3, #8]
 800bd56:	e00c      	b.n	800bd72 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6899      	ldr	r1, [r3, #8]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	461a      	mov	r2, r3
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 f94a 	bl	800bffc <HAL_CRCEx_Polynomial_Set>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d001      	beq.n	800bd72 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e028      	b.n	800bdc4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	795b      	ldrb	r3, [r3, #5]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d105      	bne.n	800bd86 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd82:	611a      	str	r2, [r3, #16]
 800bd84:	e004      	b.n	800bd90 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	6912      	ldr	r2, [r2, #16]
 800bd8e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	695a      	ldr	r2, [r3, #20]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	430a      	orrs	r2, r1
 800bda4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	699a      	ldr	r2, [r3, #24]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	04c11db7 	.word	0x04c11db7

0800bdd0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800bddc:	2300      	movs	r3, #0
 800bdde:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2202      	movs	r2, #2
 800bde4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	689a      	ldr	r2, [r3, #8]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f042 0201 	orr.w	r2, r2, #1
 800bdf4:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	2b03      	cmp	r3, #3
 800bdfc:	d006      	beq.n	800be0c <HAL_CRC_Calculate+0x3c>
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d829      	bhi.n	800be56 <HAL_CRC_Calculate+0x86>
 800be02:	2b01      	cmp	r3, #1
 800be04:	d019      	beq.n	800be3a <HAL_CRC_Calculate+0x6a>
 800be06:	2b02      	cmp	r3, #2
 800be08:	d01e      	beq.n	800be48 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800be0a:	e024      	b.n	800be56 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800be0c:	2300      	movs	r3, #0
 800be0e:	617b      	str	r3, [r7, #20]
 800be10:	e00a      	b.n	800be28 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	441a      	add	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	6812      	ldr	r2, [r2, #0]
 800be20:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	3301      	adds	r3, #1
 800be26:	617b      	str	r3, [r7, #20]
 800be28:	697a      	ldr	r2, [r7, #20]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d3f0      	bcc.n	800be12 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	613b      	str	r3, [r7, #16]
      break;
 800be38:	e00e      	b.n	800be58 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	68b9      	ldr	r1, [r7, #8]
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f000 f812 	bl	800be68 <CRC_Handle_8>
 800be44:	6138      	str	r0, [r7, #16]
      break;
 800be46:	e007      	b.n	800be58 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	68b9      	ldr	r1, [r7, #8]
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f000 f89b 	bl	800bf88 <CRC_Handle_16>
 800be52:	6138      	str	r0, [r7, #16]
      break;
 800be54:	e000      	b.n	800be58 <HAL_CRC_Calculate+0x88>
      break;
 800be56:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2201      	movs	r2, #1
 800be5c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800be5e:	693b      	ldr	r3, [r7, #16]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3718      	adds	r7, #24
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800be68:	b480      	push	{r7}
 800be6a:	b089      	sub	sp, #36	@ 0x24
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800be74:	2300      	movs	r3, #0
 800be76:	61fb      	str	r3, [r7, #28]
 800be78:	e023      	b.n	800bec2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	4413      	add	r3, r2
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	3301      	adds	r3, #1
 800be8c:	68b9      	ldr	r1, [r7, #8]
 800be8e:	440b      	add	r3, r1
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800be94:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	3302      	adds	r3, #2
 800be9c:	68b9      	ldr	r1, [r7, #8]
 800be9e:	440b      	add	r3, r1
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800bea4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	3303      	adds	r3, #3
 800beac:	68b9      	ldr	r1, [r7, #8]
 800beae:	440b      	add	r3, r1
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800beb8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800beba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	3301      	adds	r3, #1
 800bec0:	61fb      	str	r3, [r7, #28]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	089b      	lsrs	r3, r3, #2
 800bec6:	69fa      	ldr	r2, [r7, #28]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d3d6      	bcc.n	800be7a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f003 0303 	and.w	r3, r3, #3
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d04f      	beq.n	800bf76 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f003 0303 	and.w	r3, r3, #3
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d107      	bne.n	800bef0 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	4413      	add	r3, r2
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	6812      	ldr	r2, [r2, #0]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f003 0303 	and.w	r3, r3, #3
 800bef6:	2b02      	cmp	r3, #2
 800bef8:	d117      	bne.n	800bf2a <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	68ba      	ldr	r2, [r7, #8]
 800bf00:	4413      	add	r3, r2
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	b21b      	sxth	r3, r3
 800bf06:	021b      	lsls	r3, r3, #8
 800bf08:	b21a      	sxth	r2, r3
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	3301      	adds	r3, #1
 800bf10:	68b9      	ldr	r1, [r7, #8]
 800bf12:	440b      	add	r3, r1
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	b21b      	sxth	r3, r3
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	b21b      	sxth	r3, r3
 800bf1c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	8b7a      	ldrh	r2, [r7, #26]
 800bf28:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f003 0303 	and.w	r3, r3, #3
 800bf30:	2b03      	cmp	r3, #3
 800bf32:	d120      	bne.n	800bf76 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	b21b      	sxth	r3, r3
 800bf40:	021b      	lsls	r3, r3, #8
 800bf42:	b21a      	sxth	r2, r3
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	3301      	adds	r3, #1
 800bf4a:	68b9      	ldr	r1, [r7, #8]
 800bf4c:	440b      	add	r3, r1
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	b21b      	sxth	r3, r3
 800bf52:	4313      	orrs	r3, r2
 800bf54:	b21b      	sxth	r3, r3
 800bf56:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	8b7a      	ldrh	r2, [r7, #26]
 800bf62:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	3302      	adds	r3, #2
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	6812      	ldr	r2, [r2, #0]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	681b      	ldr	r3, [r3, #0]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3724      	adds	r7, #36	@ 0x24
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b087      	sub	sp, #28
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	60f8      	str	r0, [r7, #12]
 800bf90:	60b9      	str	r1, [r7, #8]
 800bf92:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800bf94:	2300      	movs	r3, #0
 800bf96:	617b      	str	r3, [r7, #20]
 800bf98:	e013      	b.n	800bfc2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	881b      	ldrh	r3, [r3, #0]
 800bfa4:	041a      	lsls	r2, r3, #16
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	3302      	adds	r3, #2
 800bfac:	68b9      	ldr	r1, [r7, #8]
 800bfae:	440b      	add	r3, r1
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	430a      	orrs	r2, r1
 800bfba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	617b      	str	r3, [r7, #20]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	085b      	lsrs	r3, r3, #1
 800bfc6:	697a      	ldr	r2, [r7, #20]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d3e6      	bcc.n	800bf9a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f003 0301 	and.w	r3, r3, #1
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d009      	beq.n	800bfea <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	881a      	ldrh	r2, [r3, #0]
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681b      	ldr	r3, [r3, #0]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	371c      	adds	r7, #28
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b087      	sub	sp, #28
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c008:	2300      	movs	r3, #0
 800c00a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c00c:	231f      	movs	r3, #31
 800c00e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	f003 0301 	and.w	r3, r3, #1
 800c016:	2b00      	cmp	r3, #0
 800c018:	d102      	bne.n	800c020 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	75fb      	strb	r3, [r7, #23]
 800c01e:	e063      	b.n	800c0e8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c020:	bf00      	nop
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	1e5a      	subs	r2, r3, #1
 800c026:	613a      	str	r2, [r7, #16]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d009      	beq.n	800c040 <HAL_CRCEx_Polynomial_Set+0x44>
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	f003 031f 	and.w	r3, r3, #31
 800c032:	68ba      	ldr	r2, [r7, #8]
 800c034:	fa22 f303 	lsr.w	r3, r2, r3
 800c038:	f003 0301 	and.w	r3, r3, #1
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d0f0      	beq.n	800c022 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2b18      	cmp	r3, #24
 800c044:	d846      	bhi.n	800c0d4 <HAL_CRCEx_Polynomial_Set+0xd8>
 800c046:	a201      	add	r2, pc, #4	@ (adr r2, 800c04c <HAL_CRCEx_Polynomial_Set+0x50>)
 800c048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04c:	0800c0db 	.word	0x0800c0db
 800c050:	0800c0d5 	.word	0x0800c0d5
 800c054:	0800c0d5 	.word	0x0800c0d5
 800c058:	0800c0d5 	.word	0x0800c0d5
 800c05c:	0800c0d5 	.word	0x0800c0d5
 800c060:	0800c0d5 	.word	0x0800c0d5
 800c064:	0800c0d5 	.word	0x0800c0d5
 800c068:	0800c0d5 	.word	0x0800c0d5
 800c06c:	0800c0c9 	.word	0x0800c0c9
 800c070:	0800c0d5 	.word	0x0800c0d5
 800c074:	0800c0d5 	.word	0x0800c0d5
 800c078:	0800c0d5 	.word	0x0800c0d5
 800c07c:	0800c0d5 	.word	0x0800c0d5
 800c080:	0800c0d5 	.word	0x0800c0d5
 800c084:	0800c0d5 	.word	0x0800c0d5
 800c088:	0800c0d5 	.word	0x0800c0d5
 800c08c:	0800c0bd 	.word	0x0800c0bd
 800c090:	0800c0d5 	.word	0x0800c0d5
 800c094:	0800c0d5 	.word	0x0800c0d5
 800c098:	0800c0d5 	.word	0x0800c0d5
 800c09c:	0800c0d5 	.word	0x0800c0d5
 800c0a0:	0800c0d5 	.word	0x0800c0d5
 800c0a4:	0800c0d5 	.word	0x0800c0d5
 800c0a8:	0800c0d5 	.word	0x0800c0d5
 800c0ac:	0800c0b1 	.word	0x0800c0b1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	2b06      	cmp	r3, #6
 800c0b4:	d913      	bls.n	800c0de <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c0ba:	e010      	b.n	800c0de <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	2b07      	cmp	r3, #7
 800c0c0:	d90f      	bls.n	800c0e2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c0c6:	e00c      	b.n	800c0e2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	2b0f      	cmp	r3, #15
 800c0cc:	d90b      	bls.n	800c0e6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c0d2:	e008      	b.n	800c0e6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	75fb      	strb	r3, [r7, #23]
        break;
 800c0d8:	e006      	b.n	800c0e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c0da:	bf00      	nop
 800c0dc:	e004      	b.n	800c0e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c0de:	bf00      	nop
 800c0e0:	e002      	b.n	800c0e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c0e2:	bf00      	nop
 800c0e4:	e000      	b.n	800c0e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c0e6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800c0e8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d10d      	bne.n	800c10a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	f023 0118 	bic.w	r1, r3, #24
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	430a      	orrs	r2, r1
 800c108:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800c10a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	371c      	adds	r7, #28
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d101      	bne.n	800c12a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c126:	2301      	movs	r3, #1
 800c128:	e098      	b.n	800c25c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	461a      	mov	r2, r3
 800c130:	4b4d      	ldr	r3, [pc, #308]	@ (800c268 <HAL_DMA_Init+0x150>)
 800c132:	429a      	cmp	r2, r3
 800c134:	d80f      	bhi.n	800c156 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	461a      	mov	r2, r3
 800c13c:	4b4b      	ldr	r3, [pc, #300]	@ (800c26c <HAL_DMA_Init+0x154>)
 800c13e:	4413      	add	r3, r2
 800c140:	4a4b      	ldr	r2, [pc, #300]	@ (800c270 <HAL_DMA_Init+0x158>)
 800c142:	fba2 2303 	umull	r2, r3, r2, r3
 800c146:	091b      	lsrs	r3, r3, #4
 800c148:	009a      	lsls	r2, r3, #2
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	4a48      	ldr	r2, [pc, #288]	@ (800c274 <HAL_DMA_Init+0x15c>)
 800c152:	641a      	str	r2, [r3, #64]	@ 0x40
 800c154:	e00e      	b.n	800c174 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	461a      	mov	r2, r3
 800c15c:	4b46      	ldr	r3, [pc, #280]	@ (800c278 <HAL_DMA_Init+0x160>)
 800c15e:	4413      	add	r3, r2
 800c160:	4a43      	ldr	r2, [pc, #268]	@ (800c270 <HAL_DMA_Init+0x158>)
 800c162:	fba2 2303 	umull	r2, r3, r2, r3
 800c166:	091b      	lsrs	r3, r3, #4
 800c168:	009a      	lsls	r2, r3, #2
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4a42      	ldr	r2, [pc, #264]	@ (800c27c <HAL_DMA_Init+0x164>)
 800c172:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2202      	movs	r2, #2
 800c178:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c18a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c18e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c1a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	699b      	ldr	r3, [r3, #24]
 800c1aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c1b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a1b      	ldr	r3, [r3, #32]
 800c1b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	68fa      	ldr	r2, [r7, #12]
 800c1c4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c1ce:	d039      	beq.n	800c244 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1d4:	4a27      	ldr	r2, [pc, #156]	@ (800c274 <HAL_DMA_Init+0x15c>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d11a      	bne.n	800c210 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800c1da:	4b29      	ldr	r3, [pc, #164]	@ (800c280 <HAL_DMA_Init+0x168>)
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1e2:	f003 031c 	and.w	r3, r3, #28
 800c1e6:	210f      	movs	r1, #15
 800c1e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c1ec:	43db      	mvns	r3, r3
 800c1ee:	4924      	ldr	r1, [pc, #144]	@ (800c280 <HAL_DMA_Init+0x168>)
 800c1f0:	4013      	ands	r3, r2
 800c1f2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800c1f4:	4b22      	ldr	r3, [pc, #136]	@ (800c280 <HAL_DMA_Init+0x168>)
 800c1f6:	681a      	ldr	r2, [r3, #0]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6859      	ldr	r1, [r3, #4]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c200:	f003 031c 	and.w	r3, r3, #28
 800c204:	fa01 f303 	lsl.w	r3, r1, r3
 800c208:	491d      	ldr	r1, [pc, #116]	@ (800c280 <HAL_DMA_Init+0x168>)
 800c20a:	4313      	orrs	r3, r2
 800c20c:	600b      	str	r3, [r1, #0]
 800c20e:	e019      	b.n	800c244 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800c210:	4b1c      	ldr	r3, [pc, #112]	@ (800c284 <HAL_DMA_Init+0x16c>)
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c218:	f003 031c 	and.w	r3, r3, #28
 800c21c:	210f      	movs	r1, #15
 800c21e:	fa01 f303 	lsl.w	r3, r1, r3
 800c222:	43db      	mvns	r3, r3
 800c224:	4917      	ldr	r1, [pc, #92]	@ (800c284 <HAL_DMA_Init+0x16c>)
 800c226:	4013      	ands	r3, r2
 800c228:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800c22a:	4b16      	ldr	r3, [pc, #88]	@ (800c284 <HAL_DMA_Init+0x16c>)
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6859      	ldr	r1, [r3, #4]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c236:	f003 031c 	and.w	r3, r3, #28
 800c23a:	fa01 f303 	lsl.w	r3, r1, r3
 800c23e:	4911      	ldr	r1, [pc, #68]	@ (800c284 <HAL_DMA_Init+0x16c>)
 800c240:	4313      	orrs	r3, r2
 800c242:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2201      	movs	r2, #1
 800c24e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c25a:	2300      	movs	r3, #0
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3714      	adds	r7, #20
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr
 800c268:	40020407 	.word	0x40020407
 800c26c:	bffdfff8 	.word	0xbffdfff8
 800c270:	cccccccd 	.word	0xcccccccd
 800c274:	40020000 	.word	0x40020000
 800c278:	bffdfbf8 	.word	0xbffdfbf8
 800c27c:	40020400 	.word	0x40020400
 800c280:	400200a8 	.word	0x400200a8
 800c284:	400204a8 	.word	0x400204a8

0800c288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b086      	sub	sp, #24
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
 800c294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c296:	2300      	movs	r3, #0
 800c298:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d101      	bne.n	800c2a8 <HAL_DMA_Start_IT+0x20>
 800c2a4:	2302      	movs	r3, #2
 800c2a6:	e04b      	b.n	800c340 <HAL_DMA_Start_IT+0xb8>
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d13a      	bne.n	800c332 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2202      	movs	r2, #2
 800c2c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f022 0201 	bic.w	r2, r2, #1
 800c2d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	68b9      	ldr	r1, [r7, #8]
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f000 f92a 	bl	800c53a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d008      	beq.n	800c300 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f042 020e 	orr.w	r2, r2, #14
 800c2fc:	601a      	str	r2, [r3, #0]
 800c2fe:	e00f      	b.n	800c320 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f022 0204 	bic.w	r2, r2, #4
 800c30e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f042 020a 	orr.w	r2, r2, #10
 800c31e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f042 0201 	orr.w	r2, r2, #1
 800c32e:	601a      	str	r2, [r3, #0]
 800c330:	e005      	b.n	800c33e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2200      	movs	r2, #0
 800c336:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c33a:	2302      	movs	r3, #2
 800c33c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c33e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3718      	adds	r7, #24
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c350:	2300      	movs	r3, #0
 800c352:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	d008      	beq.n	800c372 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2204      	movs	r2, #4
 800c364:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2200      	movs	r2, #0
 800c36a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c36e:	2301      	movs	r3, #1
 800c370:	e022      	b.n	800c3b8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f022 020e 	bic.w	r2, r2, #14
 800c380:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f022 0201 	bic.w	r2, r2, #1
 800c390:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c396:	f003 021c 	and.w	r2, r3, #28
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c39e:	2101      	movs	r1, #1
 800c3a0:	fa01 f202 	lsl.w	r2, r1, r2
 800c3a4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800c3b6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3e0:	f003 031c 	and.w	r3, r3, #28
 800c3e4:	2204      	movs	r2, #4
 800c3e6:	409a      	lsls	r2, r3
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	4013      	ands	r3, r2
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d026      	beq.n	800c43e <HAL_DMA_IRQHandler+0x7a>
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	f003 0304 	and.w	r3, r3, #4
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d021      	beq.n	800c43e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 0320 	and.w	r3, r3, #32
 800c404:	2b00      	cmp	r3, #0
 800c406:	d107      	bne.n	800c418 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	681a      	ldr	r2, [r3, #0]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f022 0204 	bic.w	r2, r2, #4
 800c416:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c41c:	f003 021c 	and.w	r2, r3, #28
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c424:	2104      	movs	r1, #4
 800c426:	fa01 f202 	lsl.w	r2, r1, r2
 800c42a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c430:	2b00      	cmp	r3, #0
 800c432:	d071      	beq.n	800c518 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800c43c:	e06c      	b.n	800c518 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c442:	f003 031c 	and.w	r3, r3, #28
 800c446:	2202      	movs	r2, #2
 800c448:	409a      	lsls	r2, r3
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	4013      	ands	r3, r2
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d02e      	beq.n	800c4b0 <HAL_DMA_IRQHandler+0xec>
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	f003 0302 	and.w	r3, r3, #2
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d029      	beq.n	800c4b0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f003 0320 	and.w	r3, r3, #32
 800c466:	2b00      	cmp	r3, #0
 800c468:	d10b      	bne.n	800c482 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f022 020a 	bic.w	r2, r2, #10
 800c478:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2201      	movs	r2, #1
 800c47e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c486:	f003 021c 	and.w	r2, r3, #28
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c48e:	2102      	movs	r1, #2
 800c490:	fa01 f202 	lsl.w	r2, r1, r2
 800c494:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d038      	beq.n	800c518 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800c4ae:	e033      	b.n	800c518 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4b4:	f003 031c 	and.w	r3, r3, #28
 800c4b8:	2208      	movs	r2, #8
 800c4ba:	409a      	lsls	r2, r3
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	4013      	ands	r3, r2
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d02a      	beq.n	800c51a <HAL_DMA_IRQHandler+0x156>
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	f003 0308 	and.w	r3, r3, #8
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d025      	beq.n	800c51a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f022 020e 	bic.w	r2, r2, #14
 800c4dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4e2:	f003 021c 	and.w	r2, r3, #28
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4ea:	2101      	movs	r1, #1
 800c4ec:	fa01 f202 	lsl.w	r2, r1, r2
 800c4f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d004      	beq.n	800c51a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c518:	bf00      	nop
 800c51a:	bf00      	nop
}
 800c51c:	3710      	adds	r7, #16
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800c522:	b480      	push	{r7}
 800c524:	b083      	sub	sp, #12
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800c52e:	4618      	mov	r0, r3
 800c530:	370c      	adds	r7, #12
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr

0800c53a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c53a:	b480      	push	{r7}
 800c53c:	b085      	sub	sp, #20
 800c53e:	af00      	add	r7, sp, #0
 800c540:	60f8      	str	r0, [r7, #12]
 800c542:	60b9      	str	r1, [r7, #8]
 800c544:	607a      	str	r2, [r7, #4]
 800c546:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c54c:	f003 021c 	and.w	r2, r3, #28
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c554:	2101      	movs	r1, #1
 800c556:	fa01 f202 	lsl.w	r2, r1, r2
 800c55a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	683a      	ldr	r2, [r7, #0]
 800c562:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	2b10      	cmp	r3, #16
 800c56a:	d108      	bne.n	800c57e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c57c:	e007      	b.n	800c58e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	60da      	str	r2, [r3, #12]
}
 800c58e:	bf00      	nop
 800c590:	3714      	adds	r7, #20
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
	...

0800c59c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b086      	sub	sp, #24
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c5ae:	4b2f      	ldr	r3, [pc, #188]	@ (800c66c <HAL_FLASH_Program+0xd0>)
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d101      	bne.n	800c5ba <HAL_FLASH_Program+0x1e>
 800c5b6:	2302      	movs	r3, #2
 800c5b8:	e053      	b.n	800c662 <HAL_FLASH_Program+0xc6>
 800c5ba:	4b2c      	ldr	r3, [pc, #176]	@ (800c66c <HAL_FLASH_Program+0xd0>)
 800c5bc:	2201      	movs	r2, #1
 800c5be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c5c0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c5c4:	f000 f8c6 	bl	800c754 <FLASH_WaitForLastOperation>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800c5cc:	7dfb      	ldrb	r3, [r7, #23]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d143      	bne.n	800c65a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c5d2:	4b26      	ldr	r3, [pc, #152]	@ (800c66c <HAL_FLASH_Program+0xd0>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c5d8:	4b25      	ldr	r3, [pc, #148]	@ (800c670 <HAL_FLASH_Program+0xd4>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d009      	beq.n	800c5f8 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800c5e4:	4b22      	ldr	r3, [pc, #136]	@ (800c670 <HAL_FLASH_Program+0xd4>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a21      	ldr	r2, [pc, #132]	@ (800c670 <HAL_FLASH_Program+0xd4>)
 800c5ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c5ee:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800c5f0:	4b1e      	ldr	r3, [pc, #120]	@ (800c66c <HAL_FLASH_Program+0xd0>)
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	771a      	strb	r2, [r3, #28]
 800c5f6:	e002      	b.n	800c5fe <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c5f8:	4b1c      	ldr	r3, [pc, #112]	@ (800c66c <HAL_FLASH_Program+0xd0>)
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d107      	bne.n	800c614 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800c604:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c608:	68b8      	ldr	r0, [r7, #8]
 800c60a:	f000 f8f9 	bl	800c800 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800c60e:	2301      	movs	r3, #1
 800c610:	613b      	str	r3, [r7, #16]
 800c612:	e010      	b.n	800c636 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2b01      	cmp	r3, #1
 800c618:	d002      	beq.n	800c620 <HAL_FLASH_Program+0x84>
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2b02      	cmp	r3, #2
 800c61e:	d10a      	bne.n	800c636 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	4619      	mov	r1, r3
 800c624:	68b8      	ldr	r0, [r7, #8]
 800c626:	f000 f911 	bl	800c84c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d102      	bne.n	800c636 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800c630:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c634:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c636:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c63a:	f000 f88b 	bl	800c754 <FLASH_WaitForLastOperation>
 800c63e:	4603      	mov	r3, r0
 800c640:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d006      	beq.n	800c656 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800c648:	4b09      	ldr	r3, [pc, #36]	@ (800c670 <HAL_FLASH_Program+0xd4>)
 800c64a:	695a      	ldr	r2, [r3, #20]
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	43db      	mvns	r3, r3
 800c650:	4907      	ldr	r1, [pc, #28]	@ (800c670 <HAL_FLASH_Program+0xd4>)
 800c652:	4013      	ands	r3, r2
 800c654:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800c656:	f000 fae5 	bl	800cc24 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c65a:	4b04      	ldr	r3, [pc, #16]	@ (800c66c <HAL_FLASH_Program+0xd0>)
 800c65c:	2200      	movs	r2, #0
 800c65e:	701a      	strb	r2, [r3, #0]

  return status;
 800c660:	7dfb      	ldrb	r3, [r7, #23]
}
 800c662:	4618      	mov	r0, r3
 800c664:	3718      	adds	r7, #24
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	2000017c 	.word	0x2000017c
 800c670:	40022000 	.word	0x40022000

0800c674 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800c67a:	2300      	movs	r3, #0
 800c67c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800c67e:	4b0b      	ldr	r3, [pc, #44]	@ (800c6ac <HAL_FLASH_Unlock+0x38>)
 800c680:	695b      	ldr	r3, [r3, #20]
 800c682:	2b00      	cmp	r3, #0
 800c684:	da0b      	bge.n	800c69e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c686:	4b09      	ldr	r3, [pc, #36]	@ (800c6ac <HAL_FLASH_Unlock+0x38>)
 800c688:	4a09      	ldr	r2, [pc, #36]	@ (800c6b0 <HAL_FLASH_Unlock+0x3c>)
 800c68a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c68c:	4b07      	ldr	r3, [pc, #28]	@ (800c6ac <HAL_FLASH_Unlock+0x38>)
 800c68e:	4a09      	ldr	r2, [pc, #36]	@ (800c6b4 <HAL_FLASH_Unlock+0x40>)
 800c690:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800c692:	4b06      	ldr	r3, [pc, #24]	@ (800c6ac <HAL_FLASH_Unlock+0x38>)
 800c694:	695b      	ldr	r3, [r3, #20]
 800c696:	2b00      	cmp	r3, #0
 800c698:	da01      	bge.n	800c69e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800c69a:	2301      	movs	r3, #1
 800c69c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800c69e:	79fb      	ldrb	r3, [r7, #7]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr
 800c6ac:	40022000 	.word	0x40022000
 800c6b0:	45670123 	.word	0x45670123
 800c6b4:	cdef89ab 	.word	0xcdef89ab

0800c6b8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800c6bc:	4b05      	ldr	r3, [pc, #20]	@ (800c6d4 <HAL_FLASH_Lock+0x1c>)
 800c6be:	695b      	ldr	r3, [r3, #20]
 800c6c0:	4a04      	ldr	r2, [pc, #16]	@ (800c6d4 <HAL_FLASH_Lock+0x1c>)
 800c6c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c6c6:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800c6c8:	2300      	movs	r3, #0
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr
 800c6d4:	40022000 	.word	0x40022000

0800c6d8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800c6dc:	4b09      	ldr	r3, [pc, #36]	@ (800c704 <HAL_FLASH_OB_Unlock+0x2c>)
 800c6de:	695b      	ldr	r3, [r3, #20]
 800c6e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d007      	beq.n	800c6f8 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800c6e8:	4b06      	ldr	r3, [pc, #24]	@ (800c704 <HAL_FLASH_OB_Unlock+0x2c>)
 800c6ea:	4a07      	ldr	r2, [pc, #28]	@ (800c708 <HAL_FLASH_OB_Unlock+0x30>)
 800c6ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800c6ee:	4b05      	ldr	r3, [pc, #20]	@ (800c704 <HAL_FLASH_OB_Unlock+0x2c>)
 800c6f0:	4a06      	ldr	r2, [pc, #24]	@ (800c70c <HAL_FLASH_OB_Unlock+0x34>)
 800c6f2:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	e000      	b.n	800c6fa <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr
 800c704:	40022000 	.word	0x40022000
 800c708:	08192a3b 	.word	0x08192a3b
 800c70c:	4c5d6e7f 	.word	0x4c5d6e7f

0800c710 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800c710:	b480      	push	{r7}
 800c712:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800c714:	4b05      	ldr	r3, [pc, #20]	@ (800c72c <HAL_FLASH_OB_Lock+0x1c>)
 800c716:	695b      	ldr	r3, [r3, #20]
 800c718:	4a04      	ldr	r2, [pc, #16]	@ (800c72c <HAL_FLASH_OB_Lock+0x1c>)
 800c71a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c71e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800c720:	2300      	movs	r3, #0
}
 800c722:	4618      	mov	r0, r3
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	40022000 	.word	0x40022000

0800c730 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800c734:	4b06      	ldr	r3, [pc, #24]	@ (800c750 <HAL_FLASH_OB_Launch+0x20>)
 800c736:	695b      	ldr	r3, [r3, #20]
 800c738:	4a05      	ldr	r2, [pc, #20]	@ (800c750 <HAL_FLASH_OB_Launch+0x20>)
 800c73a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c73e:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 800c740:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c744:	f000 f806 	bl	800c754 <FLASH_WaitForLastOperation>
 800c748:	4603      	mov	r3, r0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	40022000 	.word	0x40022000

0800c754 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800c75c:	f7fd fdde 	bl	800a31c <HAL_GetTick>
 800c760:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800c762:	e00d      	b.n	800c780 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c76a:	d009      	beq.n	800c780 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800c76c:	f7fd fdd6 	bl	800a31c <HAL_GetTick>
 800c770:	4602      	mov	r2, r0
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	1ad3      	subs	r3, r2, r3
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d801      	bhi.n	800c780 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800c77c:	2303      	movs	r3, #3
 800c77e:	e036      	b.n	800c7ee <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800c780:	4b1d      	ldr	r3, [pc, #116]	@ (800c7f8 <FLASH_WaitForLastOperation+0xa4>)
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1eb      	bne.n	800c764 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800c78c:	4b1a      	ldr	r3, [pc, #104]	@ (800c7f8 <FLASH_WaitForLastOperation+0xa4>)
 800c78e:	691a      	ldr	r2, [r3, #16]
 800c790:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800c794:	4013      	ands	r3, r2
 800c796:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d01d      	beq.n	800c7da <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800c79e:	4b17      	ldr	r3, [pc, #92]	@ (800c7fc <FLASH_WaitForLastOperation+0xa8>)
 800c7a0:	685a      	ldr	r2, [r3, #4]
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	4a15      	ldr	r2, [pc, #84]	@ (800c7fc <FLASH_WaitForLastOperation+0xa8>)
 800c7a8:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7b0:	d307      	bcc.n	800c7c2 <FLASH_WaitForLastOperation+0x6e>
 800c7b2:	4b11      	ldr	r3, [pc, #68]	@ (800c7f8 <FLASH_WaitForLastOperation+0xa4>)
 800c7b4:	699a      	ldr	r2, [r3, #24]
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c7bc:	490e      	ldr	r1, [pc, #56]	@ (800c7f8 <FLASH_WaitForLastOperation+0xa4>)
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	618b      	str	r3, [r1, #24]
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d004      	beq.n	800c7d6 <FLASH_WaitForLastOperation+0x82>
 800c7cc:	4a0a      	ldr	r2, [pc, #40]	@ (800c7f8 <FLASH_WaitForLastOperation+0xa4>)
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800c7d4:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e009      	b.n	800c7ee <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800c7da:	4b07      	ldr	r3, [pc, #28]	@ (800c7f8 <FLASH_WaitForLastOperation+0xa4>)
 800c7dc:	691b      	ldr	r3, [r3, #16]
 800c7de:	f003 0301 	and.w	r3, r3, #1
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d002      	beq.n	800c7ec <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c7e6:	4b04      	ldr	r3, [pc, #16]	@ (800c7f8 <FLASH_WaitForLastOperation+0xa4>)
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	40022000 	.word	0x40022000
 800c7fc:	2000017c 	.word	0x2000017c

0800c800 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800c80c:	4b0e      	ldr	r3, [pc, #56]	@ (800c848 <FLASH_Program_DoubleWord+0x48>)
 800c80e:	695b      	ldr	r3, [r3, #20]
 800c810:	4a0d      	ldr	r2, [pc, #52]	@ (800c848 <FLASH_Program_DoubleWord+0x48>)
 800c812:	f043 0301 	orr.w	r3, r3, #1
 800c816:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800c81e:	f3bf 8f6f 	isb	sy
}
 800c822:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800c824:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c828:	f04f 0200 	mov.w	r2, #0
 800c82c:	f04f 0300 	mov.w	r3, #0
 800c830:	000a      	movs	r2, r1
 800c832:	2300      	movs	r3, #0
 800c834:	68f9      	ldr	r1, [r7, #12]
 800c836:	3104      	adds	r1, #4
 800c838:	4613      	mov	r3, r2
 800c83a:	600b      	str	r3, [r1, #0]
}
 800c83c:	bf00      	nop
 800c83e:	3714      	adds	r7, #20
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr
 800c848:	40022000 	.word	0x40022000

0800c84c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b089      	sub	sp, #36	@ 0x24
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800c856:	2340      	movs	r3, #64	@ 0x40
 800c858:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800c862:	4b14      	ldr	r3, [pc, #80]	@ (800c8b4 <FLASH_Program_Fast+0x68>)
 800c864:	695b      	ldr	r3, [r3, #20]
 800c866:	4a13      	ldr	r2, [pc, #76]	@ (800c8b4 <FLASH_Program_Fast+0x68>)
 800c868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c86c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c86e:	f3ef 8310 	mrs	r3, PRIMASK
 800c872:	60fb      	str	r3, [r7, #12]
  return(result);
 800c874:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800c876:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c878:	b672      	cpsid	i
}
 800c87a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800c884:	69bb      	ldr	r3, [r7, #24]
 800c886:	3304      	adds	r3, #4
 800c888:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	3304      	adds	r3, #4
 800c88e:	617b      	str	r3, [r7, #20]
    row_index--;
 800c890:	7ffb      	ldrb	r3, [r7, #31]
 800c892:	3b01      	subs	r3, #1
 800c894:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800c896:	7ffb      	ldrb	r3, [r7, #31]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1ef      	bne.n	800c87c <FLASH_Program_Fast+0x30>
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	f383 8810 	msr	PRIMASK, r3
}
 800c8a6:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800c8a8:	bf00      	nop
 800c8aa:	3724      	adds	r7, #36	@ 0x24
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr
 800c8b4:	40022000 	.word	0x40022000

0800c8b8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c8c2:	4b49      	ldr	r3, [pc, #292]	@ (800c9e8 <HAL_FLASHEx_Erase+0x130>)
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d101      	bne.n	800c8ce <HAL_FLASHEx_Erase+0x16>
 800c8ca:	2302      	movs	r3, #2
 800c8cc:	e087      	b.n	800c9de <HAL_FLASHEx_Erase+0x126>
 800c8ce:	4b46      	ldr	r3, [pc, #280]	@ (800c9e8 <HAL_FLASHEx_Erase+0x130>)
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c8d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c8d8:	f7ff ff3c 	bl	800c754 <FLASH_WaitForLastOperation>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800c8e0:	7bfb      	ldrb	r3, [r7, #15]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d177      	bne.n	800c9d6 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c8e6:	4b40      	ldr	r3, [pc, #256]	@ (800c9e8 <HAL_FLASHEx_Erase+0x130>)
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800c8ec:	4b3f      	ldr	r3, [pc, #252]	@ (800c9ec <HAL_FLASHEx_Erase+0x134>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d013      	beq.n	800c920 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c8f8:	4b3c      	ldr	r3, [pc, #240]	@ (800c9ec <HAL_FLASHEx_Erase+0x134>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c900:	2b00      	cmp	r3, #0
 800c902:	d009      	beq.n	800c918 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800c904:	4b39      	ldr	r3, [pc, #228]	@ (800c9ec <HAL_FLASHEx_Erase+0x134>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a38      	ldr	r2, [pc, #224]	@ (800c9ec <HAL_FLASHEx_Erase+0x134>)
 800c90a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c90e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800c910:	4b35      	ldr	r3, [pc, #212]	@ (800c9e8 <HAL_FLASHEx_Erase+0x130>)
 800c912:	2203      	movs	r2, #3
 800c914:	771a      	strb	r2, [r3, #28]
 800c916:	e016      	b.n	800c946 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800c918:	4b33      	ldr	r3, [pc, #204]	@ (800c9e8 <HAL_FLASHEx_Erase+0x130>)
 800c91a:	2201      	movs	r2, #1
 800c91c:	771a      	strb	r2, [r3, #28]
 800c91e:	e012      	b.n	800c946 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c920:	4b32      	ldr	r3, [pc, #200]	@ (800c9ec <HAL_FLASHEx_Erase+0x134>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d009      	beq.n	800c940 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800c92c:	4b2f      	ldr	r3, [pc, #188]	@ (800c9ec <HAL_FLASHEx_Erase+0x134>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a2e      	ldr	r2, [pc, #184]	@ (800c9ec <HAL_FLASHEx_Erase+0x134>)
 800c932:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c936:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800c938:	4b2b      	ldr	r3, [pc, #172]	@ (800c9e8 <HAL_FLASHEx_Erase+0x130>)
 800c93a:	2202      	movs	r2, #2
 800c93c:	771a      	strb	r2, [r3, #28]
 800c93e:	e002      	b.n	800c946 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c940:	4b29      	ldr	r3, [pc, #164]	@ (800c9e8 <HAL_FLASHEx_Erase+0x130>)
 800c942:	2200      	movs	r2, #0
 800c944:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d113      	bne.n	800c976 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	4618      	mov	r0, r3
 800c954:	f000 f908 	bl	800cb68 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c958:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c95c:	f7ff fefa 	bl	800c754 <FLASH_WaitForLastOperation>
 800c960:	4603      	mov	r3, r0
 800c962:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800c964:	4b21      	ldr	r3, [pc, #132]	@ (800c9ec <HAL_FLASHEx_Erase+0x134>)
 800c966:	695b      	ldr	r3, [r3, #20]
 800c968:	4a20      	ldr	r2, [pc, #128]	@ (800c9ec <HAL_FLASHEx_Erase+0x134>)
 800c96a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c96e:	f023 0304 	bic.w	r3, r3, #4
 800c972:	6153      	str	r3, [r2, #20]
 800c974:	e02d      	b.n	800c9d2 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	f04f 32ff 	mov.w	r2, #4294967295
 800c97c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	60bb      	str	r3, [r7, #8]
 800c984:	e01d      	b.n	800c9c2 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	4619      	mov	r1, r3
 800c98c:	68b8      	ldr	r0, [r7, #8]
 800c98e:	f000 f913 	bl	800cbb8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c992:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c996:	f7ff fedd 	bl	800c754 <FLASH_WaitForLastOperation>
 800c99a:	4603      	mov	r3, r0
 800c99c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800c99e:	4b13      	ldr	r3, [pc, #76]	@ (800c9ec <HAL_FLASHEx_Erase+0x134>)
 800c9a0:	695b      	ldr	r3, [r3, #20]
 800c9a2:	4a12      	ldr	r2, [pc, #72]	@ (800c9ec <HAL_FLASHEx_Erase+0x134>)
 800c9a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800c9a8:	f023 0302 	bic.w	r3, r3, #2
 800c9ac:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800c9ae:	7bfb      	ldrb	r3, [r7, #15]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d003      	beq.n	800c9bc <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	68ba      	ldr	r2, [r7, #8]
 800c9b8:	601a      	str	r2, [r3, #0]
          break;
 800c9ba:	e00a      	b.n	800c9d2 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	60bb      	str	r3, [r7, #8]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	689a      	ldr	r2, [r3, #8]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	4413      	add	r3, r2
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d3d9      	bcc.n	800c986 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800c9d2:	f000 f927 	bl	800cc24 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c9d6:	4b04      	ldr	r3, [pc, #16]	@ (800c9e8 <HAL_FLASHEx_Erase+0x130>)
 800c9d8:	2200      	movs	r2, #0
 800c9da:	701a      	strb	r2, [r3, #0]

  return status;
 800c9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3710      	adds	r7, #16
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	2000017c 	.word	0x2000017c
 800c9ec:	40022000 	.word	0x40022000

0800c9f0 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c9fc:	4b32      	ldr	r3, [pc, #200]	@ (800cac8 <HAL_FLASHEx_OBProgram+0xd8>)
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d101      	bne.n	800ca08 <HAL_FLASHEx_OBProgram+0x18>
 800ca04:	2302      	movs	r3, #2
 800ca06:	e05a      	b.n	800cabe <HAL_FLASHEx_OBProgram+0xce>
 800ca08:	4b2f      	ldr	r3, [pc, #188]	@ (800cac8 <HAL_FLASHEx_OBProgram+0xd8>)
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ca0e:	4b2e      	ldr	r3, [pc, #184]	@ (800cac8 <HAL_FLASHEx_OBProgram+0xd8>)
 800ca10:	2200      	movs	r2, #0
 800ca12:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00d      	beq.n	800ca3c <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6858      	ldr	r0, [r3, #4]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6899      	ldr	r1, [r3, #8]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	f000 f943 	bl	800ccb8 <FLASH_OB_WRPConfig>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d001      	beq.n	800ca3c <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f003 0302 	and.w	r3, r3, #2
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d009      	beq.n	800ca5c <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	691b      	ldr	r3, [r3, #16]
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f000 f997 	bl	800cd80 <FLASH_OB_RDPConfig>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d001      	beq.n	800ca5c <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f003 0304 	and.w	r3, r3, #4
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00c      	beq.n	800ca82 <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	695a      	ldr	r2, [r3, #20]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	699b      	ldr	r3, [r3, #24]
 800ca70:	4619      	mov	r1, r3
 800ca72:	4610      	mov	r0, r2
 800ca74:	f000 f9b2 	bl	800cddc <FLASH_OB_UserConfig>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d001      	beq.n	800ca82 <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f003 0308 	and.w	r3, r3, #8
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d013      	beq.n	800cab6 <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6a1a      	ldr	r2, [r3, #32]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d00d      	beq.n	800cab6 <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	69d8      	ldr	r0, [r3, #28]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6a19      	ldr	r1, [r3, #32]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caa6:	461a      	mov	r2, r3
 800caa8:	f000 fa90 	bl	800cfcc <FLASH_OB_PCROPConfig>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d001      	beq.n	800cab6 <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800cab2:	2301      	movs	r3, #1
 800cab4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cab6:	4b04      	ldr	r3, [pc, #16]	@ (800cac8 <HAL_FLASHEx_OBProgram+0xd8>)
 800cab8:	2200      	movs	r2, #0
 800caba:	701a      	strb	r2, [r3, #0]

  return status;
 800cabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	2000017c 	.word	0x2000017c

0800cacc <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2206      	movs	r2, #6
 800cad8:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00b      	beq.n	800cafa <HAL_FLASHEx_OBGetConfig+0x2e>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d007      	beq.n	800cafa <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800caee:	2b02      	cmp	r3, #2
 800caf0:	d003      	beq.n	800cafa <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	2b04      	cmp	r3, #4
 800caf8:	d10f      	bne.n	800cb1a <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f043 0201 	orr.w	r2, r3, #1
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6858      	ldr	r0, [r3, #4]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f103 0108 	add.w	r1, r3, #8
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	330c      	adds	r3, #12
 800cb14:	461a      	mov	r2, r3
 800cb16:	f000 fb05 	bl	800d124 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800cb1a:	f000 fb4d 	bl	800d1b8 <FLASH_OB_GetRDP>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800cb24:	f000 fb62 	bl	800d1ec <FLASH_OB_GetUser>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	69db      	ldr	r3, [r3, #28]
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d003      	beq.n	800cb3e <HAL_FLASHEx_OBGetConfig+0x72>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	69db      	ldr	r3, [r3, #28]
 800cb3a:	2b02      	cmp	r3, #2
 800cb3c:	d110      	bne.n	800cb60 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f043 0208 	orr.w	r2, r3, #8
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f103 001c 	add.w	r0, r3, #28
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f103 0120 	add.w	r1, r3, #32
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	3324      	adds	r3, #36	@ 0x24
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	f000 fb5a 	bl	800d214 <FLASH_OB_GetPCROP>
  }
}
 800cb60:	bf00      	nop
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f003 0301 	and.w	r3, r3, #1
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d005      	beq.n	800cb86 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800cb7a:	4b0e      	ldr	r3, [pc, #56]	@ (800cbb4 <FLASH_MassErase+0x4c>)
 800cb7c:	695b      	ldr	r3, [r3, #20]
 800cb7e:	4a0d      	ldr	r2, [pc, #52]	@ (800cbb4 <FLASH_MassErase+0x4c>)
 800cb80:	f043 0304 	orr.w	r3, r3, #4
 800cb84:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f003 0302 	and.w	r3, r3, #2
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d005      	beq.n	800cb9c <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800cb90:	4b08      	ldr	r3, [pc, #32]	@ (800cbb4 <FLASH_MassErase+0x4c>)
 800cb92:	695b      	ldr	r3, [r3, #20]
 800cb94:	4a07      	ldr	r2, [pc, #28]	@ (800cbb4 <FLASH_MassErase+0x4c>)
 800cb96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb9a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800cb9c:	4b05      	ldr	r3, [pc, #20]	@ (800cbb4 <FLASH_MassErase+0x4c>)
 800cb9e:	695b      	ldr	r3, [r3, #20]
 800cba0:	4a04      	ldr	r2, [pc, #16]	@ (800cbb4 <FLASH_MassErase+0x4c>)
 800cba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cba6:	6153      	str	r3, [r2, #20]
}
 800cba8:	bf00      	nop
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr
 800cbb4:	40022000 	.word	0x40022000

0800cbb8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	f003 0301 	and.w	r3, r3, #1
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d006      	beq.n	800cbda <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800cbcc:	4b14      	ldr	r3, [pc, #80]	@ (800cc20 <FLASH_PageErase+0x68>)
 800cbce:	695b      	ldr	r3, [r3, #20]
 800cbd0:	4a13      	ldr	r2, [pc, #76]	@ (800cc20 <FLASH_PageErase+0x68>)
 800cbd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cbd6:	6153      	str	r3, [r2, #20]
 800cbd8:	e005      	b.n	800cbe6 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800cbda:	4b11      	ldr	r3, [pc, #68]	@ (800cc20 <FLASH_PageErase+0x68>)
 800cbdc:	695b      	ldr	r3, [r3, #20]
 800cbde:	4a10      	ldr	r2, [pc, #64]	@ (800cc20 <FLASH_PageErase+0x68>)
 800cbe0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800cbe4:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800cbe6:	4b0e      	ldr	r3, [pc, #56]	@ (800cc20 <FLASH_PageErase+0x68>)
 800cbe8:	695b      	ldr	r3, [r3, #20]
 800cbea:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	00db      	lsls	r3, r3, #3
 800cbf2:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800cbf6:	490a      	ldr	r1, [pc, #40]	@ (800cc20 <FLASH_PageErase+0x68>)
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800cbfc:	4b08      	ldr	r3, [pc, #32]	@ (800cc20 <FLASH_PageErase+0x68>)
 800cbfe:	695b      	ldr	r3, [r3, #20]
 800cc00:	4a07      	ldr	r2, [pc, #28]	@ (800cc20 <FLASH_PageErase+0x68>)
 800cc02:	f043 0302 	orr.w	r3, r3, #2
 800cc06:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800cc08:	4b05      	ldr	r3, [pc, #20]	@ (800cc20 <FLASH_PageErase+0x68>)
 800cc0a:	695b      	ldr	r3, [r3, #20]
 800cc0c:	4a04      	ldr	r2, [pc, #16]	@ (800cc20 <FLASH_PageErase+0x68>)
 800cc0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cc12:	6153      	str	r3, [r2, #20]
}
 800cc14:	bf00      	nop
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr
 800cc20:	40022000 	.word	0x40022000

0800cc24 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800cc2a:	4b21      	ldr	r3, [pc, #132]	@ (800ccb0 <FLASH_FlushCaches+0x8c>)
 800cc2c:	7f1b      	ldrb	r3, [r3, #28]
 800cc2e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800cc30:	79fb      	ldrb	r3, [r7, #7]
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d002      	beq.n	800cc3c <FLASH_FlushCaches+0x18>
 800cc36:	79fb      	ldrb	r3, [r7, #7]
 800cc38:	2b03      	cmp	r3, #3
 800cc3a:	d117      	bne.n	800cc6c <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800cc3c:	4b1d      	ldr	r3, [pc, #116]	@ (800ccb4 <FLASH_FlushCaches+0x90>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a1c      	ldr	r2, [pc, #112]	@ (800ccb4 <FLASH_FlushCaches+0x90>)
 800cc42:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cc46:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800cc48:	4b1a      	ldr	r3, [pc, #104]	@ (800ccb4 <FLASH_FlushCaches+0x90>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a19      	ldr	r2, [pc, #100]	@ (800ccb4 <FLASH_FlushCaches+0x90>)
 800cc4e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800cc52:	6013      	str	r3, [r2, #0]
 800cc54:	4b17      	ldr	r3, [pc, #92]	@ (800ccb4 <FLASH_FlushCaches+0x90>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a16      	ldr	r2, [pc, #88]	@ (800ccb4 <FLASH_FlushCaches+0x90>)
 800cc5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cc5e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cc60:	4b14      	ldr	r3, [pc, #80]	@ (800ccb4 <FLASH_FlushCaches+0x90>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a13      	ldr	r2, [pc, #76]	@ (800ccb4 <FLASH_FlushCaches+0x90>)
 800cc66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cc6a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800cc6c:	79fb      	ldrb	r3, [r7, #7]
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	d002      	beq.n	800cc78 <FLASH_FlushCaches+0x54>
 800cc72:	79fb      	ldrb	r3, [r7, #7]
 800cc74:	2b03      	cmp	r3, #3
 800cc76:	d111      	bne.n	800cc9c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800cc78:	4b0e      	ldr	r3, [pc, #56]	@ (800ccb4 <FLASH_FlushCaches+0x90>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a0d      	ldr	r2, [pc, #52]	@ (800ccb4 <FLASH_FlushCaches+0x90>)
 800cc7e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cc82:	6013      	str	r3, [r2, #0]
 800cc84:	4b0b      	ldr	r3, [pc, #44]	@ (800ccb4 <FLASH_FlushCaches+0x90>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a0a      	ldr	r2, [pc, #40]	@ (800ccb4 <FLASH_FlushCaches+0x90>)
 800cc8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc8e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800cc90:	4b08      	ldr	r3, [pc, #32]	@ (800ccb4 <FLASH_FlushCaches+0x90>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a07      	ldr	r2, [pc, #28]	@ (800ccb4 <FLASH_FlushCaches+0x90>)
 800cc96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cc9a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800cc9c:	4b04      	ldr	r3, [pc, #16]	@ (800ccb0 <FLASH_FlushCaches+0x8c>)
 800cc9e:	2200      	movs	r2, #0
 800cca0:	771a      	strb	r2, [r3, #28]
}
 800cca2:	bf00      	nop
 800cca4:	370c      	adds	r7, #12
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	2000017c 	.word	0x2000017c
 800ccb4:	40022000 	.word	0x40022000

0800ccb8 <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b086      	sub	sp, #24
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ccc4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ccc8:	f7ff fd44 	bl	800c754 <FLASH_WaitForLastOperation>
 800cccc:	4603      	mov	r3, r0
 800ccce:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800ccd0:	7dfb      	ldrb	r3, [r7, #23]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d14c      	bne.n	800cd70 <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d10b      	bne.n	800ccf4 <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 800ccdc:	4b27      	ldr	r3, [pc, #156]	@ (800cd7c <FLASH_OB_WRPConfig+0xc4>)
 800ccde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cce0:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	0419      	lsls	r1, r3, #16
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	430b      	orrs	r3, r1
 800ccec:	4923      	ldr	r1, [pc, #140]	@ (800cd7c <FLASH_OB_WRPConfig+0xc4>)
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800ccf2:	e02b      	b.n	800cd4c <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d10b      	bne.n	800cd12 <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 800ccfa:	4b20      	ldr	r3, [pc, #128]	@ (800cd7c <FLASH_OB_WRPConfig+0xc4>)
 800ccfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccfe:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	0419      	lsls	r1, r3, #16
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	430b      	orrs	r3, r1
 800cd0a:	491c      	ldr	r1, [pc, #112]	@ (800cd7c <FLASH_OB_WRPConfig+0xc4>)
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	630b      	str	r3, [r1, #48]	@ 0x30
 800cd10:	e01c      	b.n	800cd4c <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d10b      	bne.n	800cd30 <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 800cd18:	4b18      	ldr	r3, [pc, #96]	@ (800cd7c <FLASH_OB_WRPConfig+0xc4>)
 800cd1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd1c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	0419      	lsls	r1, r3, #16
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	430b      	orrs	r3, r1
 800cd28:	4914      	ldr	r1, [pc, #80]	@ (800cd7c <FLASH_OB_WRPConfig+0xc4>)
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800cd2e:	e00d      	b.n	800cd4c <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2b04      	cmp	r3, #4
 800cd34:	d10a      	bne.n	800cd4c <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 800cd36:	4b11      	ldr	r3, [pc, #68]	@ (800cd7c <FLASH_OB_WRPConfig+0xc4>)
 800cd38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd3a:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	0419      	lsls	r1, r3, #16
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	430b      	orrs	r3, r1
 800cd46:	490d      	ldr	r1, [pc, #52]	@ (800cd7c <FLASH_OB_WRPConfig+0xc4>)
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	650b      	str	r3, [r1, #80]	@ 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800cd4c:	4b0b      	ldr	r3, [pc, #44]	@ (800cd7c <FLASH_OB_WRPConfig+0xc4>)
 800cd4e:	695b      	ldr	r3, [r3, #20]
 800cd50:	4a0a      	ldr	r2, [pc, #40]	@ (800cd7c <FLASH_OB_WRPConfig+0xc4>)
 800cd52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd56:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cd58:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cd5c:	f7ff fcfa 	bl	800c754 <FLASH_WaitForLastOperation>
 800cd60:	4603      	mov	r3, r0
 800cd62:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800cd64:	4b05      	ldr	r3, [pc, #20]	@ (800cd7c <FLASH_OB_WRPConfig+0xc4>)
 800cd66:	695b      	ldr	r3, [r3, #20]
 800cd68:	4a04      	ldr	r2, [pc, #16]	@ (800cd7c <FLASH_OB_WRPConfig+0xc4>)
 800cd6a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cd6e:	6153      	str	r3, [r2, #20]
  }

  return status;
 800cd70:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3718      	adds	r7, #24
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	40022000 	.word	0x40022000

0800cd80 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cd88:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cd8c:	f7ff fce2 	bl	800c754 <FLASH_WaitForLastOperation>
 800cd90:	4603      	mov	r3, r0
 800cd92:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800cd94:	7bfb      	ldrb	r3, [r7, #15]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d119      	bne.n	800cdce <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 800cd9a:	4b0f      	ldr	r3, [pc, #60]	@ (800cdd8 <FLASH_OB_RDPConfig+0x58>)
 800cd9c:	6a1b      	ldr	r3, [r3, #32]
 800cd9e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800cda2:	490d      	ldr	r1, [pc, #52]	@ (800cdd8 <FLASH_OB_RDPConfig+0x58>)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	4313      	orrs	r3, r2
 800cda8:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800cdaa:	4b0b      	ldr	r3, [pc, #44]	@ (800cdd8 <FLASH_OB_RDPConfig+0x58>)
 800cdac:	695b      	ldr	r3, [r3, #20]
 800cdae:	4a0a      	ldr	r2, [pc, #40]	@ (800cdd8 <FLASH_OB_RDPConfig+0x58>)
 800cdb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cdb4:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cdb6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cdba:	f7ff fccb 	bl	800c754 <FLASH_WaitForLastOperation>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800cdc2:	4b05      	ldr	r3, [pc, #20]	@ (800cdd8 <FLASH_OB_RDPConfig+0x58>)
 800cdc4:	695b      	ldr	r3, [r3, #20]
 800cdc6:	4a04      	ldr	r2, [pc, #16]	@ (800cdd8 <FLASH_OB_RDPConfig+0x58>)
 800cdc8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cdcc:	6153      	str	r3, [r2, #20]
  }

  return status;
 800cdce:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	40022000 	.word	0x40022000

0800cddc <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b086      	sub	sp, #24
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800cde6:	2300      	movs	r3, #0
 800cde8:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 800cdea:	2300      	movs	r3, #0
 800cdec:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cdee:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cdf2:	f7ff fcaf 	bl	800c754 <FLASH_WaitForLastOperation>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800cdfa:	7bfb      	ldrb	r3, [r7, #15]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f040 80de 	bne.w	800cfbe <FLASH_OB_UserConfig+0x1e2>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f003 0301 	and.w	r3, r3, #1
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d009      	beq.n	800ce20 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ce12:	697a      	ldr	r2, [r7, #20]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ce1e:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f003 0302 	and.w	r3, r3, #2
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d009      	beq.n	800ce3e <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ce30:	697a      	ldr	r2, [r7, #20]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ce3c:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f003 0304 	and.w	r3, r3, #4
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d009      	beq.n	800ce5c <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ce4e:	697a      	ldr	r2, [r7, #20]
 800ce50:	4313      	orrs	r3, r2
 800ce52:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ce5a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d009      	beq.n	800ce7a <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce6c:	697a      	ldr	r2, [r7, #20]
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ce78:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f003 0308 	and.w	r3, r3, #8
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d009      	beq.n	800ce98 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ce8a:	697a      	ldr	r2, [r7, #20]
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ce96:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f003 0310 	and.w	r3, r3, #16
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d009      	beq.n	800ceb6 <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cea8:	697a      	ldr	r2, [r7, #20]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ceb4:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f003 0320 	and.w	r3, r3, #32
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d009      	beq.n	800ced4 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cec6:	697a      	ldr	r2, [r7, #20]
 800cec8:	4313      	orrs	r3, r2
 800ceca:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ced2:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d009      	beq.n	800cef2 <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cee4:	697a      	ldr	r2, [r7, #20]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cef0:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d009      	beq.n	800cf10 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cf02:	697a      	ldr	r2, [r7, #20]
 800cf04:	4313      	orrs	r3, r2
 800cf06:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cf0e:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d009      	beq.n	800cf2e <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cf2c:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d009      	beq.n	800cf4c <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf3e:	697a      	ldr	r2, [r7, #20]
 800cf40:	4313      	orrs	r3, r2
 800cf42:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cf4a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d009      	beq.n	800cf6a <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cf5c:	697a      	ldr	r2, [r7, #20]
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cf68:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d009      	beq.n	800cf88 <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf7a:	697a      	ldr	r2, [r7, #20]
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800cf86:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 800cf88:	4b0f      	ldr	r3, [pc, #60]	@ (800cfc8 <FLASH_OB_UserConfig+0x1ec>)
 800cf8a:	6a1a      	ldr	r2, [r3, #32]
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	43db      	mvns	r3, r3
 800cf90:	401a      	ands	r2, r3
 800cf92:	490d      	ldr	r1, [pc, #52]	@ (800cfc8 <FLASH_OB_UserConfig+0x1ec>)
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800cf9a:	4b0b      	ldr	r3, [pc, #44]	@ (800cfc8 <FLASH_OB_UserConfig+0x1ec>)
 800cf9c:	695b      	ldr	r3, [r3, #20]
 800cf9e:	4a0a      	ldr	r2, [pc, #40]	@ (800cfc8 <FLASH_OB_UserConfig+0x1ec>)
 800cfa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cfa4:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cfa6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cfaa:	f7ff fbd3 	bl	800c754 <FLASH_WaitForLastOperation>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800cfb2:	4b05      	ldr	r3, [pc, #20]	@ (800cfc8 <FLASH_OB_UserConfig+0x1ec>)
 800cfb4:	695b      	ldr	r3, [r3, #20]
 800cfb6:	4a04      	ldr	r2, [pc, #16]	@ (800cfc8 <FLASH_OB_UserConfig+0x1ec>)
 800cfb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cfbc:	6153      	str	r3, [r2, #20]
  }

  return status;
 800cfbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3718      	adds	r7, #24
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	40022000 	.word	0x40022000

0800cfcc <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b088      	sub	sp, #32
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cfd8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cfdc:	f7ff fbba 	bl	800c754 <FLASH_WaitForLastOperation>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 800cfe4:	7ffb      	ldrb	r3, [r7, #31]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f040 808c 	bne.w	800d104 <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800cfec:	4b48      	ldr	r3, [pc, #288]	@ (800d110 <FLASH_OB_PCROPConfig+0x144>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d115      	bne.n	800d024 <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 800cff8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cffc:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800cffe:	4b45      	ldr	r3, [pc, #276]	@ (800d114 <FLASH_OB_PCROPConfig+0x148>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	b29b      	uxth	r3, r3
 800d004:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d008:	4293      	cmp	r3, r2
 800d00a:	d008      	beq.n	800d01e <FLASH_OB_PCROPConfig+0x52>
 800d00c:	4b41      	ldr	r3, [pc, #260]	@ (800d114 <FLASH_OB_PCROPConfig+0x148>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	029b      	lsls	r3, r3, #10
 800d012:	085a      	lsrs	r2, r3, #1
 800d014:	4b40      	ldr	r3, [pc, #256]	@ (800d118 <FLASH_OB_PCROPConfig+0x14c>)
 800d016:	4013      	ands	r3, r2
 800d018:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800d01c:	e000      	b.n	800d020 <FLASH_OB_PCROPConfig+0x54>
 800d01e:	4b3f      	ldr	r3, [pc, #252]	@ (800d11c <FLASH_OB_PCROPConfig+0x150>)
 800d020:	617b      	str	r3, [r7, #20]
 800d022:	e014      	b.n	800d04e <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800d024:	4b3b      	ldr	r3, [pc, #236]	@ (800d114 <FLASH_OB_PCROPConfig+0x148>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	b29b      	uxth	r3, r3
 800d02a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d02e:	4293      	cmp	r3, r2
 800d030:	d008      	beq.n	800d044 <FLASH_OB_PCROPConfig+0x78>
 800d032:	4b38      	ldr	r3, [pc, #224]	@ (800d114 <FLASH_OB_PCROPConfig+0x148>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	029b      	lsls	r3, r3, #10
 800d038:	085a      	lsrs	r2, r3, #1
 800d03a:	4b37      	ldr	r3, [pc, #220]	@ (800d118 <FLASH_OB_PCROPConfig+0x14c>)
 800d03c:	4013      	ands	r3, r2
 800d03e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800d042:	e000      	b.n	800d046 <FLASH_OB_PCROPConfig+0x7a>
 800d044:	4b35      	ldr	r3, [pc, #212]	@ (800d11c <FLASH_OB_PCROPConfig+0x150>)
 800d046:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 800d048:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d04c:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f003 0303 	and.w	r3, r3, #3
 800d054:	2b01      	cmp	r3, #1
 800d056:	d11a      	bne.n	800d08e <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 800d058:	68ba      	ldr	r2, [r7, #8]
 800d05a:	69bb      	ldr	r3, [r7, #24]
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	08db      	lsrs	r3, r3, #3
 800d060:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 800d062:	4b2f      	ldr	r3, [pc, #188]	@ (800d120 <FLASH_OB_PCROPConfig+0x154>)
 800d064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d066:	0c1b      	lsrs	r3, r3, #16
 800d068:	041b      	lsls	r3, r3, #16
 800d06a:	492d      	ldr	r1, [pc, #180]	@ (800d120 <FLASH_OB_PCROPConfig+0x154>)
 800d06c:	693a      	ldr	r2, [r7, #16]
 800d06e:	4313      	orrs	r3, r2
 800d070:	624b      	str	r3, [r1, #36]	@ 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	1ad3      	subs	r3, r2, r3
 800d078:	08db      	lsrs	r3, r3, #3
 800d07a:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 800d07c:	4b28      	ldr	r3, [pc, #160]	@ (800d120 <FLASH_OB_PCROPConfig+0x154>)
 800d07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d080:	0c1b      	lsrs	r3, r3, #16
 800d082:	041b      	lsls	r3, r3, #16
 800d084:	4926      	ldr	r1, [pc, #152]	@ (800d120 <FLASH_OB_PCROPConfig+0x154>)
 800d086:	693a      	ldr	r2, [r7, #16]
 800d088:	4313      	orrs	r3, r2
 800d08a:	628b      	str	r3, [r1, #40]	@ 0x28
 800d08c:	e01e      	b.n	800d0cc <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	f003 0303 	and.w	r3, r3, #3
 800d094:	2b02      	cmp	r3, #2
 800d096:	d119      	bne.n	800d0cc <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 800d098:	68ba      	ldr	r2, [r7, #8]
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	1ad3      	subs	r3, r2, r3
 800d09e:	08db      	lsrs	r3, r3, #3
 800d0a0:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 800d0a2:	4b1f      	ldr	r3, [pc, #124]	@ (800d120 <FLASH_OB_PCROPConfig+0x154>)
 800d0a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0a6:	0c1b      	lsrs	r3, r3, #16
 800d0a8:	041b      	lsls	r3, r3, #16
 800d0aa:	491d      	ldr	r1, [pc, #116]	@ (800d120 <FLASH_OB_PCROPConfig+0x154>)
 800d0ac:	693a      	ldr	r2, [r7, #16]
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	644b      	str	r3, [r1, #68]	@ 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	1ad3      	subs	r3, r2, r3
 800d0b8:	08db      	lsrs	r3, r3, #3
 800d0ba:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 800d0bc:	4b18      	ldr	r3, [pc, #96]	@ (800d120 <FLASH_OB_PCROPConfig+0x154>)
 800d0be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0c0:	0c1b      	lsrs	r3, r3, #16
 800d0c2:	041b      	lsls	r3, r3, #16
 800d0c4:	4916      	ldr	r1, [pc, #88]	@ (800d120 <FLASH_OB_PCROPConfig+0x154>)
 800d0c6:	693a      	ldr	r2, [r7, #16]
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	648b      	str	r3, [r1, #72]	@ 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 800d0cc:	4b14      	ldr	r3, [pc, #80]	@ (800d120 <FLASH_OB_PCROPConfig+0x154>)
 800d0ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d0da:	4911      	ldr	r1, [pc, #68]	@ (800d120 <FLASH_OB_PCROPConfig+0x154>)
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	628b      	str	r3, [r1, #40]	@ 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d0e0:	4b0f      	ldr	r3, [pc, #60]	@ (800d120 <FLASH_OB_PCROPConfig+0x154>)
 800d0e2:	695b      	ldr	r3, [r3, #20]
 800d0e4:	4a0e      	ldr	r2, [pc, #56]	@ (800d120 <FLASH_OB_PCROPConfig+0x154>)
 800d0e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d0ea:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d0ec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d0f0:	f7ff fb30 	bl	800c754 <FLASH_WaitForLastOperation>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d0f8:	4b09      	ldr	r3, [pc, #36]	@ (800d120 <FLASH_OB_PCROPConfig+0x154>)
 800d0fa:	695b      	ldr	r3, [r3, #20]
 800d0fc:	4a08      	ldr	r2, [pc, #32]	@ (800d120 <FLASH_OB_PCROPConfig+0x154>)
 800d0fe:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d102:	6153      	str	r3, [r2, #20]
  }

  return status;
 800d104:	7ffb      	ldrb	r3, [r7, #31]
}
 800d106:	4618      	mov	r0, r3
 800d108:	3720      	adds	r7, #32
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	40010000 	.word	0x40010000
 800d114:	1fff75e0 	.word	0x1fff75e0
 800d118:	01fffe00 	.word	0x01fffe00
 800d11c:	08080000 	.word	0x08080000
 800d120:	40022000 	.word	0x40022000

0800d124 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d10b      	bne.n	800d14e <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800d136:	4b1f      	ldr	r3, [pc, #124]	@ (800d1b4 <FLASH_OB_GetWRP+0x90>)
 800d138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d13a:	b2da      	uxtb	r2, r3
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 800d140:	4b1c      	ldr	r3, [pc, #112]	@ (800d1b4 <FLASH_OB_GetWRP+0x90>)
 800d142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d144:	0c1b      	lsrs	r3, r3, #16
 800d146:	b2da      	uxtb	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 800d14c:	e02b      	b.n	800d1a6 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2b01      	cmp	r3, #1
 800d152:	d10b      	bne.n	800d16c <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800d154:	4b17      	ldr	r3, [pc, #92]	@ (800d1b4 <FLASH_OB_GetWRP+0x90>)
 800d156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d158:	b2da      	uxtb	r2, r3
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 800d15e:	4b15      	ldr	r3, [pc, #84]	@ (800d1b4 <FLASH_OB_GetWRP+0x90>)
 800d160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d162:	0c1b      	lsrs	r3, r3, #16
 800d164:	b2da      	uxtb	r2, r3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	601a      	str	r2, [r3, #0]
}
 800d16a:	e01c      	b.n	800d1a6 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b02      	cmp	r3, #2
 800d170:	d10b      	bne.n	800d18a <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 800d172:	4b10      	ldr	r3, [pc, #64]	@ (800d1b4 <FLASH_OB_GetWRP+0x90>)
 800d174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d176:	b2da      	uxtb	r2, r3
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 800d17c:	4b0d      	ldr	r3, [pc, #52]	@ (800d1b4 <FLASH_OB_GetWRP+0x90>)
 800d17e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d180:	0c1b      	lsrs	r3, r3, #16
 800d182:	b2da      	uxtb	r2, r3
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	601a      	str	r2, [r3, #0]
}
 800d188:	e00d      	b.n	800d1a6 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2b04      	cmp	r3, #4
 800d18e:	d10a      	bne.n	800d1a6 <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 800d190:	4b08      	ldr	r3, [pc, #32]	@ (800d1b4 <FLASH_OB_GetWRP+0x90>)
 800d192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d194:	b2da      	uxtb	r2, r3
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 800d19a:	4b06      	ldr	r3, [pc, #24]	@ (800d1b4 <FLASH_OB_GetWRP+0x90>)
 800d19c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d19e:	0c1b      	lsrs	r3, r3, #16
 800d1a0:	b2da      	uxtb	r2, r3
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	601a      	str	r2, [r3, #0]
}
 800d1a6:	bf00      	nop
 800d1a8:	3714      	adds	r7, #20
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	40022000 	.word	0x40022000

0800d1b8 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800d1be:	4b0a      	ldr	r3, [pc, #40]	@ (800d1e8 <FLASH_OB_GetRDP+0x30>)
 800d1c0:	6a1b      	ldr	r3, [r3, #32]
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2baa      	cmp	r3, #170	@ 0xaa
 800d1ca:	d004      	beq.n	800d1d6 <FLASH_OB_GetRDP+0x1e>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2bcc      	cmp	r3, #204	@ 0xcc
 800d1d0:	d001      	beq.n	800d1d6 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800d1d2:	23bb      	movs	r3, #187	@ 0xbb
 800d1d4:	e002      	b.n	800d1dc <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 800d1d6:	4b04      	ldr	r3, [pc, #16]	@ (800d1e8 <FLASH_OB_GetRDP+0x30>)
 800d1d8:	6a1b      	ldr	r3, [r3, #32]
 800d1da:	b2db      	uxtb	r3, r3
  }
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	370c      	adds	r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr
 800d1e8:	40022000 	.word	0x40022000

0800d1ec <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800d1f2:	4b07      	ldr	r3, [pc, #28]	@ (800d210 <FLASH_OB_GetUser+0x24>)
 800d1f4:	6a1b      	ldr	r3, [r3, #32]
 800d1f6:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d1fe:	607b      	str	r3, [r7, #4]

  return user_config;
 800d200:	687b      	ldr	r3, [r7, #4]
}
 800d202:	4618      	mov	r0, r3
 800d204:	370c      	adds	r7, #12
 800d206:	46bd      	mov	sp, r7
 800d208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20c:	4770      	bx	lr
 800d20e:	bf00      	nop
 800d210:	40022000 	.word	0x40022000

0800d214 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 800d214:	b480      	push	{r7}
 800d216:	b089      	sub	sp, #36	@ 0x24
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800d220:	4b3b      	ldr	r3, [pc, #236]	@ (800d310 <FLASH_OB_GetPCROP+0xfc>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d115      	bne.n	800d258 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 800d22c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d230:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800d232:	4b38      	ldr	r3, [pc, #224]	@ (800d314 <FLASH_OB_GetPCROP+0x100>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	b29b      	uxth	r3, r3
 800d238:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d008      	beq.n	800d252 <FLASH_OB_GetPCROP+0x3e>
 800d240:	4b34      	ldr	r3, [pc, #208]	@ (800d314 <FLASH_OB_GetPCROP+0x100>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	029b      	lsls	r3, r3, #10
 800d246:	085a      	lsrs	r2, r3, #1
 800d248:	4b33      	ldr	r3, [pc, #204]	@ (800d318 <FLASH_OB_GetPCROP+0x104>)
 800d24a:	4013      	ands	r3, r2
 800d24c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800d250:	e000      	b.n	800d254 <FLASH_OB_GetPCROP+0x40>
 800d252:	4b32      	ldr	r3, [pc, #200]	@ (800d31c <FLASH_OB_GetPCROP+0x108>)
 800d254:	61bb      	str	r3, [r7, #24]
 800d256:	e014      	b.n	800d282 <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800d258:	4b2e      	ldr	r3, [pc, #184]	@ (800d314 <FLASH_OB_GetPCROP+0x100>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d262:	4293      	cmp	r3, r2
 800d264:	d008      	beq.n	800d278 <FLASH_OB_GetPCROP+0x64>
 800d266:	4b2b      	ldr	r3, [pc, #172]	@ (800d314 <FLASH_OB_GetPCROP+0x100>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	029b      	lsls	r3, r3, #10
 800d26c:	085a      	lsrs	r2, r3, #1
 800d26e:	4b2a      	ldr	r3, [pc, #168]	@ (800d318 <FLASH_OB_GetPCROP+0x104>)
 800d270:	4013      	ands	r3, r2
 800d272:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800d276:	e000      	b.n	800d27a <FLASH_OB_GetPCROP+0x66>
 800d278:	4b28      	ldr	r3, [pc, #160]	@ (800d31c <FLASH_OB_GetPCROP+0x108>)
 800d27a:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 800d27c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d280:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f003 0303 	and.w	r3, r3, #3
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d115      	bne.n	800d2ba <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800d28e:	4b24      	ldr	r3, [pc, #144]	@ (800d320 <FLASH_OB_GetPCROP+0x10c>)
 800d290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d292:	b29b      	uxth	r3, r3
 800d294:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	00da      	lsls	r2, r3, #3
 800d29a:	69fb      	ldr	r3, [r7, #28]
 800d29c:	441a      	add	r2, r3
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 800d2a2:	4b1f      	ldr	r3, [pc, #124]	@ (800d320 <FLASH_OB_GetPCROP+0x10c>)
 800d2a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	00da      	lsls	r2, r3, #3
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	1dda      	adds	r2, r3, #7
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	601a      	str	r2, [r3, #0]
 800d2b8:	e01a      	b.n	800d2f0 <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f003 0303 	and.w	r3, r3, #3
 800d2c2:	2b02      	cmp	r3, #2
 800d2c4:	d114      	bne.n	800d2f0 <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 800d2c6:	4b16      	ldr	r3, [pc, #88]	@ (800d320 <FLASH_OB_GetPCROP+0x10c>)
 800d2c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	00da      	lsls	r2, r3, #3
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	441a      	add	r2, r3
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 800d2da:	4b11      	ldr	r3, [pc, #68]	@ (800d320 <FLASH_OB_GetPCROP+0x10c>)
 800d2dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	00da      	lsls	r2, r3, #3
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	1dda      	adds	r2, r3, #7
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 800d2f0:	4b0b      	ldr	r3, [pc, #44]	@ (800d320 <FLASH_OB_GetPCROP+0x10c>)
 800d2f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2f4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	431a      	orrs	r2, r3
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	601a      	str	r2, [r3, #0]
}
 800d302:	bf00      	nop
 800d304:	3724      	adds	r7, #36	@ 0x24
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr
 800d30e:	bf00      	nop
 800d310:	40010000 	.word	0x40010000
 800d314:	1fff75e0 	.word	0x1fff75e0
 800d318:	01fffe00 	.word	0x01fffe00
 800d31c:	08080000 	.word	0x08080000
 800d320:	40022000 	.word	0x40022000

0800d324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d324:	b480      	push	{r7}
 800d326:	b087      	sub	sp, #28
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d32e:	2300      	movs	r3, #0
 800d330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d332:	e17f      	b.n	800d634 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	2101      	movs	r1, #1
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	fa01 f303 	lsl.w	r3, r1, r3
 800d340:	4013      	ands	r3, r2
 800d342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2b00      	cmp	r3, #0
 800d348:	f000 8171 	beq.w	800d62e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	f003 0303 	and.w	r3, r3, #3
 800d354:	2b01      	cmp	r3, #1
 800d356:	d005      	beq.n	800d364 <HAL_GPIO_Init+0x40>
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	f003 0303 	and.w	r3, r3, #3
 800d360:	2b02      	cmp	r3, #2
 800d362:	d130      	bne.n	800d3c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	005b      	lsls	r3, r3, #1
 800d36e:	2203      	movs	r2, #3
 800d370:	fa02 f303 	lsl.w	r3, r2, r3
 800d374:	43db      	mvns	r3, r3
 800d376:	693a      	ldr	r2, [r7, #16]
 800d378:	4013      	ands	r3, r2
 800d37a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	68da      	ldr	r2, [r3, #12]
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	005b      	lsls	r3, r3, #1
 800d384:	fa02 f303 	lsl.w	r3, r2, r3
 800d388:	693a      	ldr	r2, [r7, #16]
 800d38a:	4313      	orrs	r3, r2
 800d38c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	693a      	ldr	r2, [r7, #16]
 800d392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d39a:	2201      	movs	r2, #1
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	fa02 f303 	lsl.w	r3, r2, r3
 800d3a2:	43db      	mvns	r3, r3
 800d3a4:	693a      	ldr	r2, [r7, #16]
 800d3a6:	4013      	ands	r3, r2
 800d3a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	091b      	lsrs	r3, r3, #4
 800d3b0:	f003 0201 	and.w	r2, r3, #1
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d3ba:	693a      	ldr	r2, [r7, #16]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	693a      	ldr	r2, [r7, #16]
 800d3c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	f003 0303 	and.w	r3, r3, #3
 800d3ce:	2b03      	cmp	r3, #3
 800d3d0:	d118      	bne.n	800d404 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800d3d8:	2201      	movs	r2, #1
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d3e0:	43db      	mvns	r3, r3
 800d3e2:	693a      	ldr	r2, [r7, #16]
 800d3e4:	4013      	ands	r3, r2
 800d3e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	08db      	lsrs	r3, r3, #3
 800d3ee:	f003 0201 	and.w	r2, r3, #1
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d3f8:	693a      	ldr	r2, [r7, #16]
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	693a      	ldr	r2, [r7, #16]
 800d402:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	f003 0303 	and.w	r3, r3, #3
 800d40c:	2b03      	cmp	r3, #3
 800d40e:	d017      	beq.n	800d440 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	005b      	lsls	r3, r3, #1
 800d41a:	2203      	movs	r2, #3
 800d41c:	fa02 f303 	lsl.w	r3, r2, r3
 800d420:	43db      	mvns	r3, r3
 800d422:	693a      	ldr	r2, [r7, #16]
 800d424:	4013      	ands	r3, r2
 800d426:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	689a      	ldr	r2, [r3, #8]
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	005b      	lsls	r3, r3, #1
 800d430:	fa02 f303 	lsl.w	r3, r2, r3
 800d434:	693a      	ldr	r2, [r7, #16]
 800d436:	4313      	orrs	r3, r2
 800d438:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	693a      	ldr	r2, [r7, #16]
 800d43e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	f003 0303 	and.w	r3, r3, #3
 800d448:	2b02      	cmp	r3, #2
 800d44a:	d123      	bne.n	800d494 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	08da      	lsrs	r2, r3, #3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	3208      	adds	r2, #8
 800d454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d458:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	f003 0307 	and.w	r3, r3, #7
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	220f      	movs	r2, #15
 800d464:	fa02 f303 	lsl.w	r3, r2, r3
 800d468:	43db      	mvns	r3, r3
 800d46a:	693a      	ldr	r2, [r7, #16]
 800d46c:	4013      	ands	r3, r2
 800d46e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	691a      	ldr	r2, [r3, #16]
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	f003 0307 	and.w	r3, r3, #7
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	fa02 f303 	lsl.w	r3, r2, r3
 800d480:	693a      	ldr	r2, [r7, #16]
 800d482:	4313      	orrs	r3, r2
 800d484:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	08da      	lsrs	r2, r3, #3
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	3208      	adds	r2, #8
 800d48e:	6939      	ldr	r1, [r7, #16]
 800d490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	005b      	lsls	r3, r3, #1
 800d49e:	2203      	movs	r2, #3
 800d4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4a4:	43db      	mvns	r3, r3
 800d4a6:	693a      	ldr	r2, [r7, #16]
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	f003 0203 	and.w	r2, r3, #3
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	005b      	lsls	r3, r3, #1
 800d4b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4bc:	693a      	ldr	r2, [r7, #16]
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	693a      	ldr	r2, [r7, #16]
 800d4c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f000 80ac 	beq.w	800d62e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d4d6:	4b5f      	ldr	r3, [pc, #380]	@ (800d654 <HAL_GPIO_Init+0x330>)
 800d4d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4da:	4a5e      	ldr	r2, [pc, #376]	@ (800d654 <HAL_GPIO_Init+0x330>)
 800d4dc:	f043 0301 	orr.w	r3, r3, #1
 800d4e0:	6613      	str	r3, [r2, #96]	@ 0x60
 800d4e2:	4b5c      	ldr	r3, [pc, #368]	@ (800d654 <HAL_GPIO_Init+0x330>)
 800d4e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4e6:	f003 0301 	and.w	r3, r3, #1
 800d4ea:	60bb      	str	r3, [r7, #8]
 800d4ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800d4ee:	4a5a      	ldr	r2, [pc, #360]	@ (800d658 <HAL_GPIO_Init+0x334>)
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	089b      	lsrs	r3, r3, #2
 800d4f4:	3302      	adds	r3, #2
 800d4f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	f003 0303 	and.w	r3, r3, #3
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	220f      	movs	r2, #15
 800d506:	fa02 f303 	lsl.w	r3, r2, r3
 800d50a:	43db      	mvns	r3, r3
 800d50c:	693a      	ldr	r2, [r7, #16]
 800d50e:	4013      	ands	r3, r2
 800d510:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800d518:	d025      	beq.n	800d566 <HAL_GPIO_Init+0x242>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	4a4f      	ldr	r2, [pc, #316]	@ (800d65c <HAL_GPIO_Init+0x338>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d01f      	beq.n	800d562 <HAL_GPIO_Init+0x23e>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	4a4e      	ldr	r2, [pc, #312]	@ (800d660 <HAL_GPIO_Init+0x33c>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d019      	beq.n	800d55e <HAL_GPIO_Init+0x23a>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4a4d      	ldr	r2, [pc, #308]	@ (800d664 <HAL_GPIO_Init+0x340>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d013      	beq.n	800d55a <HAL_GPIO_Init+0x236>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4a4c      	ldr	r2, [pc, #304]	@ (800d668 <HAL_GPIO_Init+0x344>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d00d      	beq.n	800d556 <HAL_GPIO_Init+0x232>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	4a4b      	ldr	r2, [pc, #300]	@ (800d66c <HAL_GPIO_Init+0x348>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d007      	beq.n	800d552 <HAL_GPIO_Init+0x22e>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4a4a      	ldr	r2, [pc, #296]	@ (800d670 <HAL_GPIO_Init+0x34c>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d101      	bne.n	800d54e <HAL_GPIO_Init+0x22a>
 800d54a:	2306      	movs	r3, #6
 800d54c:	e00c      	b.n	800d568 <HAL_GPIO_Init+0x244>
 800d54e:	2307      	movs	r3, #7
 800d550:	e00a      	b.n	800d568 <HAL_GPIO_Init+0x244>
 800d552:	2305      	movs	r3, #5
 800d554:	e008      	b.n	800d568 <HAL_GPIO_Init+0x244>
 800d556:	2304      	movs	r3, #4
 800d558:	e006      	b.n	800d568 <HAL_GPIO_Init+0x244>
 800d55a:	2303      	movs	r3, #3
 800d55c:	e004      	b.n	800d568 <HAL_GPIO_Init+0x244>
 800d55e:	2302      	movs	r3, #2
 800d560:	e002      	b.n	800d568 <HAL_GPIO_Init+0x244>
 800d562:	2301      	movs	r3, #1
 800d564:	e000      	b.n	800d568 <HAL_GPIO_Init+0x244>
 800d566:	2300      	movs	r3, #0
 800d568:	697a      	ldr	r2, [r7, #20]
 800d56a:	f002 0203 	and.w	r2, r2, #3
 800d56e:	0092      	lsls	r2, r2, #2
 800d570:	4093      	lsls	r3, r2
 800d572:	693a      	ldr	r2, [r7, #16]
 800d574:	4313      	orrs	r3, r2
 800d576:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800d578:	4937      	ldr	r1, [pc, #220]	@ (800d658 <HAL_GPIO_Init+0x334>)
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	089b      	lsrs	r3, r3, #2
 800d57e:	3302      	adds	r3, #2
 800d580:	693a      	ldr	r2, [r7, #16]
 800d582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d586:	4b3b      	ldr	r3, [pc, #236]	@ (800d674 <HAL_GPIO_Init+0x350>)
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	43db      	mvns	r3, r3
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	4013      	ands	r3, r2
 800d594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d003      	beq.n	800d5aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800d5a2:	693a      	ldr	r2, [r7, #16]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800d5aa:	4a32      	ldr	r2, [pc, #200]	@ (800d674 <HAL_GPIO_Init+0x350>)
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800d5b0:	4b30      	ldr	r3, [pc, #192]	@ (800d674 <HAL_GPIO_Init+0x350>)
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	43db      	mvns	r3, r3
 800d5ba:	693a      	ldr	r2, [r7, #16]
 800d5bc:	4013      	ands	r3, r2
 800d5be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d003      	beq.n	800d5d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800d5cc:	693a      	ldr	r2, [r7, #16]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800d5d4:	4a27      	ldr	r2, [pc, #156]	@ (800d674 <HAL_GPIO_Init+0x350>)
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800d5da:	4b26      	ldr	r3, [pc, #152]	@ (800d674 <HAL_GPIO_Init+0x350>)
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	43db      	mvns	r3, r3
 800d5e4:	693a      	ldr	r2, [r7, #16]
 800d5e6:	4013      	ands	r3, r2
 800d5e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d003      	beq.n	800d5fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800d5f6:	693a      	ldr	r2, [r7, #16]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800d5fe:	4a1d      	ldr	r2, [pc, #116]	@ (800d674 <HAL_GPIO_Init+0x350>)
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800d604:	4b1b      	ldr	r3, [pc, #108]	@ (800d674 <HAL_GPIO_Init+0x350>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	43db      	mvns	r3, r3
 800d60e:	693a      	ldr	r2, [r7, #16]
 800d610:	4013      	ands	r3, r2
 800d612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d003      	beq.n	800d628 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800d620:	693a      	ldr	r2, [r7, #16]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	4313      	orrs	r3, r2
 800d626:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800d628:	4a12      	ldr	r2, [pc, #72]	@ (800d674 <HAL_GPIO_Init+0x350>)
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	3301      	adds	r3, #1
 800d632:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	fa22 f303 	lsr.w	r3, r2, r3
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f47f ae78 	bne.w	800d334 <HAL_GPIO_Init+0x10>
  }
}
 800d644:	bf00      	nop
 800d646:	bf00      	nop
 800d648:	371c      	adds	r7, #28
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	40021000 	.word	0x40021000
 800d658:	40010000 	.word	0x40010000
 800d65c:	48000400 	.word	0x48000400
 800d660:	48000800 	.word	0x48000800
 800d664:	48000c00 	.word	0x48000c00
 800d668:	48001000 	.word	0x48001000
 800d66c:	48001400 	.word	0x48001400
 800d670:	48001800 	.word	0x48001800
 800d674:	40010400 	.word	0x40010400

0800d678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	460b      	mov	r3, r1
 800d682:	807b      	strh	r3, [r7, #2]
 800d684:	4613      	mov	r3, r2
 800d686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d688:	787b      	ldrb	r3, [r7, #1]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d003      	beq.n	800d696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d68e:	887a      	ldrh	r2, [r7, #2]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800d694:	e002      	b.n	800d69c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d696:	887a      	ldrh	r2, [r7, #2]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d69c:	bf00      	nop
 800d69e:	370c      	adds	r7, #12
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr

0800d6a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d101      	bne.n	800d6ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e08d      	b.n	800d7d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d106      	bne.n	800d6d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7f9 f900 	bl	80068d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2224      	movs	r2, #36	@ 0x24
 800d6d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f022 0201 	bic.w	r2, r2, #1
 800d6ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	685a      	ldr	r2, [r3, #4]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800d6f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	689a      	ldr	r2, [r3, #8]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d708:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	2b01      	cmp	r3, #1
 800d710:	d107      	bne.n	800d722 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	689a      	ldr	r2, [r3, #8]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d71e:	609a      	str	r2, [r3, #8]
 800d720:	e006      	b.n	800d730 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	689a      	ldr	r2, [r3, #8]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800d72e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	2b02      	cmp	r3, #2
 800d736:	d108      	bne.n	800d74a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	685a      	ldr	r2, [r3, #4]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d746:	605a      	str	r2, [r3, #4]
 800d748:	e007      	b.n	800d75a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	685a      	ldr	r2, [r3, #4]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d758:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	6812      	ldr	r2, [r2, #0]
 800d764:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d76c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	68da      	ldr	r2, [r3, #12]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d77c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	691a      	ldr	r2, [r3, #16]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	695b      	ldr	r3, [r3, #20]
 800d786:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	699b      	ldr	r3, [r3, #24]
 800d78e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	430a      	orrs	r2, r1
 800d796:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	69d9      	ldr	r1, [r3, #28]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6a1a      	ldr	r2, [r3, #32]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	430a      	orrs	r2, r1
 800d7a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f042 0201 	orr.w	r2, r2, #1
 800d7b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2220      	movs	r2, #32
 800d7c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800d7d4:	2300      	movs	r3, #0
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
	...

0800d7e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b088      	sub	sp, #32
 800d7e4:	af02      	add	r7, sp, #8
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	607a      	str	r2, [r7, #4]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	817b      	strh	r3, [r7, #10]
 800d7f0:	4613      	mov	r3, r2
 800d7f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	2b20      	cmp	r3, #32
 800d7fe:	f040 80fd 	bne.w	800d9fc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d101      	bne.n	800d810 <HAL_I2C_Master_Transmit+0x30>
 800d80c:	2302      	movs	r3, #2
 800d80e:	e0f6      	b.n	800d9fe <HAL_I2C_Master_Transmit+0x21e>
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2201      	movs	r2, #1
 800d814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d818:	f7fc fd80 	bl	800a31c <HAL_GetTick>
 800d81c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	9300      	str	r3, [sp, #0]
 800d822:	2319      	movs	r3, #25
 800d824:	2201      	movs	r2, #1
 800d826:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d82a:	68f8      	ldr	r0, [r7, #12]
 800d82c:	f000 fa0a 	bl	800dc44 <I2C_WaitOnFlagUntilTimeout>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d001      	beq.n	800d83a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800d836:	2301      	movs	r3, #1
 800d838:	e0e1      	b.n	800d9fe <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2221      	movs	r2, #33	@ 0x21
 800d83e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2210      	movs	r2, #16
 800d846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2200      	movs	r2, #0
 800d84e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	893a      	ldrh	r2, [r7, #8]
 800d85a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2200      	movs	r2, #0
 800d860:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d866:	b29b      	uxth	r3, r3
 800d868:	2bff      	cmp	r3, #255	@ 0xff
 800d86a:	d906      	bls.n	800d87a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	22ff      	movs	r2, #255	@ 0xff
 800d870:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800d872:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d876:	617b      	str	r3, [r7, #20]
 800d878:	e007      	b.n	800d88a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d87e:	b29a      	uxth	r2, r3
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800d884:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d888:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d024      	beq.n	800d8dc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d896:	781a      	ldrb	r2, [r3, #0]
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8a2:	1c5a      	adds	r2, r3, #1
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	b29a      	uxth	r2, r3
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	b29a      	uxth	r2, r3
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	b2da      	uxtb	r2, r3
 800d8cc:	8979      	ldrh	r1, [r7, #10]
 800d8ce:	4b4e      	ldr	r3, [pc, #312]	@ (800da08 <HAL_I2C_Master_Transmit+0x228>)
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f000 fc05 	bl	800e0e4 <I2C_TransferConfig>
 800d8da:	e066      	b.n	800d9aa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8e0:	b2da      	uxtb	r2, r3
 800d8e2:	8979      	ldrh	r1, [r7, #10]
 800d8e4:	4b48      	ldr	r3, [pc, #288]	@ (800da08 <HAL_I2C_Master_Transmit+0x228>)
 800d8e6:	9300      	str	r3, [sp, #0]
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	f000 fbfa 	bl	800e0e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800d8f0:	e05b      	b.n	800d9aa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d8f2:	693a      	ldr	r2, [r7, #16]
 800d8f4:	6a39      	ldr	r1, [r7, #32]
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f000 f9fd 	bl	800dcf6 <I2C_WaitOnTXISFlagUntilTimeout>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d001      	beq.n	800d906 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800d902:	2301      	movs	r3, #1
 800d904:	e07b      	b.n	800d9fe <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d90a:	781a      	ldrb	r2, [r3, #0]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d916:	1c5a      	adds	r2, r3, #1
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d920:	b29b      	uxth	r3, r3
 800d922:	3b01      	subs	r3, #1
 800d924:	b29a      	uxth	r2, r3
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d92e:	3b01      	subs	r3, #1
 800d930:	b29a      	uxth	r2, r3
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d034      	beq.n	800d9aa <HAL_I2C_Master_Transmit+0x1ca>
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d944:	2b00      	cmp	r3, #0
 800d946:	d130      	bne.n	800d9aa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	9300      	str	r3, [sp, #0]
 800d94c:	6a3b      	ldr	r3, [r7, #32]
 800d94e:	2200      	movs	r2, #0
 800d950:	2180      	movs	r1, #128	@ 0x80
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	f000 f976 	bl	800dc44 <I2C_WaitOnFlagUntilTimeout>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d001      	beq.n	800d962 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800d95e:	2301      	movs	r3, #1
 800d960:	e04d      	b.n	800d9fe <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d966:	b29b      	uxth	r3, r3
 800d968:	2bff      	cmp	r3, #255	@ 0xff
 800d96a:	d90e      	bls.n	800d98a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	22ff      	movs	r2, #255	@ 0xff
 800d970:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d976:	b2da      	uxtb	r2, r3
 800d978:	8979      	ldrh	r1, [r7, #10]
 800d97a:	2300      	movs	r3, #0
 800d97c:	9300      	str	r3, [sp, #0]
 800d97e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d982:	68f8      	ldr	r0, [r7, #12]
 800d984:	f000 fbae 	bl	800e0e4 <I2C_TransferConfig>
 800d988:	e00f      	b.n	800d9aa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d98e:	b29a      	uxth	r2, r3
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d998:	b2da      	uxtb	r2, r3
 800d99a:	8979      	ldrh	r1, [r7, #10]
 800d99c:	2300      	movs	r3, #0
 800d99e:	9300      	str	r3, [sp, #0]
 800d9a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d9a4:	68f8      	ldr	r0, [r7, #12]
 800d9a6:	f000 fb9d 	bl	800e0e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9ae:	b29b      	uxth	r3, r3
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d19e      	bne.n	800d8f2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d9b4:	693a      	ldr	r2, [r7, #16]
 800d9b6:	6a39      	ldr	r1, [r7, #32]
 800d9b8:	68f8      	ldr	r0, [r7, #12]
 800d9ba:	f000 f9e3 	bl	800dd84 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d001      	beq.n	800d9c8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	e01a      	b.n	800d9fe <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2220      	movs	r2, #32
 800d9ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	6859      	ldr	r1, [r3, #4]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	4b0c      	ldr	r3, [pc, #48]	@ (800da0c <HAL_I2C_Master_Transmit+0x22c>)
 800d9dc:	400b      	ands	r3, r1
 800d9de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2220      	movs	r2, #32
 800d9e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	e000      	b.n	800d9fe <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800d9fc:	2302      	movs	r3, #2
  }
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3718      	adds	r7, #24
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop
 800da08:	80002000 	.word	0x80002000
 800da0c:	fe00e800 	.word	0xfe00e800

0800da10 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b088      	sub	sp, #32
 800da14:	af02      	add	r7, sp, #8
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	607a      	str	r2, [r7, #4]
 800da1a:	461a      	mov	r2, r3
 800da1c:	460b      	mov	r3, r1
 800da1e:	817b      	strh	r3, [r7, #10]
 800da20:	4613      	mov	r3, r2
 800da22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	2b20      	cmp	r3, #32
 800da2e:	f040 80db 	bne.w	800dbe8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d101      	bne.n	800da40 <HAL_I2C_Master_Receive+0x30>
 800da3c:	2302      	movs	r3, #2
 800da3e:	e0d4      	b.n	800dbea <HAL_I2C_Master_Receive+0x1da>
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800da48:	f7fc fc68 	bl	800a31c <HAL_GetTick>
 800da4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	9300      	str	r3, [sp, #0]
 800da52:	2319      	movs	r3, #25
 800da54:	2201      	movs	r2, #1
 800da56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	f000 f8f2 	bl	800dc44 <I2C_WaitOnFlagUntilTimeout>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	d001      	beq.n	800da6a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800da66:	2301      	movs	r3, #1
 800da68:	e0bf      	b.n	800dbea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2222      	movs	r2, #34	@ 0x22
 800da6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2210      	movs	r2, #16
 800da76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2200      	movs	r2, #0
 800da7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	893a      	ldrh	r2, [r7, #8]
 800da8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2200      	movs	r2, #0
 800da90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da96:	b29b      	uxth	r3, r3
 800da98:	2bff      	cmp	r3, #255	@ 0xff
 800da9a:	d90e      	bls.n	800daba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2201      	movs	r2, #1
 800daa0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daa6:	b2da      	uxtb	r2, r3
 800daa8:	8979      	ldrh	r1, [r7, #10]
 800daaa:	4b52      	ldr	r3, [pc, #328]	@ (800dbf4 <HAL_I2C_Master_Receive+0x1e4>)
 800daac:	9300      	str	r3, [sp, #0]
 800daae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	f000 fb16 	bl	800e0e4 <I2C_TransferConfig>
 800dab8:	e06d      	b.n	800db96 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	8979      	ldrh	r1, [r7, #10]
 800dacc:	4b49      	ldr	r3, [pc, #292]	@ (800dbf4 <HAL_I2C_Master_Receive+0x1e4>)
 800dace:	9300      	str	r3, [sp, #0]
 800dad0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f000 fb05 	bl	800e0e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800dada:	e05c      	b.n	800db96 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dadc:	697a      	ldr	r2, [r7, #20]
 800dade:	6a39      	ldr	r1, [r7, #32]
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f000 f993 	bl	800de0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800daec:	2301      	movs	r3, #1
 800daee:	e07c      	b.n	800dbea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dafa:	b2d2      	uxtb	r2, r2
 800dafc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db02:	1c5a      	adds	r2, r3, #1
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db0c:	3b01      	subs	r3, #1
 800db0e:	b29a      	uxth	r2, r3
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db18:	b29b      	uxth	r3, r3
 800db1a:	3b01      	subs	r3, #1
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db26:	b29b      	uxth	r3, r3
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d034      	beq.n	800db96 <HAL_I2C_Master_Receive+0x186>
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db30:	2b00      	cmp	r3, #0
 800db32:	d130      	bne.n	800db96 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	9300      	str	r3, [sp, #0]
 800db38:	6a3b      	ldr	r3, [r7, #32]
 800db3a:	2200      	movs	r2, #0
 800db3c:	2180      	movs	r1, #128	@ 0x80
 800db3e:	68f8      	ldr	r0, [r7, #12]
 800db40:	f000 f880 	bl	800dc44 <I2C_WaitOnFlagUntilTimeout>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d001      	beq.n	800db4e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800db4a:	2301      	movs	r3, #1
 800db4c:	e04d      	b.n	800dbea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db52:	b29b      	uxth	r3, r3
 800db54:	2bff      	cmp	r3, #255	@ 0xff
 800db56:	d90e      	bls.n	800db76 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	22ff      	movs	r2, #255	@ 0xff
 800db5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db62:	b2da      	uxtb	r2, r3
 800db64:	8979      	ldrh	r1, [r7, #10]
 800db66:	2300      	movs	r3, #0
 800db68:	9300      	str	r3, [sp, #0]
 800db6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f000 fab8 	bl	800e0e4 <I2C_TransferConfig>
 800db74:	e00f      	b.n	800db96 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db7a:	b29a      	uxth	r2, r3
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db84:	b2da      	uxtb	r2, r3
 800db86:	8979      	ldrh	r1, [r7, #10]
 800db88:	2300      	movs	r3, #0
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f000 faa7 	bl	800e0e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d19d      	bne.n	800dadc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dba0:	697a      	ldr	r2, [r7, #20]
 800dba2:	6a39      	ldr	r1, [r7, #32]
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	f000 f8ed 	bl	800dd84 <I2C_WaitOnSTOPFlagUntilTimeout>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d001      	beq.n	800dbb4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e01a      	b.n	800dbea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2220      	movs	r2, #32
 800dbba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	6859      	ldr	r1, [r3, #4]
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	4b0c      	ldr	r3, [pc, #48]	@ (800dbf8 <HAL_I2C_Master_Receive+0x1e8>)
 800dbc8:	400b      	ands	r3, r1
 800dbca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2220      	movs	r2, #32
 800dbd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	e000      	b.n	800dbea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800dbe8:	2302      	movs	r3, #2
  }
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3718      	adds	r7, #24
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	80002400 	.word	0x80002400
 800dbf8:	fe00e800 	.word	0xfe00e800

0800dbfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b083      	sub	sp, #12
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	699b      	ldr	r3, [r3, #24]
 800dc0a:	f003 0302 	and.w	r3, r3, #2
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d103      	bne.n	800dc1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2200      	movs	r2, #0
 800dc18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	699b      	ldr	r3, [r3, #24]
 800dc20:	f003 0301 	and.w	r3, r3, #1
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d007      	beq.n	800dc38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	699a      	ldr	r2, [r3, #24]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f042 0201 	orr.w	r2, r2, #1
 800dc36:	619a      	str	r2, [r3, #24]
  }
}
 800dc38:	bf00      	nop
 800dc3a:	370c      	adds	r7, #12
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr

0800dc44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	603b      	str	r3, [r7, #0]
 800dc50:	4613      	mov	r3, r2
 800dc52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dc54:	e03b      	b.n	800dcce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dc56:	69ba      	ldr	r2, [r7, #24]
 800dc58:	6839      	ldr	r1, [r7, #0]
 800dc5a:	68f8      	ldr	r0, [r7, #12]
 800dc5c:	f000 f962 	bl	800df24 <I2C_IsErrorOccurred>
 800dc60:	4603      	mov	r3, r0
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d001      	beq.n	800dc6a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800dc66:	2301      	movs	r3, #1
 800dc68:	e041      	b.n	800dcee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc70:	d02d      	beq.n	800dcce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc72:	f7fc fb53 	bl	800a31c <HAL_GetTick>
 800dc76:	4602      	mov	r2, r0
 800dc78:	69bb      	ldr	r3, [r7, #24]
 800dc7a:	1ad3      	subs	r3, r2, r3
 800dc7c:	683a      	ldr	r2, [r7, #0]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d302      	bcc.n	800dc88 <I2C_WaitOnFlagUntilTimeout+0x44>
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d122      	bne.n	800dcce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	699a      	ldr	r2, [r3, #24]
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	4013      	ands	r3, r2
 800dc92:	68ba      	ldr	r2, [r7, #8]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	bf0c      	ite	eq
 800dc98:	2301      	moveq	r3, #1
 800dc9a:	2300      	movne	r3, #0
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	461a      	mov	r2, r3
 800dca0:	79fb      	ldrb	r3, [r7, #7]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d113      	bne.n	800dcce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcaa:	f043 0220 	orr.w	r2, r3, #32
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2220      	movs	r2, #32
 800dcb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800dcca:	2301      	movs	r3, #1
 800dccc:	e00f      	b.n	800dcee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	699a      	ldr	r2, [r3, #24]
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	4013      	ands	r3, r2
 800dcd8:	68ba      	ldr	r2, [r7, #8]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	bf0c      	ite	eq
 800dcde:	2301      	moveq	r3, #1
 800dce0:	2300      	movne	r3, #0
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	461a      	mov	r2, r3
 800dce6:	79fb      	ldrb	r3, [r7, #7]
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d0b4      	beq.n	800dc56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dcec:	2300      	movs	r3, #0
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3710      	adds	r7, #16
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800dcf6:	b580      	push	{r7, lr}
 800dcf8:	b084      	sub	sp, #16
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	60f8      	str	r0, [r7, #12]
 800dcfe:	60b9      	str	r1, [r7, #8]
 800dd00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800dd02:	e033      	b.n	800dd6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	68b9      	ldr	r1, [r7, #8]
 800dd08:	68f8      	ldr	r0, [r7, #12]
 800dd0a:	f000 f90b 	bl	800df24 <I2C_IsErrorOccurred>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d001      	beq.n	800dd18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800dd14:	2301      	movs	r3, #1
 800dd16:	e031      	b.n	800dd7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd1e:	d025      	beq.n	800dd6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd20:	f7fc fafc 	bl	800a31c <HAL_GetTick>
 800dd24:	4602      	mov	r2, r0
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	1ad3      	subs	r3, r2, r3
 800dd2a:	68ba      	ldr	r2, [r7, #8]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d302      	bcc.n	800dd36 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d11a      	bne.n	800dd6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	699b      	ldr	r3, [r3, #24]
 800dd3c:	f003 0302 	and.w	r3, r3, #2
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	d013      	beq.n	800dd6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd48:	f043 0220 	orr.w	r2, r3, #32
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2220      	movs	r2, #32
 800dd54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2200      	movs	r2, #0
 800dd64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	e007      	b.n	800dd7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	699b      	ldr	r3, [r3, #24]
 800dd72:	f003 0302 	and.w	r3, r3, #2
 800dd76:	2b02      	cmp	r3, #2
 800dd78:	d1c4      	bne.n	800dd04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800dd7a:	2300      	movs	r3, #0
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3710      	adds	r7, #16
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dd90:	e02f      	b.n	800ddf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	68b9      	ldr	r1, [r7, #8]
 800dd96:	68f8      	ldr	r0, [r7, #12]
 800dd98:	f000 f8c4 	bl	800df24 <I2C_IsErrorOccurred>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800dda2:	2301      	movs	r3, #1
 800dda4:	e02d      	b.n	800de02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dda6:	f7fc fab9 	bl	800a31c <HAL_GetTick>
 800ddaa:	4602      	mov	r2, r0
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	1ad3      	subs	r3, r2, r3
 800ddb0:	68ba      	ldr	r2, [r7, #8]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d302      	bcc.n	800ddbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d11a      	bne.n	800ddf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	699b      	ldr	r3, [r3, #24]
 800ddc2:	f003 0320 	and.w	r3, r3, #32
 800ddc6:	2b20      	cmp	r3, #32
 800ddc8:	d013      	beq.n	800ddf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddce:	f043 0220 	orr.w	r2, r3, #32
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2220      	movs	r2, #32
 800ddda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2200      	movs	r2, #0
 800dde2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e007      	b.n	800de02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	699b      	ldr	r3, [r3, #24]
 800ddf8:	f003 0320 	and.w	r3, r3, #32
 800ddfc:	2b20      	cmp	r3, #32
 800ddfe:	d1c8      	bne.n	800dd92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800de00:	2300      	movs	r3, #0
}
 800de02:	4618      	mov	r0, r3
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
	...

0800de0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b086      	sub	sp, #24
 800de10:	af00      	add	r7, sp, #0
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	60b9      	str	r1, [r7, #8]
 800de16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800de18:	2300      	movs	r3, #0
 800de1a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800de1c:	e071      	b.n	800df02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800de1e:	687a      	ldr	r2, [r7, #4]
 800de20:	68b9      	ldr	r1, [r7, #8]
 800de22:	68f8      	ldr	r0, [r7, #12]
 800de24:	f000 f87e 	bl	800df24 <I2C_IsErrorOccurred>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d001      	beq.n	800de32 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800de2e:	2301      	movs	r3, #1
 800de30:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	699b      	ldr	r3, [r3, #24]
 800de38:	f003 0320 	and.w	r3, r3, #32
 800de3c:	2b20      	cmp	r3, #32
 800de3e:	d13b      	bne.n	800deb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800de40:	7dfb      	ldrb	r3, [r7, #23]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d138      	bne.n	800deb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	699b      	ldr	r3, [r3, #24]
 800de4c:	f003 0304 	and.w	r3, r3, #4
 800de50:	2b04      	cmp	r3, #4
 800de52:	d105      	bne.n	800de60 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d001      	beq.n	800de60 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800de5c:	2300      	movs	r3, #0
 800de5e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	699b      	ldr	r3, [r3, #24]
 800de66:	f003 0310 	and.w	r3, r3, #16
 800de6a:	2b10      	cmp	r3, #16
 800de6c:	d121      	bne.n	800deb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2210      	movs	r2, #16
 800de74:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2204      	movs	r2, #4
 800de7a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2220      	movs	r2, #32
 800de82:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	6859      	ldr	r1, [r3, #4]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	4b24      	ldr	r3, [pc, #144]	@ (800df20 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800de90:	400b      	ands	r3, r1
 800de92:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2220      	movs	r2, #32
 800de98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2200      	movs	r2, #0
 800dea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2200      	movs	r2, #0
 800dea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800deac:	2301      	movs	r3, #1
 800deae:	75fb      	strb	r3, [r7, #23]
 800deb0:	e002      	b.n	800deb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2200      	movs	r2, #0
 800deb6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800deb8:	f7fc fa30 	bl	800a31c <HAL_GetTick>
 800debc:	4602      	mov	r2, r0
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	1ad3      	subs	r3, r2, r3
 800dec2:	68ba      	ldr	r2, [r7, #8]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d302      	bcc.n	800dece <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d119      	bne.n	800df02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800dece:	7dfb      	ldrb	r3, [r7, #23]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d116      	bne.n	800df02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	699b      	ldr	r3, [r3, #24]
 800deda:	f003 0304 	and.w	r3, r3, #4
 800dede:	2b04      	cmp	r3, #4
 800dee0:	d00f      	beq.n	800df02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dee6:	f043 0220 	orr.w	r2, r3, #32
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2220      	movs	r2, #32
 800def2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2200      	movs	r2, #0
 800defa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800defe:	2301      	movs	r3, #1
 800df00:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	699b      	ldr	r3, [r3, #24]
 800df08:	f003 0304 	and.w	r3, r3, #4
 800df0c:	2b04      	cmp	r3, #4
 800df0e:	d002      	beq.n	800df16 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800df10:	7dfb      	ldrb	r3, [r7, #23]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d083      	beq.n	800de1e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800df16:	7dfb      	ldrb	r3, [r7, #23]
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3718      	adds	r7, #24
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	fe00e800 	.word	0xfe00e800

0800df24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b08a      	sub	sp, #40	@ 0x28
 800df28:	af00      	add	r7, sp, #0
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df30:	2300      	movs	r3, #0
 800df32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	699b      	ldr	r3, [r3, #24]
 800df3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800df3e:	2300      	movs	r3, #0
 800df40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	f003 0310 	and.w	r3, r3, #16
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d068      	beq.n	800e022 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2210      	movs	r2, #16
 800df56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800df58:	e049      	b.n	800dfee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df60:	d045      	beq.n	800dfee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800df62:	f7fc f9db 	bl	800a31c <HAL_GetTick>
 800df66:	4602      	mov	r2, r0
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	1ad3      	subs	r3, r2, r3
 800df6c:	68ba      	ldr	r2, [r7, #8]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d302      	bcc.n	800df78 <I2C_IsErrorOccurred+0x54>
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d13a      	bne.n	800dfee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800df82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800df8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	699b      	ldr	r3, [r3, #24]
 800df92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800df96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800df9a:	d121      	bne.n	800dfe0 <I2C_IsErrorOccurred+0xbc>
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dfa2:	d01d      	beq.n	800dfe0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800dfa4:	7cfb      	ldrb	r3, [r7, #19]
 800dfa6:	2b20      	cmp	r3, #32
 800dfa8:	d01a      	beq.n	800dfe0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	685a      	ldr	r2, [r3, #4]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dfb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800dfba:	f7fc f9af 	bl	800a31c <HAL_GetTick>
 800dfbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dfc0:	e00e      	b.n	800dfe0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800dfc2:	f7fc f9ab 	bl	800a31c <HAL_GetTick>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	69fb      	ldr	r3, [r7, #28]
 800dfca:	1ad3      	subs	r3, r2, r3
 800dfcc:	2b19      	cmp	r3, #25
 800dfce:	d907      	bls.n	800dfe0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800dfd0:	6a3b      	ldr	r3, [r7, #32]
 800dfd2:	f043 0320 	orr.w	r3, r3, #32
 800dfd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800dfde:	e006      	b.n	800dfee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	699b      	ldr	r3, [r3, #24]
 800dfe6:	f003 0320 	and.w	r3, r3, #32
 800dfea:	2b20      	cmp	r3, #32
 800dfec:	d1e9      	bne.n	800dfc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	699b      	ldr	r3, [r3, #24]
 800dff4:	f003 0320 	and.w	r3, r3, #32
 800dff8:	2b20      	cmp	r3, #32
 800dffa:	d003      	beq.n	800e004 <I2C_IsErrorOccurred+0xe0>
 800dffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e000:	2b00      	cmp	r3, #0
 800e002:	d0aa      	beq.n	800df5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e004:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d103      	bne.n	800e014 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2220      	movs	r2, #32
 800e012:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e014:	6a3b      	ldr	r3, [r7, #32]
 800e016:	f043 0304 	orr.w	r3, r3, #4
 800e01a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e01c:	2301      	movs	r3, #1
 800e01e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	699b      	ldr	r3, [r3, #24]
 800e028:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e030:	2b00      	cmp	r3, #0
 800e032:	d00b      	beq.n	800e04c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e034:	6a3b      	ldr	r3, [r7, #32]
 800e036:	f043 0301 	orr.w	r3, r3, #1
 800e03a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e044:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e046:	2301      	movs	r3, #1
 800e048:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e052:	2b00      	cmp	r3, #0
 800e054:	d00b      	beq.n	800e06e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e056:	6a3b      	ldr	r3, [r7, #32]
 800e058:	f043 0308 	orr.w	r3, r3, #8
 800e05c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e066:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e068:	2301      	movs	r3, #1
 800e06a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e074:	2b00      	cmp	r3, #0
 800e076:	d00b      	beq.n	800e090 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e078:	6a3b      	ldr	r3, [r7, #32]
 800e07a:	f043 0302 	orr.w	r3, r3, #2
 800e07e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e088:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e08a:	2301      	movs	r3, #1
 800e08c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800e090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e094:	2b00      	cmp	r3, #0
 800e096:	d01c      	beq.n	800e0d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e098:	68f8      	ldr	r0, [r7, #12]
 800e09a:	f7ff fdaf 	bl	800dbfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	6859      	ldr	r1, [r3, #4]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	4b0d      	ldr	r3, [pc, #52]	@ (800e0e0 <I2C_IsErrorOccurred+0x1bc>)
 800e0aa:	400b      	ands	r3, r1
 800e0ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e0b2:	6a3b      	ldr	r3, [r7, #32]
 800e0b4:	431a      	orrs	r2, r3
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	2220      	movs	r2, #32
 800e0be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800e0d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3728      	adds	r7, #40	@ 0x28
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
 800e0de:	bf00      	nop
 800e0e0:	fe00e800 	.word	0xfe00e800

0800e0e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b087      	sub	sp, #28
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	607b      	str	r3, [r7, #4]
 800e0ee:	460b      	mov	r3, r1
 800e0f0:	817b      	strh	r3, [r7, #10]
 800e0f2:	4613      	mov	r3, r2
 800e0f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e0f6:	897b      	ldrh	r3, [r7, #10]
 800e0f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e0fc:	7a7b      	ldrb	r3, [r7, #9]
 800e0fe:	041b      	lsls	r3, r3, #16
 800e100:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e104:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e10a:	6a3b      	ldr	r3, [r7, #32]
 800e10c:	4313      	orrs	r3, r2
 800e10e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e112:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	685a      	ldr	r2, [r3, #4]
 800e11a:	6a3b      	ldr	r3, [r7, #32]
 800e11c:	0d5b      	lsrs	r3, r3, #21
 800e11e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800e122:	4b08      	ldr	r3, [pc, #32]	@ (800e144 <I2C_TransferConfig+0x60>)
 800e124:	430b      	orrs	r3, r1
 800e126:	43db      	mvns	r3, r3
 800e128:	ea02 0103 	and.w	r1, r2, r3
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	697a      	ldr	r2, [r7, #20]
 800e132:	430a      	orrs	r2, r1
 800e134:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e136:	bf00      	nop
 800e138:	371c      	adds	r7, #28
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr
 800e142:	bf00      	nop
 800e144:	03ff63ff 	.word	0x03ff63ff

0800e148 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	2b20      	cmp	r3, #32
 800e15c:	d138      	bne.n	800e1d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e164:	2b01      	cmp	r3, #1
 800e166:	d101      	bne.n	800e16c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e168:	2302      	movs	r3, #2
 800e16a:	e032      	b.n	800e1d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2201      	movs	r2, #1
 800e170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2224      	movs	r2, #36	@ 0x24
 800e178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f022 0201 	bic.w	r2, r2, #1
 800e18a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e19a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	6819      	ldr	r1, [r3, #0]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	683a      	ldr	r2, [r7, #0]
 800e1a8:	430a      	orrs	r2, r1
 800e1aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	f042 0201 	orr.w	r2, r2, #1
 800e1ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2220      	movs	r2, #32
 800e1c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	e000      	b.n	800e1d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e1d0:	2302      	movs	r3, #2
  }
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	370c      	adds	r7, #12
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr

0800e1de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e1de:	b480      	push	{r7}
 800e1e0:	b085      	sub	sp, #20
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	6078      	str	r0, [r7, #4]
 800e1e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	2b20      	cmp	r3, #32
 800e1f2:	d139      	bne.n	800e268 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d101      	bne.n	800e202 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e1fe:	2302      	movs	r3, #2
 800e200:	e033      	b.n	800e26a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2201      	movs	r2, #1
 800e206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2224      	movs	r2, #36	@ 0x24
 800e20e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f022 0201 	bic.w	r2, r2, #1
 800e220:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e230:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	021b      	lsls	r3, r3, #8
 800e236:	68fa      	ldr	r2, [r7, #12]
 800e238:	4313      	orrs	r3, r2
 800e23a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	68fa      	ldr	r2, [r7, #12]
 800e242:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f042 0201 	orr.w	r2, r2, #1
 800e252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2220      	movs	r2, #32
 800e258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2200      	movs	r2, #0
 800e260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e264:	2300      	movs	r3, #0
 800e266:	e000      	b.n	800e26a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e268:	2302      	movs	r3, #2
  }
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3714      	adds	r7, #20
 800e26e:	46bd      	mov	sp, r7
 800e270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e274:	4770      	bx	lr
	...

0800e278 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800e278:	b480      	push	{r7}
 800e27a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800e27c:	4b04      	ldr	r3, [pc, #16]	@ (800e290 <HAL_PWREx_GetVoltageRange+0x18>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800e284:	4618      	mov	r0, r3
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr
 800e28e:	bf00      	nop
 800e290:	40007000 	.word	0x40007000

0800e294 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800e294:	b480      	push	{r7}
 800e296:	b085      	sub	sp, #20
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2a2:	d130      	bne.n	800e306 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800e2a4:	4b23      	ldr	r3, [pc, #140]	@ (800e334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e2ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2b0:	d038      	beq.n	800e324 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800e2b2:	4b20      	ldr	r3, [pc, #128]	@ (800e334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800e2ba:	4a1e      	ldr	r2, [pc, #120]	@ (800e334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e2bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e2c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800e2c2:	4b1d      	ldr	r3, [pc, #116]	@ (800e338 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	2232      	movs	r2, #50	@ 0x32
 800e2c8:	fb02 f303 	mul.w	r3, r2, r3
 800e2cc:	4a1b      	ldr	r2, [pc, #108]	@ (800e33c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800e2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e2d2:	0c9b      	lsrs	r3, r3, #18
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e2d8:	e002      	b.n	800e2e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	3b01      	subs	r3, #1
 800e2de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e2e0:	4b14      	ldr	r3, [pc, #80]	@ (800e334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e2e2:	695b      	ldr	r3, [r3, #20]
 800e2e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e2e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e2ec:	d102      	bne.n	800e2f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1f2      	bne.n	800e2da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800e2f4:	4b0f      	ldr	r3, [pc, #60]	@ (800e334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e2f6:	695b      	ldr	r3, [r3, #20]
 800e2f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e2fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e300:	d110      	bne.n	800e324 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800e302:	2303      	movs	r3, #3
 800e304:	e00f      	b.n	800e326 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800e306:	4b0b      	ldr	r3, [pc, #44]	@ (800e334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e30e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e312:	d007      	beq.n	800e324 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800e314:	4b07      	ldr	r3, [pc, #28]	@ (800e334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800e31c:	4a05      	ldr	r2, [pc, #20]	@ (800e334 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e31e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e322:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3714      	adds	r7, #20
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr
 800e332:	bf00      	nop
 800e334:	40007000 	.word	0x40007000
 800e338:	20000168 	.word	0x20000168
 800e33c:	431bde83 	.word	0x431bde83

0800e340 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b086      	sub	sp, #24
 800e344:	af02      	add	r7, sp, #8
 800e346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e348:	f7fb ffe8 	bl	800a31c <HAL_GetTick>
 800e34c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d101      	bne.n	800e358 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800e354:	2301      	movs	r3, #1
 800e356:	e063      	b.n	800e420 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	2b00      	cmp	r3, #0
 800e362:	d10b      	bne.n	800e37c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f7f8 fb0f 	bl	8006990 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800e372:	f241 3188 	movw	r1, #5000	@ 0x1388
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f000 fa68 	bl	800e84c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	689b      	ldr	r3, [r3, #8]
 800e38a:	3b01      	subs	r3, #1
 800e38c:	021a      	lsls	r2, r3, #8
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	430a      	orrs	r2, r1
 800e394:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e39a:	9300      	str	r3, [sp, #0]
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	2120      	movs	r1, #32
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 fa60 	bl	800e868 <QSPI_WaitFlagStateUntilTimeout>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800e3ac:	7afb      	ldrb	r3, [r7, #11]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d131      	bne.n	800e416 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e3bc:	f023 0310 	bic.w	r3, r3, #16
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	6852      	ldr	r2, [r2, #4]
 800e3c4:	0611      	lsls	r1, r2, #24
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	68d2      	ldr	r2, [r2, #12]
 800e3ca:	4311      	orrs	r1, r2
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	6812      	ldr	r2, [r2, #0]
 800e3d0:	430b      	orrs	r3, r1
 800e3d2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	685a      	ldr	r2, [r3, #4]
 800e3da:	4b13      	ldr	r3, [pc, #76]	@ (800e428 <HAL_QSPI_Init+0xe8>)
 800e3dc:	4013      	ands	r3, r2
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	6912      	ldr	r2, [r2, #16]
 800e3e2:	0411      	lsls	r1, r2, #16
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	6952      	ldr	r2, [r2, #20]
 800e3e8:	4311      	orrs	r1, r2
 800e3ea:	687a      	ldr	r2, [r7, #4]
 800e3ec:	6992      	ldr	r2, [r2, #24]
 800e3ee:	4311      	orrs	r1, r2
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	6812      	ldr	r2, [r2, #0]
 800e3f4:	430b      	orrs	r3, r1
 800e3f6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f042 0201 	orr.w	r2, r2, #1
 800e406:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2200      	movs	r2, #0
 800e40c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2201      	movs	r2, #1
 800e412:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2200      	movs	r2, #0
 800e41a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800e41e:	7afb      	ldrb	r3, [r7, #11]
}
 800e420:	4618      	mov	r0, r3
 800e422:	3710      	adds	r7, #16
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}
 800e428:	ffe0f8fe 	.word	0xffe0f8fe

0800e42c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b088      	sub	sp, #32
 800e430:	af02      	add	r7, sp, #8
 800e432:	60f8      	str	r0, [r7, #12]
 800e434:	60b9      	str	r1, [r7, #8]
 800e436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800e438:	f7fb ff70 	bl	800a31c <HAL_GetTick>
 800e43c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e444:	b2db      	uxtb	r3, r3
 800e446:	2b01      	cmp	r3, #1
 800e448:	d101      	bne.n	800e44e <HAL_QSPI_Command+0x22>
 800e44a:	2302      	movs	r3, #2
 800e44c:	e048      	b.n	800e4e0 <HAL_QSPI_Command+0xb4>
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2201      	movs	r2, #1
 800e452:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	2b01      	cmp	r3, #1
 800e460:	d137      	bne.n	800e4d2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2200      	movs	r2, #0
 800e466:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2202      	movs	r2, #2
 800e46c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	2200      	movs	r2, #0
 800e478:	2120      	movs	r1, #32
 800e47a:	68f8      	ldr	r0, [r7, #12]
 800e47c:	f000 f9f4 	bl	800e868 <QSPI_WaitFlagStateUntilTimeout>
 800e480:	4603      	mov	r3, r0
 800e482:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800e484:	7dfb      	ldrb	r3, [r7, #23]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d125      	bne.n	800e4d6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e48a:	2200      	movs	r2, #0
 800e48c:	68b9      	ldr	r1, [r7, #8]
 800e48e:	68f8      	ldr	r0, [r7, #12]
 800e490:	f000 fa21 	bl	800e8d6 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d115      	bne.n	800e4c8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	9300      	str	r3, [sp, #0]
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	2102      	movs	r1, #2
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f000 f9de 	bl	800e868 <QSPI_WaitFlagStateUntilTimeout>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800e4b0:	7dfb      	ldrb	r3, [r7, #23]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d10f      	bne.n	800e4d6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2202      	movs	r2, #2
 800e4bc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2201      	movs	r2, #1
 800e4c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e4c6:	e006      	b.n	800e4d6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e4d0:	e001      	b.n	800e4d6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800e4d2:	2302      	movs	r3, #2
 800e4d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800e4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3718      	adds	r7, #24
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b08a      	sub	sp, #40	@ 0x28
 800e4ec:	af02      	add	r7, sp, #8
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e4f8:	f7fb ff10 	bl	800a31c <HAL_GetTick>
 800e4fc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	3320      	adds	r3, #32
 800e504:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d101      	bne.n	800e516 <HAL_QSPI_Transmit+0x2e>
 800e512:	2302      	movs	r3, #2
 800e514:	e07b      	b.n	800e60e <HAL_QSPI_Transmit+0x126>
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	2201      	movs	r2, #1
 800e51a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800e524:	b2db      	uxtb	r3, r3
 800e526:	2b01      	cmp	r3, #1
 800e528:	d16a      	bne.n	800e600 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2200      	movs	r2, #0
 800e52e:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d05b      	beq.n	800e5ee <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	2212      	movs	r2, #18
 800e53a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	1c5a      	adds	r2, r3, #1
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	691b      	ldr	r3, [r3, #16]
 800e550:	1c5a      	adds	r2, r3, #1
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	68ba      	ldr	r2, [r7, #8]
 800e55a:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	695a      	ldr	r2, [r3, #20]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800e56a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800e56c:	e01b      	b.n	800e5a6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	9300      	str	r3, [sp, #0]
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	2201      	movs	r2, #1
 800e576:	2104      	movs	r1, #4
 800e578:	68f8      	ldr	r0, [r7, #12]
 800e57a:	f000 f975 	bl	800e868 <QSPI_WaitFlagStateUntilTimeout>
 800e57e:	4603      	mov	r3, r0
 800e580:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800e582:	7ffb      	ldrb	r3, [r7, #31]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d113      	bne.n	800e5b0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	69db      	ldr	r3, [r3, #28]
 800e58c:	781a      	ldrb	r2, [r3, #0]
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	69db      	ldr	r3, [r3, #28]
 800e596:	1c5a      	adds	r2, r3, #1
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5a0:	1e5a      	subs	r2, r3, #1
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d1df      	bne.n	800e56e <HAL_QSPI_Transmit+0x86>
 800e5ae:	e000      	b.n	800e5b2 <HAL_QSPI_Transmit+0xca>
          break;
 800e5b0:	bf00      	nop
      }

      if (status == HAL_OK)
 800e5b2:	7ffb      	ldrb	r3, [r7, #31]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d115      	bne.n	800e5e4 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	9300      	str	r3, [sp, #0]
 800e5bc:	69bb      	ldr	r3, [r7, #24]
 800e5be:	2201      	movs	r2, #1
 800e5c0:	2102      	movs	r1, #2
 800e5c2:	68f8      	ldr	r0, [r7, #12]
 800e5c4:	f000 f950 	bl	800e868 <QSPI_WaitFlagStateUntilTimeout>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800e5cc:	7ffb      	ldrb	r3, [r7, #31]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d108      	bne.n	800e5e4 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	2202      	movs	r2, #2
 800e5d8:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800e5da:	68f8      	ldr	r0, [r7, #12]
 800e5dc:	f000 f8bd 	bl	800e75a <HAL_QSPI_Abort>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e5ec:	e00a      	b.n	800e604 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5f2:	f043 0208 	orr.w	r2, r3, #8
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	77fb      	strb	r3, [r7, #31]
 800e5fe:	e001      	b.n	800e604 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e600:	2302      	movs	r3, #2
 800e602:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2200      	movs	r2, #0
 800e608:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800e60c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3720      	adds	r7, #32
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}

0800e616 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800e616:	b580      	push	{r7, lr}
 800e618:	b08a      	sub	sp, #40	@ 0x28
 800e61a:	af02      	add	r7, sp, #8
 800e61c:	60f8      	str	r0, [r7, #12]
 800e61e:	60b9      	str	r1, [r7, #8]
 800e620:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e622:	2300      	movs	r3, #0
 800e624:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800e626:	f7fb fe79 	bl	800a31c <HAL_GetTick>
 800e62a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	699b      	ldr	r3, [r3, #24]
 800e632:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	3320      	adds	r3, #32
 800e63a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e642:	b2db      	uxtb	r3, r3
 800e644:	2b01      	cmp	r3, #1
 800e646:	d101      	bne.n	800e64c <HAL_QSPI_Receive+0x36>
 800e648:	2302      	movs	r3, #2
 800e64a:	e082      	b.n	800e752 <HAL_QSPI_Receive+0x13c>
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2201      	movs	r2, #1
 800e650:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800e65a:	b2db      	uxtb	r3, r3
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d171      	bne.n	800e744 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2200      	movs	r2, #0
 800e664:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d062      	beq.n	800e732 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2222      	movs	r2, #34	@ 0x22
 800e670:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	691b      	ldr	r3, [r3, #16]
 800e67a:	1c5a      	adds	r2, r3, #1
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	691b      	ldr	r3, [r3, #16]
 800e686:	1c5a      	adds	r2, r3, #1
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	68ba      	ldr	r2, [r7, #8]
 800e690:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	695b      	ldr	r3, [r3, #20]
 800e698:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800e6a4:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	697a      	ldr	r2, [r7, #20]
 800e6ac:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800e6ae:	e01c      	b.n	800e6ea <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	69bb      	ldr	r3, [r7, #24]
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	2106      	movs	r1, #6
 800e6ba:	68f8      	ldr	r0, [r7, #12]
 800e6bc:	f000 f8d4 	bl	800e868 <QSPI_WaitFlagStateUntilTimeout>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800e6c4:	7ffb      	ldrb	r3, [r7, #31]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d114      	bne.n	800e6f4 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6ce:	693a      	ldr	r2, [r7, #16]
 800e6d0:	7812      	ldrb	r2, [r2, #0]
 800e6d2:	b2d2      	uxtb	r2, r2
 800e6d4:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6da:	1c5a      	adds	r2, r3, #1
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6e4:	1e5a      	subs	r2, r3, #1
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d1de      	bne.n	800e6b0 <HAL_QSPI_Receive+0x9a>
 800e6f2:	e000      	b.n	800e6f6 <HAL_QSPI_Receive+0xe0>
          break;
 800e6f4:	bf00      	nop
      }

      if (status == HAL_OK)
 800e6f6:	7ffb      	ldrb	r3, [r7, #31]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d115      	bne.n	800e728 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	9300      	str	r3, [sp, #0]
 800e700:	69bb      	ldr	r3, [r7, #24]
 800e702:	2201      	movs	r2, #1
 800e704:	2102      	movs	r1, #2
 800e706:	68f8      	ldr	r0, [r7, #12]
 800e708:	f000 f8ae 	bl	800e868 <QSPI_WaitFlagStateUntilTimeout>
 800e70c:	4603      	mov	r3, r0
 800e70e:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800e710:	7ffb      	ldrb	r3, [r7, #31]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d108      	bne.n	800e728 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2202      	movs	r2, #2
 800e71c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	f000 f81b 	bl	800e75a <HAL_QSPI_Abort>
 800e724:	4603      	mov	r3, r0
 800e726:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2201      	movs	r2, #1
 800e72c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e730:	e00a      	b.n	800e748 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e736:	f043 0208 	orr.w	r2, r3, #8
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800e73e:	2301      	movs	r3, #1
 800e740:	77fb      	strb	r3, [r7, #31]
 800e742:	e001      	b.n	800e748 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800e744:	2302      	movs	r3, #2
 800e746:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2200      	movs	r2, #0
 800e74c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800e750:	7ffb      	ldrb	r3, [r7, #31]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3720      	adds	r7, #32
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b086      	sub	sp, #24
 800e75e:	af02      	add	r7, sp, #8
 800e760:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e762:	2300      	movs	r3, #0
 800e764:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800e766:	f7fb fdd9 	bl	800a31c <HAL_GetTick>
 800e76a:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800e772:	b2db      	uxtb	r3, r3
 800e774:	f003 0302 	and.w	r3, r3, #2
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d062      	beq.n	800e842 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2200      	movs	r2, #0
 800e780:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f003 0304 	and.w	r3, r3, #4
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d017      	beq.n	800e7c2 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f022 0204 	bic.w	r2, r2, #4
 800e7a0:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7fd fdce 	bl	800c348 <HAL_DMA_Abort>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800e7b0:	7bfb      	ldrb	r3, [r7, #15]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d005      	beq.n	800e7c2 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7ba:	f043 0204 	orr.w	r2, r3, #4
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	689b      	ldr	r3, [r3, #8]
 800e7c8:	f003 0320 	and.w	r3, r3, #32
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d034      	beq.n	800e83a <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	681a      	ldr	r2, [r3, #0]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f042 0202 	orr.w	r2, r2, #2
 800e7de:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	2102      	movs	r1, #2
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 f83b 	bl	800e868 <QSPI_WaitFlagStateUntilTimeout>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800e7f6:	7bfb      	ldrb	r3, [r7, #15]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d10e      	bne.n	800e81a <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2202      	movs	r2, #2
 800e802:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	2200      	movs	r2, #0
 800e80e:	2120      	movs	r1, #32
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 f829 	bl	800e868 <QSPI_WaitFlagStateUntilTimeout>
 800e816:	4603      	mov	r3, r0
 800e818:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800e81a:	7bfb      	ldrb	r3, [r7, #15]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d110      	bne.n	800e842 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	695a      	ldr	r2, [r3, #20]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800e82e:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e838:	e003      	b.n	800e842 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2201      	movs	r2, #1
 800e83e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800e842:	7bfb      	ldrb	r3, [r7, #15]
}
 800e844:	4618      	mov	r0, r3
 800e846:	3710      	adds	r7, #16
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	683a      	ldr	r2, [r7, #0]
 800e85a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800e85c:	bf00      	nop
 800e85e:	370c      	adds	r7, #12
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr

0800e868 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	603b      	str	r3, [r7, #0]
 800e874:	4613      	mov	r3, r2
 800e876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e878:	e01a      	b.n	800e8b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e87a:	69bb      	ldr	r3, [r7, #24]
 800e87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e880:	d016      	beq.n	800e8b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e882:	f7fb fd4b 	bl	800a31c <HAL_GetTick>
 800e886:	4602      	mov	r2, r0
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	1ad3      	subs	r3, r2, r3
 800e88c:	69ba      	ldr	r2, [r7, #24]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d302      	bcc.n	800e898 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d10b      	bne.n	800e8b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2204      	movs	r2, #4
 800e89c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8a4:	f043 0201 	orr.w	r2, r3, #1
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	e00e      	b.n	800e8ce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	689a      	ldr	r2, [r3, #8]
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	4013      	ands	r3, r2
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	bf14      	ite	ne
 800e8be:	2301      	movne	r3, #1
 800e8c0:	2300      	moveq	r3, #0
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	79fb      	ldrb	r3, [r7, #7]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d1d6      	bne.n	800e87a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e8cc:	2300      	movs	r3, #0
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800e8d6:	b480      	push	{r7}
 800e8d8:	b085      	sub	sp, #20
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	60f8      	str	r0, [r7, #12]
 800e8de:	60b9      	str	r1, [r7, #8]
 800e8e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d009      	beq.n	800e8fe <QSPI_Config+0x28>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e8f0:	d005      	beq.n	800e8fe <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	3a01      	subs	r2, #1
 800e8fc:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	699b      	ldr	r3, [r3, #24]
 800e902:	2b00      	cmp	r3, #0
 800e904:	f000 80c1 	beq.w	800ea8a <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	6a1b      	ldr	r3, [r3, #32]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d063      	beq.n	800e9d8 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	68ba      	ldr	r2, [r7, #8]
 800e916:	6892      	ldr	r2, [r2, #8]
 800e918:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	69db      	ldr	r3, [r3, #28]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d031      	beq.n	800e986 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e92a:	431a      	orrs	r2, r3
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e930:	431a      	orrs	r2, r3
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e936:	431a      	orrs	r2, r3
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	695b      	ldr	r3, [r3, #20]
 800e93c:	049b      	lsls	r3, r3, #18
 800e93e:	431a      	orrs	r2, r3
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	691b      	ldr	r3, [r3, #16]
 800e944:	431a      	orrs	r2, r3
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	6a1b      	ldr	r3, [r3, #32]
 800e94a:	431a      	orrs	r2, r3
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	431a      	orrs	r2, r3
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	69db      	ldr	r3, [r3, #28]
 800e956:	431a      	orrs	r2, r3
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	699b      	ldr	r3, [r3, #24]
 800e95c:	431a      	orrs	r2, r3
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	ea42 0103 	orr.w	r1, r2, r3
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	430a      	orrs	r2, r1
 800e96e:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800e976:	f000 813f 	beq.w	800ebf8 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	68ba      	ldr	r2, [r7, #8]
 800e980:	6852      	ldr	r2, [r2, #4]
 800e982:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800e984:	e138      	b.n	800ebf8 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e98e:	431a      	orrs	r2, r3
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e994:	431a      	orrs	r2, r3
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e99a:	431a      	orrs	r2, r3
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	695b      	ldr	r3, [r3, #20]
 800e9a0:	049b      	lsls	r3, r3, #18
 800e9a2:	431a      	orrs	r2, r3
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	691b      	ldr	r3, [r3, #16]
 800e9a8:	431a      	orrs	r2, r3
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	6a1b      	ldr	r3, [r3, #32]
 800e9ae:	431a      	orrs	r2, r3
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	69db      	ldr	r3, [r3, #28]
 800e9b4:	431a      	orrs	r2, r3
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	699b      	ldr	r3, [r3, #24]
 800e9ba:	431a      	orrs	r2, r3
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	ea42 0103 	orr.w	r1, r2, r3
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	430a      	orrs	r2, r1
 800e9cc:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	619a      	str	r2, [r3, #24]
}
 800e9d6:	e10f      	b.n	800ebf8 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	69db      	ldr	r3, [r3, #28]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d02e      	beq.n	800ea3e <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9e8:	431a      	orrs	r2, r3
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e9ee:	431a      	orrs	r2, r3
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9f4:	431a      	orrs	r2, r3
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	695b      	ldr	r3, [r3, #20]
 800e9fa:	049b      	lsls	r3, r3, #18
 800e9fc:	431a      	orrs	r2, r3
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	6a1b      	ldr	r3, [r3, #32]
 800ea02:	431a      	orrs	r2, r3
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	431a      	orrs	r2, r3
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	69db      	ldr	r3, [r3, #28]
 800ea0e:	431a      	orrs	r2, r3
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	699b      	ldr	r3, [r3, #24]
 800ea14:	431a      	orrs	r2, r3
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	ea42 0103 	orr.w	r1, r2, r3
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	687a      	ldr	r2, [r7, #4]
 800ea24:	430a      	orrs	r2, r1
 800ea26:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ea2e:	f000 80e3 	beq.w	800ebf8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	68ba      	ldr	r2, [r7, #8]
 800ea38:	6852      	ldr	r2, [r2, #4]
 800ea3a:	619a      	str	r2, [r3, #24]
}
 800ea3c:	e0dc      	b.n	800ebf8 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea46:	431a      	orrs	r2, r3
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea4c:	431a      	orrs	r2, r3
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea52:	431a      	orrs	r2, r3
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	695b      	ldr	r3, [r3, #20]
 800ea58:	049b      	lsls	r3, r3, #18
 800ea5a:	431a      	orrs	r2, r3
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	6a1b      	ldr	r3, [r3, #32]
 800ea60:	431a      	orrs	r2, r3
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	69db      	ldr	r3, [r3, #28]
 800ea66:	431a      	orrs	r2, r3
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	699b      	ldr	r3, [r3, #24]
 800ea6c:	431a      	orrs	r2, r3
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	ea42 0103 	orr.w	r1, r2, r3
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	430a      	orrs	r2, r1
 800ea7e:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	2200      	movs	r2, #0
 800ea86:	619a      	str	r2, [r3, #24]
}
 800ea88:	e0b6      	b.n	800ebf8 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	6a1b      	ldr	r3, [r3, #32]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d05d      	beq.n	800eb4e <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	68ba      	ldr	r2, [r7, #8]
 800ea98:	6892      	ldr	r2, [r2, #8]
 800ea9a:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	69db      	ldr	r3, [r3, #28]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d02e      	beq.n	800eb02 <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eaac:	431a      	orrs	r2, r3
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eab2:	431a      	orrs	r2, r3
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eab8:	431a      	orrs	r2, r3
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	695b      	ldr	r3, [r3, #20]
 800eabe:	049b      	lsls	r3, r3, #18
 800eac0:	431a      	orrs	r2, r3
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	691b      	ldr	r3, [r3, #16]
 800eac6:	431a      	orrs	r2, r3
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	6a1b      	ldr	r3, [r3, #32]
 800eacc:	431a      	orrs	r2, r3
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	68db      	ldr	r3, [r3, #12]
 800ead2:	431a      	orrs	r2, r3
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	69db      	ldr	r3, [r3, #28]
 800ead8:	431a      	orrs	r2, r3
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	699b      	ldr	r3, [r3, #24]
 800eade:	ea42 0103 	orr.w	r1, r2, r3
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	430a      	orrs	r2, r1
 800eaea:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800eaf2:	f000 8081 	beq.w	800ebf8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	68ba      	ldr	r2, [r7, #8]
 800eafc:	6852      	ldr	r2, [r2, #4]
 800eafe:	619a      	str	r2, [r3, #24]
}
 800eb00:	e07a      	b.n	800ebf8 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb0a:	431a      	orrs	r2, r3
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb10:	431a      	orrs	r2, r3
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb16:	431a      	orrs	r2, r3
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	695b      	ldr	r3, [r3, #20]
 800eb1c:	049b      	lsls	r3, r3, #18
 800eb1e:	431a      	orrs	r2, r3
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	691b      	ldr	r3, [r3, #16]
 800eb24:	431a      	orrs	r2, r3
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	6a1b      	ldr	r3, [r3, #32]
 800eb2a:	431a      	orrs	r2, r3
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	69db      	ldr	r3, [r3, #28]
 800eb30:	431a      	orrs	r2, r3
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	699b      	ldr	r3, [r3, #24]
 800eb36:	ea42 0103 	orr.w	r1, r2, r3
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	687a      	ldr	r2, [r7, #4]
 800eb40:	430a      	orrs	r2, r1
 800eb42:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	619a      	str	r2, [r3, #24]
}
 800eb4c:	e054      	b.n	800ebf8 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	69db      	ldr	r3, [r3, #28]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d02a      	beq.n	800ebac <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb5e:	431a      	orrs	r2, r3
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb64:	431a      	orrs	r2, r3
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb6a:	431a      	orrs	r2, r3
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	695b      	ldr	r3, [r3, #20]
 800eb70:	049b      	lsls	r3, r3, #18
 800eb72:	431a      	orrs	r2, r3
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	6a1b      	ldr	r3, [r3, #32]
 800eb78:	431a      	orrs	r2, r3
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	68db      	ldr	r3, [r3, #12]
 800eb7e:	431a      	orrs	r2, r3
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	69db      	ldr	r3, [r3, #28]
 800eb84:	431a      	orrs	r2, r3
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	699b      	ldr	r3, [r3, #24]
 800eb8a:	ea42 0103 	orr.w	r1, r2, r3
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	430a      	orrs	r2, r1
 800eb96:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800eb9e:	d02b      	beq.n	800ebf8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	68ba      	ldr	r2, [r7, #8]
 800eba6:	6852      	ldr	r2, [r2, #4]
 800eba8:	619a      	str	r2, [r3, #24]
}
 800ebaa:	e025      	b.n	800ebf8 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d021      	beq.n	800ebf8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebbc:	431a      	orrs	r2, r3
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebc2:	431a      	orrs	r2, r3
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebc8:	431a      	orrs	r2, r3
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	695b      	ldr	r3, [r3, #20]
 800ebce:	049b      	lsls	r3, r3, #18
 800ebd0:	431a      	orrs	r2, r3
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	6a1b      	ldr	r3, [r3, #32]
 800ebd6:	431a      	orrs	r2, r3
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	69db      	ldr	r3, [r3, #28]
 800ebdc:	431a      	orrs	r2, r3
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	699b      	ldr	r3, [r3, #24]
 800ebe2:	ea42 0103 	orr.w	r1, r2, r3
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	430a      	orrs	r2, r1
 800ebee:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	619a      	str	r2, [r3, #24]
}
 800ebf8:	bf00      	nop
 800ebfa:	3714      	adds	r7, #20
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b088      	sub	sp, #32
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d101      	bne.n	800ec16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ec12:	2301      	movs	r3, #1
 800ec14:	e3ca      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ec16:	4b97      	ldr	r3, [pc, #604]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ec18:	689b      	ldr	r3, [r3, #8]
 800ec1a:	f003 030c 	and.w	r3, r3, #12
 800ec1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ec20:	4b94      	ldr	r3, [pc, #592]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	f003 0303 	and.w	r3, r3, #3
 800ec28:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f003 0310 	and.w	r3, r3, #16
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	f000 80e4 	beq.w	800ee00 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ec38:	69bb      	ldr	r3, [r7, #24]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d007      	beq.n	800ec4e <HAL_RCC_OscConfig+0x4a>
 800ec3e:	69bb      	ldr	r3, [r7, #24]
 800ec40:	2b0c      	cmp	r3, #12
 800ec42:	f040 808b 	bne.w	800ed5c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	f040 8087 	bne.w	800ed5c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ec4e:	4b89      	ldr	r3, [pc, #548]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f003 0302 	and.w	r3, r3, #2
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d005      	beq.n	800ec66 <HAL_RCC_OscConfig+0x62>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	699b      	ldr	r3, [r3, #24]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d101      	bne.n	800ec66 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800ec62:	2301      	movs	r3, #1
 800ec64:	e3a2      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6a1a      	ldr	r2, [r3, #32]
 800ec6a:	4b82      	ldr	r3, [pc, #520]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f003 0308 	and.w	r3, r3, #8
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d004      	beq.n	800ec80 <HAL_RCC_OscConfig+0x7c>
 800ec76:	4b7f      	ldr	r3, [pc, #508]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ec7e:	e005      	b.n	800ec8c <HAL_RCC_OscConfig+0x88>
 800ec80:	4b7c      	ldr	r3, [pc, #496]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ec82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec86:	091b      	lsrs	r3, r3, #4
 800ec88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d223      	bcs.n	800ecd8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6a1b      	ldr	r3, [r3, #32]
 800ec94:	4618      	mov	r0, r3
 800ec96:	f000 fd55 	bl	800f744 <RCC_SetFlashLatencyFromMSIRange>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d001      	beq.n	800eca4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800eca0:	2301      	movs	r3, #1
 800eca2:	e383      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800eca4:	4b73      	ldr	r3, [pc, #460]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4a72      	ldr	r2, [pc, #456]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ecaa:	f043 0308 	orr.w	r3, r3, #8
 800ecae:	6013      	str	r3, [r2, #0]
 800ecb0:	4b70      	ldr	r3, [pc, #448]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6a1b      	ldr	r3, [r3, #32]
 800ecbc:	496d      	ldr	r1, [pc, #436]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ecbe:	4313      	orrs	r3, r2
 800ecc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ecc2:	4b6c      	ldr	r3, [pc, #432]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	69db      	ldr	r3, [r3, #28]
 800ecce:	021b      	lsls	r3, r3, #8
 800ecd0:	4968      	ldr	r1, [pc, #416]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	604b      	str	r3, [r1, #4]
 800ecd6:	e025      	b.n	800ed24 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ecd8:	4b66      	ldr	r3, [pc, #408]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a65      	ldr	r2, [pc, #404]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ecde:	f043 0308 	orr.w	r3, r3, #8
 800ece2:	6013      	str	r3, [r2, #0]
 800ece4:	4b63      	ldr	r3, [pc, #396]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6a1b      	ldr	r3, [r3, #32]
 800ecf0:	4960      	ldr	r1, [pc, #384]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ecf2:	4313      	orrs	r3, r2
 800ecf4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ecf6:	4b5f      	ldr	r3, [pc, #380]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	69db      	ldr	r3, [r3, #28]
 800ed02:	021b      	lsls	r3, r3, #8
 800ed04:	495b      	ldr	r1, [pc, #364]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ed06:	4313      	orrs	r3, r2
 800ed08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ed0a:	69bb      	ldr	r3, [r7, #24]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d109      	bne.n	800ed24 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6a1b      	ldr	r3, [r3, #32]
 800ed14:	4618      	mov	r0, r3
 800ed16:	f000 fd15 	bl	800f744 <RCC_SetFlashLatencyFromMSIRange>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d001      	beq.n	800ed24 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800ed20:	2301      	movs	r3, #1
 800ed22:	e343      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ed24:	f000 fc4a 	bl	800f5bc <HAL_RCC_GetSysClockFreq>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	4b52      	ldr	r3, [pc, #328]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ed2c:	689b      	ldr	r3, [r3, #8]
 800ed2e:	091b      	lsrs	r3, r3, #4
 800ed30:	f003 030f 	and.w	r3, r3, #15
 800ed34:	4950      	ldr	r1, [pc, #320]	@ (800ee78 <HAL_RCC_OscConfig+0x274>)
 800ed36:	5ccb      	ldrb	r3, [r1, r3]
 800ed38:	f003 031f 	and.w	r3, r3, #31
 800ed3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ed40:	4a4e      	ldr	r2, [pc, #312]	@ (800ee7c <HAL_RCC_OscConfig+0x278>)
 800ed42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ed44:	4b4e      	ldr	r3, [pc, #312]	@ (800ee80 <HAL_RCC_OscConfig+0x27c>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7fb fa97 	bl	800a27c <HAL_InitTick>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800ed52:	7bfb      	ldrb	r3, [r7, #15]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d052      	beq.n	800edfe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800ed58:	7bfb      	ldrb	r3, [r7, #15]
 800ed5a:	e327      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	699b      	ldr	r3, [r3, #24]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d032      	beq.n	800edca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ed64:	4b43      	ldr	r3, [pc, #268]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a42      	ldr	r2, [pc, #264]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ed6a:	f043 0301 	orr.w	r3, r3, #1
 800ed6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ed70:	f7fb fad4 	bl	800a31c <HAL_GetTick>
 800ed74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ed76:	e008      	b.n	800ed8a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ed78:	f7fb fad0 	bl	800a31c <HAL_GetTick>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	1ad3      	subs	r3, r2, r3
 800ed82:	2b02      	cmp	r3, #2
 800ed84:	d901      	bls.n	800ed8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800ed86:	2303      	movs	r3, #3
 800ed88:	e310      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ed8a:	4b3a      	ldr	r3, [pc, #232]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f003 0302 	and.w	r3, r3, #2
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d0f0      	beq.n	800ed78 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ed96:	4b37      	ldr	r3, [pc, #220]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	4a36      	ldr	r2, [pc, #216]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ed9c:	f043 0308 	orr.w	r3, r3, #8
 800eda0:	6013      	str	r3, [r2, #0]
 800eda2:	4b34      	ldr	r3, [pc, #208]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6a1b      	ldr	r3, [r3, #32]
 800edae:	4931      	ldr	r1, [pc, #196]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800edb0:	4313      	orrs	r3, r2
 800edb2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800edb4:	4b2f      	ldr	r3, [pc, #188]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800edb6:	685b      	ldr	r3, [r3, #4]
 800edb8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	69db      	ldr	r3, [r3, #28]
 800edc0:	021b      	lsls	r3, r3, #8
 800edc2:	492c      	ldr	r1, [pc, #176]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800edc4:	4313      	orrs	r3, r2
 800edc6:	604b      	str	r3, [r1, #4]
 800edc8:	e01a      	b.n	800ee00 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800edca:	4b2a      	ldr	r3, [pc, #168]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	4a29      	ldr	r2, [pc, #164]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800edd0:	f023 0301 	bic.w	r3, r3, #1
 800edd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800edd6:	f7fb faa1 	bl	800a31c <HAL_GetTick>
 800edda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800eddc:	e008      	b.n	800edf0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800edde:	f7fb fa9d 	bl	800a31c <HAL_GetTick>
 800ede2:	4602      	mov	r2, r0
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	2b02      	cmp	r3, #2
 800edea:	d901      	bls.n	800edf0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800edec:	2303      	movs	r3, #3
 800edee:	e2dd      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800edf0:	4b20      	ldr	r3, [pc, #128]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f003 0302 	and.w	r3, r3, #2
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d1f0      	bne.n	800edde <HAL_RCC_OscConfig+0x1da>
 800edfc:	e000      	b.n	800ee00 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800edfe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	f003 0301 	and.w	r3, r3, #1
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d074      	beq.n	800eef6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ee0c:	69bb      	ldr	r3, [r7, #24]
 800ee0e:	2b08      	cmp	r3, #8
 800ee10:	d005      	beq.n	800ee1e <HAL_RCC_OscConfig+0x21a>
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	2b0c      	cmp	r3, #12
 800ee16:	d10e      	bne.n	800ee36 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	2b03      	cmp	r3, #3
 800ee1c:	d10b      	bne.n	800ee36 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ee1e:	4b15      	ldr	r3, [pc, #84]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d064      	beq.n	800eef4 <HAL_RCC_OscConfig+0x2f0>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d160      	bne.n	800eef4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800ee32:	2301      	movs	r3, #1
 800ee34:	e2ba      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee3e:	d106      	bne.n	800ee4e <HAL_RCC_OscConfig+0x24a>
 800ee40:	4b0c      	ldr	r3, [pc, #48]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	4a0b      	ldr	r2, [pc, #44]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ee46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ee4a:	6013      	str	r3, [r2, #0]
 800ee4c:	e026      	b.n	800ee9c <HAL_RCC_OscConfig+0x298>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ee56:	d115      	bne.n	800ee84 <HAL_RCC_OscConfig+0x280>
 800ee58:	4b06      	ldr	r3, [pc, #24]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a05      	ldr	r2, [pc, #20]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ee5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ee62:	6013      	str	r3, [r2, #0]
 800ee64:	4b03      	ldr	r3, [pc, #12]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4a02      	ldr	r2, [pc, #8]	@ (800ee74 <HAL_RCC_OscConfig+0x270>)
 800ee6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ee6e:	6013      	str	r3, [r2, #0]
 800ee70:	e014      	b.n	800ee9c <HAL_RCC_OscConfig+0x298>
 800ee72:	bf00      	nop
 800ee74:	40021000 	.word	0x40021000
 800ee78:	08016b24 	.word	0x08016b24
 800ee7c:	20000168 	.word	0x20000168
 800ee80:	20000174 	.word	0x20000174
 800ee84:	4ba0      	ldr	r3, [pc, #640]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4a9f      	ldr	r2, [pc, #636]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800ee8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee8e:	6013      	str	r3, [r2, #0]
 800ee90:	4b9d      	ldr	r3, [pc, #628]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a9c      	ldr	r2, [pc, #624]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800ee96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ee9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	685b      	ldr	r3, [r3, #4]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d013      	beq.n	800eecc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eea4:	f7fb fa3a 	bl	800a31c <HAL_GetTick>
 800eea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800eeaa:	e008      	b.n	800eebe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eeac:	f7fb fa36 	bl	800a31c <HAL_GetTick>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	1ad3      	subs	r3, r2, r3
 800eeb6:	2b64      	cmp	r3, #100	@ 0x64
 800eeb8:	d901      	bls.n	800eebe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800eeba:	2303      	movs	r3, #3
 800eebc:	e276      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800eebe:	4b92      	ldr	r3, [pc, #584]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d0f0      	beq.n	800eeac <HAL_RCC_OscConfig+0x2a8>
 800eeca:	e014      	b.n	800eef6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eecc:	f7fb fa26 	bl	800a31c <HAL_GetTick>
 800eed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800eed2:	e008      	b.n	800eee6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eed4:	f7fb fa22 	bl	800a31c <HAL_GetTick>
 800eed8:	4602      	mov	r2, r0
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	1ad3      	subs	r3, r2, r3
 800eede:	2b64      	cmp	r3, #100	@ 0x64
 800eee0:	d901      	bls.n	800eee6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800eee2:	2303      	movs	r3, #3
 800eee4:	e262      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800eee6:	4b88      	ldr	r3, [pc, #544]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d1f0      	bne.n	800eed4 <HAL_RCC_OscConfig+0x2d0>
 800eef2:	e000      	b.n	800eef6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f003 0302 	and.w	r3, r3, #2
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d060      	beq.n	800efc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ef02:	69bb      	ldr	r3, [r7, #24]
 800ef04:	2b04      	cmp	r3, #4
 800ef06:	d005      	beq.n	800ef14 <HAL_RCC_OscConfig+0x310>
 800ef08:	69bb      	ldr	r3, [r7, #24]
 800ef0a:	2b0c      	cmp	r3, #12
 800ef0c:	d119      	bne.n	800ef42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	2b02      	cmp	r3, #2
 800ef12:	d116      	bne.n	800ef42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ef14:	4b7c      	ldr	r3, [pc, #496]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d005      	beq.n	800ef2c <HAL_RCC_OscConfig+0x328>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	68db      	ldr	r3, [r3, #12]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d101      	bne.n	800ef2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800ef28:	2301      	movs	r3, #1
 800ef2a:	e23f      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef2c:	4b76      	ldr	r3, [pc, #472]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	691b      	ldr	r3, [r3, #16]
 800ef38:	061b      	lsls	r3, r3, #24
 800ef3a:	4973      	ldr	r1, [pc, #460]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800ef3c:	4313      	orrs	r3, r2
 800ef3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ef40:	e040      	b.n	800efc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d023      	beq.n	800ef92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ef4a:	4b6f      	ldr	r3, [pc, #444]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	4a6e      	ldr	r2, [pc, #440]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800ef50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ef54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef56:	f7fb f9e1 	bl	800a31c <HAL_GetTick>
 800ef5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ef5c:	e008      	b.n	800ef70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ef5e:	f7fb f9dd 	bl	800a31c <HAL_GetTick>
 800ef62:	4602      	mov	r2, r0
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	1ad3      	subs	r3, r2, r3
 800ef68:	2b02      	cmp	r3, #2
 800ef6a:	d901      	bls.n	800ef70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800ef6c:	2303      	movs	r3, #3
 800ef6e:	e21d      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ef70:	4b65      	ldr	r3, [pc, #404]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d0f0      	beq.n	800ef5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef7c:	4b62      	ldr	r3, [pc, #392]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	691b      	ldr	r3, [r3, #16]
 800ef88:	061b      	lsls	r3, r3, #24
 800ef8a:	495f      	ldr	r1, [pc, #380]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	604b      	str	r3, [r1, #4]
 800ef90:	e018      	b.n	800efc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ef92:	4b5d      	ldr	r3, [pc, #372]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	4a5c      	ldr	r2, [pc, #368]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800ef98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef9e:	f7fb f9bd 	bl	800a31c <HAL_GetTick>
 800efa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800efa4:	e008      	b.n	800efb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800efa6:	f7fb f9b9 	bl	800a31c <HAL_GetTick>
 800efaa:	4602      	mov	r2, r0
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	2b02      	cmp	r3, #2
 800efb2:	d901      	bls.n	800efb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800efb4:	2303      	movs	r3, #3
 800efb6:	e1f9      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800efb8:	4b53      	ldr	r3, [pc, #332]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d1f0      	bne.n	800efa6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f003 0308 	and.w	r3, r3, #8
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d03c      	beq.n	800f04a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	695b      	ldr	r3, [r3, #20]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d01c      	beq.n	800f012 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800efd8:	4b4b      	ldr	r3, [pc, #300]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800efda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800efde:	4a4a      	ldr	r2, [pc, #296]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800efe0:	f043 0301 	orr.w	r3, r3, #1
 800efe4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800efe8:	f7fb f998 	bl	800a31c <HAL_GetTick>
 800efec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800efee:	e008      	b.n	800f002 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eff0:	f7fb f994 	bl	800a31c <HAL_GetTick>
 800eff4:	4602      	mov	r2, r0
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	1ad3      	subs	r3, r2, r3
 800effa:	2b02      	cmp	r3, #2
 800effc:	d901      	bls.n	800f002 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800effe:	2303      	movs	r3, #3
 800f000:	e1d4      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f002:	4b41      	ldr	r3, [pc, #260]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800f004:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f008:	f003 0302 	and.w	r3, r3, #2
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d0ef      	beq.n	800eff0 <HAL_RCC_OscConfig+0x3ec>
 800f010:	e01b      	b.n	800f04a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f012:	4b3d      	ldr	r3, [pc, #244]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800f014:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f018:	4a3b      	ldr	r2, [pc, #236]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800f01a:	f023 0301 	bic.w	r3, r3, #1
 800f01e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f022:	f7fb f97b 	bl	800a31c <HAL_GetTick>
 800f026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f028:	e008      	b.n	800f03c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f02a:	f7fb f977 	bl	800a31c <HAL_GetTick>
 800f02e:	4602      	mov	r2, r0
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	1ad3      	subs	r3, r2, r3
 800f034:	2b02      	cmp	r3, #2
 800f036:	d901      	bls.n	800f03c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800f038:	2303      	movs	r3, #3
 800f03a:	e1b7      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f03c:	4b32      	ldr	r3, [pc, #200]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800f03e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f042:	f003 0302 	and.w	r3, r3, #2
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1ef      	bne.n	800f02a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f003 0304 	and.w	r3, r3, #4
 800f052:	2b00      	cmp	r3, #0
 800f054:	f000 80a6 	beq.w	800f1a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f058:	2300      	movs	r3, #0
 800f05a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800f05c:	4b2a      	ldr	r3, [pc, #168]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800f05e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f064:	2b00      	cmp	r3, #0
 800f066:	d10d      	bne.n	800f084 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f068:	4b27      	ldr	r3, [pc, #156]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800f06a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f06c:	4a26      	ldr	r2, [pc, #152]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800f06e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f072:	6593      	str	r3, [r2, #88]	@ 0x58
 800f074:	4b24      	ldr	r3, [pc, #144]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800f076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f07c:	60bb      	str	r3, [r7, #8]
 800f07e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f080:	2301      	movs	r3, #1
 800f082:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f084:	4b21      	ldr	r3, [pc, #132]	@ (800f10c <HAL_RCC_OscConfig+0x508>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d118      	bne.n	800f0c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f090:	4b1e      	ldr	r3, [pc, #120]	@ (800f10c <HAL_RCC_OscConfig+0x508>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a1d      	ldr	r2, [pc, #116]	@ (800f10c <HAL_RCC_OscConfig+0x508>)
 800f096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f09a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f09c:	f7fb f93e 	bl	800a31c <HAL_GetTick>
 800f0a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f0a2:	e008      	b.n	800f0b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f0a4:	f7fb f93a 	bl	800a31c <HAL_GetTick>
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	1ad3      	subs	r3, r2, r3
 800f0ae:	2b02      	cmp	r3, #2
 800f0b0:	d901      	bls.n	800f0b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800f0b2:	2303      	movs	r3, #3
 800f0b4:	e17a      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f0b6:	4b15      	ldr	r3, [pc, #84]	@ (800f10c <HAL_RCC_OscConfig+0x508>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d0f0      	beq.n	800f0a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	689b      	ldr	r3, [r3, #8]
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d108      	bne.n	800f0dc <HAL_RCC_OscConfig+0x4d8>
 800f0ca:	4b0f      	ldr	r3, [pc, #60]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800f0cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0d0:	4a0d      	ldr	r2, [pc, #52]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800f0d2:	f043 0301 	orr.w	r3, r3, #1
 800f0d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800f0da:	e029      	b.n	800f130 <HAL_RCC_OscConfig+0x52c>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	689b      	ldr	r3, [r3, #8]
 800f0e0:	2b05      	cmp	r3, #5
 800f0e2:	d115      	bne.n	800f110 <HAL_RCC_OscConfig+0x50c>
 800f0e4:	4b08      	ldr	r3, [pc, #32]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800f0e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0ea:	4a07      	ldr	r2, [pc, #28]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800f0ec:	f043 0304 	orr.w	r3, r3, #4
 800f0f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800f0f4:	4b04      	ldr	r3, [pc, #16]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800f0f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0fa:	4a03      	ldr	r2, [pc, #12]	@ (800f108 <HAL_RCC_OscConfig+0x504>)
 800f0fc:	f043 0301 	orr.w	r3, r3, #1
 800f100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800f104:	e014      	b.n	800f130 <HAL_RCC_OscConfig+0x52c>
 800f106:	bf00      	nop
 800f108:	40021000 	.word	0x40021000
 800f10c:	40007000 	.word	0x40007000
 800f110:	4b9c      	ldr	r3, [pc, #624]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f116:	4a9b      	ldr	r2, [pc, #620]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f118:	f023 0301 	bic.w	r3, r3, #1
 800f11c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800f120:	4b98      	ldr	r3, [pc, #608]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f126:	4a97      	ldr	r2, [pc, #604]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f128:	f023 0304 	bic.w	r3, r3, #4
 800f12c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	689b      	ldr	r3, [r3, #8]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d016      	beq.n	800f166 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f138:	f7fb f8f0 	bl	800a31c <HAL_GetTick>
 800f13c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f13e:	e00a      	b.n	800f156 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f140:	f7fb f8ec 	bl	800a31c <HAL_GetTick>
 800f144:	4602      	mov	r2, r0
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	1ad3      	subs	r3, r2, r3
 800f14a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f14e:	4293      	cmp	r3, r2
 800f150:	d901      	bls.n	800f156 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800f152:	2303      	movs	r3, #3
 800f154:	e12a      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f156:	4b8b      	ldr	r3, [pc, #556]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f15c:	f003 0302 	and.w	r3, r3, #2
 800f160:	2b00      	cmp	r3, #0
 800f162:	d0ed      	beq.n	800f140 <HAL_RCC_OscConfig+0x53c>
 800f164:	e015      	b.n	800f192 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f166:	f7fb f8d9 	bl	800a31c <HAL_GetTick>
 800f16a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f16c:	e00a      	b.n	800f184 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f16e:	f7fb f8d5 	bl	800a31c <HAL_GetTick>
 800f172:	4602      	mov	r2, r0
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	1ad3      	subs	r3, r2, r3
 800f178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f17c:	4293      	cmp	r3, r2
 800f17e:	d901      	bls.n	800f184 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800f180:	2303      	movs	r3, #3
 800f182:	e113      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f184:	4b7f      	ldr	r3, [pc, #508]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f18a:	f003 0302 	and.w	r3, r3, #2
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d1ed      	bne.n	800f16e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f192:	7ffb      	ldrb	r3, [r7, #31]
 800f194:	2b01      	cmp	r3, #1
 800f196:	d105      	bne.n	800f1a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f198:	4b7a      	ldr	r3, [pc, #488]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f19a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f19c:	4a79      	ldr	r2, [pc, #484]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f19e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f1a2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	f000 80fe 	beq.w	800f3aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1b2:	2b02      	cmp	r3, #2
 800f1b4:	f040 80d0 	bne.w	800f358 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800f1b8:	4b72      	ldr	r3, [pc, #456]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	f003 0203 	and.w	r2, r3, #3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d130      	bne.n	800f22e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d127      	bne.n	800f22e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d11f      	bne.n	800f22e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800f1f8:	2a07      	cmp	r2, #7
 800f1fa:	bf14      	ite	ne
 800f1fc:	2201      	movne	r2, #1
 800f1fe:	2200      	moveq	r2, #0
 800f200:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f202:	4293      	cmp	r3, r2
 800f204:	d113      	bne.n	800f22e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f210:	085b      	lsrs	r3, r3, #1
 800f212:	3b01      	subs	r3, #1
 800f214:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800f216:	429a      	cmp	r2, r3
 800f218:	d109      	bne.n	800f22e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f224:	085b      	lsrs	r3, r3, #1
 800f226:	3b01      	subs	r3, #1
 800f228:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d06e      	beq.n	800f30c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f22e:	69bb      	ldr	r3, [r7, #24]
 800f230:	2b0c      	cmp	r3, #12
 800f232:	d069      	beq.n	800f308 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800f234:	4b53      	ldr	r3, [pc, #332]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d105      	bne.n	800f24c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800f240:	4b50      	ldr	r3, [pc, #320]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d001      	beq.n	800f250 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800f24c:	2301      	movs	r3, #1
 800f24e:	e0ad      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800f250:	4b4c      	ldr	r3, [pc, #304]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	4a4b      	ldr	r2, [pc, #300]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f25a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f25c:	f7fb f85e 	bl	800a31c <HAL_GetTick>
 800f260:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f262:	e008      	b.n	800f276 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f264:	f7fb f85a 	bl	800a31c <HAL_GetTick>
 800f268:	4602      	mov	r2, r0
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	1ad3      	subs	r3, r2, r3
 800f26e:	2b02      	cmp	r3, #2
 800f270:	d901      	bls.n	800f276 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800f272:	2303      	movs	r3, #3
 800f274:	e09a      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f276:	4b43      	ldr	r3, [pc, #268]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d1f0      	bne.n	800f264 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f282:	4b40      	ldr	r3, [pc, #256]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f284:	68da      	ldr	r2, [r3, #12]
 800f286:	4b40      	ldr	r3, [pc, #256]	@ (800f388 <HAL_RCC_OscConfig+0x784>)
 800f288:	4013      	ands	r3, r2
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800f292:	3a01      	subs	r2, #1
 800f294:	0112      	lsls	r2, r2, #4
 800f296:	4311      	orrs	r1, r2
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f29c:	0212      	lsls	r2, r2, #8
 800f29e:	4311      	orrs	r1, r2
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800f2a4:	0852      	lsrs	r2, r2, #1
 800f2a6:	3a01      	subs	r2, #1
 800f2a8:	0552      	lsls	r2, r2, #21
 800f2aa:	4311      	orrs	r1, r2
 800f2ac:	687a      	ldr	r2, [r7, #4]
 800f2ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800f2b0:	0852      	lsrs	r2, r2, #1
 800f2b2:	3a01      	subs	r2, #1
 800f2b4:	0652      	lsls	r2, r2, #25
 800f2b6:	4311      	orrs	r1, r2
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800f2bc:	0912      	lsrs	r2, r2, #4
 800f2be:	0452      	lsls	r2, r2, #17
 800f2c0:	430a      	orrs	r2, r1
 800f2c2:	4930      	ldr	r1, [pc, #192]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f2c4:	4313      	orrs	r3, r2
 800f2c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800f2c8:	4b2e      	ldr	r3, [pc, #184]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	4a2d      	ldr	r2, [pc, #180]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f2ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f2d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f2d4:	4b2b      	ldr	r3, [pc, #172]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	4a2a      	ldr	r2, [pc, #168]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f2da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f2de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f2e0:	f7fb f81c 	bl	800a31c <HAL_GetTick>
 800f2e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f2e6:	e008      	b.n	800f2fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f2e8:	f7fb f818 	bl	800a31c <HAL_GetTick>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	1ad3      	subs	r3, r2, r3
 800f2f2:	2b02      	cmp	r3, #2
 800f2f4:	d901      	bls.n	800f2fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800f2f6:	2303      	movs	r3, #3
 800f2f8:	e058      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f2fa:	4b22      	ldr	r3, [pc, #136]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f302:	2b00      	cmp	r3, #0
 800f304:	d0f0      	beq.n	800f2e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f306:	e050      	b.n	800f3aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800f308:	2301      	movs	r3, #1
 800f30a:	e04f      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f30c:	4b1d      	ldr	r3, [pc, #116]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f314:	2b00      	cmp	r3, #0
 800f316:	d148      	bne.n	800f3aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800f318:	4b1a      	ldr	r3, [pc, #104]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	4a19      	ldr	r2, [pc, #100]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f31e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f322:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f324:	4b17      	ldr	r3, [pc, #92]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f326:	68db      	ldr	r3, [r3, #12]
 800f328:	4a16      	ldr	r2, [pc, #88]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f32a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f32e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f330:	f7fa fff4 	bl	800a31c <HAL_GetTick>
 800f334:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f336:	e008      	b.n	800f34a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f338:	f7fa fff0 	bl	800a31c <HAL_GetTick>
 800f33c:	4602      	mov	r2, r0
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	1ad3      	subs	r3, r2, r3
 800f342:	2b02      	cmp	r3, #2
 800f344:	d901      	bls.n	800f34a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800f346:	2303      	movs	r3, #3
 800f348:	e030      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f34a:	4b0e      	ldr	r3, [pc, #56]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f352:	2b00      	cmp	r3, #0
 800f354:	d0f0      	beq.n	800f338 <HAL_RCC_OscConfig+0x734>
 800f356:	e028      	b.n	800f3aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f358:	69bb      	ldr	r3, [r7, #24]
 800f35a:	2b0c      	cmp	r3, #12
 800f35c:	d023      	beq.n	800f3a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f35e:	4b09      	ldr	r3, [pc, #36]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	4a08      	ldr	r2, [pc, #32]	@ (800f384 <HAL_RCC_OscConfig+0x780>)
 800f364:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f36a:	f7fa ffd7 	bl	800a31c <HAL_GetTick>
 800f36e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f370:	e00c      	b.n	800f38c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f372:	f7fa ffd3 	bl	800a31c <HAL_GetTick>
 800f376:	4602      	mov	r2, r0
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	1ad3      	subs	r3, r2, r3
 800f37c:	2b02      	cmp	r3, #2
 800f37e:	d905      	bls.n	800f38c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800f380:	2303      	movs	r3, #3
 800f382:	e013      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
 800f384:	40021000 	.word	0x40021000
 800f388:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f38c:	4b09      	ldr	r3, [pc, #36]	@ (800f3b4 <HAL_RCC_OscConfig+0x7b0>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f394:	2b00      	cmp	r3, #0
 800f396:	d1ec      	bne.n	800f372 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800f398:	4b06      	ldr	r3, [pc, #24]	@ (800f3b4 <HAL_RCC_OscConfig+0x7b0>)
 800f39a:	68da      	ldr	r2, [r3, #12]
 800f39c:	4905      	ldr	r1, [pc, #20]	@ (800f3b4 <HAL_RCC_OscConfig+0x7b0>)
 800f39e:	4b06      	ldr	r3, [pc, #24]	@ (800f3b8 <HAL_RCC_OscConfig+0x7b4>)
 800f3a0:	4013      	ands	r3, r2
 800f3a2:	60cb      	str	r3, [r1, #12]
 800f3a4:	e001      	b.n	800f3aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	e000      	b.n	800f3ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800f3aa:	2300      	movs	r3, #0
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3720      	adds	r7, #32
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	40021000 	.word	0x40021000
 800f3b8:	feeefffc 	.word	0xfeeefffc

0800f3bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b084      	sub	sp, #16
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d101      	bne.n	800f3d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	e0e7      	b.n	800f5a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f3d0:	4b75      	ldr	r3, [pc, #468]	@ (800f5a8 <HAL_RCC_ClockConfig+0x1ec>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	f003 0307 	and.w	r3, r3, #7
 800f3d8:	683a      	ldr	r2, [r7, #0]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d910      	bls.n	800f400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f3de:	4b72      	ldr	r3, [pc, #456]	@ (800f5a8 <HAL_RCC_ClockConfig+0x1ec>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f023 0207 	bic.w	r2, r3, #7
 800f3e6:	4970      	ldr	r1, [pc, #448]	@ (800f5a8 <HAL_RCC_ClockConfig+0x1ec>)
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f3ee:	4b6e      	ldr	r3, [pc, #440]	@ (800f5a8 <HAL_RCC_ClockConfig+0x1ec>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f003 0307 	and.w	r3, r3, #7
 800f3f6:	683a      	ldr	r2, [r7, #0]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d001      	beq.n	800f400 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	e0cf      	b.n	800f5a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	f003 0302 	and.w	r3, r3, #2
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d010      	beq.n	800f42e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	689a      	ldr	r2, [r3, #8]
 800f410:	4b66      	ldr	r3, [pc, #408]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f412:	689b      	ldr	r3, [r3, #8]
 800f414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f418:	429a      	cmp	r2, r3
 800f41a:	d908      	bls.n	800f42e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f41c:	4b63      	ldr	r3, [pc, #396]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f41e:	689b      	ldr	r3, [r3, #8]
 800f420:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	689b      	ldr	r3, [r3, #8]
 800f428:	4960      	ldr	r1, [pc, #384]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f42a:	4313      	orrs	r3, r2
 800f42c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f003 0301 	and.w	r3, r3, #1
 800f436:	2b00      	cmp	r3, #0
 800f438:	d04c      	beq.n	800f4d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	2b03      	cmp	r3, #3
 800f440:	d107      	bne.n	800f452 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f442:	4b5a      	ldr	r3, [pc, #360]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d121      	bne.n	800f492 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800f44e:	2301      	movs	r3, #1
 800f450:	e0a6      	b.n	800f5a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	2b02      	cmp	r3, #2
 800f458:	d107      	bne.n	800f46a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f45a:	4b54      	ldr	r3, [pc, #336]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f462:	2b00      	cmp	r3, #0
 800f464:	d115      	bne.n	800f492 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800f466:	2301      	movs	r3, #1
 800f468:	e09a      	b.n	800f5a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d107      	bne.n	800f482 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f472:	4b4e      	ldr	r3, [pc, #312]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f003 0302 	and.w	r3, r3, #2
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d109      	bne.n	800f492 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800f47e:	2301      	movs	r3, #1
 800f480:	e08e      	b.n	800f5a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f482:	4b4a      	ldr	r3, [pc, #296]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d101      	bne.n	800f492 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800f48e:	2301      	movs	r3, #1
 800f490:	e086      	b.n	800f5a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f492:	4b46      	ldr	r3, [pc, #280]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f494:	689b      	ldr	r3, [r3, #8]
 800f496:	f023 0203 	bic.w	r2, r3, #3
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	4943      	ldr	r1, [pc, #268]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f4a0:	4313      	orrs	r3, r2
 800f4a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f4a4:	f7fa ff3a 	bl	800a31c <HAL_GetTick>
 800f4a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f4aa:	e00a      	b.n	800f4c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f4ac:	f7fa ff36 	bl	800a31c <HAL_GetTick>
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	1ad3      	subs	r3, r2, r3
 800f4b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d901      	bls.n	800f4c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800f4be:	2303      	movs	r3, #3
 800f4c0:	e06e      	b.n	800f5a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f4c2:	4b3a      	ldr	r3, [pc, #232]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f4c4:	689b      	ldr	r3, [r3, #8]
 800f4c6:	f003 020c 	and.w	r2, r3, #12
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d1eb      	bne.n	800f4ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f003 0302 	and.w	r3, r3, #2
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d010      	beq.n	800f502 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	689a      	ldr	r2, [r3, #8]
 800f4e4:	4b31      	ldr	r3, [pc, #196]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f4e6:	689b      	ldr	r3, [r3, #8]
 800f4e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d208      	bcs.n	800f502 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f4f0:	4b2e      	ldr	r3, [pc, #184]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f4f2:	689b      	ldr	r3, [r3, #8]
 800f4f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	689b      	ldr	r3, [r3, #8]
 800f4fc:	492b      	ldr	r1, [pc, #172]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f4fe:	4313      	orrs	r3, r2
 800f500:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f502:	4b29      	ldr	r3, [pc, #164]	@ (800f5a8 <HAL_RCC_ClockConfig+0x1ec>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	f003 0307 	and.w	r3, r3, #7
 800f50a:	683a      	ldr	r2, [r7, #0]
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d210      	bcs.n	800f532 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f510:	4b25      	ldr	r3, [pc, #148]	@ (800f5a8 <HAL_RCC_ClockConfig+0x1ec>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	f023 0207 	bic.w	r2, r3, #7
 800f518:	4923      	ldr	r1, [pc, #140]	@ (800f5a8 <HAL_RCC_ClockConfig+0x1ec>)
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	4313      	orrs	r3, r2
 800f51e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f520:	4b21      	ldr	r3, [pc, #132]	@ (800f5a8 <HAL_RCC_ClockConfig+0x1ec>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	f003 0307 	and.w	r3, r3, #7
 800f528:	683a      	ldr	r2, [r7, #0]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d001      	beq.n	800f532 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800f52e:	2301      	movs	r3, #1
 800f530:	e036      	b.n	800f5a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f003 0304 	and.w	r3, r3, #4
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d008      	beq.n	800f550 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f53e:	4b1b      	ldr	r3, [pc, #108]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f540:	689b      	ldr	r3, [r3, #8]
 800f542:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	4918      	ldr	r1, [pc, #96]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f54c:	4313      	orrs	r3, r2
 800f54e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f003 0308 	and.w	r3, r3, #8
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d009      	beq.n	800f570 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f55c:	4b13      	ldr	r3, [pc, #76]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	691b      	ldr	r3, [r3, #16]
 800f568:	00db      	lsls	r3, r3, #3
 800f56a:	4910      	ldr	r1, [pc, #64]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f56c:	4313      	orrs	r3, r2
 800f56e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f570:	f000 f824 	bl	800f5bc <HAL_RCC_GetSysClockFreq>
 800f574:	4602      	mov	r2, r0
 800f576:	4b0d      	ldr	r3, [pc, #52]	@ (800f5ac <HAL_RCC_ClockConfig+0x1f0>)
 800f578:	689b      	ldr	r3, [r3, #8]
 800f57a:	091b      	lsrs	r3, r3, #4
 800f57c:	f003 030f 	and.w	r3, r3, #15
 800f580:	490b      	ldr	r1, [pc, #44]	@ (800f5b0 <HAL_RCC_ClockConfig+0x1f4>)
 800f582:	5ccb      	ldrb	r3, [r1, r3]
 800f584:	f003 031f 	and.w	r3, r3, #31
 800f588:	fa22 f303 	lsr.w	r3, r2, r3
 800f58c:	4a09      	ldr	r2, [pc, #36]	@ (800f5b4 <HAL_RCC_ClockConfig+0x1f8>)
 800f58e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800f590:	4b09      	ldr	r3, [pc, #36]	@ (800f5b8 <HAL_RCC_ClockConfig+0x1fc>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	4618      	mov	r0, r3
 800f596:	f7fa fe71 	bl	800a27c <HAL_InitTick>
 800f59a:	4603      	mov	r3, r0
 800f59c:	72fb      	strb	r3, [r7, #11]

  return status;
 800f59e:	7afb      	ldrb	r3, [r7, #11]
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3710      	adds	r7, #16
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	40022000 	.word	0x40022000
 800f5ac:	40021000 	.word	0x40021000
 800f5b0:	08016b24 	.word	0x08016b24
 800f5b4:	20000168 	.word	0x20000168
 800f5b8:	20000174 	.word	0x20000174

0800f5bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b089      	sub	sp, #36	@ 0x24
 800f5c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	61fb      	str	r3, [r7, #28]
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f5ca:	4b3e      	ldr	r3, [pc, #248]	@ (800f6c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800f5cc:	689b      	ldr	r3, [r3, #8]
 800f5ce:	f003 030c 	and.w	r3, r3, #12
 800f5d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f5d4:	4b3b      	ldr	r3, [pc, #236]	@ (800f6c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	f003 0303 	and.w	r3, r3, #3
 800f5dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d005      	beq.n	800f5f0 <HAL_RCC_GetSysClockFreq+0x34>
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	2b0c      	cmp	r3, #12
 800f5e8:	d121      	bne.n	800f62e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d11e      	bne.n	800f62e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800f5f0:	4b34      	ldr	r3, [pc, #208]	@ (800f6c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f003 0308 	and.w	r3, r3, #8
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d107      	bne.n	800f60c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800f5fc:	4b31      	ldr	r3, [pc, #196]	@ (800f6c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800f5fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f602:	0a1b      	lsrs	r3, r3, #8
 800f604:	f003 030f 	and.w	r3, r3, #15
 800f608:	61fb      	str	r3, [r7, #28]
 800f60a:	e005      	b.n	800f618 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800f60c:	4b2d      	ldr	r3, [pc, #180]	@ (800f6c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	091b      	lsrs	r3, r3, #4
 800f612:	f003 030f 	and.w	r3, r3, #15
 800f616:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800f618:	4a2b      	ldr	r2, [pc, #172]	@ (800f6c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800f61a:	69fb      	ldr	r3, [r7, #28]
 800f61c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f620:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d10d      	bne.n	800f644 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f62c:	e00a      	b.n	800f644 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	2b04      	cmp	r3, #4
 800f632:	d102      	bne.n	800f63a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800f634:	4b25      	ldr	r3, [pc, #148]	@ (800f6cc <HAL_RCC_GetSysClockFreq+0x110>)
 800f636:	61bb      	str	r3, [r7, #24]
 800f638:	e004      	b.n	800f644 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	2b08      	cmp	r3, #8
 800f63e:	d101      	bne.n	800f644 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800f640:	4b23      	ldr	r3, [pc, #140]	@ (800f6d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800f642:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	2b0c      	cmp	r3, #12
 800f648:	d134      	bne.n	800f6b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800f64a:	4b1e      	ldr	r3, [pc, #120]	@ (800f6c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800f64c:	68db      	ldr	r3, [r3, #12]
 800f64e:	f003 0303 	and.w	r3, r3, #3
 800f652:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	2b02      	cmp	r3, #2
 800f658:	d003      	beq.n	800f662 <HAL_RCC_GetSysClockFreq+0xa6>
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	2b03      	cmp	r3, #3
 800f65e:	d003      	beq.n	800f668 <HAL_RCC_GetSysClockFreq+0xac>
 800f660:	e005      	b.n	800f66e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800f662:	4b1a      	ldr	r3, [pc, #104]	@ (800f6cc <HAL_RCC_GetSysClockFreq+0x110>)
 800f664:	617b      	str	r3, [r7, #20]
      break;
 800f666:	e005      	b.n	800f674 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800f668:	4b19      	ldr	r3, [pc, #100]	@ (800f6d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800f66a:	617b      	str	r3, [r7, #20]
      break;
 800f66c:	e002      	b.n	800f674 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800f66e:	69fb      	ldr	r3, [r7, #28]
 800f670:	617b      	str	r3, [r7, #20]
      break;
 800f672:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800f674:	4b13      	ldr	r3, [pc, #76]	@ (800f6c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800f676:	68db      	ldr	r3, [r3, #12]
 800f678:	091b      	lsrs	r3, r3, #4
 800f67a:	f003 0307 	and.w	r3, r3, #7
 800f67e:	3301      	adds	r3, #1
 800f680:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800f682:	4b10      	ldr	r3, [pc, #64]	@ (800f6c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	0a1b      	lsrs	r3, r3, #8
 800f688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f68c:	697a      	ldr	r2, [r7, #20]
 800f68e:	fb03 f202 	mul.w	r2, r3, r2
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	fbb2 f3f3 	udiv	r3, r2, r3
 800f698:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800f69a:	4b0a      	ldr	r3, [pc, #40]	@ (800f6c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800f69c:	68db      	ldr	r3, [r3, #12]
 800f69e:	0e5b      	lsrs	r3, r3, #25
 800f6a0:	f003 0303 	and.w	r3, r3, #3
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	005b      	lsls	r3, r3, #1
 800f6a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800f6aa:	697a      	ldr	r2, [r7, #20]
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800f6b4:	69bb      	ldr	r3, [r7, #24]
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3724      	adds	r7, #36	@ 0x24
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr
 800f6c2:	bf00      	nop
 800f6c4:	40021000 	.word	0x40021000
 800f6c8:	08016b3c 	.word	0x08016b3c
 800f6cc:	00f42400 	.word	0x00f42400
 800f6d0:	007a1200 	.word	0x007a1200

0800f6d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f6d8:	4b03      	ldr	r3, [pc, #12]	@ (800f6e8 <HAL_RCC_GetHCLKFreq+0x14>)
 800f6da:	681b      	ldr	r3, [r3, #0]
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr
 800f6e6:	bf00      	nop
 800f6e8:	20000168 	.word	0x20000168

0800f6ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800f6f0:	f7ff fff0 	bl	800f6d4 <HAL_RCC_GetHCLKFreq>
 800f6f4:	4602      	mov	r2, r0
 800f6f6:	4b06      	ldr	r3, [pc, #24]	@ (800f710 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f6f8:	689b      	ldr	r3, [r3, #8]
 800f6fa:	0a1b      	lsrs	r3, r3, #8
 800f6fc:	f003 0307 	and.w	r3, r3, #7
 800f700:	4904      	ldr	r1, [pc, #16]	@ (800f714 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f702:	5ccb      	ldrb	r3, [r1, r3]
 800f704:	f003 031f 	and.w	r3, r3, #31
 800f708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	40021000 	.word	0x40021000
 800f714:	08016b34 	.word	0x08016b34

0800f718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800f71c:	f7ff ffda 	bl	800f6d4 <HAL_RCC_GetHCLKFreq>
 800f720:	4602      	mov	r2, r0
 800f722:	4b06      	ldr	r3, [pc, #24]	@ (800f73c <HAL_RCC_GetPCLK2Freq+0x24>)
 800f724:	689b      	ldr	r3, [r3, #8]
 800f726:	0adb      	lsrs	r3, r3, #11
 800f728:	f003 0307 	and.w	r3, r3, #7
 800f72c:	4904      	ldr	r1, [pc, #16]	@ (800f740 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f72e:	5ccb      	ldrb	r3, [r1, r3]
 800f730:	f003 031f 	and.w	r3, r3, #31
 800f734:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f738:	4618      	mov	r0, r3
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	40021000 	.word	0x40021000
 800f740:	08016b34 	.word	0x08016b34

0800f744 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b086      	sub	sp, #24
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800f74c:	2300      	movs	r3, #0
 800f74e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800f750:	4b2a      	ldr	r3, [pc, #168]	@ (800f7fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d003      	beq.n	800f764 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800f75c:	f7fe fd8c 	bl	800e278 <HAL_PWREx_GetVoltageRange>
 800f760:	6178      	str	r0, [r7, #20]
 800f762:	e014      	b.n	800f78e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800f764:	4b25      	ldr	r3, [pc, #148]	@ (800f7fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f768:	4a24      	ldr	r2, [pc, #144]	@ (800f7fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f76a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f76e:	6593      	str	r3, [r2, #88]	@ 0x58
 800f770:	4b22      	ldr	r3, [pc, #136]	@ (800f7fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f778:	60fb      	str	r3, [r7, #12]
 800f77a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800f77c:	f7fe fd7c 	bl	800e278 <HAL_PWREx_GetVoltageRange>
 800f780:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800f782:	4b1e      	ldr	r3, [pc, #120]	@ (800f7fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f786:	4a1d      	ldr	r2, [pc, #116]	@ (800f7fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f78c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f794:	d10b      	bne.n	800f7ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2b80      	cmp	r3, #128	@ 0x80
 800f79a:	d919      	bls.n	800f7d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2ba0      	cmp	r3, #160	@ 0xa0
 800f7a0:	d902      	bls.n	800f7a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800f7a2:	2302      	movs	r3, #2
 800f7a4:	613b      	str	r3, [r7, #16]
 800f7a6:	e013      	b.n	800f7d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	613b      	str	r3, [r7, #16]
 800f7ac:	e010      	b.n	800f7d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2b80      	cmp	r3, #128	@ 0x80
 800f7b2:	d902      	bls.n	800f7ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800f7b4:	2303      	movs	r3, #3
 800f7b6:	613b      	str	r3, [r7, #16]
 800f7b8:	e00a      	b.n	800f7d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2b80      	cmp	r3, #128	@ 0x80
 800f7be:	d102      	bne.n	800f7c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800f7c0:	2302      	movs	r3, #2
 800f7c2:	613b      	str	r3, [r7, #16]
 800f7c4:	e004      	b.n	800f7d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2b70      	cmp	r3, #112	@ 0x70
 800f7ca:	d101      	bne.n	800f7d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800f7d0:	4b0b      	ldr	r3, [pc, #44]	@ (800f800 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f023 0207 	bic.w	r2, r3, #7
 800f7d8:	4909      	ldr	r1, [pc, #36]	@ (800f800 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	4313      	orrs	r3, r2
 800f7de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800f7e0:	4b07      	ldr	r3, [pc, #28]	@ (800f800 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f003 0307 	and.w	r3, r3, #7
 800f7e8:	693a      	ldr	r2, [r7, #16]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d001      	beq.n	800f7f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	e000      	b.n	800f7f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800f7f2:	2300      	movs	r3, #0
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3718      	adds	r7, #24
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}
 800f7fc:	40021000 	.word	0x40021000
 800f800:	40022000 	.word	0x40022000

0800f804 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b086      	sub	sp, #24
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f80c:	2300      	movs	r3, #0
 800f80e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f810:	2300      	movs	r3, #0
 800f812:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d041      	beq.n	800f8a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f824:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f828:	d02a      	beq.n	800f880 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800f82a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f82e:	d824      	bhi.n	800f87a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800f830:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f834:	d008      	beq.n	800f848 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800f836:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f83a:	d81e      	bhi.n	800f87a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d00a      	beq.n	800f856 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800f840:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f844:	d010      	beq.n	800f868 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f846:	e018      	b.n	800f87a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800f848:	4b86      	ldr	r3, [pc, #536]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f84a:	68db      	ldr	r3, [r3, #12]
 800f84c:	4a85      	ldr	r2, [pc, #532]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f84e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f852:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800f854:	e015      	b.n	800f882 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	3304      	adds	r3, #4
 800f85a:	2100      	movs	r1, #0
 800f85c:	4618      	mov	r0, r3
 800f85e:	f000 fabb 	bl	800fdd8 <RCCEx_PLLSAI1_Config>
 800f862:	4603      	mov	r3, r0
 800f864:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800f866:	e00c      	b.n	800f882 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	3320      	adds	r3, #32
 800f86c:	2100      	movs	r1, #0
 800f86e:	4618      	mov	r0, r3
 800f870:	f000 fba6 	bl	800ffc0 <RCCEx_PLLSAI2_Config>
 800f874:	4603      	mov	r3, r0
 800f876:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800f878:	e003      	b.n	800f882 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f87a:	2301      	movs	r3, #1
 800f87c:	74fb      	strb	r3, [r7, #19]
      break;
 800f87e:	e000      	b.n	800f882 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800f880:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f882:	7cfb      	ldrb	r3, [r7, #19]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d10b      	bne.n	800f8a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f888:	4b76      	ldr	r3, [pc, #472]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f88a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f88e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f896:	4973      	ldr	r1, [pc, #460]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f898:	4313      	orrs	r3, r2
 800f89a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800f89e:	e001      	b.n	800f8a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8a0:	7cfb      	ldrb	r3, [r7, #19]
 800f8a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d041      	beq.n	800f934 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f8b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f8b8:	d02a      	beq.n	800f910 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800f8ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f8be:	d824      	bhi.n	800f90a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800f8c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f8c4:	d008      	beq.n	800f8d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800f8c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f8ca:	d81e      	bhi.n	800f90a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d00a      	beq.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800f8d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f8d4:	d010      	beq.n	800f8f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800f8d6:	e018      	b.n	800f90a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800f8d8:	4b62      	ldr	r3, [pc, #392]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f8da:	68db      	ldr	r3, [r3, #12]
 800f8dc:	4a61      	ldr	r2, [pc, #388]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f8de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f8e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800f8e4:	e015      	b.n	800f912 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	3304      	adds	r3, #4
 800f8ea:	2100      	movs	r1, #0
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f000 fa73 	bl	800fdd8 <RCCEx_PLLSAI1_Config>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800f8f6:	e00c      	b.n	800f912 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	3320      	adds	r3, #32
 800f8fc:	2100      	movs	r1, #0
 800f8fe:	4618      	mov	r0, r3
 800f900:	f000 fb5e 	bl	800ffc0 <RCCEx_PLLSAI2_Config>
 800f904:	4603      	mov	r3, r0
 800f906:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800f908:	e003      	b.n	800f912 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f90a:	2301      	movs	r3, #1
 800f90c:	74fb      	strb	r3, [r7, #19]
      break;
 800f90e:	e000      	b.n	800f912 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800f910:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f912:	7cfb      	ldrb	r3, [r7, #19]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d10b      	bne.n	800f930 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f918:	4b52      	ldr	r3, [pc, #328]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f91a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f91e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f926:	494f      	ldr	r1, [pc, #316]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f928:	4313      	orrs	r3, r2
 800f92a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800f92e:	e001      	b.n	800f934 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f930:	7cfb      	ldrb	r3, [r7, #19]
 800f932:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	f000 80a0 	beq.w	800fa82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f942:	2300      	movs	r3, #0
 800f944:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800f946:	4b47      	ldr	r3, [pc, #284]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f94a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d101      	bne.n	800f956 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800f952:	2301      	movs	r3, #1
 800f954:	e000      	b.n	800f958 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800f956:	2300      	movs	r3, #0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d00d      	beq.n	800f978 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f95c:	4b41      	ldr	r3, [pc, #260]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f95e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f960:	4a40      	ldr	r2, [pc, #256]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f966:	6593      	str	r3, [r2, #88]	@ 0x58
 800f968:	4b3e      	ldr	r3, [pc, #248]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f96a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f96c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f970:	60bb      	str	r3, [r7, #8]
 800f972:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f974:	2301      	movs	r3, #1
 800f976:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f978:	4b3b      	ldr	r3, [pc, #236]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4a3a      	ldr	r2, [pc, #232]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800f97e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f982:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f984:	f7fa fcca 	bl	800a31c <HAL_GetTick>
 800f988:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800f98a:	e009      	b.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f98c:	f7fa fcc6 	bl	800a31c <HAL_GetTick>
 800f990:	4602      	mov	r2, r0
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	1ad3      	subs	r3, r2, r3
 800f996:	2b02      	cmp	r3, #2
 800f998:	d902      	bls.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800f99a:	2303      	movs	r3, #3
 800f99c:	74fb      	strb	r3, [r7, #19]
        break;
 800f99e:	e005      	b.n	800f9ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800f9a0:	4b31      	ldr	r3, [pc, #196]	@ (800fa68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d0ef      	beq.n	800f98c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800f9ac:	7cfb      	ldrb	r3, [r7, #19]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d15c      	bne.n	800fa6c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800f9b2:	4b2c      	ldr	r3, [pc, #176]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f9b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f9bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d01f      	beq.n	800fa04 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f9ca:	697a      	ldr	r2, [r7, #20]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d019      	beq.n	800fa04 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800f9d0:	4b24      	ldr	r3, [pc, #144]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f9d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f9da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f9dc:	4b21      	ldr	r3, [pc, #132]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f9de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9e2:	4a20      	ldr	r2, [pc, #128]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f9e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f9e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f9ec:	4b1d      	ldr	r3, [pc, #116]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f9ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9f2:	4a1c      	ldr	r2, [pc, #112]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f9f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f9f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800f9fc:	4a19      	ldr	r2, [pc, #100]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	f003 0301 	and.w	r3, r3, #1
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d016      	beq.n	800fa3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fa0e:	f7fa fc85 	bl	800a31c <HAL_GetTick>
 800fa12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fa14:	e00b      	b.n	800fa2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fa16:	f7fa fc81 	bl	800a31c <HAL_GetTick>
 800fa1a:	4602      	mov	r2, r0
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	1ad3      	subs	r3, r2, r3
 800fa20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d902      	bls.n	800fa2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800fa28:	2303      	movs	r3, #3
 800fa2a:	74fb      	strb	r3, [r7, #19]
            break;
 800fa2c:	e006      	b.n	800fa3c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fa2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800fa30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa34:	f003 0302 	and.w	r3, r3, #2
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d0ec      	beq.n	800fa16 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800fa3c:	7cfb      	ldrb	r3, [r7, #19]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d10c      	bne.n	800fa5c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800fa42:	4b08      	ldr	r3, [pc, #32]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800fa44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fa52:	4904      	ldr	r1, [pc, #16]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800fa54:	4313      	orrs	r3, r2
 800fa56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800fa5a:	e009      	b.n	800fa70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800fa5c:	7cfb      	ldrb	r3, [r7, #19]
 800fa5e:	74bb      	strb	r3, [r7, #18]
 800fa60:	e006      	b.n	800fa70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800fa62:	bf00      	nop
 800fa64:	40021000 	.word	0x40021000
 800fa68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa6c:	7cfb      	ldrb	r3, [r7, #19]
 800fa6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fa70:	7c7b      	ldrb	r3, [r7, #17]
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d105      	bne.n	800fa82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fa76:	4b9e      	ldr	r3, [pc, #632]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fa78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa7a:	4a9d      	ldr	r2, [pc, #628]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fa7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fa80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f003 0301 	and.w	r3, r3, #1
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d00a      	beq.n	800faa4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800fa8e:	4b98      	ldr	r3, [pc, #608]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fa90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fa94:	f023 0203 	bic.w	r2, r3, #3
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa9c:	4994      	ldr	r1, [pc, #592]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fa9e:	4313      	orrs	r3, r2
 800faa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f003 0302 	and.w	r3, r3, #2
 800faac:	2b00      	cmp	r3, #0
 800faae:	d00a      	beq.n	800fac6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800fab0:	4b8f      	ldr	r3, [pc, #572]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fab6:	f023 020c 	bic.w	r2, r3, #12
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fabe:	498c      	ldr	r1, [pc, #560]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fac0:	4313      	orrs	r3, r2
 800fac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	f003 0304 	and.w	r3, r3, #4
 800face:	2b00      	cmp	r3, #0
 800fad0:	d00a      	beq.n	800fae8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800fad2:	4b87      	ldr	r3, [pc, #540]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fad8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fae0:	4983      	ldr	r1, [pc, #524]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fae2:	4313      	orrs	r3, r2
 800fae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	f003 0308 	and.w	r3, r3, #8
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d00a      	beq.n	800fb0a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800faf4:	4b7e      	ldr	r3, [pc, #504]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800faf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fafa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb02:	497b      	ldr	r1, [pc, #492]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fb04:	4313      	orrs	r3, r2
 800fb06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f003 0310 	and.w	r3, r3, #16
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d00a      	beq.n	800fb2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800fb16:	4b76      	ldr	r3, [pc, #472]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fb18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fb24:	4972      	ldr	r1, [pc, #456]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fb26:	4313      	orrs	r3, r2
 800fb28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f003 0320 	and.w	r3, r3, #32
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d00a      	beq.n	800fb4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fb38:	4b6d      	ldr	r3, [pc, #436]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fb3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb46:	496a      	ldr	r1, [pc, #424]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fb48:	4313      	orrs	r3, r2
 800fb4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d00a      	beq.n	800fb70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fb5a:	4b65      	ldr	r3, [pc, #404]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fb5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fb68:	4961      	ldr	r1, [pc, #388]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fb6a:	4313      	orrs	r3, r2
 800fb6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d00a      	beq.n	800fb92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fb7c:	4b5c      	ldr	r3, [pc, #368]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fb7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fb8a:	4959      	ldr	r1, [pc, #356]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d00a      	beq.n	800fbb4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800fb9e:	4b54      	ldr	r3, [pc, #336]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fba4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbac:	4950      	ldr	r1, [pc, #320]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fbae:	4313      	orrs	r3, r2
 800fbb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d00a      	beq.n	800fbd6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800fbc0:	4b4b      	ldr	r3, [pc, #300]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fbc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fbc6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbce:	4948      	ldr	r1, [pc, #288]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d00a      	beq.n	800fbf8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800fbe2:	4b43      	ldr	r3, [pc, #268]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fbe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fbe8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbf0:	493f      	ldr	r1, [pc, #252]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fbf2:	4313      	orrs	r3, r2
 800fbf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d028      	beq.n	800fc56 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fc04:	4b3a      	ldr	r3, [pc, #232]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fc06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fc0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc12:	4937      	ldr	r1, [pc, #220]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fc14:	4313      	orrs	r3, r2
 800fc16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fc22:	d106      	bne.n	800fc32 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800fc24:	4b32      	ldr	r3, [pc, #200]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fc26:	68db      	ldr	r3, [r3, #12]
 800fc28:	4a31      	ldr	r2, [pc, #196]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fc2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fc2e:	60d3      	str	r3, [r2, #12]
 800fc30:	e011      	b.n	800fc56 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fc3a:	d10c      	bne.n	800fc56 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	3304      	adds	r3, #4
 800fc40:	2101      	movs	r1, #1
 800fc42:	4618      	mov	r0, r3
 800fc44:	f000 f8c8 	bl	800fdd8 <RCCEx_PLLSAI1_Config>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800fc4c:	7cfb      	ldrb	r3, [r7, #19]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d001      	beq.n	800fc56 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800fc52:	7cfb      	ldrb	r3, [r7, #19]
 800fc54:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d028      	beq.n	800fcb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800fc62:	4b23      	ldr	r3, [pc, #140]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fc64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fc68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc70:	491f      	ldr	r1, [pc, #124]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fc72:	4313      	orrs	r3, r2
 800fc74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fc80:	d106      	bne.n	800fc90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800fc82:	4b1b      	ldr	r3, [pc, #108]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fc84:	68db      	ldr	r3, [r3, #12]
 800fc86:	4a1a      	ldr	r2, [pc, #104]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fc88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fc8c:	60d3      	str	r3, [r2, #12]
 800fc8e:	e011      	b.n	800fcb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fc98:	d10c      	bne.n	800fcb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	3304      	adds	r3, #4
 800fc9e:	2101      	movs	r1, #1
 800fca0:	4618      	mov	r0, r3
 800fca2:	f000 f899 	bl	800fdd8 <RCCEx_PLLSAI1_Config>
 800fca6:	4603      	mov	r3, r0
 800fca8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800fcaa:	7cfb      	ldrb	r3, [r7, #19]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d001      	beq.n	800fcb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800fcb0:	7cfb      	ldrb	r3, [r7, #19]
 800fcb2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d02b      	beq.n	800fd18 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fcc0:	4b0b      	ldr	r3, [pc, #44]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fcc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fcc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fcce:	4908      	ldr	r1, [pc, #32]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fcd0:	4313      	orrs	r3, r2
 800fcd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fcda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fcde:	d109      	bne.n	800fcf4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800fce0:	4b03      	ldr	r3, [pc, #12]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fce2:	68db      	ldr	r3, [r3, #12]
 800fce4:	4a02      	ldr	r2, [pc, #8]	@ (800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800fce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fcea:	60d3      	str	r3, [r2, #12]
 800fcec:	e014      	b.n	800fd18 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800fcee:	bf00      	nop
 800fcf0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fcf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fcfc:	d10c      	bne.n	800fd18 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	3304      	adds	r3, #4
 800fd02:	2101      	movs	r1, #1
 800fd04:	4618      	mov	r0, r3
 800fd06:	f000 f867 	bl	800fdd8 <RCCEx_PLLSAI1_Config>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800fd0e:	7cfb      	ldrb	r3, [r7, #19]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d001      	beq.n	800fd18 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800fd14:	7cfb      	ldrb	r3, [r7, #19]
 800fd16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d02f      	beq.n	800fd84 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fd24:	4b2b      	ldr	r3, [pc, #172]	@ (800fdd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800fd26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fd2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd32:	4928      	ldr	r1, [pc, #160]	@ (800fdd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800fd34:	4313      	orrs	r3, r2
 800fd36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd42:	d10d      	bne.n	800fd60 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	3304      	adds	r3, #4
 800fd48:	2102      	movs	r1, #2
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f000 f844 	bl	800fdd8 <RCCEx_PLLSAI1_Config>
 800fd50:	4603      	mov	r3, r0
 800fd52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800fd54:	7cfb      	ldrb	r3, [r7, #19]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d014      	beq.n	800fd84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800fd5a:	7cfb      	ldrb	r3, [r7, #19]
 800fd5c:	74bb      	strb	r3, [r7, #18]
 800fd5e:	e011      	b.n	800fd84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fd68:	d10c      	bne.n	800fd84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	3320      	adds	r3, #32
 800fd6e:	2102      	movs	r1, #2
 800fd70:	4618      	mov	r0, r3
 800fd72:	f000 f925 	bl	800ffc0 <RCCEx_PLLSAI2_Config>
 800fd76:	4603      	mov	r3, r0
 800fd78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800fd7a:	7cfb      	ldrb	r3, [r7, #19]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d001      	beq.n	800fd84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800fd80:	7cfb      	ldrb	r3, [r7, #19]
 800fd82:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d00a      	beq.n	800fda6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fd90:	4b10      	ldr	r3, [pc, #64]	@ (800fdd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800fd92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fd96:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd9e:	490d      	ldr	r1, [pc, #52]	@ (800fdd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800fda0:	4313      	orrs	r3, r2
 800fda2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d00b      	beq.n	800fdca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fdb2:	4b08      	ldr	r3, [pc, #32]	@ (800fdd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800fdb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fdb8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fdc2:	4904      	ldr	r1, [pc, #16]	@ (800fdd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800fdc4:	4313      	orrs	r3, r2
 800fdc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800fdca:	7cbb      	ldrb	r3, [r7, #18]
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3718      	adds	r7, #24
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	40021000 	.word	0x40021000

0800fdd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b084      	sub	sp, #16
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fde2:	2300      	movs	r3, #0
 800fde4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800fde6:	4b75      	ldr	r3, [pc, #468]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800fde8:	68db      	ldr	r3, [r3, #12]
 800fdea:	f003 0303 	and.w	r3, r3, #3
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d018      	beq.n	800fe24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800fdf2:	4b72      	ldr	r3, [pc, #456]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	f003 0203 	and.w	r2, r3, #3
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d10d      	bne.n	800fe1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
       ||
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d009      	beq.n	800fe1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800fe0a:	4b6c      	ldr	r3, [pc, #432]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800fe0c:	68db      	ldr	r3, [r3, #12]
 800fe0e:	091b      	lsrs	r3, r3, #4
 800fe10:	f003 0307 	and.w	r3, r3, #7
 800fe14:	1c5a      	adds	r2, r3, #1
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	685b      	ldr	r3, [r3, #4]
       ||
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d047      	beq.n	800feae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800fe1e:	2301      	movs	r3, #1
 800fe20:	73fb      	strb	r3, [r7, #15]
 800fe22:	e044      	b.n	800feae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	2b03      	cmp	r3, #3
 800fe2a:	d018      	beq.n	800fe5e <RCCEx_PLLSAI1_Config+0x86>
 800fe2c:	2b03      	cmp	r3, #3
 800fe2e:	d825      	bhi.n	800fe7c <RCCEx_PLLSAI1_Config+0xa4>
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d002      	beq.n	800fe3a <RCCEx_PLLSAI1_Config+0x62>
 800fe34:	2b02      	cmp	r3, #2
 800fe36:	d009      	beq.n	800fe4c <RCCEx_PLLSAI1_Config+0x74>
 800fe38:	e020      	b.n	800fe7c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800fe3a:	4b60      	ldr	r3, [pc, #384]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f003 0302 	and.w	r3, r3, #2
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d11d      	bne.n	800fe82 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800fe46:	2301      	movs	r3, #1
 800fe48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fe4a:	e01a      	b.n	800fe82 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800fe4c:	4b5b      	ldr	r3, [pc, #364]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d116      	bne.n	800fe86 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800fe58:	2301      	movs	r3, #1
 800fe5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fe5c:	e013      	b.n	800fe86 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800fe5e:	4b57      	ldr	r3, [pc, #348]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d10f      	bne.n	800fe8a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800fe6a:	4b54      	ldr	r3, [pc, #336]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d109      	bne.n	800fe8a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800fe76:	2301      	movs	r3, #1
 800fe78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fe7a:	e006      	b.n	800fe8a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	73fb      	strb	r3, [r7, #15]
      break;
 800fe80:	e004      	b.n	800fe8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800fe82:	bf00      	nop
 800fe84:	e002      	b.n	800fe8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800fe86:	bf00      	nop
 800fe88:	e000      	b.n	800fe8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800fe8a:	bf00      	nop
    }

    if(status == HAL_OK)
 800fe8c:	7bfb      	ldrb	r3, [r7, #15]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d10d      	bne.n	800feae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800fe92:	4b4a      	ldr	r3, [pc, #296]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800fe94:	68db      	ldr	r3, [r3, #12]
 800fe96:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6819      	ldr	r1, [r3, #0]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	3b01      	subs	r3, #1
 800fea4:	011b      	lsls	r3, r3, #4
 800fea6:	430b      	orrs	r3, r1
 800fea8:	4944      	ldr	r1, [pc, #272]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800feaa:	4313      	orrs	r3, r2
 800feac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800feae:	7bfb      	ldrb	r3, [r7, #15]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d17d      	bne.n	800ffb0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800feb4:	4b41      	ldr	r3, [pc, #260]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	4a40      	ldr	r2, [pc, #256]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800feba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800febe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fec0:	f7fa fa2c 	bl	800a31c <HAL_GetTick>
 800fec4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800fec6:	e009      	b.n	800fedc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fec8:	f7fa fa28 	bl	800a31c <HAL_GetTick>
 800fecc:	4602      	mov	r2, r0
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	1ad3      	subs	r3, r2, r3
 800fed2:	2b02      	cmp	r3, #2
 800fed4:	d902      	bls.n	800fedc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800fed6:	2303      	movs	r3, #3
 800fed8:	73fb      	strb	r3, [r7, #15]
        break;
 800feda:	e005      	b.n	800fee8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800fedc:	4b37      	ldr	r3, [pc, #220]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d1ef      	bne.n	800fec8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800fee8:	7bfb      	ldrb	r3, [r7, #15]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d160      	bne.n	800ffb0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d111      	bne.n	800ff18 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800fef4:	4b31      	ldr	r3, [pc, #196]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800fef6:	691b      	ldr	r3, [r3, #16]
 800fef8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800fefc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	6892      	ldr	r2, [r2, #8]
 800ff04:	0211      	lsls	r1, r2, #8
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	68d2      	ldr	r2, [r2, #12]
 800ff0a:	0912      	lsrs	r2, r2, #4
 800ff0c:	0452      	lsls	r2, r2, #17
 800ff0e:	430a      	orrs	r2, r1
 800ff10:	492a      	ldr	r1, [pc, #168]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800ff12:	4313      	orrs	r3, r2
 800ff14:	610b      	str	r3, [r1, #16]
 800ff16:	e027      	b.n	800ff68 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	2b01      	cmp	r3, #1
 800ff1c:	d112      	bne.n	800ff44 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ff1e:	4b27      	ldr	r3, [pc, #156]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800ff20:	691b      	ldr	r3, [r3, #16]
 800ff22:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800ff26:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	6892      	ldr	r2, [r2, #8]
 800ff2e:	0211      	lsls	r1, r2, #8
 800ff30:	687a      	ldr	r2, [r7, #4]
 800ff32:	6912      	ldr	r2, [r2, #16]
 800ff34:	0852      	lsrs	r2, r2, #1
 800ff36:	3a01      	subs	r2, #1
 800ff38:	0552      	lsls	r2, r2, #21
 800ff3a:	430a      	orrs	r2, r1
 800ff3c:	491f      	ldr	r1, [pc, #124]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800ff3e:	4313      	orrs	r3, r2
 800ff40:	610b      	str	r3, [r1, #16]
 800ff42:	e011      	b.n	800ff68 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ff44:	4b1d      	ldr	r3, [pc, #116]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800ff46:	691b      	ldr	r3, [r3, #16]
 800ff48:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800ff4c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	6892      	ldr	r2, [r2, #8]
 800ff54:	0211      	lsls	r1, r2, #8
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	6952      	ldr	r2, [r2, #20]
 800ff5a:	0852      	lsrs	r2, r2, #1
 800ff5c:	3a01      	subs	r2, #1
 800ff5e:	0652      	lsls	r2, r2, #25
 800ff60:	430a      	orrs	r2, r1
 800ff62:	4916      	ldr	r1, [pc, #88]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800ff64:	4313      	orrs	r3, r2
 800ff66:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ff68:	4b14      	ldr	r3, [pc, #80]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	4a13      	ldr	r2, [pc, #76]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800ff6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ff72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ff74:	f7fa f9d2 	bl	800a31c <HAL_GetTick>
 800ff78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ff7a:	e009      	b.n	800ff90 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ff7c:	f7fa f9ce 	bl	800a31c <HAL_GetTick>
 800ff80:	4602      	mov	r2, r0
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	1ad3      	subs	r3, r2, r3
 800ff86:	2b02      	cmp	r3, #2
 800ff88:	d902      	bls.n	800ff90 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800ff8a:	2303      	movs	r3, #3
 800ff8c:	73fb      	strb	r3, [r7, #15]
          break;
 800ff8e:	e005      	b.n	800ff9c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ff90:	4b0a      	ldr	r3, [pc, #40]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d0ef      	beq.n	800ff7c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800ff9c:	7bfb      	ldrb	r3, [r7, #15]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d106      	bne.n	800ffb0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800ffa2:	4b06      	ldr	r3, [pc, #24]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800ffa4:	691a      	ldr	r2, [r3, #16]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	699b      	ldr	r3, [r3, #24]
 800ffaa:	4904      	ldr	r1, [pc, #16]	@ (800ffbc <RCCEx_PLLSAI1_Config+0x1e4>)
 800ffac:	4313      	orrs	r3, r2
 800ffae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800ffb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	bf00      	nop
 800ffbc:	40021000 	.word	0x40021000

0800ffc0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b084      	sub	sp, #16
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ffce:	4b6a      	ldr	r3, [pc, #424]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	f003 0303 	and.w	r3, r3, #3
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d018      	beq.n	801000c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800ffda:	4b67      	ldr	r3, [pc, #412]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ffdc:	68db      	ldr	r3, [r3, #12]
 800ffde:	f003 0203 	and.w	r2, r3, #3
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d10d      	bne.n	8010006 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
       ||
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d009      	beq.n	8010006 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800fff2:	4b61      	ldr	r3, [pc, #388]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	091b      	lsrs	r3, r3, #4
 800fff8:	f003 0307 	and.w	r3, r3, #7
 800fffc:	1c5a      	adds	r2, r3, #1
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	685b      	ldr	r3, [r3, #4]
       ||
 8010002:	429a      	cmp	r2, r3
 8010004:	d047      	beq.n	8010096 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8010006:	2301      	movs	r3, #1
 8010008:	73fb      	strb	r3, [r7, #15]
 801000a:	e044      	b.n	8010096 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	2b03      	cmp	r3, #3
 8010012:	d018      	beq.n	8010046 <RCCEx_PLLSAI2_Config+0x86>
 8010014:	2b03      	cmp	r3, #3
 8010016:	d825      	bhi.n	8010064 <RCCEx_PLLSAI2_Config+0xa4>
 8010018:	2b01      	cmp	r3, #1
 801001a:	d002      	beq.n	8010022 <RCCEx_PLLSAI2_Config+0x62>
 801001c:	2b02      	cmp	r3, #2
 801001e:	d009      	beq.n	8010034 <RCCEx_PLLSAI2_Config+0x74>
 8010020:	e020      	b.n	8010064 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010022:	4b55      	ldr	r3, [pc, #340]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	f003 0302 	and.w	r3, r3, #2
 801002a:	2b00      	cmp	r3, #0
 801002c:	d11d      	bne.n	801006a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 801002e:	2301      	movs	r3, #1
 8010030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010032:	e01a      	b.n	801006a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010034:	4b50      	ldr	r3, [pc, #320]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801003c:	2b00      	cmp	r3, #0
 801003e:	d116      	bne.n	801006e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8010040:	2301      	movs	r3, #1
 8010042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010044:	e013      	b.n	801006e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010046:	4b4c      	ldr	r3, [pc, #304]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801004e:	2b00      	cmp	r3, #0
 8010050:	d10f      	bne.n	8010072 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010052:	4b49      	ldr	r3, [pc, #292]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801005a:	2b00      	cmp	r3, #0
 801005c:	d109      	bne.n	8010072 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 801005e:	2301      	movs	r3, #1
 8010060:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010062:	e006      	b.n	8010072 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8010064:	2301      	movs	r3, #1
 8010066:	73fb      	strb	r3, [r7, #15]
      break;
 8010068:	e004      	b.n	8010074 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801006a:	bf00      	nop
 801006c:	e002      	b.n	8010074 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801006e:	bf00      	nop
 8010070:	e000      	b.n	8010074 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010072:	bf00      	nop
    }

    if(status == HAL_OK)
 8010074:	7bfb      	ldrb	r3, [r7, #15]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d10d      	bne.n	8010096 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801007a:	4b3f      	ldr	r3, [pc, #252]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 801007c:	68db      	ldr	r3, [r3, #12]
 801007e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6819      	ldr	r1, [r3, #0]
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	3b01      	subs	r3, #1
 801008c:	011b      	lsls	r3, r3, #4
 801008e:	430b      	orrs	r3, r1
 8010090:	4939      	ldr	r1, [pc, #228]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010092:	4313      	orrs	r3, r2
 8010094:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010096:	7bfb      	ldrb	r3, [r7, #15]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d167      	bne.n	801016c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 801009c:	4b36      	ldr	r3, [pc, #216]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	4a35      	ldr	r2, [pc, #212]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 80100a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80100a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80100a8:	f7fa f938 	bl	800a31c <HAL_GetTick>
 80100ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80100ae:	e009      	b.n	80100c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80100b0:	f7fa f934 	bl	800a31c <HAL_GetTick>
 80100b4:	4602      	mov	r2, r0
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	1ad3      	subs	r3, r2, r3
 80100ba:	2b02      	cmp	r3, #2
 80100bc:	d902      	bls.n	80100c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80100be:	2303      	movs	r3, #3
 80100c0:	73fb      	strb	r3, [r7, #15]
        break;
 80100c2:	e005      	b.n	80100d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80100c4:	4b2c      	ldr	r3, [pc, #176]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d1ef      	bne.n	80100b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80100d0:	7bfb      	ldrb	r3, [r7, #15]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d14a      	bne.n	801016c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d111      	bne.n	8010100 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80100dc:	4b26      	ldr	r3, [pc, #152]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 80100de:	695b      	ldr	r3, [r3, #20]
 80100e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80100e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80100e8:	687a      	ldr	r2, [r7, #4]
 80100ea:	6892      	ldr	r2, [r2, #8]
 80100ec:	0211      	lsls	r1, r2, #8
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	68d2      	ldr	r2, [r2, #12]
 80100f2:	0912      	lsrs	r2, r2, #4
 80100f4:	0452      	lsls	r2, r2, #17
 80100f6:	430a      	orrs	r2, r1
 80100f8:	491f      	ldr	r1, [pc, #124]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 80100fa:	4313      	orrs	r3, r2
 80100fc:	614b      	str	r3, [r1, #20]
 80100fe:	e011      	b.n	8010124 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010100:	4b1d      	ldr	r3, [pc, #116]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010102:	695b      	ldr	r3, [r3, #20]
 8010104:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8010108:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801010c:	687a      	ldr	r2, [r7, #4]
 801010e:	6892      	ldr	r2, [r2, #8]
 8010110:	0211      	lsls	r1, r2, #8
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	6912      	ldr	r2, [r2, #16]
 8010116:	0852      	lsrs	r2, r2, #1
 8010118:	3a01      	subs	r2, #1
 801011a:	0652      	lsls	r2, r2, #25
 801011c:	430a      	orrs	r2, r1
 801011e:	4916      	ldr	r1, [pc, #88]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010120:	4313      	orrs	r3, r2
 8010122:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8010124:	4b14      	ldr	r3, [pc, #80]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	4a13      	ldr	r2, [pc, #76]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 801012a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801012e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010130:	f7fa f8f4 	bl	800a31c <HAL_GetTick>
 8010134:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010136:	e009      	b.n	801014c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010138:	f7fa f8f0 	bl	800a31c <HAL_GetTick>
 801013c:	4602      	mov	r2, r0
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	1ad3      	subs	r3, r2, r3
 8010142:	2b02      	cmp	r3, #2
 8010144:	d902      	bls.n	801014c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8010146:	2303      	movs	r3, #3
 8010148:	73fb      	strb	r3, [r7, #15]
          break;
 801014a:	e005      	b.n	8010158 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801014c:	4b0a      	ldr	r3, [pc, #40]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010154:	2b00      	cmp	r3, #0
 8010156:	d0ef      	beq.n	8010138 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8010158:	7bfb      	ldrb	r3, [r7, #15]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d106      	bne.n	801016c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 801015e:	4b06      	ldr	r3, [pc, #24]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010160:	695a      	ldr	r2, [r3, #20]
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	695b      	ldr	r3, [r3, #20]
 8010166:	4904      	ldr	r1, [pc, #16]	@ (8010178 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010168:	4313      	orrs	r3, r2
 801016a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 801016c:	7bfb      	ldrb	r3, [r7, #15]
}
 801016e:	4618      	mov	r0, r3
 8010170:	3710      	adds	r7, #16
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}
 8010176:	bf00      	nop
 8010178:	40021000 	.word	0x40021000

0801017c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b084      	sub	sp, #16
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010184:	2301      	movs	r3, #1
 8010186:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d079      	beq.n	8010282 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010194:	b2db      	uxtb	r3, r3
 8010196:	2b00      	cmp	r3, #0
 8010198:	d106      	bne.n	80101a8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f7f6 fc56 	bl	8006a54 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2202      	movs	r2, #2
 80101ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	68db      	ldr	r3, [r3, #12]
 80101b6:	f003 0310 	and.w	r3, r3, #16
 80101ba:	2b10      	cmp	r3, #16
 80101bc:	d058      	beq.n	8010270 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	22ca      	movs	r2, #202	@ 0xca
 80101c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2253      	movs	r2, #83	@ 0x53
 80101cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f000 fb82 	bl	80108d8 <RTC_EnterInitMode>
 80101d4:	4603      	mov	r3, r0
 80101d6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80101d8:	7bfb      	ldrb	r3, [r7, #15]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d127      	bne.n	801022e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	689b      	ldr	r3, [r3, #8]
 80101e4:	687a      	ldr	r2, [r7, #4]
 80101e6:	6812      	ldr	r2, [r2, #0]
 80101e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80101ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80101f0:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	6899      	ldr	r1, [r3, #8]
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	685a      	ldr	r2, [r3, #4]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	691b      	ldr	r3, [r3, #16]
 8010200:	431a      	orrs	r2, r3
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	699b      	ldr	r3, [r3, #24]
 8010206:	431a      	orrs	r2, r3
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	430a      	orrs	r2, r1
 801020e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	68d2      	ldr	r2, [r2, #12]
 8010218:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	6919      	ldr	r1, [r3, #16]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	689b      	ldr	r3, [r3, #8]
 8010224:	041a      	lsls	r2, r3, #16
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	430a      	orrs	r2, r1
 801022c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f000 fb86 	bl	8010940 <RTC_ExitInitMode>
 8010234:	4603      	mov	r3, r0
 8010236:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010238:	7bfb      	ldrb	r3, [r7, #15]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d113      	bne.n	8010266 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	f022 0203 	bic.w	r2, r2, #3
 801024c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	69da      	ldr	r2, [r3, #28]
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	695b      	ldr	r3, [r3, #20]
 801025c:	431a      	orrs	r2, r3
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	430a      	orrs	r2, r1
 8010264:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	22ff      	movs	r2, #255	@ 0xff
 801026c:	625a      	str	r2, [r3, #36]	@ 0x24
 801026e:	e001      	b.n	8010274 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8010270:	2300      	movs	r3, #0
 8010272:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8010274:	7bfb      	ldrb	r3, [r7, #15]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d103      	bne.n	8010282 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2201      	movs	r2, #1
 801027e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8010282:	7bfb      	ldrb	r3, [r7, #15]
}
 8010284:	4618      	mov	r0, r3
 8010286:	3710      	adds	r7, #16
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801028c:	b590      	push	{r4, r7, lr}
 801028e:	b087      	sub	sp, #28
 8010290:	af00      	add	r7, sp, #0
 8010292:	60f8      	str	r0, [r7, #12]
 8010294:	60b9      	str	r1, [r7, #8]
 8010296:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d101      	bne.n	80102a6 <HAL_RTC_SetTime+0x1a>
 80102a2:	2302      	movs	r3, #2
 80102a4:	e08b      	b.n	80103be <HAL_RTC_SetTime+0x132>
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2201      	movs	r2, #1
 80102aa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2202      	movs	r2, #2
 80102b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	22ca      	movs	r2, #202	@ 0xca
 80102bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2253      	movs	r2, #83	@ 0x53
 80102c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80102c6:	68f8      	ldr	r0, [r7, #12]
 80102c8:	f000 fb06 	bl	80108d8 <RTC_EnterInitMode>
 80102cc:	4603      	mov	r3, r0
 80102ce:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80102d0:	7cfb      	ldrb	r3, [r7, #19]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d163      	bne.n	801039e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d126      	bne.n	801032a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	689b      	ldr	r3, [r3, #8]
 80102e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d102      	bne.n	80102f0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	2200      	movs	r2, #0
 80102ee:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	781b      	ldrb	r3, [r3, #0]
 80102f4:	4618      	mov	r0, r3
 80102f6:	f000 fb61 	bl	80109bc <RTC_ByteToBcd2>
 80102fa:	4603      	mov	r3, r0
 80102fc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	785b      	ldrb	r3, [r3, #1]
 8010302:	4618      	mov	r0, r3
 8010304:	f000 fb5a 	bl	80109bc <RTC_ByteToBcd2>
 8010308:	4603      	mov	r3, r0
 801030a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 801030c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	789b      	ldrb	r3, [r3, #2]
 8010312:	4618      	mov	r0, r3
 8010314:	f000 fb52 	bl	80109bc <RTC_ByteToBcd2>
 8010318:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801031a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	78db      	ldrb	r3, [r3, #3]
 8010322:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010324:	4313      	orrs	r3, r2
 8010326:	617b      	str	r3, [r7, #20]
 8010328:	e018      	b.n	801035c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	689b      	ldr	r3, [r3, #8]
 8010330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010334:	2b00      	cmp	r3, #0
 8010336:	d102      	bne.n	801033e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	2200      	movs	r2, #0
 801033c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	785b      	ldrb	r3, [r3, #1]
 8010348:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 801034a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 801034c:	68ba      	ldr	r2, [r7, #8]
 801034e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010350:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	78db      	ldrb	r3, [r3, #3]
 8010356:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010358:	4313      	orrs	r3, r2
 801035a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681a      	ldr	r2, [r3, #0]
 8010360:	697b      	ldr	r3, [r7, #20]
 8010362:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8010366:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 801036a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	689a      	ldr	r2, [r3, #8]
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801037a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	6899      	ldr	r1, [r3, #8]
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	68da      	ldr	r2, [r3, #12]
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	691b      	ldr	r3, [r3, #16]
 801038a:	431a      	orrs	r2, r3
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	430a      	orrs	r2, r1
 8010392:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010394:	68f8      	ldr	r0, [r7, #12]
 8010396:	f000 fad3 	bl	8010940 <RTC_ExitInitMode>
 801039a:	4603      	mov	r3, r0
 801039c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	22ff      	movs	r2, #255	@ 0xff
 80103a4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80103a6:	7cfb      	ldrb	r3, [r7, #19]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d103      	bne.n	80103b4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	2201      	movs	r2, #1
 80103b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2200      	movs	r2, #0
 80103b8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80103bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80103be:	4618      	mov	r0, r3
 80103c0:	371c      	adds	r7, #28
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd90      	pop	{r4, r7, pc}

080103c6 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80103c6:	b580      	push	{r7, lr}
 80103c8:	b086      	sub	sp, #24
 80103ca:	af00      	add	r7, sp, #0
 80103cc:	60f8      	str	r0, [r7, #12]
 80103ce:	60b9      	str	r1, [r7, #8]
 80103d0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	691b      	ldr	r3, [r3, #16]
 80103e2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80103f4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80103f8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	0c1b      	lsrs	r3, r3, #16
 80103fe:	b2db      	uxtb	r3, r3
 8010400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010404:	b2da      	uxtb	r2, r3
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	0a1b      	lsrs	r3, r3, #8
 801040e:	b2db      	uxtb	r3, r3
 8010410:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010414:	b2da      	uxtb	r2, r3
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	b2db      	uxtb	r3, r3
 801041e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010422:	b2da      	uxtb	r2, r3
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	0d9b      	lsrs	r3, r3, #22
 801042c:	b2db      	uxtb	r3, r3
 801042e:	f003 0301 	and.w	r3, r3, #1
 8010432:	b2da      	uxtb	r2, r3
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d11a      	bne.n	8010474 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	4618      	mov	r0, r3
 8010444:	f000 fada 	bl	80109fc <RTC_Bcd2ToByte>
 8010448:	4603      	mov	r3, r0
 801044a:	461a      	mov	r2, r3
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	785b      	ldrb	r3, [r3, #1]
 8010454:	4618      	mov	r0, r3
 8010456:	f000 fad1 	bl	80109fc <RTC_Bcd2ToByte>
 801045a:	4603      	mov	r3, r0
 801045c:	461a      	mov	r2, r3
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	789b      	ldrb	r3, [r3, #2]
 8010466:	4618      	mov	r0, r3
 8010468:	f000 fac8 	bl	80109fc <RTC_Bcd2ToByte>
 801046c:	4603      	mov	r3, r0
 801046e:	461a      	mov	r2, r3
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8010474:	2300      	movs	r3, #0
}
 8010476:	4618      	mov	r0, r3
 8010478:	3718      	adds	r7, #24
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}

0801047e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801047e:	b590      	push	{r4, r7, lr}
 8010480:	b087      	sub	sp, #28
 8010482:	af00      	add	r7, sp, #0
 8010484:	60f8      	str	r0, [r7, #12]
 8010486:	60b9      	str	r1, [r7, #8]
 8010488:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010490:	2b01      	cmp	r3, #1
 8010492:	d101      	bne.n	8010498 <HAL_RTC_SetDate+0x1a>
 8010494:	2302      	movs	r3, #2
 8010496:	e075      	b.n	8010584 <HAL_RTC_SetDate+0x106>
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2201      	movs	r2, #1
 801049c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2202      	movs	r2, #2
 80104a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d10e      	bne.n	80104cc <HAL_RTC_SetDate+0x4e>
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	785b      	ldrb	r3, [r3, #1]
 80104b2:	f003 0310 	and.w	r3, r3, #16
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d008      	beq.n	80104cc <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	785b      	ldrb	r3, [r3, #1]
 80104be:	f023 0310 	bic.w	r3, r3, #16
 80104c2:	b2db      	uxtb	r3, r3
 80104c4:	330a      	adds	r3, #10
 80104c6:	b2da      	uxtb	r2, r3
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d11c      	bne.n	801050c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	78db      	ldrb	r3, [r3, #3]
 80104d6:	4618      	mov	r0, r3
 80104d8:	f000 fa70 	bl	80109bc <RTC_ByteToBcd2>
 80104dc:	4603      	mov	r3, r0
 80104de:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	785b      	ldrb	r3, [r3, #1]
 80104e4:	4618      	mov	r0, r3
 80104e6:	f000 fa69 	bl	80109bc <RTC_ByteToBcd2>
 80104ea:	4603      	mov	r3, r0
 80104ec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80104ee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	789b      	ldrb	r3, [r3, #2]
 80104f4:	4618      	mov	r0, r3
 80104f6:	f000 fa61 	bl	80109bc <RTC_ByteToBcd2>
 80104fa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80104fc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010506:	4313      	orrs	r3, r2
 8010508:	617b      	str	r3, [r7, #20]
 801050a:	e00e      	b.n	801052a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	78db      	ldrb	r3, [r3, #3]
 8010510:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	785b      	ldrb	r3, [r3, #1]
 8010516:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010518:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 801051a:	68ba      	ldr	r2, [r7, #8]
 801051c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 801051e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010526:	4313      	orrs	r3, r2
 8010528:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	22ca      	movs	r2, #202	@ 0xca
 8010530:	625a      	str	r2, [r3, #36]	@ 0x24
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	2253      	movs	r2, #83	@ 0x53
 8010538:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801053a:	68f8      	ldr	r0, [r7, #12]
 801053c:	f000 f9cc 	bl	80108d8 <RTC_EnterInitMode>
 8010540:	4603      	mov	r3, r0
 8010542:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010544:	7cfb      	ldrb	r3, [r7, #19]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d10c      	bne.n	8010564 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	681a      	ldr	r2, [r3, #0]
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010554:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010558:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801055a:	68f8      	ldr	r0, [r7, #12]
 801055c:	f000 f9f0 	bl	8010940 <RTC_ExitInitMode>
 8010560:	4603      	mov	r3, r0
 8010562:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	22ff      	movs	r2, #255	@ 0xff
 801056a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 801056c:	7cfb      	ldrb	r3, [r7, #19]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d103      	bne.n	801057a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	2201      	movs	r2, #1
 8010576:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2200      	movs	r2, #0
 801057e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010582:	7cfb      	ldrb	r3, [r7, #19]
}
 8010584:	4618      	mov	r0, r3
 8010586:	371c      	adds	r7, #28
 8010588:	46bd      	mov	sp, r7
 801058a:	bd90      	pop	{r4, r7, pc}

0801058c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 801058c:	b590      	push	{r4, r7, lr}
 801058e:	b089      	sub	sp, #36	@ 0x24
 8010590:	af00      	add	r7, sp, #0
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	60b9      	str	r1, [r7, #8]
 8010596:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801059e:	2b01      	cmp	r3, #1
 80105a0:	d101      	bne.n	80105a6 <HAL_RTC_SetAlarm_IT+0x1a>
 80105a2:	2302      	movs	r3, #2
 80105a4:	e127      	b.n	80107f6 <HAL_RTC_SetAlarm_IT+0x26a>
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	2201      	movs	r2, #1
 80105aa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2202      	movs	r2, #2
 80105b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d137      	bne.n	801062c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	689b      	ldr	r3, [r3, #8]
 80105c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d102      	bne.n	80105d0 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	2200      	movs	r2, #0
 80105ce:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	4618      	mov	r0, r3
 80105d6:	f000 f9f1 	bl	80109bc <RTC_ByteToBcd2>
 80105da:	4603      	mov	r3, r0
 80105dc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	785b      	ldrb	r3, [r3, #1]
 80105e2:	4618      	mov	r0, r3
 80105e4:	f000 f9ea 	bl	80109bc <RTC_ByteToBcd2>
 80105e8:	4603      	mov	r3, r0
 80105ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80105ec:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	789b      	ldrb	r3, [r3, #2]
 80105f2:	4618      	mov	r0, r3
 80105f4:	f000 f9e2 	bl	80109bc <RTC_ByteToBcd2>
 80105f8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80105fa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	78db      	ldrb	r3, [r3, #3]
 8010602:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8010604:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801060e:	4618      	mov	r0, r3
 8010610:	f000 f9d4 	bl	80109bc <RTC_ByteToBcd2>
 8010614:	4603      	mov	r3, r0
 8010616:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010618:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8010620:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010626:	4313      	orrs	r3, r2
 8010628:	61fb      	str	r3, [r7, #28]
 801062a:	e023      	b.n	8010674 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	689b      	ldr	r3, [r3, #8]
 8010632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010636:	2b00      	cmp	r3, #0
 8010638:	d102      	bne.n	8010640 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	2200      	movs	r2, #0
 801063e:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	785b      	ldrb	r3, [r3, #1]
 801064a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801064c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801064e:	68ba      	ldr	r2, [r7, #8]
 8010650:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010652:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	78db      	ldrb	r3, [r3, #3]
 8010658:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801065a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010662:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010664:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801066a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010670:	4313      	orrs	r3, r2
 8010672:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	685a      	ldr	r2, [r3, #4]
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	69db      	ldr	r3, [r3, #28]
 801067c:	4313      	orrs	r3, r2
 801067e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	22ca      	movs	r2, #202	@ 0xca
 8010686:	625a      	str	r2, [r3, #36]	@ 0x24
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2253      	movs	r2, #83	@ 0x53
 801068e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010698:	d14a      	bne.n	8010730 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	689a      	ldr	r2, [r3, #8]
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80106a8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	68db      	ldr	r3, [r3, #12]
 80106b0:	b2da      	uxtb	r2, r3
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80106ba:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80106bc:	f7f9 fe2e 	bl	800a31c <HAL_GetTick>
 80106c0:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80106c2:	e015      	b.n	80106f0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80106c4:	f7f9 fe2a 	bl	800a31c <HAL_GetTick>
 80106c8:	4602      	mov	r2, r0
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	1ad3      	subs	r3, r2, r3
 80106ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80106d2:	d90d      	bls.n	80106f0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	22ff      	movs	r2, #255	@ 0xff
 80106da:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	2203      	movs	r2, #3
 80106e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	2200      	movs	r2, #0
 80106e8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80106ec:	2303      	movs	r3, #3
 80106ee:	e082      	b.n	80107f6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	68db      	ldr	r3, [r3, #12]
 80106f6:	f003 0301 	and.w	r3, r3, #1
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d0e2      	beq.n	80106c4 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	69fa      	ldr	r2, [r7, #28]
 8010704:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	69ba      	ldr	r2, [r7, #24]
 801070c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	689a      	ldr	r2, [r3, #8]
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801071c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	689a      	ldr	r2, [r3, #8]
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801072c:	609a      	str	r2, [r3, #8]
 801072e:	e049      	b.n	80107c4 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	689a      	ldr	r2, [r3, #8]
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 801073e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	68db      	ldr	r3, [r3, #12]
 8010746:	b2da      	uxtb	r2, r3
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8010750:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8010752:	f7f9 fde3 	bl	800a31c <HAL_GetTick>
 8010756:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8010758:	e015      	b.n	8010786 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801075a:	f7f9 fddf 	bl	800a31c <HAL_GetTick>
 801075e:	4602      	mov	r2, r0
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	1ad3      	subs	r3, r2, r3
 8010764:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010768:	d90d      	bls.n	8010786 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	22ff      	movs	r2, #255	@ 0xff
 8010770:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2203      	movs	r2, #3
 8010776:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	2200      	movs	r2, #0
 801077e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8010782:	2303      	movs	r3, #3
 8010784:	e037      	b.n	80107f6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	68db      	ldr	r3, [r3, #12]
 801078c:	f003 0302 	and.w	r3, r3, #2
 8010790:	2b00      	cmp	r3, #0
 8010792:	d0e2      	beq.n	801075a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	69fa      	ldr	r2, [r7, #28]
 801079a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	69ba      	ldr	r2, [r7, #24]
 80107a2:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	689a      	ldr	r2, [r3, #8]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80107b2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	689a      	ldr	r2, [r3, #8]
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80107c2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80107c4:	4b0e      	ldr	r3, [pc, #56]	@ (8010800 <HAL_RTC_SetAlarm_IT+0x274>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	4a0d      	ldr	r2, [pc, #52]	@ (8010800 <HAL_RTC_SetAlarm_IT+0x274>)
 80107ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80107ce:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80107d0:	4b0b      	ldr	r3, [pc, #44]	@ (8010800 <HAL_RTC_SetAlarm_IT+0x274>)
 80107d2:	689b      	ldr	r3, [r3, #8]
 80107d4:	4a0a      	ldr	r2, [pc, #40]	@ (8010800 <HAL_RTC_SetAlarm_IT+0x274>)
 80107d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80107da:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	22ff      	movs	r2, #255	@ 0xff
 80107e2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	2201      	movs	r2, #1
 80107e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	2200      	movs	r2, #0
 80107f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80107f4:	2300      	movs	r3, #0
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3724      	adds	r7, #36	@ 0x24
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd90      	pop	{r4, r7, pc}
 80107fe:	bf00      	nop
 8010800:	40010400 	.word	0x40010400

08010804 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 801080c:	4b1f      	ldr	r3, [pc, #124]	@ (801088c <HAL_RTC_AlarmIRQHandler+0x88>)
 801080e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8010812:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	689b      	ldr	r3, [r3, #8]
 801081a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801081e:	2b00      	cmp	r3, #0
 8010820:	d012      	beq.n	8010848 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	68db      	ldr	r3, [r3, #12]
 8010828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801082c:	2b00      	cmp	r3, #0
 801082e:	d00b      	beq.n	8010848 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	68db      	ldr	r3, [r3, #12]
 8010836:	b2da      	uxtb	r2, r3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8010840:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f7f1 fcb0 	bl	80021a8 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	689b      	ldr	r3, [r3, #8]
 801084e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010852:	2b00      	cmp	r3, #0
 8010854:	d012      	beq.n	801087c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	68db      	ldr	r3, [r3, #12]
 801085c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010860:	2b00      	cmp	r3, #0
 8010862:	d00b      	beq.n	801087c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	68db      	ldr	r3, [r3, #12]
 801086a:	b2da      	uxtb	r2, r3
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8010874:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f000 f8da 	bl	8010a30 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2201      	movs	r2, #1
 8010880:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8010884:	bf00      	nop
 8010886:	3708      	adds	r7, #8
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	40010400 	.word	0x40010400

08010890 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	4a0d      	ldr	r2, [pc, #52]	@ (80108d4 <HAL_RTC_WaitForSynchro+0x44>)
 801089e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80108a0:	f7f9 fd3c 	bl	800a31c <HAL_GetTick>
 80108a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80108a6:	e009      	b.n	80108bc <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80108a8:	f7f9 fd38 	bl	800a31c <HAL_GetTick>
 80108ac:	4602      	mov	r2, r0
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	1ad3      	subs	r3, r2, r3
 80108b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80108b6:	d901      	bls.n	80108bc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80108b8:	2303      	movs	r3, #3
 80108ba:	e007      	b.n	80108cc <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	68db      	ldr	r3, [r3, #12]
 80108c2:	f003 0320 	and.w	r3, r3, #32
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d0ee      	beq.n	80108a8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80108ca:	2300      	movs	r3, #0
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3710      	adds	r7, #16
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	0003ff5f 	.word	0x0003ff5f

080108d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80108e0:	2300      	movs	r3, #0
 80108e2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	68db      	ldr	r3, [r3, #12]
 80108ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d120      	bne.n	8010934 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	f04f 32ff 	mov.w	r2, #4294967295
 80108fa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80108fc:	f7f9 fd0e 	bl	800a31c <HAL_GetTick>
 8010900:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010902:	e00d      	b.n	8010920 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010904:	f7f9 fd0a 	bl	800a31c <HAL_GetTick>
 8010908:	4602      	mov	r2, r0
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	1ad3      	subs	r3, r2, r3
 801090e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010912:	d905      	bls.n	8010920 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8010914:	2303      	movs	r3, #3
 8010916:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2203      	movs	r2, #3
 801091c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	68db      	ldr	r3, [r3, #12]
 8010926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801092a:	2b00      	cmp	r3, #0
 801092c:	d102      	bne.n	8010934 <RTC_EnterInitMode+0x5c>
 801092e:	7bfb      	ldrb	r3, [r7, #15]
 8010930:	2b03      	cmp	r3, #3
 8010932:	d1e7      	bne.n	8010904 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8010934:	7bfb      	ldrb	r3, [r7, #15]
}
 8010936:	4618      	mov	r0, r3
 8010938:	3710      	adds	r7, #16
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}
	...

08010940 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010948:	2300      	movs	r3, #0
 801094a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 801094c:	4b1a      	ldr	r3, [pc, #104]	@ (80109b8 <RTC_ExitInitMode+0x78>)
 801094e:	68db      	ldr	r3, [r3, #12]
 8010950:	4a19      	ldr	r2, [pc, #100]	@ (80109b8 <RTC_ExitInitMode+0x78>)
 8010952:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010956:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8010958:	4b17      	ldr	r3, [pc, #92]	@ (80109b8 <RTC_ExitInitMode+0x78>)
 801095a:	689b      	ldr	r3, [r3, #8]
 801095c:	f003 0320 	and.w	r3, r3, #32
 8010960:	2b00      	cmp	r3, #0
 8010962:	d10c      	bne.n	801097e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f7ff ff93 	bl	8010890 <HAL_RTC_WaitForSynchro>
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d01e      	beq.n	80109ae <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2203      	movs	r2, #3
 8010974:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8010978:	2303      	movs	r3, #3
 801097a:	73fb      	strb	r3, [r7, #15]
 801097c:	e017      	b.n	80109ae <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801097e:	4b0e      	ldr	r3, [pc, #56]	@ (80109b8 <RTC_ExitInitMode+0x78>)
 8010980:	689b      	ldr	r3, [r3, #8]
 8010982:	4a0d      	ldr	r2, [pc, #52]	@ (80109b8 <RTC_ExitInitMode+0x78>)
 8010984:	f023 0320 	bic.w	r3, r3, #32
 8010988:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7ff ff80 	bl	8010890 <HAL_RTC_WaitForSynchro>
 8010990:	4603      	mov	r3, r0
 8010992:	2b00      	cmp	r3, #0
 8010994:	d005      	beq.n	80109a2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2203      	movs	r2, #3
 801099a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 801099e:	2303      	movs	r3, #3
 80109a0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80109a2:	4b05      	ldr	r3, [pc, #20]	@ (80109b8 <RTC_ExitInitMode+0x78>)
 80109a4:	689b      	ldr	r3, [r3, #8]
 80109a6:	4a04      	ldr	r2, [pc, #16]	@ (80109b8 <RTC_ExitInitMode+0x78>)
 80109a8:	f043 0320 	orr.w	r3, r3, #32
 80109ac:	6093      	str	r3, [r2, #8]
  }

  return status;
 80109ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3710      	adds	r7, #16
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}
 80109b8:	40002800 	.word	0x40002800

080109bc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80109bc:	b480      	push	{r7}
 80109be:	b085      	sub	sp, #20
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	4603      	mov	r3, r0
 80109c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80109c6:	2300      	movs	r3, #0
 80109c8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80109ca:	79fb      	ldrb	r3, [r7, #7]
 80109cc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80109ce:	e005      	b.n	80109dc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	3301      	adds	r3, #1
 80109d4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80109d6:	7afb      	ldrb	r3, [r7, #11]
 80109d8:	3b0a      	subs	r3, #10
 80109da:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80109dc:	7afb      	ldrb	r3, [r7, #11]
 80109de:	2b09      	cmp	r3, #9
 80109e0:	d8f6      	bhi.n	80109d0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	b2db      	uxtb	r3, r3
 80109e6:	011b      	lsls	r3, r3, #4
 80109e8:	b2da      	uxtb	r2, r3
 80109ea:	7afb      	ldrb	r3, [r7, #11]
 80109ec:	4313      	orrs	r3, r2
 80109ee:	b2db      	uxtb	r3, r3
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3714      	adds	r7, #20
 80109f4:	46bd      	mov	sp, r7
 80109f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fa:	4770      	bx	lr

080109fc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b085      	sub	sp, #20
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	4603      	mov	r3, r0
 8010a04:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8010a06:	79fb      	ldrb	r3, [r7, #7]
 8010a08:	091b      	lsrs	r3, r3, #4
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	0092      	lsls	r2, r2, #2
 8010a10:	4413      	add	r3, r2
 8010a12:	005b      	lsls	r3, r3, #1
 8010a14:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8010a16:	79fb      	ldrb	r3, [r7, #7]
 8010a18:	f003 030f 	and.w	r3, r3, #15
 8010a1c:	b2da      	uxtb	r2, r3
 8010a1e:	7bfb      	ldrb	r3, [r7, #15]
 8010a20:	4413      	add	r3, r2
 8010a22:	b2db      	uxtb	r3, r3
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3714      	adds	r7, #20
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr

08010a30 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8010a38:	bf00      	nop
 8010a3a:	370c      	adds	r7, #12
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr

08010a44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b084      	sub	sp, #16
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d101      	bne.n	8010a56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010a52:	2301      	movs	r3, #1
 8010a54:	e095      	b.n	8010b82 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d108      	bne.n	8010a70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	685b      	ldr	r3, [r3, #4]
 8010a62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010a66:	d009      	beq.n	8010a7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	61da      	str	r2, [r3, #28]
 8010a6e:	e005      	b.n	8010a7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2200      	movs	r2, #0
 8010a74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2200      	movs	r2, #0
 8010a80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010a88:	b2db      	uxtb	r3, r3
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d106      	bne.n	8010a9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	2200      	movs	r2, #0
 8010a92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	f7f6 f816 	bl	8006ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2202      	movs	r2, #2
 8010aa0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010ab2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	68db      	ldr	r3, [r3, #12]
 8010ab8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010abc:	d902      	bls.n	8010ac4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	60fb      	str	r3, [r7, #12]
 8010ac2:	e002      	b.n	8010aca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8010ac4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010ac8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	68db      	ldr	r3, [r3, #12]
 8010ace:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8010ad2:	d007      	beq.n	8010ae4 <HAL_SPI_Init+0xa0>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	68db      	ldr	r3, [r3, #12]
 8010ad8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010adc:	d002      	beq.n	8010ae4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	685b      	ldr	r3, [r3, #4]
 8010ae8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	689b      	ldr	r3, [r3, #8]
 8010af0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8010af4:	431a      	orrs	r2, r3
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	691b      	ldr	r3, [r3, #16]
 8010afa:	f003 0302 	and.w	r3, r3, #2
 8010afe:	431a      	orrs	r2, r3
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	695b      	ldr	r3, [r3, #20]
 8010b04:	f003 0301 	and.w	r3, r3, #1
 8010b08:	431a      	orrs	r2, r3
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	699b      	ldr	r3, [r3, #24]
 8010b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010b12:	431a      	orrs	r2, r3
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	69db      	ldr	r3, [r3, #28]
 8010b18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010b1c:	431a      	orrs	r2, r3
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6a1b      	ldr	r3, [r3, #32]
 8010b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010b26:	ea42 0103 	orr.w	r1, r2, r3
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b2e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	430a      	orrs	r2, r1
 8010b38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	699b      	ldr	r3, [r3, #24]
 8010b3e:	0c1b      	lsrs	r3, r3, #16
 8010b40:	f003 0204 	and.w	r2, r3, #4
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b48:	f003 0310 	and.w	r3, r3, #16
 8010b4c:	431a      	orrs	r2, r3
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010b52:	f003 0308 	and.w	r3, r3, #8
 8010b56:	431a      	orrs	r2, r3
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	68db      	ldr	r3, [r3, #12]
 8010b5c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8010b60:	ea42 0103 	orr.w	r1, r2, r3
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	430a      	orrs	r2, r1
 8010b70:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2200      	movs	r2, #0
 8010b76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2201      	movs	r2, #1
 8010b7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8010b80:	2300      	movs	r3, #0
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3710      	adds	r7, #16
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b088      	sub	sp, #32
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	60f8      	str	r0, [r7, #12]
 8010b92:	60b9      	str	r1, [r7, #8]
 8010b94:	603b      	str	r3, [r7, #0]
 8010b96:	4613      	mov	r3, r2
 8010b98:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010b9a:	f7f9 fbbf 	bl	800a31c <HAL_GetTick>
 8010b9e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8010ba0:	88fb      	ldrh	r3, [r7, #6]
 8010ba2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	2b01      	cmp	r3, #1
 8010bae:	d001      	beq.n	8010bb4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8010bb0:	2302      	movs	r3, #2
 8010bb2:	e15c      	b.n	8010e6e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d002      	beq.n	8010bc0 <HAL_SPI_Transmit+0x36>
 8010bba:	88fb      	ldrh	r3, [r7, #6]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d101      	bne.n	8010bc4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	e154      	b.n	8010e6e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d101      	bne.n	8010bd2 <HAL_SPI_Transmit+0x48>
 8010bce:	2302      	movs	r3, #2
 8010bd0:	e14d      	b.n	8010e6e <HAL_SPI_Transmit+0x2e4>
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2201      	movs	r2, #1
 8010bd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2203      	movs	r2, #3
 8010bde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2200      	movs	r2, #0
 8010be6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	68ba      	ldr	r2, [r7, #8]
 8010bec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	88fa      	ldrh	r2, [r7, #6]
 8010bf2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	88fa      	ldrh	r2, [r7, #6]
 8010bf8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	2200      	movs	r2, #0
 8010c04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	2200      	movs	r2, #0
 8010c14:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	689b      	ldr	r3, [r3, #8]
 8010c20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c24:	d10f      	bne.n	8010c46 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	681a      	ldr	r2, [r3, #0]
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010c34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	681a      	ldr	r2, [r3, #0]
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010c44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c50:	2b40      	cmp	r3, #64	@ 0x40
 8010c52:	d007      	beq.n	8010c64 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	681a      	ldr	r2, [r3, #0]
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010c62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	68db      	ldr	r3, [r3, #12]
 8010c68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010c6c:	d952      	bls.n	8010d14 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	685b      	ldr	r3, [r3, #4]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d002      	beq.n	8010c7c <HAL_SPI_Transmit+0xf2>
 8010c76:	8b7b      	ldrh	r3, [r7, #26]
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d145      	bne.n	8010d08 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c80:	881a      	ldrh	r2, [r3, #0]
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c8c:	1c9a      	adds	r2, r3, #2
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	3b01      	subs	r3, #1
 8010c9a:	b29a      	uxth	r2, r3
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010ca0:	e032      	b.n	8010d08 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	689b      	ldr	r3, [r3, #8]
 8010ca8:	f003 0302 	and.w	r3, r3, #2
 8010cac:	2b02      	cmp	r3, #2
 8010cae:	d112      	bne.n	8010cd6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cb4:	881a      	ldrh	r2, [r3, #0]
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cc0:	1c9a      	adds	r2, r3, #2
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	3b01      	subs	r3, #1
 8010cce:	b29a      	uxth	r2, r3
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8010cd4:	e018      	b.n	8010d08 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010cd6:	f7f9 fb21 	bl	800a31c <HAL_GetTick>
 8010cda:	4602      	mov	r2, r0
 8010cdc:	69fb      	ldr	r3, [r7, #28]
 8010cde:	1ad3      	subs	r3, r2, r3
 8010ce0:	683a      	ldr	r2, [r7, #0]
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d803      	bhi.n	8010cee <HAL_SPI_Transmit+0x164>
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cec:	d102      	bne.n	8010cf4 <HAL_SPI_Transmit+0x16a>
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d109      	bne.n	8010d08 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2201      	movs	r2, #1
 8010cf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	2200      	movs	r2, #0
 8010d00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8010d04:	2303      	movs	r3, #3
 8010d06:	e0b2      	b.n	8010e6e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d1c7      	bne.n	8010ca2 <HAL_SPI_Transmit+0x118>
 8010d12:	e083      	b.n	8010e1c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	685b      	ldr	r3, [r3, #4]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d002      	beq.n	8010d22 <HAL_SPI_Transmit+0x198>
 8010d1c:	8b7b      	ldrh	r3, [r7, #26]
 8010d1e:	2b01      	cmp	r3, #1
 8010d20:	d177      	bne.n	8010e12 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	d912      	bls.n	8010d52 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d30:	881a      	ldrh	r2, [r3, #0]
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d3c:	1c9a      	adds	r2, r3, #2
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010d46:	b29b      	uxth	r3, r3
 8010d48:	3b02      	subs	r3, #2
 8010d4a:	b29a      	uxth	r2, r3
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8010d50:	e05f      	b.n	8010e12 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	330c      	adds	r3, #12
 8010d5c:	7812      	ldrb	r2, [r2, #0]
 8010d5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d64:	1c5a      	adds	r2, r3, #1
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010d6e:	b29b      	uxth	r3, r3
 8010d70:	3b01      	subs	r3, #1
 8010d72:	b29a      	uxth	r2, r3
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8010d78:	e04b      	b.n	8010e12 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	689b      	ldr	r3, [r3, #8]
 8010d80:	f003 0302 	and.w	r3, r3, #2
 8010d84:	2b02      	cmp	r3, #2
 8010d86:	d12b      	bne.n	8010de0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	2b01      	cmp	r3, #1
 8010d90:	d912      	bls.n	8010db8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d96:	881a      	ldrh	r2, [r3, #0]
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010da2:	1c9a      	adds	r2, r3, #2
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010dac:	b29b      	uxth	r3, r3
 8010dae:	3b02      	subs	r3, #2
 8010db0:	b29a      	uxth	r2, r3
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8010db6:	e02c      	b.n	8010e12 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	330c      	adds	r3, #12
 8010dc2:	7812      	ldrb	r2, [r2, #0]
 8010dc4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dca:	1c5a      	adds	r2, r3, #1
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010dd4:	b29b      	uxth	r3, r3
 8010dd6:	3b01      	subs	r3, #1
 8010dd8:	b29a      	uxth	r2, r3
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8010dde:	e018      	b.n	8010e12 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010de0:	f7f9 fa9c 	bl	800a31c <HAL_GetTick>
 8010de4:	4602      	mov	r2, r0
 8010de6:	69fb      	ldr	r3, [r7, #28]
 8010de8:	1ad3      	subs	r3, r2, r3
 8010dea:	683a      	ldr	r2, [r7, #0]
 8010dec:	429a      	cmp	r2, r3
 8010dee:	d803      	bhi.n	8010df8 <HAL_SPI_Transmit+0x26e>
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010df6:	d102      	bne.n	8010dfe <HAL_SPI_Transmit+0x274>
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d109      	bne.n	8010e12 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	2201      	movs	r2, #1
 8010e02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8010e0e:	2303      	movs	r3, #3
 8010e10:	e02d      	b.n	8010e6e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d1ae      	bne.n	8010d7a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010e1c:	69fa      	ldr	r2, [r7, #28]
 8010e1e:	6839      	ldr	r1, [r7, #0]
 8010e20:	68f8      	ldr	r0, [r7, #12]
 8010e22:	f000 fcf5 	bl	8011810 <SPI_EndRxTxTransaction>
 8010e26:	4603      	mov	r3, r0
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d002      	beq.n	8010e32 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	2220      	movs	r2, #32
 8010e30:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	689b      	ldr	r3, [r3, #8]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d10a      	bne.n	8010e50 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	617b      	str	r3, [r7, #20]
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	617b      	str	r3, [r7, #20]
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	689b      	ldr	r3, [r3, #8]
 8010e4c:	617b      	str	r3, [r7, #20]
 8010e4e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	2201      	movs	r2, #1
 8010e54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d001      	beq.n	8010e6c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8010e68:	2301      	movs	r3, #1
 8010e6a:	e000      	b.n	8010e6e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8010e6c:	2300      	movs	r3, #0
  }
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3720      	adds	r7, #32
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}

08010e76 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010e76:	b580      	push	{r7, lr}
 8010e78:	b088      	sub	sp, #32
 8010e7a:	af02      	add	r7, sp, #8
 8010e7c:	60f8      	str	r0, [r7, #12]
 8010e7e:	60b9      	str	r1, [r7, #8]
 8010e80:	603b      	str	r3, [r7, #0]
 8010e82:	4613      	mov	r3, r2
 8010e84:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	2b01      	cmp	r3, #1
 8010e90:	d001      	beq.n	8010e96 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8010e92:	2302      	movs	r3, #2
 8010e94:	e123      	b.n	80110de <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010e9e:	d112      	bne.n	8010ec6 <HAL_SPI_Receive+0x50>
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	689b      	ldr	r3, [r3, #8]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d10e      	bne.n	8010ec6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	2204      	movs	r2, #4
 8010eac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010eb0:	88fa      	ldrh	r2, [r7, #6]
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	9300      	str	r3, [sp, #0]
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	68ba      	ldr	r2, [r7, #8]
 8010eba:	68b9      	ldr	r1, [r7, #8]
 8010ebc:	68f8      	ldr	r0, [r7, #12]
 8010ebe:	f000 f912 	bl	80110e6 <HAL_SPI_TransmitReceive>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	e10b      	b.n	80110de <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010ec6:	f7f9 fa29 	bl	800a31c <HAL_GetTick>
 8010eca:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d002      	beq.n	8010ed8 <HAL_SPI_Receive+0x62>
 8010ed2:	88fb      	ldrh	r3, [r7, #6]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d101      	bne.n	8010edc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8010ed8:	2301      	movs	r3, #1
 8010eda:	e100      	b.n	80110de <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8010ee2:	2b01      	cmp	r3, #1
 8010ee4:	d101      	bne.n	8010eea <HAL_SPI_Receive+0x74>
 8010ee6:	2302      	movs	r3, #2
 8010ee8:	e0f9      	b.n	80110de <HAL_SPI_Receive+0x268>
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2201      	movs	r2, #1
 8010eee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	2204      	movs	r2, #4
 8010ef6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	2200      	movs	r2, #0
 8010efe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	68ba      	ldr	r2, [r7, #8]
 8010f04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	88fa      	ldrh	r2, [r7, #6]
 8010f0a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	88fa      	ldrh	r2, [r7, #6]
 8010f12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	2200      	movs	r2, #0
 8010f1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	2200      	movs	r2, #0
 8010f20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	2200      	movs	r2, #0
 8010f26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2200      	movs	r2, #0
 8010f32:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	68db      	ldr	r3, [r3, #12]
 8010f38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010f3c:	d908      	bls.n	8010f50 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	685a      	ldr	r2, [r3, #4]
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010f4c:	605a      	str	r2, [r3, #4]
 8010f4e:	e007      	b.n	8010f60 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	685a      	ldr	r2, [r3, #4]
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010f5e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	689b      	ldr	r3, [r3, #8]
 8010f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010f68:	d10f      	bne.n	8010f8a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	681a      	ldr	r2, [r3, #0]
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010f78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	681a      	ldr	r2, [r3, #0]
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010f88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f94:	2b40      	cmp	r3, #64	@ 0x40
 8010f96:	d007      	beq.n	8010fa8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	681a      	ldr	r2, [r3, #0]
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010fa6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	68db      	ldr	r3, [r3, #12]
 8010fac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010fb0:	d875      	bhi.n	801109e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8010fb2:	e037      	b.n	8011024 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	689b      	ldr	r3, [r3, #8]
 8010fba:	f003 0301 	and.w	r3, r3, #1
 8010fbe:	2b01      	cmp	r3, #1
 8010fc0:	d117      	bne.n	8010ff2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	f103 020c 	add.w	r2, r3, #12
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fce:	7812      	ldrb	r2, [r2, #0]
 8010fd0:	b2d2      	uxtb	r2, r2
 8010fd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fd8:	1c5a      	adds	r2, r3, #1
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	3b01      	subs	r3, #1
 8010fe8:	b29a      	uxth	r2, r3
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8010ff0:	e018      	b.n	8011024 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010ff2:	f7f9 f993 	bl	800a31c <HAL_GetTick>
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	697b      	ldr	r3, [r7, #20]
 8010ffa:	1ad3      	subs	r3, r2, r3
 8010ffc:	683a      	ldr	r2, [r7, #0]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d803      	bhi.n	801100a <HAL_SPI_Receive+0x194>
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011008:	d102      	bne.n	8011010 <HAL_SPI_Receive+0x19a>
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d109      	bne.n	8011024 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	2201      	movs	r2, #1
 8011014:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	2200      	movs	r2, #0
 801101c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011020:	2303      	movs	r3, #3
 8011022:	e05c      	b.n	80110de <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801102a:	b29b      	uxth	r3, r3
 801102c:	2b00      	cmp	r3, #0
 801102e:	d1c1      	bne.n	8010fb4 <HAL_SPI_Receive+0x13e>
 8011030:	e03b      	b.n	80110aa <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	689b      	ldr	r3, [r3, #8]
 8011038:	f003 0301 	and.w	r3, r3, #1
 801103c:	2b01      	cmp	r3, #1
 801103e:	d115      	bne.n	801106c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	68da      	ldr	r2, [r3, #12]
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801104a:	b292      	uxth	r2, r2
 801104c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011052:	1c9a      	adds	r2, r3, #2
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801105e:	b29b      	uxth	r3, r3
 8011060:	3b01      	subs	r3, #1
 8011062:	b29a      	uxth	r2, r3
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 801106a:	e018      	b.n	801109e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801106c:	f7f9 f956 	bl	800a31c <HAL_GetTick>
 8011070:	4602      	mov	r2, r0
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	1ad3      	subs	r3, r2, r3
 8011076:	683a      	ldr	r2, [r7, #0]
 8011078:	429a      	cmp	r2, r3
 801107a:	d803      	bhi.n	8011084 <HAL_SPI_Receive+0x20e>
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011082:	d102      	bne.n	801108a <HAL_SPI_Receive+0x214>
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d109      	bne.n	801109e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2201      	movs	r2, #1
 801108e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	2200      	movs	r2, #0
 8011096:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 801109a:	2303      	movs	r3, #3
 801109c:	e01f      	b.n	80110de <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80110a4:	b29b      	uxth	r3, r3
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d1c3      	bne.n	8011032 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80110aa:	697a      	ldr	r2, [r7, #20]
 80110ac:	6839      	ldr	r1, [r7, #0]
 80110ae:	68f8      	ldr	r0, [r7, #12]
 80110b0:	f000 fb56 	bl	8011760 <SPI_EndRxTransaction>
 80110b4:	4603      	mov	r3, r0
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d002      	beq.n	80110c0 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	2220      	movs	r2, #32
 80110be:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2201      	movs	r2, #1
 80110c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2200      	movs	r2, #0
 80110cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d001      	beq.n	80110dc <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80110d8:	2301      	movs	r3, #1
 80110da:	e000      	b.n	80110de <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80110dc:	2300      	movs	r3, #0
  }
}
 80110de:	4618      	mov	r0, r3
 80110e0:	3718      	adds	r7, #24
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}

080110e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80110e6:	b580      	push	{r7, lr}
 80110e8:	b08a      	sub	sp, #40	@ 0x28
 80110ea:	af00      	add	r7, sp, #0
 80110ec:	60f8      	str	r0, [r7, #12]
 80110ee:	60b9      	str	r1, [r7, #8]
 80110f0:	607a      	str	r2, [r7, #4]
 80110f2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80110f4:	2301      	movs	r3, #1
 80110f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80110f8:	f7f9 f910 	bl	800a31c <HAL_GetTick>
 80110fc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011104:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	685b      	ldr	r3, [r3, #4]
 801110a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 801110c:	887b      	ldrh	r3, [r7, #2]
 801110e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8011110:	887b      	ldrh	r3, [r7, #2]
 8011112:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011114:	7ffb      	ldrb	r3, [r7, #31]
 8011116:	2b01      	cmp	r3, #1
 8011118:	d00c      	beq.n	8011134 <HAL_SPI_TransmitReceive+0x4e>
 801111a:	69bb      	ldr	r3, [r7, #24]
 801111c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011120:	d106      	bne.n	8011130 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	689b      	ldr	r3, [r3, #8]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d102      	bne.n	8011130 <HAL_SPI_TransmitReceive+0x4a>
 801112a:	7ffb      	ldrb	r3, [r7, #31]
 801112c:	2b04      	cmp	r3, #4
 801112e:	d001      	beq.n	8011134 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8011130:	2302      	movs	r3, #2
 8011132:	e1f3      	b.n	801151c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d005      	beq.n	8011146 <HAL_SPI_TransmitReceive+0x60>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d002      	beq.n	8011146 <HAL_SPI_TransmitReceive+0x60>
 8011140:	887b      	ldrh	r3, [r7, #2]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d101      	bne.n	801114a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8011146:	2301      	movs	r3, #1
 8011148:	e1e8      	b.n	801151c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011150:	2b01      	cmp	r3, #1
 8011152:	d101      	bne.n	8011158 <HAL_SPI_TransmitReceive+0x72>
 8011154:	2302      	movs	r3, #2
 8011156:	e1e1      	b.n	801151c <HAL_SPI_TransmitReceive+0x436>
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2201      	movs	r2, #1
 801115c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011166:	b2db      	uxtb	r3, r3
 8011168:	2b04      	cmp	r3, #4
 801116a:	d003      	beq.n	8011174 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	2205      	movs	r2, #5
 8011170:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2200      	movs	r2, #0
 8011178:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	687a      	ldr	r2, [r7, #4]
 801117e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	887a      	ldrh	r2, [r7, #2]
 8011184:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	887a      	ldrh	r2, [r7, #2]
 801118c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	68ba      	ldr	r2, [r7, #8]
 8011194:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	887a      	ldrh	r2, [r7, #2]
 801119a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	887a      	ldrh	r2, [r7, #2]
 80111a0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	2200      	movs	r2, #0
 80111a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	2200      	movs	r2, #0
 80111ac:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	68db      	ldr	r3, [r3, #12]
 80111b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80111b6:	d802      	bhi.n	80111be <HAL_SPI_TransmitReceive+0xd8>
 80111b8:	8abb      	ldrh	r3, [r7, #20]
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d908      	bls.n	80111d0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	685a      	ldr	r2, [r3, #4]
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80111cc:	605a      	str	r2, [r3, #4]
 80111ce:	e007      	b.n	80111e0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	685a      	ldr	r2, [r3, #4]
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80111de:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111ea:	2b40      	cmp	r3, #64	@ 0x40
 80111ec:	d007      	beq.n	80111fe <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	681a      	ldr	r2, [r3, #0]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80111fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011206:	f240 8083 	bls.w	8011310 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d002      	beq.n	8011218 <HAL_SPI_TransmitReceive+0x132>
 8011212:	8afb      	ldrh	r3, [r7, #22]
 8011214:	2b01      	cmp	r3, #1
 8011216:	d16f      	bne.n	80112f8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801121c:	881a      	ldrh	r2, [r3, #0]
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011228:	1c9a      	adds	r2, r3, #2
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011232:	b29b      	uxth	r3, r3
 8011234:	3b01      	subs	r3, #1
 8011236:	b29a      	uxth	r2, r3
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801123c:	e05c      	b.n	80112f8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	689b      	ldr	r3, [r3, #8]
 8011244:	f003 0302 	and.w	r3, r3, #2
 8011248:	2b02      	cmp	r3, #2
 801124a:	d11b      	bne.n	8011284 <HAL_SPI_TransmitReceive+0x19e>
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011250:	b29b      	uxth	r3, r3
 8011252:	2b00      	cmp	r3, #0
 8011254:	d016      	beq.n	8011284 <HAL_SPI_TransmitReceive+0x19e>
 8011256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011258:	2b01      	cmp	r3, #1
 801125a:	d113      	bne.n	8011284 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011260:	881a      	ldrh	r2, [r3, #0]
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801126c:	1c9a      	adds	r2, r3, #2
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011276:	b29b      	uxth	r3, r3
 8011278:	3b01      	subs	r3, #1
 801127a:	b29a      	uxth	r2, r3
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011280:	2300      	movs	r3, #0
 8011282:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	689b      	ldr	r3, [r3, #8]
 801128a:	f003 0301 	and.w	r3, r3, #1
 801128e:	2b01      	cmp	r3, #1
 8011290:	d11c      	bne.n	80112cc <HAL_SPI_TransmitReceive+0x1e6>
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011298:	b29b      	uxth	r3, r3
 801129a:	2b00      	cmp	r3, #0
 801129c:	d016      	beq.n	80112cc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	68da      	ldr	r2, [r3, #12]
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80112a8:	b292      	uxth	r2, r2
 80112aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80112b0:	1c9a      	adds	r2, r3, #2
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80112bc:	b29b      	uxth	r3, r3
 80112be:	3b01      	subs	r3, #1
 80112c0:	b29a      	uxth	r2, r3
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80112c8:	2301      	movs	r3, #1
 80112ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80112cc:	f7f9 f826 	bl	800a31c <HAL_GetTick>
 80112d0:	4602      	mov	r2, r0
 80112d2:	6a3b      	ldr	r3, [r7, #32]
 80112d4:	1ad3      	subs	r3, r2, r3
 80112d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112d8:	429a      	cmp	r2, r3
 80112da:	d80d      	bhi.n	80112f8 <HAL_SPI_TransmitReceive+0x212>
 80112dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112e2:	d009      	beq.n	80112f8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2201      	movs	r2, #1
 80112e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	2200      	movs	r2, #0
 80112f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80112f4:	2303      	movs	r3, #3
 80112f6:	e111      	b.n	801151c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80112fc:	b29b      	uxth	r3, r3
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d19d      	bne.n	801123e <HAL_SPI_TransmitReceive+0x158>
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011308:	b29b      	uxth	r3, r3
 801130a:	2b00      	cmp	r3, #0
 801130c:	d197      	bne.n	801123e <HAL_SPI_TransmitReceive+0x158>
 801130e:	e0e5      	b.n	80114dc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	685b      	ldr	r3, [r3, #4]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d003      	beq.n	8011320 <HAL_SPI_TransmitReceive+0x23a>
 8011318:	8afb      	ldrh	r3, [r7, #22]
 801131a:	2b01      	cmp	r3, #1
 801131c:	f040 80d1 	bne.w	80114c2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011324:	b29b      	uxth	r3, r3
 8011326:	2b01      	cmp	r3, #1
 8011328:	d912      	bls.n	8011350 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801132e:	881a      	ldrh	r2, [r3, #0]
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801133a:	1c9a      	adds	r2, r3, #2
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011344:	b29b      	uxth	r3, r3
 8011346:	3b02      	subs	r3, #2
 8011348:	b29a      	uxth	r2, r3
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801134e:	e0b8      	b.n	80114c2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	330c      	adds	r3, #12
 801135a:	7812      	ldrb	r2, [r2, #0]
 801135c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011362:	1c5a      	adds	r2, r3, #1
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801136c:	b29b      	uxth	r3, r3
 801136e:	3b01      	subs	r3, #1
 8011370:	b29a      	uxth	r2, r3
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011376:	e0a4      	b.n	80114c2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	689b      	ldr	r3, [r3, #8]
 801137e:	f003 0302 	and.w	r3, r3, #2
 8011382:	2b02      	cmp	r3, #2
 8011384:	d134      	bne.n	80113f0 <HAL_SPI_TransmitReceive+0x30a>
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801138a:	b29b      	uxth	r3, r3
 801138c:	2b00      	cmp	r3, #0
 801138e:	d02f      	beq.n	80113f0 <HAL_SPI_TransmitReceive+0x30a>
 8011390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011392:	2b01      	cmp	r3, #1
 8011394:	d12c      	bne.n	80113f0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801139a:	b29b      	uxth	r3, r3
 801139c:	2b01      	cmp	r3, #1
 801139e:	d912      	bls.n	80113c6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113a4:	881a      	ldrh	r2, [r3, #0]
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113b0:	1c9a      	adds	r2, r3, #2
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	3b02      	subs	r3, #2
 80113be:	b29a      	uxth	r2, r3
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80113c4:	e012      	b.n	80113ec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	330c      	adds	r3, #12
 80113d0:	7812      	ldrb	r2, [r2, #0]
 80113d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113d8:	1c5a      	adds	r2, r3, #1
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80113e2:	b29b      	uxth	r3, r3
 80113e4:	3b01      	subs	r3, #1
 80113e6:	b29a      	uxth	r2, r3
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80113ec:	2300      	movs	r3, #0
 80113ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	689b      	ldr	r3, [r3, #8]
 80113f6:	f003 0301 	and.w	r3, r3, #1
 80113fa:	2b01      	cmp	r3, #1
 80113fc:	d148      	bne.n	8011490 <HAL_SPI_TransmitReceive+0x3aa>
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011404:	b29b      	uxth	r3, r3
 8011406:	2b00      	cmp	r3, #0
 8011408:	d042      	beq.n	8011490 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011410:	b29b      	uxth	r3, r3
 8011412:	2b01      	cmp	r3, #1
 8011414:	d923      	bls.n	801145e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	68da      	ldr	r2, [r3, #12]
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011420:	b292      	uxth	r2, r2
 8011422:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011428:	1c9a      	adds	r2, r3, #2
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011434:	b29b      	uxth	r3, r3
 8011436:	3b02      	subs	r3, #2
 8011438:	b29a      	uxth	r2, r3
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011446:	b29b      	uxth	r3, r3
 8011448:	2b01      	cmp	r3, #1
 801144a:	d81f      	bhi.n	801148c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	685a      	ldr	r2, [r3, #4]
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801145a:	605a      	str	r2, [r3, #4]
 801145c:	e016      	b.n	801148c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	f103 020c 	add.w	r2, r3, #12
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801146a:	7812      	ldrb	r2, [r2, #0]
 801146c:	b2d2      	uxtb	r2, r2
 801146e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011474:	1c5a      	adds	r2, r3, #1
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011480:	b29b      	uxth	r3, r3
 8011482:	3b01      	subs	r3, #1
 8011484:	b29a      	uxth	r2, r3
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801148c:	2301      	movs	r3, #1
 801148e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011490:	f7f8 ff44 	bl	800a31c <HAL_GetTick>
 8011494:	4602      	mov	r2, r0
 8011496:	6a3b      	ldr	r3, [r7, #32]
 8011498:	1ad3      	subs	r3, r2, r3
 801149a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801149c:	429a      	cmp	r2, r3
 801149e:	d803      	bhi.n	80114a8 <HAL_SPI_TransmitReceive+0x3c2>
 80114a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114a6:	d102      	bne.n	80114ae <HAL_SPI_TransmitReceive+0x3c8>
 80114a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d109      	bne.n	80114c2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	2201      	movs	r2, #1
 80114b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	2200      	movs	r2, #0
 80114ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80114be:	2303      	movs	r3, #3
 80114c0:	e02c      	b.n	801151c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	f47f af55 	bne.w	8011378 <HAL_SPI_TransmitReceive+0x292>
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	f47f af4e 	bne.w	8011378 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80114dc:	6a3a      	ldr	r2, [r7, #32]
 80114de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80114e0:	68f8      	ldr	r0, [r7, #12]
 80114e2:	f000 f995 	bl	8011810 <SPI_EndRxTxTransaction>
 80114e6:	4603      	mov	r3, r0
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d008      	beq.n	80114fe <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	2220      	movs	r2, #32
 80114f0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	2200      	movs	r2, #0
 80114f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80114fa:	2301      	movs	r3, #1
 80114fc:	e00e      	b.n	801151c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	2201      	movs	r2, #1
 8011502:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	2200      	movs	r2, #0
 801150a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011512:	2b00      	cmp	r3, #0
 8011514:	d001      	beq.n	801151a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8011516:	2301      	movs	r3, #1
 8011518:	e000      	b.n	801151c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 801151a:	2300      	movs	r3, #0
  }
}
 801151c:	4618      	mov	r0, r3
 801151e:	3728      	adds	r7, #40	@ 0x28
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}

08011524 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b088      	sub	sp, #32
 8011528:	af00      	add	r7, sp, #0
 801152a:	60f8      	str	r0, [r7, #12]
 801152c:	60b9      	str	r1, [r7, #8]
 801152e:	603b      	str	r3, [r7, #0]
 8011530:	4613      	mov	r3, r2
 8011532:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011534:	f7f8 fef2 	bl	800a31c <HAL_GetTick>
 8011538:	4602      	mov	r2, r0
 801153a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801153c:	1a9b      	subs	r3, r3, r2
 801153e:	683a      	ldr	r2, [r7, #0]
 8011540:	4413      	add	r3, r2
 8011542:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011544:	f7f8 feea 	bl	800a31c <HAL_GetTick>
 8011548:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801154a:	4b39      	ldr	r3, [pc, #228]	@ (8011630 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	015b      	lsls	r3, r3, #5
 8011550:	0d1b      	lsrs	r3, r3, #20
 8011552:	69fa      	ldr	r2, [r7, #28]
 8011554:	fb02 f303 	mul.w	r3, r2, r3
 8011558:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801155a:	e054      	b.n	8011606 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011562:	d050      	beq.n	8011606 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011564:	f7f8 feda 	bl	800a31c <HAL_GetTick>
 8011568:	4602      	mov	r2, r0
 801156a:	69bb      	ldr	r3, [r7, #24]
 801156c:	1ad3      	subs	r3, r2, r3
 801156e:	69fa      	ldr	r2, [r7, #28]
 8011570:	429a      	cmp	r2, r3
 8011572:	d902      	bls.n	801157a <SPI_WaitFlagStateUntilTimeout+0x56>
 8011574:	69fb      	ldr	r3, [r7, #28]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d13d      	bne.n	80115f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	685a      	ldr	r2, [r3, #4]
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011588:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011592:	d111      	bne.n	80115b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	689b      	ldr	r3, [r3, #8]
 8011598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801159c:	d004      	beq.n	80115a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	689b      	ldr	r3, [r3, #8]
 80115a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80115a6:	d107      	bne.n	80115b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	681a      	ldr	r2, [r3, #0]
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80115b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80115c0:	d10f      	bne.n	80115e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	681a      	ldr	r2, [r3, #0]
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80115d0:	601a      	str	r2, [r3, #0]
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80115e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	2201      	movs	r2, #1
 80115e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	2200      	movs	r2, #0
 80115ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80115f2:	2303      	movs	r3, #3
 80115f4:	e017      	b.n	8011626 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d101      	bne.n	8011600 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80115fc:	2300      	movs	r3, #0
 80115fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	3b01      	subs	r3, #1
 8011604:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	689a      	ldr	r2, [r3, #8]
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	4013      	ands	r3, r2
 8011610:	68ba      	ldr	r2, [r7, #8]
 8011612:	429a      	cmp	r2, r3
 8011614:	bf0c      	ite	eq
 8011616:	2301      	moveq	r3, #1
 8011618:	2300      	movne	r3, #0
 801161a:	b2db      	uxtb	r3, r3
 801161c:	461a      	mov	r2, r3
 801161e:	79fb      	ldrb	r3, [r7, #7]
 8011620:	429a      	cmp	r2, r3
 8011622:	d19b      	bne.n	801155c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011624:	2300      	movs	r3, #0
}
 8011626:	4618      	mov	r0, r3
 8011628:	3720      	adds	r7, #32
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}
 801162e:	bf00      	nop
 8011630:	20000168 	.word	0x20000168

08011634 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b08a      	sub	sp, #40	@ 0x28
 8011638:	af00      	add	r7, sp, #0
 801163a:	60f8      	str	r0, [r7, #12]
 801163c:	60b9      	str	r1, [r7, #8]
 801163e:	607a      	str	r2, [r7, #4]
 8011640:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8011642:	2300      	movs	r3, #0
 8011644:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8011646:	f7f8 fe69 	bl	800a31c <HAL_GetTick>
 801164a:	4602      	mov	r2, r0
 801164c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801164e:	1a9b      	subs	r3, r3, r2
 8011650:	683a      	ldr	r2, [r7, #0]
 8011652:	4413      	add	r3, r2
 8011654:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8011656:	f7f8 fe61 	bl	800a31c <HAL_GetTick>
 801165a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	330c      	adds	r3, #12
 8011662:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8011664:	4b3d      	ldr	r3, [pc, #244]	@ (801175c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8011666:	681a      	ldr	r2, [r3, #0]
 8011668:	4613      	mov	r3, r2
 801166a:	009b      	lsls	r3, r3, #2
 801166c:	4413      	add	r3, r2
 801166e:	00da      	lsls	r2, r3, #3
 8011670:	1ad3      	subs	r3, r2, r3
 8011672:	0d1b      	lsrs	r3, r3, #20
 8011674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011676:	fb02 f303 	mul.w	r3, r2, r3
 801167a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801167c:	e060      	b.n	8011740 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8011684:	d107      	bne.n	8011696 <SPI_WaitFifoStateUntilTimeout+0x62>
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d104      	bne.n	8011696 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	781b      	ldrb	r3, [r3, #0]
 8011690:	b2db      	uxtb	r3, r3
 8011692:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8011694:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	f1b3 3fff 	cmp.w	r3, #4294967295
 801169c:	d050      	beq.n	8011740 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801169e:	f7f8 fe3d 	bl	800a31c <HAL_GetTick>
 80116a2:	4602      	mov	r2, r0
 80116a4:	6a3b      	ldr	r3, [r7, #32]
 80116a6:	1ad3      	subs	r3, r2, r3
 80116a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d902      	bls.n	80116b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80116ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d13d      	bne.n	8011730 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	685a      	ldr	r2, [r3, #4]
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80116c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80116cc:	d111      	bne.n	80116f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	689b      	ldr	r3, [r3, #8]
 80116d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80116d6:	d004      	beq.n	80116e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	689b      	ldr	r3, [r3, #8]
 80116dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80116e0:	d107      	bne.n	80116f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	681a      	ldr	r2, [r3, #0]
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80116f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80116fa:	d10f      	bne.n	801171c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801170a:	601a      	str	r2, [r3, #0]
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	681a      	ldr	r2, [r3, #0]
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801171a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	2201      	movs	r2, #1
 8011720:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	2200      	movs	r2, #0
 8011728:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 801172c:	2303      	movs	r3, #3
 801172e:	e010      	b.n	8011752 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011730:	69bb      	ldr	r3, [r7, #24]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d101      	bne.n	801173a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8011736:	2300      	movs	r3, #0
 8011738:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 801173a:	69bb      	ldr	r3, [r7, #24]
 801173c:	3b01      	subs	r3, #1
 801173e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	689a      	ldr	r2, [r3, #8]
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	4013      	ands	r3, r2
 801174a:	687a      	ldr	r2, [r7, #4]
 801174c:	429a      	cmp	r2, r3
 801174e:	d196      	bne.n	801167e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8011750:	2300      	movs	r3, #0
}
 8011752:	4618      	mov	r0, r3
 8011754:	3728      	adds	r7, #40	@ 0x28
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}
 801175a:	bf00      	nop
 801175c:	20000168 	.word	0x20000168

08011760 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b086      	sub	sp, #24
 8011764:	af02      	add	r7, sp, #8
 8011766:	60f8      	str	r0, [r7, #12]
 8011768:	60b9      	str	r1, [r7, #8]
 801176a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011774:	d111      	bne.n	801179a <SPI_EndRxTransaction+0x3a>
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	689b      	ldr	r3, [r3, #8]
 801177a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801177e:	d004      	beq.n	801178a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	689b      	ldr	r3, [r3, #8]
 8011784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011788:	d107      	bne.n	801179a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	681a      	ldr	r2, [r3, #0]
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011798:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	9300      	str	r3, [sp, #0]
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	2200      	movs	r2, #0
 80117a2:	2180      	movs	r1, #128	@ 0x80
 80117a4:	68f8      	ldr	r0, [r7, #12]
 80117a6:	f7ff febd 	bl	8011524 <SPI_WaitFlagStateUntilTimeout>
 80117aa:	4603      	mov	r3, r0
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d007      	beq.n	80117c0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80117b4:	f043 0220 	orr.w	r2, r3, #32
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80117bc:	2303      	movs	r3, #3
 80117be:	e023      	b.n	8011808 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	685b      	ldr	r3, [r3, #4]
 80117c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80117c8:	d11d      	bne.n	8011806 <SPI_EndRxTransaction+0xa6>
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	689b      	ldr	r3, [r3, #8]
 80117ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80117d2:	d004      	beq.n	80117de <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	689b      	ldr	r3, [r3, #8]
 80117d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80117dc:	d113      	bne.n	8011806 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	9300      	str	r3, [sp, #0]
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	2200      	movs	r2, #0
 80117e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80117ea:	68f8      	ldr	r0, [r7, #12]
 80117ec:	f7ff ff22 	bl	8011634 <SPI_WaitFifoStateUntilTimeout>
 80117f0:	4603      	mov	r3, r0
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d007      	beq.n	8011806 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80117fa:	f043 0220 	orr.w	r2, r3, #32
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8011802:	2303      	movs	r3, #3
 8011804:	e000      	b.n	8011808 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8011806:	2300      	movs	r3, #0
}
 8011808:	4618      	mov	r0, r3
 801180a:	3710      	adds	r7, #16
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}

08011810 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b086      	sub	sp, #24
 8011814:	af02      	add	r7, sp, #8
 8011816:	60f8      	str	r0, [r7, #12]
 8011818:	60b9      	str	r1, [r7, #8]
 801181a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	9300      	str	r3, [sp, #0]
 8011820:	68bb      	ldr	r3, [r7, #8]
 8011822:	2200      	movs	r2, #0
 8011824:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8011828:	68f8      	ldr	r0, [r7, #12]
 801182a:	f7ff ff03 	bl	8011634 <SPI_WaitFifoStateUntilTimeout>
 801182e:	4603      	mov	r3, r0
 8011830:	2b00      	cmp	r3, #0
 8011832:	d007      	beq.n	8011844 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011838:	f043 0220 	orr.w	r2, r3, #32
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8011840:	2303      	movs	r3, #3
 8011842:	e027      	b.n	8011894 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	9300      	str	r3, [sp, #0]
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	2200      	movs	r2, #0
 801184c:	2180      	movs	r1, #128	@ 0x80
 801184e:	68f8      	ldr	r0, [r7, #12]
 8011850:	f7ff fe68 	bl	8011524 <SPI_WaitFlagStateUntilTimeout>
 8011854:	4603      	mov	r3, r0
 8011856:	2b00      	cmp	r3, #0
 8011858:	d007      	beq.n	801186a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801185e:	f043 0220 	orr.w	r2, r3, #32
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8011866:	2303      	movs	r3, #3
 8011868:	e014      	b.n	8011894 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	9300      	str	r3, [sp, #0]
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	2200      	movs	r2, #0
 8011872:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8011876:	68f8      	ldr	r0, [r7, #12]
 8011878:	f7ff fedc 	bl	8011634 <SPI_WaitFifoStateUntilTimeout>
 801187c:	4603      	mov	r3, r0
 801187e:	2b00      	cmp	r3, #0
 8011880:	d007      	beq.n	8011892 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011886:	f043 0220 	orr.w	r2, r3, #32
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 801188e:	2303      	movs	r3, #3
 8011890:	e000      	b.n	8011894 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8011892:	2300      	movs	r3, #0
}
 8011894:	4618      	mov	r0, r3
 8011896:	3710      	adds	r7, #16
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d101      	bne.n	80118ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80118aa:	2301      	movs	r3, #1
 80118ac:	e049      	b.n	8011942 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80118b4:	b2db      	uxtb	r3, r3
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d106      	bne.n	80118c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2200      	movs	r2, #0
 80118be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f7f5 f9d8 	bl	8006c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2202      	movs	r2, #2
 80118cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681a      	ldr	r2, [r3, #0]
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	3304      	adds	r3, #4
 80118d8:	4619      	mov	r1, r3
 80118da:	4610      	mov	r0, r2
 80118dc:	f001 fa58 	bl	8012d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2201      	movs	r2, #1
 80118e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2201      	movs	r2, #1
 80118ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2201      	movs	r2, #1
 80118f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2201      	movs	r2, #1
 80118fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2201      	movs	r2, #1
 8011904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2201      	movs	r2, #1
 801190c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2201      	movs	r2, #1
 8011914:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2201      	movs	r2, #1
 801191c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2201      	movs	r2, #1
 8011924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2201      	movs	r2, #1
 801192c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2201      	movs	r2, #1
 8011934:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2201      	movs	r2, #1
 801193c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011940:	2300      	movs	r3, #0
}
 8011942:	4618      	mov	r0, r3
 8011944:	3708      	adds	r7, #8
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}

0801194a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 801194a:	b580      	push	{r7, lr}
 801194c:	b082      	sub	sp, #8
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d101      	bne.n	801195c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8011958:	2301      	movs	r3, #1
 801195a:	e049      	b.n	80119f0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011962:	b2db      	uxtb	r3, r3
 8011964:	2b00      	cmp	r3, #0
 8011966:	d106      	bne.n	8011976 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2200      	movs	r2, #0
 801196c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f7f5 f921 	bl	8006bb8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2202      	movs	r2, #2
 801197a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681a      	ldr	r2, [r3, #0]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	3304      	adds	r3, #4
 8011986:	4619      	mov	r1, r3
 8011988:	4610      	mov	r0, r2
 801198a:	f001 fa01 	bl	8012d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2201      	movs	r2, #1
 8011992:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2201      	movs	r2, #1
 801199a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	2201      	movs	r2, #1
 80119a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2201      	movs	r2, #1
 80119aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2201      	movs	r2, #1
 80119b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2201      	movs	r2, #1
 80119ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2201      	movs	r2, #1
 80119c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2201      	movs	r2, #1
 80119ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2201      	movs	r2, #1
 80119d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2201      	movs	r2, #1
 80119da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2201      	movs	r2, #1
 80119e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2201      	movs	r2, #1
 80119ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80119ee:	2300      	movs	r3, #0
}
 80119f0:	4618      	mov	r0, r3
 80119f2:	3708      	adds	r7, #8
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}

080119f8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b084      	sub	sp, #16
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011a02:	2300      	movs	r3, #0
 8011a04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d109      	bne.n	8011a20 <HAL_TIM_OC_Start_IT+0x28>
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	2b01      	cmp	r3, #1
 8011a16:	bf14      	ite	ne
 8011a18:	2301      	movne	r3, #1
 8011a1a:	2300      	moveq	r3, #0
 8011a1c:	b2db      	uxtb	r3, r3
 8011a1e:	e03c      	b.n	8011a9a <HAL_TIM_OC_Start_IT+0xa2>
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	2b04      	cmp	r3, #4
 8011a24:	d109      	bne.n	8011a3a <HAL_TIM_OC_Start_IT+0x42>
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011a2c:	b2db      	uxtb	r3, r3
 8011a2e:	2b01      	cmp	r3, #1
 8011a30:	bf14      	ite	ne
 8011a32:	2301      	movne	r3, #1
 8011a34:	2300      	moveq	r3, #0
 8011a36:	b2db      	uxtb	r3, r3
 8011a38:	e02f      	b.n	8011a9a <HAL_TIM_OC_Start_IT+0xa2>
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	2b08      	cmp	r3, #8
 8011a3e:	d109      	bne.n	8011a54 <HAL_TIM_OC_Start_IT+0x5c>
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011a46:	b2db      	uxtb	r3, r3
 8011a48:	2b01      	cmp	r3, #1
 8011a4a:	bf14      	ite	ne
 8011a4c:	2301      	movne	r3, #1
 8011a4e:	2300      	moveq	r3, #0
 8011a50:	b2db      	uxtb	r3, r3
 8011a52:	e022      	b.n	8011a9a <HAL_TIM_OC_Start_IT+0xa2>
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	2b0c      	cmp	r3, #12
 8011a58:	d109      	bne.n	8011a6e <HAL_TIM_OC_Start_IT+0x76>
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	2b01      	cmp	r3, #1
 8011a64:	bf14      	ite	ne
 8011a66:	2301      	movne	r3, #1
 8011a68:	2300      	moveq	r3, #0
 8011a6a:	b2db      	uxtb	r3, r3
 8011a6c:	e015      	b.n	8011a9a <HAL_TIM_OC_Start_IT+0xa2>
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	2b10      	cmp	r3, #16
 8011a72:	d109      	bne.n	8011a88 <HAL_TIM_OC_Start_IT+0x90>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011a7a:	b2db      	uxtb	r3, r3
 8011a7c:	2b01      	cmp	r3, #1
 8011a7e:	bf14      	ite	ne
 8011a80:	2301      	movne	r3, #1
 8011a82:	2300      	moveq	r3, #0
 8011a84:	b2db      	uxtb	r3, r3
 8011a86:	e008      	b.n	8011a9a <HAL_TIM_OC_Start_IT+0xa2>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011a8e:	b2db      	uxtb	r3, r3
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	bf14      	ite	ne
 8011a94:	2301      	movne	r3, #1
 8011a96:	2300      	moveq	r3, #0
 8011a98:	b2db      	uxtb	r3, r3
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d001      	beq.n	8011aa2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	e0e7      	b.n	8011c72 <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d104      	bne.n	8011ab2 <HAL_TIM_OC_Start_IT+0xba>
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2202      	movs	r2, #2
 8011aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011ab0:	e023      	b.n	8011afa <HAL_TIM_OC_Start_IT+0x102>
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	2b04      	cmp	r3, #4
 8011ab6:	d104      	bne.n	8011ac2 <HAL_TIM_OC_Start_IT+0xca>
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2202      	movs	r2, #2
 8011abc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011ac0:	e01b      	b.n	8011afa <HAL_TIM_OC_Start_IT+0x102>
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	2b08      	cmp	r3, #8
 8011ac6:	d104      	bne.n	8011ad2 <HAL_TIM_OC_Start_IT+0xda>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2202      	movs	r2, #2
 8011acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011ad0:	e013      	b.n	8011afa <HAL_TIM_OC_Start_IT+0x102>
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	2b0c      	cmp	r3, #12
 8011ad6:	d104      	bne.n	8011ae2 <HAL_TIM_OC_Start_IT+0xea>
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2202      	movs	r2, #2
 8011adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011ae0:	e00b      	b.n	8011afa <HAL_TIM_OC_Start_IT+0x102>
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	2b10      	cmp	r3, #16
 8011ae6:	d104      	bne.n	8011af2 <HAL_TIM_OC_Start_IT+0xfa>
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2202      	movs	r2, #2
 8011aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011af0:	e003      	b.n	8011afa <HAL_TIM_OC_Start_IT+0x102>
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2202      	movs	r2, #2
 8011af6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	2b0c      	cmp	r3, #12
 8011afe:	d841      	bhi.n	8011b84 <HAL_TIM_OC_Start_IT+0x18c>
 8011b00:	a201      	add	r2, pc, #4	@ (adr r2, 8011b08 <HAL_TIM_OC_Start_IT+0x110>)
 8011b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b06:	bf00      	nop
 8011b08:	08011b3d 	.word	0x08011b3d
 8011b0c:	08011b85 	.word	0x08011b85
 8011b10:	08011b85 	.word	0x08011b85
 8011b14:	08011b85 	.word	0x08011b85
 8011b18:	08011b4f 	.word	0x08011b4f
 8011b1c:	08011b85 	.word	0x08011b85
 8011b20:	08011b85 	.word	0x08011b85
 8011b24:	08011b85 	.word	0x08011b85
 8011b28:	08011b61 	.word	0x08011b61
 8011b2c:	08011b85 	.word	0x08011b85
 8011b30:	08011b85 	.word	0x08011b85
 8011b34:	08011b85 	.word	0x08011b85
 8011b38:	08011b73 	.word	0x08011b73
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	68da      	ldr	r2, [r3, #12]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	f042 0202 	orr.w	r2, r2, #2
 8011b4a:	60da      	str	r2, [r3, #12]
      break;
 8011b4c:	e01d      	b.n	8011b8a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	68da      	ldr	r2, [r3, #12]
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	f042 0204 	orr.w	r2, r2, #4
 8011b5c:	60da      	str	r2, [r3, #12]
      break;
 8011b5e:	e014      	b.n	8011b8a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	68da      	ldr	r2, [r3, #12]
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	f042 0208 	orr.w	r2, r2, #8
 8011b6e:	60da      	str	r2, [r3, #12]
      break;
 8011b70:	e00b      	b.n	8011b8a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	68da      	ldr	r2, [r3, #12]
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	f042 0210 	orr.w	r2, r2, #16
 8011b80:	60da      	str	r2, [r3, #12]
      break;
 8011b82:	e002      	b.n	8011b8a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8011b84:	2301      	movs	r3, #1
 8011b86:	73fb      	strb	r3, [r7, #15]
      break;
 8011b88:	bf00      	nop
  }

  if (status == HAL_OK)
 8011b8a:	7bfb      	ldrb	r3, [r7, #15]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d16f      	bne.n	8011c70 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	2201      	movs	r2, #1
 8011b96:	6839      	ldr	r1, [r7, #0]
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f001 fec7 	bl	801392c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	4a36      	ldr	r2, [pc, #216]	@ (8011c7c <HAL_TIM_OC_Start_IT+0x284>)
 8011ba4:	4293      	cmp	r3, r2
 8011ba6:	d013      	beq.n	8011bd0 <HAL_TIM_OC_Start_IT+0x1d8>
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	4a34      	ldr	r2, [pc, #208]	@ (8011c80 <HAL_TIM_OC_Start_IT+0x288>)
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	d00e      	beq.n	8011bd0 <HAL_TIM_OC_Start_IT+0x1d8>
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	4a33      	ldr	r2, [pc, #204]	@ (8011c84 <HAL_TIM_OC_Start_IT+0x28c>)
 8011bb8:	4293      	cmp	r3, r2
 8011bba:	d009      	beq.n	8011bd0 <HAL_TIM_OC_Start_IT+0x1d8>
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	4a31      	ldr	r2, [pc, #196]	@ (8011c88 <HAL_TIM_OC_Start_IT+0x290>)
 8011bc2:	4293      	cmp	r3, r2
 8011bc4:	d004      	beq.n	8011bd0 <HAL_TIM_OC_Start_IT+0x1d8>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4a30      	ldr	r2, [pc, #192]	@ (8011c8c <HAL_TIM_OC_Start_IT+0x294>)
 8011bcc:	4293      	cmp	r3, r2
 8011bce:	d101      	bne.n	8011bd4 <HAL_TIM_OC_Start_IT+0x1dc>
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	e000      	b.n	8011bd6 <HAL_TIM_OC_Start_IT+0x1de>
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d007      	beq.n	8011bea <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011be8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	4a23      	ldr	r2, [pc, #140]	@ (8011c7c <HAL_TIM_OC_Start_IT+0x284>)
 8011bf0:	4293      	cmp	r3, r2
 8011bf2:	d01d      	beq.n	8011c30 <HAL_TIM_OC_Start_IT+0x238>
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011bfc:	d018      	beq.n	8011c30 <HAL_TIM_OC_Start_IT+0x238>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	4a23      	ldr	r2, [pc, #140]	@ (8011c90 <HAL_TIM_OC_Start_IT+0x298>)
 8011c04:	4293      	cmp	r3, r2
 8011c06:	d013      	beq.n	8011c30 <HAL_TIM_OC_Start_IT+0x238>
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	4a21      	ldr	r2, [pc, #132]	@ (8011c94 <HAL_TIM_OC_Start_IT+0x29c>)
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	d00e      	beq.n	8011c30 <HAL_TIM_OC_Start_IT+0x238>
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	4a20      	ldr	r2, [pc, #128]	@ (8011c98 <HAL_TIM_OC_Start_IT+0x2a0>)
 8011c18:	4293      	cmp	r3, r2
 8011c1a:	d009      	beq.n	8011c30 <HAL_TIM_OC_Start_IT+0x238>
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	4a17      	ldr	r2, [pc, #92]	@ (8011c80 <HAL_TIM_OC_Start_IT+0x288>)
 8011c22:	4293      	cmp	r3, r2
 8011c24:	d004      	beq.n	8011c30 <HAL_TIM_OC_Start_IT+0x238>
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	4a16      	ldr	r2, [pc, #88]	@ (8011c84 <HAL_TIM_OC_Start_IT+0x28c>)
 8011c2c:	4293      	cmp	r3, r2
 8011c2e:	d115      	bne.n	8011c5c <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	689a      	ldr	r2, [r3, #8]
 8011c36:	4b19      	ldr	r3, [pc, #100]	@ (8011c9c <HAL_TIM_OC_Start_IT+0x2a4>)
 8011c38:	4013      	ands	r3, r2
 8011c3a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	2b06      	cmp	r3, #6
 8011c40:	d015      	beq.n	8011c6e <HAL_TIM_OC_Start_IT+0x276>
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011c48:	d011      	beq.n	8011c6e <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	681a      	ldr	r2, [r3, #0]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	f042 0201 	orr.w	r2, r2, #1
 8011c58:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c5a:	e008      	b.n	8011c6e <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	681a      	ldr	r2, [r3, #0]
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	f042 0201 	orr.w	r2, r2, #1
 8011c6a:	601a      	str	r2, [r3, #0]
 8011c6c:	e000      	b.n	8011c70 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011c6e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8011c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3710      	adds	r7, #16
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
 8011c7a:	bf00      	nop
 8011c7c:	40012c00 	.word	0x40012c00
 8011c80:	40013400 	.word	0x40013400
 8011c84:	40014000 	.word	0x40014000
 8011c88:	40014400 	.word	0x40014400
 8011c8c:	40014800 	.word	0x40014800
 8011c90:	40000400 	.word	0x40000400
 8011c94:	40000800 	.word	0x40000800
 8011c98:	40000c00 	.word	0x40000c00
 8011c9c:	00010007 	.word	0x00010007

08011ca0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b084      	sub	sp, #16
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011caa:	2300      	movs	r3, #0
 8011cac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	2b0c      	cmp	r3, #12
 8011cb2:	d841      	bhi.n	8011d38 <HAL_TIM_OC_Stop_IT+0x98>
 8011cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8011cbc <HAL_TIM_OC_Stop_IT+0x1c>)
 8011cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cba:	bf00      	nop
 8011cbc:	08011cf1 	.word	0x08011cf1
 8011cc0:	08011d39 	.word	0x08011d39
 8011cc4:	08011d39 	.word	0x08011d39
 8011cc8:	08011d39 	.word	0x08011d39
 8011ccc:	08011d03 	.word	0x08011d03
 8011cd0:	08011d39 	.word	0x08011d39
 8011cd4:	08011d39 	.word	0x08011d39
 8011cd8:	08011d39 	.word	0x08011d39
 8011cdc:	08011d15 	.word	0x08011d15
 8011ce0:	08011d39 	.word	0x08011d39
 8011ce4:	08011d39 	.word	0x08011d39
 8011ce8:	08011d39 	.word	0x08011d39
 8011cec:	08011d27 	.word	0x08011d27
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	68da      	ldr	r2, [r3, #12]
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	f022 0202 	bic.w	r2, r2, #2
 8011cfe:	60da      	str	r2, [r3, #12]
      break;
 8011d00:	e01d      	b.n	8011d3e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	68da      	ldr	r2, [r3, #12]
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	f022 0204 	bic.w	r2, r2, #4
 8011d10:	60da      	str	r2, [r3, #12]
      break;
 8011d12:	e014      	b.n	8011d3e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	68da      	ldr	r2, [r3, #12]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	f022 0208 	bic.w	r2, r2, #8
 8011d22:	60da      	str	r2, [r3, #12]
      break;
 8011d24:	e00b      	b.n	8011d3e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	68da      	ldr	r2, [r3, #12]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	f022 0210 	bic.w	r2, r2, #16
 8011d34:	60da      	str	r2, [r3, #12]
      break;
 8011d36:	e002      	b.n	8011d3e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8011d38:	2301      	movs	r3, #1
 8011d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8011d3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8011d3e:	7bfb      	ldrb	r3, [r7, #15]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	f040 8081 	bne.w	8011e48 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	6839      	ldr	r1, [r7, #0]
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f001 fdec 	bl	801392c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	4a3e      	ldr	r2, [pc, #248]	@ (8011e54 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8011d5a:	4293      	cmp	r3, r2
 8011d5c:	d013      	beq.n	8011d86 <HAL_TIM_OC_Stop_IT+0xe6>
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	4a3d      	ldr	r2, [pc, #244]	@ (8011e58 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8011d64:	4293      	cmp	r3, r2
 8011d66:	d00e      	beq.n	8011d86 <HAL_TIM_OC_Stop_IT+0xe6>
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	4a3b      	ldr	r2, [pc, #236]	@ (8011e5c <HAL_TIM_OC_Stop_IT+0x1bc>)
 8011d6e:	4293      	cmp	r3, r2
 8011d70:	d009      	beq.n	8011d86 <HAL_TIM_OC_Stop_IT+0xe6>
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	4a3a      	ldr	r2, [pc, #232]	@ (8011e60 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8011d78:	4293      	cmp	r3, r2
 8011d7a:	d004      	beq.n	8011d86 <HAL_TIM_OC_Stop_IT+0xe6>
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	4a38      	ldr	r2, [pc, #224]	@ (8011e64 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8011d82:	4293      	cmp	r3, r2
 8011d84:	d101      	bne.n	8011d8a <HAL_TIM_OC_Stop_IT+0xea>
 8011d86:	2301      	movs	r3, #1
 8011d88:	e000      	b.n	8011d8c <HAL_TIM_OC_Stop_IT+0xec>
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d017      	beq.n	8011dc0 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	6a1a      	ldr	r2, [r3, #32]
 8011d96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011d9a:	4013      	ands	r3, r2
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d10f      	bne.n	8011dc0 <HAL_TIM_OC_Stop_IT+0x120>
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	6a1a      	ldr	r2, [r3, #32]
 8011da6:	f240 4344 	movw	r3, #1092	@ 0x444
 8011daa:	4013      	ands	r3, r2
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d107      	bne.n	8011dc0 <HAL_TIM_OC_Stop_IT+0x120>
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011dbe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	6a1a      	ldr	r2, [r3, #32]
 8011dc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8011dca:	4013      	ands	r3, r2
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d10f      	bne.n	8011df0 <HAL_TIM_OC_Stop_IT+0x150>
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	6a1a      	ldr	r2, [r3, #32]
 8011dd6:	f240 4344 	movw	r3, #1092	@ 0x444
 8011dda:	4013      	ands	r3, r2
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d107      	bne.n	8011df0 <HAL_TIM_OC_Stop_IT+0x150>
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	681a      	ldr	r2, [r3, #0]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	f022 0201 	bic.w	r2, r2, #1
 8011dee:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d104      	bne.n	8011e00 <HAL_TIM_OC_Stop_IT+0x160>
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2201      	movs	r2, #1
 8011dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011dfe:	e023      	b.n	8011e48 <HAL_TIM_OC_Stop_IT+0x1a8>
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	2b04      	cmp	r3, #4
 8011e04:	d104      	bne.n	8011e10 <HAL_TIM_OC_Stop_IT+0x170>
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2201      	movs	r2, #1
 8011e0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011e0e:	e01b      	b.n	8011e48 <HAL_TIM_OC_Stop_IT+0x1a8>
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	2b08      	cmp	r3, #8
 8011e14:	d104      	bne.n	8011e20 <HAL_TIM_OC_Stop_IT+0x180>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2201      	movs	r2, #1
 8011e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011e1e:	e013      	b.n	8011e48 <HAL_TIM_OC_Stop_IT+0x1a8>
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	2b0c      	cmp	r3, #12
 8011e24:	d104      	bne.n	8011e30 <HAL_TIM_OC_Stop_IT+0x190>
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2201      	movs	r2, #1
 8011e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011e2e:	e00b      	b.n	8011e48 <HAL_TIM_OC_Stop_IT+0x1a8>
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	2b10      	cmp	r3, #16
 8011e34:	d104      	bne.n	8011e40 <HAL_TIM_OC_Stop_IT+0x1a0>
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2201      	movs	r2, #1
 8011e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011e3e:	e003      	b.n	8011e48 <HAL_TIM_OC_Stop_IT+0x1a8>
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2201      	movs	r2, #1
 8011e44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8011e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3710      	adds	r7, #16
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
 8011e52:	bf00      	nop
 8011e54:	40012c00 	.word	0x40012c00
 8011e58:	40013400 	.word	0x40013400
 8011e5c:	40014000 	.word	0x40014000
 8011e60:	40014400 	.word	0x40014400
 8011e64:	40014800 	.word	0x40014800

08011e68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b082      	sub	sp, #8
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d101      	bne.n	8011e7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011e76:	2301      	movs	r3, #1
 8011e78:	e049      	b.n	8011f0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011e80:	b2db      	uxtb	r3, r3
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d106      	bne.n	8011e94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2200      	movs	r2, #0
 8011e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f000 f841 	bl	8011f16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2202      	movs	r2, #2
 8011e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	681a      	ldr	r2, [r3, #0]
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	3304      	adds	r3, #4
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	4610      	mov	r0, r2
 8011ea8:	f000 ff72 	bl	8012d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2201      	movs	r2, #1
 8011eb0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2201      	movs	r2, #1
 8011eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2201      	movs	r2, #1
 8011ec0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2201      	movs	r2, #1
 8011ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2201      	movs	r2, #1
 8011ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2201      	movs	r2, #1
 8011ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2201      	movs	r2, #1
 8011ee0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2201      	movs	r2, #1
 8011ee8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	2201      	movs	r2, #1
 8011ef0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2201      	movs	r2, #1
 8011ef8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2201      	movs	r2, #1
 8011f00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2201      	movs	r2, #1
 8011f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8011f0c:	2300      	movs	r3, #0
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3708      	adds	r7, #8
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}

08011f16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8011f16:	b480      	push	{r7}
 8011f18:	b083      	sub	sp, #12
 8011f1a:	af00      	add	r7, sp, #0
 8011f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8011f1e:	bf00      	nop
 8011f20:	370c      	adds	r7, #12
 8011f22:	46bd      	mov	sp, r7
 8011f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f28:	4770      	bx	lr
	...

08011f2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b084      	sub	sp, #16
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d109      	bne.n	8011f50 <HAL_TIM_PWM_Start+0x24>
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	2b01      	cmp	r3, #1
 8011f46:	bf14      	ite	ne
 8011f48:	2301      	movne	r3, #1
 8011f4a:	2300      	moveq	r3, #0
 8011f4c:	b2db      	uxtb	r3, r3
 8011f4e:	e03c      	b.n	8011fca <HAL_TIM_PWM_Start+0x9e>
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	2b04      	cmp	r3, #4
 8011f54:	d109      	bne.n	8011f6a <HAL_TIM_PWM_Start+0x3e>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8011f5c:	b2db      	uxtb	r3, r3
 8011f5e:	2b01      	cmp	r3, #1
 8011f60:	bf14      	ite	ne
 8011f62:	2301      	movne	r3, #1
 8011f64:	2300      	moveq	r3, #0
 8011f66:	b2db      	uxtb	r3, r3
 8011f68:	e02f      	b.n	8011fca <HAL_TIM_PWM_Start+0x9e>
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	2b08      	cmp	r3, #8
 8011f6e:	d109      	bne.n	8011f84 <HAL_TIM_PWM_Start+0x58>
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011f76:	b2db      	uxtb	r3, r3
 8011f78:	2b01      	cmp	r3, #1
 8011f7a:	bf14      	ite	ne
 8011f7c:	2301      	movne	r3, #1
 8011f7e:	2300      	moveq	r3, #0
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	e022      	b.n	8011fca <HAL_TIM_PWM_Start+0x9e>
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	2b0c      	cmp	r3, #12
 8011f88:	d109      	bne.n	8011f9e <HAL_TIM_PWM_Start+0x72>
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011f90:	b2db      	uxtb	r3, r3
 8011f92:	2b01      	cmp	r3, #1
 8011f94:	bf14      	ite	ne
 8011f96:	2301      	movne	r3, #1
 8011f98:	2300      	moveq	r3, #0
 8011f9a:	b2db      	uxtb	r3, r3
 8011f9c:	e015      	b.n	8011fca <HAL_TIM_PWM_Start+0x9e>
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	2b10      	cmp	r3, #16
 8011fa2:	d109      	bne.n	8011fb8 <HAL_TIM_PWM_Start+0x8c>
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011faa:	b2db      	uxtb	r3, r3
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	bf14      	ite	ne
 8011fb0:	2301      	movne	r3, #1
 8011fb2:	2300      	moveq	r3, #0
 8011fb4:	b2db      	uxtb	r3, r3
 8011fb6:	e008      	b.n	8011fca <HAL_TIM_PWM_Start+0x9e>
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011fbe:	b2db      	uxtb	r3, r3
 8011fc0:	2b01      	cmp	r3, #1
 8011fc2:	bf14      	ite	ne
 8011fc4:	2301      	movne	r3, #1
 8011fc6:	2300      	moveq	r3, #0
 8011fc8:	b2db      	uxtb	r3, r3
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d001      	beq.n	8011fd2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8011fce:	2301      	movs	r3, #1
 8011fd0:	e09c      	b.n	801210c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d104      	bne.n	8011fe2 <HAL_TIM_PWM_Start+0xb6>
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2202      	movs	r2, #2
 8011fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011fe0:	e023      	b.n	801202a <HAL_TIM_PWM_Start+0xfe>
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	2b04      	cmp	r3, #4
 8011fe6:	d104      	bne.n	8011ff2 <HAL_TIM_PWM_Start+0xc6>
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2202      	movs	r2, #2
 8011fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8011ff0:	e01b      	b.n	801202a <HAL_TIM_PWM_Start+0xfe>
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	2b08      	cmp	r3, #8
 8011ff6:	d104      	bne.n	8012002 <HAL_TIM_PWM_Start+0xd6>
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2202      	movs	r2, #2
 8011ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012000:	e013      	b.n	801202a <HAL_TIM_PWM_Start+0xfe>
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	2b0c      	cmp	r3, #12
 8012006:	d104      	bne.n	8012012 <HAL_TIM_PWM_Start+0xe6>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2202      	movs	r2, #2
 801200c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012010:	e00b      	b.n	801202a <HAL_TIM_PWM_Start+0xfe>
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	2b10      	cmp	r3, #16
 8012016:	d104      	bne.n	8012022 <HAL_TIM_PWM_Start+0xf6>
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2202      	movs	r2, #2
 801201c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012020:	e003      	b.n	801202a <HAL_TIM_PWM_Start+0xfe>
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2202      	movs	r2, #2
 8012026:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	2201      	movs	r2, #1
 8012030:	6839      	ldr	r1, [r7, #0]
 8012032:	4618      	mov	r0, r3
 8012034:	f001 fc7a 	bl	801392c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	4a35      	ldr	r2, [pc, #212]	@ (8012114 <HAL_TIM_PWM_Start+0x1e8>)
 801203e:	4293      	cmp	r3, r2
 8012040:	d013      	beq.n	801206a <HAL_TIM_PWM_Start+0x13e>
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	4a34      	ldr	r2, [pc, #208]	@ (8012118 <HAL_TIM_PWM_Start+0x1ec>)
 8012048:	4293      	cmp	r3, r2
 801204a:	d00e      	beq.n	801206a <HAL_TIM_PWM_Start+0x13e>
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	4a32      	ldr	r2, [pc, #200]	@ (801211c <HAL_TIM_PWM_Start+0x1f0>)
 8012052:	4293      	cmp	r3, r2
 8012054:	d009      	beq.n	801206a <HAL_TIM_PWM_Start+0x13e>
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	4a31      	ldr	r2, [pc, #196]	@ (8012120 <HAL_TIM_PWM_Start+0x1f4>)
 801205c:	4293      	cmp	r3, r2
 801205e:	d004      	beq.n	801206a <HAL_TIM_PWM_Start+0x13e>
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	4a2f      	ldr	r2, [pc, #188]	@ (8012124 <HAL_TIM_PWM_Start+0x1f8>)
 8012066:	4293      	cmp	r3, r2
 8012068:	d101      	bne.n	801206e <HAL_TIM_PWM_Start+0x142>
 801206a:	2301      	movs	r3, #1
 801206c:	e000      	b.n	8012070 <HAL_TIM_PWM_Start+0x144>
 801206e:	2300      	movs	r3, #0
 8012070:	2b00      	cmp	r3, #0
 8012072:	d007      	beq.n	8012084 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012082:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	4a22      	ldr	r2, [pc, #136]	@ (8012114 <HAL_TIM_PWM_Start+0x1e8>)
 801208a:	4293      	cmp	r3, r2
 801208c:	d01d      	beq.n	80120ca <HAL_TIM_PWM_Start+0x19e>
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012096:	d018      	beq.n	80120ca <HAL_TIM_PWM_Start+0x19e>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	4a22      	ldr	r2, [pc, #136]	@ (8012128 <HAL_TIM_PWM_Start+0x1fc>)
 801209e:	4293      	cmp	r3, r2
 80120a0:	d013      	beq.n	80120ca <HAL_TIM_PWM_Start+0x19e>
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	4a21      	ldr	r2, [pc, #132]	@ (801212c <HAL_TIM_PWM_Start+0x200>)
 80120a8:	4293      	cmp	r3, r2
 80120aa:	d00e      	beq.n	80120ca <HAL_TIM_PWM_Start+0x19e>
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	4a1f      	ldr	r2, [pc, #124]	@ (8012130 <HAL_TIM_PWM_Start+0x204>)
 80120b2:	4293      	cmp	r3, r2
 80120b4:	d009      	beq.n	80120ca <HAL_TIM_PWM_Start+0x19e>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	4a17      	ldr	r2, [pc, #92]	@ (8012118 <HAL_TIM_PWM_Start+0x1ec>)
 80120bc:	4293      	cmp	r3, r2
 80120be:	d004      	beq.n	80120ca <HAL_TIM_PWM_Start+0x19e>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	4a15      	ldr	r2, [pc, #84]	@ (801211c <HAL_TIM_PWM_Start+0x1f0>)
 80120c6:	4293      	cmp	r3, r2
 80120c8:	d115      	bne.n	80120f6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	689a      	ldr	r2, [r3, #8]
 80120d0:	4b18      	ldr	r3, [pc, #96]	@ (8012134 <HAL_TIM_PWM_Start+0x208>)
 80120d2:	4013      	ands	r3, r2
 80120d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2b06      	cmp	r3, #6
 80120da:	d015      	beq.n	8012108 <HAL_TIM_PWM_Start+0x1dc>
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80120e2:	d011      	beq.n	8012108 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	681a      	ldr	r2, [r3, #0]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	f042 0201 	orr.w	r2, r2, #1
 80120f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80120f4:	e008      	b.n	8012108 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	f042 0201 	orr.w	r2, r2, #1
 8012104:	601a      	str	r2, [r3, #0]
 8012106:	e000      	b.n	801210a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012108:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801210a:	2300      	movs	r3, #0
}
 801210c:	4618      	mov	r0, r3
 801210e:	3710      	adds	r7, #16
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}
 8012114:	40012c00 	.word	0x40012c00
 8012118:	40013400 	.word	0x40013400
 801211c:	40014000 	.word	0x40014000
 8012120:	40014400 	.word	0x40014400
 8012124:	40014800 	.word	0x40014800
 8012128:	40000400 	.word	0x40000400
 801212c:	40000800 	.word	0x40000800
 8012130:	40000c00 	.word	0x40000c00
 8012134:	00010007 	.word	0x00010007

08012138 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	2200      	movs	r2, #0
 8012148:	6839      	ldr	r1, [r7, #0]
 801214a:	4618      	mov	r0, r3
 801214c:	f001 fbee 	bl	801392c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	4a3e      	ldr	r2, [pc, #248]	@ (8012250 <HAL_TIM_PWM_Stop+0x118>)
 8012156:	4293      	cmp	r3, r2
 8012158:	d013      	beq.n	8012182 <HAL_TIM_PWM_Stop+0x4a>
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	4a3d      	ldr	r2, [pc, #244]	@ (8012254 <HAL_TIM_PWM_Stop+0x11c>)
 8012160:	4293      	cmp	r3, r2
 8012162:	d00e      	beq.n	8012182 <HAL_TIM_PWM_Stop+0x4a>
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	4a3b      	ldr	r2, [pc, #236]	@ (8012258 <HAL_TIM_PWM_Stop+0x120>)
 801216a:	4293      	cmp	r3, r2
 801216c:	d009      	beq.n	8012182 <HAL_TIM_PWM_Stop+0x4a>
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	4a3a      	ldr	r2, [pc, #232]	@ (801225c <HAL_TIM_PWM_Stop+0x124>)
 8012174:	4293      	cmp	r3, r2
 8012176:	d004      	beq.n	8012182 <HAL_TIM_PWM_Stop+0x4a>
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	4a38      	ldr	r2, [pc, #224]	@ (8012260 <HAL_TIM_PWM_Stop+0x128>)
 801217e:	4293      	cmp	r3, r2
 8012180:	d101      	bne.n	8012186 <HAL_TIM_PWM_Stop+0x4e>
 8012182:	2301      	movs	r3, #1
 8012184:	e000      	b.n	8012188 <HAL_TIM_PWM_Stop+0x50>
 8012186:	2300      	movs	r3, #0
 8012188:	2b00      	cmp	r3, #0
 801218a:	d017      	beq.n	80121bc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	6a1a      	ldr	r2, [r3, #32]
 8012192:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012196:	4013      	ands	r3, r2
 8012198:	2b00      	cmp	r3, #0
 801219a:	d10f      	bne.n	80121bc <HAL_TIM_PWM_Stop+0x84>
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	6a1a      	ldr	r2, [r3, #32]
 80121a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80121a6:	4013      	ands	r3, r2
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d107      	bne.n	80121bc <HAL_TIM_PWM_Stop+0x84>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80121ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	6a1a      	ldr	r2, [r3, #32]
 80121c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80121c6:	4013      	ands	r3, r2
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d10f      	bne.n	80121ec <HAL_TIM_PWM_Stop+0xb4>
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	6a1a      	ldr	r2, [r3, #32]
 80121d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80121d6:	4013      	ands	r3, r2
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d107      	bne.n	80121ec <HAL_TIM_PWM_Stop+0xb4>
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	681a      	ldr	r2, [r3, #0]
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	f022 0201 	bic.w	r2, r2, #1
 80121ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d104      	bne.n	80121fc <HAL_TIM_PWM_Stop+0xc4>
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2201      	movs	r2, #1
 80121f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80121fa:	e023      	b.n	8012244 <HAL_TIM_PWM_Stop+0x10c>
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	2b04      	cmp	r3, #4
 8012200:	d104      	bne.n	801220c <HAL_TIM_PWM_Stop+0xd4>
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2201      	movs	r2, #1
 8012206:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801220a:	e01b      	b.n	8012244 <HAL_TIM_PWM_Stop+0x10c>
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	2b08      	cmp	r3, #8
 8012210:	d104      	bne.n	801221c <HAL_TIM_PWM_Stop+0xe4>
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2201      	movs	r2, #1
 8012216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801221a:	e013      	b.n	8012244 <HAL_TIM_PWM_Stop+0x10c>
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	2b0c      	cmp	r3, #12
 8012220:	d104      	bne.n	801222c <HAL_TIM_PWM_Stop+0xf4>
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2201      	movs	r2, #1
 8012226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801222a:	e00b      	b.n	8012244 <HAL_TIM_PWM_Stop+0x10c>
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	2b10      	cmp	r3, #16
 8012230:	d104      	bne.n	801223c <HAL_TIM_PWM_Stop+0x104>
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2201      	movs	r2, #1
 8012236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801223a:	e003      	b.n	8012244 <HAL_TIM_PWM_Stop+0x10c>
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2201      	movs	r2, #1
 8012240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8012244:	2300      	movs	r3, #0
}
 8012246:	4618      	mov	r0, r3
 8012248:	3708      	adds	r7, #8
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	40012c00 	.word	0x40012c00
 8012254:	40013400 	.word	0x40013400
 8012258:	40014000 	.word	0x40014000
 801225c:	40014400 	.word	0x40014400
 8012260:	40014800 	.word	0x40014800

08012264 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b082      	sub	sp, #8
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d101      	bne.n	8012276 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8012272:	2301      	movs	r3, #1
 8012274:	e049      	b.n	801230a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801227c:	b2db      	uxtb	r3, r3
 801227e:	2b00      	cmp	r3, #0
 8012280:	d106      	bne.n	8012290 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2200      	movs	r2, #0
 8012286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f7f4 fcb4 	bl	8006bf8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2202      	movs	r2, #2
 8012294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	3304      	adds	r3, #4
 80122a0:	4619      	mov	r1, r3
 80122a2:	4610      	mov	r0, r2
 80122a4:	f000 fd74 	bl	8012d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2201      	movs	r2, #1
 80122ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2201      	movs	r2, #1
 80122b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2201      	movs	r2, #1
 80122bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2201      	movs	r2, #1
 80122c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2201      	movs	r2, #1
 80122cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2201      	movs	r2, #1
 80122d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2201      	movs	r2, #1
 80122dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2201      	movs	r2, #1
 80122e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2201      	movs	r2, #1
 80122ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2201      	movs	r2, #1
 80122f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2201      	movs	r2, #1
 80122fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2201      	movs	r2, #1
 8012304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012308:	2300      	movs	r3, #0
}
 801230a:	4618      	mov	r0, r3
 801230c:	3708      	adds	r7, #8
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
	...

08012314 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b084      	sub	sp, #16
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801231e:	2300      	movs	r3, #0
 8012320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d104      	bne.n	8012332 <HAL_TIM_IC_Start_IT+0x1e>
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 801232e:	b2db      	uxtb	r3, r3
 8012330:	e023      	b.n	801237a <HAL_TIM_IC_Start_IT+0x66>
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	2b04      	cmp	r3, #4
 8012336:	d104      	bne.n	8012342 <HAL_TIM_IC_Start_IT+0x2e>
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801233e:	b2db      	uxtb	r3, r3
 8012340:	e01b      	b.n	801237a <HAL_TIM_IC_Start_IT+0x66>
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	2b08      	cmp	r3, #8
 8012346:	d104      	bne.n	8012352 <HAL_TIM_IC_Start_IT+0x3e>
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801234e:	b2db      	uxtb	r3, r3
 8012350:	e013      	b.n	801237a <HAL_TIM_IC_Start_IT+0x66>
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	2b0c      	cmp	r3, #12
 8012356:	d104      	bne.n	8012362 <HAL_TIM_IC_Start_IT+0x4e>
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801235e:	b2db      	uxtb	r3, r3
 8012360:	e00b      	b.n	801237a <HAL_TIM_IC_Start_IT+0x66>
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	2b10      	cmp	r3, #16
 8012366:	d104      	bne.n	8012372 <HAL_TIM_IC_Start_IT+0x5e>
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801236e:	b2db      	uxtb	r3, r3
 8012370:	e003      	b.n	801237a <HAL_TIM_IC_Start_IT+0x66>
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012378:	b2db      	uxtb	r3, r3
 801237a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d104      	bne.n	801238c <HAL_TIM_IC_Start_IT+0x78>
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012388:	b2db      	uxtb	r3, r3
 801238a:	e013      	b.n	80123b4 <HAL_TIM_IC_Start_IT+0xa0>
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	2b04      	cmp	r3, #4
 8012390:	d104      	bne.n	801239c <HAL_TIM_IC_Start_IT+0x88>
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012398:	b2db      	uxtb	r3, r3
 801239a:	e00b      	b.n	80123b4 <HAL_TIM_IC_Start_IT+0xa0>
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	2b08      	cmp	r3, #8
 80123a0:	d104      	bne.n	80123ac <HAL_TIM_IC_Start_IT+0x98>
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80123a8:	b2db      	uxtb	r3, r3
 80123aa:	e003      	b.n	80123b4 <HAL_TIM_IC_Start_IT+0xa0>
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80123b6:	7bbb      	ldrb	r3, [r7, #14]
 80123b8:	2b01      	cmp	r3, #1
 80123ba:	d102      	bne.n	80123c2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80123bc:	7b7b      	ldrb	r3, [r7, #13]
 80123be:	2b01      	cmp	r3, #1
 80123c0:	d001      	beq.n	80123c6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80123c2:	2301      	movs	r3, #1
 80123c4:	e0dd      	b.n	8012582 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d104      	bne.n	80123d6 <HAL_TIM_IC_Start_IT+0xc2>
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	2202      	movs	r2, #2
 80123d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80123d4:	e023      	b.n	801241e <HAL_TIM_IC_Start_IT+0x10a>
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	2b04      	cmp	r3, #4
 80123da:	d104      	bne.n	80123e6 <HAL_TIM_IC_Start_IT+0xd2>
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2202      	movs	r2, #2
 80123e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80123e4:	e01b      	b.n	801241e <HAL_TIM_IC_Start_IT+0x10a>
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	2b08      	cmp	r3, #8
 80123ea:	d104      	bne.n	80123f6 <HAL_TIM_IC_Start_IT+0xe2>
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2202      	movs	r2, #2
 80123f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80123f4:	e013      	b.n	801241e <HAL_TIM_IC_Start_IT+0x10a>
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	2b0c      	cmp	r3, #12
 80123fa:	d104      	bne.n	8012406 <HAL_TIM_IC_Start_IT+0xf2>
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2202      	movs	r2, #2
 8012400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012404:	e00b      	b.n	801241e <HAL_TIM_IC_Start_IT+0x10a>
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	2b10      	cmp	r3, #16
 801240a:	d104      	bne.n	8012416 <HAL_TIM_IC_Start_IT+0x102>
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2202      	movs	r2, #2
 8012410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012414:	e003      	b.n	801241e <HAL_TIM_IC_Start_IT+0x10a>
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	2202      	movs	r2, #2
 801241a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d104      	bne.n	801242e <HAL_TIM_IC_Start_IT+0x11a>
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2202      	movs	r2, #2
 8012428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801242c:	e013      	b.n	8012456 <HAL_TIM_IC_Start_IT+0x142>
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	2b04      	cmp	r3, #4
 8012432:	d104      	bne.n	801243e <HAL_TIM_IC_Start_IT+0x12a>
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2202      	movs	r2, #2
 8012438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801243c:	e00b      	b.n	8012456 <HAL_TIM_IC_Start_IT+0x142>
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	2b08      	cmp	r3, #8
 8012442:	d104      	bne.n	801244e <HAL_TIM_IC_Start_IT+0x13a>
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2202      	movs	r2, #2
 8012448:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801244c:	e003      	b.n	8012456 <HAL_TIM_IC_Start_IT+0x142>
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2202      	movs	r2, #2
 8012452:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	2b0c      	cmp	r3, #12
 801245a:	d841      	bhi.n	80124e0 <HAL_TIM_IC_Start_IT+0x1cc>
 801245c:	a201      	add	r2, pc, #4	@ (adr r2, 8012464 <HAL_TIM_IC_Start_IT+0x150>)
 801245e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012462:	bf00      	nop
 8012464:	08012499 	.word	0x08012499
 8012468:	080124e1 	.word	0x080124e1
 801246c:	080124e1 	.word	0x080124e1
 8012470:	080124e1 	.word	0x080124e1
 8012474:	080124ab 	.word	0x080124ab
 8012478:	080124e1 	.word	0x080124e1
 801247c:	080124e1 	.word	0x080124e1
 8012480:	080124e1 	.word	0x080124e1
 8012484:	080124bd 	.word	0x080124bd
 8012488:	080124e1 	.word	0x080124e1
 801248c:	080124e1 	.word	0x080124e1
 8012490:	080124e1 	.word	0x080124e1
 8012494:	080124cf 	.word	0x080124cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	68da      	ldr	r2, [r3, #12]
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	f042 0202 	orr.w	r2, r2, #2
 80124a6:	60da      	str	r2, [r3, #12]
      break;
 80124a8:	e01d      	b.n	80124e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	68da      	ldr	r2, [r3, #12]
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	f042 0204 	orr.w	r2, r2, #4
 80124b8:	60da      	str	r2, [r3, #12]
      break;
 80124ba:	e014      	b.n	80124e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	68da      	ldr	r2, [r3, #12]
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	f042 0208 	orr.w	r2, r2, #8
 80124ca:	60da      	str	r2, [r3, #12]
      break;
 80124cc:	e00b      	b.n	80124e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	68da      	ldr	r2, [r3, #12]
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	f042 0210 	orr.w	r2, r2, #16
 80124dc:	60da      	str	r2, [r3, #12]
      break;
 80124de:	e002      	b.n	80124e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80124e0:	2301      	movs	r3, #1
 80124e2:	73fb      	strb	r3, [r7, #15]
      break;
 80124e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80124e6:	7bfb      	ldrb	r3, [r7, #15]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d149      	bne.n	8012580 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2201      	movs	r2, #1
 80124f2:	6839      	ldr	r1, [r7, #0]
 80124f4:	4618      	mov	r0, r3
 80124f6:	f001 fa19 	bl	801392c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	4a23      	ldr	r2, [pc, #140]	@ (801258c <HAL_TIM_IC_Start_IT+0x278>)
 8012500:	4293      	cmp	r3, r2
 8012502:	d01d      	beq.n	8012540 <HAL_TIM_IC_Start_IT+0x22c>
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801250c:	d018      	beq.n	8012540 <HAL_TIM_IC_Start_IT+0x22c>
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	4a1f      	ldr	r2, [pc, #124]	@ (8012590 <HAL_TIM_IC_Start_IT+0x27c>)
 8012514:	4293      	cmp	r3, r2
 8012516:	d013      	beq.n	8012540 <HAL_TIM_IC_Start_IT+0x22c>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	4a1d      	ldr	r2, [pc, #116]	@ (8012594 <HAL_TIM_IC_Start_IT+0x280>)
 801251e:	4293      	cmp	r3, r2
 8012520:	d00e      	beq.n	8012540 <HAL_TIM_IC_Start_IT+0x22c>
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	4a1c      	ldr	r2, [pc, #112]	@ (8012598 <HAL_TIM_IC_Start_IT+0x284>)
 8012528:	4293      	cmp	r3, r2
 801252a:	d009      	beq.n	8012540 <HAL_TIM_IC_Start_IT+0x22c>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	4a1a      	ldr	r2, [pc, #104]	@ (801259c <HAL_TIM_IC_Start_IT+0x288>)
 8012532:	4293      	cmp	r3, r2
 8012534:	d004      	beq.n	8012540 <HAL_TIM_IC_Start_IT+0x22c>
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	4a19      	ldr	r2, [pc, #100]	@ (80125a0 <HAL_TIM_IC_Start_IT+0x28c>)
 801253c:	4293      	cmp	r3, r2
 801253e:	d115      	bne.n	801256c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	689a      	ldr	r2, [r3, #8]
 8012546:	4b17      	ldr	r3, [pc, #92]	@ (80125a4 <HAL_TIM_IC_Start_IT+0x290>)
 8012548:	4013      	ands	r3, r2
 801254a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	2b06      	cmp	r3, #6
 8012550:	d015      	beq.n	801257e <HAL_TIM_IC_Start_IT+0x26a>
 8012552:	68bb      	ldr	r3, [r7, #8]
 8012554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012558:	d011      	beq.n	801257e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	681a      	ldr	r2, [r3, #0]
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	f042 0201 	orr.w	r2, r2, #1
 8012568:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801256a:	e008      	b.n	801257e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	681a      	ldr	r2, [r3, #0]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	f042 0201 	orr.w	r2, r2, #1
 801257a:	601a      	str	r2, [r3, #0]
 801257c:	e000      	b.n	8012580 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801257e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012580:	7bfb      	ldrb	r3, [r7, #15]
}
 8012582:	4618      	mov	r0, r3
 8012584:	3710      	adds	r7, #16
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop
 801258c:	40012c00 	.word	0x40012c00
 8012590:	40000400 	.word	0x40000400
 8012594:	40000800 	.word	0x40000800
 8012598:	40000c00 	.word	0x40000c00
 801259c:	40013400 	.word	0x40013400
 80125a0:	40014000 	.word	0x40014000
 80125a4:	00010007 	.word	0x00010007

080125a8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b084      	sub	sp, #16
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80125b2:	2300      	movs	r3, #0
 80125b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	2b0c      	cmp	r3, #12
 80125ba:	d841      	bhi.n	8012640 <HAL_TIM_IC_Stop_IT+0x98>
 80125bc:	a201      	add	r2, pc, #4	@ (adr r2, 80125c4 <HAL_TIM_IC_Stop_IT+0x1c>)
 80125be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125c2:	bf00      	nop
 80125c4:	080125f9 	.word	0x080125f9
 80125c8:	08012641 	.word	0x08012641
 80125cc:	08012641 	.word	0x08012641
 80125d0:	08012641 	.word	0x08012641
 80125d4:	0801260b 	.word	0x0801260b
 80125d8:	08012641 	.word	0x08012641
 80125dc:	08012641 	.word	0x08012641
 80125e0:	08012641 	.word	0x08012641
 80125e4:	0801261d 	.word	0x0801261d
 80125e8:	08012641 	.word	0x08012641
 80125ec:	08012641 	.word	0x08012641
 80125f0:	08012641 	.word	0x08012641
 80125f4:	0801262f 	.word	0x0801262f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	68da      	ldr	r2, [r3, #12]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	f022 0202 	bic.w	r2, r2, #2
 8012606:	60da      	str	r2, [r3, #12]
      break;
 8012608:	e01d      	b.n	8012646 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	68da      	ldr	r2, [r3, #12]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	f022 0204 	bic.w	r2, r2, #4
 8012618:	60da      	str	r2, [r3, #12]
      break;
 801261a:	e014      	b.n	8012646 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	68da      	ldr	r2, [r3, #12]
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	f022 0208 	bic.w	r2, r2, #8
 801262a:	60da      	str	r2, [r3, #12]
      break;
 801262c:	e00b      	b.n	8012646 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	68da      	ldr	r2, [r3, #12]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	f022 0210 	bic.w	r2, r2, #16
 801263c:	60da      	str	r2, [r3, #12]
      break;
 801263e:	e002      	b.n	8012646 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012640:	2301      	movs	r3, #1
 8012642:	73fb      	strb	r3, [r7, #15]
      break;
 8012644:	bf00      	nop
  }

  if (status == HAL_OK)
 8012646:	7bfb      	ldrb	r3, [r7, #15]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d166      	bne.n	801271a <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	2200      	movs	r2, #0
 8012652:	6839      	ldr	r1, [r7, #0]
 8012654:	4618      	mov	r0, r3
 8012656:	f001 f969 	bl	801392c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	6a1a      	ldr	r2, [r3, #32]
 8012660:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012664:	4013      	ands	r3, r2
 8012666:	2b00      	cmp	r3, #0
 8012668:	d10f      	bne.n	801268a <HAL_TIM_IC_Stop_IT+0xe2>
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	6a1a      	ldr	r2, [r3, #32]
 8012670:	f240 4344 	movw	r3, #1092	@ 0x444
 8012674:	4013      	ands	r3, r2
 8012676:	2b00      	cmp	r3, #0
 8012678:	d107      	bne.n	801268a <HAL_TIM_IC_Stop_IT+0xe2>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	681a      	ldr	r2, [r3, #0]
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	f022 0201 	bic.w	r2, r2, #1
 8012688:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d104      	bne.n	801269a <HAL_TIM_IC_Stop_IT+0xf2>
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2201      	movs	r2, #1
 8012694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012698:	e023      	b.n	80126e2 <HAL_TIM_IC_Stop_IT+0x13a>
 801269a:	683b      	ldr	r3, [r7, #0]
 801269c:	2b04      	cmp	r3, #4
 801269e:	d104      	bne.n	80126aa <HAL_TIM_IC_Stop_IT+0x102>
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2201      	movs	r2, #1
 80126a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80126a8:	e01b      	b.n	80126e2 <HAL_TIM_IC_Stop_IT+0x13a>
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	2b08      	cmp	r3, #8
 80126ae:	d104      	bne.n	80126ba <HAL_TIM_IC_Stop_IT+0x112>
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	2201      	movs	r2, #1
 80126b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80126b8:	e013      	b.n	80126e2 <HAL_TIM_IC_Stop_IT+0x13a>
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	2b0c      	cmp	r3, #12
 80126be:	d104      	bne.n	80126ca <HAL_TIM_IC_Stop_IT+0x122>
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2201      	movs	r2, #1
 80126c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80126c8:	e00b      	b.n	80126e2 <HAL_TIM_IC_Stop_IT+0x13a>
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	2b10      	cmp	r3, #16
 80126ce:	d104      	bne.n	80126da <HAL_TIM_IC_Stop_IT+0x132>
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	2201      	movs	r2, #1
 80126d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80126d8:	e003      	b.n	80126e2 <HAL_TIM_IC_Stop_IT+0x13a>
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2201      	movs	r2, #1
 80126de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d104      	bne.n	80126f2 <HAL_TIM_IC_Stop_IT+0x14a>
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2201      	movs	r2, #1
 80126ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80126f0:	e013      	b.n	801271a <HAL_TIM_IC_Stop_IT+0x172>
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	2b04      	cmp	r3, #4
 80126f6:	d104      	bne.n	8012702 <HAL_TIM_IC_Stop_IT+0x15a>
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2201      	movs	r2, #1
 80126fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012700:	e00b      	b.n	801271a <HAL_TIM_IC_Stop_IT+0x172>
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	2b08      	cmp	r3, #8
 8012706:	d104      	bne.n	8012712 <HAL_TIM_IC_Stop_IT+0x16a>
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2201      	movs	r2, #1
 801270c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012710:	e003      	b.n	801271a <HAL_TIM_IC_Stop_IT+0x172>
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2201      	movs	r2, #1
 8012716:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 801271a:	7bfb      	ldrb	r3, [r7, #15]
}
 801271c:	4618      	mov	r0, r3
 801271e:	3710      	adds	r7, #16
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}

08012724 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b086      	sub	sp, #24
 8012728:	af00      	add	r7, sp, #0
 801272a:	60f8      	str	r0, [r7, #12]
 801272c:	60b9      	str	r1, [r7, #8]
 801272e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012730:	2300      	movs	r3, #0
 8012732:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801273a:	2b01      	cmp	r3, #1
 801273c:	d101      	bne.n	8012742 <HAL_TIM_OC_ConfigChannel+0x1e>
 801273e:	2302      	movs	r3, #2
 8012740:	e066      	b.n	8012810 <HAL_TIM_OC_ConfigChannel+0xec>
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	2201      	movs	r2, #1
 8012746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2b14      	cmp	r3, #20
 801274e:	d857      	bhi.n	8012800 <HAL_TIM_OC_ConfigChannel+0xdc>
 8012750:	a201      	add	r2, pc, #4	@ (adr r2, 8012758 <HAL_TIM_OC_ConfigChannel+0x34>)
 8012752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012756:	bf00      	nop
 8012758:	080127ad 	.word	0x080127ad
 801275c:	08012801 	.word	0x08012801
 8012760:	08012801 	.word	0x08012801
 8012764:	08012801 	.word	0x08012801
 8012768:	080127bb 	.word	0x080127bb
 801276c:	08012801 	.word	0x08012801
 8012770:	08012801 	.word	0x08012801
 8012774:	08012801 	.word	0x08012801
 8012778:	080127c9 	.word	0x080127c9
 801277c:	08012801 	.word	0x08012801
 8012780:	08012801 	.word	0x08012801
 8012784:	08012801 	.word	0x08012801
 8012788:	080127d7 	.word	0x080127d7
 801278c:	08012801 	.word	0x08012801
 8012790:	08012801 	.word	0x08012801
 8012794:	08012801 	.word	0x08012801
 8012798:	080127e5 	.word	0x080127e5
 801279c:	08012801 	.word	0x08012801
 80127a0:	08012801 	.word	0x08012801
 80127a4:	08012801 	.word	0x08012801
 80127a8:	080127f3 	.word	0x080127f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	68b9      	ldr	r1, [r7, #8]
 80127b2:	4618      	mov	r0, r3
 80127b4:	f000 fb92 	bl	8012edc <TIM_OC1_SetConfig>
      break;
 80127b8:	e025      	b.n	8012806 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	68b9      	ldr	r1, [r7, #8]
 80127c0:	4618      	mov	r0, r3
 80127c2:	f000 fc1b 	bl	8012ffc <TIM_OC2_SetConfig>
      break;
 80127c6:	e01e      	b.n	8012806 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	68b9      	ldr	r1, [r7, #8]
 80127ce:	4618      	mov	r0, r3
 80127d0:	f000 fc9e 	bl	8013110 <TIM_OC3_SetConfig>
      break;
 80127d4:	e017      	b.n	8012806 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	68b9      	ldr	r1, [r7, #8]
 80127dc:	4618      	mov	r0, r3
 80127de:	f000 fd1f 	bl	8013220 <TIM_OC4_SetConfig>
      break;
 80127e2:	e010      	b.n	8012806 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	68b9      	ldr	r1, [r7, #8]
 80127ea:	4618      	mov	r0, r3
 80127ec:	f000 fd82 	bl	80132f4 <TIM_OC5_SetConfig>
      break;
 80127f0:	e009      	b.n	8012806 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	68b9      	ldr	r1, [r7, #8]
 80127f8:	4618      	mov	r0, r3
 80127fa:	f000 fddf 	bl	80133bc <TIM_OC6_SetConfig>
      break;
 80127fe:	e002      	b.n	8012806 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8012800:	2301      	movs	r3, #1
 8012802:	75fb      	strb	r3, [r7, #23]
      break;
 8012804:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	2200      	movs	r2, #0
 801280a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801280e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012810:	4618      	mov	r0, r3
 8012812:	3718      	adds	r7, #24
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}

08012818 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b086      	sub	sp, #24
 801281c:	af00      	add	r7, sp, #0
 801281e:	60f8      	str	r0, [r7, #12]
 8012820:	60b9      	str	r1, [r7, #8]
 8012822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012824:	2300      	movs	r3, #0
 8012826:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801282e:	2b01      	cmp	r3, #1
 8012830:	d101      	bne.n	8012836 <HAL_TIM_IC_ConfigChannel+0x1e>
 8012832:	2302      	movs	r3, #2
 8012834:	e088      	b.n	8012948 <HAL_TIM_IC_ConfigChannel+0x130>
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	2201      	movs	r2, #1
 801283a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d11b      	bne.n	801287c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8012854:	f000 feac 	bl	80135b0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	699a      	ldr	r2, [r3, #24]
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	f022 020c 	bic.w	r2, r2, #12
 8012866:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	6999      	ldr	r1, [r3, #24]
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	689a      	ldr	r2, [r3, #8]
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	430a      	orrs	r2, r1
 8012878:	619a      	str	r2, [r3, #24]
 801287a:	e060      	b.n	801293e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2b04      	cmp	r3, #4
 8012880:	d11c      	bne.n	80128bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8012892:	f000 ff2a 	bl	80136ea <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	699a      	ldr	r2, [r3, #24]
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80128a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	6999      	ldr	r1, [r3, #24]
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	689b      	ldr	r3, [r3, #8]
 80128b0:	021a      	lsls	r2, r3, #8
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	430a      	orrs	r2, r1
 80128b8:	619a      	str	r2, [r3, #24]
 80128ba:	e040      	b.n	801293e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2b08      	cmp	r3, #8
 80128c0:	d11b      	bne.n	80128fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80128d2:	f000 ff77 	bl	80137c4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	69da      	ldr	r2, [r3, #28]
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	f022 020c 	bic.w	r2, r2, #12
 80128e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	69d9      	ldr	r1, [r3, #28]
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	689a      	ldr	r2, [r3, #8]
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	430a      	orrs	r2, r1
 80128f6:	61da      	str	r2, [r3, #28]
 80128f8:	e021      	b.n	801293e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2b0c      	cmp	r3, #12
 80128fe:	d11c      	bne.n	801293a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8012904:	68bb      	ldr	r3, [r7, #8]
 8012906:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8012910:	f000 ff94 	bl	801383c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	69da      	ldr	r2, [r3, #28]
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8012922:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	69d9      	ldr	r1, [r3, #28]
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	689b      	ldr	r3, [r3, #8]
 801292e:	021a      	lsls	r2, r3, #8
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	430a      	orrs	r2, r1
 8012936:	61da      	str	r2, [r3, #28]
 8012938:	e001      	b.n	801293e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801293a:	2301      	movs	r3, #1
 801293c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	2200      	movs	r2, #0
 8012942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012946:	7dfb      	ldrb	r3, [r7, #23]
}
 8012948:	4618      	mov	r0, r3
 801294a:	3718      	adds	r7, #24
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}

08012950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b086      	sub	sp, #24
 8012954:	af00      	add	r7, sp, #0
 8012956:	60f8      	str	r0, [r7, #12]
 8012958:	60b9      	str	r1, [r7, #8]
 801295a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801295c:	2300      	movs	r3, #0
 801295e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012966:	2b01      	cmp	r3, #1
 8012968:	d101      	bne.n	801296e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801296a:	2302      	movs	r3, #2
 801296c:	e0ff      	b.n	8012b6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	2201      	movs	r2, #1
 8012972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	2b14      	cmp	r3, #20
 801297a:	f200 80f0 	bhi.w	8012b5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801297e:	a201      	add	r2, pc, #4	@ (adr r2, 8012984 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012984:	080129d9 	.word	0x080129d9
 8012988:	08012b5f 	.word	0x08012b5f
 801298c:	08012b5f 	.word	0x08012b5f
 8012990:	08012b5f 	.word	0x08012b5f
 8012994:	08012a19 	.word	0x08012a19
 8012998:	08012b5f 	.word	0x08012b5f
 801299c:	08012b5f 	.word	0x08012b5f
 80129a0:	08012b5f 	.word	0x08012b5f
 80129a4:	08012a5b 	.word	0x08012a5b
 80129a8:	08012b5f 	.word	0x08012b5f
 80129ac:	08012b5f 	.word	0x08012b5f
 80129b0:	08012b5f 	.word	0x08012b5f
 80129b4:	08012a9b 	.word	0x08012a9b
 80129b8:	08012b5f 	.word	0x08012b5f
 80129bc:	08012b5f 	.word	0x08012b5f
 80129c0:	08012b5f 	.word	0x08012b5f
 80129c4:	08012add 	.word	0x08012add
 80129c8:	08012b5f 	.word	0x08012b5f
 80129cc:	08012b5f 	.word	0x08012b5f
 80129d0:	08012b5f 	.word	0x08012b5f
 80129d4:	08012b1d 	.word	0x08012b1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	68b9      	ldr	r1, [r7, #8]
 80129de:	4618      	mov	r0, r3
 80129e0:	f000 fa7c 	bl	8012edc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	699a      	ldr	r2, [r3, #24]
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	f042 0208 	orr.w	r2, r2, #8
 80129f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	699a      	ldr	r2, [r3, #24]
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	f022 0204 	bic.w	r2, r2, #4
 8012a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	6999      	ldr	r1, [r3, #24]
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	691a      	ldr	r2, [r3, #16]
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	430a      	orrs	r2, r1
 8012a14:	619a      	str	r2, [r3, #24]
      break;
 8012a16:	e0a5      	b.n	8012b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	68b9      	ldr	r1, [r7, #8]
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f000 faec 	bl	8012ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	699a      	ldr	r2, [r3, #24]
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	699a      	ldr	r2, [r3, #24]
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	6999      	ldr	r1, [r3, #24]
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	691b      	ldr	r3, [r3, #16]
 8012a4e:	021a      	lsls	r2, r3, #8
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	430a      	orrs	r2, r1
 8012a56:	619a      	str	r2, [r3, #24]
      break;
 8012a58:	e084      	b.n	8012b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	68b9      	ldr	r1, [r7, #8]
 8012a60:	4618      	mov	r0, r3
 8012a62:	f000 fb55 	bl	8013110 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	69da      	ldr	r2, [r3, #28]
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	f042 0208 	orr.w	r2, r2, #8
 8012a74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	69da      	ldr	r2, [r3, #28]
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	f022 0204 	bic.w	r2, r2, #4
 8012a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	69d9      	ldr	r1, [r3, #28]
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	691a      	ldr	r2, [r3, #16]
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	430a      	orrs	r2, r1
 8012a96:	61da      	str	r2, [r3, #28]
      break;
 8012a98:	e064      	b.n	8012b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	68b9      	ldr	r1, [r7, #8]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f000 fbbd 	bl	8013220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	69da      	ldr	r2, [r3, #28]
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	69da      	ldr	r2, [r3, #28]
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	69d9      	ldr	r1, [r3, #28]
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	691b      	ldr	r3, [r3, #16]
 8012ad0:	021a      	lsls	r2, r3, #8
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	430a      	orrs	r2, r1
 8012ad8:	61da      	str	r2, [r3, #28]
      break;
 8012ada:	e043      	b.n	8012b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	68b9      	ldr	r1, [r7, #8]
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f000 fc06 	bl	80132f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	f042 0208 	orr.w	r2, r2, #8
 8012af6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	f022 0204 	bic.w	r2, r2, #4
 8012b06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	691a      	ldr	r2, [r3, #16]
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	430a      	orrs	r2, r1
 8012b18:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012b1a:	e023      	b.n	8012b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	68b9      	ldr	r1, [r7, #8]
 8012b22:	4618      	mov	r0, r3
 8012b24:	f000 fc4a 	bl	80133bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012b36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8012b46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	691b      	ldr	r3, [r3, #16]
 8012b52:	021a      	lsls	r2, r3, #8
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	430a      	orrs	r2, r1
 8012b5a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8012b5c:	e002      	b.n	8012b64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012b5e:	2301      	movs	r3, #1
 8012b60:	75fb      	strb	r3, [r7, #23]
      break;
 8012b62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	2200      	movs	r2, #0
 8012b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3718      	adds	r7, #24
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}
 8012b76:	bf00      	nop

08012b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b084      	sub	sp, #16
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
 8012b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012b82:	2300      	movs	r3, #0
 8012b84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012b8c:	2b01      	cmp	r3, #1
 8012b8e:	d101      	bne.n	8012b94 <HAL_TIM_ConfigClockSource+0x1c>
 8012b90:	2302      	movs	r3, #2
 8012b92:	e0b6      	b.n	8012d02 <HAL_TIM_ConfigClockSource+0x18a>
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2201      	movs	r2, #1
 8012b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2202      	movs	r2, #2
 8012ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	689b      	ldr	r3, [r3, #8]
 8012baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012bac:	68bb      	ldr	r3, [r7, #8]
 8012bae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012bb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8012bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012bbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	68ba      	ldr	r2, [r7, #8]
 8012bc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012bc8:	683b      	ldr	r3, [r7, #0]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012bd0:	d03e      	beq.n	8012c50 <HAL_TIM_ConfigClockSource+0xd8>
 8012bd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012bd6:	f200 8087 	bhi.w	8012ce8 <HAL_TIM_ConfigClockSource+0x170>
 8012bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012bde:	f000 8086 	beq.w	8012cee <HAL_TIM_ConfigClockSource+0x176>
 8012be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012be6:	d87f      	bhi.n	8012ce8 <HAL_TIM_ConfigClockSource+0x170>
 8012be8:	2b70      	cmp	r3, #112	@ 0x70
 8012bea:	d01a      	beq.n	8012c22 <HAL_TIM_ConfigClockSource+0xaa>
 8012bec:	2b70      	cmp	r3, #112	@ 0x70
 8012bee:	d87b      	bhi.n	8012ce8 <HAL_TIM_ConfigClockSource+0x170>
 8012bf0:	2b60      	cmp	r3, #96	@ 0x60
 8012bf2:	d050      	beq.n	8012c96 <HAL_TIM_ConfigClockSource+0x11e>
 8012bf4:	2b60      	cmp	r3, #96	@ 0x60
 8012bf6:	d877      	bhi.n	8012ce8 <HAL_TIM_ConfigClockSource+0x170>
 8012bf8:	2b50      	cmp	r3, #80	@ 0x50
 8012bfa:	d03c      	beq.n	8012c76 <HAL_TIM_ConfigClockSource+0xfe>
 8012bfc:	2b50      	cmp	r3, #80	@ 0x50
 8012bfe:	d873      	bhi.n	8012ce8 <HAL_TIM_ConfigClockSource+0x170>
 8012c00:	2b40      	cmp	r3, #64	@ 0x40
 8012c02:	d058      	beq.n	8012cb6 <HAL_TIM_ConfigClockSource+0x13e>
 8012c04:	2b40      	cmp	r3, #64	@ 0x40
 8012c06:	d86f      	bhi.n	8012ce8 <HAL_TIM_ConfigClockSource+0x170>
 8012c08:	2b30      	cmp	r3, #48	@ 0x30
 8012c0a:	d064      	beq.n	8012cd6 <HAL_TIM_ConfigClockSource+0x15e>
 8012c0c:	2b30      	cmp	r3, #48	@ 0x30
 8012c0e:	d86b      	bhi.n	8012ce8 <HAL_TIM_ConfigClockSource+0x170>
 8012c10:	2b20      	cmp	r3, #32
 8012c12:	d060      	beq.n	8012cd6 <HAL_TIM_ConfigClockSource+0x15e>
 8012c14:	2b20      	cmp	r3, #32
 8012c16:	d867      	bhi.n	8012ce8 <HAL_TIM_ConfigClockSource+0x170>
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d05c      	beq.n	8012cd6 <HAL_TIM_ConfigClockSource+0x15e>
 8012c1c:	2b10      	cmp	r3, #16
 8012c1e:	d05a      	beq.n	8012cd6 <HAL_TIM_ConfigClockSource+0x15e>
 8012c20:	e062      	b.n	8012ce8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012c32:	f000 fe5b 	bl	80138ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	689b      	ldr	r3, [r3, #8]
 8012c3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012c44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	68ba      	ldr	r2, [r7, #8]
 8012c4c:	609a      	str	r2, [r3, #8]
      break;
 8012c4e:	e04f      	b.n	8012cf0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012c60:	f000 fe44 	bl	80138ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	689a      	ldr	r2, [r3, #8]
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012c72:	609a      	str	r2, [r3, #8]
      break;
 8012c74:	e03c      	b.n	8012cf0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012c82:	461a      	mov	r2, r3
 8012c84:	f000 fd02 	bl	801368c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	2150      	movs	r1, #80	@ 0x50
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f000 fe11 	bl	80138b6 <TIM_ITRx_SetConfig>
      break;
 8012c94:	e02c      	b.n	8012cf0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	f000 fd5e 	bl	8013764 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	2160      	movs	r1, #96	@ 0x60
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f000 fe01 	bl	80138b6 <TIM_ITRx_SetConfig>
      break;
 8012cb4:	e01c      	b.n	8012cf0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012cba:	683b      	ldr	r3, [r7, #0]
 8012cbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	f000 fce2 	bl	801368c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	2140      	movs	r1, #64	@ 0x40
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f000 fdf1 	bl	80138b6 <TIM_ITRx_SetConfig>
      break;
 8012cd4:	e00c      	b.n	8012cf0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681a      	ldr	r2, [r3, #0]
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	4619      	mov	r1, r3
 8012ce0:	4610      	mov	r0, r2
 8012ce2:	f000 fde8 	bl	80138b6 <TIM_ITRx_SetConfig>
      break;
 8012ce6:	e003      	b.n	8012cf0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8012ce8:	2301      	movs	r3, #1
 8012cea:	73fb      	strb	r3, [r7, #15]
      break;
 8012cec:	e000      	b.n	8012cf0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8012cee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	3710      	adds	r7, #16
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}

08012d0a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8012d0a:	b580      	push	{r7, lr}
 8012d0c:	b082      	sub	sp, #8
 8012d0e:	af00      	add	r7, sp, #0
 8012d10:	6078      	str	r0, [r7, #4]
 8012d12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012d1a:	2b01      	cmp	r3, #1
 8012d1c:	d101      	bne.n	8012d22 <HAL_TIM_SlaveConfigSynchro+0x18>
 8012d1e:	2302      	movs	r3, #2
 8012d20:	e031      	b.n	8012d86 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2201      	movs	r2, #1
 8012d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2202      	movs	r2, #2
 8012d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8012d32:	6839      	ldr	r1, [r7, #0]
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f000 fba7 	bl	8013488 <TIM_SlaveTimer_SetConfig>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d009      	beq.n	8012d54 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2201      	movs	r2, #1
 8012d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8012d50:	2301      	movs	r3, #1
 8012d52:	e018      	b.n	8012d86 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	68da      	ldr	r2, [r3, #12]
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012d62:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	68da      	ldr	r2, [r3, #12]
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8012d72:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2201      	movs	r2, #1
 8012d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8012d84:	2300      	movs	r3, #0
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	3708      	adds	r7, #8
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}
	...

08012d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012d90:	b480      	push	{r7}
 8012d92:	b085      	sub	sp, #20
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
 8012d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	4a46      	ldr	r2, [pc, #280]	@ (8012ebc <TIM_Base_SetConfig+0x12c>)
 8012da4:	4293      	cmp	r3, r2
 8012da6:	d013      	beq.n	8012dd0 <TIM_Base_SetConfig+0x40>
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012dae:	d00f      	beq.n	8012dd0 <TIM_Base_SetConfig+0x40>
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	4a43      	ldr	r2, [pc, #268]	@ (8012ec0 <TIM_Base_SetConfig+0x130>)
 8012db4:	4293      	cmp	r3, r2
 8012db6:	d00b      	beq.n	8012dd0 <TIM_Base_SetConfig+0x40>
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	4a42      	ldr	r2, [pc, #264]	@ (8012ec4 <TIM_Base_SetConfig+0x134>)
 8012dbc:	4293      	cmp	r3, r2
 8012dbe:	d007      	beq.n	8012dd0 <TIM_Base_SetConfig+0x40>
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	4a41      	ldr	r2, [pc, #260]	@ (8012ec8 <TIM_Base_SetConfig+0x138>)
 8012dc4:	4293      	cmp	r3, r2
 8012dc6:	d003      	beq.n	8012dd0 <TIM_Base_SetConfig+0x40>
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	4a40      	ldr	r2, [pc, #256]	@ (8012ecc <TIM_Base_SetConfig+0x13c>)
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	d108      	bne.n	8012de2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	68fa      	ldr	r2, [r7, #12]
 8012dde:	4313      	orrs	r3, r2
 8012de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	4a35      	ldr	r2, [pc, #212]	@ (8012ebc <TIM_Base_SetConfig+0x12c>)
 8012de6:	4293      	cmp	r3, r2
 8012de8:	d01f      	beq.n	8012e2a <TIM_Base_SetConfig+0x9a>
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012df0:	d01b      	beq.n	8012e2a <TIM_Base_SetConfig+0x9a>
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	4a32      	ldr	r2, [pc, #200]	@ (8012ec0 <TIM_Base_SetConfig+0x130>)
 8012df6:	4293      	cmp	r3, r2
 8012df8:	d017      	beq.n	8012e2a <TIM_Base_SetConfig+0x9a>
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	4a31      	ldr	r2, [pc, #196]	@ (8012ec4 <TIM_Base_SetConfig+0x134>)
 8012dfe:	4293      	cmp	r3, r2
 8012e00:	d013      	beq.n	8012e2a <TIM_Base_SetConfig+0x9a>
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	4a30      	ldr	r2, [pc, #192]	@ (8012ec8 <TIM_Base_SetConfig+0x138>)
 8012e06:	4293      	cmp	r3, r2
 8012e08:	d00f      	beq.n	8012e2a <TIM_Base_SetConfig+0x9a>
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8012ecc <TIM_Base_SetConfig+0x13c>)
 8012e0e:	4293      	cmp	r3, r2
 8012e10:	d00b      	beq.n	8012e2a <TIM_Base_SetConfig+0x9a>
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	4a2e      	ldr	r2, [pc, #184]	@ (8012ed0 <TIM_Base_SetConfig+0x140>)
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d007      	beq.n	8012e2a <TIM_Base_SetConfig+0x9a>
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	4a2d      	ldr	r2, [pc, #180]	@ (8012ed4 <TIM_Base_SetConfig+0x144>)
 8012e1e:	4293      	cmp	r3, r2
 8012e20:	d003      	beq.n	8012e2a <TIM_Base_SetConfig+0x9a>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	4a2c      	ldr	r2, [pc, #176]	@ (8012ed8 <TIM_Base_SetConfig+0x148>)
 8012e26:	4293      	cmp	r3, r2
 8012e28:	d108      	bne.n	8012e3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	68db      	ldr	r3, [r3, #12]
 8012e36:	68fa      	ldr	r2, [r7, #12]
 8012e38:	4313      	orrs	r3, r2
 8012e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	695b      	ldr	r3, [r3, #20]
 8012e46:	4313      	orrs	r3, r2
 8012e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	68fa      	ldr	r2, [r7, #12]
 8012e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	689a      	ldr	r2, [r3, #8]
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	681a      	ldr	r2, [r3, #0]
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	4a16      	ldr	r2, [pc, #88]	@ (8012ebc <TIM_Base_SetConfig+0x12c>)
 8012e64:	4293      	cmp	r3, r2
 8012e66:	d00f      	beq.n	8012e88 <TIM_Base_SetConfig+0xf8>
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	4a18      	ldr	r2, [pc, #96]	@ (8012ecc <TIM_Base_SetConfig+0x13c>)
 8012e6c:	4293      	cmp	r3, r2
 8012e6e:	d00b      	beq.n	8012e88 <TIM_Base_SetConfig+0xf8>
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	4a17      	ldr	r2, [pc, #92]	@ (8012ed0 <TIM_Base_SetConfig+0x140>)
 8012e74:	4293      	cmp	r3, r2
 8012e76:	d007      	beq.n	8012e88 <TIM_Base_SetConfig+0xf8>
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	4a16      	ldr	r2, [pc, #88]	@ (8012ed4 <TIM_Base_SetConfig+0x144>)
 8012e7c:	4293      	cmp	r3, r2
 8012e7e:	d003      	beq.n	8012e88 <TIM_Base_SetConfig+0xf8>
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	4a15      	ldr	r2, [pc, #84]	@ (8012ed8 <TIM_Base_SetConfig+0x148>)
 8012e84:	4293      	cmp	r3, r2
 8012e86:	d103      	bne.n	8012e90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	691a      	ldr	r2, [r3, #16]
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2201      	movs	r2, #1
 8012e94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	691b      	ldr	r3, [r3, #16]
 8012e9a:	f003 0301 	and.w	r3, r3, #1
 8012e9e:	2b01      	cmp	r3, #1
 8012ea0:	d105      	bne.n	8012eae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	691b      	ldr	r3, [r3, #16]
 8012ea6:	f023 0201 	bic.w	r2, r3, #1
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	611a      	str	r2, [r3, #16]
  }
}
 8012eae:	bf00      	nop
 8012eb0:	3714      	adds	r7, #20
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb8:	4770      	bx	lr
 8012eba:	bf00      	nop
 8012ebc:	40012c00 	.word	0x40012c00
 8012ec0:	40000400 	.word	0x40000400
 8012ec4:	40000800 	.word	0x40000800
 8012ec8:	40000c00 	.word	0x40000c00
 8012ecc:	40013400 	.word	0x40013400
 8012ed0:	40014000 	.word	0x40014000
 8012ed4:	40014400 	.word	0x40014400
 8012ed8:	40014800 	.word	0x40014800

08012edc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012edc:	b480      	push	{r7}
 8012ede:	b087      	sub	sp, #28
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	6a1b      	ldr	r3, [r3, #32]
 8012eea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	6a1b      	ldr	r3, [r3, #32]
 8012ef0:	f023 0201 	bic.w	r2, r3, #1
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	699b      	ldr	r3, [r3, #24]
 8012f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	f023 0303 	bic.w	r3, r3, #3
 8012f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	68fa      	ldr	r2, [r7, #12]
 8012f1e:	4313      	orrs	r3, r2
 8012f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012f22:	697b      	ldr	r3, [r7, #20]
 8012f24:	f023 0302 	bic.w	r3, r3, #2
 8012f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	689b      	ldr	r3, [r3, #8]
 8012f2e:	697a      	ldr	r2, [r7, #20]
 8012f30:	4313      	orrs	r3, r2
 8012f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	4a2c      	ldr	r2, [pc, #176]	@ (8012fe8 <TIM_OC1_SetConfig+0x10c>)
 8012f38:	4293      	cmp	r3, r2
 8012f3a:	d00f      	beq.n	8012f5c <TIM_OC1_SetConfig+0x80>
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8012fec <TIM_OC1_SetConfig+0x110>)
 8012f40:	4293      	cmp	r3, r2
 8012f42:	d00b      	beq.n	8012f5c <TIM_OC1_SetConfig+0x80>
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	4a2a      	ldr	r2, [pc, #168]	@ (8012ff0 <TIM_OC1_SetConfig+0x114>)
 8012f48:	4293      	cmp	r3, r2
 8012f4a:	d007      	beq.n	8012f5c <TIM_OC1_SetConfig+0x80>
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	4a29      	ldr	r2, [pc, #164]	@ (8012ff4 <TIM_OC1_SetConfig+0x118>)
 8012f50:	4293      	cmp	r3, r2
 8012f52:	d003      	beq.n	8012f5c <TIM_OC1_SetConfig+0x80>
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	4a28      	ldr	r2, [pc, #160]	@ (8012ff8 <TIM_OC1_SetConfig+0x11c>)
 8012f58:	4293      	cmp	r3, r2
 8012f5a:	d10c      	bne.n	8012f76 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	f023 0308 	bic.w	r3, r3, #8
 8012f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012f64:	683b      	ldr	r3, [r7, #0]
 8012f66:	68db      	ldr	r3, [r3, #12]
 8012f68:	697a      	ldr	r2, [r7, #20]
 8012f6a:	4313      	orrs	r3, r2
 8012f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012f6e:	697b      	ldr	r3, [r7, #20]
 8012f70:	f023 0304 	bic.w	r3, r3, #4
 8012f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	4a1b      	ldr	r2, [pc, #108]	@ (8012fe8 <TIM_OC1_SetConfig+0x10c>)
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	d00f      	beq.n	8012f9e <TIM_OC1_SetConfig+0xc2>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	4a1a      	ldr	r2, [pc, #104]	@ (8012fec <TIM_OC1_SetConfig+0x110>)
 8012f82:	4293      	cmp	r3, r2
 8012f84:	d00b      	beq.n	8012f9e <TIM_OC1_SetConfig+0xc2>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	4a19      	ldr	r2, [pc, #100]	@ (8012ff0 <TIM_OC1_SetConfig+0x114>)
 8012f8a:	4293      	cmp	r3, r2
 8012f8c:	d007      	beq.n	8012f9e <TIM_OC1_SetConfig+0xc2>
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	4a18      	ldr	r2, [pc, #96]	@ (8012ff4 <TIM_OC1_SetConfig+0x118>)
 8012f92:	4293      	cmp	r3, r2
 8012f94:	d003      	beq.n	8012f9e <TIM_OC1_SetConfig+0xc2>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	4a17      	ldr	r2, [pc, #92]	@ (8012ff8 <TIM_OC1_SetConfig+0x11c>)
 8012f9a:	4293      	cmp	r3, r2
 8012f9c:	d111      	bne.n	8012fc2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8012fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	695b      	ldr	r3, [r3, #20]
 8012fb2:	693a      	ldr	r2, [r7, #16]
 8012fb4:	4313      	orrs	r3, r2
 8012fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	699b      	ldr	r3, [r3, #24]
 8012fbc:	693a      	ldr	r2, [r7, #16]
 8012fbe:	4313      	orrs	r3, r2
 8012fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	693a      	ldr	r2, [r7, #16]
 8012fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	68fa      	ldr	r2, [r7, #12]
 8012fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	685a      	ldr	r2, [r3, #4]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	697a      	ldr	r2, [r7, #20]
 8012fda:	621a      	str	r2, [r3, #32]
}
 8012fdc:	bf00      	nop
 8012fde:	371c      	adds	r7, #28
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe6:	4770      	bx	lr
 8012fe8:	40012c00 	.word	0x40012c00
 8012fec:	40013400 	.word	0x40013400
 8012ff0:	40014000 	.word	0x40014000
 8012ff4:	40014400 	.word	0x40014400
 8012ff8:	40014800 	.word	0x40014800

08012ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012ffc:	b480      	push	{r7}
 8012ffe:	b087      	sub	sp, #28
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6a1b      	ldr	r3, [r3, #32]
 801300a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	6a1b      	ldr	r3, [r3, #32]
 8013010:	f023 0210 	bic.w	r2, r3, #16
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	685b      	ldr	r3, [r3, #4]
 801301c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	699b      	ldr	r3, [r3, #24]
 8013022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801302a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801302e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	021b      	lsls	r3, r3, #8
 801303e:	68fa      	ldr	r2, [r7, #12]
 8013040:	4313      	orrs	r3, r2
 8013042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013044:	697b      	ldr	r3, [r7, #20]
 8013046:	f023 0320 	bic.w	r3, r3, #32
 801304a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	689b      	ldr	r3, [r3, #8]
 8013050:	011b      	lsls	r3, r3, #4
 8013052:	697a      	ldr	r2, [r7, #20]
 8013054:	4313      	orrs	r3, r2
 8013056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	4a28      	ldr	r2, [pc, #160]	@ (80130fc <TIM_OC2_SetConfig+0x100>)
 801305c:	4293      	cmp	r3, r2
 801305e:	d003      	beq.n	8013068 <TIM_OC2_SetConfig+0x6c>
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	4a27      	ldr	r2, [pc, #156]	@ (8013100 <TIM_OC2_SetConfig+0x104>)
 8013064:	4293      	cmp	r3, r2
 8013066:	d10d      	bne.n	8013084 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801306e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	68db      	ldr	r3, [r3, #12]
 8013074:	011b      	lsls	r3, r3, #4
 8013076:	697a      	ldr	r2, [r7, #20]
 8013078:	4313      	orrs	r3, r2
 801307a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013082:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	4a1d      	ldr	r2, [pc, #116]	@ (80130fc <TIM_OC2_SetConfig+0x100>)
 8013088:	4293      	cmp	r3, r2
 801308a:	d00f      	beq.n	80130ac <TIM_OC2_SetConfig+0xb0>
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	4a1c      	ldr	r2, [pc, #112]	@ (8013100 <TIM_OC2_SetConfig+0x104>)
 8013090:	4293      	cmp	r3, r2
 8013092:	d00b      	beq.n	80130ac <TIM_OC2_SetConfig+0xb0>
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	4a1b      	ldr	r2, [pc, #108]	@ (8013104 <TIM_OC2_SetConfig+0x108>)
 8013098:	4293      	cmp	r3, r2
 801309a:	d007      	beq.n	80130ac <TIM_OC2_SetConfig+0xb0>
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	4a1a      	ldr	r2, [pc, #104]	@ (8013108 <TIM_OC2_SetConfig+0x10c>)
 80130a0:	4293      	cmp	r3, r2
 80130a2:	d003      	beq.n	80130ac <TIM_OC2_SetConfig+0xb0>
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	4a19      	ldr	r2, [pc, #100]	@ (801310c <TIM_OC2_SetConfig+0x110>)
 80130a8:	4293      	cmp	r3, r2
 80130aa:	d113      	bne.n	80130d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80130b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80130ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80130bc:	683b      	ldr	r3, [r7, #0]
 80130be:	695b      	ldr	r3, [r3, #20]
 80130c0:	009b      	lsls	r3, r3, #2
 80130c2:	693a      	ldr	r2, [r7, #16]
 80130c4:	4313      	orrs	r3, r2
 80130c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	699b      	ldr	r3, [r3, #24]
 80130cc:	009b      	lsls	r3, r3, #2
 80130ce:	693a      	ldr	r2, [r7, #16]
 80130d0:	4313      	orrs	r3, r2
 80130d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	693a      	ldr	r2, [r7, #16]
 80130d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	68fa      	ldr	r2, [r7, #12]
 80130de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80130e0:	683b      	ldr	r3, [r7, #0]
 80130e2:	685a      	ldr	r2, [r3, #4]
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	697a      	ldr	r2, [r7, #20]
 80130ec:	621a      	str	r2, [r3, #32]
}
 80130ee:	bf00      	nop
 80130f0:	371c      	adds	r7, #28
 80130f2:	46bd      	mov	sp, r7
 80130f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop
 80130fc:	40012c00 	.word	0x40012c00
 8013100:	40013400 	.word	0x40013400
 8013104:	40014000 	.word	0x40014000
 8013108:	40014400 	.word	0x40014400
 801310c:	40014800 	.word	0x40014800

08013110 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013110:	b480      	push	{r7}
 8013112:	b087      	sub	sp, #28
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	6a1b      	ldr	r3, [r3, #32]
 801311e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	6a1b      	ldr	r3, [r3, #32]
 8013124:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	685b      	ldr	r3, [r3, #4]
 8013130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	69db      	ldr	r3, [r3, #28]
 8013136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801313e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	f023 0303 	bic.w	r3, r3, #3
 801314a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	68fa      	ldr	r2, [r7, #12]
 8013152:	4313      	orrs	r3, r2
 8013154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801315c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	689b      	ldr	r3, [r3, #8]
 8013162:	021b      	lsls	r3, r3, #8
 8013164:	697a      	ldr	r2, [r7, #20]
 8013166:	4313      	orrs	r3, r2
 8013168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	4a27      	ldr	r2, [pc, #156]	@ (801320c <TIM_OC3_SetConfig+0xfc>)
 801316e:	4293      	cmp	r3, r2
 8013170:	d003      	beq.n	801317a <TIM_OC3_SetConfig+0x6a>
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	4a26      	ldr	r2, [pc, #152]	@ (8013210 <TIM_OC3_SetConfig+0x100>)
 8013176:	4293      	cmp	r3, r2
 8013178:	d10d      	bne.n	8013196 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801317a:	697b      	ldr	r3, [r7, #20]
 801317c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	68db      	ldr	r3, [r3, #12]
 8013186:	021b      	lsls	r3, r3, #8
 8013188:	697a      	ldr	r2, [r7, #20]
 801318a:	4313      	orrs	r3, r2
 801318c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	4a1c      	ldr	r2, [pc, #112]	@ (801320c <TIM_OC3_SetConfig+0xfc>)
 801319a:	4293      	cmp	r3, r2
 801319c:	d00f      	beq.n	80131be <TIM_OC3_SetConfig+0xae>
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	4a1b      	ldr	r2, [pc, #108]	@ (8013210 <TIM_OC3_SetConfig+0x100>)
 80131a2:	4293      	cmp	r3, r2
 80131a4:	d00b      	beq.n	80131be <TIM_OC3_SetConfig+0xae>
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	4a1a      	ldr	r2, [pc, #104]	@ (8013214 <TIM_OC3_SetConfig+0x104>)
 80131aa:	4293      	cmp	r3, r2
 80131ac:	d007      	beq.n	80131be <TIM_OC3_SetConfig+0xae>
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	4a19      	ldr	r2, [pc, #100]	@ (8013218 <TIM_OC3_SetConfig+0x108>)
 80131b2:	4293      	cmp	r3, r2
 80131b4:	d003      	beq.n	80131be <TIM_OC3_SetConfig+0xae>
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	4a18      	ldr	r2, [pc, #96]	@ (801321c <TIM_OC3_SetConfig+0x10c>)
 80131ba:	4293      	cmp	r3, r2
 80131bc:	d113      	bne.n	80131e6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80131be:	693b      	ldr	r3, [r7, #16]
 80131c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80131c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80131c6:	693b      	ldr	r3, [r7, #16]
 80131c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80131cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	695b      	ldr	r3, [r3, #20]
 80131d2:	011b      	lsls	r3, r3, #4
 80131d4:	693a      	ldr	r2, [r7, #16]
 80131d6:	4313      	orrs	r3, r2
 80131d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80131da:	683b      	ldr	r3, [r7, #0]
 80131dc:	699b      	ldr	r3, [r3, #24]
 80131de:	011b      	lsls	r3, r3, #4
 80131e0:	693a      	ldr	r2, [r7, #16]
 80131e2:	4313      	orrs	r3, r2
 80131e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	693a      	ldr	r2, [r7, #16]
 80131ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	68fa      	ldr	r2, [r7, #12]
 80131f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80131f2:	683b      	ldr	r3, [r7, #0]
 80131f4:	685a      	ldr	r2, [r3, #4]
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	697a      	ldr	r2, [r7, #20]
 80131fe:	621a      	str	r2, [r3, #32]
}
 8013200:	bf00      	nop
 8013202:	371c      	adds	r7, #28
 8013204:	46bd      	mov	sp, r7
 8013206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320a:	4770      	bx	lr
 801320c:	40012c00 	.word	0x40012c00
 8013210:	40013400 	.word	0x40013400
 8013214:	40014000 	.word	0x40014000
 8013218:	40014400 	.word	0x40014400
 801321c:	40014800 	.word	0x40014800

08013220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013220:	b480      	push	{r7}
 8013222:	b087      	sub	sp, #28
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
 8013228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	6a1b      	ldr	r3, [r3, #32]
 801322e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	6a1b      	ldr	r3, [r3, #32]
 8013234:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	685b      	ldr	r3, [r3, #4]
 8013240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	69db      	ldr	r3, [r3, #28]
 8013246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801324e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801325a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	021b      	lsls	r3, r3, #8
 8013262:	68fa      	ldr	r2, [r7, #12]
 8013264:	4313      	orrs	r3, r2
 8013266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013268:	693b      	ldr	r3, [r7, #16]
 801326a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801326e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	689b      	ldr	r3, [r3, #8]
 8013274:	031b      	lsls	r3, r3, #12
 8013276:	693a      	ldr	r2, [r7, #16]
 8013278:	4313      	orrs	r3, r2
 801327a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	4a18      	ldr	r2, [pc, #96]	@ (80132e0 <TIM_OC4_SetConfig+0xc0>)
 8013280:	4293      	cmp	r3, r2
 8013282:	d00f      	beq.n	80132a4 <TIM_OC4_SetConfig+0x84>
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	4a17      	ldr	r2, [pc, #92]	@ (80132e4 <TIM_OC4_SetConfig+0xc4>)
 8013288:	4293      	cmp	r3, r2
 801328a:	d00b      	beq.n	80132a4 <TIM_OC4_SetConfig+0x84>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	4a16      	ldr	r2, [pc, #88]	@ (80132e8 <TIM_OC4_SetConfig+0xc8>)
 8013290:	4293      	cmp	r3, r2
 8013292:	d007      	beq.n	80132a4 <TIM_OC4_SetConfig+0x84>
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	4a15      	ldr	r2, [pc, #84]	@ (80132ec <TIM_OC4_SetConfig+0xcc>)
 8013298:	4293      	cmp	r3, r2
 801329a:	d003      	beq.n	80132a4 <TIM_OC4_SetConfig+0x84>
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	4a14      	ldr	r2, [pc, #80]	@ (80132f0 <TIM_OC4_SetConfig+0xd0>)
 80132a0:	4293      	cmp	r3, r2
 80132a2:	d109      	bne.n	80132b8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80132aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	695b      	ldr	r3, [r3, #20]
 80132b0:	019b      	lsls	r3, r3, #6
 80132b2:	697a      	ldr	r2, [r7, #20]
 80132b4:	4313      	orrs	r3, r2
 80132b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	697a      	ldr	r2, [r7, #20]
 80132bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	68fa      	ldr	r2, [r7, #12]
 80132c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	685a      	ldr	r2, [r3, #4]
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	693a      	ldr	r2, [r7, #16]
 80132d0:	621a      	str	r2, [r3, #32]
}
 80132d2:	bf00      	nop
 80132d4:	371c      	adds	r7, #28
 80132d6:	46bd      	mov	sp, r7
 80132d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132dc:	4770      	bx	lr
 80132de:	bf00      	nop
 80132e0:	40012c00 	.word	0x40012c00
 80132e4:	40013400 	.word	0x40013400
 80132e8:	40014000 	.word	0x40014000
 80132ec:	40014400 	.word	0x40014400
 80132f0:	40014800 	.word	0x40014800

080132f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80132f4:	b480      	push	{r7}
 80132f6:	b087      	sub	sp, #28
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
 80132fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6a1b      	ldr	r3, [r3, #32]
 8013302:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	6a1b      	ldr	r3, [r3, #32]
 8013308:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	685b      	ldr	r3, [r3, #4]
 8013314:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801331a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	68fa      	ldr	r2, [r7, #12]
 801332e:	4313      	orrs	r3, r2
 8013330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013332:	693b      	ldr	r3, [r7, #16]
 8013334:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8013338:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	689b      	ldr	r3, [r3, #8]
 801333e:	041b      	lsls	r3, r3, #16
 8013340:	693a      	ldr	r2, [r7, #16]
 8013342:	4313      	orrs	r3, r2
 8013344:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	4a17      	ldr	r2, [pc, #92]	@ (80133a8 <TIM_OC5_SetConfig+0xb4>)
 801334a:	4293      	cmp	r3, r2
 801334c:	d00f      	beq.n	801336e <TIM_OC5_SetConfig+0x7a>
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	4a16      	ldr	r2, [pc, #88]	@ (80133ac <TIM_OC5_SetConfig+0xb8>)
 8013352:	4293      	cmp	r3, r2
 8013354:	d00b      	beq.n	801336e <TIM_OC5_SetConfig+0x7a>
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	4a15      	ldr	r2, [pc, #84]	@ (80133b0 <TIM_OC5_SetConfig+0xbc>)
 801335a:	4293      	cmp	r3, r2
 801335c:	d007      	beq.n	801336e <TIM_OC5_SetConfig+0x7a>
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	4a14      	ldr	r2, [pc, #80]	@ (80133b4 <TIM_OC5_SetConfig+0xc0>)
 8013362:	4293      	cmp	r3, r2
 8013364:	d003      	beq.n	801336e <TIM_OC5_SetConfig+0x7a>
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	4a13      	ldr	r2, [pc, #76]	@ (80133b8 <TIM_OC5_SetConfig+0xc4>)
 801336a:	4293      	cmp	r3, r2
 801336c:	d109      	bne.n	8013382 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013374:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	695b      	ldr	r3, [r3, #20]
 801337a:	021b      	lsls	r3, r3, #8
 801337c:	697a      	ldr	r2, [r7, #20]
 801337e:	4313      	orrs	r3, r2
 8013380:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	697a      	ldr	r2, [r7, #20]
 8013386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	68fa      	ldr	r2, [r7, #12]
 801338c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801338e:	683b      	ldr	r3, [r7, #0]
 8013390:	685a      	ldr	r2, [r3, #4]
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	693a      	ldr	r2, [r7, #16]
 801339a:	621a      	str	r2, [r3, #32]
}
 801339c:	bf00      	nop
 801339e:	371c      	adds	r7, #28
 80133a0:	46bd      	mov	sp, r7
 80133a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a6:	4770      	bx	lr
 80133a8:	40012c00 	.word	0x40012c00
 80133ac:	40013400 	.word	0x40013400
 80133b0:	40014000 	.word	0x40014000
 80133b4:	40014400 	.word	0x40014400
 80133b8:	40014800 	.word	0x40014800

080133bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80133bc:	b480      	push	{r7}
 80133be:	b087      	sub	sp, #28
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
 80133c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	6a1b      	ldr	r3, [r3, #32]
 80133ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6a1b      	ldr	r3, [r3, #32]
 80133d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	685b      	ldr	r3, [r3, #4]
 80133dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80133e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80133ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80133ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	021b      	lsls	r3, r3, #8
 80133f6:	68fa      	ldr	r2, [r7, #12]
 80133f8:	4313      	orrs	r3, r2
 80133fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	689b      	ldr	r3, [r3, #8]
 8013408:	051b      	lsls	r3, r3, #20
 801340a:	693a      	ldr	r2, [r7, #16]
 801340c:	4313      	orrs	r3, r2
 801340e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	4a18      	ldr	r2, [pc, #96]	@ (8013474 <TIM_OC6_SetConfig+0xb8>)
 8013414:	4293      	cmp	r3, r2
 8013416:	d00f      	beq.n	8013438 <TIM_OC6_SetConfig+0x7c>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	4a17      	ldr	r2, [pc, #92]	@ (8013478 <TIM_OC6_SetConfig+0xbc>)
 801341c:	4293      	cmp	r3, r2
 801341e:	d00b      	beq.n	8013438 <TIM_OC6_SetConfig+0x7c>
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	4a16      	ldr	r2, [pc, #88]	@ (801347c <TIM_OC6_SetConfig+0xc0>)
 8013424:	4293      	cmp	r3, r2
 8013426:	d007      	beq.n	8013438 <TIM_OC6_SetConfig+0x7c>
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	4a15      	ldr	r2, [pc, #84]	@ (8013480 <TIM_OC6_SetConfig+0xc4>)
 801342c:	4293      	cmp	r3, r2
 801342e:	d003      	beq.n	8013438 <TIM_OC6_SetConfig+0x7c>
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	4a14      	ldr	r2, [pc, #80]	@ (8013484 <TIM_OC6_SetConfig+0xc8>)
 8013434:	4293      	cmp	r3, r2
 8013436:	d109      	bne.n	801344c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013438:	697b      	ldr	r3, [r7, #20]
 801343a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801343e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	695b      	ldr	r3, [r3, #20]
 8013444:	029b      	lsls	r3, r3, #10
 8013446:	697a      	ldr	r2, [r7, #20]
 8013448:	4313      	orrs	r3, r2
 801344a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	697a      	ldr	r2, [r7, #20]
 8013450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	68fa      	ldr	r2, [r7, #12]
 8013456:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	685a      	ldr	r2, [r3, #4]
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	693a      	ldr	r2, [r7, #16]
 8013464:	621a      	str	r2, [r3, #32]
}
 8013466:	bf00      	nop
 8013468:	371c      	adds	r7, #28
 801346a:	46bd      	mov	sp, r7
 801346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013470:	4770      	bx	lr
 8013472:	bf00      	nop
 8013474:	40012c00 	.word	0x40012c00
 8013478:	40013400 	.word	0x40013400
 801347c:	40014000 	.word	0x40014000
 8013480:	40014400 	.word	0x40014400
 8013484:	40014800 	.word	0x40014800

08013488 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b086      	sub	sp, #24
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
 8013490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013492:	2300      	movs	r3, #0
 8013494:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	689b      	ldr	r3, [r3, #8]
 801349c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80134a4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	685b      	ldr	r3, [r3, #4]
 80134aa:	693a      	ldr	r2, [r7, #16]
 80134ac:	4313      	orrs	r3, r2
 80134ae:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80134b6:	f023 0307 	bic.w	r3, r3, #7
 80134ba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	693a      	ldr	r2, [r7, #16]
 80134c2:	4313      	orrs	r3, r2
 80134c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	693a      	ldr	r2, [r7, #16]
 80134cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	685b      	ldr	r3, [r3, #4]
 80134d2:	2b70      	cmp	r3, #112	@ 0x70
 80134d4:	d01a      	beq.n	801350c <TIM_SlaveTimer_SetConfig+0x84>
 80134d6:	2b70      	cmp	r3, #112	@ 0x70
 80134d8:	d860      	bhi.n	801359c <TIM_SlaveTimer_SetConfig+0x114>
 80134da:	2b60      	cmp	r3, #96	@ 0x60
 80134dc:	d054      	beq.n	8013588 <TIM_SlaveTimer_SetConfig+0x100>
 80134de:	2b60      	cmp	r3, #96	@ 0x60
 80134e0:	d85c      	bhi.n	801359c <TIM_SlaveTimer_SetConfig+0x114>
 80134e2:	2b50      	cmp	r3, #80	@ 0x50
 80134e4:	d046      	beq.n	8013574 <TIM_SlaveTimer_SetConfig+0xec>
 80134e6:	2b50      	cmp	r3, #80	@ 0x50
 80134e8:	d858      	bhi.n	801359c <TIM_SlaveTimer_SetConfig+0x114>
 80134ea:	2b40      	cmp	r3, #64	@ 0x40
 80134ec:	d019      	beq.n	8013522 <TIM_SlaveTimer_SetConfig+0x9a>
 80134ee:	2b40      	cmp	r3, #64	@ 0x40
 80134f0:	d854      	bhi.n	801359c <TIM_SlaveTimer_SetConfig+0x114>
 80134f2:	2b30      	cmp	r3, #48	@ 0x30
 80134f4:	d055      	beq.n	80135a2 <TIM_SlaveTimer_SetConfig+0x11a>
 80134f6:	2b30      	cmp	r3, #48	@ 0x30
 80134f8:	d850      	bhi.n	801359c <TIM_SlaveTimer_SetConfig+0x114>
 80134fa:	2b20      	cmp	r3, #32
 80134fc:	d051      	beq.n	80135a2 <TIM_SlaveTimer_SetConfig+0x11a>
 80134fe:	2b20      	cmp	r3, #32
 8013500:	d84c      	bhi.n	801359c <TIM_SlaveTimer_SetConfig+0x114>
 8013502:	2b00      	cmp	r3, #0
 8013504:	d04d      	beq.n	80135a2 <TIM_SlaveTimer_SetConfig+0x11a>
 8013506:	2b10      	cmp	r3, #16
 8013508:	d04b      	beq.n	80135a2 <TIM_SlaveTimer_SetConfig+0x11a>
 801350a:	e047      	b.n	801359c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 801351c:	f000 f9e6 	bl	80138ec <TIM_ETR_SetConfig>
      break;
 8013520:	e040      	b.n	80135a4 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	2b05      	cmp	r3, #5
 8013528:	d101      	bne.n	801352e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 801352a:	2301      	movs	r3, #1
 801352c:	e03b      	b.n	80135a6 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	6a1b      	ldr	r3, [r3, #32]
 8013534:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	6a1a      	ldr	r2, [r3, #32]
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	f022 0201 	bic.w	r2, r2, #1
 8013544:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	699b      	ldr	r3, [r3, #24]
 801354c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013554:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	691b      	ldr	r3, [r3, #16]
 801355a:	011b      	lsls	r3, r3, #4
 801355c:	68ba      	ldr	r2, [r7, #8]
 801355e:	4313      	orrs	r3, r2
 8013560:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	68ba      	ldr	r2, [r7, #8]
 8013568:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	68fa      	ldr	r2, [r7, #12]
 8013570:	621a      	str	r2, [r3, #32]
      break;
 8013572:	e017      	b.n	80135a4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013580:	461a      	mov	r2, r3
 8013582:	f000 f883 	bl	801368c <TIM_TI1_ConfigInputStage>
      break;
 8013586:	e00d      	b.n	80135a4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013594:	461a      	mov	r2, r3
 8013596:	f000 f8e5 	bl	8013764 <TIM_TI2_ConfigInputStage>
      break;
 801359a:	e003      	b.n	80135a4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 801359c:	2301      	movs	r3, #1
 801359e:	75fb      	strb	r3, [r7, #23]
      break;
 80135a0:	e000      	b.n	80135a4 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80135a2:	bf00      	nop
  }

  return status;
 80135a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80135a6:	4618      	mov	r0, r3
 80135a8:	3718      	adds	r7, #24
 80135aa:	46bd      	mov	sp, r7
 80135ac:	bd80      	pop	{r7, pc}
	...

080135b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80135b0:	b480      	push	{r7}
 80135b2:	b087      	sub	sp, #28
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	60f8      	str	r0, [r7, #12]
 80135b8:	60b9      	str	r1, [r7, #8]
 80135ba:	607a      	str	r2, [r7, #4]
 80135bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	6a1b      	ldr	r3, [r3, #32]
 80135c2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	6a1b      	ldr	r3, [r3, #32]
 80135c8:	f023 0201 	bic.w	r2, r3, #1
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	699b      	ldr	r3, [r3, #24]
 80135d4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	4a26      	ldr	r2, [pc, #152]	@ (8013674 <TIM_TI1_SetConfig+0xc4>)
 80135da:	4293      	cmp	r3, r2
 80135dc:	d017      	beq.n	801360e <TIM_TI1_SetConfig+0x5e>
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80135e4:	d013      	beq.n	801360e <TIM_TI1_SetConfig+0x5e>
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	4a23      	ldr	r2, [pc, #140]	@ (8013678 <TIM_TI1_SetConfig+0xc8>)
 80135ea:	4293      	cmp	r3, r2
 80135ec:	d00f      	beq.n	801360e <TIM_TI1_SetConfig+0x5e>
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	4a22      	ldr	r2, [pc, #136]	@ (801367c <TIM_TI1_SetConfig+0xcc>)
 80135f2:	4293      	cmp	r3, r2
 80135f4:	d00b      	beq.n	801360e <TIM_TI1_SetConfig+0x5e>
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	4a21      	ldr	r2, [pc, #132]	@ (8013680 <TIM_TI1_SetConfig+0xd0>)
 80135fa:	4293      	cmp	r3, r2
 80135fc:	d007      	beq.n	801360e <TIM_TI1_SetConfig+0x5e>
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	4a20      	ldr	r2, [pc, #128]	@ (8013684 <TIM_TI1_SetConfig+0xd4>)
 8013602:	4293      	cmp	r3, r2
 8013604:	d003      	beq.n	801360e <TIM_TI1_SetConfig+0x5e>
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	4a1f      	ldr	r2, [pc, #124]	@ (8013688 <TIM_TI1_SetConfig+0xd8>)
 801360a:	4293      	cmp	r3, r2
 801360c:	d101      	bne.n	8013612 <TIM_TI1_SetConfig+0x62>
 801360e:	2301      	movs	r3, #1
 8013610:	e000      	b.n	8013614 <TIM_TI1_SetConfig+0x64>
 8013612:	2300      	movs	r3, #0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d008      	beq.n	801362a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	f023 0303 	bic.w	r3, r3, #3
 801361e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8013620:	697a      	ldr	r2, [r7, #20]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	4313      	orrs	r3, r2
 8013626:	617b      	str	r3, [r7, #20]
 8013628:	e003      	b.n	8013632 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	f043 0301 	orr.w	r3, r3, #1
 8013630:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013632:	697b      	ldr	r3, [r7, #20]
 8013634:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013638:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	011b      	lsls	r3, r3, #4
 801363e:	b2db      	uxtb	r3, r3
 8013640:	697a      	ldr	r2, [r7, #20]
 8013642:	4313      	orrs	r3, r2
 8013644:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013646:	693b      	ldr	r3, [r7, #16]
 8013648:	f023 030a 	bic.w	r3, r3, #10
 801364c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	f003 030a 	and.w	r3, r3, #10
 8013654:	693a      	ldr	r2, [r7, #16]
 8013656:	4313      	orrs	r3, r2
 8013658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	697a      	ldr	r2, [r7, #20]
 801365e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	693a      	ldr	r2, [r7, #16]
 8013664:	621a      	str	r2, [r3, #32]
}
 8013666:	bf00      	nop
 8013668:	371c      	adds	r7, #28
 801366a:	46bd      	mov	sp, r7
 801366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013670:	4770      	bx	lr
 8013672:	bf00      	nop
 8013674:	40012c00 	.word	0x40012c00
 8013678:	40000400 	.word	0x40000400
 801367c:	40000800 	.word	0x40000800
 8013680:	40000c00 	.word	0x40000c00
 8013684:	40013400 	.word	0x40013400
 8013688:	40014000 	.word	0x40014000

0801368c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801368c:	b480      	push	{r7}
 801368e:	b087      	sub	sp, #28
 8013690:	af00      	add	r7, sp, #0
 8013692:	60f8      	str	r0, [r7, #12]
 8013694:	60b9      	str	r1, [r7, #8]
 8013696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	6a1b      	ldr	r3, [r3, #32]
 801369c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	6a1b      	ldr	r3, [r3, #32]
 80136a2:	f023 0201 	bic.w	r2, r3, #1
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	699b      	ldr	r3, [r3, #24]
 80136ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80136b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	011b      	lsls	r3, r3, #4
 80136bc:	693a      	ldr	r2, [r7, #16]
 80136be:	4313      	orrs	r3, r2
 80136c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	f023 030a 	bic.w	r3, r3, #10
 80136c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80136ca:	697a      	ldr	r2, [r7, #20]
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	4313      	orrs	r3, r2
 80136d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	693a      	ldr	r2, [r7, #16]
 80136d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	697a      	ldr	r2, [r7, #20]
 80136dc:	621a      	str	r2, [r3, #32]
}
 80136de:	bf00      	nop
 80136e0:	371c      	adds	r7, #28
 80136e2:	46bd      	mov	sp, r7
 80136e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e8:	4770      	bx	lr

080136ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80136ea:	b480      	push	{r7}
 80136ec:	b087      	sub	sp, #28
 80136ee:	af00      	add	r7, sp, #0
 80136f0:	60f8      	str	r0, [r7, #12]
 80136f2:	60b9      	str	r1, [r7, #8]
 80136f4:	607a      	str	r2, [r7, #4]
 80136f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	6a1b      	ldr	r3, [r3, #32]
 80136fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	6a1b      	ldr	r3, [r3, #32]
 8013702:	f023 0210 	bic.w	r2, r3, #16
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	699b      	ldr	r3, [r3, #24]
 801370e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	021b      	lsls	r3, r3, #8
 801371c:	693a      	ldr	r2, [r7, #16]
 801371e:	4313      	orrs	r3, r2
 8013720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013722:	693b      	ldr	r3, [r7, #16]
 8013724:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	031b      	lsls	r3, r3, #12
 801372e:	b29b      	uxth	r3, r3
 8013730:	693a      	ldr	r2, [r7, #16]
 8013732:	4313      	orrs	r3, r2
 8013734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801373c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	011b      	lsls	r3, r3, #4
 8013742:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8013746:	697a      	ldr	r2, [r7, #20]
 8013748:	4313      	orrs	r3, r2
 801374a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	693a      	ldr	r2, [r7, #16]
 8013750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	697a      	ldr	r2, [r7, #20]
 8013756:	621a      	str	r2, [r3, #32]
}
 8013758:	bf00      	nop
 801375a:	371c      	adds	r7, #28
 801375c:	46bd      	mov	sp, r7
 801375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013762:	4770      	bx	lr

08013764 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013764:	b480      	push	{r7}
 8013766:	b087      	sub	sp, #28
 8013768:	af00      	add	r7, sp, #0
 801376a:	60f8      	str	r0, [r7, #12]
 801376c:	60b9      	str	r1, [r7, #8]
 801376e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	6a1b      	ldr	r3, [r3, #32]
 8013774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	6a1b      	ldr	r3, [r3, #32]
 801377a:	f023 0210 	bic.w	r2, r3, #16
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	699b      	ldr	r3, [r3, #24]
 8013786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801378e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	031b      	lsls	r3, r3, #12
 8013794:	693a      	ldr	r2, [r7, #16]
 8013796:	4313      	orrs	r3, r2
 8013798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80137a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	011b      	lsls	r3, r3, #4
 80137a6:	697a      	ldr	r2, [r7, #20]
 80137a8:	4313      	orrs	r3, r2
 80137aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	693a      	ldr	r2, [r7, #16]
 80137b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	697a      	ldr	r2, [r7, #20]
 80137b6:	621a      	str	r2, [r3, #32]
}
 80137b8:	bf00      	nop
 80137ba:	371c      	adds	r7, #28
 80137bc:	46bd      	mov	sp, r7
 80137be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c2:	4770      	bx	lr

080137c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80137c4:	b480      	push	{r7}
 80137c6:	b087      	sub	sp, #28
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	60f8      	str	r0, [r7, #12]
 80137cc:	60b9      	str	r1, [r7, #8]
 80137ce:	607a      	str	r2, [r7, #4]
 80137d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	6a1b      	ldr	r3, [r3, #32]
 80137d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	6a1b      	ldr	r3, [r3, #32]
 80137dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	69db      	ldr	r3, [r3, #28]
 80137e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	f023 0303 	bic.w	r3, r3, #3
 80137f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80137f2:	693a      	ldr	r2, [r7, #16]
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	4313      	orrs	r3, r2
 80137f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80137fa:	693b      	ldr	r3, [r7, #16]
 80137fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013800:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	011b      	lsls	r3, r3, #4
 8013806:	b2db      	uxtb	r3, r3
 8013808:	693a      	ldr	r2, [r7, #16]
 801380a:	4313      	orrs	r3, r2
 801380c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801380e:	697b      	ldr	r3, [r7, #20]
 8013810:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8013814:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	021b      	lsls	r3, r3, #8
 801381a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 801381e:	697a      	ldr	r2, [r7, #20]
 8013820:	4313      	orrs	r3, r2
 8013822:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	693a      	ldr	r2, [r7, #16]
 8013828:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	697a      	ldr	r2, [r7, #20]
 801382e:	621a      	str	r2, [r3, #32]
}
 8013830:	bf00      	nop
 8013832:	371c      	adds	r7, #28
 8013834:	46bd      	mov	sp, r7
 8013836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383a:	4770      	bx	lr

0801383c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801383c:	b480      	push	{r7}
 801383e:	b087      	sub	sp, #28
 8013840:	af00      	add	r7, sp, #0
 8013842:	60f8      	str	r0, [r7, #12]
 8013844:	60b9      	str	r1, [r7, #8]
 8013846:	607a      	str	r2, [r7, #4]
 8013848:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	6a1b      	ldr	r3, [r3, #32]
 801384e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	6a1b      	ldr	r3, [r3, #32]
 8013854:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	69db      	ldr	r3, [r3, #28]
 8013860:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013868:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	021b      	lsls	r3, r3, #8
 801386e:	693a      	ldr	r2, [r7, #16]
 8013870:	4313      	orrs	r3, r2
 8013872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8013874:	693b      	ldr	r3, [r7, #16]
 8013876:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801387a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801387c:	683b      	ldr	r3, [r7, #0]
 801387e:	031b      	lsls	r3, r3, #12
 8013880:	b29b      	uxth	r3, r3
 8013882:	693a      	ldr	r2, [r7, #16]
 8013884:	4313      	orrs	r3, r2
 8013886:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 801388e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8013890:	68bb      	ldr	r3, [r7, #8]
 8013892:	031b      	lsls	r3, r3, #12
 8013894:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8013898:	697a      	ldr	r2, [r7, #20]
 801389a:	4313      	orrs	r3, r2
 801389c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	693a      	ldr	r2, [r7, #16]
 80138a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	697a      	ldr	r2, [r7, #20]
 80138a8:	621a      	str	r2, [r3, #32]
}
 80138aa:	bf00      	nop
 80138ac:	371c      	adds	r7, #28
 80138ae:	46bd      	mov	sp, r7
 80138b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b4:	4770      	bx	lr

080138b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80138b6:	b480      	push	{r7}
 80138b8:	b085      	sub	sp, #20
 80138ba:	af00      	add	r7, sp, #0
 80138bc:	6078      	str	r0, [r7, #4]
 80138be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	689b      	ldr	r3, [r3, #8]
 80138c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80138cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80138ce:	683a      	ldr	r2, [r7, #0]
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	4313      	orrs	r3, r2
 80138d4:	f043 0307 	orr.w	r3, r3, #7
 80138d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	68fa      	ldr	r2, [r7, #12]
 80138de:	609a      	str	r2, [r3, #8]
}
 80138e0:	bf00      	nop
 80138e2:	3714      	adds	r7, #20
 80138e4:	46bd      	mov	sp, r7
 80138e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ea:	4770      	bx	lr

080138ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80138ec:	b480      	push	{r7}
 80138ee:	b087      	sub	sp, #28
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	60f8      	str	r0, [r7, #12]
 80138f4:	60b9      	str	r1, [r7, #8]
 80138f6:	607a      	str	r2, [r7, #4]
 80138f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	689b      	ldr	r3, [r3, #8]
 80138fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013900:	697b      	ldr	r3, [r7, #20]
 8013902:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013908:	683b      	ldr	r3, [r7, #0]
 801390a:	021a      	lsls	r2, r3, #8
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	431a      	orrs	r2, r3
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	4313      	orrs	r3, r2
 8013914:	697a      	ldr	r2, [r7, #20]
 8013916:	4313      	orrs	r3, r2
 8013918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	697a      	ldr	r2, [r7, #20]
 801391e:	609a      	str	r2, [r3, #8]
}
 8013920:	bf00      	nop
 8013922:	371c      	adds	r7, #28
 8013924:	46bd      	mov	sp, r7
 8013926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392a:	4770      	bx	lr

0801392c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801392c:	b480      	push	{r7}
 801392e:	b087      	sub	sp, #28
 8013930:	af00      	add	r7, sp, #0
 8013932:	60f8      	str	r0, [r7, #12]
 8013934:	60b9      	str	r1, [r7, #8]
 8013936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	f003 031f 	and.w	r3, r3, #31
 801393e:	2201      	movs	r2, #1
 8013940:	fa02 f303 	lsl.w	r3, r2, r3
 8013944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	6a1a      	ldr	r2, [r3, #32]
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	43db      	mvns	r3, r3
 801394e:	401a      	ands	r2, r3
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	6a1a      	ldr	r2, [r3, #32]
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	f003 031f 	and.w	r3, r3, #31
 801395e:	6879      	ldr	r1, [r7, #4]
 8013960:	fa01 f303 	lsl.w	r3, r1, r3
 8013964:	431a      	orrs	r2, r3
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	621a      	str	r2, [r3, #32]
}
 801396a:	bf00      	nop
 801396c:	371c      	adds	r7, #28
 801396e:	46bd      	mov	sp, r7
 8013970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013974:	4770      	bx	lr
	...

08013978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013978:	b480      	push	{r7}
 801397a:	b085      	sub	sp, #20
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
 8013980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013988:	2b01      	cmp	r3, #1
 801398a:	d101      	bne.n	8013990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801398c:	2302      	movs	r3, #2
 801398e:	e068      	b.n	8013a62 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	2201      	movs	r2, #1
 8013994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2202      	movs	r2, #2
 801399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	685b      	ldr	r3, [r3, #4]
 80139a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	689b      	ldr	r3, [r3, #8]
 80139ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	4a2e      	ldr	r2, [pc, #184]	@ (8013a70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80139b6:	4293      	cmp	r3, r2
 80139b8:	d004      	beq.n	80139c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	4a2d      	ldr	r2, [pc, #180]	@ (8013a74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80139c0:	4293      	cmp	r3, r2
 80139c2:	d108      	bne.n	80139d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80139ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80139cc:	683b      	ldr	r3, [r7, #0]
 80139ce:	685b      	ldr	r3, [r3, #4]
 80139d0:	68fa      	ldr	r2, [r7, #12]
 80139d2:	4313      	orrs	r3, r2
 80139d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80139dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	68fa      	ldr	r2, [r7, #12]
 80139e4:	4313      	orrs	r3, r2
 80139e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	68fa      	ldr	r2, [r7, #12]
 80139ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	4a1e      	ldr	r2, [pc, #120]	@ (8013a70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d01d      	beq.n	8013a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013a02:	d018      	beq.n	8013a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	4a1b      	ldr	r2, [pc, #108]	@ (8013a78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013a0a:	4293      	cmp	r3, r2
 8013a0c:	d013      	beq.n	8013a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	4a1a      	ldr	r2, [pc, #104]	@ (8013a7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013a14:	4293      	cmp	r3, r2
 8013a16:	d00e      	beq.n	8013a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	4a18      	ldr	r2, [pc, #96]	@ (8013a80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013a1e:	4293      	cmp	r3, r2
 8013a20:	d009      	beq.n	8013a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	4a13      	ldr	r2, [pc, #76]	@ (8013a74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8013a28:	4293      	cmp	r3, r2
 8013a2a:	d004      	beq.n	8013a36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	4a14      	ldr	r2, [pc, #80]	@ (8013a84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013a32:	4293      	cmp	r3, r2
 8013a34:	d10c      	bne.n	8013a50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013a36:	68bb      	ldr	r3, [r7, #8]
 8013a38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013a3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	689b      	ldr	r3, [r3, #8]
 8013a42:	68ba      	ldr	r2, [r7, #8]
 8013a44:	4313      	orrs	r3, r2
 8013a46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	68ba      	ldr	r2, [r7, #8]
 8013a4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	2201      	movs	r2, #1
 8013a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013a60:	2300      	movs	r3, #0
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3714      	adds	r7, #20
 8013a66:	46bd      	mov	sp, r7
 8013a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6c:	4770      	bx	lr
 8013a6e:	bf00      	nop
 8013a70:	40012c00 	.word	0x40012c00
 8013a74:	40013400 	.word	0x40013400
 8013a78:	40000400 	.word	0x40000400
 8013a7c:	40000800 	.word	0x40000800
 8013a80:	40000c00 	.word	0x40000c00
 8013a84:	40014000 	.word	0x40014000

08013a88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013a88:	b480      	push	{r7}
 8013a8a:	b085      	sub	sp, #20
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
 8013a90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013a92:	2300      	movs	r3, #0
 8013a94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013a9c:	2b01      	cmp	r3, #1
 8013a9e:	d101      	bne.n	8013aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013aa0:	2302      	movs	r3, #2
 8013aa2:	e065      	b.n	8013b70 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2201      	movs	r2, #1
 8013aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8013ab2:	683b      	ldr	r3, [r7, #0]
 8013ab4:	68db      	ldr	r3, [r3, #12]
 8013ab6:	4313      	orrs	r3, r2
 8013ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8013ac0:	683b      	ldr	r3, [r7, #0]
 8013ac2:	689b      	ldr	r3, [r3, #8]
 8013ac4:	4313      	orrs	r3, r2
 8013ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8013ace:	683b      	ldr	r3, [r7, #0]
 8013ad0:	685b      	ldr	r3, [r3, #4]
 8013ad2:	4313      	orrs	r3, r2
 8013ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8013adc:	683b      	ldr	r3, [r7, #0]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	4313      	orrs	r3, r2
 8013ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	691b      	ldr	r3, [r3, #16]
 8013aee:	4313      	orrs	r3, r2
 8013af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	695b      	ldr	r3, [r3, #20]
 8013afc:	4313      	orrs	r3, r2
 8013afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8013b06:	683b      	ldr	r3, [r7, #0]
 8013b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b0a:	4313      	orrs	r3, r2
 8013b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	699b      	ldr	r3, [r3, #24]
 8013b18:	041b      	lsls	r3, r3, #16
 8013b1a:	4313      	orrs	r3, r2
 8013b1c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	4a16      	ldr	r2, [pc, #88]	@ (8013b7c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013b24:	4293      	cmp	r3, r2
 8013b26:	d004      	beq.n	8013b32 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	4a14      	ldr	r2, [pc, #80]	@ (8013b80 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8013b2e:	4293      	cmp	r3, r2
 8013b30:	d115      	bne.n	8013b5e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8013b38:	683b      	ldr	r3, [r7, #0]
 8013b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b3c:	051b      	lsls	r3, r3, #20
 8013b3e:	4313      	orrs	r3, r2
 8013b40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	69db      	ldr	r3, [r3, #28]
 8013b4c:	4313      	orrs	r3, r2
 8013b4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	6a1b      	ldr	r3, [r3, #32]
 8013b5a:	4313      	orrs	r3, r2
 8013b5c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	68fa      	ldr	r2, [r7, #12]
 8013b64:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2200      	movs	r2, #0
 8013b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013b6e:	2300      	movs	r3, #0
}
 8013b70:	4618      	mov	r0, r3
 8013b72:	3714      	adds	r7, #20
 8013b74:	46bd      	mov	sp, r7
 8013b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7a:	4770      	bx	lr
 8013b7c:	40012c00 	.word	0x40012c00
 8013b80:	40013400 	.word	0x40013400

08013b84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b082      	sub	sp, #8
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d101      	bne.n	8013b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013b92:	2301      	movs	r3, #1
 8013b94:	e040      	b.n	8013c18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d106      	bne.n	8013bac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013ba6:	6878      	ldr	r0, [r7, #4]
 8013ba8:	f7f3 f8f8 	bl	8006d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2224      	movs	r2, #36	@ 0x24
 8013bb0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	681a      	ldr	r2, [r3, #0]
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	f022 0201 	bic.w	r2, r2, #1
 8013bc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d002      	beq.n	8013bd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	f000 fdb4 	bl	8014738 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f000 faf9 	bl	80141c8 <UART_SetConfig>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	2b01      	cmp	r3, #1
 8013bda:	d101      	bne.n	8013be0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8013bdc:	2301      	movs	r3, #1
 8013bde:	e01b      	b.n	8013c18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	685a      	ldr	r2, [r3, #4]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	689a      	ldr	r2, [r3, #8]
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8013bfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	681a      	ldr	r2, [r3, #0]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	f042 0201 	orr.w	r2, r2, #1
 8013c0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f000 fe33 	bl	801487c <UART_CheckIdleState>
 8013c16:	4603      	mov	r3, r0
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	3708      	adds	r7, #8
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b082      	sub	sp, #8
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d101      	bne.n	8013c32 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8013c2e:	2301      	movs	r3, #1
 8013c30:	e048      	b.n	8013cc4 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d106      	bne.n	8013c48 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f7f3 f8aa 	bl	8006d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	2224      	movs	r2, #36	@ 0x24
 8013c4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	f022 0201 	bic.w	r2, r2, #1
 8013c5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d002      	beq.n	8013c6c <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f000 fd66 	bl	8014738 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	f000 faab 	bl	80141c8 <UART_SetConfig>
 8013c72:	4603      	mov	r3, r0
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	d101      	bne.n	8013c7c <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8013c78:	2301      	movs	r3, #1
 8013c7a:	e023      	b.n	8013cc4 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	685a      	ldr	r2, [r3, #4]
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	689a      	ldr	r2, [r3, #8]
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8013c9a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	689a      	ldr	r2, [r3, #8]
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	f042 0208 	orr.w	r2, r2, #8
 8013caa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	681a      	ldr	r2, [r3, #0]
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	f042 0201 	orr.w	r2, r2, #1
 8013cba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013cbc:	6878      	ldr	r0, [r7, #4]
 8013cbe:	f000 fddd 	bl	801487c <UART_CheckIdleState>
 8013cc2:	4603      	mov	r3, r0
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	3708      	adds	r7, #8
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bd80      	pop	{r7, pc}

08013ccc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b08a      	sub	sp, #40	@ 0x28
 8013cd0:	af02      	add	r7, sp, #8
 8013cd2:	60f8      	str	r0, [r7, #12]
 8013cd4:	60b9      	str	r1, [r7, #8]
 8013cd6:	603b      	str	r3, [r7, #0]
 8013cd8:	4613      	mov	r3, r2
 8013cda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013ce0:	2b20      	cmp	r3, #32
 8013ce2:	d177      	bne.n	8013dd4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8013ce4:	68bb      	ldr	r3, [r7, #8]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d002      	beq.n	8013cf0 <HAL_UART_Transmit+0x24>
 8013cea:	88fb      	ldrh	r3, [r7, #6]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d101      	bne.n	8013cf4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	e070      	b.n	8013dd6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	2221      	movs	r2, #33	@ 0x21
 8013d00:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013d02:	f7f6 fb0b 	bl	800a31c <HAL_GetTick>
 8013d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	88fa      	ldrh	r2, [r7, #6]
 8013d0c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	88fa      	ldrh	r2, [r7, #6]
 8013d14:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	689b      	ldr	r3, [r3, #8]
 8013d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013d20:	d108      	bne.n	8013d34 <HAL_UART_Transmit+0x68>
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	691b      	ldr	r3, [r3, #16]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d104      	bne.n	8013d34 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	61bb      	str	r3, [r7, #24]
 8013d32:	e003      	b.n	8013d3c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013d38:	2300      	movs	r3, #0
 8013d3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013d3c:	e02f      	b.n	8013d9e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	9300      	str	r3, [sp, #0]
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	2200      	movs	r2, #0
 8013d46:	2180      	movs	r1, #128	@ 0x80
 8013d48:	68f8      	ldr	r0, [r7, #12]
 8013d4a:	f000 fe3f 	bl	80149cc <UART_WaitOnFlagUntilTimeout>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d004      	beq.n	8013d5e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	2220      	movs	r2, #32
 8013d58:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8013d5a:	2303      	movs	r3, #3
 8013d5c:	e03b      	b.n	8013dd6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8013d5e:	69fb      	ldr	r3, [r7, #28]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d10b      	bne.n	8013d7c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013d64:	69bb      	ldr	r3, [r7, #24]
 8013d66:	881a      	ldrh	r2, [r3, #0]
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013d70:	b292      	uxth	r2, r2
 8013d72:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8013d74:	69bb      	ldr	r3, [r7, #24]
 8013d76:	3302      	adds	r3, #2
 8013d78:	61bb      	str	r3, [r7, #24]
 8013d7a:	e007      	b.n	8013d8c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013d7c:	69fb      	ldr	r3, [r7, #28]
 8013d7e:	781a      	ldrb	r2, [r3, #0]
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8013d86:	69fb      	ldr	r3, [r7, #28]
 8013d88:	3301      	adds	r3, #1
 8013d8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	3b01      	subs	r3, #1
 8013d96:	b29a      	uxth	r2, r3
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8013da4:	b29b      	uxth	r3, r3
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d1c9      	bne.n	8013d3e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	9300      	str	r3, [sp, #0]
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	2200      	movs	r2, #0
 8013db2:	2140      	movs	r1, #64	@ 0x40
 8013db4:	68f8      	ldr	r0, [r7, #12]
 8013db6:	f000 fe09 	bl	80149cc <UART_WaitOnFlagUntilTimeout>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d004      	beq.n	8013dca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2220      	movs	r2, #32
 8013dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8013dc6:	2303      	movs	r3, #3
 8013dc8:	e005      	b.n	8013dd6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	2220      	movs	r2, #32
 8013dce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	e000      	b.n	8013dd6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8013dd4:	2302      	movs	r3, #2
  }
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3720      	adds	r7, #32
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}

08013dde <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013dde:	b580      	push	{r7, lr}
 8013de0:	b08a      	sub	sp, #40	@ 0x28
 8013de2:	af02      	add	r7, sp, #8
 8013de4:	60f8      	str	r0, [r7, #12]
 8013de6:	60b9      	str	r1, [r7, #8]
 8013de8:	603b      	str	r3, [r7, #0]
 8013dea:	4613      	mov	r3, r2
 8013dec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013df4:	2b20      	cmp	r3, #32
 8013df6:	f040 80b6 	bne.w	8013f66 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8013dfa:	68bb      	ldr	r3, [r7, #8]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d002      	beq.n	8013e06 <HAL_UART_Receive+0x28>
 8013e00:	88fb      	ldrh	r3, [r7, #6]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d101      	bne.n	8013e0a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8013e06:	2301      	movs	r3, #1
 8013e08:	e0ae      	b.n	8013f68 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	2222      	movs	r2, #34	@ 0x22
 8013e16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013e20:	f7f6 fa7c 	bl	800a31c <HAL_GetTick>
 8013e24:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	88fa      	ldrh	r2, [r7, #6]
 8013e2a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	88fa      	ldrh	r2, [r7, #6]
 8013e32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	689b      	ldr	r3, [r3, #8]
 8013e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013e3e:	d10e      	bne.n	8013e5e <HAL_UART_Receive+0x80>
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	691b      	ldr	r3, [r3, #16]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d105      	bne.n	8013e54 <HAL_UART_Receive+0x76>
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8013e4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8013e52:	e02d      	b.n	8013eb0 <HAL_UART_Receive+0xd2>
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	22ff      	movs	r2, #255	@ 0xff
 8013e58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8013e5c:	e028      	b.n	8013eb0 <HAL_UART_Receive+0xd2>
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	689b      	ldr	r3, [r3, #8]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d10d      	bne.n	8013e82 <HAL_UART_Receive+0xa4>
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	691b      	ldr	r3, [r3, #16]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d104      	bne.n	8013e78 <HAL_UART_Receive+0x9a>
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	22ff      	movs	r2, #255	@ 0xff
 8013e72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8013e76:	e01b      	b.n	8013eb0 <HAL_UART_Receive+0xd2>
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	227f      	movs	r2, #127	@ 0x7f
 8013e7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8013e80:	e016      	b.n	8013eb0 <HAL_UART_Receive+0xd2>
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	689b      	ldr	r3, [r3, #8]
 8013e86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013e8a:	d10d      	bne.n	8013ea8 <HAL_UART_Receive+0xca>
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	691b      	ldr	r3, [r3, #16]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d104      	bne.n	8013e9e <HAL_UART_Receive+0xc0>
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	227f      	movs	r2, #127	@ 0x7f
 8013e98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8013e9c:	e008      	b.n	8013eb0 <HAL_UART_Receive+0xd2>
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	223f      	movs	r2, #63	@ 0x3f
 8013ea2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8013ea6:	e003      	b.n	8013eb0 <HAL_UART_Receive+0xd2>
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	2200      	movs	r2, #0
 8013eac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013eb6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	689b      	ldr	r3, [r3, #8]
 8013ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013ec0:	d108      	bne.n	8013ed4 <HAL_UART_Receive+0xf6>
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	691b      	ldr	r3, [r3, #16]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d104      	bne.n	8013ed4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	61bb      	str	r3, [r7, #24]
 8013ed2:	e003      	b.n	8013edc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8013ed4:	68bb      	ldr	r3, [r7, #8]
 8013ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8013edc:	e037      	b.n	8013f4e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8013ede:	683b      	ldr	r3, [r7, #0]
 8013ee0:	9300      	str	r3, [sp, #0]
 8013ee2:	697b      	ldr	r3, [r7, #20]
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	2120      	movs	r1, #32
 8013ee8:	68f8      	ldr	r0, [r7, #12]
 8013eea:	f000 fd6f 	bl	80149cc <UART_WaitOnFlagUntilTimeout>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d005      	beq.n	8013f00 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2220      	movs	r2, #32
 8013ef8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8013efc:	2303      	movs	r3, #3
 8013efe:	e033      	b.n	8013f68 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8013f00:	69fb      	ldr	r3, [r7, #28]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d10c      	bne.n	8013f20 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013f0c:	b29a      	uxth	r2, r3
 8013f0e:	8a7b      	ldrh	r3, [r7, #18]
 8013f10:	4013      	ands	r3, r2
 8013f12:	b29a      	uxth	r2, r3
 8013f14:	69bb      	ldr	r3, [r7, #24]
 8013f16:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8013f18:	69bb      	ldr	r3, [r7, #24]
 8013f1a:	3302      	adds	r3, #2
 8013f1c:	61bb      	str	r3, [r7, #24]
 8013f1e:	e00d      	b.n	8013f3c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013f26:	b29b      	uxth	r3, r3
 8013f28:	b2da      	uxtb	r2, r3
 8013f2a:	8a7b      	ldrh	r3, [r7, #18]
 8013f2c:	b2db      	uxtb	r3, r3
 8013f2e:	4013      	ands	r3, r2
 8013f30:	b2da      	uxtb	r2, r3
 8013f32:	69fb      	ldr	r3, [r7, #28]
 8013f34:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8013f36:	69fb      	ldr	r3, [r7, #28]
 8013f38:	3301      	adds	r3, #1
 8013f3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8013f42:	b29b      	uxth	r3, r3
 8013f44:	3b01      	subs	r3, #1
 8013f46:	b29a      	uxth	r2, r3
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8013f54:	b29b      	uxth	r3, r3
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d1c1      	bne.n	8013ede <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	2220      	movs	r2, #32
 8013f5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8013f62:	2300      	movs	r3, #0
 8013f64:	e000      	b.n	8013f68 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8013f66:	2302      	movs	r3, #2
  }
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	3720      	adds	r7, #32
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}

08013f70 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b08a      	sub	sp, #40	@ 0x28
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	60f8      	str	r0, [r7, #12]
 8013f78:	60b9      	str	r1, [r7, #8]
 8013f7a:	4613      	mov	r3, r2
 8013f7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013f82:	2b20      	cmp	r3, #32
 8013f84:	d165      	bne.n	8014052 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d002      	beq.n	8013f92 <HAL_UART_Transmit_DMA+0x22>
 8013f8c:	88fb      	ldrh	r3, [r7, #6]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d101      	bne.n	8013f96 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8013f92:	2301      	movs	r3, #1
 8013f94:	e05e      	b.n	8014054 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	68ba      	ldr	r2, [r7, #8]
 8013f9a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	88fa      	ldrh	r2, [r7, #6]
 8013fa0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	88fa      	ldrh	r2, [r7, #6]
 8013fa8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	2200      	movs	r2, #0
 8013fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	2221      	movs	r2, #33	@ 0x21
 8013fb8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d027      	beq.n	8014012 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013fc6:	4a25      	ldr	r2, [pc, #148]	@ (801405c <HAL_UART_Transmit_DMA+0xec>)
 8013fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013fce:	4a24      	ldr	r2, [pc, #144]	@ (8014060 <HAL_UART_Transmit_DMA+0xf0>)
 8013fd0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013fd6:	4a23      	ldr	r2, [pc, #140]	@ (8014064 <HAL_UART_Transmit_DMA+0xf4>)
 8013fd8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013fde:	2200      	movs	r2, #0
 8013fe0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013fea:	4619      	mov	r1, r3
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	3328      	adds	r3, #40	@ 0x28
 8013ff2:	461a      	mov	r2, r3
 8013ff4:	88fb      	ldrh	r3, [r7, #6]
 8013ff6:	f7f8 f947 	bl	800c288 <HAL_DMA_Start_IT>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d008      	beq.n	8014012 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	2210      	movs	r2, #16
 8014004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	2220      	movs	r2, #32
 801400c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801400e:	2301      	movs	r3, #1
 8014010:	e020      	b.n	8014054 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	2240      	movs	r2, #64	@ 0x40
 8014018:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	3308      	adds	r3, #8
 8014020:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014022:	697b      	ldr	r3, [r7, #20]
 8014024:	e853 3f00 	ldrex	r3, [r3]
 8014028:	613b      	str	r3, [r7, #16]
   return(result);
 801402a:	693b      	ldr	r3, [r7, #16]
 801402c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014030:	627b      	str	r3, [r7, #36]	@ 0x24
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	3308      	adds	r3, #8
 8014038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801403a:	623a      	str	r2, [r7, #32]
 801403c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801403e:	69f9      	ldr	r1, [r7, #28]
 8014040:	6a3a      	ldr	r2, [r7, #32]
 8014042:	e841 2300 	strex	r3, r2, [r1]
 8014046:	61bb      	str	r3, [r7, #24]
   return(result);
 8014048:	69bb      	ldr	r3, [r7, #24]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d1e5      	bne.n	801401a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 801404e:	2300      	movs	r3, #0
 8014050:	e000      	b.n	8014054 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8014052:	2302      	movs	r3, #2
  }
}
 8014054:	4618      	mov	r0, r3
 8014056:	3728      	adds	r7, #40	@ 0x28
 8014058:	46bd      	mov	sp, r7
 801405a:	bd80      	pop	{r7, pc}
 801405c:	08014cfd 	.word	0x08014cfd
 8014060:	08014d97 	.word	0x08014d97
 8014064:	08014f1d 	.word	0x08014f1d

08014068 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b090      	sub	sp, #64	@ 0x40
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801407c:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	689b      	ldr	r3, [r3, #8]
 8014084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014088:	2b80      	cmp	r3, #128	@ 0x80
 801408a:	d139      	bne.n	8014100 <HAL_UART_DMAStop+0x98>
 801408c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801408e:	2b21      	cmp	r3, #33	@ 0x21
 8014090:	d136      	bne.n	8014100 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	3308      	adds	r3, #8
 8014098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801409a:	6a3b      	ldr	r3, [r7, #32]
 801409c:	e853 3f00 	ldrex	r3, [r3]
 80140a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80140a2:	69fb      	ldr	r3, [r7, #28]
 80140a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80140a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	3308      	adds	r3, #8
 80140b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80140b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80140b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80140b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80140ba:	e841 2300 	strex	r3, r2, [r1]
 80140be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80140c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d1e5      	bne.n	8014092 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d015      	beq.n	80140fa <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7f8 f938 	bl	800c348 <HAL_DMA_Abort>
 80140d8:	4603      	mov	r3, r0
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d00d      	beq.n	80140fa <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7f8 fa1d 	bl	800c522 <HAL_DMA_GetError>
 80140e8:	4603      	mov	r3, r0
 80140ea:	2b20      	cmp	r3, #32
 80140ec:	d105      	bne.n	80140fa <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2210      	movs	r2, #16
 80140f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80140f6:	2303      	movs	r3, #3
 80140f8:	e044      	b.n	8014184 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80140fa:	6878      	ldr	r0, [r7, #4]
 80140fc:	f000 fd74 	bl	8014be8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	689b      	ldr	r3, [r3, #8]
 8014106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801410a:	2b40      	cmp	r3, #64	@ 0x40
 801410c:	d139      	bne.n	8014182 <HAL_UART_DMAStop+0x11a>
 801410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014110:	2b22      	cmp	r3, #34	@ 0x22
 8014112:	d136      	bne.n	8014182 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	3308      	adds	r3, #8
 801411a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	e853 3f00 	ldrex	r3, [r3]
 8014122:	60bb      	str	r3, [r7, #8]
   return(result);
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801412a:	633b      	str	r3, [r7, #48]	@ 0x30
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	3308      	adds	r3, #8
 8014132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014134:	61ba      	str	r2, [r7, #24]
 8014136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014138:	6979      	ldr	r1, [r7, #20]
 801413a:	69ba      	ldr	r2, [r7, #24]
 801413c:	e841 2300 	strex	r3, r2, [r1]
 8014140:	613b      	str	r3, [r7, #16]
   return(result);
 8014142:	693b      	ldr	r3, [r7, #16]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d1e5      	bne.n	8014114 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801414c:	2b00      	cmp	r3, #0
 801414e:	d015      	beq.n	801417c <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014154:	4618      	mov	r0, r3
 8014156:	f7f8 f8f7 	bl	800c348 <HAL_DMA_Abort>
 801415a:	4603      	mov	r3, r0
 801415c:	2b00      	cmp	r3, #0
 801415e:	d00d      	beq.n	801417c <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014164:	4618      	mov	r0, r3
 8014166:	f7f8 f9dc 	bl	800c522 <HAL_DMA_GetError>
 801416a:	4603      	mov	r3, r0
 801416c:	2b20      	cmp	r3, #32
 801416e:	d105      	bne.n	801417c <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	2210      	movs	r2, #16
 8014174:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014178:	2303      	movs	r3, #3
 801417a:	e003      	b.n	8014184 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	f000 fd59 	bl	8014c34 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8014182:	2300      	movs	r3, #0
}
 8014184:	4618      	mov	r0, r3
 8014186:	3740      	adds	r7, #64	@ 0x40
 8014188:	46bd      	mov	sp, r7
 801418a:	bd80      	pop	{r7, pc}

0801418c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801418c:	b480      	push	{r7}
 801418e:	b083      	sub	sp, #12
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8014194:	bf00      	nop
 8014196:	370c      	adds	r7, #12
 8014198:	46bd      	mov	sp, r7
 801419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419e:	4770      	bx	lr

080141a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80141a0:	b480      	push	{r7}
 80141a2:	b083      	sub	sp, #12
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80141a8:	bf00      	nop
 80141aa:	370c      	adds	r7, #12
 80141ac:	46bd      	mov	sp, r7
 80141ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b2:	4770      	bx	lr

080141b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80141b4:	b480      	push	{r7}
 80141b6:	b083      	sub	sp, #12
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80141bc:	bf00      	nop
 80141be:	370c      	adds	r7, #12
 80141c0:	46bd      	mov	sp, r7
 80141c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c6:	4770      	bx	lr

080141c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80141c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80141cc:	b08a      	sub	sp, #40	@ 0x28
 80141ce:	af00      	add	r7, sp, #0
 80141d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80141d2:	2300      	movs	r3, #0
 80141d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	689a      	ldr	r2, [r3, #8]
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	691b      	ldr	r3, [r3, #16]
 80141e0:	431a      	orrs	r2, r3
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	695b      	ldr	r3, [r3, #20]
 80141e6:	431a      	orrs	r2, r3
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	69db      	ldr	r3, [r3, #28]
 80141ec:	4313      	orrs	r3, r2
 80141ee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	681a      	ldr	r2, [r3, #0]
 80141f6:	4ba4      	ldr	r3, [pc, #656]	@ (8014488 <UART_SetConfig+0x2c0>)
 80141f8:	4013      	ands	r3, r2
 80141fa:	68fa      	ldr	r2, [r7, #12]
 80141fc:	6812      	ldr	r2, [r2, #0]
 80141fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014200:	430b      	orrs	r3, r1
 8014202:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	685b      	ldr	r3, [r3, #4]
 801420a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	68da      	ldr	r2, [r3, #12]
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	430a      	orrs	r2, r1
 8014218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	699b      	ldr	r3, [r3, #24]
 801421e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	4a99      	ldr	r2, [pc, #612]	@ (801448c <UART_SetConfig+0x2c4>)
 8014226:	4293      	cmp	r3, r2
 8014228:	d004      	beq.n	8014234 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	6a1b      	ldr	r3, [r3, #32]
 801422e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014230:	4313      	orrs	r3, r2
 8014232:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	689b      	ldr	r3, [r3, #8]
 801423a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014244:	430a      	orrs	r2, r1
 8014246:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	4a90      	ldr	r2, [pc, #576]	@ (8014490 <UART_SetConfig+0x2c8>)
 801424e:	4293      	cmp	r3, r2
 8014250:	d126      	bne.n	80142a0 <UART_SetConfig+0xd8>
 8014252:	4b90      	ldr	r3, [pc, #576]	@ (8014494 <UART_SetConfig+0x2cc>)
 8014254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014258:	f003 0303 	and.w	r3, r3, #3
 801425c:	2b03      	cmp	r3, #3
 801425e:	d81b      	bhi.n	8014298 <UART_SetConfig+0xd0>
 8014260:	a201      	add	r2, pc, #4	@ (adr r2, 8014268 <UART_SetConfig+0xa0>)
 8014262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014266:	bf00      	nop
 8014268:	08014279 	.word	0x08014279
 801426c:	08014289 	.word	0x08014289
 8014270:	08014281 	.word	0x08014281
 8014274:	08014291 	.word	0x08014291
 8014278:	2301      	movs	r3, #1
 801427a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801427e:	e116      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014280:	2302      	movs	r3, #2
 8014282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014286:	e112      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014288:	2304      	movs	r3, #4
 801428a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801428e:	e10e      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014290:	2308      	movs	r3, #8
 8014292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014296:	e10a      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014298:	2310      	movs	r3, #16
 801429a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801429e:	e106      	b.n	80144ae <UART_SetConfig+0x2e6>
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	4a7c      	ldr	r2, [pc, #496]	@ (8014498 <UART_SetConfig+0x2d0>)
 80142a6:	4293      	cmp	r3, r2
 80142a8:	d138      	bne.n	801431c <UART_SetConfig+0x154>
 80142aa:	4b7a      	ldr	r3, [pc, #488]	@ (8014494 <UART_SetConfig+0x2cc>)
 80142ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80142b0:	f003 030c 	and.w	r3, r3, #12
 80142b4:	2b0c      	cmp	r3, #12
 80142b6:	d82d      	bhi.n	8014314 <UART_SetConfig+0x14c>
 80142b8:	a201      	add	r2, pc, #4	@ (adr r2, 80142c0 <UART_SetConfig+0xf8>)
 80142ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142be:	bf00      	nop
 80142c0:	080142f5 	.word	0x080142f5
 80142c4:	08014315 	.word	0x08014315
 80142c8:	08014315 	.word	0x08014315
 80142cc:	08014315 	.word	0x08014315
 80142d0:	08014305 	.word	0x08014305
 80142d4:	08014315 	.word	0x08014315
 80142d8:	08014315 	.word	0x08014315
 80142dc:	08014315 	.word	0x08014315
 80142e0:	080142fd 	.word	0x080142fd
 80142e4:	08014315 	.word	0x08014315
 80142e8:	08014315 	.word	0x08014315
 80142ec:	08014315 	.word	0x08014315
 80142f0:	0801430d 	.word	0x0801430d
 80142f4:	2300      	movs	r3, #0
 80142f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80142fa:	e0d8      	b.n	80144ae <UART_SetConfig+0x2e6>
 80142fc:	2302      	movs	r3, #2
 80142fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014302:	e0d4      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014304:	2304      	movs	r3, #4
 8014306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801430a:	e0d0      	b.n	80144ae <UART_SetConfig+0x2e6>
 801430c:	2308      	movs	r3, #8
 801430e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014312:	e0cc      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014314:	2310      	movs	r3, #16
 8014316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801431a:	e0c8      	b.n	80144ae <UART_SetConfig+0x2e6>
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	4a5e      	ldr	r2, [pc, #376]	@ (801449c <UART_SetConfig+0x2d4>)
 8014322:	4293      	cmp	r3, r2
 8014324:	d125      	bne.n	8014372 <UART_SetConfig+0x1aa>
 8014326:	4b5b      	ldr	r3, [pc, #364]	@ (8014494 <UART_SetConfig+0x2cc>)
 8014328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801432c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8014330:	2b30      	cmp	r3, #48	@ 0x30
 8014332:	d016      	beq.n	8014362 <UART_SetConfig+0x19a>
 8014334:	2b30      	cmp	r3, #48	@ 0x30
 8014336:	d818      	bhi.n	801436a <UART_SetConfig+0x1a2>
 8014338:	2b20      	cmp	r3, #32
 801433a:	d00a      	beq.n	8014352 <UART_SetConfig+0x18a>
 801433c:	2b20      	cmp	r3, #32
 801433e:	d814      	bhi.n	801436a <UART_SetConfig+0x1a2>
 8014340:	2b00      	cmp	r3, #0
 8014342:	d002      	beq.n	801434a <UART_SetConfig+0x182>
 8014344:	2b10      	cmp	r3, #16
 8014346:	d008      	beq.n	801435a <UART_SetConfig+0x192>
 8014348:	e00f      	b.n	801436a <UART_SetConfig+0x1a2>
 801434a:	2300      	movs	r3, #0
 801434c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014350:	e0ad      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014352:	2302      	movs	r3, #2
 8014354:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014358:	e0a9      	b.n	80144ae <UART_SetConfig+0x2e6>
 801435a:	2304      	movs	r3, #4
 801435c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014360:	e0a5      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014362:	2308      	movs	r3, #8
 8014364:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014368:	e0a1      	b.n	80144ae <UART_SetConfig+0x2e6>
 801436a:	2310      	movs	r3, #16
 801436c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014370:	e09d      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	4a4a      	ldr	r2, [pc, #296]	@ (80144a0 <UART_SetConfig+0x2d8>)
 8014378:	4293      	cmp	r3, r2
 801437a:	d125      	bne.n	80143c8 <UART_SetConfig+0x200>
 801437c:	4b45      	ldr	r3, [pc, #276]	@ (8014494 <UART_SetConfig+0x2cc>)
 801437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014382:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014386:	2bc0      	cmp	r3, #192	@ 0xc0
 8014388:	d016      	beq.n	80143b8 <UART_SetConfig+0x1f0>
 801438a:	2bc0      	cmp	r3, #192	@ 0xc0
 801438c:	d818      	bhi.n	80143c0 <UART_SetConfig+0x1f8>
 801438e:	2b80      	cmp	r3, #128	@ 0x80
 8014390:	d00a      	beq.n	80143a8 <UART_SetConfig+0x1e0>
 8014392:	2b80      	cmp	r3, #128	@ 0x80
 8014394:	d814      	bhi.n	80143c0 <UART_SetConfig+0x1f8>
 8014396:	2b00      	cmp	r3, #0
 8014398:	d002      	beq.n	80143a0 <UART_SetConfig+0x1d8>
 801439a:	2b40      	cmp	r3, #64	@ 0x40
 801439c:	d008      	beq.n	80143b0 <UART_SetConfig+0x1e8>
 801439e:	e00f      	b.n	80143c0 <UART_SetConfig+0x1f8>
 80143a0:	2300      	movs	r3, #0
 80143a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80143a6:	e082      	b.n	80144ae <UART_SetConfig+0x2e6>
 80143a8:	2302      	movs	r3, #2
 80143aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80143ae:	e07e      	b.n	80144ae <UART_SetConfig+0x2e6>
 80143b0:	2304      	movs	r3, #4
 80143b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80143b6:	e07a      	b.n	80144ae <UART_SetConfig+0x2e6>
 80143b8:	2308      	movs	r3, #8
 80143ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80143be:	e076      	b.n	80144ae <UART_SetConfig+0x2e6>
 80143c0:	2310      	movs	r3, #16
 80143c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80143c6:	e072      	b.n	80144ae <UART_SetConfig+0x2e6>
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	4a35      	ldr	r2, [pc, #212]	@ (80144a4 <UART_SetConfig+0x2dc>)
 80143ce:	4293      	cmp	r3, r2
 80143d0:	d12a      	bne.n	8014428 <UART_SetConfig+0x260>
 80143d2:	4b30      	ldr	r3, [pc, #192]	@ (8014494 <UART_SetConfig+0x2cc>)
 80143d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80143d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80143dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80143e0:	d01a      	beq.n	8014418 <UART_SetConfig+0x250>
 80143e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80143e6:	d81b      	bhi.n	8014420 <UART_SetConfig+0x258>
 80143e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80143ec:	d00c      	beq.n	8014408 <UART_SetConfig+0x240>
 80143ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80143f2:	d815      	bhi.n	8014420 <UART_SetConfig+0x258>
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d003      	beq.n	8014400 <UART_SetConfig+0x238>
 80143f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80143fc:	d008      	beq.n	8014410 <UART_SetConfig+0x248>
 80143fe:	e00f      	b.n	8014420 <UART_SetConfig+0x258>
 8014400:	2300      	movs	r3, #0
 8014402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014406:	e052      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014408:	2302      	movs	r3, #2
 801440a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801440e:	e04e      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014410:	2304      	movs	r3, #4
 8014412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014416:	e04a      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014418:	2308      	movs	r3, #8
 801441a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801441e:	e046      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014420:	2310      	movs	r3, #16
 8014422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014426:	e042      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	4a17      	ldr	r2, [pc, #92]	@ (801448c <UART_SetConfig+0x2c4>)
 801442e:	4293      	cmp	r3, r2
 8014430:	d13a      	bne.n	80144a8 <UART_SetConfig+0x2e0>
 8014432:	4b18      	ldr	r3, [pc, #96]	@ (8014494 <UART_SetConfig+0x2cc>)
 8014434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014438:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801443c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014440:	d01a      	beq.n	8014478 <UART_SetConfig+0x2b0>
 8014442:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014446:	d81b      	bhi.n	8014480 <UART_SetConfig+0x2b8>
 8014448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801444c:	d00c      	beq.n	8014468 <UART_SetConfig+0x2a0>
 801444e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014452:	d815      	bhi.n	8014480 <UART_SetConfig+0x2b8>
 8014454:	2b00      	cmp	r3, #0
 8014456:	d003      	beq.n	8014460 <UART_SetConfig+0x298>
 8014458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801445c:	d008      	beq.n	8014470 <UART_SetConfig+0x2a8>
 801445e:	e00f      	b.n	8014480 <UART_SetConfig+0x2b8>
 8014460:	2300      	movs	r3, #0
 8014462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014466:	e022      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014468:	2302      	movs	r3, #2
 801446a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801446e:	e01e      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014470:	2304      	movs	r3, #4
 8014472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014476:	e01a      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014478:	2308      	movs	r3, #8
 801447a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801447e:	e016      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014480:	2310      	movs	r3, #16
 8014482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014486:	e012      	b.n	80144ae <UART_SetConfig+0x2e6>
 8014488:	efff69f3 	.word	0xefff69f3
 801448c:	40008000 	.word	0x40008000
 8014490:	40013800 	.word	0x40013800
 8014494:	40021000 	.word	0x40021000
 8014498:	40004400 	.word	0x40004400
 801449c:	40004800 	.word	0x40004800
 80144a0:	40004c00 	.word	0x40004c00
 80144a4:	40005000 	.word	0x40005000
 80144a8:	2310      	movs	r3, #16
 80144aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	4a9f      	ldr	r2, [pc, #636]	@ (8014730 <UART_SetConfig+0x568>)
 80144b4:	4293      	cmp	r3, r2
 80144b6:	d17a      	bne.n	80145ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80144b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80144bc:	2b08      	cmp	r3, #8
 80144be:	d824      	bhi.n	801450a <UART_SetConfig+0x342>
 80144c0:	a201      	add	r2, pc, #4	@ (adr r2, 80144c8 <UART_SetConfig+0x300>)
 80144c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144c6:	bf00      	nop
 80144c8:	080144ed 	.word	0x080144ed
 80144cc:	0801450b 	.word	0x0801450b
 80144d0:	080144f5 	.word	0x080144f5
 80144d4:	0801450b 	.word	0x0801450b
 80144d8:	080144fb 	.word	0x080144fb
 80144dc:	0801450b 	.word	0x0801450b
 80144e0:	0801450b 	.word	0x0801450b
 80144e4:	0801450b 	.word	0x0801450b
 80144e8:	08014503 	.word	0x08014503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80144ec:	f7fb f8fe 	bl	800f6ec <HAL_RCC_GetPCLK1Freq>
 80144f0:	61f8      	str	r0, [r7, #28]
        break;
 80144f2:	e010      	b.n	8014516 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80144f4:	4b8f      	ldr	r3, [pc, #572]	@ (8014734 <UART_SetConfig+0x56c>)
 80144f6:	61fb      	str	r3, [r7, #28]
        break;
 80144f8:	e00d      	b.n	8014516 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80144fa:	f7fb f85f 	bl	800f5bc <HAL_RCC_GetSysClockFreq>
 80144fe:	61f8      	str	r0, [r7, #28]
        break;
 8014500:	e009      	b.n	8014516 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014506:	61fb      	str	r3, [r7, #28]
        break;
 8014508:	e005      	b.n	8014516 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 801450a:	2300      	movs	r3, #0
 801450c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801450e:	2301      	movs	r3, #1
 8014510:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8014514:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014516:	69fb      	ldr	r3, [r7, #28]
 8014518:	2b00      	cmp	r3, #0
 801451a:	f000 80fb 	beq.w	8014714 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	685a      	ldr	r2, [r3, #4]
 8014522:	4613      	mov	r3, r2
 8014524:	005b      	lsls	r3, r3, #1
 8014526:	4413      	add	r3, r2
 8014528:	69fa      	ldr	r2, [r7, #28]
 801452a:	429a      	cmp	r2, r3
 801452c:	d305      	bcc.n	801453a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	685b      	ldr	r3, [r3, #4]
 8014532:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014534:	69fa      	ldr	r2, [r7, #28]
 8014536:	429a      	cmp	r2, r3
 8014538:	d903      	bls.n	8014542 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 801453a:	2301      	movs	r3, #1
 801453c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014540:	e0e8      	b.n	8014714 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8014542:	69fb      	ldr	r3, [r7, #28]
 8014544:	2200      	movs	r2, #0
 8014546:	461c      	mov	r4, r3
 8014548:	4615      	mov	r5, r2
 801454a:	f04f 0200 	mov.w	r2, #0
 801454e:	f04f 0300 	mov.w	r3, #0
 8014552:	022b      	lsls	r3, r5, #8
 8014554:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8014558:	0222      	lsls	r2, r4, #8
 801455a:	68f9      	ldr	r1, [r7, #12]
 801455c:	6849      	ldr	r1, [r1, #4]
 801455e:	0849      	lsrs	r1, r1, #1
 8014560:	2000      	movs	r0, #0
 8014562:	4688      	mov	r8, r1
 8014564:	4681      	mov	r9, r0
 8014566:	eb12 0a08 	adds.w	sl, r2, r8
 801456a:	eb43 0b09 	adc.w	fp, r3, r9
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	685b      	ldr	r3, [r3, #4]
 8014572:	2200      	movs	r2, #0
 8014574:	603b      	str	r3, [r7, #0]
 8014576:	607a      	str	r2, [r7, #4]
 8014578:	e9d7 2300 	ldrd	r2, r3, [r7]
 801457c:	4650      	mov	r0, sl
 801457e:	4659      	mov	r1, fp
 8014580:	f7eb fe8e 	bl	80002a0 <__aeabi_uldivmod>
 8014584:	4602      	mov	r2, r0
 8014586:	460b      	mov	r3, r1
 8014588:	4613      	mov	r3, r2
 801458a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801458c:	69bb      	ldr	r3, [r7, #24]
 801458e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014592:	d308      	bcc.n	80145a6 <UART_SetConfig+0x3de>
 8014594:	69bb      	ldr	r3, [r7, #24]
 8014596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801459a:	d204      	bcs.n	80145a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	69ba      	ldr	r2, [r7, #24]
 80145a2:	60da      	str	r2, [r3, #12]
 80145a4:	e0b6      	b.n	8014714 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80145a6:	2301      	movs	r3, #1
 80145a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80145ac:	e0b2      	b.n	8014714 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	69db      	ldr	r3, [r3, #28]
 80145b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80145b6:	d15e      	bne.n	8014676 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80145b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80145bc:	2b08      	cmp	r3, #8
 80145be:	d828      	bhi.n	8014612 <UART_SetConfig+0x44a>
 80145c0:	a201      	add	r2, pc, #4	@ (adr r2, 80145c8 <UART_SetConfig+0x400>)
 80145c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145c6:	bf00      	nop
 80145c8:	080145ed 	.word	0x080145ed
 80145cc:	080145f5 	.word	0x080145f5
 80145d0:	080145fd 	.word	0x080145fd
 80145d4:	08014613 	.word	0x08014613
 80145d8:	08014603 	.word	0x08014603
 80145dc:	08014613 	.word	0x08014613
 80145e0:	08014613 	.word	0x08014613
 80145e4:	08014613 	.word	0x08014613
 80145e8:	0801460b 	.word	0x0801460b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80145ec:	f7fb f87e 	bl	800f6ec <HAL_RCC_GetPCLK1Freq>
 80145f0:	61f8      	str	r0, [r7, #28]
        break;
 80145f2:	e014      	b.n	801461e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80145f4:	f7fb f890 	bl	800f718 <HAL_RCC_GetPCLK2Freq>
 80145f8:	61f8      	str	r0, [r7, #28]
        break;
 80145fa:	e010      	b.n	801461e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80145fc:	4b4d      	ldr	r3, [pc, #308]	@ (8014734 <UART_SetConfig+0x56c>)
 80145fe:	61fb      	str	r3, [r7, #28]
        break;
 8014600:	e00d      	b.n	801461e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014602:	f7fa ffdb 	bl	800f5bc <HAL_RCC_GetSysClockFreq>
 8014606:	61f8      	str	r0, [r7, #28]
        break;
 8014608:	e009      	b.n	801461e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801460a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801460e:	61fb      	str	r3, [r7, #28]
        break;
 8014610:	e005      	b.n	801461e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8014612:	2300      	movs	r3, #0
 8014614:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8014616:	2301      	movs	r3, #1
 8014618:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801461c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801461e:	69fb      	ldr	r3, [r7, #28]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d077      	beq.n	8014714 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8014624:	69fb      	ldr	r3, [r7, #28]
 8014626:	005a      	lsls	r2, r3, #1
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	685b      	ldr	r3, [r3, #4]
 801462c:	085b      	lsrs	r3, r3, #1
 801462e:	441a      	add	r2, r3
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	685b      	ldr	r3, [r3, #4]
 8014634:	fbb2 f3f3 	udiv	r3, r2, r3
 8014638:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801463a:	69bb      	ldr	r3, [r7, #24]
 801463c:	2b0f      	cmp	r3, #15
 801463e:	d916      	bls.n	801466e <UART_SetConfig+0x4a6>
 8014640:	69bb      	ldr	r3, [r7, #24]
 8014642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014646:	d212      	bcs.n	801466e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014648:	69bb      	ldr	r3, [r7, #24]
 801464a:	b29b      	uxth	r3, r3
 801464c:	f023 030f 	bic.w	r3, r3, #15
 8014650:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014652:	69bb      	ldr	r3, [r7, #24]
 8014654:	085b      	lsrs	r3, r3, #1
 8014656:	b29b      	uxth	r3, r3
 8014658:	f003 0307 	and.w	r3, r3, #7
 801465c:	b29a      	uxth	r2, r3
 801465e:	8afb      	ldrh	r3, [r7, #22]
 8014660:	4313      	orrs	r3, r2
 8014662:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	8afa      	ldrh	r2, [r7, #22]
 801466a:	60da      	str	r2, [r3, #12]
 801466c:	e052      	b.n	8014714 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 801466e:	2301      	movs	r3, #1
 8014670:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014674:	e04e      	b.n	8014714 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014676:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801467a:	2b08      	cmp	r3, #8
 801467c:	d827      	bhi.n	80146ce <UART_SetConfig+0x506>
 801467e:	a201      	add	r2, pc, #4	@ (adr r2, 8014684 <UART_SetConfig+0x4bc>)
 8014680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014684:	080146a9 	.word	0x080146a9
 8014688:	080146b1 	.word	0x080146b1
 801468c:	080146b9 	.word	0x080146b9
 8014690:	080146cf 	.word	0x080146cf
 8014694:	080146bf 	.word	0x080146bf
 8014698:	080146cf 	.word	0x080146cf
 801469c:	080146cf 	.word	0x080146cf
 80146a0:	080146cf 	.word	0x080146cf
 80146a4:	080146c7 	.word	0x080146c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80146a8:	f7fb f820 	bl	800f6ec <HAL_RCC_GetPCLK1Freq>
 80146ac:	61f8      	str	r0, [r7, #28]
        break;
 80146ae:	e014      	b.n	80146da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80146b0:	f7fb f832 	bl	800f718 <HAL_RCC_GetPCLK2Freq>
 80146b4:	61f8      	str	r0, [r7, #28]
        break;
 80146b6:	e010      	b.n	80146da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80146b8:	4b1e      	ldr	r3, [pc, #120]	@ (8014734 <UART_SetConfig+0x56c>)
 80146ba:	61fb      	str	r3, [r7, #28]
        break;
 80146bc:	e00d      	b.n	80146da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80146be:	f7fa ff7d 	bl	800f5bc <HAL_RCC_GetSysClockFreq>
 80146c2:	61f8      	str	r0, [r7, #28]
        break;
 80146c4:	e009      	b.n	80146da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80146c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80146ca:	61fb      	str	r3, [r7, #28]
        break;
 80146cc:	e005      	b.n	80146da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80146ce:	2300      	movs	r3, #0
 80146d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80146d2:	2301      	movs	r3, #1
 80146d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80146d8:	bf00      	nop
    }

    if (pclk != 0U)
 80146da:	69fb      	ldr	r3, [r7, #28]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d019      	beq.n	8014714 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	685b      	ldr	r3, [r3, #4]
 80146e4:	085a      	lsrs	r2, r3, #1
 80146e6:	69fb      	ldr	r3, [r7, #28]
 80146e8:	441a      	add	r2, r3
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	685b      	ldr	r3, [r3, #4]
 80146ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80146f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80146f4:	69bb      	ldr	r3, [r7, #24]
 80146f6:	2b0f      	cmp	r3, #15
 80146f8:	d909      	bls.n	801470e <UART_SetConfig+0x546>
 80146fa:	69bb      	ldr	r3, [r7, #24]
 80146fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014700:	d205      	bcs.n	801470e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014702:	69bb      	ldr	r3, [r7, #24]
 8014704:	b29a      	uxth	r2, r3
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	60da      	str	r2, [r3, #12]
 801470c:	e002      	b.n	8014714 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 801470e:	2301      	movs	r3, #1
 8014710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	2200      	movs	r2, #0
 8014718:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	2200      	movs	r2, #0
 801471e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8014720:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8014724:	4618      	mov	r0, r3
 8014726:	3728      	adds	r7, #40	@ 0x28
 8014728:	46bd      	mov	sp, r7
 801472a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801472e:	bf00      	nop
 8014730:	40008000 	.word	0x40008000
 8014734:	00f42400 	.word	0x00f42400

08014738 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014738:	b480      	push	{r7}
 801473a:	b083      	sub	sp, #12
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014744:	f003 0308 	and.w	r3, r3, #8
 8014748:	2b00      	cmp	r3, #0
 801474a:	d00a      	beq.n	8014762 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	685b      	ldr	r3, [r3, #4]
 8014752:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	430a      	orrs	r2, r1
 8014760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014766:	f003 0301 	and.w	r3, r3, #1
 801476a:	2b00      	cmp	r3, #0
 801476c:	d00a      	beq.n	8014784 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	685b      	ldr	r3, [r3, #4]
 8014774:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	430a      	orrs	r2, r1
 8014782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014788:	f003 0302 	and.w	r3, r3, #2
 801478c:	2b00      	cmp	r3, #0
 801478e:	d00a      	beq.n	80147a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	685b      	ldr	r3, [r3, #4]
 8014796:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	430a      	orrs	r2, r1
 80147a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147aa:	f003 0304 	and.w	r3, r3, #4
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d00a      	beq.n	80147c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	685b      	ldr	r3, [r3, #4]
 80147b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	430a      	orrs	r2, r1
 80147c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147cc:	f003 0310 	and.w	r3, r3, #16
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d00a      	beq.n	80147ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	689b      	ldr	r3, [r3, #8]
 80147da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	430a      	orrs	r2, r1
 80147e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147ee:	f003 0320 	and.w	r3, r3, #32
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d00a      	beq.n	801480c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	689b      	ldr	r3, [r3, #8]
 80147fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	430a      	orrs	r2, r1
 801480a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014814:	2b00      	cmp	r3, #0
 8014816:	d01a      	beq.n	801484e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	685b      	ldr	r3, [r3, #4]
 801481e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	430a      	orrs	r2, r1
 801482c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014832:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014836:	d10a      	bne.n	801484e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	685b      	ldr	r3, [r3, #4]
 801483e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	430a      	orrs	r2, r1
 801484c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014856:	2b00      	cmp	r3, #0
 8014858:	d00a      	beq.n	8014870 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	685b      	ldr	r3, [r3, #4]
 8014860:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	430a      	orrs	r2, r1
 801486e:	605a      	str	r2, [r3, #4]
  }
}
 8014870:	bf00      	nop
 8014872:	370c      	adds	r7, #12
 8014874:	46bd      	mov	sp, r7
 8014876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487a:	4770      	bx	lr

0801487c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b098      	sub	sp, #96	@ 0x60
 8014880:	af02      	add	r7, sp, #8
 8014882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	2200      	movs	r2, #0
 8014888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801488c:	f7f5 fd46 	bl	800a31c <HAL_GetTick>
 8014890:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	f003 0308 	and.w	r3, r3, #8
 801489c:	2b08      	cmp	r3, #8
 801489e:	d12e      	bne.n	80148fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80148a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80148a4:	9300      	str	r3, [sp, #0]
 80148a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148a8:	2200      	movs	r2, #0
 80148aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f000 f88c 	bl	80149cc <UART_WaitOnFlagUntilTimeout>
 80148b4:	4603      	mov	r3, r0
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d021      	beq.n	80148fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148c2:	e853 3f00 	ldrex	r3, [r3]
 80148c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80148c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80148ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	461a      	mov	r2, r3
 80148d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80148d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80148da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80148de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80148e0:	e841 2300 	strex	r3, r2, [r1]
 80148e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80148e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d1e6      	bne.n	80148ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2220      	movs	r2, #32
 80148f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	2200      	movs	r2, #0
 80148f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80148fa:	2303      	movs	r3, #3
 80148fc:	e062      	b.n	80149c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	f003 0304 	and.w	r3, r3, #4
 8014908:	2b04      	cmp	r3, #4
 801490a:	d149      	bne.n	80149a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801490c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8014910:	9300      	str	r3, [sp, #0]
 8014912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014914:	2200      	movs	r2, #0
 8014916:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	f000 f856 	bl	80149cc <UART_WaitOnFlagUntilTimeout>
 8014920:	4603      	mov	r3, r0
 8014922:	2b00      	cmp	r3, #0
 8014924:	d03c      	beq.n	80149a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801492e:	e853 3f00 	ldrex	r3, [r3]
 8014932:	623b      	str	r3, [r7, #32]
   return(result);
 8014934:	6a3b      	ldr	r3, [r7, #32]
 8014936:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801493a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	461a      	mov	r2, r3
 8014942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014944:	633b      	str	r3, [r7, #48]	@ 0x30
 8014946:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014948:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801494a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801494c:	e841 2300 	strex	r3, r2, [r1]
 8014950:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014954:	2b00      	cmp	r3, #0
 8014956:	d1e6      	bne.n	8014926 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	3308      	adds	r3, #8
 801495e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014960:	693b      	ldr	r3, [r7, #16]
 8014962:	e853 3f00 	ldrex	r3, [r3]
 8014966:	60fb      	str	r3, [r7, #12]
   return(result);
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	f023 0301 	bic.w	r3, r3, #1
 801496e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	3308      	adds	r3, #8
 8014976:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014978:	61fa      	str	r2, [r7, #28]
 801497a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801497c:	69b9      	ldr	r1, [r7, #24]
 801497e:	69fa      	ldr	r2, [r7, #28]
 8014980:	e841 2300 	strex	r3, r2, [r1]
 8014984:	617b      	str	r3, [r7, #20]
   return(result);
 8014986:	697b      	ldr	r3, [r7, #20]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d1e5      	bne.n	8014958 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2220      	movs	r2, #32
 8014990:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2200      	movs	r2, #0
 8014998:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801499c:	2303      	movs	r3, #3
 801499e:	e011      	b.n	80149c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	2220      	movs	r2, #32
 80149a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	2220      	movs	r2, #32
 80149aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	2200      	movs	r2, #0
 80149b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2200      	movs	r2, #0
 80149b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	2200      	movs	r2, #0
 80149be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80149c2:	2300      	movs	r3, #0
}
 80149c4:	4618      	mov	r0, r3
 80149c6:	3758      	adds	r7, #88	@ 0x58
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}

080149cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b084      	sub	sp, #16
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	60f8      	str	r0, [r7, #12]
 80149d4:	60b9      	str	r1, [r7, #8]
 80149d6:	603b      	str	r3, [r7, #0]
 80149d8:	4613      	mov	r3, r2
 80149da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80149dc:	e04f      	b.n	8014a7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80149de:	69bb      	ldr	r3, [r7, #24]
 80149e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149e4:	d04b      	beq.n	8014a7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80149e6:	f7f5 fc99 	bl	800a31c <HAL_GetTick>
 80149ea:	4602      	mov	r2, r0
 80149ec:	683b      	ldr	r3, [r7, #0]
 80149ee:	1ad3      	subs	r3, r2, r3
 80149f0:	69ba      	ldr	r2, [r7, #24]
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d302      	bcc.n	80149fc <UART_WaitOnFlagUntilTimeout+0x30>
 80149f6:	69bb      	ldr	r3, [r7, #24]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d101      	bne.n	8014a00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80149fc:	2303      	movs	r3, #3
 80149fe:	e04e      	b.n	8014a9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	f003 0304 	and.w	r3, r3, #4
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d037      	beq.n	8014a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	2b80      	cmp	r3, #128	@ 0x80
 8014a12:	d034      	beq.n	8014a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8014a14:	68bb      	ldr	r3, [r7, #8]
 8014a16:	2b40      	cmp	r3, #64	@ 0x40
 8014a18:	d031      	beq.n	8014a7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	69db      	ldr	r3, [r3, #28]
 8014a20:	f003 0308 	and.w	r3, r3, #8
 8014a24:	2b08      	cmp	r3, #8
 8014a26:	d110      	bne.n	8014a4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	2208      	movs	r2, #8
 8014a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014a30:	68f8      	ldr	r0, [r7, #12]
 8014a32:	f000 f8ff 	bl	8014c34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	2208      	movs	r2, #8
 8014a3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	2200      	movs	r2, #0
 8014a42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8014a46:	2301      	movs	r3, #1
 8014a48:	e029      	b.n	8014a9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	69db      	ldr	r3, [r3, #28]
 8014a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014a58:	d111      	bne.n	8014a7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014a64:	68f8      	ldr	r0, [r7, #12]
 8014a66:	f000 f8e5 	bl	8014c34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	2220      	movs	r2, #32
 8014a6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	2200      	movs	r2, #0
 8014a76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8014a7a:	2303      	movs	r3, #3
 8014a7c:	e00f      	b.n	8014a9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	69da      	ldr	r2, [r3, #28]
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	4013      	ands	r3, r2
 8014a88:	68ba      	ldr	r2, [r7, #8]
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	bf0c      	ite	eq
 8014a8e:	2301      	moveq	r3, #1
 8014a90:	2300      	movne	r3, #0
 8014a92:	b2db      	uxtb	r3, r3
 8014a94:	461a      	mov	r2, r3
 8014a96:	79fb      	ldrb	r3, [r7, #7]
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	d0a0      	beq.n	80149de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014a9c:	2300      	movs	r3, #0
}
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	3710      	adds	r7, #16
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	bd80      	pop	{r7, pc}
	...

08014aa8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b096      	sub	sp, #88	@ 0x58
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	60f8      	str	r0, [r7, #12]
 8014ab0:	60b9      	str	r1, [r7, #8]
 8014ab2:	4613      	mov	r3, r2
 8014ab4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	68ba      	ldr	r2, [r7, #8]
 8014aba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	88fa      	ldrh	r2, [r7, #6]
 8014ac0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	2200      	movs	r2, #0
 8014ac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	2222      	movs	r2, #34	@ 0x22
 8014ad0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d028      	beq.n	8014b2e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ae0:	4a3e      	ldr	r2, [pc, #248]	@ (8014bdc <UART_Start_Receive_DMA+0x134>)
 8014ae2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ae8:	4a3d      	ldr	r2, [pc, #244]	@ (8014be0 <UART_Start_Receive_DMA+0x138>)
 8014aea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014af0:	4a3c      	ldr	r2, [pc, #240]	@ (8014be4 <UART_Start_Receive_DMA+0x13c>)
 8014af2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014af8:	2200      	movs	r2, #0
 8014afa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	3324      	adds	r3, #36	@ 0x24
 8014b06:	4619      	mov	r1, r3
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b0c:	461a      	mov	r2, r3
 8014b0e:	88fb      	ldrh	r3, [r7, #6]
 8014b10:	f7f7 fbba 	bl	800c288 <HAL_DMA_Start_IT>
 8014b14:	4603      	mov	r3, r0
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d009      	beq.n	8014b2e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	2210      	movs	r2, #16
 8014b1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	2220      	movs	r2, #32
 8014b26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	e051      	b.n	8014bd2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	691b      	ldr	r3, [r3, #16]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d018      	beq.n	8014b68 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b3e:	e853 3f00 	ldrex	r3, [r3]
 8014b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014b4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	461a      	mov	r2, r3
 8014b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014b56:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b58:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014b5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014b5c:	e841 2300 	strex	r3, r2, [r1]
 8014b60:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8014b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d1e6      	bne.n	8014b36 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	3308      	adds	r3, #8
 8014b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b72:	e853 3f00 	ldrex	r3, [r3]
 8014b76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b7a:	f043 0301 	orr.w	r3, r3, #1
 8014b7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	3308      	adds	r3, #8
 8014b86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014b88:	637a      	str	r2, [r7, #52]	@ 0x34
 8014b8a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014b8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014b90:	e841 2300 	strex	r3, r2, [r1]
 8014b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8014b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d1e5      	bne.n	8014b68 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	3308      	adds	r3, #8
 8014ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ba4:	697b      	ldr	r3, [r7, #20]
 8014ba6:	e853 3f00 	ldrex	r3, [r3]
 8014baa:	613b      	str	r3, [r7, #16]
   return(result);
 8014bac:	693b      	ldr	r3, [r7, #16]
 8014bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	3308      	adds	r3, #8
 8014bba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014bbc:	623a      	str	r2, [r7, #32]
 8014bbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bc0:	69f9      	ldr	r1, [r7, #28]
 8014bc2:	6a3a      	ldr	r2, [r7, #32]
 8014bc4:	e841 2300 	strex	r3, r2, [r1]
 8014bc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8014bca:	69bb      	ldr	r3, [r7, #24]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d1e5      	bne.n	8014b9c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8014bd0:	2300      	movs	r3, #0
}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	3758      	adds	r7, #88	@ 0x58
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}
 8014bda:	bf00      	nop
 8014bdc:	08014db3 	.word	0x08014db3
 8014be0:	08014edf 	.word	0x08014edf
 8014be4:	08014f1d 	.word	0x08014f1d

08014be8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014be8:	b480      	push	{r7}
 8014bea:	b089      	sub	sp, #36	@ 0x24
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	e853 3f00 	ldrex	r3, [r3]
 8014bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8014bfe:	68bb      	ldr	r3, [r7, #8]
 8014c00:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8014c04:	61fb      	str	r3, [r7, #28]
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	461a      	mov	r2, r3
 8014c0c:	69fb      	ldr	r3, [r7, #28]
 8014c0e:	61bb      	str	r3, [r7, #24]
 8014c10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c12:	6979      	ldr	r1, [r7, #20]
 8014c14:	69ba      	ldr	r2, [r7, #24]
 8014c16:	e841 2300 	strex	r3, r2, [r1]
 8014c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8014c1c:	693b      	ldr	r3, [r7, #16]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d1e6      	bne.n	8014bf0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	2220      	movs	r2, #32
 8014c26:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8014c28:	bf00      	nop
 8014c2a:	3724      	adds	r7, #36	@ 0x24
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c32:	4770      	bx	lr

08014c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014c34:	b480      	push	{r7}
 8014c36:	b095      	sub	sp, #84	@ 0x54
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c44:	e853 3f00 	ldrex	r3, [r3]
 8014c48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8014c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8014c50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	461a      	mov	r2, r3
 8014c58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014c5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8014c5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014c60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014c62:	e841 2300 	strex	r3, r2, [r1]
 8014c66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8014c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d1e6      	bne.n	8014c3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	3308      	adds	r3, #8
 8014c74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c76:	6a3b      	ldr	r3, [r7, #32]
 8014c78:	e853 3f00 	ldrex	r3, [r3]
 8014c7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8014c7e:	69fb      	ldr	r3, [r7, #28]
 8014c80:	f023 0301 	bic.w	r3, r3, #1
 8014c84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	3308      	adds	r3, #8
 8014c8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014c90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014c94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014c96:	e841 2300 	strex	r3, r2, [r1]
 8014c9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d1e5      	bne.n	8014c6e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014ca6:	2b01      	cmp	r3, #1
 8014ca8:	d118      	bne.n	8014cdc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	e853 3f00 	ldrex	r3, [r3]
 8014cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8014cb8:	68bb      	ldr	r3, [r7, #8]
 8014cba:	f023 0310 	bic.w	r3, r3, #16
 8014cbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	461a      	mov	r2, r3
 8014cc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014cc8:	61bb      	str	r3, [r7, #24]
 8014cca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ccc:	6979      	ldr	r1, [r7, #20]
 8014cce:	69ba      	ldr	r2, [r7, #24]
 8014cd0:	e841 2300 	strex	r3, r2, [r1]
 8014cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d1e6      	bne.n	8014caa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	2220      	movs	r2, #32
 8014ce0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	2200      	movs	r2, #0
 8014cee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8014cf0:	bf00      	nop
 8014cf2:	3754      	adds	r7, #84	@ 0x54
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfa:	4770      	bx	lr

08014cfc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b090      	sub	sp, #64	@ 0x40
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d08:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	f003 0320 	and.w	r3, r3, #32
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d137      	bne.n	8014d88 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8014d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	3308      	adds	r3, #8
 8014d26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d2a:	e853 3f00 	ldrex	r3, [r3]
 8014d2e:	623b      	str	r3, [r7, #32]
   return(result);
 8014d30:	6a3b      	ldr	r3, [r7, #32]
 8014d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014d36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	3308      	adds	r3, #8
 8014d3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014d40:	633a      	str	r2, [r7, #48]	@ 0x30
 8014d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d48:	e841 2300 	strex	r3, r2, [r1]
 8014d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d1e5      	bne.n	8014d20 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d5a:	693b      	ldr	r3, [r7, #16]
 8014d5c:	e853 3f00 	ldrex	r3, [r3]
 8014d60:	60fb      	str	r3, [r7, #12]
   return(result);
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8014d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	461a      	mov	r2, r3
 8014d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d72:	61fb      	str	r3, [r7, #28]
 8014d74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d76:	69b9      	ldr	r1, [r7, #24]
 8014d78:	69fa      	ldr	r2, [r7, #28]
 8014d7a:	e841 2300 	strex	r3, r2, [r1]
 8014d7e:	617b      	str	r3, [r7, #20]
   return(result);
 8014d80:	697b      	ldr	r3, [r7, #20]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d1e6      	bne.n	8014d54 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014d86:	e002      	b.n	8014d8e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8014d88:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014d8a:	f7ed f9cb 	bl	8002124 <HAL_UART_TxCpltCallback>
}
 8014d8e:	bf00      	nop
 8014d90:	3740      	adds	r7, #64	@ 0x40
 8014d92:	46bd      	mov	sp, r7
 8014d94:	bd80      	pop	{r7, pc}

08014d96 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014d96:	b580      	push	{r7, lr}
 8014d98:	b084      	sub	sp, #16
 8014d9a:	af00      	add	r7, sp, #0
 8014d9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014da2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8014da4:	68f8      	ldr	r0, [r7, #12]
 8014da6:	f7ff f9f1 	bl	801418c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014daa:	bf00      	nop
 8014dac:	3710      	adds	r7, #16
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}

08014db2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014db2:	b580      	push	{r7, lr}
 8014db4:	b09c      	sub	sp, #112	@ 0x70
 8014db6:	af00      	add	r7, sp, #0
 8014db8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	f003 0320 	and.w	r3, r3, #32
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d171      	bne.n	8014eb2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8014dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014dde:	e853 3f00 	ldrex	r3, [r3]
 8014de2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8014de4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014de6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014dea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	461a      	mov	r2, r3
 8014df2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014df4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014df6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014df8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014dfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014dfc:	e841 2300 	strex	r3, r2, [r1]
 8014e00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8014e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d1e6      	bne.n	8014dd6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014e08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	3308      	adds	r3, #8
 8014e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e12:	e853 3f00 	ldrex	r3, [r3]
 8014e16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8014e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e1a:	f023 0301 	bic.w	r3, r3, #1
 8014e1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8014e20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	3308      	adds	r3, #8
 8014e26:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014e28:	647a      	str	r2, [r7, #68]	@ 0x44
 8014e2a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014e2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014e30:	e841 2300 	strex	r3, r2, [r1]
 8014e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8014e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d1e5      	bne.n	8014e08 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	3308      	adds	r3, #8
 8014e42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e46:	e853 3f00 	ldrex	r3, [r3]
 8014e4a:	623b      	str	r3, [r7, #32]
   return(result);
 8014e4c:	6a3b      	ldr	r3, [r7, #32]
 8014e4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014e52:	663b      	str	r3, [r7, #96]	@ 0x60
 8014e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	3308      	adds	r3, #8
 8014e5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014e5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8014e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014e64:	e841 2300 	strex	r3, r2, [r1]
 8014e68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d1e5      	bne.n	8014e3c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014e70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e72:	2220      	movs	r2, #32
 8014e74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014e78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014e7c:	2b01      	cmp	r3, #1
 8014e7e:	d118      	bne.n	8014eb2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e86:	693b      	ldr	r3, [r7, #16]
 8014e88:	e853 3f00 	ldrex	r3, [r3]
 8014e8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	f023 0310 	bic.w	r3, r3, #16
 8014e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	461a      	mov	r2, r3
 8014e9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014e9e:	61fb      	str	r3, [r7, #28]
 8014ea0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ea2:	69b9      	ldr	r1, [r7, #24]
 8014ea4:	69fa      	ldr	r2, [r7, #28]
 8014ea6:	e841 2300 	strex	r3, r2, [r1]
 8014eaa:	617b      	str	r3, [r7, #20]
   return(result);
 8014eac:	697b      	ldr	r3, [r7, #20]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d1e6      	bne.n	8014e80 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014eb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014ebc:	2b01      	cmp	r3, #1
 8014ebe:	d107      	bne.n	8014ed0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014ec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014ec2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8014ec6:	4619      	mov	r1, r3
 8014ec8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8014eca:	f7ed f8a3 	bl	8002014 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014ece:	e002      	b.n	8014ed6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8014ed0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8014ed2:	f7ed f91d 	bl	8002110 <HAL_UART_RxCpltCallback>
}
 8014ed6:	bf00      	nop
 8014ed8:	3770      	adds	r7, #112	@ 0x70
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bd80      	pop	{r7, pc}

08014ede <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014ede:	b580      	push	{r7, lr}
 8014ee0:	b084      	sub	sp, #16
 8014ee2:	af00      	add	r7, sp, #0
 8014ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014eea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	2201      	movs	r2, #1
 8014ef0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d109      	bne.n	8014f0e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8014f00:	085b      	lsrs	r3, r3, #1
 8014f02:	b29b      	uxth	r3, r3
 8014f04:	4619      	mov	r1, r3
 8014f06:	68f8      	ldr	r0, [r7, #12]
 8014f08:	f7ed f884 	bl	8002014 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014f0c:	e002      	b.n	8014f14 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8014f0e:	68f8      	ldr	r0, [r7, #12]
 8014f10:	f7ff f946 	bl	80141a0 <HAL_UART_RxHalfCpltCallback>
}
 8014f14:	bf00      	nop
 8014f16:	3710      	adds	r7, #16
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	bd80      	pop	{r7, pc}

08014f1c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b086      	sub	sp, #24
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f28:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014f2e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014f36:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014f38:	697b      	ldr	r3, [r7, #20]
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	689b      	ldr	r3, [r3, #8]
 8014f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014f42:	2b80      	cmp	r3, #128	@ 0x80
 8014f44:	d109      	bne.n	8014f5a <UART_DMAError+0x3e>
 8014f46:	693b      	ldr	r3, [r7, #16]
 8014f48:	2b21      	cmp	r3, #33	@ 0x21
 8014f4a:	d106      	bne.n	8014f5a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8014f4c:	697b      	ldr	r3, [r7, #20]
 8014f4e:	2200      	movs	r2, #0
 8014f50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8014f54:	6978      	ldr	r0, [r7, #20]
 8014f56:	f7ff fe47 	bl	8014be8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	689b      	ldr	r3, [r3, #8]
 8014f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014f64:	2b40      	cmp	r3, #64	@ 0x40
 8014f66:	d109      	bne.n	8014f7c <UART_DMAError+0x60>
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	2b22      	cmp	r3, #34	@ 0x22
 8014f6c:	d106      	bne.n	8014f7c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8014f6e:	697b      	ldr	r3, [r7, #20]
 8014f70:	2200      	movs	r2, #0
 8014f72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8014f76:	6978      	ldr	r0, [r7, #20]
 8014f78:	f7ff fe5c 	bl	8014c34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014f7c:	697b      	ldr	r3, [r7, #20]
 8014f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014f82:	f043 0210 	orr.w	r2, r3, #16
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014f8c:	6978      	ldr	r0, [r7, #20]
 8014f8e:	f7ff f911 	bl	80141b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014f92:	bf00      	nop
 8014f94:	3718      	adds	r7, #24
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}

08014f9a <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8014f9a:	b580      	push	{r7, lr}
 8014f9c:	b088      	sub	sp, #32
 8014f9e:	af00      	add	r7, sp, #0
 8014fa0:	60f8      	str	r0, [r7, #12]
 8014fa2:	60b9      	str	r1, [r7, #8]
 8014fa4:	603b      	str	r3, [r7, #0]
 8014fa6:	4613      	mov	r3, r2
 8014fa8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014fb0:	2b20      	cmp	r3, #32
 8014fb2:	f040 80f0 	bne.w	8015196 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 8014fb6:	68bb      	ldr	r3, [r7, #8]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d002      	beq.n	8014fc2 <HAL_UARTEx_ReceiveToIdle+0x28>
 8014fbc:	88fb      	ldrh	r3, [r7, #6]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d101      	bne.n	8014fc6 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 8014fc2:	2301      	movs	r3, #1
 8014fc4:	e0e8      	b.n	8015198 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	2200      	movs	r2, #0
 8014fca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	2222      	movs	r2, #34	@ 0x22
 8014fd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	2201      	movs	r2, #1
 8014fda:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	2200      	movs	r2, #0
 8014fe0:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014fe2:	f7f5 f99b 	bl	800a31c <HAL_GetTick>
 8014fe6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	88fa      	ldrh	r2, [r7, #6]
 8014fec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	88fa      	ldrh	r2, [r7, #6]
 8014ff4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	689b      	ldr	r3, [r3, #8]
 8014ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015000:	d10e      	bne.n	8015020 <HAL_UARTEx_ReceiveToIdle+0x86>
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	691b      	ldr	r3, [r3, #16]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d105      	bne.n	8015016 <HAL_UARTEx_ReceiveToIdle+0x7c>
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8015010:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015014:	e02d      	b.n	8015072 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	22ff      	movs	r2, #255	@ 0xff
 801501a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801501e:	e028      	b.n	8015072 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	689b      	ldr	r3, [r3, #8]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d10d      	bne.n	8015044 <HAL_UARTEx_ReceiveToIdle+0xaa>
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	691b      	ldr	r3, [r3, #16]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d104      	bne.n	801503a <HAL_UARTEx_ReceiveToIdle+0xa0>
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	22ff      	movs	r2, #255	@ 0xff
 8015034:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015038:	e01b      	b.n	8015072 <HAL_UARTEx_ReceiveToIdle+0xd8>
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	227f      	movs	r2, #127	@ 0x7f
 801503e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015042:	e016      	b.n	8015072 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	689b      	ldr	r3, [r3, #8]
 8015048:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801504c:	d10d      	bne.n	801506a <HAL_UARTEx_ReceiveToIdle+0xd0>
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	691b      	ldr	r3, [r3, #16]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d104      	bne.n	8015060 <HAL_UARTEx_ReceiveToIdle+0xc6>
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	227f      	movs	r2, #127	@ 0x7f
 801505a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 801505e:	e008      	b.n	8015072 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	223f      	movs	r2, #63	@ 0x3f
 8015064:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015068:	e003      	b.n	8015072 <HAL_UARTEx_ReceiveToIdle+0xd8>
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	2200      	movs	r2, #0
 801506e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8015078:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	689b      	ldr	r3, [r3, #8]
 801507e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015082:	d108      	bne.n	8015096 <HAL_UARTEx_ReceiveToIdle+0xfc>
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	691b      	ldr	r3, [r3, #16]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d104      	bne.n	8015096 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 801508c:	2300      	movs	r3, #0
 801508e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015090:	68bb      	ldr	r3, [r7, #8]
 8015092:	61bb      	str	r3, [r7, #24]
 8015094:	e003      	b.n	801509e <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 8015096:	68bb      	ldr	r3, [r7, #8]
 8015098:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801509a:	2300      	movs	r3, #0
 801509c:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 801509e:	683b      	ldr	r3, [r7, #0]
 80150a0:	2200      	movs	r2, #0
 80150a2:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80150a4:	e060      	b.n	8015168 <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	69db      	ldr	r3, [r3, #28]
 80150ac:	f003 0310 	and.w	r3, r3, #16
 80150b0:	2b10      	cmp	r3, #16
 80150b2:	d110      	bne.n	80150d6 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	2210      	movs	r2, #16
 80150ba:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 80150bc:	683b      	ldr	r3, [r7, #0]
 80150be:	881b      	ldrh	r3, [r3, #0]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d008      	beq.n	80150d6 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	2202      	movs	r2, #2
 80150c8:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	2220      	movs	r2, #32
 80150ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 80150d2:	2300      	movs	r3, #0
 80150d4:	e060      	b.n	8015198 <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	69db      	ldr	r3, [r3, #28]
 80150dc:	f003 0320 	and.w	r3, r3, #32
 80150e0:	2b20      	cmp	r3, #32
 80150e2:	d12c      	bne.n	801513e <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 80150e4:	69fb      	ldr	r3, [r7, #28]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d10c      	bne.n	8015104 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80150f0:	b29a      	uxth	r2, r3
 80150f2:	8a7b      	ldrh	r3, [r7, #18]
 80150f4:	4013      	ands	r3, r2
 80150f6:	b29a      	uxth	r2, r3
 80150f8:	69bb      	ldr	r3, [r7, #24]
 80150fa:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80150fc:	69bb      	ldr	r3, [r7, #24]
 80150fe:	3302      	adds	r3, #2
 8015100:	61bb      	str	r3, [r7, #24]
 8015102:	e00d      	b.n	8015120 <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801510a:	b29b      	uxth	r3, r3
 801510c:	b2da      	uxtb	r2, r3
 801510e:	8a7b      	ldrh	r3, [r7, #18]
 8015110:	b2db      	uxtb	r3, r3
 8015112:	4013      	ands	r3, r2
 8015114:	b2da      	uxtb	r2, r3
 8015116:	69fb      	ldr	r3, [r7, #28]
 8015118:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 801511a:	69fb      	ldr	r3, [r7, #28]
 801511c:	3301      	adds	r3, #1
 801511e:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8015120:	683b      	ldr	r3, [r7, #0]
 8015122:	881b      	ldrh	r3, [r3, #0]
 8015124:	3301      	adds	r3, #1
 8015126:	b29a      	uxth	r2, r3
 8015128:	683b      	ldr	r3, [r7, #0]
 801512a:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015132:	b29b      	uxth	r3, r3
 8015134:	3b01      	subs	r3, #1
 8015136:	b29a      	uxth	r2, r3
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801513e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015144:	d010      	beq.n	8015168 <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015146:	f7f5 f8e9 	bl	800a31c <HAL_GetTick>
 801514a:	4602      	mov	r2, r0
 801514c:	697b      	ldr	r3, [r7, #20]
 801514e:	1ad3      	subs	r3, r2, r3
 8015150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015152:	429a      	cmp	r2, r3
 8015154:	d302      	bcc.n	801515c <HAL_UARTEx_ReceiveToIdle+0x1c2>
 8015156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015158:	2b00      	cmp	r3, #0
 801515a:	d105      	bne.n	8015168 <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	2220      	movs	r2, #32
 8015160:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8015164:	2303      	movs	r3, #3
 8015166:	e017      	b.n	8015198 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801516e:	b29b      	uxth	r3, r3
 8015170:	2b00      	cmp	r3, #0
 8015172:	d198      	bne.n	80150a6 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015180:	b29b      	uxth	r3, r3
 8015182:	1ad3      	subs	r3, r2, r3
 8015184:	b29a      	uxth	r2, r3
 8015186:	683b      	ldr	r3, [r7, #0]
 8015188:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	2220      	movs	r2, #32
 801518e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8015192:	2300      	movs	r3, #0
 8015194:	e000      	b.n	8015198 <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8015196:	2302      	movs	r3, #2
  }
}
 8015198:	4618      	mov	r0, r3
 801519a:	3720      	adds	r7, #32
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}

080151a0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b08c      	sub	sp, #48	@ 0x30
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	60f8      	str	r0, [r7, #12]
 80151a8:	60b9      	str	r1, [r7, #8]
 80151aa:	4613      	mov	r3, r2
 80151ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80151b4:	2b20      	cmp	r3, #32
 80151b6:	d142      	bne.n	801523e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80151b8:	68bb      	ldr	r3, [r7, #8]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d002      	beq.n	80151c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80151be:	88fb      	ldrh	r3, [r7, #6]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d101      	bne.n	80151c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80151c4:	2301      	movs	r3, #1
 80151c6:	e03b      	b.n	8015240 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	2201      	movs	r2, #1
 80151cc:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	2200      	movs	r2, #0
 80151d2:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80151d4:	88fb      	ldrh	r3, [r7, #6]
 80151d6:	461a      	mov	r2, r3
 80151d8:	68b9      	ldr	r1, [r7, #8]
 80151da:	68f8      	ldr	r0, [r7, #12]
 80151dc:	f7ff fc64 	bl	8014aa8 <UART_Start_Receive_DMA>
 80151e0:	4603      	mov	r3, r0
 80151e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80151e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d124      	bne.n	8015238 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80151f2:	2b01      	cmp	r3, #1
 80151f4:	d11d      	bne.n	8015232 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	2210      	movs	r2, #16
 80151fc:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015204:	69bb      	ldr	r3, [r7, #24]
 8015206:	e853 3f00 	ldrex	r3, [r3]
 801520a:	617b      	str	r3, [r7, #20]
   return(result);
 801520c:	697b      	ldr	r3, [r7, #20]
 801520e:	f043 0310 	orr.w	r3, r3, #16
 8015212:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	461a      	mov	r2, r3
 801521a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801521c:	627b      	str	r3, [r7, #36]	@ 0x24
 801521e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015220:	6a39      	ldr	r1, [r7, #32]
 8015222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015224:	e841 2300 	strex	r3, r2, [r1]
 8015228:	61fb      	str	r3, [r7, #28]
   return(result);
 801522a:	69fb      	ldr	r3, [r7, #28]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d1e6      	bne.n	80151fe <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8015230:	e002      	b.n	8015238 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8015232:	2301      	movs	r3, #1
 8015234:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8015238:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801523c:	e000      	b.n	8015240 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801523e:	2302      	movs	r3, #2
  }
}
 8015240:	4618      	mov	r0, r3
 8015242:	3730      	adds	r7, #48	@ 0x30
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}

08015248 <atoi>:
 8015248:	220a      	movs	r2, #10
 801524a:	2100      	movs	r1, #0
 801524c:	f000 b87c 	b.w	8015348 <strtol>

08015250 <_strtol_l.isra.0>:
 8015250:	2b24      	cmp	r3, #36	@ 0x24
 8015252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015256:	4686      	mov	lr, r0
 8015258:	4690      	mov	r8, r2
 801525a:	d801      	bhi.n	8015260 <_strtol_l.isra.0+0x10>
 801525c:	2b01      	cmp	r3, #1
 801525e:	d106      	bne.n	801526e <_strtol_l.isra.0+0x1e>
 8015260:	f000 f92c 	bl	80154bc <__errno>
 8015264:	2316      	movs	r3, #22
 8015266:	6003      	str	r3, [r0, #0]
 8015268:	2000      	movs	r0, #0
 801526a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801526e:	4834      	ldr	r0, [pc, #208]	@ (8015340 <_strtol_l.isra.0+0xf0>)
 8015270:	460d      	mov	r5, r1
 8015272:	462a      	mov	r2, r5
 8015274:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015278:	5d06      	ldrb	r6, [r0, r4]
 801527a:	f016 0608 	ands.w	r6, r6, #8
 801527e:	d1f8      	bne.n	8015272 <_strtol_l.isra.0+0x22>
 8015280:	2c2d      	cmp	r4, #45	@ 0x2d
 8015282:	d110      	bne.n	80152a6 <_strtol_l.isra.0+0x56>
 8015284:	782c      	ldrb	r4, [r5, #0]
 8015286:	2601      	movs	r6, #1
 8015288:	1c95      	adds	r5, r2, #2
 801528a:	f033 0210 	bics.w	r2, r3, #16
 801528e:	d115      	bne.n	80152bc <_strtol_l.isra.0+0x6c>
 8015290:	2c30      	cmp	r4, #48	@ 0x30
 8015292:	d10d      	bne.n	80152b0 <_strtol_l.isra.0+0x60>
 8015294:	782a      	ldrb	r2, [r5, #0]
 8015296:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801529a:	2a58      	cmp	r2, #88	@ 0x58
 801529c:	d108      	bne.n	80152b0 <_strtol_l.isra.0+0x60>
 801529e:	786c      	ldrb	r4, [r5, #1]
 80152a0:	3502      	adds	r5, #2
 80152a2:	2310      	movs	r3, #16
 80152a4:	e00a      	b.n	80152bc <_strtol_l.isra.0+0x6c>
 80152a6:	2c2b      	cmp	r4, #43	@ 0x2b
 80152a8:	bf04      	itt	eq
 80152aa:	782c      	ldrbeq	r4, [r5, #0]
 80152ac:	1c95      	addeq	r5, r2, #2
 80152ae:	e7ec      	b.n	801528a <_strtol_l.isra.0+0x3a>
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d1f6      	bne.n	80152a2 <_strtol_l.isra.0+0x52>
 80152b4:	2c30      	cmp	r4, #48	@ 0x30
 80152b6:	bf14      	ite	ne
 80152b8:	230a      	movne	r3, #10
 80152ba:	2308      	moveq	r3, #8
 80152bc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80152c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80152c4:	2200      	movs	r2, #0
 80152c6:	fbbc f9f3 	udiv	r9, ip, r3
 80152ca:	4610      	mov	r0, r2
 80152cc:	fb03 ca19 	mls	sl, r3, r9, ip
 80152d0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80152d4:	2f09      	cmp	r7, #9
 80152d6:	d80f      	bhi.n	80152f8 <_strtol_l.isra.0+0xa8>
 80152d8:	463c      	mov	r4, r7
 80152da:	42a3      	cmp	r3, r4
 80152dc:	dd1b      	ble.n	8015316 <_strtol_l.isra.0+0xc6>
 80152de:	1c57      	adds	r7, r2, #1
 80152e0:	d007      	beq.n	80152f2 <_strtol_l.isra.0+0xa2>
 80152e2:	4581      	cmp	r9, r0
 80152e4:	d314      	bcc.n	8015310 <_strtol_l.isra.0+0xc0>
 80152e6:	d101      	bne.n	80152ec <_strtol_l.isra.0+0x9c>
 80152e8:	45a2      	cmp	sl, r4
 80152ea:	db11      	blt.n	8015310 <_strtol_l.isra.0+0xc0>
 80152ec:	fb00 4003 	mla	r0, r0, r3, r4
 80152f0:	2201      	movs	r2, #1
 80152f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80152f6:	e7eb      	b.n	80152d0 <_strtol_l.isra.0+0x80>
 80152f8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80152fc:	2f19      	cmp	r7, #25
 80152fe:	d801      	bhi.n	8015304 <_strtol_l.isra.0+0xb4>
 8015300:	3c37      	subs	r4, #55	@ 0x37
 8015302:	e7ea      	b.n	80152da <_strtol_l.isra.0+0x8a>
 8015304:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8015308:	2f19      	cmp	r7, #25
 801530a:	d804      	bhi.n	8015316 <_strtol_l.isra.0+0xc6>
 801530c:	3c57      	subs	r4, #87	@ 0x57
 801530e:	e7e4      	b.n	80152da <_strtol_l.isra.0+0x8a>
 8015310:	f04f 32ff 	mov.w	r2, #4294967295
 8015314:	e7ed      	b.n	80152f2 <_strtol_l.isra.0+0xa2>
 8015316:	1c53      	adds	r3, r2, #1
 8015318:	d108      	bne.n	801532c <_strtol_l.isra.0+0xdc>
 801531a:	2322      	movs	r3, #34	@ 0x22
 801531c:	f8ce 3000 	str.w	r3, [lr]
 8015320:	4660      	mov	r0, ip
 8015322:	f1b8 0f00 	cmp.w	r8, #0
 8015326:	d0a0      	beq.n	801526a <_strtol_l.isra.0+0x1a>
 8015328:	1e69      	subs	r1, r5, #1
 801532a:	e006      	b.n	801533a <_strtol_l.isra.0+0xea>
 801532c:	b106      	cbz	r6, 8015330 <_strtol_l.isra.0+0xe0>
 801532e:	4240      	negs	r0, r0
 8015330:	f1b8 0f00 	cmp.w	r8, #0
 8015334:	d099      	beq.n	801526a <_strtol_l.isra.0+0x1a>
 8015336:	2a00      	cmp	r2, #0
 8015338:	d1f6      	bne.n	8015328 <_strtol_l.isra.0+0xd8>
 801533a:	f8c8 1000 	str.w	r1, [r8]
 801533e:	e794      	b.n	801526a <_strtol_l.isra.0+0x1a>
 8015340:	08016c1b 	.word	0x08016c1b

08015344 <_strtol_r>:
 8015344:	f7ff bf84 	b.w	8015250 <_strtol_l.isra.0>

08015348 <strtol>:
 8015348:	4613      	mov	r3, r2
 801534a:	460a      	mov	r2, r1
 801534c:	4601      	mov	r1, r0
 801534e:	4802      	ldr	r0, [pc, #8]	@ (8015358 <strtol+0x10>)
 8015350:	6800      	ldr	r0, [r0, #0]
 8015352:	f7ff bf7d 	b.w	8015250 <_strtol_l.isra.0>
 8015356:	bf00      	nop
 8015358:	2000019c 	.word	0x2000019c

0801535c <siprintf>:
 801535c:	b40e      	push	{r1, r2, r3}
 801535e:	b510      	push	{r4, lr}
 8015360:	b09d      	sub	sp, #116	@ 0x74
 8015362:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015364:	9002      	str	r0, [sp, #8]
 8015366:	9006      	str	r0, [sp, #24]
 8015368:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801536c:	480a      	ldr	r0, [pc, #40]	@ (8015398 <siprintf+0x3c>)
 801536e:	9107      	str	r1, [sp, #28]
 8015370:	9104      	str	r1, [sp, #16]
 8015372:	490a      	ldr	r1, [pc, #40]	@ (801539c <siprintf+0x40>)
 8015374:	f853 2b04 	ldr.w	r2, [r3], #4
 8015378:	9105      	str	r1, [sp, #20]
 801537a:	2400      	movs	r4, #0
 801537c:	a902      	add	r1, sp, #8
 801537e:	6800      	ldr	r0, [r0, #0]
 8015380:	9301      	str	r3, [sp, #4]
 8015382:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015384:	f000 fa30 	bl	80157e8 <_svfiprintf_r>
 8015388:	9b02      	ldr	r3, [sp, #8]
 801538a:	701c      	strb	r4, [r3, #0]
 801538c:	b01d      	add	sp, #116	@ 0x74
 801538e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015392:	b003      	add	sp, #12
 8015394:	4770      	bx	lr
 8015396:	bf00      	nop
 8015398:	2000019c 	.word	0x2000019c
 801539c:	ffff0208 	.word	0xffff0208

080153a0 <siscanf>:
 80153a0:	b40e      	push	{r1, r2, r3}
 80153a2:	b570      	push	{r4, r5, r6, lr}
 80153a4:	b09d      	sub	sp, #116	@ 0x74
 80153a6:	ac21      	add	r4, sp, #132	@ 0x84
 80153a8:	2500      	movs	r5, #0
 80153aa:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80153ae:	f854 6b04 	ldr.w	r6, [r4], #4
 80153b2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80153b6:	951b      	str	r5, [sp, #108]	@ 0x6c
 80153b8:	9002      	str	r0, [sp, #8]
 80153ba:	9006      	str	r0, [sp, #24]
 80153bc:	f7ea ff12 	bl	80001e4 <strlen>
 80153c0:	4b0b      	ldr	r3, [pc, #44]	@ (80153f0 <siscanf+0x50>)
 80153c2:	9003      	str	r0, [sp, #12]
 80153c4:	9007      	str	r0, [sp, #28]
 80153c6:	480b      	ldr	r0, [pc, #44]	@ (80153f4 <siscanf+0x54>)
 80153c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80153ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80153ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 80153d2:	4632      	mov	r2, r6
 80153d4:	4623      	mov	r3, r4
 80153d6:	a902      	add	r1, sp, #8
 80153d8:	6800      	ldr	r0, [r0, #0]
 80153da:	950f      	str	r5, [sp, #60]	@ 0x3c
 80153dc:	9514      	str	r5, [sp, #80]	@ 0x50
 80153de:	9401      	str	r4, [sp, #4]
 80153e0:	f000 fb58 	bl	8015a94 <__ssvfiscanf_r>
 80153e4:	b01d      	add	sp, #116	@ 0x74
 80153e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80153ea:	b003      	add	sp, #12
 80153ec:	4770      	bx	lr
 80153ee:	bf00      	nop
 80153f0:	080153f9 	.word	0x080153f9
 80153f4:	2000019c 	.word	0x2000019c

080153f8 <__seofread>:
 80153f8:	2000      	movs	r0, #0
 80153fa:	4770      	bx	lr

080153fc <memcmp>:
 80153fc:	b510      	push	{r4, lr}
 80153fe:	3901      	subs	r1, #1
 8015400:	4402      	add	r2, r0
 8015402:	4290      	cmp	r0, r2
 8015404:	d101      	bne.n	801540a <memcmp+0xe>
 8015406:	2000      	movs	r0, #0
 8015408:	e005      	b.n	8015416 <memcmp+0x1a>
 801540a:	7803      	ldrb	r3, [r0, #0]
 801540c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015410:	42a3      	cmp	r3, r4
 8015412:	d001      	beq.n	8015418 <memcmp+0x1c>
 8015414:	1b18      	subs	r0, r3, r4
 8015416:	bd10      	pop	{r4, pc}
 8015418:	3001      	adds	r0, #1
 801541a:	e7f2      	b.n	8015402 <memcmp+0x6>

0801541c <memset>:
 801541c:	4402      	add	r2, r0
 801541e:	4603      	mov	r3, r0
 8015420:	4293      	cmp	r3, r2
 8015422:	d100      	bne.n	8015426 <memset+0xa>
 8015424:	4770      	bx	lr
 8015426:	f803 1b01 	strb.w	r1, [r3], #1
 801542a:	e7f9      	b.n	8015420 <memset+0x4>

0801542c <strchr>:
 801542c:	b2c9      	uxtb	r1, r1
 801542e:	4603      	mov	r3, r0
 8015430:	4618      	mov	r0, r3
 8015432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015436:	b112      	cbz	r2, 801543e <strchr+0x12>
 8015438:	428a      	cmp	r2, r1
 801543a:	d1f9      	bne.n	8015430 <strchr+0x4>
 801543c:	4770      	bx	lr
 801543e:	2900      	cmp	r1, #0
 8015440:	bf18      	it	ne
 8015442:	2000      	movne	r0, #0
 8015444:	4770      	bx	lr

08015446 <strncmp>:
 8015446:	b510      	push	{r4, lr}
 8015448:	b16a      	cbz	r2, 8015466 <strncmp+0x20>
 801544a:	3901      	subs	r1, #1
 801544c:	1884      	adds	r4, r0, r2
 801544e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015452:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015456:	429a      	cmp	r2, r3
 8015458:	d103      	bne.n	8015462 <strncmp+0x1c>
 801545a:	42a0      	cmp	r0, r4
 801545c:	d001      	beq.n	8015462 <strncmp+0x1c>
 801545e:	2a00      	cmp	r2, #0
 8015460:	d1f5      	bne.n	801544e <strncmp+0x8>
 8015462:	1ad0      	subs	r0, r2, r3
 8015464:	bd10      	pop	{r4, pc}
 8015466:	4610      	mov	r0, r2
 8015468:	e7fc      	b.n	8015464 <strncmp+0x1e>

0801546a <strncpy>:
 801546a:	b510      	push	{r4, lr}
 801546c:	3901      	subs	r1, #1
 801546e:	4603      	mov	r3, r0
 8015470:	b132      	cbz	r2, 8015480 <strncpy+0x16>
 8015472:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015476:	f803 4b01 	strb.w	r4, [r3], #1
 801547a:	3a01      	subs	r2, #1
 801547c:	2c00      	cmp	r4, #0
 801547e:	d1f7      	bne.n	8015470 <strncpy+0x6>
 8015480:	441a      	add	r2, r3
 8015482:	2100      	movs	r1, #0
 8015484:	4293      	cmp	r3, r2
 8015486:	d100      	bne.n	801548a <strncpy+0x20>
 8015488:	bd10      	pop	{r4, pc}
 801548a:	f803 1b01 	strb.w	r1, [r3], #1
 801548e:	e7f9      	b.n	8015484 <strncpy+0x1a>

08015490 <strstr>:
 8015490:	780a      	ldrb	r2, [r1, #0]
 8015492:	b570      	push	{r4, r5, r6, lr}
 8015494:	b96a      	cbnz	r2, 80154b2 <strstr+0x22>
 8015496:	bd70      	pop	{r4, r5, r6, pc}
 8015498:	429a      	cmp	r2, r3
 801549a:	d109      	bne.n	80154b0 <strstr+0x20>
 801549c:	460c      	mov	r4, r1
 801549e:	4605      	mov	r5, r0
 80154a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d0f6      	beq.n	8015496 <strstr+0x6>
 80154a8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80154ac:	429e      	cmp	r6, r3
 80154ae:	d0f7      	beq.n	80154a0 <strstr+0x10>
 80154b0:	3001      	adds	r0, #1
 80154b2:	7803      	ldrb	r3, [r0, #0]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d1ef      	bne.n	8015498 <strstr+0x8>
 80154b8:	4618      	mov	r0, r3
 80154ba:	e7ec      	b.n	8015496 <strstr+0x6>

080154bc <__errno>:
 80154bc:	4b01      	ldr	r3, [pc, #4]	@ (80154c4 <__errno+0x8>)
 80154be:	6818      	ldr	r0, [r3, #0]
 80154c0:	4770      	bx	lr
 80154c2:	bf00      	nop
 80154c4:	2000019c 	.word	0x2000019c

080154c8 <__libc_init_array>:
 80154c8:	b570      	push	{r4, r5, r6, lr}
 80154ca:	4d0d      	ldr	r5, [pc, #52]	@ (8015500 <__libc_init_array+0x38>)
 80154cc:	4c0d      	ldr	r4, [pc, #52]	@ (8015504 <__libc_init_array+0x3c>)
 80154ce:	1b64      	subs	r4, r4, r5
 80154d0:	10a4      	asrs	r4, r4, #2
 80154d2:	2600      	movs	r6, #0
 80154d4:	42a6      	cmp	r6, r4
 80154d6:	d109      	bne.n	80154ec <__libc_init_array+0x24>
 80154d8:	4d0b      	ldr	r5, [pc, #44]	@ (8015508 <__libc_init_array+0x40>)
 80154da:	4c0c      	ldr	r4, [pc, #48]	@ (801550c <__libc_init_array+0x44>)
 80154dc:	f001 f86e 	bl	80165bc <_init>
 80154e0:	1b64      	subs	r4, r4, r5
 80154e2:	10a4      	asrs	r4, r4, #2
 80154e4:	2600      	movs	r6, #0
 80154e6:	42a6      	cmp	r6, r4
 80154e8:	d105      	bne.n	80154f6 <__libc_init_array+0x2e>
 80154ea:	bd70      	pop	{r4, r5, r6, pc}
 80154ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80154f0:	4798      	blx	r3
 80154f2:	3601      	adds	r6, #1
 80154f4:	e7ee      	b.n	80154d4 <__libc_init_array+0xc>
 80154f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80154fa:	4798      	blx	r3
 80154fc:	3601      	adds	r6, #1
 80154fe:	e7f2      	b.n	80154e6 <__libc_init_array+0x1e>
 8015500:	08016d74 	.word	0x08016d74
 8015504:	08016d74 	.word	0x08016d74
 8015508:	08016d74 	.word	0x08016d74
 801550c:	08016d78 	.word	0x08016d78

08015510 <__retarget_lock_acquire_recursive>:
 8015510:	4770      	bx	lr

08015512 <__retarget_lock_release_recursive>:
 8015512:	4770      	bx	lr

08015514 <strcpy>:
 8015514:	4603      	mov	r3, r0
 8015516:	f811 2b01 	ldrb.w	r2, [r1], #1
 801551a:	f803 2b01 	strb.w	r2, [r3], #1
 801551e:	2a00      	cmp	r2, #0
 8015520:	d1f9      	bne.n	8015516 <strcpy+0x2>
 8015522:	4770      	bx	lr

08015524 <memcpy>:
 8015524:	440a      	add	r2, r1
 8015526:	4291      	cmp	r1, r2
 8015528:	f100 33ff 	add.w	r3, r0, #4294967295
 801552c:	d100      	bne.n	8015530 <memcpy+0xc>
 801552e:	4770      	bx	lr
 8015530:	b510      	push	{r4, lr}
 8015532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015536:	f803 4f01 	strb.w	r4, [r3, #1]!
 801553a:	4291      	cmp	r1, r2
 801553c:	d1f9      	bne.n	8015532 <memcpy+0xe>
 801553e:	bd10      	pop	{r4, pc}

08015540 <_free_r>:
 8015540:	b538      	push	{r3, r4, r5, lr}
 8015542:	4605      	mov	r5, r0
 8015544:	2900      	cmp	r1, #0
 8015546:	d041      	beq.n	80155cc <_free_r+0x8c>
 8015548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801554c:	1f0c      	subs	r4, r1, #4
 801554e:	2b00      	cmp	r3, #0
 8015550:	bfb8      	it	lt
 8015552:	18e4      	addlt	r4, r4, r3
 8015554:	f000 f8e0 	bl	8015718 <__malloc_lock>
 8015558:	4a1d      	ldr	r2, [pc, #116]	@ (80155d0 <_free_r+0x90>)
 801555a:	6813      	ldr	r3, [r2, #0]
 801555c:	b933      	cbnz	r3, 801556c <_free_r+0x2c>
 801555e:	6063      	str	r3, [r4, #4]
 8015560:	6014      	str	r4, [r2, #0]
 8015562:	4628      	mov	r0, r5
 8015564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015568:	f000 b8dc 	b.w	8015724 <__malloc_unlock>
 801556c:	42a3      	cmp	r3, r4
 801556e:	d908      	bls.n	8015582 <_free_r+0x42>
 8015570:	6820      	ldr	r0, [r4, #0]
 8015572:	1821      	adds	r1, r4, r0
 8015574:	428b      	cmp	r3, r1
 8015576:	bf01      	itttt	eq
 8015578:	6819      	ldreq	r1, [r3, #0]
 801557a:	685b      	ldreq	r3, [r3, #4]
 801557c:	1809      	addeq	r1, r1, r0
 801557e:	6021      	streq	r1, [r4, #0]
 8015580:	e7ed      	b.n	801555e <_free_r+0x1e>
 8015582:	461a      	mov	r2, r3
 8015584:	685b      	ldr	r3, [r3, #4]
 8015586:	b10b      	cbz	r3, 801558c <_free_r+0x4c>
 8015588:	42a3      	cmp	r3, r4
 801558a:	d9fa      	bls.n	8015582 <_free_r+0x42>
 801558c:	6811      	ldr	r1, [r2, #0]
 801558e:	1850      	adds	r0, r2, r1
 8015590:	42a0      	cmp	r0, r4
 8015592:	d10b      	bne.n	80155ac <_free_r+0x6c>
 8015594:	6820      	ldr	r0, [r4, #0]
 8015596:	4401      	add	r1, r0
 8015598:	1850      	adds	r0, r2, r1
 801559a:	4283      	cmp	r3, r0
 801559c:	6011      	str	r1, [r2, #0]
 801559e:	d1e0      	bne.n	8015562 <_free_r+0x22>
 80155a0:	6818      	ldr	r0, [r3, #0]
 80155a2:	685b      	ldr	r3, [r3, #4]
 80155a4:	6053      	str	r3, [r2, #4]
 80155a6:	4408      	add	r0, r1
 80155a8:	6010      	str	r0, [r2, #0]
 80155aa:	e7da      	b.n	8015562 <_free_r+0x22>
 80155ac:	d902      	bls.n	80155b4 <_free_r+0x74>
 80155ae:	230c      	movs	r3, #12
 80155b0:	602b      	str	r3, [r5, #0]
 80155b2:	e7d6      	b.n	8015562 <_free_r+0x22>
 80155b4:	6820      	ldr	r0, [r4, #0]
 80155b6:	1821      	adds	r1, r4, r0
 80155b8:	428b      	cmp	r3, r1
 80155ba:	bf04      	itt	eq
 80155bc:	6819      	ldreq	r1, [r3, #0]
 80155be:	685b      	ldreq	r3, [r3, #4]
 80155c0:	6063      	str	r3, [r4, #4]
 80155c2:	bf04      	itt	eq
 80155c4:	1809      	addeq	r1, r1, r0
 80155c6:	6021      	streq	r1, [r4, #0]
 80155c8:	6054      	str	r4, [r2, #4]
 80155ca:	e7ca      	b.n	8015562 <_free_r+0x22>
 80155cc:	bd38      	pop	{r3, r4, r5, pc}
 80155ce:	bf00      	nop
 80155d0:	20005e48 	.word	0x20005e48

080155d4 <sbrk_aligned>:
 80155d4:	b570      	push	{r4, r5, r6, lr}
 80155d6:	4e0f      	ldr	r6, [pc, #60]	@ (8015614 <sbrk_aligned+0x40>)
 80155d8:	460c      	mov	r4, r1
 80155da:	6831      	ldr	r1, [r6, #0]
 80155dc:	4605      	mov	r5, r0
 80155de:	b911      	cbnz	r1, 80155e6 <sbrk_aligned+0x12>
 80155e0:	f000 ff36 	bl	8016450 <_sbrk_r>
 80155e4:	6030      	str	r0, [r6, #0]
 80155e6:	4621      	mov	r1, r4
 80155e8:	4628      	mov	r0, r5
 80155ea:	f000 ff31 	bl	8016450 <_sbrk_r>
 80155ee:	1c43      	adds	r3, r0, #1
 80155f0:	d103      	bne.n	80155fa <sbrk_aligned+0x26>
 80155f2:	f04f 34ff 	mov.w	r4, #4294967295
 80155f6:	4620      	mov	r0, r4
 80155f8:	bd70      	pop	{r4, r5, r6, pc}
 80155fa:	1cc4      	adds	r4, r0, #3
 80155fc:	f024 0403 	bic.w	r4, r4, #3
 8015600:	42a0      	cmp	r0, r4
 8015602:	d0f8      	beq.n	80155f6 <sbrk_aligned+0x22>
 8015604:	1a21      	subs	r1, r4, r0
 8015606:	4628      	mov	r0, r5
 8015608:	f000 ff22 	bl	8016450 <_sbrk_r>
 801560c:	3001      	adds	r0, #1
 801560e:	d1f2      	bne.n	80155f6 <sbrk_aligned+0x22>
 8015610:	e7ef      	b.n	80155f2 <sbrk_aligned+0x1e>
 8015612:	bf00      	nop
 8015614:	20005e44 	.word	0x20005e44

08015618 <_malloc_r>:
 8015618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801561c:	1ccd      	adds	r5, r1, #3
 801561e:	f025 0503 	bic.w	r5, r5, #3
 8015622:	3508      	adds	r5, #8
 8015624:	2d0c      	cmp	r5, #12
 8015626:	bf38      	it	cc
 8015628:	250c      	movcc	r5, #12
 801562a:	2d00      	cmp	r5, #0
 801562c:	4606      	mov	r6, r0
 801562e:	db01      	blt.n	8015634 <_malloc_r+0x1c>
 8015630:	42a9      	cmp	r1, r5
 8015632:	d904      	bls.n	801563e <_malloc_r+0x26>
 8015634:	230c      	movs	r3, #12
 8015636:	6033      	str	r3, [r6, #0]
 8015638:	2000      	movs	r0, #0
 801563a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801563e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015714 <_malloc_r+0xfc>
 8015642:	f000 f869 	bl	8015718 <__malloc_lock>
 8015646:	f8d8 3000 	ldr.w	r3, [r8]
 801564a:	461c      	mov	r4, r3
 801564c:	bb44      	cbnz	r4, 80156a0 <_malloc_r+0x88>
 801564e:	4629      	mov	r1, r5
 8015650:	4630      	mov	r0, r6
 8015652:	f7ff ffbf 	bl	80155d4 <sbrk_aligned>
 8015656:	1c43      	adds	r3, r0, #1
 8015658:	4604      	mov	r4, r0
 801565a:	d158      	bne.n	801570e <_malloc_r+0xf6>
 801565c:	f8d8 4000 	ldr.w	r4, [r8]
 8015660:	4627      	mov	r7, r4
 8015662:	2f00      	cmp	r7, #0
 8015664:	d143      	bne.n	80156ee <_malloc_r+0xd6>
 8015666:	2c00      	cmp	r4, #0
 8015668:	d04b      	beq.n	8015702 <_malloc_r+0xea>
 801566a:	6823      	ldr	r3, [r4, #0]
 801566c:	4639      	mov	r1, r7
 801566e:	4630      	mov	r0, r6
 8015670:	eb04 0903 	add.w	r9, r4, r3
 8015674:	f000 feec 	bl	8016450 <_sbrk_r>
 8015678:	4581      	cmp	r9, r0
 801567a:	d142      	bne.n	8015702 <_malloc_r+0xea>
 801567c:	6821      	ldr	r1, [r4, #0]
 801567e:	1a6d      	subs	r5, r5, r1
 8015680:	4629      	mov	r1, r5
 8015682:	4630      	mov	r0, r6
 8015684:	f7ff ffa6 	bl	80155d4 <sbrk_aligned>
 8015688:	3001      	adds	r0, #1
 801568a:	d03a      	beq.n	8015702 <_malloc_r+0xea>
 801568c:	6823      	ldr	r3, [r4, #0]
 801568e:	442b      	add	r3, r5
 8015690:	6023      	str	r3, [r4, #0]
 8015692:	f8d8 3000 	ldr.w	r3, [r8]
 8015696:	685a      	ldr	r2, [r3, #4]
 8015698:	bb62      	cbnz	r2, 80156f4 <_malloc_r+0xdc>
 801569a:	f8c8 7000 	str.w	r7, [r8]
 801569e:	e00f      	b.n	80156c0 <_malloc_r+0xa8>
 80156a0:	6822      	ldr	r2, [r4, #0]
 80156a2:	1b52      	subs	r2, r2, r5
 80156a4:	d420      	bmi.n	80156e8 <_malloc_r+0xd0>
 80156a6:	2a0b      	cmp	r2, #11
 80156a8:	d917      	bls.n	80156da <_malloc_r+0xc2>
 80156aa:	1961      	adds	r1, r4, r5
 80156ac:	42a3      	cmp	r3, r4
 80156ae:	6025      	str	r5, [r4, #0]
 80156b0:	bf18      	it	ne
 80156b2:	6059      	strne	r1, [r3, #4]
 80156b4:	6863      	ldr	r3, [r4, #4]
 80156b6:	bf08      	it	eq
 80156b8:	f8c8 1000 	streq.w	r1, [r8]
 80156bc:	5162      	str	r2, [r4, r5]
 80156be:	604b      	str	r3, [r1, #4]
 80156c0:	4630      	mov	r0, r6
 80156c2:	f000 f82f 	bl	8015724 <__malloc_unlock>
 80156c6:	f104 000b 	add.w	r0, r4, #11
 80156ca:	1d23      	adds	r3, r4, #4
 80156cc:	f020 0007 	bic.w	r0, r0, #7
 80156d0:	1ac2      	subs	r2, r0, r3
 80156d2:	bf1c      	itt	ne
 80156d4:	1a1b      	subne	r3, r3, r0
 80156d6:	50a3      	strne	r3, [r4, r2]
 80156d8:	e7af      	b.n	801563a <_malloc_r+0x22>
 80156da:	6862      	ldr	r2, [r4, #4]
 80156dc:	42a3      	cmp	r3, r4
 80156de:	bf0c      	ite	eq
 80156e0:	f8c8 2000 	streq.w	r2, [r8]
 80156e4:	605a      	strne	r2, [r3, #4]
 80156e6:	e7eb      	b.n	80156c0 <_malloc_r+0xa8>
 80156e8:	4623      	mov	r3, r4
 80156ea:	6864      	ldr	r4, [r4, #4]
 80156ec:	e7ae      	b.n	801564c <_malloc_r+0x34>
 80156ee:	463c      	mov	r4, r7
 80156f0:	687f      	ldr	r7, [r7, #4]
 80156f2:	e7b6      	b.n	8015662 <_malloc_r+0x4a>
 80156f4:	461a      	mov	r2, r3
 80156f6:	685b      	ldr	r3, [r3, #4]
 80156f8:	42a3      	cmp	r3, r4
 80156fa:	d1fb      	bne.n	80156f4 <_malloc_r+0xdc>
 80156fc:	2300      	movs	r3, #0
 80156fe:	6053      	str	r3, [r2, #4]
 8015700:	e7de      	b.n	80156c0 <_malloc_r+0xa8>
 8015702:	230c      	movs	r3, #12
 8015704:	6033      	str	r3, [r6, #0]
 8015706:	4630      	mov	r0, r6
 8015708:	f000 f80c 	bl	8015724 <__malloc_unlock>
 801570c:	e794      	b.n	8015638 <_malloc_r+0x20>
 801570e:	6005      	str	r5, [r0, #0]
 8015710:	e7d6      	b.n	80156c0 <_malloc_r+0xa8>
 8015712:	bf00      	nop
 8015714:	20005e48 	.word	0x20005e48

08015718 <__malloc_lock>:
 8015718:	4801      	ldr	r0, [pc, #4]	@ (8015720 <__malloc_lock+0x8>)
 801571a:	f7ff bef9 	b.w	8015510 <__retarget_lock_acquire_recursive>
 801571e:	bf00      	nop
 8015720:	20005e40 	.word	0x20005e40

08015724 <__malloc_unlock>:
 8015724:	4801      	ldr	r0, [pc, #4]	@ (801572c <__malloc_unlock+0x8>)
 8015726:	f7ff bef4 	b.w	8015512 <__retarget_lock_release_recursive>
 801572a:	bf00      	nop
 801572c:	20005e40 	.word	0x20005e40

08015730 <__ssputs_r>:
 8015730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015734:	688e      	ldr	r6, [r1, #8]
 8015736:	461f      	mov	r7, r3
 8015738:	42be      	cmp	r6, r7
 801573a:	680b      	ldr	r3, [r1, #0]
 801573c:	4682      	mov	sl, r0
 801573e:	460c      	mov	r4, r1
 8015740:	4690      	mov	r8, r2
 8015742:	d82d      	bhi.n	80157a0 <__ssputs_r+0x70>
 8015744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015748:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801574c:	d026      	beq.n	801579c <__ssputs_r+0x6c>
 801574e:	6965      	ldr	r5, [r4, #20]
 8015750:	6909      	ldr	r1, [r1, #16]
 8015752:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015756:	eba3 0901 	sub.w	r9, r3, r1
 801575a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801575e:	1c7b      	adds	r3, r7, #1
 8015760:	444b      	add	r3, r9
 8015762:	106d      	asrs	r5, r5, #1
 8015764:	429d      	cmp	r5, r3
 8015766:	bf38      	it	cc
 8015768:	461d      	movcc	r5, r3
 801576a:	0553      	lsls	r3, r2, #21
 801576c:	d527      	bpl.n	80157be <__ssputs_r+0x8e>
 801576e:	4629      	mov	r1, r5
 8015770:	f7ff ff52 	bl	8015618 <_malloc_r>
 8015774:	4606      	mov	r6, r0
 8015776:	b360      	cbz	r0, 80157d2 <__ssputs_r+0xa2>
 8015778:	6921      	ldr	r1, [r4, #16]
 801577a:	464a      	mov	r2, r9
 801577c:	f7ff fed2 	bl	8015524 <memcpy>
 8015780:	89a3      	ldrh	r3, [r4, #12]
 8015782:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801578a:	81a3      	strh	r3, [r4, #12]
 801578c:	6126      	str	r6, [r4, #16]
 801578e:	6165      	str	r5, [r4, #20]
 8015790:	444e      	add	r6, r9
 8015792:	eba5 0509 	sub.w	r5, r5, r9
 8015796:	6026      	str	r6, [r4, #0]
 8015798:	60a5      	str	r5, [r4, #8]
 801579a:	463e      	mov	r6, r7
 801579c:	42be      	cmp	r6, r7
 801579e:	d900      	bls.n	80157a2 <__ssputs_r+0x72>
 80157a0:	463e      	mov	r6, r7
 80157a2:	6820      	ldr	r0, [r4, #0]
 80157a4:	4632      	mov	r2, r6
 80157a6:	4641      	mov	r1, r8
 80157a8:	f000 fe37 	bl	801641a <memmove>
 80157ac:	68a3      	ldr	r3, [r4, #8]
 80157ae:	1b9b      	subs	r3, r3, r6
 80157b0:	60a3      	str	r3, [r4, #8]
 80157b2:	6823      	ldr	r3, [r4, #0]
 80157b4:	4433      	add	r3, r6
 80157b6:	6023      	str	r3, [r4, #0]
 80157b8:	2000      	movs	r0, #0
 80157ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157be:	462a      	mov	r2, r5
 80157c0:	f000 fe56 	bl	8016470 <_realloc_r>
 80157c4:	4606      	mov	r6, r0
 80157c6:	2800      	cmp	r0, #0
 80157c8:	d1e0      	bne.n	801578c <__ssputs_r+0x5c>
 80157ca:	6921      	ldr	r1, [r4, #16]
 80157cc:	4650      	mov	r0, sl
 80157ce:	f7ff feb7 	bl	8015540 <_free_r>
 80157d2:	230c      	movs	r3, #12
 80157d4:	f8ca 3000 	str.w	r3, [sl]
 80157d8:	89a3      	ldrh	r3, [r4, #12]
 80157da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80157de:	81a3      	strh	r3, [r4, #12]
 80157e0:	f04f 30ff 	mov.w	r0, #4294967295
 80157e4:	e7e9      	b.n	80157ba <__ssputs_r+0x8a>
	...

080157e8 <_svfiprintf_r>:
 80157e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157ec:	4698      	mov	r8, r3
 80157ee:	898b      	ldrh	r3, [r1, #12]
 80157f0:	061b      	lsls	r3, r3, #24
 80157f2:	b09d      	sub	sp, #116	@ 0x74
 80157f4:	4607      	mov	r7, r0
 80157f6:	460d      	mov	r5, r1
 80157f8:	4614      	mov	r4, r2
 80157fa:	d510      	bpl.n	801581e <_svfiprintf_r+0x36>
 80157fc:	690b      	ldr	r3, [r1, #16]
 80157fe:	b973      	cbnz	r3, 801581e <_svfiprintf_r+0x36>
 8015800:	2140      	movs	r1, #64	@ 0x40
 8015802:	f7ff ff09 	bl	8015618 <_malloc_r>
 8015806:	6028      	str	r0, [r5, #0]
 8015808:	6128      	str	r0, [r5, #16]
 801580a:	b930      	cbnz	r0, 801581a <_svfiprintf_r+0x32>
 801580c:	230c      	movs	r3, #12
 801580e:	603b      	str	r3, [r7, #0]
 8015810:	f04f 30ff 	mov.w	r0, #4294967295
 8015814:	b01d      	add	sp, #116	@ 0x74
 8015816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801581a:	2340      	movs	r3, #64	@ 0x40
 801581c:	616b      	str	r3, [r5, #20]
 801581e:	2300      	movs	r3, #0
 8015820:	9309      	str	r3, [sp, #36]	@ 0x24
 8015822:	2320      	movs	r3, #32
 8015824:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015828:	f8cd 800c 	str.w	r8, [sp, #12]
 801582c:	2330      	movs	r3, #48	@ 0x30
 801582e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80159cc <_svfiprintf_r+0x1e4>
 8015832:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015836:	f04f 0901 	mov.w	r9, #1
 801583a:	4623      	mov	r3, r4
 801583c:	469a      	mov	sl, r3
 801583e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015842:	b10a      	cbz	r2, 8015848 <_svfiprintf_r+0x60>
 8015844:	2a25      	cmp	r2, #37	@ 0x25
 8015846:	d1f9      	bne.n	801583c <_svfiprintf_r+0x54>
 8015848:	ebba 0b04 	subs.w	fp, sl, r4
 801584c:	d00b      	beq.n	8015866 <_svfiprintf_r+0x7e>
 801584e:	465b      	mov	r3, fp
 8015850:	4622      	mov	r2, r4
 8015852:	4629      	mov	r1, r5
 8015854:	4638      	mov	r0, r7
 8015856:	f7ff ff6b 	bl	8015730 <__ssputs_r>
 801585a:	3001      	adds	r0, #1
 801585c:	f000 80a7 	beq.w	80159ae <_svfiprintf_r+0x1c6>
 8015860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015862:	445a      	add	r2, fp
 8015864:	9209      	str	r2, [sp, #36]	@ 0x24
 8015866:	f89a 3000 	ldrb.w	r3, [sl]
 801586a:	2b00      	cmp	r3, #0
 801586c:	f000 809f 	beq.w	80159ae <_svfiprintf_r+0x1c6>
 8015870:	2300      	movs	r3, #0
 8015872:	f04f 32ff 	mov.w	r2, #4294967295
 8015876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801587a:	f10a 0a01 	add.w	sl, sl, #1
 801587e:	9304      	str	r3, [sp, #16]
 8015880:	9307      	str	r3, [sp, #28]
 8015882:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015886:	931a      	str	r3, [sp, #104]	@ 0x68
 8015888:	4654      	mov	r4, sl
 801588a:	2205      	movs	r2, #5
 801588c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015890:	484e      	ldr	r0, [pc, #312]	@ (80159cc <_svfiprintf_r+0x1e4>)
 8015892:	f7ea fcb5 	bl	8000200 <memchr>
 8015896:	9a04      	ldr	r2, [sp, #16]
 8015898:	b9d8      	cbnz	r0, 80158d2 <_svfiprintf_r+0xea>
 801589a:	06d0      	lsls	r0, r2, #27
 801589c:	bf44      	itt	mi
 801589e:	2320      	movmi	r3, #32
 80158a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80158a4:	0711      	lsls	r1, r2, #28
 80158a6:	bf44      	itt	mi
 80158a8:	232b      	movmi	r3, #43	@ 0x2b
 80158aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80158ae:	f89a 3000 	ldrb.w	r3, [sl]
 80158b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80158b4:	d015      	beq.n	80158e2 <_svfiprintf_r+0xfa>
 80158b6:	9a07      	ldr	r2, [sp, #28]
 80158b8:	4654      	mov	r4, sl
 80158ba:	2000      	movs	r0, #0
 80158bc:	f04f 0c0a 	mov.w	ip, #10
 80158c0:	4621      	mov	r1, r4
 80158c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80158c6:	3b30      	subs	r3, #48	@ 0x30
 80158c8:	2b09      	cmp	r3, #9
 80158ca:	d94b      	bls.n	8015964 <_svfiprintf_r+0x17c>
 80158cc:	b1b0      	cbz	r0, 80158fc <_svfiprintf_r+0x114>
 80158ce:	9207      	str	r2, [sp, #28]
 80158d0:	e014      	b.n	80158fc <_svfiprintf_r+0x114>
 80158d2:	eba0 0308 	sub.w	r3, r0, r8
 80158d6:	fa09 f303 	lsl.w	r3, r9, r3
 80158da:	4313      	orrs	r3, r2
 80158dc:	9304      	str	r3, [sp, #16]
 80158de:	46a2      	mov	sl, r4
 80158e0:	e7d2      	b.n	8015888 <_svfiprintf_r+0xa0>
 80158e2:	9b03      	ldr	r3, [sp, #12]
 80158e4:	1d19      	adds	r1, r3, #4
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	9103      	str	r1, [sp, #12]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	bfbb      	ittet	lt
 80158ee:	425b      	neglt	r3, r3
 80158f0:	f042 0202 	orrlt.w	r2, r2, #2
 80158f4:	9307      	strge	r3, [sp, #28]
 80158f6:	9307      	strlt	r3, [sp, #28]
 80158f8:	bfb8      	it	lt
 80158fa:	9204      	strlt	r2, [sp, #16]
 80158fc:	7823      	ldrb	r3, [r4, #0]
 80158fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8015900:	d10a      	bne.n	8015918 <_svfiprintf_r+0x130>
 8015902:	7863      	ldrb	r3, [r4, #1]
 8015904:	2b2a      	cmp	r3, #42	@ 0x2a
 8015906:	d132      	bne.n	801596e <_svfiprintf_r+0x186>
 8015908:	9b03      	ldr	r3, [sp, #12]
 801590a:	1d1a      	adds	r2, r3, #4
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	9203      	str	r2, [sp, #12]
 8015910:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015914:	3402      	adds	r4, #2
 8015916:	9305      	str	r3, [sp, #20]
 8015918:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80159dc <_svfiprintf_r+0x1f4>
 801591c:	7821      	ldrb	r1, [r4, #0]
 801591e:	2203      	movs	r2, #3
 8015920:	4650      	mov	r0, sl
 8015922:	f7ea fc6d 	bl	8000200 <memchr>
 8015926:	b138      	cbz	r0, 8015938 <_svfiprintf_r+0x150>
 8015928:	9b04      	ldr	r3, [sp, #16]
 801592a:	eba0 000a 	sub.w	r0, r0, sl
 801592e:	2240      	movs	r2, #64	@ 0x40
 8015930:	4082      	lsls	r2, r0
 8015932:	4313      	orrs	r3, r2
 8015934:	3401      	adds	r4, #1
 8015936:	9304      	str	r3, [sp, #16]
 8015938:	f814 1b01 	ldrb.w	r1, [r4], #1
 801593c:	4824      	ldr	r0, [pc, #144]	@ (80159d0 <_svfiprintf_r+0x1e8>)
 801593e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015942:	2206      	movs	r2, #6
 8015944:	f7ea fc5c 	bl	8000200 <memchr>
 8015948:	2800      	cmp	r0, #0
 801594a:	d036      	beq.n	80159ba <_svfiprintf_r+0x1d2>
 801594c:	4b21      	ldr	r3, [pc, #132]	@ (80159d4 <_svfiprintf_r+0x1ec>)
 801594e:	bb1b      	cbnz	r3, 8015998 <_svfiprintf_r+0x1b0>
 8015950:	9b03      	ldr	r3, [sp, #12]
 8015952:	3307      	adds	r3, #7
 8015954:	f023 0307 	bic.w	r3, r3, #7
 8015958:	3308      	adds	r3, #8
 801595a:	9303      	str	r3, [sp, #12]
 801595c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801595e:	4433      	add	r3, r6
 8015960:	9309      	str	r3, [sp, #36]	@ 0x24
 8015962:	e76a      	b.n	801583a <_svfiprintf_r+0x52>
 8015964:	fb0c 3202 	mla	r2, ip, r2, r3
 8015968:	460c      	mov	r4, r1
 801596a:	2001      	movs	r0, #1
 801596c:	e7a8      	b.n	80158c0 <_svfiprintf_r+0xd8>
 801596e:	2300      	movs	r3, #0
 8015970:	3401      	adds	r4, #1
 8015972:	9305      	str	r3, [sp, #20]
 8015974:	4619      	mov	r1, r3
 8015976:	f04f 0c0a 	mov.w	ip, #10
 801597a:	4620      	mov	r0, r4
 801597c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015980:	3a30      	subs	r2, #48	@ 0x30
 8015982:	2a09      	cmp	r2, #9
 8015984:	d903      	bls.n	801598e <_svfiprintf_r+0x1a6>
 8015986:	2b00      	cmp	r3, #0
 8015988:	d0c6      	beq.n	8015918 <_svfiprintf_r+0x130>
 801598a:	9105      	str	r1, [sp, #20]
 801598c:	e7c4      	b.n	8015918 <_svfiprintf_r+0x130>
 801598e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015992:	4604      	mov	r4, r0
 8015994:	2301      	movs	r3, #1
 8015996:	e7f0      	b.n	801597a <_svfiprintf_r+0x192>
 8015998:	ab03      	add	r3, sp, #12
 801599a:	9300      	str	r3, [sp, #0]
 801599c:	462a      	mov	r2, r5
 801599e:	4b0e      	ldr	r3, [pc, #56]	@ (80159d8 <_svfiprintf_r+0x1f0>)
 80159a0:	a904      	add	r1, sp, #16
 80159a2:	4638      	mov	r0, r7
 80159a4:	f3af 8000 	nop.w
 80159a8:	1c42      	adds	r2, r0, #1
 80159aa:	4606      	mov	r6, r0
 80159ac:	d1d6      	bne.n	801595c <_svfiprintf_r+0x174>
 80159ae:	89ab      	ldrh	r3, [r5, #12]
 80159b0:	065b      	lsls	r3, r3, #25
 80159b2:	f53f af2d 	bmi.w	8015810 <_svfiprintf_r+0x28>
 80159b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80159b8:	e72c      	b.n	8015814 <_svfiprintf_r+0x2c>
 80159ba:	ab03      	add	r3, sp, #12
 80159bc:	9300      	str	r3, [sp, #0]
 80159be:	462a      	mov	r2, r5
 80159c0:	4b05      	ldr	r3, [pc, #20]	@ (80159d8 <_svfiprintf_r+0x1f0>)
 80159c2:	a904      	add	r1, sp, #16
 80159c4:	4638      	mov	r0, r7
 80159c6:	f000 fa49 	bl	8015e5c <_printf_i>
 80159ca:	e7ed      	b.n	80159a8 <_svfiprintf_r+0x1c0>
 80159cc:	08016d1b 	.word	0x08016d1b
 80159d0:	08016d25 	.word	0x08016d25
 80159d4:	00000000 	.word	0x00000000
 80159d8:	08015731 	.word	0x08015731
 80159dc:	08016d21 	.word	0x08016d21

080159e0 <_sungetc_r>:
 80159e0:	b538      	push	{r3, r4, r5, lr}
 80159e2:	1c4b      	adds	r3, r1, #1
 80159e4:	4614      	mov	r4, r2
 80159e6:	d103      	bne.n	80159f0 <_sungetc_r+0x10>
 80159e8:	f04f 35ff 	mov.w	r5, #4294967295
 80159ec:	4628      	mov	r0, r5
 80159ee:	bd38      	pop	{r3, r4, r5, pc}
 80159f0:	8993      	ldrh	r3, [r2, #12]
 80159f2:	f023 0320 	bic.w	r3, r3, #32
 80159f6:	8193      	strh	r3, [r2, #12]
 80159f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80159fa:	6852      	ldr	r2, [r2, #4]
 80159fc:	b2cd      	uxtb	r5, r1
 80159fe:	b18b      	cbz	r3, 8015a24 <_sungetc_r+0x44>
 8015a00:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8015a02:	4293      	cmp	r3, r2
 8015a04:	dd08      	ble.n	8015a18 <_sungetc_r+0x38>
 8015a06:	6823      	ldr	r3, [r4, #0]
 8015a08:	1e5a      	subs	r2, r3, #1
 8015a0a:	6022      	str	r2, [r4, #0]
 8015a0c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015a10:	6863      	ldr	r3, [r4, #4]
 8015a12:	3301      	adds	r3, #1
 8015a14:	6063      	str	r3, [r4, #4]
 8015a16:	e7e9      	b.n	80159ec <_sungetc_r+0xc>
 8015a18:	4621      	mov	r1, r4
 8015a1a:	f000 fcc4 	bl	80163a6 <__submore>
 8015a1e:	2800      	cmp	r0, #0
 8015a20:	d0f1      	beq.n	8015a06 <_sungetc_r+0x26>
 8015a22:	e7e1      	b.n	80159e8 <_sungetc_r+0x8>
 8015a24:	6921      	ldr	r1, [r4, #16]
 8015a26:	6823      	ldr	r3, [r4, #0]
 8015a28:	b151      	cbz	r1, 8015a40 <_sungetc_r+0x60>
 8015a2a:	4299      	cmp	r1, r3
 8015a2c:	d208      	bcs.n	8015a40 <_sungetc_r+0x60>
 8015a2e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015a32:	42a9      	cmp	r1, r5
 8015a34:	d104      	bne.n	8015a40 <_sungetc_r+0x60>
 8015a36:	3b01      	subs	r3, #1
 8015a38:	3201      	adds	r2, #1
 8015a3a:	6023      	str	r3, [r4, #0]
 8015a3c:	6062      	str	r2, [r4, #4]
 8015a3e:	e7d5      	b.n	80159ec <_sungetc_r+0xc>
 8015a40:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8015a44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015a48:	6363      	str	r3, [r4, #52]	@ 0x34
 8015a4a:	2303      	movs	r3, #3
 8015a4c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8015a4e:	4623      	mov	r3, r4
 8015a50:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015a54:	6023      	str	r3, [r4, #0]
 8015a56:	2301      	movs	r3, #1
 8015a58:	e7dc      	b.n	8015a14 <_sungetc_r+0x34>

08015a5a <__ssrefill_r>:
 8015a5a:	b510      	push	{r4, lr}
 8015a5c:	460c      	mov	r4, r1
 8015a5e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8015a60:	b169      	cbz	r1, 8015a7e <__ssrefill_r+0x24>
 8015a62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015a66:	4299      	cmp	r1, r3
 8015a68:	d001      	beq.n	8015a6e <__ssrefill_r+0x14>
 8015a6a:	f7ff fd69 	bl	8015540 <_free_r>
 8015a6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015a70:	6063      	str	r3, [r4, #4]
 8015a72:	2000      	movs	r0, #0
 8015a74:	6360      	str	r0, [r4, #52]	@ 0x34
 8015a76:	b113      	cbz	r3, 8015a7e <__ssrefill_r+0x24>
 8015a78:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8015a7a:	6023      	str	r3, [r4, #0]
 8015a7c:	bd10      	pop	{r4, pc}
 8015a7e:	6923      	ldr	r3, [r4, #16]
 8015a80:	6023      	str	r3, [r4, #0]
 8015a82:	2300      	movs	r3, #0
 8015a84:	6063      	str	r3, [r4, #4]
 8015a86:	89a3      	ldrh	r3, [r4, #12]
 8015a88:	f043 0320 	orr.w	r3, r3, #32
 8015a8c:	81a3      	strh	r3, [r4, #12]
 8015a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8015a92:	e7f3      	b.n	8015a7c <__ssrefill_r+0x22>

08015a94 <__ssvfiscanf_r>:
 8015a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a98:	460c      	mov	r4, r1
 8015a9a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8015a9e:	2100      	movs	r1, #0
 8015aa0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8015aa4:	49a6      	ldr	r1, [pc, #664]	@ (8015d40 <__ssvfiscanf_r+0x2ac>)
 8015aa6:	91a0      	str	r1, [sp, #640]	@ 0x280
 8015aa8:	f10d 0804 	add.w	r8, sp, #4
 8015aac:	49a5      	ldr	r1, [pc, #660]	@ (8015d44 <__ssvfiscanf_r+0x2b0>)
 8015aae:	4fa6      	ldr	r7, [pc, #664]	@ (8015d48 <__ssvfiscanf_r+0x2b4>)
 8015ab0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8015ab4:	4606      	mov	r6, r0
 8015ab6:	91a1      	str	r1, [sp, #644]	@ 0x284
 8015ab8:	9300      	str	r3, [sp, #0]
 8015aba:	f892 9000 	ldrb.w	r9, [r2]
 8015abe:	f1b9 0f00 	cmp.w	r9, #0
 8015ac2:	f000 8158 	beq.w	8015d76 <__ssvfiscanf_r+0x2e2>
 8015ac6:	f817 3009 	ldrb.w	r3, [r7, r9]
 8015aca:	f013 0308 	ands.w	r3, r3, #8
 8015ace:	f102 0501 	add.w	r5, r2, #1
 8015ad2:	d019      	beq.n	8015b08 <__ssvfiscanf_r+0x74>
 8015ad4:	6863      	ldr	r3, [r4, #4]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	dd0f      	ble.n	8015afa <__ssvfiscanf_r+0x66>
 8015ada:	6823      	ldr	r3, [r4, #0]
 8015adc:	781a      	ldrb	r2, [r3, #0]
 8015ade:	5cba      	ldrb	r2, [r7, r2]
 8015ae0:	0712      	lsls	r2, r2, #28
 8015ae2:	d401      	bmi.n	8015ae8 <__ssvfiscanf_r+0x54>
 8015ae4:	462a      	mov	r2, r5
 8015ae6:	e7e8      	b.n	8015aba <__ssvfiscanf_r+0x26>
 8015ae8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8015aea:	3201      	adds	r2, #1
 8015aec:	9245      	str	r2, [sp, #276]	@ 0x114
 8015aee:	6862      	ldr	r2, [r4, #4]
 8015af0:	3301      	adds	r3, #1
 8015af2:	3a01      	subs	r2, #1
 8015af4:	6062      	str	r2, [r4, #4]
 8015af6:	6023      	str	r3, [r4, #0]
 8015af8:	e7ec      	b.n	8015ad4 <__ssvfiscanf_r+0x40>
 8015afa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015afc:	4621      	mov	r1, r4
 8015afe:	4630      	mov	r0, r6
 8015b00:	4798      	blx	r3
 8015b02:	2800      	cmp	r0, #0
 8015b04:	d0e9      	beq.n	8015ada <__ssvfiscanf_r+0x46>
 8015b06:	e7ed      	b.n	8015ae4 <__ssvfiscanf_r+0x50>
 8015b08:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8015b0c:	f040 8085 	bne.w	8015c1a <__ssvfiscanf_r+0x186>
 8015b10:	9341      	str	r3, [sp, #260]	@ 0x104
 8015b12:	9343      	str	r3, [sp, #268]	@ 0x10c
 8015b14:	7853      	ldrb	r3, [r2, #1]
 8015b16:	2b2a      	cmp	r3, #42	@ 0x2a
 8015b18:	bf02      	ittt	eq
 8015b1a:	2310      	moveq	r3, #16
 8015b1c:	1c95      	addeq	r5, r2, #2
 8015b1e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8015b20:	220a      	movs	r2, #10
 8015b22:	46aa      	mov	sl, r5
 8015b24:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8015b28:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8015b2c:	2b09      	cmp	r3, #9
 8015b2e:	d91e      	bls.n	8015b6e <__ssvfiscanf_r+0xda>
 8015b30:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8015d4c <__ssvfiscanf_r+0x2b8>
 8015b34:	2203      	movs	r2, #3
 8015b36:	4658      	mov	r0, fp
 8015b38:	f7ea fb62 	bl	8000200 <memchr>
 8015b3c:	b138      	cbz	r0, 8015b4e <__ssvfiscanf_r+0xba>
 8015b3e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8015b40:	eba0 000b 	sub.w	r0, r0, fp
 8015b44:	2301      	movs	r3, #1
 8015b46:	4083      	lsls	r3, r0
 8015b48:	4313      	orrs	r3, r2
 8015b4a:	9341      	str	r3, [sp, #260]	@ 0x104
 8015b4c:	4655      	mov	r5, sl
 8015b4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015b52:	2b78      	cmp	r3, #120	@ 0x78
 8015b54:	d806      	bhi.n	8015b64 <__ssvfiscanf_r+0xd0>
 8015b56:	2b57      	cmp	r3, #87	@ 0x57
 8015b58:	d810      	bhi.n	8015b7c <__ssvfiscanf_r+0xe8>
 8015b5a:	2b25      	cmp	r3, #37	@ 0x25
 8015b5c:	d05d      	beq.n	8015c1a <__ssvfiscanf_r+0x186>
 8015b5e:	d857      	bhi.n	8015c10 <__ssvfiscanf_r+0x17c>
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d075      	beq.n	8015c50 <__ssvfiscanf_r+0x1bc>
 8015b64:	2303      	movs	r3, #3
 8015b66:	9347      	str	r3, [sp, #284]	@ 0x11c
 8015b68:	230a      	movs	r3, #10
 8015b6a:	9342      	str	r3, [sp, #264]	@ 0x108
 8015b6c:	e088      	b.n	8015c80 <__ssvfiscanf_r+0x1ec>
 8015b6e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8015b70:	fb02 1103 	mla	r1, r2, r3, r1
 8015b74:	3930      	subs	r1, #48	@ 0x30
 8015b76:	9143      	str	r1, [sp, #268]	@ 0x10c
 8015b78:	4655      	mov	r5, sl
 8015b7a:	e7d2      	b.n	8015b22 <__ssvfiscanf_r+0x8e>
 8015b7c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8015b80:	2a20      	cmp	r2, #32
 8015b82:	d8ef      	bhi.n	8015b64 <__ssvfiscanf_r+0xd0>
 8015b84:	a101      	add	r1, pc, #4	@ (adr r1, 8015b8c <__ssvfiscanf_r+0xf8>)
 8015b86:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015b8a:	bf00      	nop
 8015b8c:	08015c5f 	.word	0x08015c5f
 8015b90:	08015b65 	.word	0x08015b65
 8015b94:	08015b65 	.word	0x08015b65
 8015b98:	08015cb9 	.word	0x08015cb9
 8015b9c:	08015b65 	.word	0x08015b65
 8015ba0:	08015b65 	.word	0x08015b65
 8015ba4:	08015b65 	.word	0x08015b65
 8015ba8:	08015b65 	.word	0x08015b65
 8015bac:	08015b65 	.word	0x08015b65
 8015bb0:	08015b65 	.word	0x08015b65
 8015bb4:	08015b65 	.word	0x08015b65
 8015bb8:	08015ccf 	.word	0x08015ccf
 8015bbc:	08015cb5 	.word	0x08015cb5
 8015bc0:	08015c17 	.word	0x08015c17
 8015bc4:	08015c17 	.word	0x08015c17
 8015bc8:	08015c17 	.word	0x08015c17
 8015bcc:	08015b65 	.word	0x08015b65
 8015bd0:	08015c71 	.word	0x08015c71
 8015bd4:	08015b65 	.word	0x08015b65
 8015bd8:	08015b65 	.word	0x08015b65
 8015bdc:	08015b65 	.word	0x08015b65
 8015be0:	08015b65 	.word	0x08015b65
 8015be4:	08015cdf 	.word	0x08015cdf
 8015be8:	08015c79 	.word	0x08015c79
 8015bec:	08015c57 	.word	0x08015c57
 8015bf0:	08015b65 	.word	0x08015b65
 8015bf4:	08015b65 	.word	0x08015b65
 8015bf8:	08015cdb 	.word	0x08015cdb
 8015bfc:	08015b65 	.word	0x08015b65
 8015c00:	08015cb5 	.word	0x08015cb5
 8015c04:	08015b65 	.word	0x08015b65
 8015c08:	08015b65 	.word	0x08015b65
 8015c0c:	08015c5f 	.word	0x08015c5f
 8015c10:	3b45      	subs	r3, #69	@ 0x45
 8015c12:	2b02      	cmp	r3, #2
 8015c14:	d8a6      	bhi.n	8015b64 <__ssvfiscanf_r+0xd0>
 8015c16:	2305      	movs	r3, #5
 8015c18:	e031      	b.n	8015c7e <__ssvfiscanf_r+0x1ea>
 8015c1a:	6863      	ldr	r3, [r4, #4]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	dd0d      	ble.n	8015c3c <__ssvfiscanf_r+0x1a8>
 8015c20:	6823      	ldr	r3, [r4, #0]
 8015c22:	781a      	ldrb	r2, [r3, #0]
 8015c24:	454a      	cmp	r2, r9
 8015c26:	f040 80a6 	bne.w	8015d76 <__ssvfiscanf_r+0x2e2>
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	6862      	ldr	r2, [r4, #4]
 8015c2e:	6023      	str	r3, [r4, #0]
 8015c30:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8015c32:	3a01      	subs	r2, #1
 8015c34:	3301      	adds	r3, #1
 8015c36:	6062      	str	r2, [r4, #4]
 8015c38:	9345      	str	r3, [sp, #276]	@ 0x114
 8015c3a:	e753      	b.n	8015ae4 <__ssvfiscanf_r+0x50>
 8015c3c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015c3e:	4621      	mov	r1, r4
 8015c40:	4630      	mov	r0, r6
 8015c42:	4798      	blx	r3
 8015c44:	2800      	cmp	r0, #0
 8015c46:	d0eb      	beq.n	8015c20 <__ssvfiscanf_r+0x18c>
 8015c48:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8015c4a:	2800      	cmp	r0, #0
 8015c4c:	f040 808b 	bne.w	8015d66 <__ssvfiscanf_r+0x2d2>
 8015c50:	f04f 30ff 	mov.w	r0, #4294967295
 8015c54:	e08b      	b.n	8015d6e <__ssvfiscanf_r+0x2da>
 8015c56:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8015c58:	f042 0220 	orr.w	r2, r2, #32
 8015c5c:	9241      	str	r2, [sp, #260]	@ 0x104
 8015c5e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8015c60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015c64:	9241      	str	r2, [sp, #260]	@ 0x104
 8015c66:	2210      	movs	r2, #16
 8015c68:	2b6e      	cmp	r3, #110	@ 0x6e
 8015c6a:	9242      	str	r2, [sp, #264]	@ 0x108
 8015c6c:	d902      	bls.n	8015c74 <__ssvfiscanf_r+0x1e0>
 8015c6e:	e005      	b.n	8015c7c <__ssvfiscanf_r+0x1e8>
 8015c70:	2300      	movs	r3, #0
 8015c72:	9342      	str	r3, [sp, #264]	@ 0x108
 8015c74:	2303      	movs	r3, #3
 8015c76:	e002      	b.n	8015c7e <__ssvfiscanf_r+0x1ea>
 8015c78:	2308      	movs	r3, #8
 8015c7a:	9342      	str	r3, [sp, #264]	@ 0x108
 8015c7c:	2304      	movs	r3, #4
 8015c7e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8015c80:	6863      	ldr	r3, [r4, #4]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	dd39      	ble.n	8015cfa <__ssvfiscanf_r+0x266>
 8015c86:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8015c88:	0659      	lsls	r1, r3, #25
 8015c8a:	d404      	bmi.n	8015c96 <__ssvfiscanf_r+0x202>
 8015c8c:	6823      	ldr	r3, [r4, #0]
 8015c8e:	781a      	ldrb	r2, [r3, #0]
 8015c90:	5cba      	ldrb	r2, [r7, r2]
 8015c92:	0712      	lsls	r2, r2, #28
 8015c94:	d438      	bmi.n	8015d08 <__ssvfiscanf_r+0x274>
 8015c96:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8015c98:	2b02      	cmp	r3, #2
 8015c9a:	dc47      	bgt.n	8015d2c <__ssvfiscanf_r+0x298>
 8015c9c:	466b      	mov	r3, sp
 8015c9e:	4622      	mov	r2, r4
 8015ca0:	a941      	add	r1, sp, #260	@ 0x104
 8015ca2:	4630      	mov	r0, r6
 8015ca4:	f000 f9f8 	bl	8016098 <_scanf_chars>
 8015ca8:	2801      	cmp	r0, #1
 8015caa:	d064      	beq.n	8015d76 <__ssvfiscanf_r+0x2e2>
 8015cac:	2802      	cmp	r0, #2
 8015cae:	f47f af19 	bne.w	8015ae4 <__ssvfiscanf_r+0x50>
 8015cb2:	e7c9      	b.n	8015c48 <__ssvfiscanf_r+0x1b4>
 8015cb4:	220a      	movs	r2, #10
 8015cb6:	e7d7      	b.n	8015c68 <__ssvfiscanf_r+0x1d4>
 8015cb8:	4629      	mov	r1, r5
 8015cba:	4640      	mov	r0, r8
 8015cbc:	f000 fb3a 	bl	8016334 <__sccl>
 8015cc0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8015cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015cc6:	9341      	str	r3, [sp, #260]	@ 0x104
 8015cc8:	4605      	mov	r5, r0
 8015cca:	2301      	movs	r3, #1
 8015ccc:	e7d7      	b.n	8015c7e <__ssvfiscanf_r+0x1ea>
 8015cce:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8015cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015cd4:	9341      	str	r3, [sp, #260]	@ 0x104
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	e7d1      	b.n	8015c7e <__ssvfiscanf_r+0x1ea>
 8015cda:	2302      	movs	r3, #2
 8015cdc:	e7cf      	b.n	8015c7e <__ssvfiscanf_r+0x1ea>
 8015cde:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8015ce0:	06c3      	lsls	r3, r0, #27
 8015ce2:	f53f aeff 	bmi.w	8015ae4 <__ssvfiscanf_r+0x50>
 8015ce6:	9b00      	ldr	r3, [sp, #0]
 8015ce8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8015cea:	1d19      	adds	r1, r3, #4
 8015cec:	9100      	str	r1, [sp, #0]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	07c0      	lsls	r0, r0, #31
 8015cf2:	bf4c      	ite	mi
 8015cf4:	801a      	strhmi	r2, [r3, #0]
 8015cf6:	601a      	strpl	r2, [r3, #0]
 8015cf8:	e6f4      	b.n	8015ae4 <__ssvfiscanf_r+0x50>
 8015cfa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015cfc:	4621      	mov	r1, r4
 8015cfe:	4630      	mov	r0, r6
 8015d00:	4798      	blx	r3
 8015d02:	2800      	cmp	r0, #0
 8015d04:	d0bf      	beq.n	8015c86 <__ssvfiscanf_r+0x1f2>
 8015d06:	e79f      	b.n	8015c48 <__ssvfiscanf_r+0x1b4>
 8015d08:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8015d0a:	3201      	adds	r2, #1
 8015d0c:	9245      	str	r2, [sp, #276]	@ 0x114
 8015d0e:	6862      	ldr	r2, [r4, #4]
 8015d10:	3a01      	subs	r2, #1
 8015d12:	2a00      	cmp	r2, #0
 8015d14:	6062      	str	r2, [r4, #4]
 8015d16:	dd02      	ble.n	8015d1e <__ssvfiscanf_r+0x28a>
 8015d18:	3301      	adds	r3, #1
 8015d1a:	6023      	str	r3, [r4, #0]
 8015d1c:	e7b6      	b.n	8015c8c <__ssvfiscanf_r+0x1f8>
 8015d1e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015d20:	4621      	mov	r1, r4
 8015d22:	4630      	mov	r0, r6
 8015d24:	4798      	blx	r3
 8015d26:	2800      	cmp	r0, #0
 8015d28:	d0b0      	beq.n	8015c8c <__ssvfiscanf_r+0x1f8>
 8015d2a:	e78d      	b.n	8015c48 <__ssvfiscanf_r+0x1b4>
 8015d2c:	2b04      	cmp	r3, #4
 8015d2e:	dc0f      	bgt.n	8015d50 <__ssvfiscanf_r+0x2bc>
 8015d30:	466b      	mov	r3, sp
 8015d32:	4622      	mov	r2, r4
 8015d34:	a941      	add	r1, sp, #260	@ 0x104
 8015d36:	4630      	mov	r0, r6
 8015d38:	f000 fa08 	bl	801614c <_scanf_i>
 8015d3c:	e7b4      	b.n	8015ca8 <__ssvfiscanf_r+0x214>
 8015d3e:	bf00      	nop
 8015d40:	080159e1 	.word	0x080159e1
 8015d44:	08015a5b 	.word	0x08015a5b
 8015d48:	08016c1b 	.word	0x08016c1b
 8015d4c:	08016d21 	.word	0x08016d21
 8015d50:	4b0a      	ldr	r3, [pc, #40]	@ (8015d7c <__ssvfiscanf_r+0x2e8>)
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	f43f aec6 	beq.w	8015ae4 <__ssvfiscanf_r+0x50>
 8015d58:	466b      	mov	r3, sp
 8015d5a:	4622      	mov	r2, r4
 8015d5c:	a941      	add	r1, sp, #260	@ 0x104
 8015d5e:	4630      	mov	r0, r6
 8015d60:	f3af 8000 	nop.w
 8015d64:	e7a0      	b.n	8015ca8 <__ssvfiscanf_r+0x214>
 8015d66:	89a3      	ldrh	r3, [r4, #12]
 8015d68:	065b      	lsls	r3, r3, #25
 8015d6a:	f53f af71 	bmi.w	8015c50 <__ssvfiscanf_r+0x1bc>
 8015d6e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8015d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d76:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8015d78:	e7f9      	b.n	8015d6e <__ssvfiscanf_r+0x2da>
 8015d7a:	bf00      	nop
 8015d7c:	00000000 	.word	0x00000000

08015d80 <_printf_common>:
 8015d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d84:	4616      	mov	r6, r2
 8015d86:	4698      	mov	r8, r3
 8015d88:	688a      	ldr	r2, [r1, #8]
 8015d8a:	690b      	ldr	r3, [r1, #16]
 8015d8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015d90:	4293      	cmp	r3, r2
 8015d92:	bfb8      	it	lt
 8015d94:	4613      	movlt	r3, r2
 8015d96:	6033      	str	r3, [r6, #0]
 8015d98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015d9c:	4607      	mov	r7, r0
 8015d9e:	460c      	mov	r4, r1
 8015da0:	b10a      	cbz	r2, 8015da6 <_printf_common+0x26>
 8015da2:	3301      	adds	r3, #1
 8015da4:	6033      	str	r3, [r6, #0]
 8015da6:	6823      	ldr	r3, [r4, #0]
 8015da8:	0699      	lsls	r1, r3, #26
 8015daa:	bf42      	ittt	mi
 8015dac:	6833      	ldrmi	r3, [r6, #0]
 8015dae:	3302      	addmi	r3, #2
 8015db0:	6033      	strmi	r3, [r6, #0]
 8015db2:	6825      	ldr	r5, [r4, #0]
 8015db4:	f015 0506 	ands.w	r5, r5, #6
 8015db8:	d106      	bne.n	8015dc8 <_printf_common+0x48>
 8015dba:	f104 0a19 	add.w	sl, r4, #25
 8015dbe:	68e3      	ldr	r3, [r4, #12]
 8015dc0:	6832      	ldr	r2, [r6, #0]
 8015dc2:	1a9b      	subs	r3, r3, r2
 8015dc4:	42ab      	cmp	r3, r5
 8015dc6:	dc26      	bgt.n	8015e16 <_printf_common+0x96>
 8015dc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015dcc:	6822      	ldr	r2, [r4, #0]
 8015dce:	3b00      	subs	r3, #0
 8015dd0:	bf18      	it	ne
 8015dd2:	2301      	movne	r3, #1
 8015dd4:	0692      	lsls	r2, r2, #26
 8015dd6:	d42b      	bmi.n	8015e30 <_printf_common+0xb0>
 8015dd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015ddc:	4641      	mov	r1, r8
 8015dde:	4638      	mov	r0, r7
 8015de0:	47c8      	blx	r9
 8015de2:	3001      	adds	r0, #1
 8015de4:	d01e      	beq.n	8015e24 <_printf_common+0xa4>
 8015de6:	6823      	ldr	r3, [r4, #0]
 8015de8:	6922      	ldr	r2, [r4, #16]
 8015dea:	f003 0306 	and.w	r3, r3, #6
 8015dee:	2b04      	cmp	r3, #4
 8015df0:	bf02      	ittt	eq
 8015df2:	68e5      	ldreq	r5, [r4, #12]
 8015df4:	6833      	ldreq	r3, [r6, #0]
 8015df6:	1aed      	subeq	r5, r5, r3
 8015df8:	68a3      	ldr	r3, [r4, #8]
 8015dfa:	bf0c      	ite	eq
 8015dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e00:	2500      	movne	r5, #0
 8015e02:	4293      	cmp	r3, r2
 8015e04:	bfc4      	itt	gt
 8015e06:	1a9b      	subgt	r3, r3, r2
 8015e08:	18ed      	addgt	r5, r5, r3
 8015e0a:	2600      	movs	r6, #0
 8015e0c:	341a      	adds	r4, #26
 8015e0e:	42b5      	cmp	r5, r6
 8015e10:	d11a      	bne.n	8015e48 <_printf_common+0xc8>
 8015e12:	2000      	movs	r0, #0
 8015e14:	e008      	b.n	8015e28 <_printf_common+0xa8>
 8015e16:	2301      	movs	r3, #1
 8015e18:	4652      	mov	r2, sl
 8015e1a:	4641      	mov	r1, r8
 8015e1c:	4638      	mov	r0, r7
 8015e1e:	47c8      	blx	r9
 8015e20:	3001      	adds	r0, #1
 8015e22:	d103      	bne.n	8015e2c <_printf_common+0xac>
 8015e24:	f04f 30ff 	mov.w	r0, #4294967295
 8015e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e2c:	3501      	adds	r5, #1
 8015e2e:	e7c6      	b.n	8015dbe <_printf_common+0x3e>
 8015e30:	18e1      	adds	r1, r4, r3
 8015e32:	1c5a      	adds	r2, r3, #1
 8015e34:	2030      	movs	r0, #48	@ 0x30
 8015e36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015e3a:	4422      	add	r2, r4
 8015e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015e40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015e44:	3302      	adds	r3, #2
 8015e46:	e7c7      	b.n	8015dd8 <_printf_common+0x58>
 8015e48:	2301      	movs	r3, #1
 8015e4a:	4622      	mov	r2, r4
 8015e4c:	4641      	mov	r1, r8
 8015e4e:	4638      	mov	r0, r7
 8015e50:	47c8      	blx	r9
 8015e52:	3001      	adds	r0, #1
 8015e54:	d0e6      	beq.n	8015e24 <_printf_common+0xa4>
 8015e56:	3601      	adds	r6, #1
 8015e58:	e7d9      	b.n	8015e0e <_printf_common+0x8e>
	...

08015e5c <_printf_i>:
 8015e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015e60:	7e0f      	ldrb	r7, [r1, #24]
 8015e62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015e64:	2f78      	cmp	r7, #120	@ 0x78
 8015e66:	4691      	mov	r9, r2
 8015e68:	4680      	mov	r8, r0
 8015e6a:	460c      	mov	r4, r1
 8015e6c:	469a      	mov	sl, r3
 8015e6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015e72:	d807      	bhi.n	8015e84 <_printf_i+0x28>
 8015e74:	2f62      	cmp	r7, #98	@ 0x62
 8015e76:	d80a      	bhi.n	8015e8e <_printf_i+0x32>
 8015e78:	2f00      	cmp	r7, #0
 8015e7a:	f000 80d1 	beq.w	8016020 <_printf_i+0x1c4>
 8015e7e:	2f58      	cmp	r7, #88	@ 0x58
 8015e80:	f000 80b8 	beq.w	8015ff4 <_printf_i+0x198>
 8015e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015e88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015e8c:	e03a      	b.n	8015f04 <_printf_i+0xa8>
 8015e8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015e92:	2b15      	cmp	r3, #21
 8015e94:	d8f6      	bhi.n	8015e84 <_printf_i+0x28>
 8015e96:	a101      	add	r1, pc, #4	@ (adr r1, 8015e9c <_printf_i+0x40>)
 8015e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015e9c:	08015ef5 	.word	0x08015ef5
 8015ea0:	08015f09 	.word	0x08015f09
 8015ea4:	08015e85 	.word	0x08015e85
 8015ea8:	08015e85 	.word	0x08015e85
 8015eac:	08015e85 	.word	0x08015e85
 8015eb0:	08015e85 	.word	0x08015e85
 8015eb4:	08015f09 	.word	0x08015f09
 8015eb8:	08015e85 	.word	0x08015e85
 8015ebc:	08015e85 	.word	0x08015e85
 8015ec0:	08015e85 	.word	0x08015e85
 8015ec4:	08015e85 	.word	0x08015e85
 8015ec8:	08016007 	.word	0x08016007
 8015ecc:	08015f33 	.word	0x08015f33
 8015ed0:	08015fc1 	.word	0x08015fc1
 8015ed4:	08015e85 	.word	0x08015e85
 8015ed8:	08015e85 	.word	0x08015e85
 8015edc:	08016029 	.word	0x08016029
 8015ee0:	08015e85 	.word	0x08015e85
 8015ee4:	08015f33 	.word	0x08015f33
 8015ee8:	08015e85 	.word	0x08015e85
 8015eec:	08015e85 	.word	0x08015e85
 8015ef0:	08015fc9 	.word	0x08015fc9
 8015ef4:	6833      	ldr	r3, [r6, #0]
 8015ef6:	1d1a      	adds	r2, r3, #4
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	6032      	str	r2, [r6, #0]
 8015efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015f00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015f04:	2301      	movs	r3, #1
 8015f06:	e09c      	b.n	8016042 <_printf_i+0x1e6>
 8015f08:	6833      	ldr	r3, [r6, #0]
 8015f0a:	6820      	ldr	r0, [r4, #0]
 8015f0c:	1d19      	adds	r1, r3, #4
 8015f0e:	6031      	str	r1, [r6, #0]
 8015f10:	0606      	lsls	r6, r0, #24
 8015f12:	d501      	bpl.n	8015f18 <_printf_i+0xbc>
 8015f14:	681d      	ldr	r5, [r3, #0]
 8015f16:	e003      	b.n	8015f20 <_printf_i+0xc4>
 8015f18:	0645      	lsls	r5, r0, #25
 8015f1a:	d5fb      	bpl.n	8015f14 <_printf_i+0xb8>
 8015f1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015f20:	2d00      	cmp	r5, #0
 8015f22:	da03      	bge.n	8015f2c <_printf_i+0xd0>
 8015f24:	232d      	movs	r3, #45	@ 0x2d
 8015f26:	426d      	negs	r5, r5
 8015f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015f2c:	4858      	ldr	r0, [pc, #352]	@ (8016090 <_printf_i+0x234>)
 8015f2e:	230a      	movs	r3, #10
 8015f30:	e011      	b.n	8015f56 <_printf_i+0xfa>
 8015f32:	6821      	ldr	r1, [r4, #0]
 8015f34:	6833      	ldr	r3, [r6, #0]
 8015f36:	0608      	lsls	r0, r1, #24
 8015f38:	f853 5b04 	ldr.w	r5, [r3], #4
 8015f3c:	d402      	bmi.n	8015f44 <_printf_i+0xe8>
 8015f3e:	0649      	lsls	r1, r1, #25
 8015f40:	bf48      	it	mi
 8015f42:	b2ad      	uxthmi	r5, r5
 8015f44:	2f6f      	cmp	r7, #111	@ 0x6f
 8015f46:	4852      	ldr	r0, [pc, #328]	@ (8016090 <_printf_i+0x234>)
 8015f48:	6033      	str	r3, [r6, #0]
 8015f4a:	bf14      	ite	ne
 8015f4c:	230a      	movne	r3, #10
 8015f4e:	2308      	moveq	r3, #8
 8015f50:	2100      	movs	r1, #0
 8015f52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015f56:	6866      	ldr	r6, [r4, #4]
 8015f58:	60a6      	str	r6, [r4, #8]
 8015f5a:	2e00      	cmp	r6, #0
 8015f5c:	db05      	blt.n	8015f6a <_printf_i+0x10e>
 8015f5e:	6821      	ldr	r1, [r4, #0]
 8015f60:	432e      	orrs	r6, r5
 8015f62:	f021 0104 	bic.w	r1, r1, #4
 8015f66:	6021      	str	r1, [r4, #0]
 8015f68:	d04b      	beq.n	8016002 <_printf_i+0x1a6>
 8015f6a:	4616      	mov	r6, r2
 8015f6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8015f70:	fb03 5711 	mls	r7, r3, r1, r5
 8015f74:	5dc7      	ldrb	r7, [r0, r7]
 8015f76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015f7a:	462f      	mov	r7, r5
 8015f7c:	42bb      	cmp	r3, r7
 8015f7e:	460d      	mov	r5, r1
 8015f80:	d9f4      	bls.n	8015f6c <_printf_i+0x110>
 8015f82:	2b08      	cmp	r3, #8
 8015f84:	d10b      	bne.n	8015f9e <_printf_i+0x142>
 8015f86:	6823      	ldr	r3, [r4, #0]
 8015f88:	07df      	lsls	r7, r3, #31
 8015f8a:	d508      	bpl.n	8015f9e <_printf_i+0x142>
 8015f8c:	6923      	ldr	r3, [r4, #16]
 8015f8e:	6861      	ldr	r1, [r4, #4]
 8015f90:	4299      	cmp	r1, r3
 8015f92:	bfde      	ittt	le
 8015f94:	2330      	movle	r3, #48	@ 0x30
 8015f96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015f9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015f9e:	1b92      	subs	r2, r2, r6
 8015fa0:	6122      	str	r2, [r4, #16]
 8015fa2:	f8cd a000 	str.w	sl, [sp]
 8015fa6:	464b      	mov	r3, r9
 8015fa8:	aa03      	add	r2, sp, #12
 8015faa:	4621      	mov	r1, r4
 8015fac:	4640      	mov	r0, r8
 8015fae:	f7ff fee7 	bl	8015d80 <_printf_common>
 8015fb2:	3001      	adds	r0, #1
 8015fb4:	d14a      	bne.n	801604c <_printf_i+0x1f0>
 8015fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8015fba:	b004      	add	sp, #16
 8015fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fc0:	6823      	ldr	r3, [r4, #0]
 8015fc2:	f043 0320 	orr.w	r3, r3, #32
 8015fc6:	6023      	str	r3, [r4, #0]
 8015fc8:	4832      	ldr	r0, [pc, #200]	@ (8016094 <_printf_i+0x238>)
 8015fca:	2778      	movs	r7, #120	@ 0x78
 8015fcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015fd0:	6823      	ldr	r3, [r4, #0]
 8015fd2:	6831      	ldr	r1, [r6, #0]
 8015fd4:	061f      	lsls	r7, r3, #24
 8015fd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8015fda:	d402      	bmi.n	8015fe2 <_printf_i+0x186>
 8015fdc:	065f      	lsls	r7, r3, #25
 8015fde:	bf48      	it	mi
 8015fe0:	b2ad      	uxthmi	r5, r5
 8015fe2:	6031      	str	r1, [r6, #0]
 8015fe4:	07d9      	lsls	r1, r3, #31
 8015fe6:	bf44      	itt	mi
 8015fe8:	f043 0320 	orrmi.w	r3, r3, #32
 8015fec:	6023      	strmi	r3, [r4, #0]
 8015fee:	b11d      	cbz	r5, 8015ff8 <_printf_i+0x19c>
 8015ff0:	2310      	movs	r3, #16
 8015ff2:	e7ad      	b.n	8015f50 <_printf_i+0xf4>
 8015ff4:	4826      	ldr	r0, [pc, #152]	@ (8016090 <_printf_i+0x234>)
 8015ff6:	e7e9      	b.n	8015fcc <_printf_i+0x170>
 8015ff8:	6823      	ldr	r3, [r4, #0]
 8015ffa:	f023 0320 	bic.w	r3, r3, #32
 8015ffe:	6023      	str	r3, [r4, #0]
 8016000:	e7f6      	b.n	8015ff0 <_printf_i+0x194>
 8016002:	4616      	mov	r6, r2
 8016004:	e7bd      	b.n	8015f82 <_printf_i+0x126>
 8016006:	6833      	ldr	r3, [r6, #0]
 8016008:	6825      	ldr	r5, [r4, #0]
 801600a:	6961      	ldr	r1, [r4, #20]
 801600c:	1d18      	adds	r0, r3, #4
 801600e:	6030      	str	r0, [r6, #0]
 8016010:	062e      	lsls	r6, r5, #24
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	d501      	bpl.n	801601a <_printf_i+0x1be>
 8016016:	6019      	str	r1, [r3, #0]
 8016018:	e002      	b.n	8016020 <_printf_i+0x1c4>
 801601a:	0668      	lsls	r0, r5, #25
 801601c:	d5fb      	bpl.n	8016016 <_printf_i+0x1ba>
 801601e:	8019      	strh	r1, [r3, #0]
 8016020:	2300      	movs	r3, #0
 8016022:	6123      	str	r3, [r4, #16]
 8016024:	4616      	mov	r6, r2
 8016026:	e7bc      	b.n	8015fa2 <_printf_i+0x146>
 8016028:	6833      	ldr	r3, [r6, #0]
 801602a:	1d1a      	adds	r2, r3, #4
 801602c:	6032      	str	r2, [r6, #0]
 801602e:	681e      	ldr	r6, [r3, #0]
 8016030:	6862      	ldr	r2, [r4, #4]
 8016032:	2100      	movs	r1, #0
 8016034:	4630      	mov	r0, r6
 8016036:	f7ea f8e3 	bl	8000200 <memchr>
 801603a:	b108      	cbz	r0, 8016040 <_printf_i+0x1e4>
 801603c:	1b80      	subs	r0, r0, r6
 801603e:	6060      	str	r0, [r4, #4]
 8016040:	6863      	ldr	r3, [r4, #4]
 8016042:	6123      	str	r3, [r4, #16]
 8016044:	2300      	movs	r3, #0
 8016046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801604a:	e7aa      	b.n	8015fa2 <_printf_i+0x146>
 801604c:	6923      	ldr	r3, [r4, #16]
 801604e:	4632      	mov	r2, r6
 8016050:	4649      	mov	r1, r9
 8016052:	4640      	mov	r0, r8
 8016054:	47d0      	blx	sl
 8016056:	3001      	adds	r0, #1
 8016058:	d0ad      	beq.n	8015fb6 <_printf_i+0x15a>
 801605a:	6823      	ldr	r3, [r4, #0]
 801605c:	079b      	lsls	r3, r3, #30
 801605e:	d413      	bmi.n	8016088 <_printf_i+0x22c>
 8016060:	68e0      	ldr	r0, [r4, #12]
 8016062:	9b03      	ldr	r3, [sp, #12]
 8016064:	4298      	cmp	r0, r3
 8016066:	bfb8      	it	lt
 8016068:	4618      	movlt	r0, r3
 801606a:	e7a6      	b.n	8015fba <_printf_i+0x15e>
 801606c:	2301      	movs	r3, #1
 801606e:	4632      	mov	r2, r6
 8016070:	4649      	mov	r1, r9
 8016072:	4640      	mov	r0, r8
 8016074:	47d0      	blx	sl
 8016076:	3001      	adds	r0, #1
 8016078:	d09d      	beq.n	8015fb6 <_printf_i+0x15a>
 801607a:	3501      	adds	r5, #1
 801607c:	68e3      	ldr	r3, [r4, #12]
 801607e:	9903      	ldr	r1, [sp, #12]
 8016080:	1a5b      	subs	r3, r3, r1
 8016082:	42ab      	cmp	r3, r5
 8016084:	dcf2      	bgt.n	801606c <_printf_i+0x210>
 8016086:	e7eb      	b.n	8016060 <_printf_i+0x204>
 8016088:	2500      	movs	r5, #0
 801608a:	f104 0619 	add.w	r6, r4, #25
 801608e:	e7f5      	b.n	801607c <_printf_i+0x220>
 8016090:	08016d2c 	.word	0x08016d2c
 8016094:	08016d3d 	.word	0x08016d3d

08016098 <_scanf_chars>:
 8016098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801609c:	4615      	mov	r5, r2
 801609e:	688a      	ldr	r2, [r1, #8]
 80160a0:	4680      	mov	r8, r0
 80160a2:	460c      	mov	r4, r1
 80160a4:	b932      	cbnz	r2, 80160b4 <_scanf_chars+0x1c>
 80160a6:	698a      	ldr	r2, [r1, #24]
 80160a8:	2a00      	cmp	r2, #0
 80160aa:	bf14      	ite	ne
 80160ac:	f04f 32ff 	movne.w	r2, #4294967295
 80160b0:	2201      	moveq	r2, #1
 80160b2:	608a      	str	r2, [r1, #8]
 80160b4:	6822      	ldr	r2, [r4, #0]
 80160b6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8016148 <_scanf_chars+0xb0>
 80160ba:	06d1      	lsls	r1, r2, #27
 80160bc:	bf5f      	itttt	pl
 80160be:	681a      	ldrpl	r2, [r3, #0]
 80160c0:	1d11      	addpl	r1, r2, #4
 80160c2:	6019      	strpl	r1, [r3, #0]
 80160c4:	6816      	ldrpl	r6, [r2, #0]
 80160c6:	2700      	movs	r7, #0
 80160c8:	69a0      	ldr	r0, [r4, #24]
 80160ca:	b188      	cbz	r0, 80160f0 <_scanf_chars+0x58>
 80160cc:	2801      	cmp	r0, #1
 80160ce:	d107      	bne.n	80160e0 <_scanf_chars+0x48>
 80160d0:	682b      	ldr	r3, [r5, #0]
 80160d2:	781a      	ldrb	r2, [r3, #0]
 80160d4:	6963      	ldr	r3, [r4, #20]
 80160d6:	5c9b      	ldrb	r3, [r3, r2]
 80160d8:	b953      	cbnz	r3, 80160f0 <_scanf_chars+0x58>
 80160da:	2f00      	cmp	r7, #0
 80160dc:	d031      	beq.n	8016142 <_scanf_chars+0xaa>
 80160de:	e022      	b.n	8016126 <_scanf_chars+0x8e>
 80160e0:	2802      	cmp	r0, #2
 80160e2:	d120      	bne.n	8016126 <_scanf_chars+0x8e>
 80160e4:	682b      	ldr	r3, [r5, #0]
 80160e6:	781b      	ldrb	r3, [r3, #0]
 80160e8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80160ec:	071b      	lsls	r3, r3, #28
 80160ee:	d41a      	bmi.n	8016126 <_scanf_chars+0x8e>
 80160f0:	6823      	ldr	r3, [r4, #0]
 80160f2:	06da      	lsls	r2, r3, #27
 80160f4:	bf5e      	ittt	pl
 80160f6:	682b      	ldrpl	r3, [r5, #0]
 80160f8:	781b      	ldrbpl	r3, [r3, #0]
 80160fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80160fe:	682a      	ldr	r2, [r5, #0]
 8016100:	686b      	ldr	r3, [r5, #4]
 8016102:	3201      	adds	r2, #1
 8016104:	602a      	str	r2, [r5, #0]
 8016106:	68a2      	ldr	r2, [r4, #8]
 8016108:	3b01      	subs	r3, #1
 801610a:	3a01      	subs	r2, #1
 801610c:	606b      	str	r3, [r5, #4]
 801610e:	3701      	adds	r7, #1
 8016110:	60a2      	str	r2, [r4, #8]
 8016112:	b142      	cbz	r2, 8016126 <_scanf_chars+0x8e>
 8016114:	2b00      	cmp	r3, #0
 8016116:	dcd7      	bgt.n	80160c8 <_scanf_chars+0x30>
 8016118:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801611c:	4629      	mov	r1, r5
 801611e:	4640      	mov	r0, r8
 8016120:	4798      	blx	r3
 8016122:	2800      	cmp	r0, #0
 8016124:	d0d0      	beq.n	80160c8 <_scanf_chars+0x30>
 8016126:	6823      	ldr	r3, [r4, #0]
 8016128:	f013 0310 	ands.w	r3, r3, #16
 801612c:	d105      	bne.n	801613a <_scanf_chars+0xa2>
 801612e:	68e2      	ldr	r2, [r4, #12]
 8016130:	3201      	adds	r2, #1
 8016132:	60e2      	str	r2, [r4, #12]
 8016134:	69a2      	ldr	r2, [r4, #24]
 8016136:	b102      	cbz	r2, 801613a <_scanf_chars+0xa2>
 8016138:	7033      	strb	r3, [r6, #0]
 801613a:	6923      	ldr	r3, [r4, #16]
 801613c:	443b      	add	r3, r7
 801613e:	6123      	str	r3, [r4, #16]
 8016140:	2000      	movs	r0, #0
 8016142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016146:	bf00      	nop
 8016148:	08016c1b 	.word	0x08016c1b

0801614c <_scanf_i>:
 801614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016150:	4698      	mov	r8, r3
 8016152:	4b74      	ldr	r3, [pc, #464]	@ (8016324 <_scanf_i+0x1d8>)
 8016154:	460c      	mov	r4, r1
 8016156:	4682      	mov	sl, r0
 8016158:	4616      	mov	r6, r2
 801615a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801615e:	b087      	sub	sp, #28
 8016160:	ab03      	add	r3, sp, #12
 8016162:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016166:	4b70      	ldr	r3, [pc, #448]	@ (8016328 <_scanf_i+0x1dc>)
 8016168:	69a1      	ldr	r1, [r4, #24]
 801616a:	4a70      	ldr	r2, [pc, #448]	@ (801632c <_scanf_i+0x1e0>)
 801616c:	2903      	cmp	r1, #3
 801616e:	bf08      	it	eq
 8016170:	461a      	moveq	r2, r3
 8016172:	68a3      	ldr	r3, [r4, #8]
 8016174:	9201      	str	r2, [sp, #4]
 8016176:	1e5a      	subs	r2, r3, #1
 8016178:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801617c:	bf88      	it	hi
 801617e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8016182:	4627      	mov	r7, r4
 8016184:	bf82      	ittt	hi
 8016186:	eb03 0905 	addhi.w	r9, r3, r5
 801618a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801618e:	60a3      	strhi	r3, [r4, #8]
 8016190:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016194:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8016198:	bf98      	it	ls
 801619a:	f04f 0900 	movls.w	r9, #0
 801619e:	6023      	str	r3, [r4, #0]
 80161a0:	463d      	mov	r5, r7
 80161a2:	f04f 0b00 	mov.w	fp, #0
 80161a6:	6831      	ldr	r1, [r6, #0]
 80161a8:	ab03      	add	r3, sp, #12
 80161aa:	7809      	ldrb	r1, [r1, #0]
 80161ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80161b0:	2202      	movs	r2, #2
 80161b2:	f7ea f825 	bl	8000200 <memchr>
 80161b6:	b328      	cbz	r0, 8016204 <_scanf_i+0xb8>
 80161b8:	f1bb 0f01 	cmp.w	fp, #1
 80161bc:	d159      	bne.n	8016272 <_scanf_i+0x126>
 80161be:	6862      	ldr	r2, [r4, #4]
 80161c0:	b92a      	cbnz	r2, 80161ce <_scanf_i+0x82>
 80161c2:	6822      	ldr	r2, [r4, #0]
 80161c4:	2108      	movs	r1, #8
 80161c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80161ca:	6061      	str	r1, [r4, #4]
 80161cc:	6022      	str	r2, [r4, #0]
 80161ce:	6822      	ldr	r2, [r4, #0]
 80161d0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80161d4:	6022      	str	r2, [r4, #0]
 80161d6:	68a2      	ldr	r2, [r4, #8]
 80161d8:	1e51      	subs	r1, r2, #1
 80161da:	60a1      	str	r1, [r4, #8]
 80161dc:	b192      	cbz	r2, 8016204 <_scanf_i+0xb8>
 80161de:	6832      	ldr	r2, [r6, #0]
 80161e0:	1c51      	adds	r1, r2, #1
 80161e2:	6031      	str	r1, [r6, #0]
 80161e4:	7812      	ldrb	r2, [r2, #0]
 80161e6:	f805 2b01 	strb.w	r2, [r5], #1
 80161ea:	6872      	ldr	r2, [r6, #4]
 80161ec:	3a01      	subs	r2, #1
 80161ee:	2a00      	cmp	r2, #0
 80161f0:	6072      	str	r2, [r6, #4]
 80161f2:	dc07      	bgt.n	8016204 <_scanf_i+0xb8>
 80161f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80161f8:	4631      	mov	r1, r6
 80161fa:	4650      	mov	r0, sl
 80161fc:	4790      	blx	r2
 80161fe:	2800      	cmp	r0, #0
 8016200:	f040 8085 	bne.w	801630e <_scanf_i+0x1c2>
 8016204:	f10b 0b01 	add.w	fp, fp, #1
 8016208:	f1bb 0f03 	cmp.w	fp, #3
 801620c:	d1cb      	bne.n	80161a6 <_scanf_i+0x5a>
 801620e:	6863      	ldr	r3, [r4, #4]
 8016210:	b90b      	cbnz	r3, 8016216 <_scanf_i+0xca>
 8016212:	230a      	movs	r3, #10
 8016214:	6063      	str	r3, [r4, #4]
 8016216:	6863      	ldr	r3, [r4, #4]
 8016218:	4945      	ldr	r1, [pc, #276]	@ (8016330 <_scanf_i+0x1e4>)
 801621a:	6960      	ldr	r0, [r4, #20]
 801621c:	1ac9      	subs	r1, r1, r3
 801621e:	f000 f889 	bl	8016334 <__sccl>
 8016222:	f04f 0b00 	mov.w	fp, #0
 8016226:	68a3      	ldr	r3, [r4, #8]
 8016228:	6822      	ldr	r2, [r4, #0]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d03d      	beq.n	80162aa <_scanf_i+0x15e>
 801622e:	6831      	ldr	r1, [r6, #0]
 8016230:	6960      	ldr	r0, [r4, #20]
 8016232:	f891 c000 	ldrb.w	ip, [r1]
 8016236:	f810 000c 	ldrb.w	r0, [r0, ip]
 801623a:	2800      	cmp	r0, #0
 801623c:	d035      	beq.n	80162aa <_scanf_i+0x15e>
 801623e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8016242:	d124      	bne.n	801628e <_scanf_i+0x142>
 8016244:	0510      	lsls	r0, r2, #20
 8016246:	d522      	bpl.n	801628e <_scanf_i+0x142>
 8016248:	f10b 0b01 	add.w	fp, fp, #1
 801624c:	f1b9 0f00 	cmp.w	r9, #0
 8016250:	d003      	beq.n	801625a <_scanf_i+0x10e>
 8016252:	3301      	adds	r3, #1
 8016254:	f109 39ff 	add.w	r9, r9, #4294967295
 8016258:	60a3      	str	r3, [r4, #8]
 801625a:	6873      	ldr	r3, [r6, #4]
 801625c:	3b01      	subs	r3, #1
 801625e:	2b00      	cmp	r3, #0
 8016260:	6073      	str	r3, [r6, #4]
 8016262:	dd1b      	ble.n	801629c <_scanf_i+0x150>
 8016264:	6833      	ldr	r3, [r6, #0]
 8016266:	3301      	adds	r3, #1
 8016268:	6033      	str	r3, [r6, #0]
 801626a:	68a3      	ldr	r3, [r4, #8]
 801626c:	3b01      	subs	r3, #1
 801626e:	60a3      	str	r3, [r4, #8]
 8016270:	e7d9      	b.n	8016226 <_scanf_i+0xda>
 8016272:	f1bb 0f02 	cmp.w	fp, #2
 8016276:	d1ae      	bne.n	80161d6 <_scanf_i+0x8a>
 8016278:	6822      	ldr	r2, [r4, #0]
 801627a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801627e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8016282:	d1c4      	bne.n	801620e <_scanf_i+0xc2>
 8016284:	2110      	movs	r1, #16
 8016286:	6061      	str	r1, [r4, #4]
 8016288:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801628c:	e7a2      	b.n	80161d4 <_scanf_i+0x88>
 801628e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8016292:	6022      	str	r2, [r4, #0]
 8016294:	780b      	ldrb	r3, [r1, #0]
 8016296:	f805 3b01 	strb.w	r3, [r5], #1
 801629a:	e7de      	b.n	801625a <_scanf_i+0x10e>
 801629c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80162a0:	4631      	mov	r1, r6
 80162a2:	4650      	mov	r0, sl
 80162a4:	4798      	blx	r3
 80162a6:	2800      	cmp	r0, #0
 80162a8:	d0df      	beq.n	801626a <_scanf_i+0x11e>
 80162aa:	6823      	ldr	r3, [r4, #0]
 80162ac:	05d9      	lsls	r1, r3, #23
 80162ae:	d50d      	bpl.n	80162cc <_scanf_i+0x180>
 80162b0:	42bd      	cmp	r5, r7
 80162b2:	d909      	bls.n	80162c8 <_scanf_i+0x17c>
 80162b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80162b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80162bc:	4632      	mov	r2, r6
 80162be:	4650      	mov	r0, sl
 80162c0:	4798      	blx	r3
 80162c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80162c6:	464d      	mov	r5, r9
 80162c8:	42bd      	cmp	r5, r7
 80162ca:	d028      	beq.n	801631e <_scanf_i+0x1d2>
 80162cc:	6822      	ldr	r2, [r4, #0]
 80162ce:	f012 0210 	ands.w	r2, r2, #16
 80162d2:	d113      	bne.n	80162fc <_scanf_i+0x1b0>
 80162d4:	702a      	strb	r2, [r5, #0]
 80162d6:	6863      	ldr	r3, [r4, #4]
 80162d8:	9e01      	ldr	r6, [sp, #4]
 80162da:	4639      	mov	r1, r7
 80162dc:	4650      	mov	r0, sl
 80162de:	47b0      	blx	r6
 80162e0:	f8d8 3000 	ldr.w	r3, [r8]
 80162e4:	6821      	ldr	r1, [r4, #0]
 80162e6:	1d1a      	adds	r2, r3, #4
 80162e8:	f8c8 2000 	str.w	r2, [r8]
 80162ec:	f011 0f20 	tst.w	r1, #32
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	d00f      	beq.n	8016314 <_scanf_i+0x1c8>
 80162f4:	6018      	str	r0, [r3, #0]
 80162f6:	68e3      	ldr	r3, [r4, #12]
 80162f8:	3301      	adds	r3, #1
 80162fa:	60e3      	str	r3, [r4, #12]
 80162fc:	6923      	ldr	r3, [r4, #16]
 80162fe:	1bed      	subs	r5, r5, r7
 8016300:	445d      	add	r5, fp
 8016302:	442b      	add	r3, r5
 8016304:	6123      	str	r3, [r4, #16]
 8016306:	2000      	movs	r0, #0
 8016308:	b007      	add	sp, #28
 801630a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801630e:	f04f 0b00 	mov.w	fp, #0
 8016312:	e7ca      	b.n	80162aa <_scanf_i+0x15e>
 8016314:	07ca      	lsls	r2, r1, #31
 8016316:	bf4c      	ite	mi
 8016318:	8018      	strhmi	r0, [r3, #0]
 801631a:	6018      	strpl	r0, [r3, #0]
 801631c:	e7eb      	b.n	80162f6 <_scanf_i+0x1aa>
 801631e:	2001      	movs	r0, #1
 8016320:	e7f2      	b.n	8016308 <_scanf_i+0x1bc>
 8016322:	bf00      	nop
 8016324:	08016b18 	.word	0x08016b18
 8016328:	08015345 	.word	0x08015345
 801632c:	080165a9 	.word	0x080165a9
 8016330:	08016d5e 	.word	0x08016d5e

08016334 <__sccl>:
 8016334:	b570      	push	{r4, r5, r6, lr}
 8016336:	780b      	ldrb	r3, [r1, #0]
 8016338:	4604      	mov	r4, r0
 801633a:	2b5e      	cmp	r3, #94	@ 0x5e
 801633c:	bf0b      	itete	eq
 801633e:	784b      	ldrbeq	r3, [r1, #1]
 8016340:	1c4a      	addne	r2, r1, #1
 8016342:	1c8a      	addeq	r2, r1, #2
 8016344:	2100      	movne	r1, #0
 8016346:	bf08      	it	eq
 8016348:	2101      	moveq	r1, #1
 801634a:	3801      	subs	r0, #1
 801634c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8016350:	f800 1f01 	strb.w	r1, [r0, #1]!
 8016354:	42a8      	cmp	r0, r5
 8016356:	d1fb      	bne.n	8016350 <__sccl+0x1c>
 8016358:	b90b      	cbnz	r3, 801635e <__sccl+0x2a>
 801635a:	1e50      	subs	r0, r2, #1
 801635c:	bd70      	pop	{r4, r5, r6, pc}
 801635e:	f081 0101 	eor.w	r1, r1, #1
 8016362:	54e1      	strb	r1, [r4, r3]
 8016364:	4610      	mov	r0, r2
 8016366:	4602      	mov	r2, r0
 8016368:	f812 5b01 	ldrb.w	r5, [r2], #1
 801636c:	2d2d      	cmp	r5, #45	@ 0x2d
 801636e:	d005      	beq.n	801637c <__sccl+0x48>
 8016370:	2d5d      	cmp	r5, #93	@ 0x5d
 8016372:	d016      	beq.n	80163a2 <__sccl+0x6e>
 8016374:	2d00      	cmp	r5, #0
 8016376:	d0f1      	beq.n	801635c <__sccl+0x28>
 8016378:	462b      	mov	r3, r5
 801637a:	e7f2      	b.n	8016362 <__sccl+0x2e>
 801637c:	7846      	ldrb	r6, [r0, #1]
 801637e:	2e5d      	cmp	r6, #93	@ 0x5d
 8016380:	d0fa      	beq.n	8016378 <__sccl+0x44>
 8016382:	42b3      	cmp	r3, r6
 8016384:	dcf8      	bgt.n	8016378 <__sccl+0x44>
 8016386:	3002      	adds	r0, #2
 8016388:	461a      	mov	r2, r3
 801638a:	3201      	adds	r2, #1
 801638c:	4296      	cmp	r6, r2
 801638e:	54a1      	strb	r1, [r4, r2]
 8016390:	dcfb      	bgt.n	801638a <__sccl+0x56>
 8016392:	1af2      	subs	r2, r6, r3
 8016394:	3a01      	subs	r2, #1
 8016396:	1c5d      	adds	r5, r3, #1
 8016398:	42b3      	cmp	r3, r6
 801639a:	bfa8      	it	ge
 801639c:	2200      	movge	r2, #0
 801639e:	18ab      	adds	r3, r5, r2
 80163a0:	e7e1      	b.n	8016366 <__sccl+0x32>
 80163a2:	4610      	mov	r0, r2
 80163a4:	e7da      	b.n	801635c <__sccl+0x28>

080163a6 <__submore>:
 80163a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163aa:	460c      	mov	r4, r1
 80163ac:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80163ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80163b2:	4299      	cmp	r1, r3
 80163b4:	d11d      	bne.n	80163f2 <__submore+0x4c>
 80163b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80163ba:	f7ff f92d 	bl	8015618 <_malloc_r>
 80163be:	b918      	cbnz	r0, 80163c8 <__submore+0x22>
 80163c0:	f04f 30ff 	mov.w	r0, #4294967295
 80163c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80163cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80163ce:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80163d2:	6360      	str	r0, [r4, #52]	@ 0x34
 80163d4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80163d8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80163dc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80163e0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80163e4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80163e8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80163ec:	6020      	str	r0, [r4, #0]
 80163ee:	2000      	movs	r0, #0
 80163f0:	e7e8      	b.n	80163c4 <__submore+0x1e>
 80163f2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80163f4:	0077      	lsls	r7, r6, #1
 80163f6:	463a      	mov	r2, r7
 80163f8:	f000 f83a 	bl	8016470 <_realloc_r>
 80163fc:	4605      	mov	r5, r0
 80163fe:	2800      	cmp	r0, #0
 8016400:	d0de      	beq.n	80163c0 <__submore+0x1a>
 8016402:	eb00 0806 	add.w	r8, r0, r6
 8016406:	4601      	mov	r1, r0
 8016408:	4632      	mov	r2, r6
 801640a:	4640      	mov	r0, r8
 801640c:	f7ff f88a 	bl	8015524 <memcpy>
 8016410:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8016414:	f8c4 8000 	str.w	r8, [r4]
 8016418:	e7e9      	b.n	80163ee <__submore+0x48>

0801641a <memmove>:
 801641a:	4288      	cmp	r0, r1
 801641c:	b510      	push	{r4, lr}
 801641e:	eb01 0402 	add.w	r4, r1, r2
 8016422:	d902      	bls.n	801642a <memmove+0x10>
 8016424:	4284      	cmp	r4, r0
 8016426:	4623      	mov	r3, r4
 8016428:	d807      	bhi.n	801643a <memmove+0x20>
 801642a:	1e43      	subs	r3, r0, #1
 801642c:	42a1      	cmp	r1, r4
 801642e:	d008      	beq.n	8016442 <memmove+0x28>
 8016430:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016434:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016438:	e7f8      	b.n	801642c <memmove+0x12>
 801643a:	4402      	add	r2, r0
 801643c:	4601      	mov	r1, r0
 801643e:	428a      	cmp	r2, r1
 8016440:	d100      	bne.n	8016444 <memmove+0x2a>
 8016442:	bd10      	pop	{r4, pc}
 8016444:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016448:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801644c:	e7f7      	b.n	801643e <memmove+0x24>
	...

08016450 <_sbrk_r>:
 8016450:	b538      	push	{r3, r4, r5, lr}
 8016452:	4d06      	ldr	r5, [pc, #24]	@ (801646c <_sbrk_r+0x1c>)
 8016454:	2300      	movs	r3, #0
 8016456:	4604      	mov	r4, r0
 8016458:	4608      	mov	r0, r1
 801645a:	602b      	str	r3, [r5, #0]
 801645c:	f7f0 fdf2 	bl	8007044 <_sbrk>
 8016460:	1c43      	adds	r3, r0, #1
 8016462:	d102      	bne.n	801646a <_sbrk_r+0x1a>
 8016464:	682b      	ldr	r3, [r5, #0]
 8016466:	b103      	cbz	r3, 801646a <_sbrk_r+0x1a>
 8016468:	6023      	str	r3, [r4, #0]
 801646a:	bd38      	pop	{r3, r4, r5, pc}
 801646c:	20005e3c 	.word	0x20005e3c

08016470 <_realloc_r>:
 8016470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016474:	4607      	mov	r7, r0
 8016476:	4614      	mov	r4, r2
 8016478:	460d      	mov	r5, r1
 801647a:	b921      	cbnz	r1, 8016486 <_realloc_r+0x16>
 801647c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016480:	4611      	mov	r1, r2
 8016482:	f7ff b8c9 	b.w	8015618 <_malloc_r>
 8016486:	b92a      	cbnz	r2, 8016494 <_realloc_r+0x24>
 8016488:	f7ff f85a 	bl	8015540 <_free_r>
 801648c:	4625      	mov	r5, r4
 801648e:	4628      	mov	r0, r5
 8016490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016494:	f000 f88a 	bl	80165ac <_malloc_usable_size_r>
 8016498:	4284      	cmp	r4, r0
 801649a:	4606      	mov	r6, r0
 801649c:	d802      	bhi.n	80164a4 <_realloc_r+0x34>
 801649e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80164a2:	d8f4      	bhi.n	801648e <_realloc_r+0x1e>
 80164a4:	4621      	mov	r1, r4
 80164a6:	4638      	mov	r0, r7
 80164a8:	f7ff f8b6 	bl	8015618 <_malloc_r>
 80164ac:	4680      	mov	r8, r0
 80164ae:	b908      	cbnz	r0, 80164b4 <_realloc_r+0x44>
 80164b0:	4645      	mov	r5, r8
 80164b2:	e7ec      	b.n	801648e <_realloc_r+0x1e>
 80164b4:	42b4      	cmp	r4, r6
 80164b6:	4622      	mov	r2, r4
 80164b8:	4629      	mov	r1, r5
 80164ba:	bf28      	it	cs
 80164bc:	4632      	movcs	r2, r6
 80164be:	f7ff f831 	bl	8015524 <memcpy>
 80164c2:	4629      	mov	r1, r5
 80164c4:	4638      	mov	r0, r7
 80164c6:	f7ff f83b 	bl	8015540 <_free_r>
 80164ca:	e7f1      	b.n	80164b0 <_realloc_r+0x40>

080164cc <_strtoul_l.isra.0>:
 80164cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80164d0:	4e34      	ldr	r6, [pc, #208]	@ (80165a4 <_strtoul_l.isra.0+0xd8>)
 80164d2:	4686      	mov	lr, r0
 80164d4:	460d      	mov	r5, r1
 80164d6:	4628      	mov	r0, r5
 80164d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80164dc:	5d37      	ldrb	r7, [r6, r4]
 80164de:	f017 0708 	ands.w	r7, r7, #8
 80164e2:	d1f8      	bne.n	80164d6 <_strtoul_l.isra.0+0xa>
 80164e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80164e6:	d110      	bne.n	801650a <_strtoul_l.isra.0+0x3e>
 80164e8:	782c      	ldrb	r4, [r5, #0]
 80164ea:	2701      	movs	r7, #1
 80164ec:	1c85      	adds	r5, r0, #2
 80164ee:	f033 0010 	bics.w	r0, r3, #16
 80164f2:	d115      	bne.n	8016520 <_strtoul_l.isra.0+0x54>
 80164f4:	2c30      	cmp	r4, #48	@ 0x30
 80164f6:	d10d      	bne.n	8016514 <_strtoul_l.isra.0+0x48>
 80164f8:	7828      	ldrb	r0, [r5, #0]
 80164fa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80164fe:	2858      	cmp	r0, #88	@ 0x58
 8016500:	d108      	bne.n	8016514 <_strtoul_l.isra.0+0x48>
 8016502:	786c      	ldrb	r4, [r5, #1]
 8016504:	3502      	adds	r5, #2
 8016506:	2310      	movs	r3, #16
 8016508:	e00a      	b.n	8016520 <_strtoul_l.isra.0+0x54>
 801650a:	2c2b      	cmp	r4, #43	@ 0x2b
 801650c:	bf04      	itt	eq
 801650e:	782c      	ldrbeq	r4, [r5, #0]
 8016510:	1c85      	addeq	r5, r0, #2
 8016512:	e7ec      	b.n	80164ee <_strtoul_l.isra.0+0x22>
 8016514:	2b00      	cmp	r3, #0
 8016516:	d1f6      	bne.n	8016506 <_strtoul_l.isra.0+0x3a>
 8016518:	2c30      	cmp	r4, #48	@ 0x30
 801651a:	bf14      	ite	ne
 801651c:	230a      	movne	r3, #10
 801651e:	2308      	moveq	r3, #8
 8016520:	f04f 38ff 	mov.w	r8, #4294967295
 8016524:	2600      	movs	r6, #0
 8016526:	fbb8 f8f3 	udiv	r8, r8, r3
 801652a:	fb03 f908 	mul.w	r9, r3, r8
 801652e:	ea6f 0909 	mvn.w	r9, r9
 8016532:	4630      	mov	r0, r6
 8016534:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016538:	f1bc 0f09 	cmp.w	ip, #9
 801653c:	d810      	bhi.n	8016560 <_strtoul_l.isra.0+0x94>
 801653e:	4664      	mov	r4, ip
 8016540:	42a3      	cmp	r3, r4
 8016542:	dd1e      	ble.n	8016582 <_strtoul_l.isra.0+0xb6>
 8016544:	f1b6 3fff 	cmp.w	r6, #4294967295
 8016548:	d007      	beq.n	801655a <_strtoul_l.isra.0+0x8e>
 801654a:	4580      	cmp	r8, r0
 801654c:	d316      	bcc.n	801657c <_strtoul_l.isra.0+0xb0>
 801654e:	d101      	bne.n	8016554 <_strtoul_l.isra.0+0x88>
 8016550:	45a1      	cmp	r9, r4
 8016552:	db13      	blt.n	801657c <_strtoul_l.isra.0+0xb0>
 8016554:	fb00 4003 	mla	r0, r0, r3, r4
 8016558:	2601      	movs	r6, #1
 801655a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801655e:	e7e9      	b.n	8016534 <_strtoul_l.isra.0+0x68>
 8016560:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016564:	f1bc 0f19 	cmp.w	ip, #25
 8016568:	d801      	bhi.n	801656e <_strtoul_l.isra.0+0xa2>
 801656a:	3c37      	subs	r4, #55	@ 0x37
 801656c:	e7e8      	b.n	8016540 <_strtoul_l.isra.0+0x74>
 801656e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016572:	f1bc 0f19 	cmp.w	ip, #25
 8016576:	d804      	bhi.n	8016582 <_strtoul_l.isra.0+0xb6>
 8016578:	3c57      	subs	r4, #87	@ 0x57
 801657a:	e7e1      	b.n	8016540 <_strtoul_l.isra.0+0x74>
 801657c:	f04f 36ff 	mov.w	r6, #4294967295
 8016580:	e7eb      	b.n	801655a <_strtoul_l.isra.0+0x8e>
 8016582:	1c73      	adds	r3, r6, #1
 8016584:	d106      	bne.n	8016594 <_strtoul_l.isra.0+0xc8>
 8016586:	2322      	movs	r3, #34	@ 0x22
 8016588:	f8ce 3000 	str.w	r3, [lr]
 801658c:	4630      	mov	r0, r6
 801658e:	b932      	cbnz	r2, 801659e <_strtoul_l.isra.0+0xd2>
 8016590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016594:	b107      	cbz	r7, 8016598 <_strtoul_l.isra.0+0xcc>
 8016596:	4240      	negs	r0, r0
 8016598:	2a00      	cmp	r2, #0
 801659a:	d0f9      	beq.n	8016590 <_strtoul_l.isra.0+0xc4>
 801659c:	b106      	cbz	r6, 80165a0 <_strtoul_l.isra.0+0xd4>
 801659e:	1e69      	subs	r1, r5, #1
 80165a0:	6011      	str	r1, [r2, #0]
 80165a2:	e7f5      	b.n	8016590 <_strtoul_l.isra.0+0xc4>
 80165a4:	08016c1b 	.word	0x08016c1b

080165a8 <_strtoul_r>:
 80165a8:	f7ff bf90 	b.w	80164cc <_strtoul_l.isra.0>

080165ac <_malloc_usable_size_r>:
 80165ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80165b0:	1f18      	subs	r0, r3, #4
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	bfbc      	itt	lt
 80165b6:	580b      	ldrlt	r3, [r1, r0]
 80165b8:	18c0      	addlt	r0, r0, r3
 80165ba:	4770      	bx	lr

080165bc <_init>:
 80165bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165be:	bf00      	nop
 80165c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165c2:	bc08      	pop	{r3}
 80165c4:	469e      	mov	lr, r3
 80165c6:	4770      	bx	lr

080165c8 <_fini>:
 80165c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ca:	bf00      	nop
 80165cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165ce:	bc08      	pop	{r3}
 80165d0:	469e      	mov	lr, r3
 80165d2:	4770      	bx	lr
