
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  08012fa0  08012fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080135a4  080135a4  00015064  2**0
                  CONTENTS
  4 .ARM          00000008  080135a4  080135a4  000145a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080135ac  080135ac  00015064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080135ac  080135ac  000145ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080135b0  080135b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080135b4  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000075f0  20000068  08013618  00015068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007658  08013618  00015658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035b66  00000000  00000000  00015094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c5f  00000000  00000000  0004abfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c48  00000000  00000000  00050860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002285  00000000  00000000  000534a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000307c2  00000000  00000000  0005572d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034513  00000000  00000000  00085eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123c95  00000000  00000000  000ba402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001de097  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c798  00000000  00000000  001de0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001ea874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012f88 	.word	0x08012f88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08012f88 	.word	0x08012f88

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 80005cc:	b480      	push	{r7}
 80005ce:	b087      	sub	sp, #28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
 80005d8:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005e0:	d11a      	bne.n	8000618 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	005a      	lsls	r2, r3, #1
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	085b      	lsrs	r3, r3, #1
 80005ea:	441a      	add	r2, r3
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80005fc:	4013      	ands	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	085b      	lsrs	r3, r3, #1
 8000604:	b29b      	uxth	r3, r3
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	4313      	orrs	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000616:	e00a      	b.n	800062e <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	085a      	lsrs	r2, r3, #1
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	441a      	add	r2, r3
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	fbb2 f3f3 	udiv	r3, r2, r3
 8000626:	b29b      	uxth	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	60da      	str	r2, [r3, #12]
}
 800062e:	bf00      	nop
 8000630:	371c      	adds	r7, #28
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000642:	23f0      	movs	r3, #240	@ 0xf0
 8000644:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000648:	681c      	ldr	r4, [r3, #0]
 800064a:	f00c f8c5 	bl	800c7d8 <HAL_RCC_GetPCLK2Freq>
 800064e:	4601      	mov	r1, r0
 8000650:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000654:	2200      	movs	r2, #0
 8000656:	4620      	mov	r0, r4
 8000658:	f7ff ffb8 	bl	80005cc <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 800065c:	1df9      	adds	r1, r7, #7
 800065e:	2364      	movs	r3, #100	@ 0x64
 8000660:	2201      	movs	r2, #1
 8000662:	4813      	ldr	r0, [pc, #76]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000664:	f010 f98a 	bl	801097c <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000668:	1df9      	adds	r1, r7, #7
 800066a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800066e:	2201      	movs	r2, #1
 8000670:	480f      	ldr	r0, [pc, #60]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000672:	f010 fa0c 	bl	8010a8e <HAL_UART_Receive>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <Temp_Sensor_Init+0x44>
		while(1);
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <Temp_Sensor_Init+0x74>)
 8000682:	681c      	ldr	r4, [r3, #0]
 8000684:	f00c f8a8 	bl	800c7d8 <HAL_RCC_GetPCLK2Freq>
 8000688:	4601      	mov	r1, r0
 800068a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800068e:	2200      	movs	r2, #0
 8000690:	4620      	mov	r0, r4
 8000692:	f7ff ff9b 	bl	80005cc <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2bf0      	cmp	r3, #240	@ 0xf0
 800069a:	d101      	bne.n	80006a0 <Temp_Sensor_Init+0x64>
		while(1);
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 80006a0:	20cc      	movs	r0, #204	@ 0xcc
 80006a2:	f000 f807 	bl	80006b4 <Temp_Sensor_Write>
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd90      	pop	{r4, r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000414 	.word	0x20000414

080006b4 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	e017      	b.n	80006f4 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 80006c4:	79fa      	ldrb	r2, [r7, #7]
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	fa42 f303 	asr.w	r3, r2, r3
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d006      	beq.n	80006e2 <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 80006d4:	f107 020c 	add.w	r2, r7, #12
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	4413      	add	r3, r2
 80006dc:	22ff      	movs	r2, #255	@ 0xff
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	e005      	b.n	80006ee <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 80006e2:	f107 020c 	add.w	r2, r7, #12
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	4413      	add	r3, r2
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	2b07      	cmp	r3, #7
 80006f8:	dde4      	ble.n	80006c4 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 80006fa:	f107 010c 	add.w	r1, r7, #12
 80006fe:	2364      	movs	r3, #100	@ 0x64
 8000700:	2208      	movs	r2, #8
 8000702:	4803      	ldr	r0, [pc, #12]	@ (8000710 <Temp_Sensor_Write+0x5c>)
 8000704:	f010 f93a 	bl	801097c <HAL_UART_Transmit>
}
 8000708:	bf00      	nop
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000414 	.word	0x20000414

08000714 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 800071e:	2300      	movs	r3, #0
 8000720:	71bb      	strb	r3, [r7, #6]
 8000722:	e00e      	b.n	8000742 <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	085b      	lsrs	r3, r3, #1
 8000728:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 800072a:	f000 f813 	bl	8000754 <Temp_Sensor_ReadBit>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d003      	beq.n	800073c <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800073a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	3301      	adds	r3, #1
 8000740:	71bb      	strb	r3, [r7, #6]
 8000742:	79bb      	ldrb	r3, [r7, #6]
 8000744:	2b07      	cmp	r3, #7
 8000746:	d9ed      	bls.n	8000724 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000748:	79fb      	ldrb	r3, [r7, #7]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 800075a:	23ff      	movs	r3, #255	@ 0xff
 800075c:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 800075e:	1df9      	adds	r1, r7, #7
 8000760:	2301      	movs	r3, #1
 8000762:	2201      	movs	r2, #1
 8000764:	4808      	ldr	r0, [pc, #32]	@ (8000788 <Temp_Sensor_ReadBit+0x34>)
 8000766:	f010 f909 	bl	801097c <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 800076a:	1db9      	adds	r1, r7, #6
 800076c:	2301      	movs	r3, #1
 800076e:	2201      	movs	r2, #1
 8000770:	4805      	ldr	r0, [pc, #20]	@ (8000788 <Temp_Sensor_ReadBit+0x34>)
 8000772:	f010 f98c 	bl	8010a8e <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000049c 	.word	0x2000049c

0800078c <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	80bb      	strh	r3, [r7, #4]

	Temp_Sensor_Init();
 800079e:	f7ff ff4d 	bl	800063c <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 80007a2:	20cc      	movs	r0, #204	@ 0xcc
 80007a4:	f7ff ff86 	bl	80006b4 <Temp_Sensor_Write>
	Temp_Sensor_Write(0x44);  // convert t
 80007a8:	2044      	movs	r0, #68	@ 0x44
 80007aa:	f7ff ff83 	bl	80006b4 <Temp_Sensor_Write>

	Temp_Sensor_Init();
 80007ae:	f7ff ff45 	bl	800063c <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 80007b2:	20cc      	movs	r0, #204	@ 0xcc
 80007b4:	f7ff ff7e 	bl	80006b4 <Temp_Sensor_Write>
	Temp_Sensor_Write(0xBE);  // read Scratch-pad
 80007b8:	20be      	movs	r0, #190	@ 0xbe
 80007ba:	f7ff ff7b 	bl	80006b4 <Temp_Sensor_Write>

	Temp_LSB = Temp_Sensor_ReadByte();
 80007be:	f7ff ffa9 	bl	8000714 <Temp_Sensor_ReadByte>
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
	Temp_MSB = Temp_Sensor_ReadByte();
 80007c6:	f7ff ffa5 	bl	8000714 <Temp_Sensor_ReadByte>
 80007ca:	4603      	mov	r3, r0
 80007cc:	71bb      	strb	r3, [r7, #6]

	Temp = ((Temp_MSB << 8)) | Temp_LSB;
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	021b      	lsls	r3, r3, #8
 80007d4:	b21a      	sxth	r2, r3
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	b21b      	sxth	r3, r3
 80007da:	4313      	orrs	r3, r2
 80007dc:	b21b      	sxth	r3, r3
 80007de:	80bb      	strh	r3, [r7, #4]

	return Temp;
 80007e0:	88bb      	ldrh	r3, [r7, #4]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <INA3221_Init>:
#include "INA3221.h"
#include "INA3221_reg.h"
#include "peripherals.h"

void INA3221_Init()
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 80007f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 f879 	bl	80008f0 <INA3221_write_reg>

	HAL_Delay(100);
 80007fe:	2064      	movs	r0, #100	@ 0x64
 8000800:	f007 fdde 	bl	80083c0 <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 8000804:	1dbb      	adds	r3, r7, #6
 8000806:	4619      	mov	r1, r3
 8000808:	20fe      	movs	r0, #254	@ 0xfe
 800080a:	f000 f83b 	bl	8000884 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	f245 4249 	movw	r2, #21577	@ 0x5449
 8000814:	4293      	cmp	r3, r2
 8000816:	d001      	beq.n	800081c <INA3221_Init+0x32>
		while(1);
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 800081c:	f647 5127 	movw	r1, #32039	@ 0x7d27
 8000820:	2000      	movs	r0, #0
 8000822:	f000 f865 	bl	80008f0 <INA3221_write_reg>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4619      	mov	r1, r3
 800083a:	2002      	movs	r0, #2
 800083c:	f000 f822 	bl	8000884 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3302      	adds	r3, #2
 8000844:	4619      	mov	r1, r3
 8000846:	2004      	movs	r0, #4
 8000848:	f000 f81c 	bl	8000884 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3304      	adds	r3, #4
 8000850:	4619      	mov	r1, r3
 8000852:	2006      	movs	r0, #6
 8000854:	f000 f816 	bl	8000884 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3306      	adds	r3, #6
 800085c:	4619      	mov	r1, r3
 800085e:	2001      	movs	r0, #1
 8000860:	f000 f810 	bl	8000884 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3308      	adds	r3, #8
 8000868:	4619      	mov	r1, r3
 800086a:	2003      	movs	r0, #3
 800086c:	f000 f80a 	bl	8000884 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	330a      	adds	r3, #10
 8000874:	4619      	mov	r1, r3
 8000876:	2005      	movs	r0, #5
 8000878:	f000 f804 	bl	8000884 <INA3221_read_reg>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af02      	add	r7, sp, #8
 800088a:	4603      	mov	r3, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
 8000894:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8000896:	2300      	movs	r3, #0
 8000898:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 800089a:	1dfa      	adds	r2, r7, #7
 800089c:	2364      	movs	r3, #100	@ 0x64
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2301      	movs	r3, #1
 80008a2:	2180      	movs	r1, #128	@ 0x80
 80008a4:	4811      	ldr	r0, [pc, #68]	@ (80008ec <INA3221_read_reg+0x68>)
 80008a6:	f009 fffb 	bl	800a8a0 <HAL_I2C_Master_Transmit>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d118      	bne.n	80008e2 <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 80008b0:	f107 0208 	add.w	r2, r7, #8
 80008b4:	2364      	movs	r3, #100	@ 0x64
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2302      	movs	r3, #2
 80008ba:	2180      	movs	r1, #128	@ 0x80
 80008bc:	480b      	ldr	r0, [pc, #44]	@ (80008ec <INA3221_read_reg+0x68>)
 80008be:	f00a f907 	bl	800aad0 <HAL_I2C_Master_Receive>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d10c      	bne.n	80008e2 <INA3221_read_reg+0x5e>
		{
			result = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80008cc:	7a3b      	ldrb	r3, [r7, #8]
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	021b      	lsls	r3, r3, #8
 80008d2:	b21a      	sxth	r2, r3
 80008d4:	7a7b      	ldrb	r3, [r7, #9]
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	4313      	orrs	r3, r2
 80008da:	b21b      	sxth	r3, r3
 80008dc:	b29a      	uxth	r2, r3
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80008e2:	68fb      	ldr	r3, [r7, #12]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000160 	.word	0x20000160

080008f0 <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	4603      	mov	r3, r0
 80008f8:	460a      	mov	r2, r1
 80008fa:	71fb      	strb	r3, [r7, #7]
 80008fc:	4613      	mov	r3, r2
 80008fe:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 8000900:	f04f 33ff 	mov.w	r3, #4294967295
 8000904:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 800090a:	88bb      	ldrh	r3, [r7, #4]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	b29b      	uxth	r3, r3
 8000910:	b2db      	uxtb	r3, r3
 8000912:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 8000914:	88bb      	ldrh	r3, [r7, #4]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 800091a:	f107 0208 	add.w	r2, r7, #8
 800091e:	2364      	movs	r3, #100	@ 0x64
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2303      	movs	r3, #3
 8000924:	2180      	movs	r1, #128	@ 0x80
 8000926:	4806      	ldr	r0, [pc, #24]	@ (8000940 <INA3221_write_reg+0x50>)
 8000928:	f009 ffba 	bl	800a8a0 <HAL_I2C_Master_Transmit>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d101      	bne.n	8000936 <INA3221_write_reg+0x46>
    {
        result = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 8000936:	68fb      	ldr	r3, [r7, #12]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000160 	.word	0x20000160

08000944 <RTC_Init>:
#include "RTC.h"


/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
	for (int retry = 0; retry < 3; retry++)
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	e00b      	b.n	8000968 <RTC_Init+0x24>
	{
		if (Get_DateTime_From_Network())
 8000950:	f000 f814 	bl	800097c <Get_DateTime_From_Network>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d10c      	bne.n	8000974 <RTC_Init+0x30>
		{
			return;
		}
		HAL_Delay(1000);
 800095a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800095e:	f007 fd2f 	bl	80083c0 <HAL_Delay>
	for (int retry = 0; retry < 3; retry++)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3301      	adds	r3, #1
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b02      	cmp	r3, #2
 800096c:	ddf0      	ble.n	8000950 <RTC_Init+0xc>
	}
	Set_Default_DateTime();
 800096e:	f000 f8f1 	bl	8000b54 <Set_Default_DateTime>
 8000972:	e000      	b.n	8000976 <RTC_Init+0x32>
			return;
 8000974:	bf00      	nop
}
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <Get_DateTime_From_Network>:

/*-----SINCRONIZZAZIONE RTC DA RETE-----*/
int Get_DateTime_From_Network(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b0a2      	sub	sp, #136	@ 0x88
 8000980:	af00      	add	r7, sp, #0
	char response[100] = {0};
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	2264      	movs	r2, #100	@ 0x64
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f011 fa2c 	bl	8011de8 <memset>
	RTC_DateTypeDef sDate = {0};
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 80009a2:	4869      	ldr	r0, [pc, #420]	@ (8000b48 <Get_DateTime_From_Network+0x1cc>)
 80009a4:	f000 fb26 	bl	8000ff4 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 fb37 	bl	8001020 <SIM_Receive_Response>

    char* cclk_pos = strstr(response, "+CCLK: \"");
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4965      	ldr	r1, [pc, #404]	@ (8000b4c <Get_DateTime_From_Network+0x1d0>)
 80009b8:	4618      	mov	r0, r3
 80009ba:	f011 fa4f 	bl	8011e5c <strstr>
 80009be:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (cclk_pos == NULL)
 80009c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d101      	bne.n	80009ce <Get_DateTime_From_Network+0x52>
	{
        return 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e0b8      	b.n	8000b40 <Get_DateTime_From_Network+0x1c4>
    }

    char* time_start = cclk_pos + 8;
 80009ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80009d2:	3308      	adds	r3, #8
 80009d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (strlen(time_start) < 17)
 80009d8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80009dc:	f7ff fc02 	bl	80001e4 <strlen>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b10      	cmp	r3, #16
 80009e4:	d801      	bhi.n	80009ea <Get_DateTime_From_Network+0x6e>
	{
		return 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e0aa      	b.n	8000b40 <Get_DateTime_From_Network+0x1c4>
	}

	sDate.Year = (time_start[0] - '0') * 10 + (time_start[1] - '0');
 80009ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	3b30      	subs	r3, #48	@ 0x30
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	461a      	mov	r2, r3
 80009f6:	0092      	lsls	r2, r2, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a02:	3301      	adds	r3, #1
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	3b30      	subs	r3, #48	@ 0x30
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (time_start[3] - '0') * 10 + (time_start[4] - '0');
 8000a10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a14:	3303      	adds	r3, #3
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	3b30      	subs	r3, #48	@ 0x30
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	0092      	lsls	r2, r2, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a2a:	3304      	adds	r3, #4
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	3b30      	subs	r3, #48	@ 0x30
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	767b      	strb	r3, [r7, #25]
	sDate.Date = (time_start[6] - '0') * 10 + (time_start[7] - '0');
 8000a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a3c:	3306      	adds	r3, #6
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	3b30      	subs	r3, #48	@ 0x30
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	461a      	mov	r2, r3
 8000a46:	0092      	lsls	r2, r2, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a52:	3307      	adds	r3, #7
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	3b30      	subs	r3, #48	@ 0x30
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (time_start[9] - '0') * 10 + (time_start[10] - '0');
 8000a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a64:	3309      	adds	r3, #9
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	3b30      	subs	r3, #48	@ 0x30
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	0092      	lsls	r2, r2, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a7a:	330a      	adds	r3, #10
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	3b30      	subs	r3, #48	@ 0x30
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (time_start[12] - '0') * 10 + (time_start[13] - '0');
 8000a88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a8c:	330c      	adds	r3, #12
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	3b30      	subs	r3, #48	@ 0x30
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	0092      	lsls	r2, r2, #2
 8000a98:	4413      	add	r3, r2
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000aa2:	330d      	adds	r3, #13
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	3b30      	subs	r3, #48	@ 0x30
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (time_start[15] - '0') * 10 + (time_start[16] - '0');
 8000ab0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ab4:	330f      	adds	r3, #15
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	3b30      	subs	r3, #48	@ 0x30
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	461a      	mov	r2, r3
 8000abe:	0092      	lsls	r2, r2, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000aca:	3310      	adds	r3, #16
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	3b30      	subs	r3, #48	@ 0x30
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	71bb      	strb	r3, [r7, #6]

	if (sDate.Month < 1 || sDate.Month > 12 ||
 8000ad8:	7e7b      	ldrb	r3, [r7, #25]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d011      	beq.n	8000b02 <Get_DateTime_From_Network+0x186>
 8000ade:	7e7b      	ldrb	r3, [r7, #25]
 8000ae0:	2b0c      	cmp	r3, #12
 8000ae2:	d80e      	bhi.n	8000b02 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 8000ae4:	7ebb      	ldrb	r3, [r7, #26]
	if (sDate.Month < 1 || sDate.Month > 12 ||
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d00b      	beq.n	8000b02 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 8000aea:	7ebb      	ldrb	r3, [r7, #26]
 8000aec:	2b1f      	cmp	r3, #31
 8000aee:	d808      	bhi.n	8000b02 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 8000af0:	793b      	ldrb	r3, [r7, #4]
        sDate.Date < 1 || sDate.Date > 31 ||
 8000af2:	2b17      	cmp	r3, #23
 8000af4:	d805      	bhi.n	8000b02 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 8000af6:	797b      	ldrb	r3, [r7, #5]
 8000af8:	2b3b      	cmp	r3, #59	@ 0x3b
 8000afa:	d802      	bhi.n	8000b02 <Get_DateTime_From_Network+0x186>
 8000afc:	79bb      	ldrb	r3, [r7, #6]
 8000afe:	2b3b      	cmp	r3, #59	@ 0x3b
 8000b00:	d901      	bls.n	8000b06 <Get_DateTime_From_Network+0x18a>
        return 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e01c      	b.n	8000b40 <Get_DateTime_From_Network+0x1c4>
    }

	sDate.WeekDay = Calculate_Weekday(sDate.Year + 2000, sDate.Month, sDate.Date);
 8000b06:	7efb      	ldrb	r3, [r7, #27]
 8000b08:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	7e79      	ldrb	r1, [r7, #25]
 8000b10:	7eba      	ldrb	r2, [r7, #26]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f850 	bl	8000bb8 <Calculate_Weekday>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	763b      	strb	r3, [r7, #24]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b24:	f107 0318 	add.w	r3, r7, #24
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4808      	ldr	r0, [pc, #32]	@ (8000b50 <Get_DateTime_From_Network+0x1d4>)
 8000b2e:	f00c fd06 	bl	800d53e <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <Get_DateTime_From_Network+0x1d4>)
 8000b3a:	f00c fc07 	bl	800d34c <HAL_RTC_SetTime>
	return 1;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3788      	adds	r7, #136	@ 0x88
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	08012fa0 	.word	0x08012fa0
 8000b4c:	08012fac 	.word	0x08012fac
 8000b50:	200001f8 	.word	0x200001f8

08000b54 <Set_Default_DateTime>:

/*-----DATA E ORA DI DEFAULT 1/1/2020 00:00:00-----*/
void Set_Default_DateTime(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
    RTC_TimeTypeDef sTime = {0};
 8000b5e:	463b      	mov	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]

    // Default: 01/01/2020 00:00:00
    sDate.Year = 20;  // 2020
 8000b6c:	2314      	movs	r3, #20
 8000b6e:	75fb      	strb	r3, [r7, #23]
    sDate.Month = RTC_MONTH_JANUARY;
 8000b70:	2301      	movs	r3, #1
 8000b72:	757b      	strb	r3, [r7, #21]
    sDate.Date = 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	75bb      	strb	r3, [r7, #22]
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // 1 Jan 2020 era mercoledì
 8000b78:	2303      	movs	r3, #3
 8000b7a:	753b      	strb	r3, [r7, #20]

    sTime.Hours = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	70bb      	strb	r3, [r7, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	4619      	mov	r1, r3
 8000b98:	4806      	ldr	r0, [pc, #24]	@ (8000bb4 <Set_Default_DateTime+0x60>)
 8000b9a:	f00c fcd0 	bl	800d53e <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4803      	ldr	r0, [pc, #12]	@ (8000bb4 <Set_Default_DateTime+0x60>)
 8000ba6:	f00c fbd1 	bl	800d34c <HAL_RTC_SetTime>
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200001f8 	.word	0x200001f8

08000bb8 <Calculate_Weekday>:

/*-----CALCOLO GIORNO SETTIMANA-----*/
uint8_t Calculate_Weekday(uint16_t year, uint8_t month, uint8_t day)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	717b      	strb	r3, [r7, #5]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	713b      	strb	r3, [r7, #4]
    // Algoritmo di Zeller per calcolo giorno settimana
    if (month < 3) {
 8000bca:	797b      	ldrb	r3, [r7, #5]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d805      	bhi.n	8000bdc <Calculate_Weekday+0x24>
        month += 12;
 8000bd0:	797b      	ldrb	r3, [r7, #5]
 8000bd2:	330c      	adds	r3, #12
 8000bd4:	717b      	strb	r3, [r7, #5]
        year--;
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	80fb      	strh	r3, [r7, #6]
    }
    uint8_t zeller_day = (day + ((13 * (month + 1)) / 5) + year + (year / 4) - (year / 100) + (year / 400)) % 7;
 8000bdc:	7939      	ldrb	r1, [r7, #4]
 8000bde:	797b      	ldrb	r3, [r7, #5]
 8000be0:	1c5a      	adds	r2, r3, #1
 8000be2:	4613      	mov	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4413      	add	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	4a1e      	ldr	r2, [pc, #120]	@ (8000c68 <Calculate_Weekday+0xb0>)
 8000bee:	fb82 0203 	smull	r0, r2, r2, r3
 8000bf2:	1052      	asrs	r2, r2, #1
 8000bf4:	17db      	asrs	r3, r3, #31
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	18ca      	adds	r2, r1, r3
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	88fa      	ldrh	r2, [r7, #6]
 8000c00:	0892      	lsrs	r2, r2, #2
 8000c02:	b292      	uxth	r2, r2
 8000c04:	4413      	add	r3, r2
 8000c06:	88fa      	ldrh	r2, [r7, #6]
 8000c08:	4918      	ldr	r1, [pc, #96]	@ (8000c6c <Calculate_Weekday+0xb4>)
 8000c0a:	fba1 1202 	umull	r1, r2, r1, r2
 8000c0e:	0952      	lsrs	r2, r2, #5
 8000c10:	b292      	uxth	r2, r2
 8000c12:	1a9b      	subs	r3, r3, r2
 8000c14:	88fa      	ldrh	r2, [r7, #6]
 8000c16:	4915      	ldr	r1, [pc, #84]	@ (8000c6c <Calculate_Weekday+0xb4>)
 8000c18:	fba1 1202 	umull	r1, r2, r1, r2
 8000c1c:	09d2      	lsrs	r2, r2, #7
 8000c1e:	b292      	uxth	r2, r2
 8000c20:	441a      	add	r2, r3
 8000c22:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <Calculate_Weekday+0xb8>)
 8000c24:	fb83 1302 	smull	r1, r3, r3, r2
 8000c28:	4413      	add	r3, r2
 8000c2a:	1099      	asrs	r1, r3, #2
 8000c2c:	17d3      	asrs	r3, r2, #31
 8000c2e:	1ac9      	subs	r1, r1, r3
 8000c30:	460b      	mov	r3, r1
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	1ad1      	subs	r1, r2, r3
 8000c38:	460b      	mov	r3, r1
 8000c3a:	73fb      	strb	r3, [r7, #15]

    uint8_t hal_weekday_map[] = {RTC_WEEKDAY_SATURDAY, RTC_WEEKDAY_SUNDAY, RTC_WEEKDAY_MONDAY,
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c74 <Calculate_Weekday+0xbc>)
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c46:	6018      	str	r0, [r3, #0]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	8019      	strh	r1, [r3, #0]
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	0c0a      	lsrs	r2, r1, #16
 8000c50:	701a      	strb	r2, [r3, #0]
                                 RTC_WEEKDAY_TUESDAY, RTC_WEEKDAY_WEDNESDAY, RTC_WEEKDAY_THURSDAY, RTC_WEEKDAY_FRIDAY};

    return hal_weekday_map[zeller_day];
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	3310      	adds	r3, #16
 8000c56:	443b      	add	r3, r7
 8000c58:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	66666667 	.word	0x66666667
 8000c6c:	51eb851f 	.word	0x51eb851f
 8000c70:	92492493 	.word	0x92492493
 8000c74:	08012fb8 	.word	0x08012fb8

08000c78 <SIM_Init>:
#include <stdlib.h>
#include <SIM7000.h>

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
void SIM_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000c7e:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "a");
 8000c80:	49ab      	ldr	r1, [pc, #684]	@ (8000f30 <SIM_Init+0x2b8>)
 8000c82:	48ac      	ldr	r0, [pc, #688]	@ (8000f34 <SIM_Init+0x2bc>)
 8000c84:	f011 f850 	bl	8011d28 <siprintf>
	sprintf(sys.MQTT.clientID, "a");
 8000c88:	49a9      	ldr	r1, [pc, #676]	@ (8000f30 <SIM_Init+0x2b8>)
 8000c8a:	48ab      	ldr	r0, [pc, #684]	@ (8000f38 <SIM_Init+0x2c0>)
 8000c8c:	f011 f84c 	bl	8011d28 <siprintf>
	sprintf(sys.MQTT.server_name, "a");
 8000c90:	49a7      	ldr	r1, [pc, #668]	@ (8000f30 <SIM_Init+0x2b8>)
 8000c92:	48aa      	ldr	r0, [pc, #680]	@ (8000f3c <SIM_Init+0x2c4>)
 8000c94:	f011 f848 	bl	8011d28 <siprintf>
	sprintf(sys.MQTT.port, "a");
 8000c98:	49a5      	ldr	r1, [pc, #660]	@ (8000f30 <SIM_Init+0x2b8>)
 8000c9a:	48a9      	ldr	r0, [pc, #676]	@ (8000f40 <SIM_Init+0x2c8>)
 8000c9c:	f011 f844 	bl	8011d28 <siprintf>
	sprintf(sys.MQTT.username, "a");
 8000ca0:	49a3      	ldr	r1, [pc, #652]	@ (8000f30 <SIM_Init+0x2b8>)
 8000ca2:	48a8      	ldr	r0, [pc, #672]	@ (8000f44 <SIM_Init+0x2cc>)
 8000ca4:	f011 f840 	bl	8011d28 <siprintf>
	sprintf(sys.MQTT.password, "a");
 8000ca8:	49a1      	ldr	r1, [pc, #644]	@ (8000f30 <SIM_Init+0x2b8>)
 8000caa:	48a7      	ldr	r0, [pc, #668]	@ (8000f48 <SIM_Init+0x2d0>)
 8000cac:	f011 f83c 	bl	8011d28 <siprintf>
	strcpy(sys.MQTT.Data_Topic, config.data_topic);
 8000cb0:	49a6      	ldr	r1, [pc, #664]	@ (8000f4c <SIM_Init+0x2d4>)
 8000cb2:	48a7      	ldr	r0, [pc, #668]	@ (8000f50 <SIM_Init+0x2d8>)
 8000cb4:	f011 f914 	bl	8011ee0 <strcpy>
	strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8000cb8:	49a6      	ldr	r1, [pc, #664]	@ (8000f54 <SIM_Init+0x2dc>)
 8000cba:	48a7      	ldr	r0, [pc, #668]	@ (8000f58 <SIM_Init+0x2e0>)
 8000cbc:	f011 f910 	bl	8011ee0 <strcpy>
	strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8000cc0:	49a6      	ldr	r1, [pc, #664]	@ (8000f5c <SIM_Init+0x2e4>)
 8000cc2:	48a7      	ldr	r0, [pc, #668]	@ (8000f60 <SIM_Init+0x2e8>)
 8000cc4:	f011 f90c 	bl	8011ee0 <strcpy>

	SIM_Power_On();
 8000cc8:	f000 f97e 	bl	8000fc8 <SIM_Power_On>
	HAL_Delay(5000);
 8000ccc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000cd0:	f007 fb76 	bl	80083c0 <HAL_Delay>

	SIM_Send_Command("AT+IPR=921600\r");                                                          //baudrate a 921600
 8000cd4:	48a3      	ldr	r0, [pc, #652]	@ (8000f64 <SIM_Init+0x2ec>)
 8000cd6:	f000 f98d 	bl	8000ff4 <SIM_Send_Command>
	huart1.Init.BaudRate = 921600;
 8000cda:	4ba3      	ldr	r3, [pc, #652]	@ (8000f68 <SIM_Init+0x2f0>)
 8000cdc:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000ce0:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(LTE_UART);
 8000ce2:	48a1      	ldr	r0, [pc, #644]	@ (8000f68 <SIM_Init+0x2f0>)
 8000ce4:	f00f fda6 	bl	8010834 <HAL_UART_Init>
	SIM_Send_Command("AT+IFC=0,0\r");                                                             //no flow control
 8000ce8:	48a0      	ldr	r0, [pc, #640]	@ (8000f6c <SIM_Init+0x2f4>)
 8000cea:	f000 f983 	bl	8000ff4 <SIM_Send_Command>

	SIM_Send_Command("AT+CFUN=1\r");                                                              //full functionality
 8000cee:	48a0      	ldr	r0, [pc, #640]	@ (8000f70 <SIM_Init+0x2f8>)
 8000cf0:	f000 f980 	bl	8000ff4 <SIM_Send_Command>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //modalità solo LTE o NB-IoT
 8000cf4:	489f      	ldr	r0, [pc, #636]	@ (8000f74 <SIM_Init+0x2fc>)
 8000cf6:	f000 f97d 	bl	8000ff4 <SIM_Send_Command>

	SIM_Send_Command("AT+CMNB=2\r");                                                              //NB-IoT
 8000cfa:	489f      	ldr	r0, [pc, #636]	@ (8000f78 <SIM_Init+0x300>)
 8000cfc:	f000 f97a 	bl	8000ff4 <SIM_Send_Command>

	SIM_Send_Command("AT+NBSC=1\r");                                                              //abilitazione scrambling feature DA VEDERE SE L'OPERATORE LA RICHIEDE
 8000d00:	489e      	ldr	r0, [pc, #632]	@ (8000f7c <SIM_Init+0x304>)
 8000d02:	f000 f977 	bl	8000ff4 <SIM_Send_Command>

	SIM_Send_Command("AT+CEREG?\r");                                                              //controllo registrazione alla rete
 8000d06:	489e      	ldr	r0, [pc, #632]	@ (8000f80 <SIM_Init+0x308>)
 8000d08:	f000 f974 	bl	8000ff4 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 f985 	bl	8001020 <SIM_Receive_Response>
	int stat = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
	int n, stat_value;
	if(strstr(response, "+CEREG: ") != NULL)
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4998      	ldr	r1, [pc, #608]	@ (8000f84 <SIM_Init+0x30c>)
 8000d22:	4618      	mov	r0, r3
 8000d24:	f011 f89a 	bl	8011e5c <strstr>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d03a      	beq.n	8000da4 <SIM_Init+0x12c>
	{
		while(stat != 1)
 8000d2e:	e035      	b.n	8000d9c <SIM_Init+0x124>
		{
			if(sscanf(response, "+CEREG: %d,%d", &n, &stat_value) >= 2) 
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	f107 0208 	add.w	r2, r7, #8
 8000d36:	f107 000c 	add.w	r0, r7, #12
 8000d3a:	4993      	ldr	r1, [pc, #588]	@ (8000f88 <SIM_Init+0x310>)
 8000d3c:	f011 f816 	bl	8011d6c <siscanf>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	dd1e      	ble.n	8000d84 <SIM_Init+0x10c>
			{
				if(stat_value == 1 || stat_value == 5)
 8000d46:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000d4a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d006      	beq.n	8000d62 <SIM_Init+0xea>
 8000d54:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000d58:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b05      	cmp	r3, #5
 8000d60:	d103      	bne.n	8000d6a <SIM_Init+0xf2>
			    {
					 stat = 1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8000d68:	e018      	b.n	8000d9c <SIM_Init+0x124>
				}
				 else
				{
					SIM_Send_Command("AT+CEREG?\r");
 8000d6a:	4885      	ldr	r0, [pc, #532]	@ (8000f80 <SIM_Init+0x308>)
 8000d6c:	f000 f942 	bl	8000ff4 <SIM_Send_Command>
					SIM_Receive_Response(response);
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f953 	bl	8001020 <SIM_Receive_Response>
					HAL_Delay(1000);
 8000d7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d7e:	f007 fb1f 	bl	80083c0 <HAL_Delay>
 8000d82:	e00b      	b.n	8000d9c <SIM_Init+0x124>
				}
			}
			else  
			{
				SIM_Send_Command("AT+CEREG?\r");
 8000d84:	487e      	ldr	r0, [pc, #504]	@ (8000f80 <SIM_Init+0x308>)
 8000d86:	f000 f935 	bl	8000ff4 <SIM_Send_Command>
				SIM_Receive_Response(response);
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f946 	bl	8001020 <SIM_Receive_Response>
				HAL_Delay(1000);
 8000d94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d98:	f007 fb12 	bl	80083c0 <HAL_Delay>
		while(stat != 1)
 8000d9c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d1c5      	bne.n	8000d30 <SIM_Init+0xb8>
			}
		}

	}

	sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                    //configurazione APN
 8000da4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000da8:	4a62      	ldr	r2, [pc, #392]	@ (8000f34 <SIM_Init+0x2bc>)
 8000daa:	4978      	ldr	r1, [pc, #480]	@ (8000f8c <SIM_Init+0x314>)
 8000dac:	4618      	mov	r0, r3
 8000dae:	f010 ffbb 	bl	8011d28 <siprintf>
	SIM_Send_Command(command);
 8000db2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f91c 	bl	8000ff4 <SIM_Send_Command>

	SIM_Send_Command("AT+CNACT=1\r");                                                             //attivazione della rete
 8000dbc:	4874      	ldr	r0, [pc, #464]	@ (8000f90 <SIM_Init+0x318>)
 8000dbe:	f000 f919 	bl	8000ff4 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f92a 	bl	8001020 <SIM_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	4970      	ldr	r1, [pc, #448]	@ (8000f94 <SIM_Init+0x31c>)
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f011 f842 	bl	8011e5c <strstr>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d115      	bne.n	8000e0a <SIM_Init+0x192>
	{
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000dde:	e00b      	b.n	8000df8 <SIM_Init+0x180>
		{
			SIM_Send_Command("AT+CNACT=1\r");
 8000de0:	486b      	ldr	r0, [pc, #428]	@ (8000f90 <SIM_Init+0x318>)
 8000de2:	f000 f907 	bl	8000ff4 <SIM_Send_Command>
			SIM_Receive_Response(response);
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f918 	bl	8001020 <SIM_Receive_Response>
			HAL_Delay(1000);
 8000df0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000df4:	f007 fae4 	bl	80083c0 <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	4965      	ldr	r1, [pc, #404]	@ (8000f94 <SIM_Init+0x31c>)
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f011 f82c 	bl	8011e5c <strstr>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0ea      	beq.n	8000de0 <SIM_Init+0x168>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //verifica indirizzo IP
 8000e0a:	4863      	ldr	r0, [pc, #396]	@ (8000f98 <SIM_Init+0x320>)
 8000e0c:	f000 f8f2 	bl	8000ff4 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 f903 	bl	8001020 <SIM_Receive_Response>
	while(!SIM_Check_IP(response))
 8000e1a:	e00b      	b.n	8000e34 <SIM_Init+0x1bc>
	{
		SIM_Send_Command("AT+CNACT?\r");
 8000e1c:	485e      	ldr	r0, [pc, #376]	@ (8000f98 <SIM_Init+0x320>)
 8000e1e:	f000 f8e9 	bl	8000ff4 <SIM_Send_Command>
		SIM_Receive_Response(response);
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f8fa 	bl	8001020 <SIM_Receive_Response>
		HAL_Delay(1000);
 8000e2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e30:	f007 fac6 	bl	80083c0 <HAL_Delay>
	while(!SIM_Check_IP(response))
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 f909 	bl	8001050 <SIM_Check_IP>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0eb      	beq.n	8000e1c <SIM_Init+0x1a4>
	}

	sprintf(command, "AT+SMCONF=\"URL\",\"%s\",%s\r", sys.MQTT.server_name, sys.MQTT.port);       //configurazione MQTT
 8000e44:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8000e48:	4b3d      	ldr	r3, [pc, #244]	@ (8000f40 <SIM_Init+0x2c8>)
 8000e4a:	4a3c      	ldr	r2, [pc, #240]	@ (8000f3c <SIM_Init+0x2c4>)
 8000e4c:	4953      	ldr	r1, [pc, #332]	@ (8000f9c <SIM_Init+0x324>)
 8000e4e:	f010 ff6b 	bl	8011d28 <siprintf>
	SIM_Send_Command(command);
 8000e52:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f8cc 	bl	8000ff4 <SIM_Send_Command>

	sprintf(command, "AT+SMCONF=\"CLIENTID\",\"%s\"\r", sys.MQTT.clientID);
 8000e5c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e60:	4a35      	ldr	r2, [pc, #212]	@ (8000f38 <SIM_Init+0x2c0>)
 8000e62:	494f      	ldr	r1, [pc, #316]	@ (8000fa0 <SIM_Init+0x328>)
 8000e64:	4618      	mov	r0, r3
 8000e66:	f010 ff5f 	bl	8011d28 <siprintf>
	SIM_Send_Command(command);
 8000e6a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f8c0 	bl	8000ff4 <SIM_Send_Command>

	SIM_Send_Command("AT+SMCONF=\"KEEPTIME\",60\r");
 8000e74:	484b      	ldr	r0, [pc, #300]	@ (8000fa4 <SIM_Init+0x32c>)
 8000e76:	f000 f8bd 	bl	8000ff4 <SIM_Send_Command>

	sprintf(command, "AT+SMCONF=\"USERNAME\",\"%s\"\r", sys.MQTT.username);
 8000e7a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e7e:	4a31      	ldr	r2, [pc, #196]	@ (8000f44 <SIM_Init+0x2cc>)
 8000e80:	4949      	ldr	r1, [pc, #292]	@ (8000fa8 <SIM_Init+0x330>)
 8000e82:	4618      	mov	r0, r3
 8000e84:	f010 ff50 	bl	8011d28 <siprintf>
	SIM_Send_Command(command);
 8000e88:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f8b1 	bl	8000ff4 <SIM_Send_Command>

	sprintf(command, "AT+SMCONF=\"PASSWORD\",\"%s\"\r", sys.MQTT.password);
 8000e92:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000e96:	4a2c      	ldr	r2, [pc, #176]	@ (8000f48 <SIM_Init+0x2d0>)
 8000e98:	4944      	ldr	r1, [pc, #272]	@ (8000fac <SIM_Init+0x334>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f010 ff44 	bl	8011d28 <siprintf>
	SIM_Send_Command(command);
 8000ea0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 f8a5 	bl	8000ff4 <SIM_Send_Command>

	SIM_Send_Command("AT+SMCONF=\"QOS\",1\r");
 8000eaa:	4841      	ldr	r0, [pc, #260]	@ (8000fb0 <SIM_Init+0x338>)
 8000eac:	f000 f8a2 	bl	8000ff4 <SIM_Send_Command>

	SIM_Send_Command("AT+SMCONF=\"RETAIN\",0\r");
 8000eb0:	4840      	ldr	r0, [pc, #256]	@ (8000fb4 <SIM_Init+0x33c>)
 8000eb2:	f000 f89f 	bl	8000ff4 <SIM_Send_Command>

	sprintf(command, "AT+SMCONF=\"TOPIC\",\"%s\"\r", sys.MQTT.Data_Topic);
 8000eb6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000eba:	4a25      	ldr	r2, [pc, #148]	@ (8000f50 <SIM_Init+0x2d8>)
 8000ebc:	493e      	ldr	r1, [pc, #248]	@ (8000fb8 <SIM_Init+0x340>)
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f010 ff32 	bl	8011d28 <siprintf>
	SIM_Send_Command(command);
 8000ec4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 f893 	bl	8000ff4 <SIM_Send_Command>

	SIM_Send_Command("AT+SMCONN\r");                                                              //connessione al server MQTT
 8000ece:	483b      	ldr	r0, [pc, #236]	@ (8000fbc <SIM_Init+0x344>)
 8000ed0:	f000 f890 	bl	8000ff4 <SIM_Send_Command>

	SIM_Send_Command("AT+SMSTATE?\r");                                                            //verifica connessione al server MQTT
 8000ed4:	483a      	ldr	r0, [pc, #232]	@ (8000fc0 <SIM_Init+0x348>)
 8000ed6:	f000 f88d 	bl	8000ff4 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f89e 	bl	8001020 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response))
 8000ee4:	e00b      	b.n	8000efe <SIM_Init+0x286>
	{
		SIM_Send_Command("AT+SMSTATE?\r");
 8000ee6:	4836      	ldr	r0, [pc, #216]	@ (8000fc0 <SIM_Init+0x348>)
 8000ee8:	f000 f884 	bl	8000ff4 <SIM_Send_Command>
		SIM_Receive_Response(response);
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f895 	bl	8001020 <SIM_Receive_Response>
		HAL_Delay(1000);
 8000ef6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000efa:	f007 fa61 	bl	80083c0 <HAL_Delay>
	while(!SIM_Check_MQTT_State(response))
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f8ce 	bl	80010a4 <SIM_Check_MQTT_State>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0eb      	beq.n	8000ee6 <SIM_Init+0x26e>
	}

	sprintf(command, "AT+SMSUB=\"%s\",1\r", sys.MQTT.Command_Topic);                              //iscrizione al topic di richiesta dati dal server
 8000f0e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f12:	4a11      	ldr	r2, [pc, #68]	@ (8000f58 <SIM_Init+0x2e0>)
 8000f14:	492b      	ldr	r1, [pc, #172]	@ (8000fc4 <SIM_Init+0x34c>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f010 ff06 	bl	8011d28 <siprintf>
	SIM_Send_Command(command);
 8000f1c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f867 	bl	8000ff4 <SIM_Send_Command>
}
 8000f26:	bf00      	nop
 8000f28:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	08012fc0 	.word	0x08012fc0
 8000f34:	20003608 	.word	0x20003608
 8000f38:	200037fc 	.word	0x200037fc
 8000f3c:	2000366c 	.word	0x2000366c
 8000f40:	200036d0 	.word	0x200036d0
 8000f44:	20003734 	.word	0x20003734
 8000f48:	20003798 	.word	0x20003798
 8000f4c:	200039f8 	.word	0x200039f8
 8000f50:	20003860 	.word	0x20003860
 8000f54:	20003a38 	.word	0x20003a38
 8000f58:	200038c4 	.word	0x200038c4
 8000f5c:	20003a78 	.word	0x20003a78
 8000f60:	20003928 	.word	0x20003928
 8000f64:	08012fc4 	.word	0x08012fc4
 8000f68:	2000049c 	.word	0x2000049c
 8000f6c:	08012fd4 	.word	0x08012fd4
 8000f70:	08012fe0 	.word	0x08012fe0
 8000f74:	08012fec 	.word	0x08012fec
 8000f78:	08012ff8 	.word	0x08012ff8
 8000f7c:	08013004 	.word	0x08013004
 8000f80:	08013010 	.word	0x08013010
 8000f84:	0801301c 	.word	0x0801301c
 8000f88:	08013028 	.word	0x08013028
 8000f8c:	08013038 	.word	0x08013038
 8000f90:	08013050 	.word	0x08013050
 8000f94:	0801305c 	.word	0x0801305c
 8000f98:	08013070 	.word	0x08013070
 8000f9c:	0801307c 	.word	0x0801307c
 8000fa0:	08013098 	.word	0x08013098
 8000fa4:	080130b4 	.word	0x080130b4
 8000fa8:	080130d0 	.word	0x080130d0
 8000fac:	080130ec 	.word	0x080130ec
 8000fb0:	08013108 	.word	0x08013108
 8000fb4:	0801311c 	.word	0x0801311c
 8000fb8:	08013134 	.word	0x08013134
 8000fbc:	0801314c 	.word	0x0801314c
 8000fc0:	08013158 	.word	0x08013158
 8000fc4:	08013168 	.word	0x08013168

08000fc8 <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd6:	f009 fbaf 	bl	800a738 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000fda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fde:	f007 f9ef 	bl	80083c0 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fec:	f009 fba4 	bl	800a738 <HAL_GPIO_WritePin>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <SIM_Send_Command>:
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
}

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff f8f1 	bl	80001e4 <strlen>
 8001002:	4603      	mov	r3, r0
 8001004:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(LTE_UART, (uint8_t*)command, len, 100);
 8001006:	89fa      	ldrh	r2, [r7, #14]
 8001008:	2364      	movs	r3, #100	@ 0x64
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4803      	ldr	r0, [pc, #12]	@ (800101c <SIM_Send_Command+0x28>)
 800100e:	f00f fcb5 	bl	801097c <HAL_UART_Transmit>
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000049c 	.word	0x2000049c

08001020 <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
void SIM_Receive_Response(char* response)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af02      	add	r7, sp, #8
 8001026:	6078      	str	r0, [r7, #4]
	uint16_t max_size = 256;
 8001028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800102c:	81fb      	strh	r3, [r7, #14]
	uint16_t RxLen = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	81bb      	strh	r3, [r7, #12]

	HAL_UARTEx_ReceiveToIdle(LTE_UART, (uint8_t *)response, max_size, &RxLen, 200);
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	89fa      	ldrh	r2, [r7, #14]
 8001038:	21c8      	movs	r1, #200	@ 0xc8
 800103a:	9100      	str	r1, [sp, #0]
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	4803      	ldr	r0, [pc, #12]	@ (800104c <SIM_Receive_Response+0x2c>)
 8001040:	f010 fc90 	bl	8011964 <HAL_UARTEx_ReceiveToIdle>
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000049c 	.word	0x2000049c

08001050 <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 8001058:	4910      	ldr	r1, [pc, #64]	@ (800109c <SIM_Check_IP+0x4c>)
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f010 fefe 	bl	8011e5c <strstr>
 8001060:	6178      	str	r0, [r7, #20]
    if(cnact_pos != NULL) {
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d014      	beq.n	8001092 <SIM_Check_IP+0x42>
        int context_id, status;
        if(sscanf(cnact_pos, "+CNACT: %d,%d", &context_id, &status) >= 2) {
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	f107 0210 	add.w	r2, r7, #16
 8001070:	490b      	ldr	r1, [pc, #44]	@ (80010a0 <SIM_Check_IP+0x50>)
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f010 fe7a 	bl	8011d6c <siscanf>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	dd09      	ble.n	8001092 <SIM_Check_IP+0x42>
            return (context_id == 1 && status == 1) ? 1 : 0;
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d104      	bne.n	800108e <SIM_Check_IP+0x3e>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d101      	bne.n	800108e <SIM_Check_IP+0x3e>
 800108a:	2301      	movs	r3, #1
 800108c:	e002      	b.n	8001094 <SIM_Check_IP+0x44>
 800108e:	2300      	movs	r3, #0
 8001090:	e000      	b.n	8001094 <SIM_Check_IP+0x44>
        }
    }
    return 0;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	0801317c 	.word	0x0801317c
 80010a0:	08013184 	.word	0x08013184

080010a4 <SIM_Check_MQTT_State>:

/*------CONTROLLO STATO CONNESSIONE MQTT------*/
int SIM_Check_MQTT_State(const char* response)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    char* smstate_pos = strstr(response, "+SMSTATE:");
 80010ac:	490e      	ldr	r1, [pc, #56]	@ (80010e8 <SIM_Check_MQTT_State+0x44>)
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f010 fed4 	bl	8011e5c <strstr>
 80010b4:	60f8      	str	r0, [r7, #12]
    if(smstate_pos != NULL) {
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d010      	beq.n	80010de <SIM_Check_MQTT_State+0x3a>
        int mqtt_state;
        if(sscanf(smstate_pos, "+SMSTATE: %d", &mqtt_state) >= 1) {
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	461a      	mov	r2, r3
 80010c2:	490a      	ldr	r1, [pc, #40]	@ (80010ec <SIM_Check_MQTT_State+0x48>)
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f010 fe51 	bl	8011d6c <siscanf>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	dd06      	ble.n	80010de <SIM_Check_MQTT_State+0x3a>
            return (mqtt_state == 1) ? 1 : 0;
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	bf0c      	ite	eq
 80010d6:	2301      	moveq	r3, #1
 80010d8:	2300      	movne	r3, #0
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	e000      	b.n	80010e0 <SIM_Check_MQTT_State+0x3c>
        }
    }
    return 0;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	08013194 	.word	0x08013194
 80010ec:	080131a0 	.word	0x080131a0

080010f0 <SIM_Parse_Command>:

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Command(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
    char* buf = (char*)sim_rx_buffer;
 80010f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001260 <SIM_Parse_Command+0x170>)
 80010f8:	61fb      	str	r3, [r7, #28]

    if(strncmp(buf, "+SMSUB: ", 8) == 0)
 80010fa:	2208      	movs	r2, #8
 80010fc:	4959      	ldr	r1, [pc, #356]	@ (8001264 <SIM_Parse_Command+0x174>)
 80010fe:	69f8      	ldr	r0, [r7, #28]
 8001100:	f010 fe87 	bl	8011e12 <strncmp>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 80a5 	bne.w	8001256 <SIM_Parse_Command+0x166>
    {
        char* pos = buf + 8;
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	3308      	adds	r3, #8
 8001110:	61bb      	str	r3, [r7, #24]

        char* first_quote = strchr(pos, '"');
 8001112:	2122      	movs	r1, #34	@ 0x22
 8001114:	69b8      	ldr	r0, [r7, #24]
 8001116:	f010 fe6f 	bl	8011df8 <strchr>
 800111a:	6178      	str	r0, [r7, #20]
        if(first_quote) {
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 8099 	beq.w	8001256 <SIM_Parse_Command+0x166>
            char* second_quote = strchr(first_quote + 1, '"');
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	2122      	movs	r1, #34	@ 0x22
 800112a:	4618      	mov	r0, r3
 800112c:	f010 fe64 	bl	8011df8 <strchr>
 8001130:	6138      	str	r0, [r7, #16]

            if(second_quote) {
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 808e 	beq.w	8001256 <SIM_Parse_Command+0x166>
                char* third_quote = strchr(second_quote + 1, '"');
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	3301      	adds	r3, #1
 800113e:	2122      	movs	r1, #34	@ 0x22
 8001140:	4618      	mov	r0, r3
 8001142:	f010 fe59 	bl	8011df8 <strchr>
 8001146:	60f8      	str	r0, [r7, #12]

                if(third_quote) {
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8083 	beq.w	8001256 <SIM_Parse_Command+0x166>
                    char* cmd_pos = third_quote + 1;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
                    char* fourth_quote = strchr(cmd_pos, '"');
 8001156:	2122      	movs	r1, #34	@ 0x22
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f010 fe4d 	bl	8011df8 <strchr>
 800115e:	6078      	str	r0, [r7, #4]

                    if(fourth_quote && (fourth_quote - cmd_pos) >= 3) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d077      	beq.n	8001256 <SIM_Parse_Command+0x166>
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	dd72      	ble.n	8001256 <SIM_Parse_Command+0x166>

                        uint32_t cmd_val = (cmd_pos[2] << 16) | (cmd_pos[1] << 8) | cmd_pos[0];
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	3302      	adds	r3, #2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	041a      	lsls	r2, r3, #16
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	3301      	adds	r3, #1
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	4313      	orrs	r3, r2
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	7812      	ldrb	r2, [r2, #0]
 8001186:	4313      	orrs	r3, r2
 8001188:	603b      	str	r3, [r7, #0]

                        switch(cmd_val) {
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	4a36      	ldr	r2, [pc, #216]	@ (8001268 <SIM_Parse_Command+0x178>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d05b      	beq.n	800124a <SIM_Parse_Command+0x15a>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	4a34      	ldr	r2, [pc, #208]	@ (8001268 <SIM_Parse_Command+0x178>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d85a      	bhi.n	8001250 <SIM_Parse_Command+0x160>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	4a33      	ldr	r2, [pc, #204]	@ (800126c <SIM_Parse_Command+0x17c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d02a      	beq.n	80011f8 <SIM_Parse_Command+0x108>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	4a32      	ldr	r2, [pc, #200]	@ (8001270 <SIM_Parse_Command+0x180>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d252      	bcs.n	8001250 <SIM_Parse_Command+0x160>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	4a31      	ldr	r2, [pc, #196]	@ (8001274 <SIM_Parse_Command+0x184>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d03e      	beq.n	8001230 <SIM_Parse_Command+0x140>
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	4a30      	ldr	r2, [pc, #192]	@ (8001278 <SIM_Parse_Command+0x188>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d24a      	bcs.n	8001250 <SIM_Parse_Command+0x160>
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	4a2f      	ldr	r2, [pc, #188]	@ (800127c <SIM_Parse_Command+0x18c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d014      	beq.n	80011ec <SIM_Parse_Command+0xfc>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	4a2d      	ldr	r2, [pc, #180]	@ (800127c <SIM_Parse_Command+0x18c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d842      	bhi.n	8001250 <SIM_Parse_Command+0x160>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001280 <SIM_Parse_Command+0x190>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d018      	beq.n	8001204 <SIM_Parse_Command+0x114>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001280 <SIM_Parse_Command+0x190>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d83a      	bhi.n	8001250 <SIM_Parse_Command+0x160>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	4a29      	ldr	r2, [pc, #164]	@ (8001284 <SIM_Parse_Command+0x194>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01c      	beq.n	800121c <SIM_Parse_Command+0x12c>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	4a28      	ldr	r2, [pc, #160]	@ (8001288 <SIM_Parse_Command+0x198>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d012      	beq.n	8001210 <SIM_Parse_Command+0x120>
								}
							case 0x545352: // RST
								HAL_NVIC_SystemReset();
								break;
							default: 
								break;
 80011ea:	e031      	b.n	8001250 <SIM_Parse_Command+0x160>
								flags.CMD.Idle = 1; 
 80011ec:	4a27      	ldr	r2, [pc, #156]	@ (800128c <SIM_Parse_Command+0x19c>)
 80011ee:	7893      	ldrb	r3, [r2, #2]
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	7093      	strb	r3, [r2, #2]
								break;    
 80011f6:	e02e      	b.n	8001256 <SIM_Parse_Command+0x166>
								flags.CMD.Start_Meas = 1; 
 80011f8:	4a24      	ldr	r2, [pc, #144]	@ (800128c <SIM_Parse_Command+0x19c>)
 80011fa:	7893      	ldrb	r3, [r2, #2]
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	7093      	strb	r3, [r2, #2]
								break;
 8001202:	e028      	b.n	8001256 <SIM_Parse_Command+0x166>
								flags.CMD.Ping = 1; 
 8001204:	4a21      	ldr	r2, [pc, #132]	@ (800128c <SIM_Parse_Command+0x19c>)
 8001206:	7893      	ldrb	r3, [r2, #2]
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	7093      	strb	r3, [r2, #2]
								break;
 800120e:	e022      	b.n	8001256 <SIM_Parse_Command+0x166>
								flags.CMD.Data_Request = 1; 
 8001210:	4a1e      	ldr	r2, [pc, #120]	@ (800128c <SIM_Parse_Command+0x19c>)
 8001212:	7893      	ldrb	r3, [r2, #2]
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	7093      	strb	r3, [r2, #2]
								break;
 800121a:	e01c      	b.n	8001256 <SIM_Parse_Command+0x166>
								if(state == IDLE)
 800121c:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <SIM_Parse_Command+0x1a0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d117      	bne.n	8001254 <SIM_Parse_Command+0x164>
									flags.CMD.Start_OTA = 1;
 8001224:	4a19      	ldr	r2, [pc, #100]	@ (800128c <SIM_Parse_Command+0x19c>)
 8001226:	7893      	ldrb	r3, [r2, #2]
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	7093      	strb	r3, [r2, #2]
								break;
 800122e:	e011      	b.n	8001254 <SIM_Parse_Command+0x164>
								if(state == IDLE)
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <SIM_Parse_Command+0x1a0>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d108      	bne.n	800124a <SIM_Parse_Command+0x15a>
									flags.CMD.Set_Config = 1;
 8001238:	4a14      	ldr	r2, [pc, #80]	@ (800128c <SIM_Parse_Command+0x19c>)
 800123a:	7893      	ldrb	r3, [r2, #2]
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	7093      	strb	r3, [r2, #2]
									SIM_Parse_Cfg(cmd_pos, fourth_quote);
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	68b8      	ldr	r0, [r7, #8]
 8001246:	f000 f825 	bl	8001294 <SIM_Parse_Cfg>
								HAL_NVIC_SystemReset();
 800124a:	f008 fd92 	bl	8009d72 <HAL_NVIC_SystemReset>
								break;
 800124e:	e002      	b.n	8001256 <SIM_Parse_Command+0x166>
								break;
 8001250:	bf00      	nop
 8001252:	e000      	b.n	8001256 <SIM_Parse_Command+0x166>
								break;
 8001254:	bf00      	nop
                    }
                }
            }
        }
    }
}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200070c8 	.word	0x200070c8
 8001264:	080131b0 	.word	0x080131b0
 8001268:	00545352 	.word	0x00545352
 800126c:	00545253 	.word	0x00545253
 8001270:	00545254 	.word	0x00545254
 8001274:	00544553 	.word	0x00544553
 8001278:	00544554 	.word	0x00544554
 800127c:	004c4449 	.word	0x004c4449
 8001280:	00474e50 	.word	0x00474e50
 8001284:	0041544f 	.word	0x0041544f
 8001288:	00444e53 	.word	0x00444e53
 800128c:	20003990 	.word	0x20003990
 8001290:	2000056c 	.word	0x2000056c

08001294 <SIM_Parse_Cfg>:

/*-----PARSING CONFIGURAZIONE-----*/
void SIM_Parse_Cfg(char* cmd_start, char* cmd_end)
{   
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
    memset(cfg_var, 0, sizeof(cfg_var));
 800129e:	2214      	movs	r2, #20
 80012a0:	2100      	movs	r1, #0
 80012a2:	4839      	ldr	r0, [pc, #228]	@ (8001388 <SIM_Parse_Cfg+0xf4>)
 80012a4:	f010 fda0 	bl	8011de8 <memset>
    memset(new_cfg_val, 0, sizeof(new_cfg_val));
 80012a8:	220a      	movs	r2, #10
 80012aa:	2100      	movs	r1, #0
 80012ac:	4837      	ldr	r0, [pc, #220]	@ (800138c <SIM_Parse_Cfg+0xf8>)
 80012ae:	f010 fd9b 	bl	8011de8 <memset>
    
    char* pos = cmd_start + 4; // Salta "SET,"
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3304      	adds	r3, #4
 80012b6:	61fb      	str	r3, [r7, #28]
    
    // Prima virgola (dopo SET)
    char* comma1 = strchr(pos, ',');
 80012b8:	212c      	movs	r1, #44	@ 0x2c
 80012ba:	69f8      	ldr	r0, [r7, #28]
 80012bc:	f010 fd9c 	bl	8011df8 <strchr>
 80012c0:	61b8      	str	r0, [r7, #24]
    if(!comma1 || comma1 >= cmd_end) return;
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d056      	beq.n	8001376 <SIM_Parse_Cfg+0xe2>
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d252      	bcs.n	8001376 <SIM_Parse_Cfg+0xe2>
    
    // Seconda virgola
    char* comma2 = strchr(comma1 + 1, ',');
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	3301      	adds	r3, #1
 80012d4:	212c      	movs	r1, #44	@ 0x2c
 80012d6:	4618      	mov	r0, r3
 80012d8:	f010 fd8e 	bl	8011df8 <strchr>
 80012dc:	6178      	str	r0, [r7, #20]
    if(!comma2 || comma2 >= cmd_end) return;
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d04a      	beq.n	800137a <SIM_Parse_Cfg+0xe6>
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d246      	bcs.n	800137a <SIM_Parse_Cfg+0xe6>
    
    // Terza virgola
    char* comma3 = strchr(comma2 + 1, ',');
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	212c      	movs	r1, #44	@ 0x2c
 80012f2:	4618      	mov	r0, r3
 80012f4:	f010 fd80 	bl	8011df8 <strchr>
 80012f8:	6138      	str	r0, [r7, #16]
    if(!comma3 || comma3 >= cmd_end) return;
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d03e      	beq.n	800137e <SIM_Parse_Cfg+0xea>
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d23a      	bcs.n	800137e <SIM_Parse_Cfg+0xea>
    
    // Estrai cfg_var (tra SET, e prima virgola)
    int var_len = comma2 - comma1 - 1;
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	3b01      	subs	r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
    if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	dd0e      	ble.n	8001336 <SIM_Parse_Cfg+0xa2>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b13      	cmp	r3, #19
 800131c:	d80b      	bhi.n	8001336 <SIM_Parse_Cfg+0xa2>
	{
        strncpy(cfg_var, comma1 + 1, var_len);
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	3301      	adds	r3, #1
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4619      	mov	r1, r3
 8001326:	4818      	ldr	r0, [pc, #96]	@ (8001388 <SIM_Parse_Cfg+0xf4>)
 8001328:	f010 fd85 	bl	8011e36 <strncpy>
        cfg_var[var_len] = '\0';
 800132c:	4a16      	ldr	r2, [pc, #88]	@ (8001388 <SIM_Parse_Cfg+0xf4>)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
    }
    
    // Estrai cfg_idx
    cfg_idx = atoi(comma2 + 1);
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	4618      	mov	r0, r3
 800133c:	f010 fc69 	bl	8011c12 <atoi>
 8001340:	4603      	mov	r3, r0
 8001342:	4a13      	ldr	r2, [pc, #76]	@ (8001390 <SIM_Parse_Cfg+0xfc>)
 8001344:	6013      	str	r3, [r2, #0]
    
    // Estrai new_cfg_val
    int val_len = cmd_end - comma3 - 1;
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	3b01      	subs	r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
    if(val_len > 0 && val_len < sizeof(new_cfg_val)) 
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	dd14      	ble.n	8001380 <SIM_Parse_Cfg+0xec>
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	2b09      	cmp	r3, #9
 800135a:	d811      	bhi.n	8001380 <SIM_Parse_Cfg+0xec>
	{
        strncpy(new_cfg_val, comma3 + 1, val_len);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	3301      	adds	r3, #1
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	4619      	mov	r1, r3
 8001364:	4809      	ldr	r0, [pc, #36]	@ (800138c <SIM_Parse_Cfg+0xf8>)
 8001366:	f010 fd66 	bl	8011e36 <strncpy>
        new_cfg_val[val_len] = '\0';
 800136a:	4a08      	ldr	r2, [pc, #32]	@ (800138c <SIM_Parse_Cfg+0xf8>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4413      	add	r3, r2
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
 8001374:	e004      	b.n	8001380 <SIM_Parse_Cfg+0xec>
    if(!comma1 || comma1 >= cmd_end) return;
 8001376:	bf00      	nop
 8001378:	e002      	b.n	8001380 <SIM_Parse_Cfg+0xec>
    if(!comma2 || comma2 >= cmd_end) return;
 800137a:	bf00      	nop
 800137c:	e000      	b.n	8001380 <SIM_Parse_Cfg+0xec>
    if(!comma3 || comma3 >= cmd_end) return;
 800137e:	bf00      	nop
    }
}
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200074c8 	.word	0x200074c8
 800138c:	200074e0 	.word	0x200074e0
 8001390:	200074dc 	.word	0x200074dc

08001394 <SIM_publish_MQTT_Message>:

/*------PUBBLICAZIONE MESSAGGIO MQTT------*/
void SIM_publish_MQTT_Message(const char* topic, const char* message)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0c4      	sub	sp, #272	@ 0x110
 8001398:	af00      	add	r7, sp, #0
 800139a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800139e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013a2:	6018      	str	r0, [r3, #0]
 80013a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013ac:	6019      	str	r1, [r3, #0]
    char command[256];
    uint16_t len = (uint16_t)strlen(message);
 80013ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013b2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	f7fe ff14 	bl	80001e4 <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

    if(topic != NULL && strlen(topic) > 0)
 80013c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d014      	beq.n	80013fa <SIM_publish_MQTT_Message+0x66>
 80013d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00c      	beq.n	80013fa <SIM_publish_MQTT_Message+0x66>
	{
        sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 80013e0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80013e4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013e8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80013ec:	f107 000c 	add.w	r0, r7, #12
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	4910      	ldr	r1, [pc, #64]	@ (8001434 <SIM_publish_MQTT_Message+0xa0>)
 80013f4:	f010 fc98 	bl	8011d28 <siprintf>
 80013f8:	e007      	b.n	800140a <SIM_publish_MQTT_Message+0x76>
    } 
	else 
	{
        sprintf(command, "AT+SMPUB=%d\r", len);
 80013fa:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	490d      	ldr	r1, [pc, #52]	@ (8001438 <SIM_publish_MQTT_Message+0xa4>)
 8001404:	4618      	mov	r0, r3
 8001406:	f010 fc8f 	bl	8011d28 <siprintf>
    }
    
    SIM_Send_Command(command);
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fdf0 	bl	8000ff4 <SIM_Send_Command>
    SIM_Send_Command((char*)message);
 8001414:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001418:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	f7ff fde9 	bl	8000ff4 <SIM_Send_Command>
    SIM_Send_Command("\x1A");
 8001422:	4806      	ldr	r0, [pc, #24]	@ (800143c <SIM_publish_MQTT_Message+0xa8>)
 8001424:	f7ff fde6 	bl	8000ff4 <SIM_Send_Command>
}
 8001428:	bf00      	nop
 800142a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	080131bc 	.word	0x080131bc
 8001438:	080131d4 	.word	0x080131d4
 800143c:	080131e4 	.word	0x080131e4

08001440 <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 8001444:	211a      	movs	r1, #26
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f830 	bl	80014ac <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 800144c:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 8001450:	2001      	movs	r0, #1
 8001452:	f000 f877 	bl	8001544 <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 8001456:	2164      	movs	r1, #100	@ 0x64
 8001458:	2003      	movs	r0, #3
 800145a:	f000 f873 	bl	8001544 <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 800145e:	2185      	movs	r1, #133	@ 0x85
 8001460:	2010      	movs	r0, #16
 8001462:	f000 f823 	bl	80014ac <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 8001466:	2196      	movs	r1, #150	@ 0x96
 8001468:	2014      	movs	r0, #20
 800146a:	f000 f81f 	bl	80014ac <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 800146e:	21ab      	movs	r1, #171	@ 0xab
 8001470:	2015      	movs	r0, #21
 8001472:	f000 f81b 	bl	80014ac <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 8001476:	21e1      	movs	r1, #225	@ 0xe1
 8001478:	2028      	movs	r0, #40	@ 0x28
 800147a:	f000 f817 	bl	80014ac <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 800147e:	21d7      	movs	r1, #215	@ 0xd7
 8001480:	2029      	movs	r0, #41	@ 0x29
 8001482:	f000 f813 	bl	80014ac <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 8001486:	217f      	movs	r1, #127	@ 0x7f
 8001488:	202a      	movs	r0, #42	@ 0x2a
 800148a:	f000 f80f 	bl	80014ac <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 800148e:	211f      	movs	r1, #31
 8001490:	202b      	movs	r0, #43	@ 0x2b
 8001492:	f000 f80b 	bl	80014ac <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 8001496:	21fc      	movs	r1, #252	@ 0xfc
 8001498:	202c      	movs	r0, #44	@ 0x2c
 800149a:	f000 f807 	bl	80014ac <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 800149e:	21f4      	movs	r1, #244	@ 0xf4
 80014a0:	202d      	movs	r0, #45	@ 0x2d
 80014a2:	f000 f803 	bl	80014ac <BC_Write_Reg>
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	4603      	mov	r3, r0
 80014b4:	460a      	mov	r2, r1
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	4613      	mov	r3, r2
 80014ba:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 80014c6:	79bb      	ldrb	r3, [r7, #6]
 80014c8:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 80014ca:	f107 0208 	add.w	r2, r7, #8
 80014ce:	2364      	movs	r3, #100	@ 0x64
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2302      	movs	r3, #2
 80014d4:	21d6      	movs	r1, #214	@ 0xd6
 80014d6:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <BC_Write_Reg+0x44>)
 80014d8:	f009 f9e2 	bl	800a8a0 <HAL_I2C_Master_Transmit>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <BC_Write_Reg+0x3a>
	{
		result = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
	}

	return result;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000160 	.word	0x20000160

080014f4 <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
 8001504:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 8001506:	1dfa      	adds	r2, r7, #7
 8001508:	2364      	movs	r3, #100	@ 0x64
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2301      	movs	r3, #1
 800150e:	21d6      	movs	r1, #214	@ 0xd6
 8001510:	480b      	ldr	r0, [pc, #44]	@ (8001540 <BC_Read_Reg+0x4c>)
 8001512:	f009 f9c5 	bl	800a8a0 <HAL_I2C_Master_Transmit>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10c      	bne.n	8001536 <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 800151c:	2364      	movs	r3, #100	@ 0x64
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2301      	movs	r3, #1
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	21d6      	movs	r1, #214	@ 0xd6
 8001526:	4806      	ldr	r0, [pc, #24]	@ (8001540 <BC_Read_Reg+0x4c>)
 8001528:	f009 fad2 	bl	800aad0 <HAL_I2C_Master_Receive>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <BC_Read_Reg+0x42>
		{
			result = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000160 	.word	0x20000160

08001544 <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af02      	add	r7, sp, #8
 800154a:	4603      	mov	r3, r0
 800154c:	460a      	mov	r2, r1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	4613      	mov	r3, r2
 8001552:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
 8001558:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 800155e:	88bb      	ldrh	r3, [r7, #4]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	b29b      	uxth	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 8001568:	88bb      	ldrh	r3, [r7, #4]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 800156e:	f107 0208 	add.w	r2, r7, #8
 8001572:	2364      	movs	r3, #100	@ 0x64
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2303      	movs	r3, #3
 8001578:	21d6      	movs	r1, #214	@ 0xd6
 800157a:	4806      	ldr	r0, [pc, #24]	@ (8001594 <BC_MultiWrite_Reg+0x50>)
 800157c:	f009 f990 	bl	800a8a0 <HAL_I2C_Master_Transmit>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
	}

	return result;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000160 	.word	0x20000160

08001598 <BC_Read_Flags>:
	return result;
}

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 8001598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800159c:	b09a      	sub	sp, #104	@ 0x68
 800159e:	af02      	add	r7, sp, #8
 80015a0:	61f8      	str	r0, [r7, #28]
	int result = -1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint64_t data[6] = {0};
 80015a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ac:	2230      	movs	r2, #48	@ 0x30
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f010 fc19 	bl	8011de8 <memset>
	uint8_t reg = REG22_CHARGER_FLAG_0;
 80015b6:	2322      	movs	r3, #34	@ 0x22
 80015b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 80015bc:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 80015c0:	2364      	movs	r3, #100	@ 0x64
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2301      	movs	r3, #1
 80015c6:	21d6      	movs	r1, #214	@ 0xd6
 80015c8:	4836      	ldr	r0, [pc, #216]	@ (80016a4 <BC_Read_Flags+0x10c>)
 80015ca:	f009 f969 	bl	800a8a0 <HAL_I2C_Master_Transmit>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d161      	bne.n	8001698 <BC_Read_Flags+0x100>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 80015d4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80015d8:	2364      	movs	r3, #100	@ 0x64
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2306      	movs	r3, #6
 80015de:	21d6      	movs	r1, #214	@ 0xd6
 80015e0:	4830      	ldr	r0, [pc, #192]	@ (80016a4 <BC_Read_Flags+0x10c>)
 80015e2:	f009 fa75 	bl	800aad0 <HAL_I2C_Master_Receive>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d155      	bne.n	8001698 <BC_Read_Flags+0x100>
		{
			result = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = (data[0] << 40) | (data[1] << 32) | (data[2] << 24) | (data[3] << 16) | (data[4] << 8) | data[5];
 80015f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015f4:	f04f 0400 	mov.w	r4, #0
 80015f8:	f04f 0500 	mov.w	r5, #0
 80015fc:	0215      	lsls	r5, r2, #8
 80015fe:	2400      	movs	r4, #0
 8001600:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	0003      	movs	r3, r0
 800160e:	2200      	movs	r2, #0
 8001610:	ea44 0102 	orr.w	r1, r4, r2
 8001614:	6139      	str	r1, [r7, #16]
 8001616:	432b      	orrs	r3, r5
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	060b      	lsls	r3, r1, #24
 8001628:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 800162c:	0602      	lsls	r2, r0, #24
 800162e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001632:	4621      	mov	r1, r4
 8001634:	4311      	orrs	r1, r2
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	4629      	mov	r1, r5
 800163a:	4319      	orrs	r1, r3
 800163c:	60f9      	str	r1, [r7, #12]
 800163e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	040b      	lsls	r3, r1, #16
 800164c:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001650:	0402      	lsls	r2, r0, #16
 8001652:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001656:	4621      	mov	r1, r4
 8001658:	ea41 0a02 	orr.w	sl, r1, r2
 800165c:	4629      	mov	r1, r5
 800165e:	ea41 0b03 	orr.w	fp, r1, r3
 8001662:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	020b      	lsls	r3, r1, #8
 8001670:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001674:	0202      	lsls	r2, r0, #8
 8001676:	ea4a 0802 	orr.w	r8, sl, r2
 800167a:	ea4b 0903 	orr.w	r9, fp, r3
 800167e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001682:	ea48 0102 	orr.w	r1, r8, r2
 8001686:	6039      	str	r1, [r7, #0]
 8001688:	ea49 0303 	orr.w	r3, r9, r3
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001694:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 8001698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800169a:	4618      	mov	r0, r3
 800169c:	3760      	adds	r7, #96	@ 0x60
 800169e:	46bd      	mov	sp, r7
 80016a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016a4:	20000160 	.word	0x20000160

080016a8 <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 80016a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 80016b4:	2100      	movs	r1, #0
 80016b6:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 80016b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016bc:	f04f 0800 	mov.w	r8, #0
 80016c0:	f401 5980 	and.w	r9, r1, #4096	@ 0x1000
	{

	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 80016c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f401 6380 	and.w	r3, r1, #1024	@ 0x400
 80016ce:	4313      	orrs	r3, r2
 80016d0:	d013      	beq.n	80016fa <BC_Manage_Interrupts+0x52>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, (uint8_t *)& status);
 80016d2:	f107 030f 	add.w	r3, r7, #15
 80016d6:	4619      	mov	r1, r3
 80016d8:	201b      	movs	r0, #27
 80016da:	f7ff ff0b 	bl	80014f4 <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d004      	beq.n	80016f2 <BC_Manage_Interrupts+0x4a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80); //INSERITA
 80016e8:	2180      	movs	r1, #128	@ 0x80
 80016ea:	2013      	movs	r0, #19
 80016ec:	f7ff fede 	bl	80014ac <BC_Write_Reg>
 80016f0:	e003      	b.n	80016fa <BC_Manage_Interrupts+0x52>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40); //RIMOSSA
 80016f2:	2140      	movs	r1, #64	@ 0x40
 80016f4:	2013      	movs	r0, #19
 80016f6:	f7ff fed9 	bl	80014ac <BC_Write_Reg>
		}
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 80016fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016fe:	2400      	movs	r4, #0
 8001700:	f403 7500 	and.w	r5, r3, #512	@ 0x200
	{

	}
}
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001710 <HAL_UARTEx_RxEventCallback>:
	}
}

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
    if(huart == LTE_UART && Size > 8)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a0f      	ldr	r2, [pc, #60]	@ (800175c <HAL_UARTEx_RxEventCallback+0x4c>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d111      	bne.n	8001748 <HAL_UARTEx_RxEventCallback+0x38>
 8001724:	887b      	ldrh	r3, [r7, #2]
 8001726:	2b08      	cmp	r3, #8
 8001728:	d90e      	bls.n	8001748 <HAL_UARTEx_RxEventCallback+0x38>
    {
        // Check velocissimo: pattern "+SMSUB: " all'inizio buffer
        if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 800172a:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <HAL_UARTEx_RxEventCallback+0x50>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <HAL_UARTEx_RxEventCallback+0x54>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d109      	bne.n	8001748 <HAL_UARTEx_RxEventCallback+0x38>
           *(uint32_t*)(sim_rx_buffer + 4) == 0x203A4255) {        // "UB: "
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <HAL_UARTEx_RxEventCallback+0x58>)
 8001736:	681b      	ldr	r3, [r3, #0]
        if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8001738:	4a0c      	ldr	r2, [pc, #48]	@ (800176c <HAL_UARTEx_RxEventCallback+0x5c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d104      	bne.n	8001748 <HAL_UARTEx_RxEventCallback+0x38>
            flags.MQTT_Message_Rx = 1;
 800173e:	4a0c      	ldr	r2, [pc, #48]	@ (8001770 <HAL_UARTEx_RxEventCallback+0x60>)
 8001740:	7853      	ldrb	r3, [r2, #1]
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	7053      	strb	r3, [r2, #1]
        }

    }
	
	HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8001748:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800174c:	4904      	ldr	r1, [pc, #16]	@ (8001760 <HAL_UARTEx_RxEventCallback+0x50>)
 800174e:	4803      	ldr	r0, [pc, #12]	@ (800175c <HAL_UARTEx_RxEventCallback+0x4c>)
 8001750:	f010 fa0b 	bl	8011b6a <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	2000049c 	.word	0x2000049c
 8001760:	200070c8 	.word	0x200070c8
 8001764:	534d532b 	.word	0x534d532b
 8001768:	200070cc 	.word	0x200070cc
 800176c:	203a4255 	.word	0x203a4255
 8001770:	20003990 	.word	0x20003990

08001774 <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	if (huart == LTE_UART)
	{

	}

}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_ADC_ConvHalfCpltCallback>:

}

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a09      	ldr	r2, [pc, #36]	@ (80017b8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d109      	bne.n	80017ac <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8001798:	4a08      	ldr	r2, [pc, #32]	@ (80017bc <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800179a:	7813      	ldrb	r3, [r2, #0]
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 80017a2:	4a06      	ldr	r2, [pc, #24]	@ (80017bc <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80017a4:	7813      	ldrb	r3, [r2, #0]
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	7013      	strb	r3, [r2, #0]
	}
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	20000090 	.word	0x20000090
 80017bc:	20003990 	.word	0x20003990

080017c0 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a09      	ldr	r2, [pc, #36]	@ (80017f0 <HAL_ADC_ConvCpltCallback+0x30>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d109      	bne.n	80017e4 <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 80017d0:	4a08      	ldr	r2, [pc, #32]	@ (80017f4 <HAL_ADC_ConvCpltCallback+0x34>)
 80017d2:	7813      	ldrb	r3, [r2, #0]
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 80017da:	4a06      	ldr	r2, [pc, #24]	@ (80017f4 <HAL_ADC_ConvCpltCallback+0x34>)
 80017dc:	7813      	ldrb	r3, [r2, #0]
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	7013      	strb	r3, [r2, #0]
	}
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	20000090 	.word	0x20000090
 80017f4:	20003990 	.word	0x20003990

080017f8 <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b092      	sub	sp, #72	@ 0x48
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;
	RTC_AlarmTypeDef sAlarm = {0};
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	222c      	movs	r2, #44	@ 0x2c
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f010 faed 	bl	8011de8 <memset>

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 800180e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001812:	2200      	movs	r2, #0
 8001814:	4619      	mov	r1, r3
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f00b fe35 	bl	800d486 <HAL_RTC_GetTime>

	sys.Low_th = Low_TH[gTime.Hours];
 800181c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001820:	461a      	mov	r2, r3
 8001822:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <HAL_RTC_AlarmAEventCallback+0x8c>)
 8001824:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001828:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <HAL_RTC_AlarmAEventCallback+0x90>)
 800182a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800182e:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
	sys.High_th = High_TH[gTime.Hours];
 8001832:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001836:	461a      	mov	r2, r3
 8001838:	4b14      	ldr	r3, [pc, #80]	@ (800188c <HAL_RTC_AlarmAEventCallback+0x94>)
 800183a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800183e:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <HAL_RTC_AlarmAEventCallback+0x90>)
 8001840:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8001844:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

	sAlarm.AlarmTime.Hours = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 8001854:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <HAL_RTC_AlarmAEventCallback+0x98>)
 8001856:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	@ 0x28
    sAlarm.AlarmDateWeekDay = 1;
 8001860:	2301      	movs	r3, #1
 8001862:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    sAlarm.Alarm = RTC_ALARM_A;
 8001866:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800186a:	633b      	str	r3, [r7, #48]	@ 0x30
    
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 800186c:	f107 0308 	add.w	r3, r7, #8
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f00b fee9 	bl	800d64c <HAL_RTC_SetAlarm_IT>
}
 800187a:	bf00      	nop
 800187c:	3748      	adds	r7, #72	@ 0x48
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20007088 	.word	0x20007088
 8001888:	20000570 	.word	0x20000570
 800188c:	20007058 	.word	0x20007058
 8001890:	80800080 	.word	0x80800080

08001894 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800189e:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <extflash_cs_set+0x14>)
 80018a0:	f008 ff4a 	bl	800a738 <HAL_GPIO_WritePin>
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	48000400 	.word	0x48000400

080018ac <extflash_cs_reset>:

void extflash_cs_reset()
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018b6:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <extflash_cs_reset+0x14>)
 80018b8:	f008 ff3e 	bl	800a738 <HAL_GPIO_WritePin>
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	48000400 	.word	0x48000400

080018c4 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	2140      	movs	r1, #64	@ 0x40
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <extflash_wp_reset+0x14>)
 80018ce:	f008 ff33 	bl	800a738 <HAL_GPIO_WritePin>
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	48000800 	.word	0x48000800

080018dc <extflash_hard_reset>:


void extflash_hard_reset()
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2180      	movs	r1, #128	@ 0x80
 80018e4:	4806      	ldr	r0, [pc, #24]	@ (8001900 <extflash_hard_reset+0x24>)
 80018e6:	f008 ff27 	bl	800a738 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 80018ea:	2032      	movs	r0, #50	@ 0x32
 80018ec:	f006 fd68 	bl	80083c0 <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 80018f0:	2201      	movs	r2, #1
 80018f2:	2180      	movs	r1, #128	@ 0x80
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <extflash_hard_reset+0x24>)
 80018f6:	f008 ff1f 	bl	800a738 <HAL_GPIO_WritePin>

	return;
 80018fa:	bf00      	nop
}
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	48000800 	.word	0x48000800

08001904 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	785b      	ldrb	r3, [r3, #1]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00d      	beq.n	8001948 <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	0c1b      	lsrs	r3, r3, #16
 8001932:	b2db      	uxtb	r3, r3
 8001934:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	0a1b      	lsrs	r3, r3, #8
 800193c:	b2db      	uxtb	r3, r3
 800193e:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 8001948:	f7ff ffa4 	bl	8001894 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 800194c:	f107 010f 	add.w	r1, r7, #15
 8001950:	2364      	movs	r3, #100	@ 0x64
 8001952:	2201      	movs	r2, #1
 8001954:	4823      	ldr	r0, [pc, #140]	@ (80019e4 <extflash_send_cmd+0xe0>)
 8001956:	f00c f978 	bl	800dc4a <HAL_SPI_Transmit>

	if(command->address_en != 0)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	785b      	ldrb	r3, [r3, #1]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d006      	beq.n	8001970 <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 8001962:	f107 0118 	add.w	r1, r7, #24
 8001966:	2364      	movs	r3, #100	@ 0x64
 8001968:	2203      	movs	r2, #3
 800196a:	481e      	ldr	r0, [pc, #120]	@ (80019e4 <extflash_send_cmd+0xe0>)
 800196c:	f00c f96d 	bl	800dc4a <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	88db      	ldrh	r3, [r3, #6]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00e      	beq.n	8001996 <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	88db      	ldrh	r3, [r3, #6]
 800197c:	2b08      	cmp	r3, #8
 800197e:	bf28      	it	cs
 8001980:	2308      	movcs	r3, #8
 8001982:	b29b      	uxth	r3, r3
 8001984:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 8001986:	7ffb      	ldrb	r3, [r7, #31]
 8001988:	b29a      	uxth	r2, r3
 800198a:	f107 0110 	add.w	r1, r7, #16
 800198e:	2364      	movs	r3, #100	@ 0x64
 8001990:	4814      	ldr	r0, [pc, #80]	@ (80019e4 <extflash_send_cmd+0xe0>)
 8001992:	f00c f95a 	bl	800dc4a <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	885b      	ldrh	r3, [r3, #2]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <extflash_send_cmd+0xb2>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d007      	beq.n	80019b6 <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68d9      	ldr	r1, [r3, #12]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	885a      	ldrh	r2, [r3, #2]
 80019ae:	2364      	movs	r3, #100	@ 0x64
 80019b0:	480c      	ldr	r0, [pc, #48]	@ (80019e4 <extflash_send_cmd+0xe0>)
 80019b2:	f00c f94a 	bl	800dc4a <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	889b      	ldrh	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00b      	beq.n	80019d6 <extflash_send_cmd+0xd2>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d007      	beq.n	80019d6 <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6919      	ldr	r1, [r3, #16]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	889a      	ldrh	r2, [r3, #4]
 80019ce:	2364      	movs	r3, #100	@ 0x64
 80019d0:	4804      	ldr	r0, [pc, #16]	@ (80019e4 <extflash_send_cmd+0xe0>)
 80019d2:	f00c fab0 	bl	800df36 <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 80019d6:	f7ff ff69 	bl	80018ac <extflash_cs_reset>

	return 0;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3720      	adds	r7, #32
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000021c 	.word	0x2000021c

080019e8 <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 8001a00:	2381      	movs	r3, #129	@ 0x81
 8001a02:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff73 	bl	8001904 <extflash_send_cmd>
 8001a1e:	4603      	mov	r3, r0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 8001a3c:	2382      	movs	r3, #130	@ 0x82
 8001a3e:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff5e 	bl	8001904 <extflash_send_cmd>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b088      	sub	sp, #32
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <extflash_set_write_protection+0x24>
 8001a72:	2306      	movs	r3, #6
 8001a74:	e000      	b.n	8001a78 <extflash_set_write_protection+0x26>
 8001a76:	2304      	movs	r3, #4
 8001a78:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff40 	bl	8001904 <extflash_send_cmd>
 8001a84:	4603      	mov	r3, r0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b08a      	sub	sp, #40	@ 0x28
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 8001aac:	235a      	movs	r3, #90	@ 0x5a
 8001aae:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ff1a 	bl	8001904 <extflash_send_cmd>
 8001ad0:	4603      	mov	r3, r0

}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3728      	adds	r7, #40	@ 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b08a      	sub	sp, #40	@ 0x28
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 8001af8:	230b      	movs	r3, #11
 8001afa:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	757b      	strb	r3, [r7, #21]
	command.address = address;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fef5 	bl	8001904 <extflash_send_cmd>
 8001b1a:	4603      	mov	r3, r0

}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3728      	adds	r7, #40	@ 0x28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 8001b3c:	23d7      	movs	r3, #215	@ 0xd7
 8001b3e:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fed9 	bl	8001904 <extflash_send_cmd>
 8001b52:	4603      	mov	r3, r0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 8001b82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b86:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff feb7 	bl	8001904 <extflash_send_cmd>
 8001b96:	4603      	mov	r3, r0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	@ 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
	int result = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 8001bb4:	f006 fbf8 	bl	80083a8 <HAL_GetTick>
 8001bb8:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	031b      	lsls	r3, r3, #12
 8001bc2:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001bc4:	f107 0317 	add.w	r3, r7, #23
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff0d 	bl	80019e8 <extflash_read_extended_read_reg>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	da10      	bge.n	8001bf6 <extflash_sector_read+0x56>
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd8:	e037      	b.n	8001c4a <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001bda:	f107 0317 	add.w	r3, r7, #23
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff02 	bl	80019e8 <extflash_read_extended_read_reg>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	da02      	bge.n	8001bf0 <extflash_sector_read+0x50>
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e02c      	b.n	8001c4a <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f006 fbe5 	bl	80083c0 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d020      	beq.n	8001c42 <extflash_sector_read+0xa2>
 8001c00:	f006 fbd2 	bl	80083a8 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c0e:	d3e4      	bcc.n	8001bda <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 8001c10:	e017      	b.n	8001c42 <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 8001c12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c18:	6a38      	ldr	r0, [r7, #32]
 8001c1a:	f7ff ff5e 	bl	8001ada <extflash_raw_read>
 8001c1e:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	da02      	bge.n	8001c2c <extflash_sector_read+0x8c>
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e00e      	b.n	8001c4a <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c32:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1e4      	bne.n	8001c12 <extflash_sector_read+0x72>
	}

	return 0;
 8001c48:	2300      	movs	r3, #0

}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3728      	adds	r7, #40	@ 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 8001c5e:	f006 fba3 	bl	80083a8 <HAL_GetTick>
 8001c62:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001c64:	f107 030b 	add.w	r3, r7, #11
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff febd 	bl	80019e8 <extflash_read_extended_read_reg>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	da10      	bge.n	8001c96 <extflash_wait_for_wop+0x44>
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
 8001c78:	e023      	b.n	8001cc2 <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8001c7a:	f107 030b 	add.w	r3, r7, #11
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff feb2 	bl	80019e8 <extflash_read_extended_read_reg>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	da02      	bge.n	8001c90 <extflash_wait_for_wop+0x3e>
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	e018      	b.n	8001cc2 <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8001c90:	2001      	movs	r0, #1
 8001c92:	f006 fb95 	bl	80083c0 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 8001c96:	7afb      	ldrb	r3, [r7, #11]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <extflash_wait_for_wop+0x5e>
 8001ca0:	f006 fb82 	bl	80083a8 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d8e4      	bhi.n	8001c7a <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 8001cb0:	7afb      	ldrb	r3, [r7, #11]
 8001cb2:	f003 030e 	and.w	r3, r3, #14
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 8001cba:	f06f 0301 	mvn.w	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <extflash_wait_for_wop+0x70>
	}

	return 0;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b088      	sub	sp, #32
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
	int result = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	031b      	lsls	r3, r3, #12
 8001ce2:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 8001ce4:	f7ff fea0 	bl	8001a28 <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 8001ce8:	e04e      	b.n	8001d88 <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8001cea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cee:	f7ff ffb0 	bl	8001c52 <extflash_wait_for_wop>
 8001cf2:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db4a      	blt.n	8001d90 <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7ff fea9 	bl	8001a52 <extflash_set_write_protection>
 8001d00:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db45      	blt.n	8001d94 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 8001d08:	69b8      	ldr	r0, [r7, #24]
 8001d0a:	f7ff ff0b 	bl	8001b24 <extflash_raw_erase>
 8001d0e:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db40      	blt.n	8001d98 <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8001d16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d1a:	f7ff ff9a 	bl	8001c52 <extflash_wait_for_wop>
 8001d1e:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db3a      	blt.n	8001d9c <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e021      	b.n	8001d70 <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff fe90 	bl	8001a52 <extflash_set_write_protection>
 8001d32:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	db1e      	blt.n	8001d78 <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 8001d3a:	69f9      	ldr	r1, [r7, #28]
 8001d3c:	69b8      	ldr	r0, [r7, #24]
 8001d3e:	f7ff ff0d 	bl	8001b5c <extflash_raw_page_write>
 8001d42:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	db18      	blt.n	8001d7c <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001d50:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001d58:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8001d5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d5e:	f7ff ff78 	bl	8001c52 <extflash_wait_for_wop>
 8001d62:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0a      	blt.n	8001d80 <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b0f      	cmp	r3, #15
 8001d74:	ddda      	ble.n	8001d2c <extflash_sector_write+0x62>
 8001d76:	e004      	b.n	8001d82 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8001d78:	bf00      	nop
 8001d7a:	e002      	b.n	8001d82 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8001d7c:	bf00      	nop
 8001d7e:	e000      	b.n	8001d82 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8001d80:	bf00      	nop
		}

		nsectors--;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1ad      	bne.n	8001cea <extflash_sector_write+0x20>
 8001d8e:	e006      	b.n	8001d9e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8001d90:	bf00      	nop
 8001d92:	e004      	b.n	8001d9e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8001d94:	bf00      	nop
 8001d96:	e002      	b.n	8001d9e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8001d98:	bf00      	nop
 8001d9a:	e000      	b.n	8001d9e <extflash_sector_write+0xd4>
		if(result < 0)break;
 8001d9c:	bf00      	nop
	}

	extflash_set_write_protection(1);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f7ff fe57 	bl	8001a52 <extflash_set_write_protection>

	return 0;
 8001da4:	2300      	movs	r3, #0

}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 8001db2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <extflash_get_sector_count+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000088 	.word	0x20000088

08001dd8 <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
	return exflashInitDone;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	@ (8001dec <extflash_is_initialized+0x14>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	2000008c 	.word	0x2000008c

08001df0 <extflash_init>:

int extflash_init()
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 8001df6:	2300      	movs	r3, #0
 8001df8:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
 8001e08:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 8001e0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ea8 <extflash_init+0xb8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 8001e14:	4b25      	ldr	r3, [pc, #148]	@ (8001eac <extflash_init+0xbc>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 8001e1a:	f7ff fd5f 	bl	80018dc <extflash_hard_reset>
	extflash_cs_reset();
 8001e1e:	f7ff fd45 	bl	80018ac <extflash_cs_reset>
	extflash_wp_reset();
 8001e22:	f7ff fd4f 	bl	80018c4 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 8001e26:	2390      	movs	r3, #144	@ 0x90
 8001e28:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 8001e32:	2302      	movs	r3, #2
 8001e34:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 8001e3c:	f107 0308 	add.w	r3, r7, #8
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fd5f 	bl	8001904 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 8001e46:	7f3b      	ldrb	r3, [r7, #28]
 8001e48:	2b9d      	cmp	r3, #157	@ 0x9d
 8001e4a:	d102      	bne.n	8001e52 <extflash_init+0x62>
 8001e4c:	7f7b      	ldrb	r3, [r7, #29]
 8001e4e:	2b17      	cmp	r3, #23
 8001e50:	d002      	beq.n	8001e58 <extflash_init+0x68>
	{
		return -1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	e022      	b.n	8001e9e <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 8001e58:	f107 0308 	add.w	r3, r7, #8
 8001e5c:	2214      	movs	r2, #20
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f00f ffc1 	bl	8011de8 <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2204      	movs	r2, #4
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	2034      	movs	r0, #52	@ 0x34
 8001e6e:	f7ff fe0e 	bl	8001a8e <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb0 <extflash_init+0xc0>)
 8001e76:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 8001e78:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <extflash_init+0xc0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb0 <extflash_init+0xc0>)
 8001e80:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <extflash_init+0xc0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	08db      	lsrs	r3, r3, #3
 8001e88:	4a09      	ldr	r2, [pc, #36]	@ (8001eb0 <extflash_init+0xc0>)
 8001e8a:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <extflash_init+0xc0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0b1b      	lsrs	r3, r3, #12
 8001e92:	4a06      	ldr	r2, [pc, #24]	@ (8001eac <extflash_init+0xbc>)
 8001e94:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 8001e96:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <extflash_init+0xb8>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]

	return 0;
 8001e9c:	2300      	movs	r3, #0

}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3720      	adds	r7, #32
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000008c 	.word	0x2000008c
 8001eac:	20000088 	.word	0x20000088
 8001eb0:	20000084 	.word	0x20000084

08001eb4 <System_Init>:
#include "lsm6dsv16x_reg.h"
#include "lsm6dsv16x_rw.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <System_Init+0x68>)
 8001eba:	4a19      	ldr	r2, [pc, #100]	@ (8001f20 <System_Init+0x6c>)
 8001ebc:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 8001ebe:	4b17      	ldr	r3, [pc, #92]	@ (8001f1c <System_Init+0x68>)
 8001ec0:	4a18      	ldr	r2, [pc, #96]	@ (8001f24 <System_Init+0x70>)
 8001ec2:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 8001ec4:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <System_Init+0x68>)
 8001ec6:	4a18      	ldr	r2, [pc, #96]	@ (8001f28 <System_Init+0x74>)
 8001ec8:	60da      	str	r2, [r3, #12]

	LED_Start(ORG_LED, FAST);
 8001eca:	2102      	movs	r1, #2
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f000 fa2b 	bl	8002328 <LED_Start>

	BC_Init();
 8001ed2:	f7ff fab5 	bl	8001440 <BC_Init>
	INA3221_Init();
 8001ed6:	f7fe fc88 	bl	80007ea <INA3221_Init>
	Acc_Init(&acc);
 8001eda:	4810      	ldr	r0, [pc, #64]	@ (8001f1c <System_Init+0x68>)
 8001edc:	f000 f8b2 	bl	8002044 <Acc_Init>
	FatFS_Init();
 8001ee0:	f000 f828 	bl	8001f34 <FatFS_Init>
	Config_Init();
 8001ee4:	f000 f954 	bl	8002190 <Config_Init>
	SIM_Init();
 8001ee8:	f7fe fec6 	bl	8000c78 <SIM_Init>
	RTC_Init();
 8001eec:	f7fe fd2a 	bl	8000944 <RTC_Init>

	HAL_UARTEx_ReceiveToIdle_DMA(LTE_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8001ef0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ef4:	490d      	ldr	r1, [pc, #52]	@ (8001f2c <System_Init+0x78>)
 8001ef6:	480e      	ldr	r0, [pc, #56]	@ (8001f30 <System_Init+0x7c>)
 8001ef8:	f00f fe37 	bl	8011b6a <HAL_UARTEx_ReceiveToIdle_DMA>

	LED_Start(RED_LED, ON);
 8001efc:	2101      	movs	r1, #1
 8001efe:	2004      	movs	r0, #4
 8001f00:	f000 fa12 	bl	8002328 <LED_Start>
	HAL_Delay(9000);
 8001f04:	f242 3028 	movw	r0, #9000	@ 0x2328
 8001f08:	f006 fa5a 	bl	80083c0 <HAL_Delay>

	LED_Stop(RED_LED);
 8001f0c:	2004      	movs	r0, #4
 8001f0e:	f000 fa7b 	bl	8002408 <LED_Stop>
	LED_Stop(ORG_LED);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f000 fa78 	bl	8002408 <LED_Stop>
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200070b8 	.word	0x200070b8
 8001f20:	08002c2b 	.word	0x08002c2b
 8001f24:	08002c83 	.word	0x08002c83
 8001f28:	20000280 	.word	0x20000280
 8001f2c:	200070c8 	.word	0x200070c8
 8001f30:	2000049c 	.word	0x2000049c

08001f34 <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]

	do
	{
		flags.RAM_Mounted = 0;
 8001f4a:	4a37      	ldr	r2, [pc, #220]	@ (8002028 <FatFS_Init+0xf4>)
 8001f4c:	7813      	ldrb	r3, [r2, #0]
 8001f4e:	f023 0308 	bic.w	r3, r3, #8
 8001f52:	7013      	strb	r3, [r2, #0]
		
		mkfs_opt.fmt = FM_FAT32;
 8001f54:	2302      	movs	r3, #2
 8001f56:	713b      	strb	r3, [r7, #4]
		mkfs_opt.au_size = 1024; 
 8001f58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f5c:	613b      	str	r3, [r7, #16]
		mkfs_opt.n_fat = 1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	717b      	strb	r3, [r7, #5]
		mkfs_opt.align = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 8001f66:	1d39      	adds	r1, r7, #4
 8001f68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f6c:	4a2f      	ldr	r2, [pc, #188]	@ (800202c <FatFS_Init+0xf8>)
 8001f6e:	4830      	ldr	r0, [pc, #192]	@ (8002030 <FatFS_Init+0xfc>)
 8001f70:	f005 fd38 	bl	80079e4 <f_mkfs>
 8001f74:	4603      	mov	r3, r0
 8001f76:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <FatFS_Init+0x6a>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	492b      	ldr	r1, [pc, #172]	@ (8002030 <FatFS_Init+0xfc>)
 8001f82:	482c      	ldr	r0, [pc, #176]	@ (8002034 <FatFS_Init+0x100>)
 8001f84:	f004 fe0e 	bl	8006ba4 <f_mount>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d107      	bne.n	8001fa2 <FatFS_Init+0x6e>
		{
			break;
		}

		flags.RAM_Mounted = 1;
 8001f92:	4a25      	ldr	r2, [pc, #148]	@ (8002028 <FatFS_Init+0xf4>)
 8001f94:	7813      	ldrb	r3, [r2, #0]
 8001f96:	f043 0308 	orr.w	r3, r3, #8
 8001f9a:	7013      	strb	r3, [r2, #0]

		break;
 8001f9c:	e002      	b.n	8001fa4 <FatFS_Init+0x70>
			break;
 8001f9e:	bf00      	nop
 8001fa0:	e000      	b.n	8001fa4 <FatFS_Init+0x70>
			break;
 8001fa2:	bf00      	nop
	} while (1);

	do
	{
		flags.FLASH_Mounted = 0;
 8001fa4:	4a20      	ldr	r2, [pc, #128]	@ (8002028 <FatFS_Init+0xf4>)
 8001fa6:	7813      	ldrb	r3, [r2, #0]
 8001fa8:	f023 0310 	bic.w	r3, r3, #16
 8001fac:	7013      	strb	r3, [r2, #0]
		fRes = f_mount(&flash_fs, "/flash", 1);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4921      	ldr	r1, [pc, #132]	@ (8002038 <FatFS_Init+0x104>)
 8001fb2:	4822      	ldr	r0, [pc, #136]	@ (800203c <FatFS_Init+0x108>)
 8001fb4:	f004 fdf6 	bl	8006ba4 <f_mount>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
 8001fbe:	2b0d      	cmp	r3, #13
 8001fc0:	d124      	bne.n	800200c <FatFS_Init+0xd8>
		{
			memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f00f ff0d 	bl	8011de8 <memset>
			mkfs_opt.fmt = FM_FAT32;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	713b      	strb	r3, [r7, #4]
			mkfs_opt.au_size = 4096;    
 8001fd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd6:	613b      	str	r3, [r7, #16]
			mkfs_opt.n_fat = 1;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	717b      	strb	r3, [r7, #5]
			mkfs_opt.align = 1;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 8001fe0:	1d39      	adds	r1, r7, #4
 8001fe2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fe6:	4a16      	ldr	r2, [pc, #88]	@ (8002040 <FatFS_Init+0x10c>)
 8001fe8:	4813      	ldr	r0, [pc, #76]	@ (8002038 <FatFS_Init+0x104>)
 8001fea:	f005 fcfb 	bl	80079e4 <f_mkfs>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8001ff2:	7dfb      	ldrb	r3, [r7, #23]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10f      	bne.n	8002018 <FatFS_Init+0xe4>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	490f      	ldr	r1, [pc, #60]	@ (8002038 <FatFS_Init+0x104>)
 8001ffc:	480f      	ldr	r0, [pc, #60]	@ (800203c <FatFS_Init+0x108>)
 8001ffe:	f004 fdd1 	bl	8006ba4 <f_mount>
 8002002:	4603      	mov	r3, r0
 8002004:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 8002006:	7dfb      	ldrb	r3, [r7, #23]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d107      	bne.n	800201c <FatFS_Init+0xe8>
			{
				break;
			}
		}

		flags.FLASH_Mounted = 1;
 800200c:	4a06      	ldr	r2, [pc, #24]	@ (8002028 <FatFS_Init+0xf4>)
 800200e:	7813      	ldrb	r3, [r2, #0]
 8002010:	f043 0310 	orr.w	r3, r3, #16
 8002014:	7013      	strb	r3, [r2, #0]

		break;
 8002016:	e002      	b.n	800201e <FatFS_Init+0xea>
				break;
 8002018:	bf00      	nop
 800201a:	e000      	b.n	800201e <FatFS_Init+0xea>
				break;
 800201c:	bf00      	nop
	} while (1);


}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20003990 	.word	0x20003990
 800202c:	20003aec 	.word	0x20003aec
 8002030:	080131e8 	.word	0x080131e8
 8002034:	20003ab8 	.word	0x20003ab8
 8002038:	080131f0 	.word	0x080131f0
 800203c:	20004aec 	.word	0x20004aec
 8002040:	20004b20 	.word	0x20004b20

08002044 <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
void Acc_Init(stmdev_ctx_t* acc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	2100      	movs	r1, #0
 8002052:	460a      	mov	r2, r1
 8002054:	801a      	strh	r2, [r3, #0]
 8002056:	460a      	mov	r2, r1
 8002058:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 8002062:	7c3b      	ldrb	r3, [r7, #16]
 8002064:	f043 0308 	orr.w	r3, r3, #8
 8002068:	743b      	strb	r3, [r7, #16]


	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 800206a:	f107 030f 	add.w	r3, r7, #15
 800206e:	4619      	mov	r1, r3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 faad 	bl	80025d0 <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	2b70      	cmp	r3, #112	@ 0x70
 800207a:	d01a      	beq.n	80020b2 <Acc_Init+0x6e>
		while (acc_whoamI != LSM6DSV16X_ID)
 800207c:	e016      	b.n	80020ac <Acc_Init+0x68>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 800207e:	f107 030f 	add.w	r3, r7, #15
 8002082:	4619      	mov	r1, r3
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 faa3 	bl	80025d0 <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 800208a:	7dfb      	ldrb	r3, [r7, #23]
 800208c:	3301      	adds	r3, #1
 800208e:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 8002090:	7dfb      	ldrb	r3, [r7, #23]
 8002092:	2b03      	cmp	r3, #3
 8002094:	d10a      	bne.n	80020ac <Acc_Init+0x68>
			{
				flags.ACC_Present = 0;
 8002096:	4a3b      	ldr	r2, [pc, #236]	@ (8002184 <Acc_Init+0x140>)
 8002098:	7853      	ldrb	r3, [r2, #1]
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	7053      	strb	r3, [r2, #1]
				flags.ACC_Complete = 1;
 80020a0:	4a38      	ldr	r2, [pc, #224]	@ (8002184 <Acc_Init+0x140>)
 80020a2:	7853      	ldrb	r3, [r2, #1]
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	7053      	strb	r3, [r2, #1]
 80020aa:	e068      	b.n	800217e <Acc_Init+0x13a>
		while (acc_whoamI != LSM6DSV16X_ID)
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	2b70      	cmp	r3, #112	@ 0x70
 80020b0:	d1e5      	bne.n	800207e <Acc_Init+0x3a>
				return;
			}
		}
	flags.ACC_Present = 1;
 80020b2:	4a34      	ldr	r2, [pc, #208]	@ (8002184 <Acc_Init+0x140>)
 80020b4:	7853      	ldrb	r3, [r2, #1]
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	7053      	strb	r3, [r2, #1]
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 80020bc:	2101      	movs	r1, #1
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f9e0 	bl	8002484 <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 80020c4:	f107 0316 	add.w	r3, r7, #22
 80020c8:	4619      	mov	r1, r3
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fa2a 	bl	8002524 <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 80020d0:	200a      	movs	r0, #10
 80020d2:	f006 f975 	bl	80083c0 <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 80020d6:	7dbb      	ldrb	r3, [r7, #22]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f3      	bne.n	80020c4 <Acc_Init+0x80>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 80020dc:	2101      	movs	r1, #1
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fb73 	bl	80027ca <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 80020e4:	2101      	movs	r1, #1
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fd79 	bl	8002bde <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 80020ec:	2100      	movs	r1, #0
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fad0 	bl	8002694 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 80020f4:	2100      	movs	r1, #0
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fb41 	bl	800277e <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 80020fc:	2109      	movs	r1, #9
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fcfb 	bl	8002afa <lsm6dsv16x_fifo_xl_batch_set>
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 8002104:	2100      	movs	r1, #0
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fd1d 	bl	8002b46 <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 800210c:	2100      	movs	r1, #0
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fd3f 	bl	8002b92 <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8002114:	2100      	movs	r1, #0
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fa6b 	bl	80025f2 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 800211c:	2100      	movs	r1, #0
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fade 	bl	80026e0 <lsm6dsv16x_gy_data_rate_set>
	lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 8002124:	2110      	movs	r1, #16
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fb75 	bl	8002816 <lsm6dsv16x_odr_trig_cfg_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 800212c:	2103      	movs	r1, #3
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fab0 	bl	8002694 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 8002134:	2103      	movs	r1, #3
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fb21 	bl	800277e <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 800213c:	2101      	movs	r1, #1
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fc95 	bl	8002a6e <lsm6dsv16x_den_polarity_set>
	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 8002144:	2108      	movs	r1, #8
 8002146:	4810      	ldr	r0, [pc, #64]	@ (8002188 <Acc_Init+0x144>)
 8002148:	f00c ff50 	bl	800efec <HAL_TIM_PWM_Start>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 800214c:	2109      	movs	r1, #9
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 fa4f 	bl	80025f2 <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 8002154:	2100      	movs	r1, #0
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fbac 	bl	80028b4 <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 800215c:	2104      	movs	r1, #4
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fb82 	bl	8002868 <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 8002164:	21c8      	movs	r1, #200	@ 0xc8
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fca7 	bl	8002aba <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	4619      	mov	r1, r3
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 fbc4 	bl	8002900 <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 8002178:	4b04      	ldr	r3, [pc, #16]	@ (800218c <Acc_Init+0x148>)
 800217a:	2204      	movs	r2, #4
 800217c:	615a      	str	r2, [r3, #20]
}
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20003990 	.word	0x20003990
 8002188:	2000037c 	.word	0x2000037c
 800218c:	40010400 	.word	0x40010400

08002190 <Config_Init>:

/*-----INIZiALIZZAZIONE CONFIGURAZIONE-----*/
void Config_Init(void)
{
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
    FIL config_file;
    UINT bytes_read;
    UINT bytes_written;

    if (f_open(&config_file, APP_CONFIG_FILE, FA_READ) == FR_OK) 
 800219a:	f107 0318 	add.w	r3, r7, #24
 800219e:	3b0c      	subs	r3, #12
 80021a0:	2201      	movs	r2, #1
 80021a2:	4959      	ldr	r1, [pc, #356]	@ (8002308 <Config_Init+0x178>)
 80021a4:	4618      	mov	r0, r3
 80021a6:	f004 fd47 	bl	8006c38 <f_open>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d121      	bne.n	80021f4 <Config_Init+0x64>
	{
        if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 80021b0:	f107 0318 	add.w	r3, r7, #24
 80021b4:	3b10      	subs	r3, #16
 80021b6:	f107 0018 	add.w	r0, r7, #24
 80021ba:	380c      	subs	r0, #12
 80021bc:	f44f 7292 	mov.w	r2, #292	@ 0x124
 80021c0:	4952      	ldr	r1, [pc, #328]	@ (800230c <Config_Init+0x17c>)
 80021c2:	f004 fed1 	bl	8006f68 <f_read>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10d      	bne.n	80021e8 <Config_Init+0x58>
 80021cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021d0:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80021d4:	f5b3 7f92 	cmp.w	r3, #292	@ 0x124
 80021d8:	d106      	bne.n	80021e8 <Config_Init+0x58>
		{
			f_close(&config_file);
 80021da:	f107 0318 	add.w	r3, r7, #24
 80021de:	3b0c      	subs	r3, #12
 80021e0:	4618      	mov	r0, r3
 80021e2:	f005 fa1d 	bl	8007620 <f_close>
			return;
 80021e6:	e089      	b.n	80022fc <Config_Init+0x16c>
        }
        f_close(&config_file);
 80021e8:	f107 0318 	add.w	r3, r7, #24
 80021ec:	3b0c      	subs	r3, #12
 80021ee:	4618      	mov	r0, r3
 80021f0:	f005 fa16 	bl	8007620 <f_close>
    }

    config.device_id = 0;
 80021f4:	4b45      	ldr	r3, [pc, #276]	@ (800230c <Config_Init+0x17c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
	config.hammer_th = 2048;
 80021fa:	4b44      	ldr	r3, [pc, #272]	@ (800230c <Config_Init+0x17c>)
 80021fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002200:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 24; i++) 
 8002202:	2300      	movs	r3, #0
 8002204:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002208:	f102 0214 	add.w	r2, r2, #20
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e020      	b.n	8002252 <Config_Init+0xc2>
	{
        config.low_th[i] = 0;
 8002210:	4a3e      	ldr	r2, [pc, #248]	@ (800230c <Config_Init+0x17c>)
 8002212:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002216:	f103 0314 	add.w	r3, r3, #20
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	2200      	movs	r2, #0
 8002222:	809a      	strh	r2, [r3, #4]
        config.high_th[i] = 4096;
 8002224:	4a39      	ldr	r2, [pc, #228]	@ (800230c <Config_Init+0x17c>)
 8002226:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800222a:	f103 0314 	add.w	r3, r3, #20
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3318      	adds	r3, #24
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800223a:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < 24; i++) 
 800223c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002240:	f103 0314 	add.w	r3, r3, #20
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3301      	adds	r3, #1
 8002248:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800224c:	f102 0214 	add.w	r2, r2, #20
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002256:	f103 0314 	add.w	r3, r3, #20
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b17      	cmp	r3, #23
 800225e:	ddd7      	ble.n	8002210 <Config_Init+0x80>
    }
    strcpy(config.data_topic, "Data_Topic");
 8002260:	4a2b      	ldr	r2, [pc, #172]	@ (8002310 <Config_Init+0x180>)
 8002262:	4b2c      	ldr	r3, [pc, #176]	@ (8002314 <Config_Init+0x184>)
 8002264:	cb03      	ldmia	r3!, {r0, r1}
 8002266:	6010      	str	r0, [r2, #0]
 8002268:	6051      	str	r1, [r2, #4]
 800226a:	8819      	ldrh	r1, [r3, #0]
 800226c:	789b      	ldrb	r3, [r3, #2]
 800226e:	8111      	strh	r1, [r2, #8]
 8002270:	7293      	strb	r3, [r2, #10]
    strcpy(config.command_topic, "Command_Topic");  
 8002272:	4a29      	ldr	r2, [pc, #164]	@ (8002318 <Config_Init+0x188>)
 8002274:	4b29      	ldr	r3, [pc, #164]	@ (800231c <Config_Init+0x18c>)
 8002276:	4614      	mov	r4, r2
 8002278:	cb07      	ldmia	r3!, {r0, r1, r2}
 800227a:	6020      	str	r0, [r4, #0]
 800227c:	6061      	str	r1, [r4, #4]
 800227e:	60a2      	str	r2, [r4, #8]
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	81a3      	strh	r3, [r4, #12]
    strcpy(config.ota_topic, "OTA_Topic");
 8002284:	4a26      	ldr	r2, [pc, #152]	@ (8002320 <Config_Init+0x190>)
 8002286:	4b27      	ldr	r3, [pc, #156]	@ (8002324 <Config_Init+0x194>)
 8002288:	cb03      	ldmia	r3!, {r0, r1}
 800228a:	6010      	str	r0, [r2, #0]
 800228c:	6051      	str	r1, [r2, #4]
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	8113      	strh	r3, [r2, #8]
    
    if (f_open(&config_file, APP_CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 8002292:	f107 0318 	add.w	r3, r7, #24
 8002296:	3b0c      	subs	r3, #12
 8002298:	220a      	movs	r2, #10
 800229a:	491b      	ldr	r1, [pc, #108]	@ (8002308 <Config_Init+0x178>)
 800229c:	4618      	mov	r0, r3
 800229e:	f004 fccb 	bl	8006c38 <f_open>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d128      	bne.n	80022fa <Config_Init+0x16a>
    {
        return;
    }

    if (f_write(&config_file, &config, sizeof(Config_Typedef), &bytes_written) != FR_OK || bytes_written != sizeof(Config_Typedef)) 
 80022a8:	f107 0318 	add.w	r3, r7, #24
 80022ac:	3b14      	subs	r3, #20
 80022ae:	f107 0018 	add.w	r0, r7, #24
 80022b2:	380c      	subs	r0, #12
 80022b4:	f44f 7292 	mov.w	r2, #292	@ 0x124
 80022b8:	4914      	ldr	r1, [pc, #80]	@ (800230c <Config_Init+0x17c>)
 80022ba:	f004 ffa8 	bl	800720e <f_write>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d106      	bne.n	80022d2 <Config_Init+0x142>
 80022c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022c8:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80022cc:	f5b3 7f92 	cmp.w	r3, #292	@ 0x124
 80022d0:	d006      	beq.n	80022e0 <Config_Init+0x150>
	{
        f_close(&config_file);
 80022d2:	f107 0318 	add.w	r3, r7, #24
 80022d6:	3b0c      	subs	r3, #12
 80022d8:	4618      	mov	r0, r3
 80022da:	f005 f9a1 	bl	8007620 <f_close>
        return;
 80022de:	e00d      	b.n	80022fc <Config_Init+0x16c>
    }
    
    f_sync(&config_file);
 80022e0:	f107 0318 	add.w	r3, r7, #24
 80022e4:	3b0c      	subs	r3, #12
 80022e6:	4618      	mov	r0, r3
 80022e8:	f005 f91a 	bl	8007520 <f_sync>
    f_close(&config_file);
 80022ec:	f107 0318 	add.w	r3, r7, #24
 80022f0:	3b0c      	subs	r3, #12
 80022f2:	4618      	mov	r0, r3
 80022f4:	f005 f994 	bl	8007620 <f_close>
 80022f8:	e000      	b.n	80022fc <Config_Init+0x16c>
        return;
 80022fa:	bf00      	nop
}
 80022fc:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd90      	pop	{r4, r7, pc}
 8002306:	bf00      	nop
 8002308:	080131f8 	.word	0x080131f8
 800230c:	20003994 	.word	0x20003994
 8002310:	200039f8 	.word	0x200039f8
 8002314:	0801320c 	.word	0x0801320c
 8002318:	20003a38 	.word	0x20003a38
 800231c:	08013218 	.word	0x08013218
 8002320:	20003a78 	.word	0x20003a78
 8002324:	08013228 	.word	0x08013228

08002328 <LED_Start>:
#include "leds.h"
#include "peripherals.h"

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t mode)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	@ 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	70fb      	strb	r3, [r7, #3]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002334:	f107 030c 	add.w	r3, r7, #12
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
 8002344:	615a      	str	r2, [r3, #20]
 8002346:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002358:	2300      	movs	r3, #0
 800235a:	623b      	str	r3, [r7, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24

	switch(mode)
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	2b03      	cmp	r3, #3
 8002364:	d00e      	beq.n	8002384 <LED_Start+0x5c>
 8002366:	2b03      	cmp	r3, #3
 8002368:	dc10      	bgt.n	800238c <LED_Start+0x64>
 800236a:	2b01      	cmp	r3, #1
 800236c:	d002      	beq.n	8002374 <LED_Start+0x4c>
 800236e:	2b02      	cmp	r3, #2
 8002370:	d004      	beq.n	800237c <LED_Start+0x54>
 8002372:	e00b      	b.n	800238c <LED_Start+0x64>
	{
	case ON:
		sConfigOC.Pulse = 49999;
 8002374:	f24c 334f 	movw	r3, #49999	@ 0xc34f
 8002378:	613b      	str	r3, [r7, #16]
		break;
 800237a:	e007      	b.n	800238c <LED_Start+0x64>
	case FAST:
		sConfigOC.Pulse = 24999;
 800237c:	f246 13a7 	movw	r3, #24999	@ 0x61a7
 8002380:	613b      	str	r3, [r7, #16]
		break;
 8002382:	e003      	b.n	800238c <LED_Start+0x64>
	case SLOW:
		sConfigOC.Pulse = 12499;
 8002384:	f243 03d3 	movw	r3, #12499	@ 0x30d3
 8002388:	613b      	str	r3, [r7, #16]
		break;
 800238a:	bf00      	nop
	}

	HAL_TIM_Base_Init(LED_TIMER);
 800238c:	481d      	ldr	r0, [pc, #116]	@ (8002404 <LED_Start+0xdc>)
 800238e:	f00c fae5 	bl	800e95c <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Init(LED_TIMER);
 8002392:	481c      	ldr	r0, [pc, #112]	@ (8002404 <LED_Start+0xdc>)
 8002394:	f00c fdc8 	bl	800ef28 <HAL_TIM_PWM_Init>

	switch(LED)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b08      	cmp	r3, #8
 800239c:	d009      	beq.n	80023b2 <LED_Start+0x8a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d82a      	bhi.n	80023fa <LED_Start+0xd2>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d01b      	beq.n	80023e2 <LED_Start+0xba>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d00c      	beq.n	80023ca <LED_Start+0xa2>
	case ORG_LED:
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
		HAL_TIM_PWM_Start(LED_TIMER, LED);
		break;
	}
}
 80023b0:	e023      	b.n	80023fa <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	4619      	mov	r1, r3
 80023ba:	4812      	ldr	r0, [pc, #72]	@ (8002404 <LED_Start+0xdc>)
 80023bc:	f00d f920 	bl	800f600 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4810      	ldr	r0, [pc, #64]	@ (8002404 <LED_Start+0xdc>)
 80023c4:	f00c fe12 	bl	800efec <HAL_TIM_PWM_Start>
		break;
 80023c8:	e017      	b.n	80023fa <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4619      	mov	r1, r3
 80023d2:	480c      	ldr	r0, [pc, #48]	@ (8002404 <LED_Start+0xdc>)
 80023d4:	f00d f914 	bl	800f600 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	480a      	ldr	r0, [pc, #40]	@ (8002404 <LED_Start+0xdc>)
 80023dc:	f00c fe06 	bl	800efec <HAL_TIM_PWM_Start>
		break;
 80023e0:	e00b      	b.n	80023fa <LED_Start+0xd2>
		HAL_TIM_PWM_ConfigChannel(LED_TIMER, &sConfigOC, LED);
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4619      	mov	r1, r3
 80023ea:	4806      	ldr	r0, [pc, #24]	@ (8002404 <LED_Start+0xdc>)
 80023ec:	f00d f908 	bl	800f600 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(LED_TIMER, LED);
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4804      	ldr	r0, [pc, #16]	@ (8002404 <LED_Start+0xdc>)
 80023f4:	f00c fdfa 	bl	800efec <HAL_TIM_PWM_Start>
		break;
 80023f8:	bf00      	nop
}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	@ 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200002e4 	.word	0x200002e4

08002408 <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(LED_TIMER, LED);
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4803      	ldr	r0, [pc, #12]	@ (8002420 <LED_Stop+0x18>)
 8002414:	f00c fef0 	bl	800f1f8 <HAL_TIM_PWM_Stop>
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	200002e4 	.word	0x200002e4

08002424 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	461a      	mov	r2, r3
 8002430:	460b      	mov	r3, r1
 8002432:	72fb      	strb	r3, [r7, #11]
 8002434:	4613      	mov	r3, r2
 8002436:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685c      	ldr	r4, [r3, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	68d8      	ldr	r0, [r3, #12]
 8002440:	893b      	ldrh	r3, [r7, #8]
 8002442:	7af9      	ldrb	r1, [r7, #11]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	47a0      	blx	r4
 8002448:	6178      	str	r0, [r7, #20]

  return ret;
 800244a:	697b      	ldr	r3, [r7, #20]
}
 800244c:	4618      	mov	r0, r3
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	bd90      	pop	{r4, r7, pc}

08002454 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	461a      	mov	r2, r3
 8002460:	460b      	mov	r3, r1
 8002462:	72fb      	strb	r3, [r7, #11]
 8002464:	4613      	mov	r3, r2
 8002466:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681c      	ldr	r4, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	68d8      	ldr	r0, [r3, #12]
 8002470:	893b      	ldrh	r3, [r7, #8]
 8002472:	7af9      	ldrb	r1, [r7, #11]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	47a0      	blx	r4
 8002478:	6178      	str	r0, [r7, #20]

  return ret;
 800247a:	697b      	ldr	r3, [r7, #20]
}
 800247c:	4618      	mov	r0, r3
 800247e:	371c      	adds	r7, #28
 8002480:	46bd      	mov	sp, r7
 8002482:	bd90      	pop	{r4, r7, pc}

08002484 <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8002490:	f107 020c 	add.w	r2, r7, #12
 8002494:	2301      	movs	r3, #1
 8002496:	2112      	movs	r1, #18
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ffc3 	bl	8002424 <lsm6dsv16x_read_reg>
 800249e:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80024a0:	f107 0210 	add.w	r2, r7, #16
 80024a4:	2301      	movs	r3, #1
 80024a6:	2101      	movs	r1, #1
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ffbb 	bl	8002424 <lsm6dsv16x_read_reg>
 80024ae:	4602      	mov	r2, r0
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	4413      	add	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <lsm6dsv16x_reset_set+0x3c>
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	e02d      	b.n	800251c <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	7b3b      	ldrb	r3, [r7, #12]
 80024cc:	f362 13c7 	bfi	r3, r2, #7, #1
 80024d0:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	085b      	lsrs	r3, r3, #1
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	7b3b      	ldrb	r3, [r7, #12]
 80024de:	f362 0300 	bfi	r3, r2, #0, #1
 80024e2:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	7c3b      	ldrb	r3, [r7, #16]
 80024ee:	f362 0382 	bfi	r3, r2, #2, #1
 80024f2:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80024f4:	f107 020c 	add.w	r2, r7, #12
 80024f8:	2301      	movs	r3, #1
 80024fa:	2112      	movs	r1, #18
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ffa9 	bl	8002454 <lsm6dsv16x_write_reg>
 8002502:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8002504:	f107 0210 	add.w	r2, r7, #16
 8002508:	2301      	movs	r3, #1
 800250a:	2101      	movs	r1, #1
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ffa1 	bl	8002454 <lsm6dsv16x_write_reg>
 8002512:	4602      	mov	r2, r0
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	4413      	add	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

  return ret;
 800251a:	697b      	ldr	r3, [r7, #20]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800252e:	f107 020c 	add.w	r2, r7, #12
 8002532:	2301      	movs	r3, #1
 8002534:	2112      	movs	r1, #18
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff74 	bl	8002424 <lsm6dsv16x_read_reg>
 800253c:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800253e:	f107 0210 	add.w	r2, r7, #16
 8002542:	2301      	movs	r3, #1
 8002544:	2101      	movs	r1, #1
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ff6c 	bl	8002424 <lsm6dsv16x_read_reg>
 800254c:	4602      	mov	r2, r0
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	4413      	add	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <lsm6dsv16x_reset_get+0x3a>
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	e033      	b.n	80025c6 <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 800255e:	7b3b      	ldrb	r3, [r7, #12]
 8002560:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	009a      	lsls	r2, r3, #2
 8002568:	7b3b      	ldrb	r3, [r7, #12]
 800256a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800256e:	b2db      	uxtb	r3, r3
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	7c3a      	ldrb	r2, [r7, #16]
 8002576:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	4413      	add	r3, r2
 800257e:	2b04      	cmp	r3, #4
 8002580:	d81c      	bhi.n	80025bc <lsm6dsv16x_reset_get+0x98>
 8002582:	a201      	add	r2, pc, #4	@ (adr r2, 8002588 <lsm6dsv16x_reset_get+0x64>)
 8002584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002588:	0800259d 	.word	0x0800259d
 800258c:	080025a5 	.word	0x080025a5
 8002590:	080025ad 	.word	0x080025ad
 8002594:	080025bd 	.word	0x080025bd
 8002598:	080025b5 	.word	0x080025b5
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
      break;
 80025a2:	e00f      	b.n	80025c4 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
      break;
 80025aa:	e00b      	b.n	80025c4 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2202      	movs	r2, #2
 80025b0:	701a      	strb	r2, [r3, #0]
      break;
 80025b2:	e007      	b.n	80025c4 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	2204      	movs	r2, #4
 80025b8:	701a      	strb	r2, [r3, #0]
      break;
 80025ba:	e003      	b.n	80025c4 <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
      break;
 80025c2:	bf00      	nop
  }

  return ret;
 80025c4:	697b      	ldr	r3, [r7, #20]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop

080025d0 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 80025da:	2301      	movs	r3, #1
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	210f      	movs	r1, #15
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff1f 	bl	8002424 <lsm6dsv16x_read_reg>
 80025e6:	60f8      	str	r0, [r7, #12]

  return ret;
 80025e8:	68fb      	ldr	r3, [r7, #12]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80025fe:	f107 0210 	add.w	r2, r7, #16
 8002602:	2301      	movs	r3, #1
 8002604:	2110      	movs	r1, #16
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ff0c 	bl	8002424 <lsm6dsv16x_read_reg>
 800260c:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <lsm6dsv16x_xl_data_rate_set+0x26>
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	e039      	b.n	800268c <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	b2da      	uxtb	r2, r3
 8002620:	7c3b      	ldrb	r3, [r7, #16]
 8002622:	f362 0303 	bfi	r3, r2, #0, #4
 8002626:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8002628:	f107 0210 	add.w	r2, r7, #16
 800262c:	2301      	movs	r3, #1
 800262e:	2110      	movs	r1, #16
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff0f 	bl	8002454 <lsm6dsv16x_write_reg>
 8002636:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <lsm6dsv16x_xl_data_rate_set+0x50>
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	e024      	b.n	800268c <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8002642:	78fb      	ldrb	r3, [r7, #3]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01d      	beq.n	800268a <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800264e:	f107 020c 	add.w	r2, r7, #12
 8002652:	2301      	movs	r3, #1
 8002654:	2162      	movs	r1, #98	@ 0x62
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fee4 	bl	8002424 <lsm6dsv16x_read_reg>
 800265c:	4602      	mov	r2, r0
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	4413      	add	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	b2da      	uxtb	r2, r3
 800266c:	7b3b      	ldrb	r3, [r7, #12]
 800266e:	f362 0301 	bfi	r3, r2, #0, #2
 8002672:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002674:	f107 020c 	add.w	r2, r7, #12
 8002678:	2301      	movs	r3, #1
 800267a:	2162      	movs	r1, #98	@ 0x62
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fee9 	bl	8002454 <lsm6dsv16x_write_reg>
 8002682:	4602      	mov	r2, r0
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	4413      	add	r3, r2
 8002688:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800268a:	697b      	ldr	r3, [r7, #20]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80026a0:	f107 0208 	add.w	r2, r7, #8
 80026a4:	2301      	movs	r3, #1
 80026a6:	2110      	movs	r1, #16
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff febb 	bl	8002424 <lsm6dsv16x_read_reg>
 80026ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	7a3b      	ldrb	r3, [r7, #8]
 80026c0:	f362 1306 	bfi	r3, r2, #4, #3
 80026c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80026c6:	f107 0208 	add.w	r2, r7, #8
 80026ca:	2301      	movs	r3, #1
 80026cc:	2110      	movs	r1, #16
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff fec0 	bl	8002454 <lsm6dsv16x_write_reg>
 80026d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80026d6:	68fb      	ldr	r3, [r7, #12]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80026ec:	f107 0210 	add.w	r2, r7, #16
 80026f0:	2301      	movs	r3, #1
 80026f2:	2111      	movs	r1, #17
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff fe95 	bl	8002424 <lsm6dsv16x_read_reg>
 80026fa:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	b2da      	uxtb	r2, r3
 8002704:	7c3b      	ldrb	r3, [r7, #16]
 8002706:	f362 0303 	bfi	r3, r2, #0, #4
 800270a:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 800270c:	f107 0210 	add.w	r2, r7, #16
 8002710:	2301      	movs	r3, #1
 8002712:	2111      	movs	r1, #17
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff fe9d 	bl	8002454 <lsm6dsv16x_write_reg>
 800271a:	4602      	mov	r2, r0
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	4413      	add	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <lsm6dsv16x_gy_data_rate_set+0x4c>
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	e024      	b.n	8002776 <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01d      	beq.n	8002774 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8002738:	f107 020c 	add.w	r2, r7, #12
 800273c:	2301      	movs	r3, #1
 800273e:	2162      	movs	r1, #98	@ 0x62
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff fe6f 	bl	8002424 <lsm6dsv16x_read_reg>
 8002746:	4602      	mov	r2, r0
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	4413      	add	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	b2da      	uxtb	r2, r3
 8002756:	7b3b      	ldrb	r3, [r7, #12]
 8002758:	f362 0301 	bfi	r3, r2, #0, #2
 800275c:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800275e:	f107 020c 	add.w	r2, r7, #12
 8002762:	2301      	movs	r3, #1
 8002764:	2162      	movs	r1, #98	@ 0x62
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff fe74 	bl	8002454 <lsm6dsv16x_write_reg>
 800276c:	4602      	mov	r2, r0
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	4413      	add	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002774:	697b      	ldr	r3, [r7, #20]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 800278a:	f107 0208 	add.w	r2, r7, #8
 800278e:	2301      	movs	r3, #1
 8002790:	2111      	movs	r1, #17
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff fe46 	bl	8002424 <lsm6dsv16x_read_reg>
 8002798:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10f      	bne.n	80027c0 <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	7a3b      	ldrb	r3, [r7, #8]
 80027aa:	f362 1306 	bfi	r3, r2, #4, #3
 80027ae:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80027b0:	f107 0208 	add.w	r2, r7, #8
 80027b4:	2301      	movs	r3, #1
 80027b6:	2111      	movs	r1, #17
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff fe4b 	bl	8002454 <lsm6dsv16x_write_reg>
 80027be:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80027c0:	68fb      	ldr	r3, [r7, #12]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80027d6:	f107 0208 	add.w	r2, r7, #8
 80027da:	2301      	movs	r3, #1
 80027dc:	2112      	movs	r1, #18
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff fe20 	bl	8002424 <lsm6dsv16x_read_reg>
 80027e4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10f      	bne.n	800280c <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	7a3b      	ldrb	r3, [r7, #8]
 80027f6:	f362 1386 	bfi	r3, r2, #6, #1
 80027fa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80027fc:	f107 0208 	add.w	r2, r7, #8
 8002800:	2301      	movs	r3, #1
 8002802:	2112      	movs	r1, #18
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff fe25 	bl	8002454 <lsm6dsv16x_write_reg>
 800280a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800280c:	68fb      	ldr	r3, [r7, #12]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	460b      	mov	r3, r1
 8002820:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	2b03      	cmp	r3, #3
 800282c:	d802      	bhi.n	8002834 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	e015      	b.n	8002860 <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8002834:	f107 0208 	add.w	r2, r7, #8
 8002838:	2301      	movs	r3, #1
 800283a:	2106      	movs	r1, #6
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff fdf1 	bl	8002424 <lsm6dsv16x_read_reg>
 8002842:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 800284e:	f107 0208 	add.w	r2, r7, #8
 8002852:	2301      	movs	r3, #1
 8002854:	2106      	movs	r1, #6
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fdfc 	bl	8002454 <lsm6dsv16x_write_reg>
 800285c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8002874:	f107 0208 	add.w	r2, r7, #8
 8002878:	2301      	movs	r3, #1
 800287a:	2115      	movs	r1, #21
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff fdd1 	bl	8002424 <lsm6dsv16x_read_reg>
 8002882:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10f      	bne.n	80028aa <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	b2da      	uxtb	r2, r3
 8002892:	7a3b      	ldrb	r3, [r7, #8]
 8002894:	f362 0303 	bfi	r3, r2, #0, #4
 8002898:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800289a:	f107 0208 	add.w	r2, r7, #8
 800289e:	2301      	movs	r3, #1
 80028a0:	2115      	movs	r1, #21
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff fdd6 	bl	8002454 <lsm6dsv16x_write_reg>
 80028a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028aa:	68fb      	ldr	r3, [r7, #12]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 80028c0:	f107 0208 	add.w	r2, r7, #8
 80028c4:	2301      	movs	r3, #1
 80028c6:	2117      	movs	r1, #23
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff fdab 	bl	8002424 <lsm6dsv16x_read_reg>
 80028ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10f      	bne.n	80028f6 <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	7a3b      	ldrb	r3, [r7, #8]
 80028e0:	f362 0301 	bfi	r3, r2, #0, #2
 80028e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 80028e6:	f107 0208 	add.w	r2, r7, #8
 80028ea:	2301      	movs	r3, #1
 80028ec:	2117      	movs	r1, #23
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fdb0 	bl	8002454 <lsm6dsv16x_write_reg>
 80028f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 800290a:	f107 0210 	add.w	r2, r7, #16
 800290e:	2301      	movs	r3, #1
 8002910:	210d      	movs	r1, #13
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff fd86 	bl	8002424 <lsm6dsv16x_read_reg>
 8002918:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <lsm6dsv16x_pin_int1_route_set+0x24>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	e0a0      	b.n	8002a66 <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800292c:	b2da      	uxtb	r2, r3
 800292e:	7c3b      	ldrb	r3, [r7, #16]
 8002930:	f362 0300 	bfi	r3, r2, #0, #1
 8002934:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800293e:	b2da      	uxtb	r2, r3
 8002940:	7c3b      	ldrb	r3, [r7, #16]
 8002942:	f362 0341 	bfi	r3, r2, #1, #1
 8002946:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	7c3b      	ldrb	r3, [r7, #16]
 8002954:	f362 03c3 	bfi	r3, r2, #3, #1
 8002958:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002962:	b2da      	uxtb	r2, r3
 8002964:	7c3b      	ldrb	r3, [r7, #16]
 8002966:	f362 1304 	bfi	r3, r2, #4, #1
 800296a:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002974:	b2da      	uxtb	r2, r3
 8002976:	7c3b      	ldrb	r3, [r7, #16]
 8002978:	f362 1345 	bfi	r3, r2, #5, #1
 800297c:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002986:	b2da      	uxtb	r2, r3
 8002988:	7c3b      	ldrb	r3, [r7, #16]
 800298a:	f362 1386 	bfi	r3, r2, #6, #1
 800298e:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8002990:	f107 0210 	add.w	r2, r7, #16
 8002994:	2301      	movs	r3, #1
 8002996:	210d      	movs	r1, #13
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff fd5b 	bl	8002454 <lsm6dsv16x_write_reg>
 800299e:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <lsm6dsv16x_pin_int1_route_set+0xaa>
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	e05d      	b.n	8002a66 <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80029aa:	f107 020c 	add.w	r2, r7, #12
 80029ae:	2301      	movs	r3, #1
 80029b0:	215e      	movs	r1, #94	@ 0x5e
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff fd36 	bl	8002424 <lsm6dsv16x_read_reg>
 80029b8:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <lsm6dsv16x_pin_int1_route_set+0xc4>
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	e050      	b.n	8002a66 <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	785b      	ldrb	r3, [r3, #1]
 80029c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	7b3b      	ldrb	r3, [r7, #12]
 80029d0:	f362 0300 	bfi	r3, r2, #0, #1
 80029d4:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	785b      	ldrb	r3, [r3, #1]
 80029da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	7b3b      	ldrb	r3, [r7, #12]
 80029e2:	f362 0341 	bfi	r3, r2, #1, #1
 80029e6:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	785b      	ldrb	r3, [r3, #1]
 80029ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	7b3b      	ldrb	r3, [r7, #12]
 80029f4:	f362 0382 	bfi	r3, r2, #2, #1
 80029f8:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	785b      	ldrb	r3, [r3, #1]
 80029fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	7b3b      	ldrb	r3, [r7, #12]
 8002a06:	f362 1386 	bfi	r3, r2, #6, #1
 8002a0a:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	785b      	ldrb	r3, [r3, #1]
 8002a10:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	7b3b      	ldrb	r3, [r7, #12]
 8002a18:	f362 03c3 	bfi	r3, r2, #3, #1
 8002a1c:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	785b      	ldrb	r3, [r3, #1]
 8002a22:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	7b3b      	ldrb	r3, [r7, #12]
 8002a2a:	f362 1345 	bfi	r3, r2, #5, #1
 8002a2e:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	785b      	ldrb	r3, [r3, #1]
 8002a34:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	7b3b      	ldrb	r3, [r7, #12]
 8002a3c:	f362 1304 	bfi	r3, r2, #4, #1
 8002a40:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	789b      	ldrb	r3, [r3, #2]
 8002a46:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	7b3b      	ldrb	r3, [r7, #12]
 8002a4e:	f362 13c7 	bfi	r3, r2, #7, #1
 8002a52:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002a54:	f107 020c 	add.w	r2, r7, #12
 8002a58:	2301      	movs	r3, #1
 8002a5a:	215e      	movs	r1, #94	@ 0x5e
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff fcf9 	bl	8002454 <lsm6dsv16x_write_reg>
 8002a62:	6178      	str	r0, [r7, #20]

  return ret;
 8002a64:	697b      	ldr	r3, [r7, #20]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	460b      	mov	r3, r1
 8002a78:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8002a7a:	f107 0208 	add.w	r2, r7, #8
 8002a7e:	2301      	movs	r3, #1
 8002a80:	2113      	movs	r1, #19
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fcce 	bl	8002424 <lsm6dsv16x_read_reg>
 8002a88:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10f      	bne.n	8002ab0 <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	7a3b      	ldrb	r3, [r7, #8]
 8002a9a:	f362 0300 	bfi	r3, r2, #0, #1
 8002a9e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8002aa0:	f107 0208 	add.w	r2, r7, #8
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	2113      	movs	r1, #19
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff fcd3 	bl	8002454 <lsm6dsv16x_write_reg>
 8002aae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8002ac6:	f107 0208 	add.w	r2, r7, #8
 8002aca:	2301      	movs	r3, #1
 8002acc:	2107      	movs	r1, #7
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff fca8 	bl	8002424 <lsm6dsv16x_read_reg>
 8002ad4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8002ae0:	f107 0208 	add.w	r2, r7, #8
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	2107      	movs	r1, #7
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff fcb3 	bl	8002454 <lsm6dsv16x_write_reg>
 8002aee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002af0:	68fb      	ldr	r3, [r7, #12]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8002b06:	f107 0208 	add.w	r2, r7, #8
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	2109      	movs	r1, #9
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fc88 	bl	8002424 <lsm6dsv16x_read_reg>
 8002b14:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10f      	bne.n	8002b3c <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	7a3b      	ldrb	r3, [r7, #8]
 8002b26:	f362 0303 	bfi	r3, r2, #0, #4
 8002b2a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8002b2c:	f107 0208 	add.w	r2, r7, #8
 8002b30:	2301      	movs	r3, #1
 8002b32:	2109      	movs	r1, #9
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff fc8d 	bl	8002454 <lsm6dsv16x_write_reg>
 8002b3a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8002b52:	f107 0208 	add.w	r2, r7, #8
 8002b56:	2301      	movs	r3, #1
 8002b58:	2109      	movs	r1, #9
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff fc62 	bl	8002424 <lsm6dsv16x_read_reg>
 8002b60:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10f      	bne.n	8002b88 <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	7a3b      	ldrb	r3, [r7, #8]
 8002b72:	f362 1307 	bfi	r3, r2, #4, #4
 8002b76:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8002b78:	f107 0208 	add.w	r2, r7, #8
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	2109      	movs	r1, #9
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff fc67 	bl	8002454 <lsm6dsv16x_write_reg>
 8002b86:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b88:	68fb      	ldr	r3, [r7, #12]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8002b9e:	f107 0208 	add.w	r2, r7, #8
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	210a      	movs	r1, #10
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fc3c 	bl	8002424 <lsm6dsv16x_read_reg>
 8002bac:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10f      	bne.n	8002bd4 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	7a3b      	ldrb	r3, [r7, #8]
 8002bbe:	f362 0302 	bfi	r3, r2, #0, #3
 8002bc2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8002bc4:	f107 0208 	add.w	r2, r7, #8
 8002bc8:	2301      	movs	r3, #1
 8002bca:	210a      	movs	r1, #10
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff fc41 	bl	8002454 <lsm6dsv16x_write_reg>
 8002bd2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8002bea:	f107 0208 	add.w	r2, r7, #8
 8002bee:	2301      	movs	r3, #1
 8002bf0:	2103      	movs	r1, #3
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff fc16 	bl	8002424 <lsm6dsv16x_read_reg>
 8002bf8:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10f      	bne.n	8002c20 <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	7a3b      	ldrb	r3, [r7, #8]
 8002c0a:	f362 0300 	bfi	r3, r2, #0, #1
 8002c0e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8002c10:	f107 0208 	add.w	r2, r7, #8
 8002c14:	2301      	movs	r3, #1
 8002c16:	2103      	movs	r1, #3
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff fc1b 	bl	8002454 <lsm6dsv16x_write_reg>
 8002c1e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002c20:	68fb      	ldr	r3, [r7, #12]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	461a      	mov	r2, r3
 8002c36:	460b      	mov	r3, r1
 8002c38:	72fb      	strb	r3, [r7, #11]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c48:	f007 fd76 	bl	800a738 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8002c4c:	f107 010b 	add.w	r1, r7, #11
 8002c50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c54:	2201      	movs	r2, #1
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f00a fff7 	bl	800dc4a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8002c5c:	893a      	ldrh	r2, [r7, #8]
 8002c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f00a fff0 	bl	800dc4a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c74:	f007 fd60 	bl	800a738 <HAL_GPIO_WritePin>
	return 0;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	460b      	mov	r3, r1
 8002c90:	72fb      	strb	r3, [r7, #11]
 8002c92:	4613      	mov	r3, r2
 8002c94:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 8002c96:	7afb      	ldrb	r3, [r7, #11]
 8002c98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ca6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002caa:	f007 fd45 	bl	800a738 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8002cae:	f107 010b 	add.w	r1, r7, #11
 8002cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f00a ffc6 	bl	800dc4a <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 8002cbe:	893a      	ldrh	r2, [r7, #8]
 8002cc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f00b f935 	bl	800df36 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cd6:	f007 fd2f 	bl	800a738 <HAL_GPIO_WritePin>
	return 0;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce6:	b08b      	sub	sp, #44	@ 0x2c
 8002ce8:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002cea:	f005 faf4 	bl	80082d6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002cee:	f000 f9b1 	bl	8003054 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002cf2:	f000 fe7d 	bl	80039f0 <MX_GPIO_Init>
	MX_DMA_Init();
 8002cf6:	f000 fe55 	bl	80039a4 <MX_DMA_Init>
	MX_QUADSPI_Init();
 8002cfa:	f000 fad7 	bl	80032ac <MX_QUADSPI_Init>
	MX_SPI2_Init();
 8002cfe:	f000 fb8d 	bl	800341c <MX_SPI2_Init>
	MX_USART1_UART_Init();
 8002d02:	f000 fe1f 	bl	8003944 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8002d06:	f000 f9f7 	bl	80030f8 <MX_ADC1_Init>
	MX_I2C3_Init();
 8002d0a:	f000 fa8f 	bl	800322c <MX_I2C3_Init>
	MX_TIM2_Init();
 8002d0e:	f000 fca9 	bl	8003664 <MX_TIM2_Init>
	MX_UART4_Init();
 8002d12:	f000 fde7 	bl	80038e4 <MX_UART4_Init>
	MX_TIM1_Init();
 8002d16:	f000 fbfd 	bl	8003514 <MX_TIM1_Init>
	MX_CRC_Init();
 8002d1a:	f000 fa65 	bl	80031e8 <MX_CRC_Init>
	MX_TIM4_Init();
 8002d1e:	f000 fd6d 	bl	80037fc <MX_TIM4_Init>
	MX_RTC_Init();
 8002d22:	f000 fae9 	bl	80032f8 <MX_RTC_Init>
	MX_SPI3_Init();
 8002d26:	f000 fbb7 	bl	8003498 <MX_SPI3_Init>
	MX_TIM3_Init();
 8002d2a:	f000 fcef 	bl	800370c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	System_Init();
 8002d2e:	f7ff f8c1 	bl	8001eb4 <System_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state)
 8002d32:	4bb0      	ldr	r3, [pc, #704]	@ (8002ff4 <main+0x310>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	f200 8155 	bhi.w	8002fe6 <main+0x302>
 8002d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d44 <main+0x60>)
 8002d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d42:	bf00      	nop
 8002d44:	08002d55 	.word	0x08002d55
 8002d48:	08002de5 	.word	0x08002de5
 8002d4c:	08002e81 	.word	0x08002e81
 8002d50:	08002f8d 	.word	0x08002f8d
		{
		case IDLE:
      if(flags.MQTT_Message_Rx)
 8002d54:	4ba8      	ldr	r3, [pc, #672]	@ (8002ff8 <main+0x314>)
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d006      	beq.n	8002d70 <main+0x8c>
			{
				SIM_Parse_Command();
 8002d62:	f7fe f9c5 	bl	80010f0 <SIM_Parse_Command>
				flags.MQTT_Message_Rx = 0;
 8002d66:	4aa4      	ldr	r2, [pc, #656]	@ (8002ff8 <main+0x314>)
 8002d68:	7853      	ldrb	r3, [r2, #1]
 8002d6a:	f023 0304 	bic.w	r3, r3, #4
 8002d6e:	7053      	strb	r3, [r2, #1]
			}
			if(flags.CMD.Start_Meas)
 8002d70:	4ba1      	ldr	r3, [pc, #644]	@ (8002ff8 <main+0x314>)
 8002d72:	789b      	ldrb	r3, [r3, #2]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <main+0xac>
			{
				state = MEASURE_INIT_STATE;
 8002d7e:	4b9d      	ldr	r3, [pc, #628]	@ (8002ff4 <main+0x310>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
				flags.CMD.Start_Meas = 0;
 8002d84:	4a9c      	ldr	r2, [pc, #624]	@ (8002ff8 <main+0x314>)
 8002d86:	7893      	ldrb	r3, [r2, #2]
 8002d88:	f023 0310 	bic.w	r3, r3, #16
 8002d8c:	7093      	strb	r3, [r2, #2]
			}
			else if(flags.CMD.Ping)
			{
				flags.CMD.Ping = 0;
			}
			break;
 8002d8e:	e12c      	b.n	8002fea <main+0x306>
			else if (flags.CMD.Set_Config)
 8002d90:	4b99      	ldr	r3, [pc, #612]	@ (8002ff8 <main+0x314>)
 8002d92:	789b      	ldrb	r3, [r3, #2]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <main+0xca>
        Apply_Config();
 8002d9e:	f001 f925 	bl	8003fec <Apply_Config>
				flags.CMD.Set_Config = 0;
 8002da2:	4a95      	ldr	r2, [pc, #596]	@ (8002ff8 <main+0x314>)
 8002da4:	7893      	ldrb	r3, [r2, #2]
 8002da6:	f023 0308 	bic.w	r3, r3, #8
 8002daa:	7093      	strb	r3, [r2, #2]
			break;
 8002dac:	e11d      	b.n	8002fea <main+0x306>
			else if(flags.CMD.Start_OTA)
 8002dae:	4b92      	ldr	r3, [pc, #584]	@ (8002ff8 <main+0x314>)
 8002db0:	789b      	ldrb	r3, [r3, #2]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <main+0xe4>
				flags.CMD.Start_OTA = 0;
 8002dbc:	4a8e      	ldr	r2, [pc, #568]	@ (8002ff8 <main+0x314>)
 8002dbe:	7893      	ldrb	r3, [r2, #2]
 8002dc0:	f023 0302 	bic.w	r3, r3, #2
 8002dc4:	7093      	strb	r3, [r2, #2]
			break;
 8002dc6:	e110      	b.n	8002fea <main+0x306>
			else if(flags.CMD.Ping)
 8002dc8:	4b8b      	ldr	r3, [pc, #556]	@ (8002ff8 <main+0x314>)
 8002dca:	789b      	ldrb	r3, [r3, #2]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 8109 	beq.w	8002fea <main+0x306>
				flags.CMD.Ping = 0;
 8002dd8:	4a87      	ldr	r2, [pc, #540]	@ (8002ff8 <main+0x314>)
 8002dda:	7893      	ldrb	r3, [r2, #2]
 8002ddc:	f023 0304 	bic.w	r3, r3, #4
 8002de0:	7093      	strb	r3, [r2, #2]
			break;
 8002de2:	e102      	b.n	8002fea <main+0x306>
		case MEASURE_INIT_STATE:
			res = f_open(&sys.file_meas_1, MEASURE_FILE_NAME_1, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 8002de4:	220b      	movs	r2, #11
 8002de6:	4985      	ldr	r1, [pc, #532]	@ (8002ffc <main+0x318>)
 8002de8:	4885      	ldr	r0, [pc, #532]	@ (8003000 <main+0x31c>)
 8002dea:	f003 ff25 	bl	8006c38 <f_open>
 8002dee:	4603      	mov	r3, r0
 8002df0:	461a      	mov	r2, r3
 8002df2:	4b84      	ldr	r3, [pc, #528]	@ (8003004 <main+0x320>)
 8002df4:	701a      	strb	r2, [r3, #0]
			sys.file_meas_1_open = 1;
 8002df6:	4b84      	ldr	r3, [pc, #528]	@ (8003008 <main+0x324>)
 8002df8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			res = f_open(&sys.file_meas_2, MEASURE_FILE_NAME_2, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 8002e02:	220b      	movs	r2, #11
 8002e04:	4981      	ldr	r1, [pc, #516]	@ (800300c <main+0x328>)
 8002e06:	4882      	ldr	r0, [pc, #520]	@ (8003010 <main+0x32c>)
 8002e08:	f003 ff16 	bl	8006c38 <f_open>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4b7c      	ldr	r3, [pc, #496]	@ (8003004 <main+0x320>)
 8002e12:	701a      	strb	r2, [r3, #0]
			sys.file_meas_2_open = 1;
 8002e14:	4b7c      	ldr	r3, [pc, #496]	@ (8003008 <main+0x324>)
 8002e16:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			memset(Pressure, 0, sizeof(Pressure));
 8002e20:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8002e24:	2100      	movs	r1, #0
 8002e26:	487b      	ldr	r0, [pc, #492]	@ (8003014 <main+0x330>)
 8002e28:	f00e ffde 	bl	8011de8 <memset>
			memset(Volume_Period, 0, sizeof(Volume_Period));
 8002e2c:	2228      	movs	r2, #40	@ 0x28
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4879      	ldr	r0, [pc, #484]	@ (8003018 <main+0x334>)
 8002e32:	f00e ffd9 	bl	8011de8 <memset>
			memset(Acceleration, 0, sizeof(Acceleration));
 8002e36:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4877      	ldr	r0, [pc, #476]	@ (800301c <main+0x338>)
 8002e3e:	f00e ffd3 	bl	8011de8 <memset>
			memset(&Supply, 0, sizeof(Supply));
 8002e42:	220c      	movs	r2, #12
 8002e44:	2100      	movs	r1, #0
 8002e46:	4876      	ldr	r0, [pc, #472]	@ (8003020 <main+0x33c>)
 8002e48:	f00e ffce 	bl	8011de8 <memset>
			Temperature = 0;
 8002e4c:	4b75      	ldr	r3, [pc, #468]	@ (8003024 <main+0x340>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	801a      	strh	r2, [r3, #0]
			Saves_cnt = 0;
 8002e52:	4b75      	ldr	r3, [pc, #468]	@ (8003028 <main+0x344>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	801a      	strh	r2, [r3, #0]
			Address_Offset = 0;
 8002e58:	4b74      	ldr	r3, [pc, #464]	@ (800302c <main+0x348>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
			Seconds_After_Warning = 0;
 8002e5e:	4b74      	ldr	r3, [pc, #464]	@ (8003030 <main+0x34c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	801a      	strh	r2, [r3, #0]
			HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 8002e64:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002e68:	496a      	ldr	r1, [pc, #424]	@ (8003014 <main+0x330>)
 8002e6a:	4872      	ldr	r0, [pc, #456]	@ (8003034 <main+0x350>)
 8002e6c:	f005 fe40 	bl	8008af0 <HAL_ADC_Start_DMA>
			HAL_TIM_OC_Start_IT(ADC_TIMER, TIM_CHANNEL_3);
 8002e70:	2108      	movs	r1, #8
 8002e72:	4871      	ldr	r0, [pc, #452]	@ (8003038 <main+0x354>)
 8002e74:	f00b fe20 	bl	800eab8 <HAL_TIM_OC_Start_IT>
			state = MEASURING_STATE;
 8002e78:	4b5e      	ldr	r3, [pc, #376]	@ (8002ff4 <main+0x310>)
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	701a      	strb	r2, [r3, #0]
			break;
 8002e7e:	e0b7      	b.n	8002ff0 <main+0x30c>

		case MEASURING_STATE:
			if(flags.ADC_Complete && flags.ACC_Complete)
 8002e80:	4b5d      	ldr	r3, [pc, #372]	@ (8002ff8 <main+0x314>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80af 	beq.w	8002fee <main+0x30a>
 8002e90:	4b59      	ldr	r3, [pc, #356]	@ (8002ff8 <main+0x314>)
 8002e92:	785b      	ldrb	r3, [r3, #1]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 80a7 	beq.w	8002fee <main+0x30a>
			{
				Save_Data();
 8002ea0:	f000 fea2 	bl	8003be8 <Save_Data>
				if(flags.BC_Interrupt)
 8002ea4:	4b54      	ldr	r3, [pc, #336]	@ (8002ff8 <main+0x314>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d011      	beq.n	8002ed6 <main+0x1f2>
				{
					BC_Read_Flags(&sys.BC_Flags);
 8002eb2:	4862      	ldr	r0, [pc, #392]	@ (800303c <main+0x358>)
 8002eb4:	f7fe fb70 	bl	8001598 <BC_Read_Flags>
					BC_Manage_Interrupts(sys.BC_Flags);
 8002eb8:	4b53      	ldr	r3, [pc, #332]	@ (8003008 <main+0x324>)
 8002eba:	f503 5342 	add.w	r3, r3, #12416	@ 0x3080
 8002ebe:	3310      	adds	r3, #16
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fe fbee 	bl	80016a8 <BC_Manage_Interrupts>
					flags.BC_Interrupt = 0;
 8002ecc:	4a4a      	ldr	r2, [pc, #296]	@ (8002ff8 <main+0x314>)
 8002ece:	7813      	ldrb	r3, [r2, #0]
 8002ed0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ed4:	7013      	strb	r3, [r2, #0]
				}
				if(flags.MQTT_Message_Rx)
 8002ed6:	4b48      	ldr	r3, [pc, #288]	@ (8002ff8 <main+0x314>)
 8002ed8:	785b      	ldrb	r3, [r3, #1]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d006      	beq.n	8002ef2 <main+0x20e>
				{
					SIM_Parse_Command();
 8002ee4:	f7fe f904 	bl	80010f0 <SIM_Parse_Command>
					flags.MQTT_Message_Rx = 0;
 8002ee8:	4a43      	ldr	r2, [pc, #268]	@ (8002ff8 <main+0x314>)
 8002eea:	7853      	ldrb	r3, [r2, #1]
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	7053      	strb	r3, [r2, #1]
				}
				if(flags.CMD.Data_Request)
 8002ef2:	4b41      	ldr	r3, [pc, #260]	@ (8002ff8 <main+0x314>)
 8002ef4:	789b      	ldrb	r3, [r3, #2]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d035      	beq.n	8002f6c <main+0x288>
				{
					sprintf(MQTT_Logging, "%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", Last_Pressure, Last_Volume, Last_Acceleration, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 8002f00:	4b4f      	ldr	r3, [pc, #316]	@ (8003040 <main+0x35c>)
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	469c      	mov	ip, r3
 8002f06:	4b4f      	ldr	r3, [pc, #316]	@ (8003044 <main+0x360>)
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	469e      	mov	lr, r3
 8002f0c:	4b4e      	ldr	r3, [pc, #312]	@ (8003048 <main+0x364>)
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	4b43      	ldr	r3, [pc, #268]	@ (8003020 <main+0x33c>)
 8002f14:	88db      	ldrh	r3, [r3, #6]
 8002f16:	4619      	mov	r1, r3
 8002f18:	4b41      	ldr	r3, [pc, #260]	@ (8003020 <main+0x33c>)
 8002f1a:	891b      	ldrh	r3, [r3, #8]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	4b40      	ldr	r3, [pc, #256]	@ (8003020 <main+0x33c>)
 8002f20:	895b      	ldrh	r3, [r3, #10]
 8002f22:	461c      	mov	r4, r3
 8002f24:	4b3e      	ldr	r3, [pc, #248]	@ (8003020 <main+0x33c>)
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	461d      	mov	r5, r3
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003020 <main+0x33c>)
 8002f2c:	885b      	ldrh	r3, [r3, #2]
 8002f2e:	461e      	mov	r6, r3
 8002f30:	4b3b      	ldr	r3, [pc, #236]	@ (8003020 <main+0x33c>)
 8002f32:	889b      	ldrh	r3, [r3, #4]
 8002f34:	607b      	str	r3, [r7, #4]
 8002f36:	4b3b      	ldr	r3, [pc, #236]	@ (8003024 <main+0x340>)
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	9307      	str	r3, [sp, #28]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	9306      	str	r3, [sp, #24]
 8002f40:	9605      	str	r6, [sp, #20]
 8002f42:	9504      	str	r5, [sp, #16]
 8002f44:	9403      	str	r4, [sp, #12]
 8002f46:	9002      	str	r0, [sp, #8]
 8002f48:	9101      	str	r1, [sp, #4]
 8002f4a:	9200      	str	r2, [sp, #0]
 8002f4c:	4673      	mov	r3, lr
 8002f4e:	4662      	mov	r2, ip
 8002f50:	493e      	ldr	r1, [pc, #248]	@ (800304c <main+0x368>)
 8002f52:	483f      	ldr	r0, [pc, #252]	@ (8003050 <main+0x36c>)
 8002f54:	f00e fee8 	bl	8011d28 <siprintf>
					SIM_publish_MQTT_Message(NULL, MQTT_Logging);
 8002f58:	493d      	ldr	r1, [pc, #244]	@ (8003050 <main+0x36c>)
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f7fe fa1a 	bl	8001394 <SIM_publish_MQTT_Message>
					flags.CMD.Data_Request = 0;
 8002f60:	4a25      	ldr	r2, [pc, #148]	@ (8002ff8 <main+0x314>)
 8002f62:	7893      	ldrb	r3, [r2, #2]
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	7093      	strb	r3, [r2, #2]
				{
					state = IDLE;
					flags.CMD.Idle = 0;
				}
			}
			break;
 8002f6a:	e040      	b.n	8002fee <main+0x30a>
				else if(flags.CMD.Idle)
 8002f6c:	4b22      	ldr	r3, [pc, #136]	@ (8002ff8 <main+0x314>)
 8002f6e:	789b      	ldrb	r3, [r3, #2]
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d039      	beq.n	8002fee <main+0x30a>
					state = IDLE;
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <main+0x310>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
					flags.CMD.Idle = 0;
 8002f80:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff8 <main+0x314>)
 8002f82:	7893      	ldrb	r3, [r2, #2]
 8002f84:	f023 0320 	bic.w	r3, r3, #32
 8002f88:	7093      	strb	r3, [r2, #2]
			break;
 8002f8a:	e030      	b.n	8002fee <main+0x30a>

		case SEND_RECORDING_STATE:
			HAL_ADC_Stop_DMA(PRESSURE_ADC);
 8002f8c:	4829      	ldr	r0, [pc, #164]	@ (8003034 <main+0x350>)
 8002f8e:	f005 fe6b 	bl	8008c68 <HAL_ADC_Stop_DMA>
			HAL_TIM_OC_Stop_IT(ADC_TIMER, TIM_CHANNEL_3);
 8002f92:	2108      	movs	r1, #8
 8002f94:	4828      	ldr	r0, [pc, #160]	@ (8003038 <main+0x354>)
 8002f96:	f00b fee3 	bl	800ed60 <HAL_TIM_OC_Stop_IT>
			Send_Measure();
 8002f9a:	f001 f81f 	bl	8003fdc <Send_Measure>
			if(sys.file_meas_1_open == 1)
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003008 <main+0x324>)
 8002fa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fa4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d108      	bne.n	8002fbe <main+0x2da>
			{
				f_unlink(MEASURE_FILE_NAME_1);
 8002fac:	4813      	ldr	r0, [pc, #76]	@ (8002ffc <main+0x318>)
 8002fae:	f004 fb57 	bl	8007660 <f_unlink>
				sys.file_meas_1_open = 0;
 8002fb2:	4b15      	ldr	r3, [pc, #84]	@ (8003008 <main+0x324>)
 8002fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
			if(sys.file_meas_2_open == 1)
 8002fbe:	4b12      	ldr	r3, [pc, #72]	@ (8003008 <main+0x324>)
 8002fc0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002fc4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d108      	bne.n	8002fde <main+0x2fa>
			{
				f_unlink(MEASURE_FILE_NAME_2);
 8002fcc:	480f      	ldr	r0, [pc, #60]	@ (800300c <main+0x328>)
 8002fce:	f004 fb47 	bl	8007660 <f_unlink>
				sys.file_meas_2_open = 0;
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <main+0x324>)
 8002fd4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			}
			state = MEASURE_INIT_STATE;
 8002fde:	4b05      	ldr	r3, [pc, #20]	@ (8002ff4 <main+0x310>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	701a      	strb	r2, [r3, #0]
			break;
 8002fe4:	e004      	b.n	8002ff0 <main+0x30c>

		default:
			break;
 8002fe6:	bf00      	nop
 8002fe8:	e6a3      	b.n	8002d32 <main+0x4e>
			break;
 8002fea:	bf00      	nop
 8002fec:	e6a1      	b.n	8002d32 <main+0x4e>
			break;
 8002fee:	bf00      	nop
		switch(state)
 8002ff0:	e69f      	b.n	8002d32 <main+0x4e>
 8002ff2:	bf00      	nop
 8002ff4:	2000056c 	.word	0x2000056c
 8002ff8:	20003990 	.word	0x20003990
 8002ffc:	08013234 	.word	0x08013234
 8003000:	200015a4 	.word	0x200015a4
 8003004:	20007054 	.word	0x20007054
 8003008:	20000570 	.word	0x20000570
 800300c:	08013244 	.word	0x08013244
 8003010:	200025d0 	.word	0x200025d0
 8003014:	20005b30 	.word	0x20005b30
 8003018:	20006170 	.word	0x20006170
 800301c:	20006198 	.word	0x20006198
 8003020:	20005b20 	.word	0x20005b20
 8003024:	20006716 	.word	0x20006716
 8003028:	20007052 	.word	0x20007052
 800302c:	2000704c 	.word	0x2000704c
 8003030:	20007050 	.word	0x20007050
 8003034:	20000090 	.word	0x20000090
 8003038:	200003c8 	.word	0x200003c8
 800303c:	20003600 	.word	0x20003600
 8003040:	20006710 	.word	0x20006710
 8003044:	20006712 	.word	0x20006712
 8003048:	20006714 	.word	0x20006714
 800304c:	08013254 	.word	0x08013254
 8003050:	20006718 	.word	0x20006718

08003054 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b096      	sub	sp, #88	@ 0x58
 8003058:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800305a:	f107 0314 	add.w	r3, r7, #20
 800305e:	2244      	movs	r2, #68	@ 0x44
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f00e fec0 	bl	8011de8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003068:	463b      	mov	r3, r7
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	60da      	str	r2, [r3, #12]
 8003074:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003076:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800307a:	f008 f96b 	bl	800b354 <HAL_PWREx_ControlVoltageScaling>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8003084:	f000 fdaa 	bl	8003bdc <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003088:	2309      	movs	r3, #9
 800308a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800308c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003090:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003092:	2301      	movs	r3, #1
 8003094:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003096:	2302      	movs	r3, #2
 8003098:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800309a:	2303      	movs	r3, #3
 800309c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800309e:	2301      	movs	r3, #1
 80030a0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 20;
 80030a2:	2314      	movs	r3, #20
 80030a4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80030a6:	2307      	movs	r3, #7
 80030a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80030aa:	2302      	movs	r3, #2
 80030ac:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80030ae:	2302      	movs	r3, #2
 80030b0:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	4618      	mov	r0, r3
 80030b8:	f008 fe04 	bl	800bcc4 <HAL_RCC_OscConfig>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <SystemClock_Config+0x72>
	{
		Error_Handler();
 80030c2:	f000 fd8b 	bl	8003bdc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030c6:	230f      	movs	r3, #15
 80030c8:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ca:	2303      	movs	r3, #3
 80030cc:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030da:	463b      	mov	r3, r7
 80030dc:	2104      	movs	r1, #4
 80030de:	4618      	mov	r0, r3
 80030e0:	f009 f9cc 	bl	800c47c <HAL_RCC_ClockConfig>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80030ea:	f000 fd77 	bl	8003bdc <Error_Handler>
	}
}
 80030ee:	bf00      	nop
 80030f0:	3758      	adds	r7, #88	@ 0x58
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	@ 0x28
 80030fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 80030fe:	f107 031c 	add.w	r3, r7, #28
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	611a      	str	r2, [r3, #16]
 8003118:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800311a:	4b30      	ldr	r3, [pc, #192]	@ (80031dc <MX_ADC1_Init+0xe4>)
 800311c:	4a30      	ldr	r2, [pc, #192]	@ (80031e0 <MX_ADC1_Init+0xe8>)
 800311e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003120:	4b2e      	ldr	r3, [pc, #184]	@ (80031dc <MX_ADC1_Init+0xe4>)
 8003122:	2200      	movs	r2, #0
 8003124:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003126:	4b2d      	ldr	r3, [pc, #180]	@ (80031dc <MX_ADC1_Init+0xe4>)
 8003128:	2200      	movs	r2, #0
 800312a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800312c:	4b2b      	ldr	r3, [pc, #172]	@ (80031dc <MX_ADC1_Init+0xe4>)
 800312e:	2200      	movs	r2, #0
 8003130:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003132:	4b2a      	ldr	r3, [pc, #168]	@ (80031dc <MX_ADC1_Init+0xe4>)
 8003134:	2200      	movs	r2, #0
 8003136:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003138:	4b28      	ldr	r3, [pc, #160]	@ (80031dc <MX_ADC1_Init+0xe4>)
 800313a:	2208      	movs	r2, #8
 800313c:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800313e:	4b27      	ldr	r3, [pc, #156]	@ (80031dc <MX_ADC1_Init+0xe4>)
 8003140:	2200      	movs	r2, #0
 8003142:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8003144:	4b25      	ldr	r3, [pc, #148]	@ (80031dc <MX_ADC1_Init+0xe4>)
 8003146:	2200      	movs	r2, #0
 8003148:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800314a:	4b24      	ldr	r3, [pc, #144]	@ (80031dc <MX_ADC1_Init+0xe4>)
 800314c:	2201      	movs	r2, #1
 800314e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003150:	4b22      	ldr	r3, [pc, #136]	@ (80031dc <MX_ADC1_Init+0xe4>)
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8003158:	4b20      	ldr	r3, [pc, #128]	@ (80031dc <MX_ADC1_Init+0xe4>)
 800315a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800315e:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003160:	4b1e      	ldr	r3, [pc, #120]	@ (80031dc <MX_ADC1_Init+0xe4>)
 8003162:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003166:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8003168:	4b1c      	ldr	r3, [pc, #112]	@ (80031dc <MX_ADC1_Init+0xe4>)
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003170:	4b1a      	ldr	r3, [pc, #104]	@ (80031dc <MX_ADC1_Init+0xe4>)
 8003172:	2200      	movs	r2, #0
 8003174:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8003176:	4b19      	ldr	r3, [pc, #100]	@ (80031dc <MX_ADC1_Init+0xe4>)
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800317e:	4817      	ldr	r0, [pc, #92]	@ (80031dc <MX_ADC1_Init+0xe4>)
 8003180:	f005 fb66 	bl	8008850 <HAL_ADC_Init>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_ADC1_Init+0x96>
	{
		Error_Handler();
 800318a:	f000 fd27 	bl	8003bdc <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003192:	f107 031c 	add.w	r3, r7, #28
 8003196:	4619      	mov	r1, r3
 8003198:	4810      	ldr	r0, [pc, #64]	@ (80031dc <MX_ADC1_Init+0xe4>)
 800319a:	f006 fc1f 	bl	80099dc <HAL_ADCEx_MultiModeConfigChannel>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <MX_ADC1_Init+0xb0>
	{
		Error_Handler();
 80031a4:	f000 fd1a 	bl	8003bdc <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80031a8:	4b0e      	ldr	r3, [pc, #56]	@ (80031e4 <MX_ADC1_Init+0xec>)
 80031aa:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80031ac:	2306      	movs	r3, #6
 80031ae:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80031b4:	237f      	movs	r3, #127	@ 0x7f
 80031b6:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80031b8:	2304      	movs	r3, #4
 80031ba:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031c0:	1d3b      	adds	r3, r7, #4
 80031c2:	4619      	mov	r1, r3
 80031c4:	4805      	ldr	r0, [pc, #20]	@ (80031dc <MX_ADC1_Init+0xe4>)
 80031c6:	f005 fdbb 	bl	8008d40 <HAL_ADC_ConfigChannel>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <MX_ADC1_Init+0xdc>
	{
		Error_Handler();
 80031d0:	f000 fd04 	bl	8003bdc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80031d4:	bf00      	nop
 80031d6:	3728      	adds	r7, #40	@ 0x28
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000090 	.word	0x20000090
 80031e0:	50040000 	.word	0x50040000
 80031e4:	25b00200 	.word	0x25b00200

080031e8 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80031ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003224 <MX_CRC_Init+0x3c>)
 80031ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003228 <MX_CRC_Init+0x40>)
 80031f0:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80031f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <MX_CRC_Init+0x3c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80031f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003224 <MX_CRC_Init+0x3c>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80031fe:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <MX_CRC_Init+0x3c>)
 8003200:	2200      	movs	r2, #0
 8003202:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003204:	4b07      	ldr	r3, [pc, #28]	@ (8003224 <MX_CRC_Init+0x3c>)
 8003206:	2200      	movs	r2, #0
 8003208:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800320a:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <MX_CRC_Init+0x3c>)
 800320c:	2201      	movs	r2, #1
 800320e:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003210:	4804      	ldr	r0, [pc, #16]	@ (8003224 <MX_CRC_Init+0x3c>)
 8003212:	f006 fdbf 	bl	8009d94 <HAL_CRC_Init>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 800321c:	f000 fcde 	bl	8003bdc <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}
 8003224:	2000013c 	.word	0x2000013c
 8003228:	40023000 	.word	0x40023000

0800322c <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8003230:	4b1b      	ldr	r3, [pc, #108]	@ (80032a0 <MX_I2C3_Init+0x74>)
 8003232:	4a1c      	ldr	r2, [pc, #112]	@ (80032a4 <MX_I2C3_Init+0x78>)
 8003234:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x10909CEC;
 8003236:	4b1a      	ldr	r3, [pc, #104]	@ (80032a0 <MX_I2C3_Init+0x74>)
 8003238:	4a1b      	ldr	r2, [pc, #108]	@ (80032a8 <MX_I2C3_Init+0x7c>)
 800323a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 800323c:	4b18      	ldr	r3, [pc, #96]	@ (80032a0 <MX_I2C3_Init+0x74>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003242:	4b17      	ldr	r3, [pc, #92]	@ (80032a0 <MX_I2C3_Init+0x74>)
 8003244:	2201      	movs	r2, #1
 8003246:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003248:	4b15      	ldr	r3, [pc, #84]	@ (80032a0 <MX_I2C3_Init+0x74>)
 800324a:	2200      	movs	r2, #0
 800324c:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 800324e:	4b14      	ldr	r3, [pc, #80]	@ (80032a0 <MX_I2C3_Init+0x74>)
 8003250:	2200      	movs	r2, #0
 8003252:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003254:	4b12      	ldr	r3, [pc, #72]	@ (80032a0 <MX_I2C3_Init+0x74>)
 8003256:	2200      	movs	r2, #0
 8003258:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800325a:	4b11      	ldr	r3, [pc, #68]	@ (80032a0 <MX_I2C3_Init+0x74>)
 800325c:	2200      	movs	r2, #0
 800325e:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003260:	4b0f      	ldr	r3, [pc, #60]	@ (80032a0 <MX_I2C3_Init+0x74>)
 8003262:	2200      	movs	r2, #0
 8003264:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003266:	480e      	ldr	r0, [pc, #56]	@ (80032a0 <MX_I2C3_Init+0x74>)
 8003268:	f007 fa7e 	bl	800a768 <HAL_I2C_Init>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8003272:	f000 fcb3 	bl	8003bdc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003276:	2100      	movs	r1, #0
 8003278:	4809      	ldr	r0, [pc, #36]	@ (80032a0 <MX_I2C3_Init+0x74>)
 800327a:	f007 ffc5 	bl	800b208 <HAL_I2CEx_ConfigAnalogFilter>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8003284:	f000 fcaa 	bl	8003bdc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003288:	2100      	movs	r1, #0
 800328a:	4805      	ldr	r0, [pc, #20]	@ (80032a0 <MX_I2C3_Init+0x74>)
 800328c:	f008 f807 	bl	800b29e <HAL_I2CEx_ConfigDigitalFilter>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8003296:	f000 fca1 	bl	8003bdc <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000160 	.word	0x20000160
 80032a4:	40005c00 	.word	0x40005c00
 80032a8:	10909cec 	.word	0x10909cec

080032ac <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 80032b0:	4b0f      	ldr	r3, [pc, #60]	@ (80032f0 <MX_QUADSPI_Init+0x44>)
 80032b2:	4a10      	ldr	r2, [pc, #64]	@ (80032f4 <MX_QUADSPI_Init+0x48>)
 80032b4:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 255;
 80032b6:	4b0e      	ldr	r3, [pc, #56]	@ (80032f0 <MX_QUADSPI_Init+0x44>)
 80032b8:	22ff      	movs	r2, #255	@ 0xff
 80032ba:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 1;
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <MX_QUADSPI_Init+0x44>)
 80032be:	2201      	movs	r2, #1
 80032c0:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80032c2:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <MX_QUADSPI_Init+0x44>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 1;
 80032c8:	4b09      	ldr	r3, [pc, #36]	@ (80032f0 <MX_QUADSPI_Init+0x44>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80032ce:	4b08      	ldr	r3, [pc, #32]	@ (80032f0 <MX_QUADSPI_Init+0x44>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80032d4:	4b06      	ldr	r3, [pc, #24]	@ (80032f0 <MX_QUADSPI_Init+0x44>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	619a      	str	r2, [r3, #24]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80032da:	4805      	ldr	r0, [pc, #20]	@ (80032f0 <MX_QUADSPI_Init+0x44>)
 80032dc:	f008 f890 	bl	800b400 <HAL_QSPI_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_QUADSPI_Init+0x3e>
	{
		Error_Handler();
 80032e6:	f000 fc79 	bl	8003bdc <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	/* USER CODE END QUADSPI_Init 2 */

}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200001b4 	.word	0x200001b4
 80032f4:	a0001000 	.word	0xa0001000

080032f8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b092      	sub	sp, #72	@ 0x48
 80032fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 80032fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	60da      	str	r2, [r3, #12]
 800330c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 800330e:	2300      	movs	r3, #0
 8003310:	633b      	str	r3, [r7, #48]	@ 0x30
	RTC_AlarmTypeDef sAlarm = {0};
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	222c      	movs	r2, #44	@ 0x2c
 8003316:	2100      	movs	r1, #0
 8003318:	4618      	mov	r0, r3
 800331a:	f00e fd65 	bl	8011de8 <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800331e:	4b3c      	ldr	r3, [pc, #240]	@ (8003410 <MX_RTC_Init+0x118>)
 8003320:	4a3c      	ldr	r2, [pc, #240]	@ (8003414 <MX_RTC_Init+0x11c>)
 8003322:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003324:	4b3a      	ldr	r3, [pc, #232]	@ (8003410 <MX_RTC_Init+0x118>)
 8003326:	2200      	movs	r2, #0
 8003328:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 800332a:	4b39      	ldr	r3, [pc, #228]	@ (8003410 <MX_RTC_Init+0x118>)
 800332c:	227f      	movs	r2, #127	@ 0x7f
 800332e:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8003330:	4b37      	ldr	r3, [pc, #220]	@ (8003410 <MX_RTC_Init+0x118>)
 8003332:	22ff      	movs	r2, #255	@ 0xff
 8003334:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003336:	4b36      	ldr	r3, [pc, #216]	@ (8003410 <MX_RTC_Init+0x118>)
 8003338:	2200      	movs	r2, #0
 800333a:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800333c:	4b34      	ldr	r3, [pc, #208]	@ (8003410 <MX_RTC_Init+0x118>)
 800333e:	2200      	movs	r2, #0
 8003340:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003342:	4b33      	ldr	r3, [pc, #204]	@ (8003410 <MX_RTC_Init+0x118>)
 8003344:	2200      	movs	r2, #0
 8003346:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003348:	4b31      	ldr	r3, [pc, #196]	@ (8003410 <MX_RTC_Init+0x118>)
 800334a:	2200      	movs	r2, #0
 800334c:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800334e:	4830      	ldr	r0, [pc, #192]	@ (8003410 <MX_RTC_Init+0x118>)
 8003350:	f009 ff74 	bl	800d23c <HAL_RTC_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_RTC_Init+0x66>
	{
		Error_Handler();
 800335a:	f000 fc3f 	bl	8003bdc <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	sTime.Minutes = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	sTime.Seconds = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003370:	2300      	movs	r3, #0
 8003372:	643b      	str	r3, [r7, #64]	@ 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003374:	2300      	movs	r3, #0
 8003376:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003378:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800337c:	2200      	movs	r2, #0
 800337e:	4619      	mov	r1, r3
 8003380:	4823      	ldr	r0, [pc, #140]	@ (8003410 <MX_RTC_Init+0x118>)
 8003382:	f009 ffe3 	bl	800d34c <HAL_RTC_SetTime>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <MX_RTC_Init+0x98>
	{
		Error_Handler();
 800338c:	f000 fc26 	bl	8003bdc <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003390:	2301      	movs	r3, #1
 8003392:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	sDate.Date = 1;
 800339c:	2301      	movs	r3, #1
 800339e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	sDate.Year = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80033a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80033ac:	2200      	movs	r2, #0
 80033ae:	4619      	mov	r1, r3
 80033b0:	4817      	ldr	r0, [pc, #92]	@ (8003410 <MX_RTC_Init+0x118>)
 80033b2:	f00a f8c4 	bl	800d53e <HAL_RTC_SetDate>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_RTC_Init+0xc8>
	{
		Error_Handler();
 80033bc:	f000 fc0e 	bl	8003bdc <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80033d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003418 <MX_RTC_Init+0x120>)
 80033da:	61bb      	str	r3, [r7, #24]
			|RTC_ALARMMASK_SECONDS;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80033dc:	2300      	movs	r3, #0
 80033de:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = 1;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 80033ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80033f0:	1d3b      	adds	r3, r7, #4
 80033f2:	2200      	movs	r2, #0
 80033f4:	4619      	mov	r1, r3
 80033f6:	4806      	ldr	r0, [pc, #24]	@ (8003410 <MX_RTC_Init+0x118>)
 80033f8:	f00a f928 	bl	800d64c <HAL_RTC_SetAlarm_IT>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_RTC_Init+0x10e>
	{
		Error_Handler();
 8003402:	f000 fbeb 	bl	8003bdc <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8003406:	bf00      	nop
 8003408:	3748      	adds	r7, #72	@ 0x48
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	200001f8 	.word	0x200001f8
 8003414:	40002800 	.word	0x40002800
 8003418:	80800080 	.word	0x80800080

0800341c <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8003420:	4b1b      	ldr	r3, [pc, #108]	@ (8003490 <MX_SPI2_Init+0x74>)
 8003422:	4a1c      	ldr	r2, [pc, #112]	@ (8003494 <MX_SPI2_Init+0x78>)
 8003424:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8003426:	4b1a      	ldr	r3, [pc, #104]	@ (8003490 <MX_SPI2_Init+0x74>)
 8003428:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800342c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800342e:	4b18      	ldr	r3, [pc, #96]	@ (8003490 <MX_SPI2_Init+0x74>)
 8003430:	2200      	movs	r2, #0
 8003432:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003434:	4b16      	ldr	r3, [pc, #88]	@ (8003490 <MX_SPI2_Init+0x74>)
 8003436:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800343a:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800343c:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <MX_SPI2_Init+0x74>)
 800343e:	2200      	movs	r2, #0
 8003440:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003442:	4b13      	ldr	r3, [pc, #76]	@ (8003490 <MX_SPI2_Init+0x74>)
 8003444:	2200      	movs	r2, #0
 8003446:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8003448:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <MX_SPI2_Init+0x74>)
 800344a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800344e:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003450:	4b0f      	ldr	r3, [pc, #60]	@ (8003490 <MX_SPI2_Init+0x74>)
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003456:	4b0e      	ldr	r3, [pc, #56]	@ (8003490 <MX_SPI2_Init+0x74>)
 8003458:	2200      	movs	r2, #0
 800345a:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800345c:	4b0c      	ldr	r3, [pc, #48]	@ (8003490 <MX_SPI2_Init+0x74>)
 800345e:	2200      	movs	r2, #0
 8003460:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003462:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <MX_SPI2_Init+0x74>)
 8003464:	2200      	movs	r2, #0
 8003466:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
 8003468:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <MX_SPI2_Init+0x74>)
 800346a:	2207      	movs	r2, #7
 800346c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800346e:	4b08      	ldr	r3, [pc, #32]	@ (8003490 <MX_SPI2_Init+0x74>)
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003474:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <MX_SPI2_Init+0x74>)
 8003476:	2208      	movs	r2, #8
 8003478:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800347a:	4805      	ldr	r0, [pc, #20]	@ (8003490 <MX_SPI2_Init+0x74>)
 800347c:	f00a fb42 	bl	800db04 <HAL_SPI_Init>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_SPI2_Init+0x6e>
	{
		Error_Handler();
 8003486:	f000 fba9 	bl	8003bdc <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	2000021c 	.word	0x2000021c
 8003494:	40003800 	.word	0x40003800

08003498 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800349c:	4b1b      	ldr	r3, [pc, #108]	@ (800350c <MX_SPI3_Init+0x74>)
 800349e:	4a1c      	ldr	r2, [pc, #112]	@ (8003510 <MX_SPI3_Init+0x78>)
 80034a0:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80034a2:	4b1a      	ldr	r3, [pc, #104]	@ (800350c <MX_SPI3_Init+0x74>)
 80034a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80034a8:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80034aa:	4b18      	ldr	r3, [pc, #96]	@ (800350c <MX_SPI3_Init+0x74>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80034b0:	4b16      	ldr	r3, [pc, #88]	@ (800350c <MX_SPI3_Init+0x74>)
 80034b2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80034b6:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034b8:	4b14      	ldr	r3, [pc, #80]	@ (800350c <MX_SPI3_Init+0x74>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034be:	4b13      	ldr	r3, [pc, #76]	@ (800350c <MX_SPI3_Init+0x74>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80034c4:	4b11      	ldr	r3, [pc, #68]	@ (800350c <MX_SPI3_Init+0x74>)
 80034c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ca:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034cc:	4b0f      	ldr	r3, [pc, #60]	@ (800350c <MX_SPI3_Init+0x74>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034d2:	4b0e      	ldr	r3, [pc, #56]	@ (800350c <MX_SPI3_Init+0x74>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80034d8:	4b0c      	ldr	r3, [pc, #48]	@ (800350c <MX_SPI3_Init+0x74>)
 80034da:	2200      	movs	r2, #0
 80034dc:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034de:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <MX_SPI3_Init+0x74>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 7;
 80034e4:	4b09      	ldr	r3, [pc, #36]	@ (800350c <MX_SPI3_Init+0x74>)
 80034e6:	2207      	movs	r2, #7
 80034e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80034ea:	4b08      	ldr	r3, [pc, #32]	@ (800350c <MX_SPI3_Init+0x74>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034f0:	4b06      	ldr	r3, [pc, #24]	@ (800350c <MX_SPI3_Init+0x74>)
 80034f2:	2208      	movs	r2, #8
 80034f4:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80034f6:	4805      	ldr	r0, [pc, #20]	@ (800350c <MX_SPI3_Init+0x74>)
 80034f8:	f00a fb04 	bl	800db04 <HAL_SPI_Init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_SPI3_Init+0x6e>
	{
		Error_Handler();
 8003502:	f000 fb6b 	bl	8003bdc <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000280 	.word	0x20000280
 8003510:	40003c00 	.word	0x40003c00

08003514 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b096      	sub	sp, #88	@ 0x58
 8003518:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800351a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003526:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	609a      	str	r2, [r3, #8]
 8003532:	60da      	str	r2, [r3, #12]
 8003534:	611a      	str	r2, [r3, #16]
 8003536:	615a      	str	r2, [r3, #20]
 8003538:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800353a:	1d3b      	adds	r3, r7, #4
 800353c:	222c      	movs	r2, #44	@ 0x2c
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f00e fc51 	bl	8011de8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003546:	4b45      	ldr	r3, [pc, #276]	@ (800365c <MX_TIM1_Init+0x148>)
 8003548:	4a45      	ldr	r2, [pc, #276]	@ (8003660 <MX_TIM1_Init+0x14c>)
 800354a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1599;
 800354c:	4b43      	ldr	r3, [pc, #268]	@ (800365c <MX_TIM1_Init+0x148>)
 800354e:	f240 623f 	movw	r2, #1599	@ 0x63f
 8003552:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003554:	4b41      	ldr	r3, [pc, #260]	@ (800365c <MX_TIM1_Init+0x148>)
 8003556:	2200      	movs	r2, #0
 8003558:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 49999;
 800355a:	4b40      	ldr	r3, [pc, #256]	@ (800365c <MX_TIM1_Init+0x148>)
 800355c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8003560:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003562:	4b3e      	ldr	r3, [pc, #248]	@ (800365c <MX_TIM1_Init+0x148>)
 8003564:	2200      	movs	r2, #0
 8003566:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003568:	4b3c      	ldr	r3, [pc, #240]	@ (800365c <MX_TIM1_Init+0x148>)
 800356a:	2200      	movs	r2, #0
 800356c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800356e:	4b3b      	ldr	r3, [pc, #236]	@ (800365c <MX_TIM1_Init+0x148>)
 8003570:	2200      	movs	r2, #0
 8003572:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003574:	4839      	ldr	r0, [pc, #228]	@ (800365c <MX_TIM1_Init+0x148>)
 8003576:	f00b fa48 	bl	800ea0a <HAL_TIM_OC_Init>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <MX_TIM1_Init+0x70>
	{
		Error_Handler();
 8003580:	f000 fb2c 	bl	8003bdc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003584:	2300      	movs	r3, #0
 8003586:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003588:	2300      	movs	r3, #0
 800358a:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800358c:	2300      	movs	r3, #0
 800358e:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003590:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003594:	4619      	mov	r1, r3
 8003596:	4831      	ldr	r0, [pc, #196]	@ (800365c <MX_TIM1_Init+0x148>)
 8003598:	f00d f846 	bl	8010628 <HAL_TIMEx_MasterConfigSynchronization>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_TIM1_Init+0x92>
	{
		Error_Handler();
 80035a2:	f000 fb1b 	bl	8003bdc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80035a6:	2300      	movs	r3, #0
 80035a8:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035ae:	2300      	movs	r3, #0
 80035b0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035b2:	2300      	movs	r3, #0
 80035b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80035c6:	2200      	movs	r2, #0
 80035c8:	4619      	mov	r1, r3
 80035ca:	4824      	ldr	r0, [pc, #144]	@ (800365c <MX_TIM1_Init+0x148>)
 80035cc:	f00b ff02 	bl	800f3d4 <HAL_TIM_OC_ConfigChannel>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM1_Init+0xc6>
	{
		Error_Handler();
 80035d6:	f000 fb01 	bl	8003bdc <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80035de:	2204      	movs	r2, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	481e      	ldr	r0, [pc, #120]	@ (800365c <MX_TIM1_Init+0x148>)
 80035e4:	f00b fef6 	bl	800f3d4 <HAL_TIM_OC_ConfigChannel>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <MX_TIM1_Init+0xde>
	{
		Error_Handler();
 80035ee:	f000 faf5 	bl	8003bdc <Error_Handler>
	}
	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80035f6:	2208      	movs	r2, #8
 80035f8:	4619      	mov	r1, r3
 80035fa:	4818      	ldr	r0, [pc, #96]	@ (800365c <MX_TIM1_Init+0x148>)
 80035fc:	f00b feea 	bl	800f3d4 <HAL_TIM_OC_ConfigChannel>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_TIM1_Init+0xf6>
	{
		Error_Handler();
 8003606:	f000 fae9 	bl	8003bdc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800360a:	2300      	movs	r3, #0
 800360c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800361e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003622:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003628:	2300      	movs	r3, #0
 800362a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800362c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003636:	2300      	movs	r3, #0
 8003638:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	4619      	mov	r1, r3
 800363e:	4807      	ldr	r0, [pc, #28]	@ (800365c <MX_TIM1_Init+0x148>)
 8003640:	f00d f87a 	bl	8010738 <HAL_TIMEx_ConfigBreakDeadTime>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <MX_TIM1_Init+0x13a>
	{
		Error_Handler();
 800364a:	f000 fac7 	bl	8003bdc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800364e:	4803      	ldr	r0, [pc, #12]	@ (800365c <MX_TIM1_Init+0x148>)
 8003650:	f001 faaa 	bl	8004ba8 <HAL_TIM_MspPostInit>

}
 8003654:	bf00      	nop
 8003656:	3758      	adds	r7, #88	@ 0x58
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	200002e4 	.word	0x200002e4
 8003660:	40012c00 	.word	0x40012c00

08003664 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800366a:	f107 0314 	add.w	r3, r7, #20
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003682:	4b21      	ldr	r3, [pc, #132]	@ (8003708 <MX_TIM2_Init+0xa4>)
 8003684:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003688:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800368a:	4b1f      	ldr	r3, [pc, #124]	@ (8003708 <MX_TIM2_Init+0xa4>)
 800368c:	2200      	movs	r2, #0
 800368e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003690:	4b1d      	ldr	r3, [pc, #116]	@ (8003708 <MX_TIM2_Init+0xa4>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8003696:	4b1c      	ldr	r3, [pc, #112]	@ (8003708 <MX_TIM2_Init+0xa4>)
 8003698:	f04f 32ff 	mov.w	r2, #4294967295
 800369c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800369e:	4b1a      	ldr	r3, [pc, #104]	@ (8003708 <MX_TIM2_Init+0xa4>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036a4:	4b18      	ldr	r3, [pc, #96]	@ (8003708 <MX_TIM2_Init+0xa4>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80036aa:	4817      	ldr	r0, [pc, #92]	@ (8003708 <MX_TIM2_Init+0xa4>)
 80036ac:	f00b fe3a 	bl	800f324 <HAL_TIM_IC_Init>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 80036b6:	f000 fa91 	bl	8003bdc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036c2:	f107 0314 	add.w	r3, r7, #20
 80036c6:	4619      	mov	r1, r3
 80036c8:	480f      	ldr	r0, [pc, #60]	@ (8003708 <MX_TIM2_Init+0xa4>)
 80036ca:	f00c ffad 	bl	8010628 <HAL_TIMEx_MasterConfigSynchronization>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 80036d4:	f000 fa82 	bl	8003bdc <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80036d8:	2300      	movs	r3, #0
 80036da:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80036dc:	2301      	movs	r3, #1
 80036de:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80036e8:	1d3b      	adds	r3, r7, #4
 80036ea:	2200      	movs	r2, #0
 80036ec:	4619      	mov	r1, r3
 80036ee:	4806      	ldr	r0, [pc, #24]	@ (8003708 <MX_TIM2_Init+0xa4>)
 80036f0:	f00b feea 	bl	800f4c8 <HAL_TIM_IC_ConfigChannel>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 80036fa:	f000 fa6f 	bl	8003bdc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80036fe:	bf00      	nop
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000330 	.word	0x20000330

0800370c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b090      	sub	sp, #64	@ 0x40
 8003710:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003712:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]
 800371c:	609a      	str	r2, [r3, #8]
 800371e:	60da      	str	r2, [r3, #12]
 8003720:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003722:	f107 0320 	add.w	r3, r7, #32
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	605a      	str	r2, [r3, #4]
 800372c:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	611a      	str	r2, [r3, #16]
 800373c:	615a      	str	r2, [r3, #20]
 800373e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003740:	4b2c      	ldr	r3, [pc, #176]	@ (80037f4 <MX_TIM3_Init+0xe8>)
 8003742:	4a2d      	ldr	r2, [pc, #180]	@ (80037f8 <MX_TIM3_Init+0xec>)
 8003744:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003746:	4b2b      	ldr	r3, [pc, #172]	@ (80037f4 <MX_TIM3_Init+0xe8>)
 8003748:	2200      	movs	r2, #0
 800374a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800374c:	4b29      	ldr	r3, [pc, #164]	@ (80037f4 <MX_TIM3_Init+0xe8>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 31;
 8003752:	4b28      	ldr	r3, [pc, #160]	@ (80037f4 <MX_TIM3_Init+0xe8>)
 8003754:	221f      	movs	r2, #31
 8003756:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003758:	4b26      	ldr	r3, [pc, #152]	@ (80037f4 <MX_TIM3_Init+0xe8>)
 800375a:	2200      	movs	r2, #0
 800375c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800375e:	4b25      	ldr	r3, [pc, #148]	@ (80037f4 <MX_TIM3_Init+0xe8>)
 8003760:	2200      	movs	r2, #0
 8003762:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003764:	4823      	ldr	r0, [pc, #140]	@ (80037f4 <MX_TIM3_Init+0xe8>)
 8003766:	f00b f8f9 	bl	800e95c <HAL_TIM_Base_Init>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8003770:	f000 fa34 	bl	8003bdc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003774:	481f      	ldr	r0, [pc, #124]	@ (80037f4 <MX_TIM3_Init+0xe8>)
 8003776:	f00b fbd7 	bl	800ef28 <HAL_TIM_PWM_Init>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <MX_TIM3_Init+0x78>
	{
		Error_Handler();
 8003780:	f000 fa2c 	bl	8003bdc <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003784:	2307      	movs	r3, #7
 8003786:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8003788:	2330      	movs	r3, #48	@ 0x30
 800378a:	633b      	str	r3, [r7, #48]	@ 0x30
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800378c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003790:	4619      	mov	r1, r3
 8003792:	4818      	ldr	r0, [pc, #96]	@ (80037f4 <MX_TIM3_Init+0xe8>)
 8003794:	f00c f911 	bl	800f9ba <HAL_TIM_SlaveConfigSynchro>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 800379e:	f000 fa1d 	bl	8003bdc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037aa:	f107 0320 	add.w	r3, r7, #32
 80037ae:	4619      	mov	r1, r3
 80037b0:	4810      	ldr	r0, [pc, #64]	@ (80037f4 <MX_TIM3_Init+0xe8>)
 80037b2:	f00c ff39 	bl	8010628 <HAL_TIMEx_MasterConfigSynchronization>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_TIM3_Init+0xb4>
	{
		Error_Handler();
 80037bc:	f000 fa0e 	bl	8003bdc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037c0:	2360      	movs	r3, #96	@ 0x60
 80037c2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 15;
 80037c4:	230f      	movs	r3, #15
 80037c6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	2208      	movs	r2, #8
 80037d4:	4619      	mov	r1, r3
 80037d6:	4807      	ldr	r0, [pc, #28]	@ (80037f4 <MX_TIM3_Init+0xe8>)
 80037d8:	f00b ff12 	bl	800f600 <HAL_TIM_PWM_ConfigChannel>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_TIM3_Init+0xda>
	{
		Error_Handler();
 80037e2:	f000 f9fb 	bl	8003bdc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80037e6:	4803      	ldr	r0, [pc, #12]	@ (80037f4 <MX_TIM3_Init+0xe8>)
 80037e8:	f001 f9de 	bl	8004ba8 <HAL_TIM_MspPostInit>

}
 80037ec:	bf00      	nop
 80037ee:	3740      	adds	r7, #64	@ 0x40
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	2000037c 	.word	0x2000037c
 80037f8:	40000400 	.word	0x40000400

080037fc <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08e      	sub	sp, #56	@ 0x38
 8003800:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003802:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	605a      	str	r2, [r3, #4]
 800380c:	609a      	str	r2, [r3, #8]
 800380e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003810:	f107 031c 	add.w	r3, r7, #28
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800381c:	463b      	mov	r3, r7
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	605a      	str	r2, [r3, #4]
 8003824:	609a      	str	r2, [r3, #8]
 8003826:	60da      	str	r2, [r3, #12]
 8003828:	611a      	str	r2, [r3, #16]
 800382a:	615a      	str	r2, [r3, #20]
 800382c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800382e:	4b2b      	ldr	r3, [pc, #172]	@ (80038dc <MX_TIM4_Init+0xe0>)
 8003830:	4a2b      	ldr	r2, [pc, #172]	@ (80038e0 <MX_TIM4_Init+0xe4>)
 8003832:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 99;
 8003834:	4b29      	ldr	r3, [pc, #164]	@ (80038dc <MX_TIM4_Init+0xe0>)
 8003836:	2263      	movs	r2, #99	@ 0x63
 8003838:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800383a:	4b28      	ldr	r3, [pc, #160]	@ (80038dc <MX_TIM4_Init+0xe0>)
 800383c:	2200      	movs	r2, #0
 800383e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 999;
 8003840:	4b26      	ldr	r3, [pc, #152]	@ (80038dc <MX_TIM4_Init+0xe0>)
 8003842:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003846:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003848:	4b24      	ldr	r3, [pc, #144]	@ (80038dc <MX_TIM4_Init+0xe0>)
 800384a:	2200      	movs	r2, #0
 800384c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800384e:	4b23      	ldr	r3, [pc, #140]	@ (80038dc <MX_TIM4_Init+0xe0>)
 8003850:	2280      	movs	r2, #128	@ 0x80
 8003852:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003854:	4821      	ldr	r0, [pc, #132]	@ (80038dc <MX_TIM4_Init+0xe0>)
 8003856:	f00b f881 	bl	800e95c <HAL_TIM_Base_Init>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <MX_TIM4_Init+0x68>
	{
		Error_Handler();
 8003860:	f000 f9bc 	bl	8003bdc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003864:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003868:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800386a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800386e:	4619      	mov	r1, r3
 8003870:	481a      	ldr	r0, [pc, #104]	@ (80038dc <MX_TIM4_Init+0xe0>)
 8003872:	f00b ffd9 	bl	800f828 <HAL_TIM_ConfigClockSource>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_TIM4_Init+0x84>
	{
		Error_Handler();
 800387c:	f000 f9ae 	bl	8003bdc <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003880:	4816      	ldr	r0, [pc, #88]	@ (80038dc <MX_TIM4_Init+0xe0>)
 8003882:	f00b f8c2 	bl	800ea0a <HAL_TIM_OC_Init>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_TIM4_Init+0x94>
	{
		Error_Handler();
 800388c:	f000 f9a6 	bl	8003bdc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003890:	2320      	movs	r3, #32
 8003892:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003894:	2300      	movs	r3, #0
 8003896:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003898:	f107 031c 	add.w	r3, r7, #28
 800389c:	4619      	mov	r1, r3
 800389e:	480f      	ldr	r0, [pc, #60]	@ (80038dc <MX_TIM4_Init+0xe0>)
 80038a0:	f00c fec2 	bl	8010628 <HAL_TIMEx_MasterConfigSynchronization>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_TIM4_Init+0xb2>
	{
		Error_Handler();
 80038aa:	f000 f997 	bl	8003bdc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80038ae:	2300      	movs	r3, #0
 80038b0:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038be:	463b      	mov	r3, r7
 80038c0:	2208      	movs	r2, #8
 80038c2:	4619      	mov	r1, r3
 80038c4:	4805      	ldr	r0, [pc, #20]	@ (80038dc <MX_TIM4_Init+0xe0>)
 80038c6:	f00b fd85 	bl	800f3d4 <HAL_TIM_OC_ConfigChannel>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_TIM4_Init+0xd8>
	{
		Error_Handler();
 80038d0:	f000 f984 	bl	8003bdc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80038d4:	bf00      	nop
 80038d6:	3738      	adds	r7, #56	@ 0x38
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	200003c8 	.word	0x200003c8
 80038e0:	40000800 	.word	0x40000800

080038e4 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80038e8:	4b14      	ldr	r3, [pc, #80]	@ (800393c <MX_UART4_Init+0x58>)
 80038ea:	4a15      	ldr	r2, [pc, #84]	@ (8003940 <MX_UART4_Init+0x5c>)
 80038ec:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80038ee:	4b13      	ldr	r3, [pc, #76]	@ (800393c <MX_UART4_Init+0x58>)
 80038f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80038f4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80038f6:	4b11      	ldr	r3, [pc, #68]	@ (800393c <MX_UART4_Init+0x58>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80038fc:	4b0f      	ldr	r3, [pc, #60]	@ (800393c <MX_UART4_Init+0x58>)
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8003902:	4b0e      	ldr	r3, [pc, #56]	@ (800393c <MX_UART4_Init+0x58>)
 8003904:	2200      	movs	r2, #0
 8003906:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8003908:	4b0c      	ldr	r3, [pc, #48]	@ (800393c <MX_UART4_Init+0x58>)
 800390a:	220c      	movs	r2, #12
 800390c:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800390e:	4b0b      	ldr	r3, [pc, #44]	@ (800393c <MX_UART4_Init+0x58>)
 8003910:	2200      	movs	r2, #0
 8003912:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003914:	4b09      	ldr	r3, [pc, #36]	@ (800393c <MX_UART4_Init+0x58>)
 8003916:	2200      	movs	r2, #0
 8003918:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800391a:	4b08      	ldr	r3, [pc, #32]	@ (800393c <MX_UART4_Init+0x58>)
 800391c:	2200      	movs	r2, #0
 800391e:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003920:	4b06      	ldr	r3, [pc, #24]	@ (800393c <MX_UART4_Init+0x58>)
 8003922:	2200      	movs	r2, #0
 8003924:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8003926:	4805      	ldr	r0, [pc, #20]	@ (800393c <MX_UART4_Init+0x58>)
 8003928:	f00c ffd2 	bl	80108d0 <HAL_HalfDuplex_Init>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_UART4_Init+0x52>
	{
		Error_Handler();
 8003932:	f000 f953 	bl	8003bdc <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000414 	.word	0x20000414
 8003940:	40004c00 	.word	0x40004c00

08003944 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003948:	4b14      	ldr	r3, [pc, #80]	@ (800399c <MX_USART1_UART_Init+0x58>)
 800394a:	4a15      	ldr	r2, [pc, #84]	@ (80039a0 <MX_USART1_UART_Init+0x5c>)
 800394c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800394e:	4b13      	ldr	r3, [pc, #76]	@ (800399c <MX_USART1_UART_Init+0x58>)
 8003950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003954:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003956:	4b11      	ldr	r3, [pc, #68]	@ (800399c <MX_USART1_UART_Init+0x58>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800395c:	4b0f      	ldr	r3, [pc, #60]	@ (800399c <MX_USART1_UART_Init+0x58>)
 800395e:	2200      	movs	r2, #0
 8003960:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003962:	4b0e      	ldr	r3, [pc, #56]	@ (800399c <MX_USART1_UART_Init+0x58>)
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003968:	4b0c      	ldr	r3, [pc, #48]	@ (800399c <MX_USART1_UART_Init+0x58>)
 800396a:	220c      	movs	r2, #12
 800396c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800396e:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <MX_USART1_UART_Init+0x58>)
 8003970:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003974:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003976:	4b09      	ldr	r3, [pc, #36]	@ (800399c <MX_USART1_UART_Init+0x58>)
 8003978:	2200      	movs	r2, #0
 800397a:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800397c:	4b07      	ldr	r3, [pc, #28]	@ (800399c <MX_USART1_UART_Init+0x58>)
 800397e:	2200      	movs	r2, #0
 8003980:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003982:	4b06      	ldr	r3, [pc, #24]	@ (800399c <MX_USART1_UART_Init+0x58>)
 8003984:	2200      	movs	r2, #0
 8003986:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8003988:	4804      	ldr	r0, [pc, #16]	@ (800399c <MX_USART1_UART_Init+0x58>)
 800398a:	f00c ff53 	bl	8010834 <HAL_UART_Init>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <MX_USART1_UART_Init+0x54>
	{
		Error_Handler();
 8003994:	f000 f922 	bl	8003bdc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8003998:	bf00      	nop
 800399a:	bd80      	pop	{r7, pc}
 800399c:	2000049c 	.word	0x2000049c
 80039a0:	40013800 	.word	0x40013800

080039a4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80039aa:	4b10      	ldr	r3, [pc, #64]	@ (80039ec <MX_DMA_Init+0x48>)
 80039ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ae:	4a0f      	ldr	r2, [pc, #60]	@ (80039ec <MX_DMA_Init+0x48>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6493      	str	r3, [r2, #72]	@ 0x48
 80039b6:	4b0d      	ldr	r3, [pc, #52]	@ (80039ec <MX_DMA_Init+0x48>)
 80039b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	607b      	str	r3, [r7, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80039c2:	2200      	movs	r2, #0
 80039c4:	2100      	movs	r1, #0
 80039c6:	200b      	movs	r0, #11
 80039c8:	f006 f9a9 	bl	8009d1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80039cc:	200b      	movs	r0, #11
 80039ce:	f006 f9c2 	bl	8009d56 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80039d2:	2200      	movs	r2, #0
 80039d4:	2100      	movs	r1, #0
 80039d6:	200f      	movs	r0, #15
 80039d8:	f006 f9a1 	bl	8009d1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80039dc:	200f      	movs	r0, #15
 80039de:	f006 f9ba 	bl	8009d56 <HAL_NVIC_EnableIRQ>

}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000

080039f0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	@ 0x28
 80039f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f6:	f107 0314 	add.w	r3, r7, #20
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	605a      	str	r2, [r3, #4]
 8003a00:	609a      	str	r2, [r3, #8]
 8003a02:	60da      	str	r2, [r3, #12]
 8003a04:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003a06:	4b71      	ldr	r3, [pc, #452]	@ (8003bcc <MX_GPIO_Init+0x1dc>)
 8003a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0a:	4a70      	ldr	r2, [pc, #448]	@ (8003bcc <MX_GPIO_Init+0x1dc>)
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a12:	4b6e      	ldr	r3, [pc, #440]	@ (8003bcc <MX_GPIO_Init+0x1dc>)
 8003a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003a1e:	4b6b      	ldr	r3, [pc, #428]	@ (8003bcc <MX_GPIO_Init+0x1dc>)
 8003a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a22:	4a6a      	ldr	r2, [pc, #424]	@ (8003bcc <MX_GPIO_Init+0x1dc>)
 8003a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a2a:	4b68      	ldr	r3, [pc, #416]	@ (8003bcc <MX_GPIO_Init+0x1dc>)
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003a36:	4b65      	ldr	r3, [pc, #404]	@ (8003bcc <MX_GPIO_Init+0x1dc>)
 8003a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3a:	4a64      	ldr	r2, [pc, #400]	@ (8003bcc <MX_GPIO_Init+0x1dc>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a42:	4b62      	ldr	r3, [pc, #392]	@ (8003bcc <MX_GPIO_Init+0x1dc>)
 8003a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8003bcc <MX_GPIO_Init+0x1dc>)
 8003a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a52:	4a5e      	ldr	r2, [pc, #376]	@ (8003bcc <MX_GPIO_Init+0x1dc>)
 8003a54:	f043 0302 	orr.w	r3, r3, #2
 8003a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8003bcc <MX_GPIO_Init+0x1dc>)
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003a66:	4b59      	ldr	r3, [pc, #356]	@ (8003bcc <MX_GPIO_Init+0x1dc>)
 8003a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a6a:	4a58      	ldr	r2, [pc, #352]	@ (8003bcc <MX_GPIO_Init+0x1dc>)
 8003a6c:	f043 0308 	orr.w	r3, r3, #8
 8003a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a72:	4b56      	ldr	r3, [pc, #344]	@ (8003bcc <MX_GPIO_Init+0x1dc>)
 8003a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2108      	movs	r1, #8
 8003a82:	4853      	ldr	r0, [pc, #332]	@ (8003bd0 <MX_GPIO_Init+0x1e0>)
 8003a84:	f006 fe58 	bl	800a738 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a8e:	4851      	ldr	r0, [pc, #324]	@ (8003bd4 <MX_GPIO_Init+0x1e4>)
 8003a90:	f006 fe52 	bl	800a738 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 8003a94:	2201      	movs	r2, #1
 8003a96:	21c0      	movs	r1, #192	@ 0xc0
 8003a98:	484d      	ldr	r0, [pc, #308]	@ (8003bd0 <MX_GPIO_Init+0x1e0>)
 8003a9a:	f006 fe4d 	bl	800a738 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin, GPIO_PIN_SET);
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003aa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003aa8:	f006 fe46 	bl	800a738 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8003aac:	2200      	movs	r2, #0
 8003aae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ab6:	f006 fe3f 	bl	800a738 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 8003aba:	2200      	movs	r2, #0
 8003abc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ac0:	4844      	ldr	r0, [pc, #272]	@ (8003bd4 <MX_GPIO_Init+0x1e4>)
 8003ac2:	f006 fe39 	bl	800a738 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : USR_BTN_Pin PC4 */
	GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 8003ac6:	f242 0310 	movw	r3, #8208	@ 0x2010
 8003aca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003acc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003ad0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ad6:	f107 0314 	add.w	r3, r7, #20
 8003ada:	4619      	mov	r1, r3
 8003adc:	483c      	ldr	r0, [pc, #240]	@ (8003bd0 <MX_GPIO_Init+0x1e0>)
 8003ade:	f006 fc81 	bl	800a3e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
	GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 8003ae2:	23c8      	movs	r3, #200	@ 0xc8
 8003ae4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aee:	2300      	movs	r3, #0
 8003af0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af2:	f107 0314 	add.w	r3, r7, #20
 8003af6:	4619      	mov	r1, r3
 8003af8:	4835      	ldr	r0, [pc, #212]	@ (8003bd0 <MX_GPIO_Init+0x1e0>)
 8003afa:	f006 fc73 	bl	800a3e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003afe:	2308      	movs	r3, #8
 8003b00:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0a:	f107 0314 	add.w	r3, r7, #20
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b14:	f006 fc66 	bl	800a3e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
	GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 8003b18:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8003b1c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b26:	2300      	movs	r3, #0
 8003b28:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2a:	f107 0314 	add.w	r3, r7, #20
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4828      	ldr	r0, [pc, #160]	@ (8003bd4 <MX_GPIO_Init+0x1e4>)
 8003b32:	f006 fc57 	bl	800a3e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin */
	GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin;
 8003b36:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003b3a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003b3c:	2311      	movs	r3, #17
 8003b3e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b44:	2300      	movs	r3, #0
 8003b46:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b48:	f107 0314 	add.w	r3, r7, #20
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b52:	f006 fc47 	bl	800a3e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACC_nCS_Pin */
	GPIO_InitStruct.Pin = ACC_nCS_Pin;
 8003b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b64:	2300      	movs	r3, #0
 8003b66:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(ACC_nCS_GPIO_Port, &GPIO_InitStruct);
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b72:	f006 fc37 	bl	800a3e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b76:	2304      	movs	r3, #4
 8003b78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b7a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003b7e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4813      	ldr	r0, [pc, #76]	@ (8003bd8 <MX_GPIO_Init+0x1e8>)
 8003b8c:	f006 fc2a 	bl	800a3e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCD_Pin */
	GPIO_InitStruct.Pin = DCD_Pin;
 8003b90:	2320      	movs	r3, #32
 8003b92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 8003b9c:	f107 0314 	add.w	r3, r7, #20
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	480c      	ldr	r0, [pc, #48]	@ (8003bd4 <MX_GPIO_Init+0x1e4>)
 8003ba4:	f006 fc1e 	bl	800a3e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003ba8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003bb2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bb8:	f107 0314 	add.w	r3, r7, #20
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4805      	ldr	r0, [pc, #20]	@ (8003bd4 <MX_GPIO_Init+0x1e4>)
 8003bc0:	f006 fc10 	bl	800a3e4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003bc4:	bf00      	nop
 8003bc6:	3728      	adds	r7, #40	@ 0x28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	48000800 	.word	0x48000800
 8003bd4:	48000400 	.word	0x48000400
 8003bd8:	48000c00 	.word	0x48000c00

08003bdc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003be0:	b672      	cpsid	i
}
 8003be2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003be4:	bf00      	nop
 8003be6:	e7fd      	b.n	8003be4 <Error_Handler+0x8>

08003be8 <Save_Data>:
#include "FatFs/ff.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 8003bec:	4b75      	ldr	r3, [pc, #468]	@ (8003dc4 <Save_Data+0x1dc>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d018      	beq.n	8003c2c <Save_Data+0x44>
	{
		memcpy(Logging_Buffer + Address_Offset, &Pressure[0], PRESS_FULL_SAMPLES);
 8003bfa:	4b73      	ldr	r3, [pc, #460]	@ (8003dc8 <Save_Data+0x1e0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4b72      	ldr	r3, [pc, #456]	@ (8003dcc <Save_Data+0x1e4>)
 8003c02:	4413      	add	r3, r2
 8003c04:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003c08:	4971      	ldr	r1, [pc, #452]	@ (8003dd0 <Save_Data+0x1e8>)
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f00e f970 	bl	8011ef0 <memcpy>
		Last_Pressure = Pressure[PRESS_HALF_SAMPLES - 1];
 8003c10:	4b6f      	ldr	r3, [pc, #444]	@ (8003dd0 <Save_Data+0x1e8>)
 8003c12:	f8b3 231e 	ldrh.w	r2, [r3, #798]	@ 0x31e
 8003c16:	4b6f      	ldr	r3, [pc, #444]	@ (8003dd4 <Save_Data+0x1ec>)
 8003c18:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 8003c1a:	486d      	ldr	r0, [pc, #436]	@ (8003dd0 <Save_Data+0x1e8>)
 8003c1c:	f000 f8f0 	bl	8003e00 <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 8003c20:	4a68      	ldr	r2, [pc, #416]	@ (8003dc4 <Save_Data+0x1dc>)
 8003c22:	7813      	ldrb	r3, [r2, #0]
 8003c24:	f023 0302 	bic.w	r3, r3, #2
 8003c28:	7013      	strb	r3, [r2, #0]
 8003c2a:	e01e      	b.n	8003c6a <Save_Data+0x82>
	}
	else if(flags.ADC_Full_Buffer)
 8003c2c:	4b65      	ldr	r3, [pc, #404]	@ (8003dc4 <Save_Data+0x1dc>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d017      	beq.n	8003c6a <Save_Data+0x82>
	{
		memcpy(Logging_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_FULL_SAMPLES);
 8003c3a:	4b63      	ldr	r3, [pc, #396]	@ (8003dc8 <Save_Data+0x1e0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4b62      	ldr	r3, [pc, #392]	@ (8003dcc <Save_Data+0x1e4>)
 8003c42:	4413      	add	r3, r2
 8003c44:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003c48:	4963      	ldr	r1, [pc, #396]	@ (8003dd8 <Save_Data+0x1f0>)
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f00e f950 	bl	8011ef0 <memcpy>
		Last_Pressure = Pressure[PRESS_FULL_SAMPLES - 1];
 8003c50:	4b5f      	ldr	r3, [pc, #380]	@ (8003dd0 <Save_Data+0x1e8>)
 8003c52:	f8b3 263e 	ldrh.w	r2, [r3, #1598]	@ 0x63e
 8003c56:	4b5f      	ldr	r3, [pc, #380]	@ (8003dd4 <Save_Data+0x1ec>)
 8003c58:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 8003c5a:	485f      	ldr	r0, [pc, #380]	@ (8003dd8 <Save_Data+0x1f0>)
 8003c5c:	f000 f8d0 	bl	8003e00 <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 8003c60:	4a58      	ldr	r2, [pc, #352]	@ (8003dc4 <Save_Data+0x1dc>)
 8003c62:	7813      	ldrb	r3, [r2, #0]
 8003c64:	f023 0304 	bic.w	r3, r3, #4
 8003c68:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += PRESS_FULL_SAMPLES;
 8003c6a:	4b57      	ldr	r3, [pc, #348]	@ (8003dc8 <Save_Data+0x1e0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8003c72:	4a55      	ldr	r2, [pc, #340]	@ (8003dc8 <Save_Data+0x1e0>)
 8003c74:	6013      	str	r3, [r2, #0]

	memcpy(Logging_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 8003c76:	4b54      	ldr	r3, [pc, #336]	@ (8003dc8 <Save_Data+0x1e0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4b53      	ldr	r3, [pc, #332]	@ (8003dcc <Save_Data+0x1e4>)
 8003c7e:	4413      	add	r3, r2
 8003c80:	2228      	movs	r2, #40	@ 0x28
 8003c82:	4956      	ldr	r1, [pc, #344]	@ (8003ddc <Save_Data+0x1f4>)
 8003c84:	4618      	mov	r0, r3
 8003c86:	f00e f933 	bl	8011ef0 <memcpy>
	Last_Volume = Volume_Period[Period_cnt];
 8003c8a:	4b55      	ldr	r3, [pc, #340]	@ (8003de0 <Save_Data+0x1f8>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4b52      	ldr	r3, [pc, #328]	@ (8003ddc <Save_Data+0x1f4>)
 8003c92:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003c96:	4b53      	ldr	r3, [pc, #332]	@ (8003de4 <Save_Data+0x1fc>)
 8003c98:	801a      	strh	r2, [r3, #0]
	Period_cnt = 0;
 8003c9a:	4b51      	ldr	r3, [pc, #324]	@ (8003de0 <Save_Data+0x1f8>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8003ca0:	2228      	movs	r2, #40	@ 0x28
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	484d      	ldr	r0, [pc, #308]	@ (8003ddc <Save_Data+0x1f4>)
 8003ca6:	f00e f89f 	bl	8011de8 <memset>
	Address_Offset += MAX_VOLUME_LEN;
 8003caa:	4b47      	ldr	r3, [pc, #284]	@ (8003dc8 <Save_Data+0x1e0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3328      	adds	r3, #40	@ 0x28
 8003cb0:	4a45      	ldr	r2, [pc, #276]	@ (8003dc8 <Save_Data+0x1e0>)
 8003cb2:	6013      	str	r3, [r2, #0]

	if(flags.ACC_Present)
 8003cb4:	4b43      	ldr	r3, [pc, #268]	@ (8003dc4 <Save_Data+0x1dc>)
 8003cb6:	785b      	ldrb	r3, [r3, #1]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d017      	beq.n	8003cf2 <Save_Data+0x10a>
	{
		memcpy(Logging_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 8003cc2:	4b41      	ldr	r3, [pc, #260]	@ (8003dc8 <Save_Data+0x1e0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4b40      	ldr	r3, [pc, #256]	@ (8003dcc <Save_Data+0x1e4>)
 8003cca:	4413      	add	r3, r2
 8003ccc:	4a46      	ldr	r2, [pc, #280]	@ (8003de8 <Save_Data+0x200>)
 8003cce:	4618      	mov	r0, r3
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f00e f90a 	bl	8011ef0 <memcpy>
		Last_Acceleration = Acceleration[ACCELERATION_LEN - 1];
 8003cdc:	4b42      	ldr	r3, [pc, #264]	@ (8003de8 <Save_Data+0x200>)
 8003cde:	f893 3577 	ldrb.w	r3, [r3, #1399]	@ 0x577
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b41      	ldr	r3, [pc, #260]	@ (8003dec <Save_Data+0x204>)
 8003ce6:	801a      	strh	r2, [r3, #0]
		flags.ACC_Complete = 0;
 8003ce8:	4a36      	ldr	r2, [pc, #216]	@ (8003dc4 <Save_Data+0x1dc>)
 8003cea:	7853      	ldrb	r3, [r2, #1]
 8003cec:	f023 0302 	bic.w	r3, r3, #2
 8003cf0:	7053      	strb	r3, [r2, #1]
	}
	Address_Offset += ACCELERATION_LEN;
 8003cf2:	4b35      	ldr	r3, [pc, #212]	@ (8003dc8 <Save_Data+0x1e0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8003cfa:	4a33      	ldr	r2, [pc, #204]	@ (8003dc8 <Save_Data+0x1e0>)
 8003cfc:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 8003cfe:	483c      	ldr	r0, [pc, #240]	@ (8003df0 <Save_Data+0x208>)
 8003d00:	f7fc fd95 	bl	800082e <INA3221_Read_Measure>
	memcpy(Logging_Buffer + Address_Offset, &Supply, SUPPLY_LEN);
 8003d04:	4b30      	ldr	r3, [pc, #192]	@ (8003dc8 <Save_Data+0x1e0>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b30      	ldr	r3, [pc, #192]	@ (8003dcc <Save_Data+0x1e4>)
 8003d0c:	4413      	add	r3, r2
 8003d0e:	220c      	movs	r2, #12
 8003d10:	4937      	ldr	r1, [pc, #220]	@ (8003df0 <Save_Data+0x208>)
 8003d12:	4618      	mov	r0, r3
 8003d14:	f00e f8ec 	bl	8011ef0 <memcpy>
	Address_Offset += SUPPLY_LEN;
 8003d18:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc8 <Save_Data+0x1e0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc8 <Save_Data+0x1e0>)
 8003d20:	6013      	str	r3, [r2, #0]

	Temperature = Read_Temperature();
 8003d22:	f7fc fd33 	bl	800078c <Read_Temperature>
 8003d26:	4603      	mov	r3, r0
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4b32      	ldr	r3, [pc, #200]	@ (8003df4 <Save_Data+0x20c>)
 8003d2c:	801a      	strh	r2, [r3, #0]
	memcpy(Logging_Buffer + Address_Offset, &Temperature, TEMP_LEN);
 8003d2e:	4b26      	ldr	r3, [pc, #152]	@ (8003dc8 <Save_Data+0x1e0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	4b25      	ldr	r3, [pc, #148]	@ (8003dcc <Save_Data+0x1e4>)
 8003d36:	4413      	add	r3, r2
 8003d38:	4a2e      	ldr	r2, [pc, #184]	@ (8003df4 <Save_Data+0x20c>)
 8003d3a:	8812      	ldrh	r2, [r2, #0]
 8003d3c:	801a      	strh	r2, [r3, #0]

	RAM_Save_Measure(Logging_Buffer);
 8003d3e:	4823      	ldr	r0, [pc, #140]	@ (8003dcc <Save_Data+0x1e4>)
 8003d40:	f000 f8c4 	bl	8003ecc <RAM_Save_Measure>

	flags.ADC_Complete = 0;
 8003d44:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc4 <Save_Data+0x1dc>)
 8003d46:	7813      	ldrb	r3, [r2, #0]
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	7013      	strb	r3, [r2, #0]
	Address_Offset = 0;
 8003d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc8 <Save_Data+0x1e0>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 8003d54:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc4 <Save_Data+0x1dc>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <Save_Data+0x188>
 8003d62:	4b18      	ldr	r3, [pc, #96]	@ (8003dc4 <Save_Data+0x1dc>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d027      	beq.n	8003dc0 <Save_Data+0x1d8>
	{
		Seconds_After_Warning++;
 8003d70:	4b21      	ldr	r3, [pc, #132]	@ (8003df8 <Save_Data+0x210>)
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	3301      	adds	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	4b1f      	ldr	r3, [pc, #124]	@ (8003df8 <Save_Data+0x210>)
 8003d7a:	801a      	strh	r2, [r3, #0]
		if(Seconds_After_Warning == 30)
 8003d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003df8 <Save_Data+0x210>)
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	2b1e      	cmp	r3, #30
 8003d82:	d11d      	bne.n	8003dc0 <Save_Data+0x1d8>
		{
			state = SEND_RECORDING_STATE;
 8003d84:	4b1d      	ldr	r3, [pc, #116]	@ (8003dfc <Save_Data+0x214>)
 8003d86:	2203      	movs	r2, #3
 8003d88:	701a      	strb	r2, [r3, #0]
			Seconds_After_Warning = 0;
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003df8 <Save_Data+0x210>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	801a      	strh	r2, [r3, #0]
			if(flags.Hammer_Detected)
 8003d90:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc4 <Save_Data+0x1dc>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d004      	beq.n	8003da8 <Save_Data+0x1c0>
			{
				flags.Hammer_Detected = 0;
 8003d9e:	4a09      	ldr	r2, [pc, #36]	@ (8003dc4 <Save_Data+0x1dc>)
 8003da0:	7813      	ldrb	r3, [r2, #0]
 8003da2:	f023 0320 	bic.w	r3, r3, #32
 8003da6:	7013      	strb	r3, [r2, #0]
			}
			if(flags.Threshold_Detected)
 8003da8:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <Save_Data+0x1dc>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d004      	beq.n	8003dc0 <Save_Data+0x1d8>
			{
				flags.Threshold_Detected = 0;
 8003db6:	4a03      	ldr	r2, [pc, #12]	@ (8003dc4 <Save_Data+0x1dc>)
 8003db8:	7813      	ldrb	r3, [r2, #0]
 8003dba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dbe:	7013      	strb	r3, [r2, #0]
			}
		}
	}

}
 8003dc0:	bf00      	nop
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20003990 	.word	0x20003990
 8003dc8:	2000704c 	.word	0x2000704c
 8003dcc:	2000677c 	.word	0x2000677c
 8003dd0:	20005b30 	.word	0x20005b30
 8003dd4:	20006710 	.word	0x20006710
 8003dd8:	20005e50 	.word	0x20005e50
 8003ddc:	20006170 	.word	0x20006170
 8003de0:	20005b2c 	.word	0x20005b2c
 8003de4:	20006712 	.word	0x20006712
 8003de8:	20006198 	.word	0x20006198
 8003dec:	20006714 	.word	0x20006714
 8003df0:	20005b20 	.word	0x20005b20
 8003df4:	20006716 	.word	0x20006716
 8003df8:	20007050 	.word	0x20007050
 8003dfc:	2000056c 	.word	0x2000056c

08003e00 <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8003e14:	2301      	movs	r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	e03c      	b.n	8003e94 <Warning_Detection+0x94>
	{
		if(Data[i] > max)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	89fa      	ldrh	r2, [r7, #14]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d206      	bcs.n	8003e38 <Warning_Detection+0x38>
		{
			max = Data[i];
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	4413      	add	r3, r2
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	81fb      	strh	r3, [r7, #14]
 8003e36:	e00d      	b.n	8003e54 <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	89ba      	ldrh	r2, [r7, #12]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d905      	bls.n	8003e54 <Warning_Detection+0x54>
		{
			min = Data[i];
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4413      	add	r3, r2
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	881a      	ldrh	r2, [r3, #0]
 8003e5e:	4b18      	ldr	r3, [pc, #96]	@ (8003ec0 <Warning_Detection+0xc0>)
 8003e60:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8003e64:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d30b      	bcc.n	8003e84 <Warning_Detection+0x84>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	881a      	ldrh	r2, [r3, #0]
 8003e76:	4b12      	ldr	r3, [pc, #72]	@ (8003ec0 <Warning_Detection+0xc0>)
 8003e78:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8003e7c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d904      	bls.n	8003e8e <Warning_Detection+0x8e>
		{
			flags.Threshold_Detected= 1;
 8003e84:	4a0f      	ldr	r2, [pc, #60]	@ (8003ec4 <Warning_Detection+0xc4>)
 8003e86:	7813      	ldrb	r3, [r2, #0]
 8003e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e8c:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	3301      	adds	r3, #1
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003e9a:	dbbe      	blt.n	8003e1a <Warning_Detection+0x1a>
		}
	}

	if(max - min >= Hammer_Th)
 8003e9c:	89fa      	ldrh	r2, [r7, #14]
 8003e9e:	89bb      	ldrh	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	4a09      	ldr	r2, [pc, #36]	@ (8003ec8 <Warning_Detection+0xc8>)
 8003ea4:	8812      	ldrh	r2, [r2, #0]
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	db04      	blt.n	8003eb4 <Warning_Detection+0xb4>
	{
		flags.Hammer_Detected = 1;
 8003eaa:	4a06      	ldr	r2, [pc, #24]	@ (8003ec4 <Warning_Detection+0xc4>)
 8003eac:	7813      	ldrb	r3, [r2, #0]
 8003eae:	f043 0320 	orr.w	r3, r3, #32
 8003eb2:	7013      	strb	r3, [r2, #0]
	}

}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	20000570 	.word	0x20000570
 8003ec4:	20003990 	.word	0x20003990
 8003ec8:	20007056 	.word	0x20007056

08003ecc <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(uint8_t* Buffer)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	UINT written = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]

	if(Saves_cnt == 0)
 8003ed8:	4b39      	ldr	r3, [pc, #228]	@ (8003fc0 <RAM_Save_Measure+0xf4>)
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d11a      	bne.n	8003f16 <RAM_Save_Measure+0x4a>
	{
		f_close(&sys.file_meas_1);
 8003ee0:	4838      	ldr	r0, [pc, #224]	@ (8003fc4 <RAM_Save_Measure+0xf8>)
 8003ee2:	f003 fb9d 	bl	8007620 <f_close>
		sys.file_meas_1_open = 0;
 8003ee6:	4b38      	ldr	r3, [pc, #224]	@ (8003fc8 <RAM_Save_Measure+0xfc>)
 8003ee8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		f_unlink(MEASURE_FILE_NAME_1);
 8003ef2:	4836      	ldr	r0, [pc, #216]	@ (8003fcc <RAM_Save_Measure+0x100>)
 8003ef4:	f003 fbb4 	bl	8007660 <f_unlink>
		res = f_open(&sys.file_meas_1, MEASURE_FILE_NAME_1, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 8003ef8:	220b      	movs	r2, #11
 8003efa:	4934      	ldr	r1, [pc, #208]	@ (8003fcc <RAM_Save_Measure+0x100>)
 8003efc:	4831      	ldr	r0, [pc, #196]	@ (8003fc4 <RAM_Save_Measure+0xf8>)
 8003efe:	f002 fe9b 	bl	8006c38 <f_open>
 8003f02:	4603      	mov	r3, r0
 8003f04:	461a      	mov	r2, r3
 8003f06:	4b32      	ldr	r3, [pc, #200]	@ (8003fd0 <RAM_Save_Measure+0x104>)
 8003f08:	701a      	strb	r2, [r3, #0]
		sys.file_meas_1_open = 1;
 8003f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc8 <RAM_Save_Measure+0xfc>)
 8003f0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}

	if(Saves_cnt == 30)
 8003f16:	4b2a      	ldr	r3, [pc, #168]	@ (8003fc0 <RAM_Save_Measure+0xf4>)
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	2b1e      	cmp	r3, #30
 8003f1c:	d11a      	bne.n	8003f54 <RAM_Save_Measure+0x88>
	{
		f_close(&sys.file_meas_2);
 8003f1e:	482d      	ldr	r0, [pc, #180]	@ (8003fd4 <RAM_Save_Measure+0x108>)
 8003f20:	f003 fb7e 	bl	8007620 <f_close>
		sys.file_meas_2_open = 0;
 8003f24:	4b28      	ldr	r3, [pc, #160]	@ (8003fc8 <RAM_Save_Measure+0xfc>)
 8003f26:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
		f_unlink(MEASURE_FILE_NAME_2);
 8003f30:	4829      	ldr	r0, [pc, #164]	@ (8003fd8 <RAM_Save_Measure+0x10c>)
 8003f32:	f003 fb95 	bl	8007660 <f_unlink>
		res = f_open(&sys.file_meas_2, MEASURE_FILE_NAME_2, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 8003f36:	220b      	movs	r2, #11
 8003f38:	4927      	ldr	r1, [pc, #156]	@ (8003fd8 <RAM_Save_Measure+0x10c>)
 8003f3a:	4826      	ldr	r0, [pc, #152]	@ (8003fd4 <RAM_Save_Measure+0x108>)
 8003f3c:	f002 fe7c 	bl	8006c38 <f_open>
 8003f40:	4603      	mov	r3, r0
 8003f42:	461a      	mov	r2, r3
 8003f44:	4b22      	ldr	r3, [pc, #136]	@ (8003fd0 <RAM_Save_Measure+0x104>)
 8003f46:	701a      	strb	r2, [r3, #0]
		sys.file_meas_2_open = 1;
 8003f48:	4b1f      	ldr	r3, [pc, #124]	@ (8003fc8 <RAM_Save_Measure+0xfc>)
 8003f4a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	}

	if(Saves_cnt < 30)
 8003f54:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <RAM_Save_Measure+0xf4>)
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	2b1d      	cmp	r3, #29
 8003f5a:	d812      	bhi.n	8003f82 <RAM_Save_Measure+0xb6>
	{
		res = f_write(&sys.file_meas_1, (uint8_t *)&Buffer, LOGGING_BUFFER_LEN, &written);
 8003f5c:	f107 030c 	add.w	r3, r7, #12
 8003f60:	1d39      	adds	r1, r7, #4
 8003f62:	f640 02ce 	movw	r2, #2254	@ 0x8ce
 8003f66:	4817      	ldr	r0, [pc, #92]	@ (8003fc4 <RAM_Save_Measure+0xf8>)
 8003f68:	f003 f951 	bl	800720e <f_write>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4b17      	ldr	r3, [pc, #92]	@ (8003fd0 <RAM_Save_Measure+0x104>)
 8003f72:	701a      	strb	r2, [r3, #0]
		Saves_cnt++;
 8003f74:	4b12      	ldr	r3, [pc, #72]	@ (8003fc0 <RAM_Save_Measure+0xf4>)
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	4b10      	ldr	r3, [pc, #64]	@ (8003fc0 <RAM_Save_Measure+0xf4>)
 8003f7e:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		Saves_cnt = 0;
	}
}
 8003f80:	e019      	b.n	8003fb6 <RAM_Save_Measure+0xea>
	else if(Saves_cnt < 60)
 8003f82:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc0 <RAM_Save_Measure+0xf4>)
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	2b3b      	cmp	r3, #59	@ 0x3b
 8003f88:	d812      	bhi.n	8003fb0 <RAM_Save_Measure+0xe4>
		res = f_write(&sys.file_meas_2, (uint8_t *)&Buffer, LOGGING_BUFFER_LEN, &written);
 8003f8a:	f107 030c 	add.w	r3, r7, #12
 8003f8e:	1d39      	adds	r1, r7, #4
 8003f90:	f640 02ce 	movw	r2, #2254	@ 0x8ce
 8003f94:	480f      	ldr	r0, [pc, #60]	@ (8003fd4 <RAM_Save_Measure+0x108>)
 8003f96:	f003 f93a 	bl	800720e <f_write>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <RAM_Save_Measure+0x104>)
 8003fa0:	701a      	strb	r2, [r3, #0]
		Saves_cnt++;
 8003fa2:	4b07      	ldr	r3, [pc, #28]	@ (8003fc0 <RAM_Save_Measure+0xf4>)
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <RAM_Save_Measure+0xf4>)
 8003fac:	801a      	strh	r2, [r3, #0]
}
 8003fae:	e002      	b.n	8003fb6 <RAM_Save_Measure+0xea>
		Saves_cnt = 0;
 8003fb0:	4b03      	ldr	r3, [pc, #12]	@ (8003fc0 <RAM_Save_Measure+0xf4>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	801a      	strh	r2, [r3, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20007052 	.word	0x20007052
 8003fc4:	200015a4 	.word	0x200015a4
 8003fc8:	20000570 	.word	0x20000570
 8003fcc:	08013274 	.word	0x08013274
 8003fd0:	20007054 	.word	0x20007054
 8003fd4:	200025d0 	.word	0x200025d0
 8003fd8:	08013284 	.word	0x08013284

08003fdc <Send_Measure>:

/*-----INVIO MISURA COMPLETA-----*/
void Send_Measure(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0

}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <Apply_Config>:

/*-----APPLICA VALORI CONFIGURAZIONE-----*/
void Apply_Config(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
	FIL config_file;
	UINT bytes_read;
	
	if(strcmp(cfg_var, "DEVICE_ID") == 0) 
 8003ff6:	496b      	ldr	r1, [pc, #428]	@ (80041a4 <Apply_Config+0x1b8>)
 8003ff8:	486b      	ldr	r0, [pc, #428]	@ (80041a8 <Apply_Config+0x1bc>)
 8003ffa:	f7fc f8e9 	bl	80001d0 <strcmp>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d107      	bne.n	8004014 <Apply_Config+0x28>
	{
		config.device_id = (uint8_t)atoi(new_cfg_val);
 8004004:	4869      	ldr	r0, [pc, #420]	@ (80041ac <Apply_Config+0x1c0>)
 8004006:	f00d fe04 	bl	8011c12 <atoi>
 800400a:	4603      	mov	r3, r0
 800400c:	b2da      	uxtb	r2, r3
 800400e:	4b68      	ldr	r3, [pc, #416]	@ (80041b0 <Apply_Config+0x1c4>)
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	e085      	b.n	8004120 <Apply_Config+0x134>
    }
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8004014:	4967      	ldr	r1, [pc, #412]	@ (80041b4 <Apply_Config+0x1c8>)
 8004016:	4864      	ldr	r0, [pc, #400]	@ (80041a8 <Apply_Config+0x1bc>)
 8004018:	f7fc f8da 	bl	80001d0 <strcmp>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d107      	bne.n	8004032 <Apply_Config+0x46>
	{
		config.hammer_th = (uint16_t)atoi(new_cfg_val);
 8004022:	4862      	ldr	r0, [pc, #392]	@ (80041ac <Apply_Config+0x1c0>)
 8004024:	f00d fdf5 	bl	8011c12 <atoi>
 8004028:	4603      	mov	r3, r0
 800402a:	b29a      	uxth	r2, r3
 800402c:	4b60      	ldr	r3, [pc, #384]	@ (80041b0 <Apply_Config+0x1c4>)
 800402e:	805a      	strh	r2, [r3, #2]
 8004030:	e076      	b.n	8004120 <Apply_Config+0x134>
	}
    else if(strcmp(cfg_var, "HIGH_TH") == 0) 
 8004032:	4961      	ldr	r1, [pc, #388]	@ (80041b8 <Apply_Config+0x1cc>)
 8004034:	485c      	ldr	r0, [pc, #368]	@ (80041a8 <Apply_Config+0x1bc>)
 8004036:	f7fc f8cb 	bl	80001d0 <strcmp>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d115      	bne.n	800406c <Apply_Config+0x80>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8004040:	4b5e      	ldr	r3, [pc, #376]	@ (80041bc <Apply_Config+0x1d0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	db6b      	blt.n	8004120 <Apply_Config+0x134>
 8004048:	4b5c      	ldr	r3, [pc, #368]	@ (80041bc <Apply_Config+0x1d0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b17      	cmp	r3, #23
 800404e:	dc67      	bgt.n	8004120 <Apply_Config+0x134>
		{
            config.high_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8004050:	4856      	ldr	r0, [pc, #344]	@ (80041ac <Apply_Config+0x1c0>)
 8004052:	f00d fdde 	bl	8011c12 <atoi>
 8004056:	4602      	mov	r2, r0
 8004058:	4b58      	ldr	r3, [pc, #352]	@ (80041bc <Apply_Config+0x1d0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	b291      	uxth	r1, r2
 800405e:	4a54      	ldr	r2, [pc, #336]	@ (80041b0 <Apply_Config+0x1c4>)
 8004060:	3318      	adds	r3, #24
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	4413      	add	r3, r2
 8004066:	460a      	mov	r2, r1
 8004068:	809a      	strh	r2, [r3, #4]
 800406a:	e059      	b.n	8004120 <Apply_Config+0x134>
        }
    }
    else if(strcmp(cfg_var, "LOW_TH") == 0) 
 800406c:	4954      	ldr	r1, [pc, #336]	@ (80041c0 <Apply_Config+0x1d4>)
 800406e:	484e      	ldr	r0, [pc, #312]	@ (80041a8 <Apply_Config+0x1bc>)
 8004070:	f7fc f8ae 	bl	80001d0 <strcmp>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d114      	bne.n	80040a4 <Apply_Config+0xb8>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 800407a:	4b50      	ldr	r3, [pc, #320]	@ (80041bc <Apply_Config+0x1d0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	db4e      	blt.n	8004120 <Apply_Config+0x134>
 8004082:	4b4e      	ldr	r3, [pc, #312]	@ (80041bc <Apply_Config+0x1d0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b17      	cmp	r3, #23
 8004088:	dc4a      	bgt.n	8004120 <Apply_Config+0x134>
		{
            config.low_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 800408a:	4848      	ldr	r0, [pc, #288]	@ (80041ac <Apply_Config+0x1c0>)
 800408c:	f00d fdc1 	bl	8011c12 <atoi>
 8004090:	4602      	mov	r2, r0
 8004092:	4b4a      	ldr	r3, [pc, #296]	@ (80041bc <Apply_Config+0x1d0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	b291      	uxth	r1, r2
 8004098:	4a45      	ldr	r2, [pc, #276]	@ (80041b0 <Apply_Config+0x1c4>)
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	4413      	add	r3, r2
 800409e:	460a      	mov	r2, r1
 80040a0:	809a      	strh	r2, [r3, #4]
 80040a2:	e03d      	b.n	8004120 <Apply_Config+0x134>
        }
    }
    else if(strcmp(cfg_var, "DATA_TOPIC") == 0) 
 80040a4:	4947      	ldr	r1, [pc, #284]	@ (80041c4 <Apply_Config+0x1d8>)
 80040a6:	4840      	ldr	r0, [pc, #256]	@ (80041a8 <Apply_Config+0x1bc>)
 80040a8:	f7fc f892 	bl	80001d0 <strcmp>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10d      	bne.n	80040ce <Apply_Config+0xe2>
	{
        strncpy(config.data_topic, new_cfg_val, sizeof(config.data_topic) - 1);
 80040b2:	223f      	movs	r2, #63	@ 0x3f
 80040b4:	493d      	ldr	r1, [pc, #244]	@ (80041ac <Apply_Config+0x1c0>)
 80040b6:	4844      	ldr	r0, [pc, #272]	@ (80041c8 <Apply_Config+0x1dc>)
 80040b8:	f00d febd 	bl	8011e36 <strncpy>
        config.data_topic[sizeof(config.data_topic) - 1] = '\0';
 80040bc:	4b3c      	ldr	r3, [pc, #240]	@ (80041b0 <Apply_Config+0x1c4>)
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
		strcpy(sys.MQTT.Data_Topic, config.data_topic);
 80040c4:	4940      	ldr	r1, [pc, #256]	@ (80041c8 <Apply_Config+0x1dc>)
 80040c6:	4841      	ldr	r0, [pc, #260]	@ (80041cc <Apply_Config+0x1e0>)
 80040c8:	f00d ff0a 	bl	8011ee0 <strcpy>
 80040cc:	e028      	b.n	8004120 <Apply_Config+0x134>
    }
    else if(strcmp(cfg_var, "CMD_TOPIC") == 0) 
 80040ce:	4940      	ldr	r1, [pc, #256]	@ (80041d0 <Apply_Config+0x1e4>)
 80040d0:	4835      	ldr	r0, [pc, #212]	@ (80041a8 <Apply_Config+0x1bc>)
 80040d2:	f7fc f87d 	bl	80001d0 <strcmp>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10d      	bne.n	80040f8 <Apply_Config+0x10c>
	{
        strncpy(config.command_topic, new_cfg_val, sizeof(config.command_topic) - 1);
 80040dc:	223f      	movs	r2, #63	@ 0x3f
 80040de:	4933      	ldr	r1, [pc, #204]	@ (80041ac <Apply_Config+0x1c0>)
 80040e0:	483c      	ldr	r0, [pc, #240]	@ (80041d4 <Apply_Config+0x1e8>)
 80040e2:	f00d fea8 	bl	8011e36 <strncpy>
        config.command_topic[sizeof(config.command_topic) - 1] = '\0';
 80040e6:	4b32      	ldr	r3, [pc, #200]	@ (80041b0 <Apply_Config+0x1c4>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
		strcpy(sys.MQTT.Command_Topic, config.command_topic);
 80040ee:	4939      	ldr	r1, [pc, #228]	@ (80041d4 <Apply_Config+0x1e8>)
 80040f0:	4839      	ldr	r0, [pc, #228]	@ (80041d8 <Apply_Config+0x1ec>)
 80040f2:	f00d fef5 	bl	8011ee0 <strcpy>
 80040f6:	e013      	b.n	8004120 <Apply_Config+0x134>
    }
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 80040f8:	4938      	ldr	r1, [pc, #224]	@ (80041dc <Apply_Config+0x1f0>)
 80040fa:	482b      	ldr	r0, [pc, #172]	@ (80041a8 <Apply_Config+0x1bc>)
 80040fc:	f7fc f868 	bl	80001d0 <strcmp>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d147      	bne.n	8004196 <Apply_Config+0x1aa>
	{
		strncpy(config.ota_topic, new_cfg_val, sizeof(config.ota_topic) - 1);
 8004106:	223f      	movs	r2, #63	@ 0x3f
 8004108:	4928      	ldr	r1, [pc, #160]	@ (80041ac <Apply_Config+0x1c0>)
 800410a:	4835      	ldr	r0, [pc, #212]	@ (80041e0 <Apply_Config+0x1f4>)
 800410c:	f00d fe93 	bl	8011e36 <strncpy>
		config.ota_topic[sizeof(config.ota_topic) - 1] = '\0';
 8004110:	4b27      	ldr	r3, [pc, #156]	@ (80041b0 <Apply_Config+0x1c4>)
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
		strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8004118:	4931      	ldr	r1, [pc, #196]	@ (80041e0 <Apply_Config+0x1f4>)
 800411a:	4832      	ldr	r0, [pc, #200]	@ (80041e4 <Apply_Config+0x1f8>)
 800411c:	f00d fee0 	bl	8011ee0 <strcpy>
	else
	{
		return;
	}

	if (f_open(&config_file, APP_CONFIG_FILE, FA_READ) == FR_OK) 
 8004120:	f107 0310 	add.w	r3, r7, #16
 8004124:	3b08      	subs	r3, #8
 8004126:	2201      	movs	r2, #1
 8004128:	492f      	ldr	r1, [pc, #188]	@ (80041e8 <Apply_Config+0x1fc>)
 800412a:	4618      	mov	r0, r3
 800412c:	f002 fd84 	bl	8006c38 <f_open>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d121      	bne.n	800417a <Apply_Config+0x18e>
	{
		if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 8004136:	f107 0310 	add.w	r3, r7, #16
 800413a:	3b0c      	subs	r3, #12
 800413c:	f107 0010 	add.w	r0, r7, #16
 8004140:	3808      	subs	r0, #8
 8004142:	f44f 7292 	mov.w	r2, #292	@ 0x124
 8004146:	491a      	ldr	r1, [pc, #104]	@ (80041b0 <Apply_Config+0x1c4>)
 8004148:	f002 ff0e 	bl	8006f68 <f_read>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10d      	bne.n	800416e <Apply_Config+0x182>
 8004152:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004156:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800415a:	f5b3 7f92 	cmp.w	r3, #292	@ 0x124
 800415e:	d106      	bne.n	800416e <Apply_Config+0x182>
		{
			f_close(&config_file);
 8004160:	f107 0310 	add.w	r3, r7, #16
 8004164:	3b08      	subs	r3, #8
 8004166:	4618      	mov	r0, r3
 8004168:	f003 fa5a 	bl	8007620 <f_close>
			return;
 800416c:	e014      	b.n	8004198 <Apply_Config+0x1ac>
		}
		f_close(&config_file);
 800416e:	f107 0310 	add.w	r3, r7, #16
 8004172:	3b08      	subs	r3, #8
 8004174:	4618      	mov	r0, r3
 8004176:	f003 fa53 	bl	8007620 <f_close>
	}
	memset(cfg_var, 0, sizeof(cfg_var));
 800417a:	2214      	movs	r2, #20
 800417c:	2100      	movs	r1, #0
 800417e:	480a      	ldr	r0, [pc, #40]	@ (80041a8 <Apply_Config+0x1bc>)
 8004180:	f00d fe32 	bl	8011de8 <memset>
	cfg_idx = 0;
 8004184:	4b0d      	ldr	r3, [pc, #52]	@ (80041bc <Apply_Config+0x1d0>)
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 800418a:	220a      	movs	r2, #10
 800418c:	2100      	movs	r1, #0
 800418e:	4807      	ldr	r0, [pc, #28]	@ (80041ac <Apply_Config+0x1c0>)
 8004190:	f00d fe2a 	bl	8011de8 <memset>
 8004194:	e000      	b.n	8004198 <Apply_Config+0x1ac>
		return;
 8004196:	bf00      	nop
}
 8004198:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	08013294 	.word	0x08013294
 80041a8:	200074c8 	.word	0x200074c8
 80041ac:	200074e0 	.word	0x200074e0
 80041b0:	20003994 	.word	0x20003994
 80041b4:	080132a0 	.word	0x080132a0
 80041b8:	080132ac 	.word	0x080132ac
 80041bc:	200074dc 	.word	0x200074dc
 80041c0:	080132b4 	.word	0x080132b4
 80041c4:	080132bc 	.word	0x080132bc
 80041c8:	200039f8 	.word	0x200039f8
 80041cc:	20003860 	.word	0x20003860
 80041d0:	080132c8 	.word	0x080132c8
 80041d4:	20003a38 	.word	0x20003a38
 80041d8:	200038c4 	.word	0x200038c4
 80041dc:	080132d4 	.word	0x080132d4
 80041e0:	20003a78 	.word	0x20003a78
 80041e4:	20003928 	.word	0x20003928
 80041e8:	080132e0 	.word	0x080132e0

080041ec <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08e      	sub	sp, #56	@ 0x38
 80041f0:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 80041f2:	463b      	mov	r3, r7
 80041f4:	2238      	movs	r2, #56	@ 0x38
 80041f6:	2100      	movs	r1, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	f00d fdf5 	bl	8011de8 <memset>

	sCommand.Instruction = 0x66;
 80041fe:	2366      	movs	r3, #102	@ 0x66
 8004200:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8004202:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004206:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004210:	463b      	mov	r3, r7
 8004212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004216:	4619      	mov	r1, r3
 8004218:	480e      	ldr	r0, [pc, #56]	@ (8004254 <psram_reset+0x68>)
 800421a:	f007 f967 	bl	800b4ec <HAL_QSPI_Command>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <psram_reset+0x3e>
	{
		return -1;
 8004224:	f04f 33ff 	mov.w	r3, #4294967295
 8004228:	e00f      	b.n	800424a <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 800422a:	2399      	movs	r3, #153	@ 0x99
 800422c:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800422e:	463b      	mov	r3, r7
 8004230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004234:	4619      	mov	r1, r3
 8004236:	4807      	ldr	r0, [pc, #28]	@ (8004254 <psram_reset+0x68>)
 8004238:	f007 f958 	bl	800b4ec <HAL_QSPI_Command>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <psram_reset+0x5c>
	{
		return -1;
 8004242:	f04f 33ff 	mov.w	r3, #4294967295
 8004246:	e000      	b.n	800424a <psram_reset+0x5e>
	}

	return 0;
 8004248:	2300      	movs	r3, #0

}
 800424a:	4618      	mov	r0, r3
 800424c:	3738      	adds	r7, #56	@ 0x38
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	200001b4 	.word	0x200001b4

08004258 <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b090      	sub	sp, #64	@ 0x40
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 8004262:	f107 0308 	add.w	r3, r7, #8
 8004266:	2238      	movs	r2, #56	@ 0x38
 8004268:	2100      	movs	r1, #0
 800426a:	4618      	mov	r0, r3
 800426c:	f00d fdbc 	bl	8011de8 <memset>

	if(!psramInitDone)return -1;
 8004270:	4b1c      	ldr	r3, [pc, #112]	@ (80042e4 <psram_qpi_mode+0x8c>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <psram_qpi_mode+0x26>
 8004278:	f04f 33ff 	mov.w	r3, #4294967295
 800427c:	e02d      	b.n	80042da <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 800427e:	4b1a      	ldr	r3, [pc, #104]	@ (80042e8 <psram_qpi_mode+0x90>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d108      	bne.n	8004298 <psram_qpi_mode+0x40>
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 800428c:	23f5      	movs	r3, #245	@ 0xf5
 800428e:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8004290:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004294:	623b      	str	r3, [r7, #32]
 8004296:	e00e      	b.n	80042b6 <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8004298:	4b13      	ldr	r3, [pc, #76]	@ (80042e8 <psram_qpi_mode+0x90>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d108      	bne.n	80042b2 <psram_qpi_mode+0x5a>
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d105      	bne.n	80042b2 <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 80042a6:	2335      	movs	r3, #53	@ 0x35
 80042a8:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80042aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042ae:	623b      	str	r3, [r7, #32]
 80042b0:	e001      	b.n	80042b6 <psram_qpi_mode+0x5e>

	}else{

		return 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e011      	b.n	80042da <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80042b6:	f107 0308 	add.w	r3, r7, #8
 80042ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042be:	4619      	mov	r1, r3
 80042c0:	480a      	ldr	r0, [pc, #40]	@ (80042ec <psram_qpi_mode+0x94>)
 80042c2:	f007 f913 	bl	800b4ec <HAL_QSPI_Command>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <psram_qpi_mode+0x7a>
	{
		return -1;
 80042cc:	f04f 33ff 	mov.w	r3, #4294967295
 80042d0:	e003      	b.n	80042da <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 80042d2:	4a05      	ldr	r2, [pc, #20]	@ (80042e8 <psram_qpi_mode+0x90>)
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	7013      	strb	r3, [r2, #0]

	return 0;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3740      	adds	r7, #64	@ 0x40
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	200074ea 	.word	0x200074ea
 80042e8:	200074eb 	.word	0x200074eb
 80042ec:	200001b4 	.word	0x200001b4

080042f0 <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b090      	sub	sp, #64	@ 0x40
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 80042fa:	f107 0308 	add.w	r3, r7, #8
 80042fe:	2238      	movs	r2, #56	@ 0x38
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f00d fd70 	bl	8011de8 <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <psram_read_id+0x24>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b07      	cmp	r3, #7
 8004312:	dc02      	bgt.n	800431a <psram_read_id+0x2a>
 8004314:	f06f 0301 	mvn.w	r3, #1
 8004318:	e034      	b.n	8004384 <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 800431a:	239f      	movs	r3, #159	@ 0x9f
 800431c:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800431e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004322:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8004328:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800432c:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 800432e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004332:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 8004334:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004338:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 800433a:	2308      	movs	r3, #8
 800433c:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800433e:	2300      	movs	r3, #0
 8004340:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004342:	2300      	movs	r3, #0
 8004344:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004346:	2300      	movs	r3, #0
 8004348:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800434a:	2300      	movs	r3, #0
 800434c:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800434e:	f107 0308 	add.w	r3, r7, #8
 8004352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004356:	4619      	mov	r1, r3
 8004358:	480c      	ldr	r0, [pc, #48]	@ (800438c <psram_read_id+0x9c>)
 800435a:	f007 f8c7 	bl	800b4ec <HAL_QSPI_Command>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <psram_read_id+0x7a>
	{
		return -1;
 8004364:	f04f 33ff 	mov.w	r3, #4294967295
 8004368:	e00c      	b.n	8004384 <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800436a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4806      	ldr	r0, [pc, #24]	@ (800438c <psram_read_id+0x9c>)
 8004372:	f007 f9b0 	bl	800b6d6 <HAL_QSPI_Receive>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <psram_read_id+0x92>
	{
		return -1;
 800437c:	f04f 33ff 	mov.w	r3, #4294967295
 8004380:	e000      	b.n	8004384 <psram_read_id+0x94>
	}


	return 0;
 8004382:	2300      	movs	r3, #0

}
 8004384:	4618      	mov	r0, r3
 8004386:	3740      	adds	r7, #64	@ 0x40
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	200001b4 	.word	0x200001b4

08004390 <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b092      	sub	sp, #72	@ 0x48
 8004394:	af00      	add	r7, sp, #0
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	4603      	mov	r3, r0
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	4613      	mov	r3, r2
 80043a0:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 80043a2:	f107 0310 	add.w	r3, r7, #16
 80043a6:	2238      	movs	r2, #56	@ 0x38
 80043a8:	2100      	movs	r1, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	f00d fd1c 	bl	8011de8 <memset>

	sCommand.Address = address;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80043b4:	2300      	movs	r3, #0
 80043b6:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80043bc:	2300      	movs	r3, #0
 80043be:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80043c0:	2300      	movs	r3, #0
 80043c2:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 80043c4:	89bb      	ldrh	r3, [r7, #12]
 80043c6:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 80043c8:	4b33      	ldr	r3, [pc, #204]	@ (8004498 <psram_internal_read_write+0x108>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01a      	beq.n	8004406 <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <psram_internal_read_write+0x4a>
 80043d6:	2338      	movs	r3, #56	@ 0x38
 80043d8:	e000      	b.n	80043dc <psram_internal_read_write+0x4c>
 80043da:	23eb      	movs	r3, #235	@ 0xeb
 80043dc:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80043de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80043e2:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80043e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043e8:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 80043ea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80043ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 80043f0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80043f4:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <psram_internal_read_write+0x70>
 80043fc:	2300      	movs	r3, #0
 80043fe:	e000      	b.n	8004402 <psram_internal_read_write+0x72>
 8004400:	2306      	movs	r3, #6
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
 8004404:	e019      	b.n	800443a <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <psram_internal_read_write+0x80>
 800440c:	2302      	movs	r3, #2
 800440e:	e000      	b.n	8004412 <psram_internal_read_write+0x82>
 8004410:	230b      	movs	r3, #11
 8004412:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8004414:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004418:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 800441a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800441e:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8004420:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004424:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 8004426:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800442a:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <psram_internal_read_write+0xa6>
 8004432:	2300      	movs	r3, #0
 8004434:	e000      	b.n	8004438 <psram_internal_read_write+0xa8>
 8004436:	2308      	movs	r3, #8
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800443a:	f107 0310 	add.w	r3, r7, #16
 800443e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004442:	4619      	mov	r1, r3
 8004444:	4815      	ldr	r0, [pc, #84]	@ (800449c <psram_internal_read_write+0x10c>)
 8004446:	f007 f851 	bl	800b4ec <HAL_QSPI_Command>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <psram_internal_read_write+0xc6>
	{
		return -1;
 8004450:	f04f 33ff 	mov.w	r3, #4294967295
 8004454:	e01b      	b.n	800448e <psram_internal_read_write+0xfe>
	}

	if(write)
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00b      	beq.n	8004474 <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800445c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	480e      	ldr	r0, [pc, #56]	@ (800449c <psram_internal_read_write+0x10c>)
 8004464:	f007 f8a0 	bl	800b5a8 <HAL_QSPI_Transmit>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00e      	beq.n	800448c <psram_internal_read_write+0xfc>
		{
			return -1;
 800446e:	f04f 33ff 	mov.w	r3, #4294967295
 8004472:	e00c      	b.n	800448e <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	4808      	ldr	r0, [pc, #32]	@ (800449c <psram_internal_read_write+0x10c>)
 800447c:	f007 f92b 	bl	800b6d6 <HAL_QSPI_Receive>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <psram_internal_read_write+0xfc>
		{
			return -1;
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	e000      	b.n	800448e <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3748      	adds	r7, #72	@ 0x48
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	200074eb 	.word	0x200074eb
 800449c:	200001b4 	.word	0x200001b4

080044a0 <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	4603      	mov	r3, r0
 80044ae:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	029b      	lsls	r3, r3, #10
 80044bc:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 80044be:	e018      	b.n	80044f2 <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 80044c0:	7bf8      	ldrb	r0, [r7, #15]
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044c8:	69b9      	ldr	r1, [r7, #24]
 80044ca:	f7ff ff61 	bl	8004390 <psram_internal_read_write>
 80044ce:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	da02      	bge.n	80044dc <psram_sector_read_write+0x3c>
 80044d6:	f04f 33ff 	mov.w	r3, #4294967295
 80044da:	e00e      	b.n	80044fa <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044e2:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044ea:	61fb      	str	r3, [r7, #28]
		nsectors--;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e3      	bne.n	80044c0 <psram_sector_read_write+0x20>
	}

	return 0;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <psram_is_initialized>:
{
	return raw_psram_read_write(1, address, nbytes, pBuffer);
}

int psram_is_initialized()
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
	return psramInitDone;
 8004508:	4b03      	ldr	r3, [pc, #12]	@ (8004518 <psram_is_initialized+0x14>)
 800450a:	781b      	ldrb	r3, [r3, #0]
}
 800450c:	4618      	mov	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	200074ea 	.word	0x200074ea

0800451c <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 8004520:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 8004524:	4618      	mov	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
	return psramNumPages;
 8004534:	4b03      	ldr	r3, [pc, #12]	@ (8004544 <psram_get_sector_count+0x14>)
 8004536:	681b      	ldr	r3, [r3, #0]
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	200074f8 	.word	0x200074f8

08004548 <psram_init>:
{
	return psramSize;
}

int psram_init()
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 800454e:	23ff      	movs	r3, #255	@ 0xff
 8004550:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 8004552:	4b20      	ldr	r3, [pc, #128]	@ (80045d4 <psram_init+0x8c>)
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 8004558:	f7ff fe48 	bl	80041ec <psram_reset>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	da02      	bge.n	8004568 <psram_init+0x20>
 8004562:	f04f 33ff 	mov.w	r3, #4294967295
 8004566:	e030      	b.n	80045ca <psram_init+0x82>

	memset(psramId, 0xFF, sizeof(psramId));
 8004568:	2208      	movs	r2, #8
 800456a:	21ff      	movs	r1, #255	@ 0xff
 800456c:	481a      	ldr	r0, [pc, #104]	@ (80045d8 <psram_init+0x90>)
 800456e:	f00d fc3b 	bl	8011de8 <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 8004572:	2108      	movs	r1, #8
 8004574:	4818      	ldr	r0, [pc, #96]	@ (80045d8 <psram_init+0x90>)
 8004576:	f7ff febb 	bl	80042f0 <psram_read_id>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	da02      	bge.n	8004586 <psram_init+0x3e>
 8004580:	f04f 33ff 	mov.w	r3, #4294967295
 8004584:	e021      	b.n	80045ca <psram_init+0x82>

	density = psramId[2] >> 5;
 8004586:	4b14      	ldr	r3, [pc, #80]	@ (80045d8 <psram_init+0x90>)
 8004588:	789b      	ldrb	r3, [r3, #2]
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_64MB)
 800458e:	4b12      	ldr	r3, [pc, #72]	@ (80045d8 <psram_init+0x90>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b0d      	cmp	r3, #13
 8004594:	d117      	bne.n	80045c6 <psram_init+0x7e>
 8004596:	4b10      	ldr	r3, [pc, #64]	@ (80045d8 <psram_init+0x90>)
 8004598:	785b      	ldrb	r3, [r3, #1]
 800459a:	2b5d      	cmp	r3, #93	@ 0x5d
 800459c:	d113      	bne.n	80045c6 <psram_init+0x7e>
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d810      	bhi.n	80045c6 <psram_init+0x7e>
	{
		psramSize = PSRAM_DENSITY_64MB_EADDR;
 80045a4:	4b0d      	ldr	r3, [pc, #52]	@ (80045dc <psram_init+0x94>)
 80045a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80045aa:	601a      	str	r2, [r3, #0]
		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 80045ac:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <psram_init+0x94>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0a9b      	lsrs	r3, r3, #10
 80045b2:	4a0b      	ldr	r2, [pc, #44]	@ (80045e0 <psram_init+0x98>)
 80045b4:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 80045b6:	2001      	movs	r0, #1
 80045b8:	f7ff fe4e 	bl	8004258 <psram_qpi_mode>

		psramInitDone = 1;
 80045bc:	4b05      	ldr	r3, [pc, #20]	@ (80045d4 <psram_init+0x8c>)
 80045be:	2201      	movs	r2, #1
 80045c0:	701a      	strb	r2, [r3, #0]
		return 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	e001      	b.n	80045ca <psram_init+0x82>
	}else{
		return -1;
 80045c6:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200074ea 	.word	0x200074ea
 80045d8:	200074ec 	.word	0x200074ec
 80045dc:	200074f4 	.word	0x200074f4
 80045e0:	200074f8 	.word	0x200074f8

080045e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004628 <HAL_MspInit+0x44>)
 80045ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004628 <HAL_MspInit+0x44>)
 80045f0:	f043 0301 	orr.w	r3, r3, #1
 80045f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80045f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004628 <HAL_MspInit+0x44>)
 80045f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	607b      	str	r3, [r7, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004602:	4b09      	ldr	r3, [pc, #36]	@ (8004628 <HAL_MspInit+0x44>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004606:	4a08      	ldr	r2, [pc, #32]	@ (8004628 <HAL_MspInit+0x44>)
 8004608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800460c:	6593      	str	r3, [r2, #88]	@ 0x58
 800460e:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <HAL_MspInit+0x44>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000

0800462c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b0ac      	sub	sp, #176	@ 0xb0
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004634:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	2288      	movs	r2, #136	@ 0x88
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f00d fbcb 	bl	8011de8 <memset>
  if(hadc->Instance==ADC1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a3d      	ldr	r2, [pc, #244]	@ (800474c <HAL_ADC_MspInit+0x120>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d172      	bne.n	8004742 <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800465c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004660:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004662:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004666:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800466a:	2303      	movs	r3, #3
 800466c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800466e:	2301      	movs	r3, #1
 8004670:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004672:	2308      	movs	r3, #8
 8004674:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004676:	2307      	movs	r3, #7
 8004678:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800467a:	2302      	movs	r3, #2
 800467c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800467e:	2302      	movs	r3, #2
 8004680:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004682:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004686:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004688:	f107 0314 	add.w	r3, r7, #20
 800468c:	4618      	mov	r0, r3
 800468e:	f008 f919 	bl	800c8c4 <HAL_RCCEx_PeriphCLKConfig>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8004698:	f7ff faa0 	bl	8003bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800469c:	4b2c      	ldr	r3, [pc, #176]	@ (8004750 <HAL_ADC_MspInit+0x124>)
 800469e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004750 <HAL_ADC_MspInit+0x124>)
 80046a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80046a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046a8:	4b29      	ldr	r3, [pc, #164]	@ (8004750 <HAL_ADC_MspInit+0x124>)
 80046aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b4:	4b26      	ldr	r3, [pc, #152]	@ (8004750 <HAL_ADC_MspInit+0x124>)
 80046b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b8:	4a25      	ldr	r2, [pc, #148]	@ (8004750 <HAL_ADC_MspInit+0x124>)
 80046ba:	f043 0301 	orr.w	r3, r3, #1
 80046be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046c0:	4b23      	ldr	r3, [pc, #140]	@ (8004750 <HAL_ADC_MspInit+0x124>)
 80046c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80046cc:	2310      	movs	r3, #16
 80046ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80046d2:	230b      	movs	r3, #11
 80046d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046de:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80046e2:	4619      	mov	r1, r3
 80046e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046e8:	f005 fe7c 	bl	800a3e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80046ec:	4b19      	ldr	r3, [pc, #100]	@ (8004754 <HAL_ADC_MspInit+0x128>)
 80046ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004758 <HAL_ADC_MspInit+0x12c>)
 80046f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80046f2:	4b18      	ldr	r3, [pc, #96]	@ (8004754 <HAL_ADC_MspInit+0x128>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046f8:	4b16      	ldr	r3, [pc, #88]	@ (8004754 <HAL_ADC_MspInit+0x128>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80046fe:	4b15      	ldr	r3, [pc, #84]	@ (8004754 <HAL_ADC_MspInit+0x128>)
 8004700:	2200      	movs	r2, #0
 8004702:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004704:	4b13      	ldr	r3, [pc, #76]	@ (8004754 <HAL_ADC_MspInit+0x128>)
 8004706:	2280      	movs	r2, #128	@ 0x80
 8004708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800470a:	4b12      	ldr	r3, [pc, #72]	@ (8004754 <HAL_ADC_MspInit+0x128>)
 800470c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004712:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <HAL_ADC_MspInit+0x128>)
 8004714:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800471a:	4b0e      	ldr	r3, [pc, #56]	@ (8004754 <HAL_ADC_MspInit+0x128>)
 800471c:	2220      	movs	r2, #32
 800471e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004720:	4b0c      	ldr	r3, [pc, #48]	@ (8004754 <HAL_ADC_MspInit+0x128>)
 8004722:	2200      	movs	r2, #0
 8004724:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004726:	480b      	ldr	r0, [pc, #44]	@ (8004754 <HAL_ADC_MspInit+0x128>)
 8004728:	f005 fc26 	bl	8009f78 <HAL_DMA_Init>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8004732:	f7ff fa53 	bl	8003bdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a06      	ldr	r2, [pc, #24]	@ (8004754 <HAL_ADC_MspInit+0x128>)
 800473a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800473c:	4a05      	ldr	r2, [pc, #20]	@ (8004754 <HAL_ADC_MspInit+0x128>)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004742:	bf00      	nop
 8004744:	37b0      	adds	r7, #176	@ 0xb0
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	50040000 	.word	0x50040000
 8004750:	40021000 	.word	0x40021000
 8004754:	200000f4 	.word	0x200000f4
 8004758:	40020008 	.word	0x40020008

0800475c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a0a      	ldr	r2, [pc, #40]	@ (8004794 <HAL_CRC_MspInit+0x38>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d10b      	bne.n	8004786 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800476e:	4b0a      	ldr	r3, [pc, #40]	@ (8004798 <HAL_CRC_MspInit+0x3c>)
 8004770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004772:	4a09      	ldr	r2, [pc, #36]	@ (8004798 <HAL_CRC_MspInit+0x3c>)
 8004774:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004778:	6493      	str	r3, [r2, #72]	@ 0x48
 800477a:	4b07      	ldr	r3, [pc, #28]	@ (8004798 <HAL_CRC_MspInit+0x3c>)
 800477c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800477e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40023000 	.word	0x40023000
 8004798:	40021000 	.word	0x40021000

0800479c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b0ac      	sub	sp, #176	@ 0xb0
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	605a      	str	r2, [r3, #4]
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	60da      	str	r2, [r3, #12]
 80047b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047b4:	f107 0314 	add.w	r3, r7, #20
 80047b8:	2288      	movs	r2, #136	@ 0x88
 80047ba:	2100      	movs	r1, #0
 80047bc:	4618      	mov	r0, r3
 80047be:	f00d fb13 	bl	8011de8 <memset>
  if(hi2c->Instance==I2C3)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a21      	ldr	r2, [pc, #132]	@ (800484c <HAL_I2C_MspInit+0xb0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d13b      	bne.n	8004844 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80047cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80047d2:	2300      	movs	r3, #0
 80047d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047d6:	f107 0314 	add.w	r3, r7, #20
 80047da:	4618      	mov	r0, r3
 80047dc:	f008 f872 	bl	800c8c4 <HAL_RCCEx_PeriphCLKConfig>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80047e6:	f7ff f9f9 	bl	8003bdc <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047ea:	4b19      	ldr	r3, [pc, #100]	@ (8004850 <HAL_I2C_MspInit+0xb4>)
 80047ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ee:	4a18      	ldr	r2, [pc, #96]	@ (8004850 <HAL_I2C_MspInit+0xb4>)
 80047f0:	f043 0304 	orr.w	r3, r3, #4
 80047f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047f6:	4b16      	ldr	r3, [pc, #88]	@ (8004850 <HAL_I2C_MspInit+0xb4>)
 80047f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004802:	2303      	movs	r3, #3
 8004804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004808:	2312      	movs	r3, #18
 800480a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480e:	2300      	movs	r3, #0
 8004810:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004814:	2303      	movs	r3, #3
 8004816:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800481a:	2304      	movs	r3, #4
 800481c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004820:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004824:	4619      	mov	r1, r3
 8004826:	480b      	ldr	r0, [pc, #44]	@ (8004854 <HAL_I2C_MspInit+0xb8>)
 8004828:	f005 fddc 	bl	800a3e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800482c:	4b08      	ldr	r3, [pc, #32]	@ (8004850 <HAL_I2C_MspInit+0xb4>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004830:	4a07      	ldr	r2, [pc, #28]	@ (8004850 <HAL_I2C_MspInit+0xb4>)
 8004832:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004836:	6593      	str	r3, [r2, #88]	@ 0x58
 8004838:	4b05      	ldr	r3, [pc, #20]	@ (8004850 <HAL_I2C_MspInit+0xb4>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8004844:	bf00      	nop
 8004846:	37b0      	adds	r7, #176	@ 0xb0
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40005c00 	.word	0x40005c00
 8004850:	40021000 	.word	0x40021000
 8004854:	48000800 	.word	0x48000800

08004858 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	@ 0x28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004860:	f107 0314 	add.w	r3, r7, #20
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	605a      	str	r2, [r3, #4]
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	60da      	str	r2, [r3, #12]
 800486e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a26      	ldr	r2, [pc, #152]	@ (8004910 <HAL_QSPI_MspInit+0xb8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d145      	bne.n	8004906 <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800487a:	4b26      	ldr	r3, [pc, #152]	@ (8004914 <HAL_QSPI_MspInit+0xbc>)
 800487c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800487e:	4a25      	ldr	r2, [pc, #148]	@ (8004914 <HAL_QSPI_MspInit+0xbc>)
 8004880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004884:	6513      	str	r3, [r2, #80]	@ 0x50
 8004886:	4b23      	ldr	r3, [pc, #140]	@ (8004914 <HAL_QSPI_MspInit+0xbc>)
 8004888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800488a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004892:	4b20      	ldr	r3, [pc, #128]	@ (8004914 <HAL_QSPI_MspInit+0xbc>)
 8004894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004896:	4a1f      	ldr	r2, [pc, #124]	@ (8004914 <HAL_QSPI_MspInit+0xbc>)
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800489e:	4b1d      	ldr	r3, [pc, #116]	@ (8004914 <HAL_QSPI_MspInit+0xbc>)
 80048a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004914 <HAL_QSPI_MspInit+0xbc>)
 80048ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ae:	4a19      	ldr	r2, [pc, #100]	@ (8004914 <HAL_QSPI_MspInit+0xbc>)
 80048b0:	f043 0302 	orr.w	r3, r3, #2
 80048b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048b6:	4b17      	ldr	r3, [pc, #92]	@ (8004914 <HAL_QSPI_MspInit+0xbc>)
 80048b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048c2:	23c0      	movs	r3, #192	@ 0xc0
 80048c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c6:	2302      	movs	r3, #2
 80048c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ce:	2303      	movs	r3, #3
 80048d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80048d2:	230a      	movs	r3, #10
 80048d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d6:	f107 0314 	add.w	r3, r7, #20
 80048da:	4619      	mov	r1, r3
 80048dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048e0:	f005 fd80 	bl	800a3e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80048e4:	f640 4303 	movw	r3, #3075	@ 0xc03
 80048e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ea:	2302      	movs	r3, #2
 80048ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f2:	2303      	movs	r3, #3
 80048f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80048f6:	230a      	movs	r3, #10
 80048f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048fa:	f107 0314 	add.w	r3, r7, #20
 80048fe:	4619      	mov	r1, r3
 8004900:	4805      	ldr	r0, [pc, #20]	@ (8004918 <HAL_QSPI_MspInit+0xc0>)
 8004902:	f005 fd6f 	bl	800a3e4 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8004906:	bf00      	nop
 8004908:	3728      	adds	r7, #40	@ 0x28
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	a0001000 	.word	0xa0001000
 8004914:	40021000 	.word	0x40021000
 8004918:	48000400 	.word	0x48000400

0800491c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b0a4      	sub	sp, #144	@ 0x90
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004924:	f107 0308 	add.w	r3, r7, #8
 8004928:	2288      	movs	r2, #136	@ 0x88
 800492a:	2100      	movs	r1, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f00d fa5b 	bl	8011de8 <memset>
  if(hrtc->Instance==RTC)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a14      	ldr	r2, [pc, #80]	@ (8004988 <HAL_RTC_MspInit+0x6c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d120      	bne.n	800497e <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800493c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004940:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004942:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004946:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800494a:	f107 0308 	add.w	r3, r7, #8
 800494e:	4618      	mov	r0, r3
 8004950:	f007 ffb8 	bl	800c8c4 <HAL_RCCEx_PeriphCLKConfig>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800495a:	f7ff f93f 	bl	8003bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800495e:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <HAL_RTC_MspInit+0x70>)
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004964:	4a09      	ldr	r2, [pc, #36]	@ (800498c <HAL_RTC_MspInit+0x70>)
 8004966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800496a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800496e:	2200      	movs	r2, #0
 8004970:	2100      	movs	r1, #0
 8004972:	2029      	movs	r0, #41	@ 0x29
 8004974:	f005 f9d3 	bl	8009d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004978:	2029      	movs	r0, #41	@ 0x29
 800497a:	f005 f9ec 	bl	8009d56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800497e:	bf00      	nop
 8004980:	3790      	adds	r7, #144	@ 0x90
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40002800 	.word	0x40002800
 800498c:	40021000 	.word	0x40021000

08004990 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08c      	sub	sp, #48	@ 0x30
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004998:	f107 031c 	add.w	r3, r7, #28
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	605a      	str	r2, [r3, #4]
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	60da      	str	r2, [r3, #12]
 80049a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a2f      	ldr	r2, [pc, #188]	@ (8004a6c <HAL_SPI_MspInit+0xdc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d129      	bne.n	8004a06 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80049b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004a70 <HAL_SPI_MspInit+0xe0>)
 80049b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b6:	4a2e      	ldr	r2, [pc, #184]	@ (8004a70 <HAL_SPI_MspInit+0xe0>)
 80049b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80049be:	4b2c      	ldr	r3, [pc, #176]	@ (8004a70 <HAL_SPI_MspInit+0xe0>)
 80049c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049c6:	61bb      	str	r3, [r7, #24]
 80049c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ca:	4b29      	ldr	r3, [pc, #164]	@ (8004a70 <HAL_SPI_MspInit+0xe0>)
 80049cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ce:	4a28      	ldr	r2, [pc, #160]	@ (8004a70 <HAL_SPI_MspInit+0xe0>)
 80049d0:	f043 0302 	orr.w	r3, r3, #2
 80049d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049d6:	4b26      	ldr	r3, [pc, #152]	@ (8004a70 <HAL_SPI_MspInit+0xe0>)
 80049d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80049e2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80049e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e8:	2302      	movs	r3, #2
 80049ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049f0:	2303      	movs	r3, #3
 80049f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049f4:	2305      	movs	r3, #5
 80049f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049f8:	f107 031c 	add.w	r3, r7, #28
 80049fc:	4619      	mov	r1, r3
 80049fe:	481d      	ldr	r0, [pc, #116]	@ (8004a74 <HAL_SPI_MspInit+0xe4>)
 8004a00:	f005 fcf0 	bl	800a3e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004a04:	e02d      	b.n	8004a62 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a78 <HAL_SPI_MspInit+0xe8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d128      	bne.n	8004a62 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004a10:	4b17      	ldr	r3, [pc, #92]	@ (8004a70 <HAL_SPI_MspInit+0xe0>)
 8004a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a14:	4a16      	ldr	r2, [pc, #88]	@ (8004a70 <HAL_SPI_MspInit+0xe0>)
 8004a16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a1c:	4b14      	ldr	r3, [pc, #80]	@ (8004a70 <HAL_SPI_MspInit+0xe0>)
 8004a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a28:	4b11      	ldr	r3, [pc, #68]	@ (8004a70 <HAL_SPI_MspInit+0xe0>)
 8004a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a2c:	4a10      	ldr	r2, [pc, #64]	@ (8004a70 <HAL_SPI_MspInit+0xe0>)
 8004a2e:	f043 0304 	orr.w	r3, r3, #4
 8004a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a34:	4b0e      	ldr	r3, [pc, #56]	@ (8004a70 <HAL_SPI_MspInit+0xe0>)
 8004a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004a40:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a46:	2302      	movs	r3, #2
 8004a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004a52:	2306      	movs	r3, #6
 8004a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a56:	f107 031c 	add.w	r3, r7, #28
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4807      	ldr	r0, [pc, #28]	@ (8004a7c <HAL_SPI_MspInit+0xec>)
 8004a5e:	f005 fcc1 	bl	800a3e4 <HAL_GPIO_Init>
}
 8004a62:	bf00      	nop
 8004a64:	3730      	adds	r7, #48	@ 0x30
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40003800 	.word	0x40003800
 8004a70:	40021000 	.word	0x40021000
 8004a74:	48000400 	.word	0x48000400
 8004a78:	40003c00 	.word	0x40003c00
 8004a7c:	48000800 	.word	0x48000800

08004a80 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab8 <HAL_TIM_OC_MspInit+0x38>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d10b      	bne.n	8004aaa <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a92:	4b0a      	ldr	r3, [pc, #40]	@ (8004abc <HAL_TIM_OC_MspInit+0x3c>)
 8004a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a96:	4a09      	ldr	r2, [pc, #36]	@ (8004abc <HAL_TIM_OC_MspInit+0x3c>)
 8004a98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004a9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a9e:	4b07      	ldr	r3, [pc, #28]	@ (8004abc <HAL_TIM_OC_MspInit+0x3c>)
 8004aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40012c00 	.word	0x40012c00
 8004abc:	40021000 	.word	0x40021000

08004ac0 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	@ 0x28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac8:	f107 0314 	add.w	r3, r7, #20
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	60da      	str	r2, [r3, #12]
 8004ad6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae0:	d128      	bne.n	8004b34 <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ae2:	4b16      	ldr	r3, [pc, #88]	@ (8004b3c <HAL_TIM_IC_MspInit+0x7c>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae6:	4a15      	ldr	r2, [pc, #84]	@ (8004b3c <HAL_TIM_IC_MspInit+0x7c>)
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aee:	4b13      	ldr	r3, [pc, #76]	@ (8004b3c <HAL_TIM_IC_MspInit+0x7c>)
 8004af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004afa:	4b10      	ldr	r3, [pc, #64]	@ (8004b3c <HAL_TIM_IC_MspInit+0x7c>)
 8004afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afe:	4a0f      	ldr	r2, [pc, #60]	@ (8004b3c <HAL_TIM_IC_MspInit+0x7c>)
 8004b00:	f043 0301 	orr.w	r3, r3, #1
 8004b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b06:	4b0d      	ldr	r3, [pc, #52]	@ (8004b3c <HAL_TIM_IC_MspInit+0x7c>)
 8004b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004b12:	2320      	movs	r3, #32
 8004b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b16:	2302      	movs	r3, #2
 8004b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b22:	2301      	movs	r3, #1
 8004b24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b26:	f107 0314 	add.w	r3, r7, #20
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b30:	f005 fc58 	bl	800a3e4 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004b34:	bf00      	nop
 8004b36:	3728      	adds	r7, #40	@ 0x28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40021000 	.word	0x40021000

08004b40 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a13      	ldr	r2, [pc, #76]	@ (8004b9c <HAL_TIM_Base_MspInit+0x5c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d10c      	bne.n	8004b6c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b52:	4b13      	ldr	r3, [pc, #76]	@ (8004ba0 <HAL_TIM_Base_MspInit+0x60>)
 8004b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b56:	4a12      	ldr	r2, [pc, #72]	@ (8004ba0 <HAL_TIM_Base_MspInit+0x60>)
 8004b58:	f043 0302 	orr.w	r3, r3, #2
 8004b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ba0 <HAL_TIM_Base_MspInit+0x60>)
 8004b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004b6a:	e010      	b.n	8004b8e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a0c      	ldr	r2, [pc, #48]	@ (8004ba4 <HAL_TIM_Base_MspInit+0x64>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d10b      	bne.n	8004b8e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b76:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba0 <HAL_TIM_Base_MspInit+0x60>)
 8004b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b7a:	4a09      	ldr	r2, [pc, #36]	@ (8004ba0 <HAL_TIM_Base_MspInit+0x60>)
 8004b7c:	f043 0304 	orr.w	r3, r3, #4
 8004b80:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b82:	4b07      	ldr	r3, [pc, #28]	@ (8004ba0 <HAL_TIM_Base_MspInit+0x60>)
 8004b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
}
 8004b8e:	bf00      	nop
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	40000800 	.word	0x40000800

08004ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	@ 0x28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb0:	f107 0314 	add.w	r3, r7, #20
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	60da      	str	r2, [r3, #12]
 8004bbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a23      	ldr	r2, [pc, #140]	@ (8004c54 <HAL_TIM_MspPostInit+0xac>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d11e      	bne.n	8004c08 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bca:	4b23      	ldr	r3, [pc, #140]	@ (8004c58 <HAL_TIM_MspPostInit+0xb0>)
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bce:	4a22      	ldr	r2, [pc, #136]	@ (8004c58 <HAL_TIM_MspPostInit+0xb0>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bd6:	4b20      	ldr	r3, [pc, #128]	@ (8004c58 <HAL_TIM_MspPostInit+0xb0>)
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004be2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8004be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be8:	2302      	movs	r3, #2
 8004bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf8:	f107 0314 	add.w	r3, r7, #20
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c02:	f005 fbef 	bl	800a3e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004c06:	e021      	b.n	8004c4c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a13      	ldr	r2, [pc, #76]	@ (8004c5c <HAL_TIM_MspPostInit+0xb4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d11c      	bne.n	8004c4c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c12:	4b11      	ldr	r3, [pc, #68]	@ (8004c58 <HAL_TIM_MspPostInit+0xb0>)
 8004c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c16:	4a10      	ldr	r2, [pc, #64]	@ (8004c58 <HAL_TIM_MspPostInit+0xb0>)
 8004c18:	f043 0304 	orr.w	r3, r3, #4
 8004c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c58 <HAL_TIM_MspPostInit+0xb0>)
 8004c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004c2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c30:	2302      	movs	r3, #2
 8004c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c40:	f107 0314 	add.w	r3, r7, #20
 8004c44:	4619      	mov	r1, r3
 8004c46:	4806      	ldr	r0, [pc, #24]	@ (8004c60 <HAL_TIM_MspPostInit+0xb8>)
 8004c48:	f005 fbcc 	bl	800a3e4 <HAL_GPIO_Init>
}
 8004c4c:	bf00      	nop
 8004c4e:	3728      	adds	r7, #40	@ 0x28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	40000400 	.word	0x40000400
 8004c60:	48000800 	.word	0x48000800

08004c64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b0ae      	sub	sp, #184	@ 0xb8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	609a      	str	r2, [r3, #8]
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c7c:	f107 031c 	add.w	r3, r7, #28
 8004c80:	2288      	movs	r2, #136	@ 0x88
 8004c82:	2100      	movs	r1, #0
 8004c84:	4618      	mov	r0, r3
 8004c86:	f00d f8af 	bl	8011de8 <memset>
  if(huart->Instance==UART4)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a56      	ldr	r2, [pc, #344]	@ (8004de8 <HAL_UART_MspInit+0x184>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d13c      	bne.n	8004d0e <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004c94:	2308      	movs	r3, #8
 8004c96:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c9c:	f107 031c 	add.w	r3, r7, #28
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f007 fe0f 	bl	800c8c4 <HAL_RCCEx_PeriphCLKConfig>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004cac:	f7fe ff96 	bl	8003bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004cb0:	4b4e      	ldr	r3, [pc, #312]	@ (8004dec <HAL_UART_MspInit+0x188>)
 8004cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb4:	4a4d      	ldr	r2, [pc, #308]	@ (8004dec <HAL_UART_MspInit+0x188>)
 8004cb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cbc:	4b4b      	ldr	r3, [pc, #300]	@ (8004dec <HAL_UART_MspInit+0x188>)
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc8:	4b48      	ldr	r3, [pc, #288]	@ (8004dec <HAL_UART_MspInit+0x188>)
 8004cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ccc:	4a47      	ldr	r2, [pc, #284]	@ (8004dec <HAL_UART_MspInit+0x188>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cd4:	4b45      	ldr	r3, [pc, #276]	@ (8004dec <HAL_UART_MspInit+0x188>)
 8004cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ce6:	2312      	movs	r3, #18
 8004ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cfe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004d02:	4619      	mov	r1, r3
 8004d04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d08:	f005 fb6c 	bl	800a3e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8004d0c:	e068      	b.n	8004de0 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART1)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a37      	ldr	r2, [pc, #220]	@ (8004df0 <HAL_UART_MspInit+0x18c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d163      	bne.n	8004de0 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d20:	f107 031c 	add.w	r3, r7, #28
 8004d24:	4618      	mov	r0, r3
 8004d26:	f007 fdcd 	bl	800c8c4 <HAL_RCCEx_PeriphCLKConfig>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8004d30:	f7fe ff54 	bl	8003bdc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d34:	4b2d      	ldr	r3, [pc, #180]	@ (8004dec <HAL_UART_MspInit+0x188>)
 8004d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d38:	4a2c      	ldr	r2, [pc, #176]	@ (8004dec <HAL_UART_MspInit+0x188>)
 8004d3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004d40:	4b2a      	ldr	r3, [pc, #168]	@ (8004dec <HAL_UART_MspInit+0x188>)
 8004d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d4c:	4b27      	ldr	r3, [pc, #156]	@ (8004dec <HAL_UART_MspInit+0x188>)
 8004d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d50:	4a26      	ldr	r2, [pc, #152]	@ (8004dec <HAL_UART_MspInit+0x188>)
 8004d52:	f043 0302 	orr.w	r3, r3, #2
 8004d56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d58:	4b24      	ldr	r3, [pc, #144]	@ (8004dec <HAL_UART_MspInit+0x188>)
 8004d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8004d64:	23d8      	movs	r3, #216	@ 0xd8
 8004d66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d76:	2303      	movs	r3, #3
 8004d78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d7c:	2307      	movs	r3, #7
 8004d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d82:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004d86:	4619      	mov	r1, r3
 8004d88:	481a      	ldr	r0, [pc, #104]	@ (8004df4 <HAL_UART_MspInit+0x190>)
 8004d8a:	f005 fb2b 	bl	800a3e4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8004d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8004df8 <HAL_UART_MspInit+0x194>)
 8004d90:	4a1a      	ldr	r2, [pc, #104]	@ (8004dfc <HAL_UART_MspInit+0x198>)
 8004d92:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8004d94:	4b18      	ldr	r3, [pc, #96]	@ (8004df8 <HAL_UART_MspInit+0x194>)
 8004d96:	2202      	movs	r2, #2
 8004d98:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d9a:	4b17      	ldr	r3, [pc, #92]	@ (8004df8 <HAL_UART_MspInit+0x194>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004da0:	4b15      	ldr	r3, [pc, #84]	@ (8004df8 <HAL_UART_MspInit+0x194>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004da6:	4b14      	ldr	r3, [pc, #80]	@ (8004df8 <HAL_UART_MspInit+0x194>)
 8004da8:	2280      	movs	r2, #128	@ 0x80
 8004daa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dac:	4b12      	ldr	r3, [pc, #72]	@ (8004df8 <HAL_UART_MspInit+0x194>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004db2:	4b11      	ldr	r3, [pc, #68]	@ (8004df8 <HAL_UART_MspInit+0x194>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004db8:	4b0f      	ldr	r3, [pc, #60]	@ (8004df8 <HAL_UART_MspInit+0x194>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004df8 <HAL_UART_MspInit+0x194>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004dc4:	480c      	ldr	r0, [pc, #48]	@ (8004df8 <HAL_UART_MspInit+0x194>)
 8004dc6:	f005 f8d7 	bl	8009f78 <HAL_DMA_Init>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8004dd0:	f7fe ff04 	bl	8003bdc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a08      	ldr	r2, [pc, #32]	@ (8004df8 <HAL_UART_MspInit+0x194>)
 8004dd8:	675a      	str	r2, [r3, #116]	@ 0x74
 8004dda:	4a07      	ldr	r2, [pc, #28]	@ (8004df8 <HAL_UART_MspInit+0x194>)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8004de0:	bf00      	nop
 8004de2:	37b8      	adds	r7, #184	@ 0xb8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40004c00 	.word	0x40004c00
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40013800 	.word	0x40013800
 8004df4:	48000400 	.word	0x48000400
 8004df8:	20000524 	.word	0x20000524
 8004dfc:	40020058 	.word	0x40020058

08004e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004e04:	bf00      	nop
 8004e06:	e7fd      	b.n	8004e04 <NMI_Handler+0x4>

08004e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e0c:	bf00      	nop
 8004e0e:	e7fd      	b.n	8004e0c <HardFault_Handler+0x4>

08004e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e14:	bf00      	nop
 8004e16:	e7fd      	b.n	8004e14 <MemManage_Handler+0x4>

08004e18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e1c:	bf00      	nop
 8004e1e:	e7fd      	b.n	8004e1c <BusFault_Handler+0x4>

08004e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e24:	bf00      	nop
 8004e26:	e7fd      	b.n	8004e24 <UsageFault_Handler+0x4>

08004e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e2c:	bf00      	nop
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e36:	b480      	push	{r7}
 8004e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e3a:	bf00      	nop
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e48:	bf00      	nop
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e56:	f003 fa93 	bl	8008380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e5a:	bf00      	nop
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e64:	4802      	ldr	r0, [pc, #8]	@ (8004e70 <DMA1_Channel1_IRQHandler+0x10>)
 8004e66:	f005 f9dd 	bl	800a224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	200000f4 	.word	0x200000f4

08004e74 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004e78:	4802      	ldr	r0, [pc, #8]	@ (8004e84 <DMA1_Channel5_IRQHandler+0x10>)
 8004e7a:	f005 f9d3 	bl	800a224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004e7e:	bf00      	nop
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20000524 	.word	0x20000524

08004e88 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004e8c:	4802      	ldr	r0, [pc, #8]	@ (8004e98 <RTC_Alarm_IRQHandler+0x10>)
 8004e8e:	f008 fd19 	bl	800d8c4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004e92:	bf00      	nop
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	200001f8 	.word	0x200001f8

08004e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ea4:	4a14      	ldr	r2, [pc, #80]	@ (8004ef8 <_sbrk+0x5c>)
 8004ea6:	4b15      	ldr	r3, [pc, #84]	@ (8004efc <_sbrk+0x60>)
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004eb0:	4b13      	ldr	r3, [pc, #76]	@ (8004f00 <_sbrk+0x64>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d102      	bne.n	8004ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004eb8:	4b11      	ldr	r3, [pc, #68]	@ (8004f00 <_sbrk+0x64>)
 8004eba:	4a12      	ldr	r2, [pc, #72]	@ (8004f04 <_sbrk+0x68>)
 8004ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ebe:	4b10      	ldr	r3, [pc, #64]	@ (8004f00 <_sbrk+0x64>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d207      	bcs.n	8004edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ecc:	f00c ffdc 	bl	8011e88 <__errno>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	220c      	movs	r2, #12
 8004ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eda:	e009      	b.n	8004ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004edc:	4b08      	ldr	r3, [pc, #32]	@ (8004f00 <_sbrk+0x64>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ee2:	4b07      	ldr	r3, [pc, #28]	@ (8004f00 <_sbrk+0x64>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4413      	add	r3, r2
 8004eea:	4a05      	ldr	r2, [pc, #20]	@ (8004f00 <_sbrk+0x64>)
 8004eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004eee:	68fb      	ldr	r3, [r7, #12]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20018000 	.word	0x20018000
 8004efc:	00000400 	.word	0x00000400
 8004f00:	200074fc 	.word	0x200074fc
 8004f04:	20007658 	.word	0x20007658

08004f08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004f0c:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <SystemInit+0x20>)
 8004f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f12:	4a05      	ldr	r2, [pc, #20]	@ (8004f28 <SystemInit+0x20>)
 8004f14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004f1c:	bf00      	nop
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	e000ed00 	.word	0xe000ed00

08004f2c <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <disk_status+0x16>
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d00c      	beq.n	8004f5a <disk_status+0x2e>
 8004f40:	e017      	b.n	8004f72 <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 8004f42:	f7ff fadf 	bl	8004504 <psram_is_initialized>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <disk_status+0x26>
		{
			stat = STA_NOINIT;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
 8004f50:	e001      	b.n	8004f56 <disk_status+0x2a>
		}else{
			stat = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	e00c      	b.n	8004f74 <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8004f5a:	f7fc ff3d 	bl	8001dd8 <extflash_is_initialized>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 8004f64:	2301      	movs	r3, #1
 8004f66:	73fb      	strb	r3, [r7, #15]
 8004f68:	e001      	b.n	8004f6e <disk_status+0x42>
		}else{
			stat = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	e000      	b.n	8004f74 <disk_status+0x48>

	}
	return STA_NOINIT;
 8004f72:	2301      	movs	r3, #1
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 8004f86:	79fb      	ldrb	r3, [r7, #7]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <disk_initialize+0x16>
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d00c      	beq.n	8004faa <disk_initialize+0x2e>
 8004f90:	e017      	b.n	8004fc2 <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 8004f92:	f7ff fad9 	bl	8004548 <psram_init>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	da02      	bge.n	8004fa2 <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	e001      	b.n	8004fa6 <disk_initialize+0x2a>
		}else{
			stat = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	e00c      	b.n	8004fc4 <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 8004faa:	f7fc ff21 	bl	8001df0 <extflash_init>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	da02      	bge.n	8004fba <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	73fb      	strb	r3, [r7, #15]
 8004fb8:	e001      	b.n	8004fbe <disk_initialize+0x42>
		}else{
			stat = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	e000      	b.n	8004fc4 <disk_initialize+0x48>

	}
	return STA_NOINIT;
 8004fc2:	2301      	movs	r3, #1
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <disk_read+0x1c>
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d010      	beq.n	8005008 <disk_read+0x3c>
 8004fe6:	e01e      	b.n	8005026 <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	2000      	movs	r0, #0
 8004ff0:	f7ff fa56 	bl	80044a0 <psram_sector_read_write>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	da02      	bge.n	8005000 <disk_read+0x34>
		{
			res = RES_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
 8004ffe:	e001      	b.n	8005004 <disk_read+0x38>
		}else{

			res = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8005004:	7dfb      	ldrb	r3, [r7, #23]
 8005006:	e00f      	b.n	8005028 <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	6839      	ldr	r1, [r7, #0]
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7fc fdc7 	bl	8001ba0 <extflash_sector_read>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	da02      	bge.n	800501e <disk_read+0x52>
		{
			res = RES_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	75fb      	strb	r3, [r7, #23]
 800501c:	e001      	b.n	8005022 <disk_read+0x56>
		}else{

			res = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8005022:	7dfb      	ldrb	r3, [r7, #23]
 8005024:	e000      	b.n	8005028 <disk_read+0x5c>

	}

	return RES_PARERR;
 8005026:	2304      	movs	r3, #4
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	607a      	str	r2, [r7, #4]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	4603      	mov	r3, r0
 800503e:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <disk_write+0x20>
 800504a:	2b01      	cmp	r3, #1
 800504c:	d010      	beq.n	8005070 <disk_write+0x40>
 800504e:	e01e      	b.n	800508e <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	2001      	movs	r0, #1
 8005058:	f7ff fa22 	bl	80044a0 <psram_sector_read_write>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	da02      	bge.n	8005068 <disk_write+0x38>
		{
			res = RES_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	75fb      	strb	r3, [r7, #23]
 8005066:	e001      	b.n	800506c <disk_write+0x3c>
		}else{

			res = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 800506c:	7dfb      	ldrb	r3, [r7, #23]
 800506e:	e00f      	b.n	8005090 <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	6839      	ldr	r1, [r7, #0]
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7fc fe28 	bl	8001cca <extflash_sector_write>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	da02      	bge.n	8005086 <disk_write+0x56>
		{
			res = RES_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	75fb      	strb	r3, [r7, #23]
 8005084:	e001      	b.n	800508a <disk_write+0x5a>
		}else{

			res = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 800508a:	7dfb      	ldrb	r3, [r7, #23]
 800508c:	e000      	b.n	8005090 <disk_write+0x60>

	}

	return RES_PARERR;
 800508e:	2304      	movs	r3, #4
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	603a      	str	r2, [r7, #0]
 80050a2:	71fb      	strb	r3, [r7, #7]
 80050a4:	460b      	mov	r3, r1
 80050a6:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 80050a8:	2304      	movs	r3, #4
 80050aa:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 80050ac:	79fb      	ldrb	r3, [r7, #7]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <disk_ioctl+0x20>
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d036      	beq.n	8005124 <disk_ioctl+0x8c>
 80050b6:	e06b      	b.n	8005190 <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 80050b8:	f7ff fa24 	bl	8004504 <psram_is_initialized>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <disk_ioctl+0x2e>
 80050c2:	2303      	movs	r3, #3
 80050c4:	e065      	b.n	8005192 <disk_ioctl+0xfa>

		switch(cmd)
 80050c6:	79bb      	ldrb	r3, [r7, #6]
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d826      	bhi.n	800511a <disk_ioctl+0x82>
 80050cc:	a201      	add	r2, pc, #4	@ (adr r2, 80050d4 <disk_ioctl+0x3c>)
 80050ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d2:	bf00      	nop
 80050d4:	08005115 	.word	0x08005115
 80050d8:	080050e9 	.word	0x080050e9
 80050dc:	080050f9 	.word	0x080050f9
 80050e0:	08005109 	.word	0x08005109
 80050e4:	08005115 	.word	0x08005115
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 80050e8:	f7ff fa22 	bl	8004530 <psram_get_sector_count>
 80050ec:	4602      	mov	r2, r0
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	601a      	str	r2, [r3, #0]
				res = 0;
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]
				break;
 80050f6:	e013      	b.n	8005120 <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 80050f8:	f7ff fa10 	bl	800451c <psram_get_sector_size>
 80050fc:	4602      	mov	r2, r0
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	601a      	str	r2, [r3, #0]
				res = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	73fb      	strb	r3, [r7, #15]
				break;
 8005106:	e00b      	b.n	8005120 <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2201      	movs	r2, #1
 800510c:	601a      	str	r2, [r3, #0]
				res = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	73fb      	strb	r3, [r7, #15]
				break;
 8005112:	e005      	b.n	8005120 <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	73fb      	strb	r3, [r7, #15]
				break;
 8005118:	e002      	b.n	8005120 <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 800511a:	2304      	movs	r3, #4
 800511c:	73fb      	strb	r3, [r7, #15]
				break;
 800511e:	bf00      	nop
		}

		return res;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	e036      	b.n	8005192 <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 8005124:	f7fc fe58 	bl	8001dd8 <extflash_is_initialized>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <disk_ioctl+0x9a>
 800512e:	2303      	movs	r3, #3
 8005130:	e02f      	b.n	8005192 <disk_ioctl+0xfa>

		switch(cmd)
 8005132:	79bb      	ldrb	r3, [r7, #6]
 8005134:	2b04      	cmp	r3, #4
 8005136:	d826      	bhi.n	8005186 <disk_ioctl+0xee>
 8005138:	a201      	add	r2, pc, #4	@ (adr r2, 8005140 <disk_ioctl+0xa8>)
 800513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513e:	bf00      	nop
 8005140:	08005181 	.word	0x08005181
 8005144:	08005155 	.word	0x08005155
 8005148:	08005165 	.word	0x08005165
 800514c:	08005175 	.word	0x08005175
 8005150:	08005181 	.word	0x08005181
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 8005154:	f7fc fe34 	bl	8001dc0 <extflash_get_sector_count>
 8005158:	4602      	mov	r2, r0
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	601a      	str	r2, [r3, #0]
				res = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	73fb      	strb	r3, [r7, #15]
				break;
 8005162:	e013      	b.n	800518c <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 8005164:	f7fc fe23 	bl	8001dae <extflash_get_sector_size>
 8005168:	4602      	mov	r2, r0
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	601a      	str	r2, [r3, #0]
				res = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	73fb      	strb	r3, [r7, #15]
				break;
 8005172:	e00b      	b.n	800518c <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2201      	movs	r2, #1
 8005178:	601a      	str	r2, [r3, #0]
				res = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	73fb      	strb	r3, [r7, #15]
				break;
 800517e:	e005      	b.n	800518c <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	73fb      	strb	r3, [r7, #15]
				break;
 8005184:	e002      	b.n	800518c <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 8005186:	2304      	movs	r3, #4
 8005188:	73fb      	strb	r3, [r7, #15]
				break;
 800518a:	bf00      	nop
		}

		return res;
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	e000      	b.n	8005192 <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 8005190:	2304      	movs	r3, #4
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop

0800519c <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3301      	adds	r3, #1
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80051ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	b21a      	sxth	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	b21b      	sxth	r3, r3
 80051ba:	4313      	orrs	r3, r2
 80051bc:	b21b      	sxth	r3, r3
 80051be:	81fb      	strh	r3, [r7, #14]
	return rv;
 80051c0:	89fb      	ldrh	r3, [r7, #14]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3303      	adds	r3, #3
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	3202      	adds	r2, #2
 80051e6:	7812      	ldrb	r2, [r2, #0]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	3201      	adds	r2, #1
 80051f4:	7812      	ldrb	r2, [r2, #0]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	7812      	ldrb	r2, [r2, #0]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
	return rv;
 8005206:	68fb      	ldr	r3, [r7, #12]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	607a      	str	r2, [r7, #4]
 8005226:	887a      	ldrh	r2, [r7, #2]
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	887b      	ldrh	r3, [r7, #2]
 800522e:	0a1b      	lsrs	r3, r3, #8
 8005230:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	887a      	ldrh	r2, [r7, #2]
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	607a      	str	r2, [r7, #4]
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	0a1b      	lsrs	r3, r3, #8
 8005264:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	0a1b      	lsrs	r3, r3, #8
 8005276:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	607a      	str	r2, [r7, #4]
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	0a1b      	lsrs	r3, r3, #8
 8005288:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	4603      	mov	r3, r0
 80052aa:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80052ac:	79fb      	ldrb	r3, [r7, #7]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <dbc_1st+0x14>
 80052b2:	2300      	movs	r3, #0
 80052b4:	e000      	b.n	80052b8 <dbc_1st+0x16>
#endif
	return 0;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <dbc_2nd+0x14>
 80052d4:	2300      	movs	r3, #0
 80052d6:	e000      	b.n	80052da <dbc_2nd+0x16>
#endif
	return 0;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b084      	sub	sp, #16
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	791b      	ldrb	r3, [r3, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d02c      	beq.n	8005354 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7858      	ldrb	r0, [r3, #1]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005308:	2301      	movs	r3, #1
 800530a:	f7ff fe91 	bl	8005030 <disk_write>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d11d      	bne.n	8005350 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005322:	1ad2      	subs	r2, r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	429a      	cmp	r2, r3
 800532a:	d213      	bcs.n	8005354 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	78db      	ldrb	r3, [r3, #3]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d10f      	bne.n	8005354 <sync_window+0x6e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	7858      	ldrb	r0, [r3, #1]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	441a      	add	r2, r3
 8005348:	2301      	movs	r3, #1
 800534a:	f7ff fe71 	bl	8005030 <disk_write>
 800534e:	e001      	b.n	8005354 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8005354:	7bfb      	ldrb	r3, [r7, #15]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b084      	sub	sp, #16
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d01b      	beq.n	80053ae <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff ffb5 	bl	80052e6 <sync_window>
 800537c:	4603      	mov	r3, r0
 800537e:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d113      	bne.n	80053ae <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	7858      	ldrb	r0, [r3, #1]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005390:	2301      	movs	r3, #1
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	f7ff fe1a 	bl	8004fcc <disk_read>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d004      	beq.n	80053a8 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800539e:	f04f 33ff 	mov.w	r3, #4294967295
 80053a2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff ff90 	bl	80052e6 <sync_window>
 80053c6:	4603      	mov	r3, r0
 80053c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d158      	bne.n	8005482 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d148      	bne.n	800546a <sync_fs+0xb2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	795b      	ldrb	r3, [r3, #5]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d144      	bne.n	800546a <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3334      	adds	r3, #52	@ 0x34
 80053e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80053e8:	2100      	movs	r1, #0
 80053ea:	4618      	mov	r0, r3
 80053ec:	f00c fcfc 	bl	8011de8 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3334      	adds	r3, #52	@ 0x34
 80053f4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80053f8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff ff09 	bl	8005214 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3334      	adds	r3, #52	@ 0x34
 8005406:	4921      	ldr	r1, [pc, #132]	@ (800548c <sync_fs+0xd4>)
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff ff1e 	bl	800524a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3334      	adds	r3, #52	@ 0x34
 8005412:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005416:	491e      	ldr	r1, [pc, #120]	@ (8005490 <sync_fs+0xd8>)
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff ff16 	bl	800524a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3334      	adds	r3, #52	@ 0x34
 8005422:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f7ff ff0c 	bl	800524a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3334      	adds	r3, #52	@ 0x34
 8005436:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	4619      	mov	r1, r3
 8005440:	4610      	mov	r0, r2
 8005442:	f7ff ff02 	bl	800524a <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	7858      	ldrb	r0, [r3, #1]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800545e:	2301      	movs	r3, #1
 8005460:	f7ff fde6 	bl	8005030 <disk_write>
			fs->fsi_flag = 0;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	785b      	ldrb	r3, [r3, #1]
 800546e:	2200      	movs	r2, #0
 8005470:	2100      	movs	r1, #0
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff fe10 	bl	8005098 <disk_ioctl>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <sync_fs+0xca>
 800547e:	2301      	movs	r3, #1
 8005480:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005482:	7bfb      	ldrb	r3, [r7, #15]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	41615252 	.word	0x41615252
 8005490:	61417272 	.word	0x61417272

08005494 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	3b02      	subs	r3, #2
 80054a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	3b02      	subs	r3, #2
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d301      	bcc.n	80054b4 <clst2sect+0x20>
 80054b0:	2300      	movs	r3, #0
 80054b2:	e008      	b.n	80054c6 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	895b      	ldrh	r3, [r3, #10]
 80054bc:	4619      	mov	r1, r3
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	fb01 f303 	mul.w	r3, r1, r3
 80054c4:	4413      	add	r3, r2
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b086      	sub	sp, #24
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d904      	bls.n	80054f2 <get_fat+0x20>
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d302      	bcc.n	80054f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80054f2:	2301      	movs	r3, #1
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	e0ba      	b.n	800566e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80054f8:	f04f 33ff 	mov.w	r3, #4294967295
 80054fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b03      	cmp	r3, #3
 8005504:	f000 8082 	beq.w	800560c <get_fat+0x13a>
 8005508:	2b03      	cmp	r3, #3
 800550a:	f300 80a6 	bgt.w	800565a <get_fat+0x188>
 800550e:	2b01      	cmp	r3, #1
 8005510:	d002      	beq.n	8005518 <get_fat+0x46>
 8005512:	2b02      	cmp	r3, #2
 8005514:	d055      	beq.n	80055c2 <get_fat+0xf0>
 8005516:	e0a0      	b.n	800565a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	085b      	lsrs	r3, r3, #1
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	899b      	ldrh	r3, [r3, #12]
 800552e:	4619      	mov	r1, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	fbb3 f3f1 	udiv	r3, r3, r1
 8005536:	4413      	add	r3, r2
 8005538:	4619      	mov	r1, r3
 800553a:	6938      	ldr	r0, [r7, #16]
 800553c:	f7ff ff0f 	bl	800535e <move_window>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	f040 808c 	bne.w	8005660 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	60fa      	str	r2, [r7, #12]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	8992      	ldrh	r2, [r2, #12]
 8005552:	fbb3 f1f2 	udiv	r1, r3, r2
 8005556:	fb01 f202 	mul.w	r2, r1, r2
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4413      	add	r3, r2
 8005560:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005564:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	899b      	ldrh	r3, [r3, #12]
 800556e:	4619      	mov	r1, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	fbb3 f3f1 	udiv	r3, r3, r1
 8005576:	4413      	add	r3, r2
 8005578:	4619      	mov	r1, r3
 800557a:	6938      	ldr	r0, [r7, #16]
 800557c:	f7ff feef 	bl	800535e <move_window>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d16e      	bne.n	8005664 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	899b      	ldrh	r3, [r3, #12]
 800558a:	461a      	mov	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005592:	fb01 f202 	mul.w	r2, r1, r2
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4413      	add	r3, r2
 800559c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <get_fat+0xe6>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	091b      	lsrs	r3, r3, #4
 80055b6:	e002      	b.n	80055be <get_fat+0xec>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055be:	617b      	str	r3, [r7, #20]
			break;
 80055c0:	e055      	b.n	800566e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	899b      	ldrh	r3, [r3, #12]
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	4619      	mov	r1, r3
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80055d6:	4413      	add	r3, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	6938      	ldr	r0, [r7, #16]
 80055dc:	f7ff febf 	bl	800535e <move_window>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d140      	bne.n	8005668 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	8992      	ldrh	r2, [r2, #12]
 80055f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80055f8:	fb00 f202 	mul.w	r2, r0, r2
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	440b      	add	r3, r1
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff fdcb 	bl	800519c <ld_word>
 8005606:	4603      	mov	r3, r0
 8005608:	617b      	str	r3, [r7, #20]
			break;
 800560a:	e030      	b.n	800566e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	899b      	ldrh	r3, [r3, #12]
 8005614:	089b      	lsrs	r3, r3, #2
 8005616:	b29b      	uxth	r3, r3
 8005618:	4619      	mov	r1, r3
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005620:	4413      	add	r3, r2
 8005622:	4619      	mov	r1, r3
 8005624:	6938      	ldr	r0, [r7, #16]
 8005626:	f7ff fe9a 	bl	800535e <move_window>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d11d      	bne.n	800566c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	8992      	ldrh	r2, [r2, #12]
 800563e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005642:	fb00 f202 	mul.w	r2, r0, r2
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	440b      	add	r3, r1
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff fdbf 	bl	80051ce <ld_dword>
 8005650:	4603      	mov	r3, r0
 8005652:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005656:	617b      	str	r3, [r7, #20]
			break;
 8005658:	e009      	b.n	800566e <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 800565a:	2301      	movs	r3, #1
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	e006      	b.n	800566e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005660:	bf00      	nop
 8005662:	e004      	b.n	800566e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005664:	bf00      	nop
 8005666:	e002      	b.n	800566e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005668:	bf00      	nop
 800566a:	e000      	b.n	800566e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800566c:	bf00      	nop
		}
	}

	return val;
 800566e:	697b      	ldr	r3, [r7, #20]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b089      	sub	sp, #36	@ 0x24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005684:	2302      	movs	r3, #2
 8005686:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b01      	cmp	r3, #1
 800568c:	f240 8109 	bls.w	80058a2 <put_fat+0x22a>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	429a      	cmp	r2, r3
 8005698:	f080 8103 	bcs.w	80058a2 <put_fat+0x22a>
		switch (fs->fs_type) {
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	f000 80b6 	beq.w	8005812 <put_fat+0x19a>
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	f300 80fb 	bgt.w	80058a2 <put_fat+0x22a>
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d003      	beq.n	80056b8 <put_fat+0x40>
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	f000 8083 	beq.w	80057bc <put_fat+0x144>
 80056b6:	e0f4      	b.n	80058a2 <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	61bb      	str	r3, [r7, #24]
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	085b      	lsrs	r3, r3, #1
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	4413      	add	r3, r2
 80056c4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	899b      	ldrh	r3, [r3, #12]
 80056ce:	4619      	mov	r1, r3
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80056d6:	4413      	add	r3, r2
 80056d8:	4619      	mov	r1, r3
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f7ff fe3f 	bl	800535e <move_window>
 80056e0:	4603      	mov	r3, r0
 80056e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056e4:	7ffb      	ldrb	r3, [r7, #31]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f040 80d4 	bne.w	8005894 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	61ba      	str	r2, [r7, #24]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	8992      	ldrh	r2, [r2, #12]
 80056fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8005700:	fb00 f202 	mul.w	r2, r0, r2
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	440b      	add	r3, r1
 8005708:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00d      	beq.n	8005730 <put_fat+0xb8>
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	b25b      	sxtb	r3, r3
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	b25a      	sxtb	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	b25b      	sxtb	r3, r3
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	b25b      	sxtb	r3, r3
 8005728:	4313      	orrs	r3, r2
 800572a:	b25b      	sxtb	r3, r3
 800572c:	b2db      	uxtb	r3, r3
 800572e:	e001      	b.n	8005734 <put_fat+0xbc>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	899b      	ldrh	r3, [r3, #12]
 8005746:	4619      	mov	r1, r3
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	fbb3 f3f1 	udiv	r3, r3, r1
 800574e:	4413      	add	r3, r2
 8005750:	4619      	mov	r1, r3
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7ff fe03 	bl	800535e <move_window>
 8005758:	4603      	mov	r3, r0
 800575a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800575c:	7ffb      	ldrb	r3, [r7, #31]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 809a 	bne.w	8005898 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	899b      	ldrh	r3, [r3, #12]
 800576e:	461a      	mov	r2, r3
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	fbb3 f0f2 	udiv	r0, r3, r2
 8005776:	fb00 f202 	mul.w	r2, r0, r2
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	440b      	add	r3, r1
 800577e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <put_fat+0x11a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	091b      	lsrs	r3, r3, #4
 800578e:	b2db      	uxtb	r3, r3
 8005790:	e00e      	b.n	80057b0 <put_fat+0x138>
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	b25b      	sxtb	r3, r3
 8005798:	f023 030f 	bic.w	r3, r3, #15
 800579c:	b25a      	sxtb	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	0a1b      	lsrs	r3, r3, #8
 80057a2:	b25b      	sxtb	r3, r3
 80057a4:	f003 030f 	and.w	r3, r3, #15
 80057a8:	b25b      	sxtb	r3, r3
 80057aa:	4313      	orrs	r3, r2
 80057ac:	b25b      	sxtb	r3, r3
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	711a      	strb	r2, [r3, #4]
			break;
 80057ba:	e072      	b.n	80058a2 <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	899b      	ldrh	r3, [r3, #12]
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	4619      	mov	r1, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80057d0:	4413      	add	r3, r2
 80057d2:	4619      	mov	r1, r3
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7ff fdc2 	bl	800535e <move_window>
 80057da:	4603      	mov	r3, r0
 80057dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80057de:	7ffb      	ldrb	r3, [r7, #31]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d15b      	bne.n	800589c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	8992      	ldrh	r2, [r2, #12]
 80057f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80057f6:	fb00 f202 	mul.w	r2, r0, r2
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	440b      	add	r3, r1
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	b292      	uxth	r2, r2
 8005802:	4611      	mov	r1, r2
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff fd05 	bl	8005214 <st_word>
			fs->wflag = 1;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	711a      	strb	r2, [r3, #4]
			break;
 8005810:	e047      	b.n	80058a2 <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	899b      	ldrh	r3, [r3, #12]
 800581a:	089b      	lsrs	r3, r3, #2
 800581c:	b29b      	uxth	r3, r3
 800581e:	4619      	mov	r1, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	fbb3 f3f1 	udiv	r3, r3, r1
 8005826:	4413      	add	r3, r2
 8005828:	4619      	mov	r1, r3
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff fd97 	bl	800535e <move_window>
 8005830:	4603      	mov	r3, r0
 8005832:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005834:	7ffb      	ldrb	r3, [r7, #31]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d132      	bne.n	80058a0 <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	8992      	ldrh	r2, [r2, #12]
 800584e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005852:	fb00 f202 	mul.w	r2, r0, r2
 8005856:	1a9b      	subs	r3, r3, r2
 8005858:	440b      	add	r3, r1
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff fcb7 	bl	80051ce <ld_dword>
 8005860:	4603      	mov	r3, r0
 8005862:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005866:	4323      	orrs	r3, r4
 8005868:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	8992      	ldrh	r2, [r2, #12]
 8005878:	fbb3 f0f2 	udiv	r0, r3, r2
 800587c:	fb00 f202 	mul.w	r2, r0, r2
 8005880:	1a9b      	subs	r3, r3, r2
 8005882:	440b      	add	r3, r1
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fcdf 	bl	800524a <st_dword>
			fs->wflag = 1;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	711a      	strb	r2, [r3, #4]
			break;
 8005892:	e006      	b.n	80058a2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005894:	bf00      	nop
 8005896:	e004      	b.n	80058a2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005898:	bf00      	nop
 800589a:	e002      	b.n	80058a2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800589c:	bf00      	nop
 800589e:	e000      	b.n	80058a2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80058a0:	bf00      	nop
		}
	}
	return res;
 80058a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3724      	adds	r7, #36	@ 0x24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd90      	pop	{r4, r7, pc}

080058ac <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d904      	bls.n	80058d2 <remove_chain+0x26>
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d301      	bcc.n	80058d6 <remove_chain+0x2a>
 80058d2:	2302      	movs	r3, #2
 80058d4:	e04b      	b.n	800596e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00c      	beq.n	80058f6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80058dc:	f04f 32ff 	mov.w	r2, #4294967295
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	69b8      	ldr	r0, [r7, #24]
 80058e4:	f7ff fec8 	bl	8005678 <put_fat>
 80058e8:	4603      	mov	r3, r0
 80058ea:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80058ec:	7ffb      	ldrb	r3, [r7, #31]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <remove_chain+0x4a>
 80058f2:	7ffb      	ldrb	r3, [r7, #31]
 80058f4:	e03b      	b.n	800596e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7ff fdea 	bl	80054d2 <get_fat>
 80058fe:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d031      	beq.n	800596a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <remove_chain+0x64>
 800590c:	2302      	movs	r3, #2
 800590e:	e02e      	b.n	800596e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d101      	bne.n	800591c <remove_chain+0x70>
 8005918:	2301      	movs	r3, #1
 800591a:	e028      	b.n	800596e <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800591c:	2200      	movs	r2, #0
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	69b8      	ldr	r0, [r7, #24]
 8005922:	f7ff fea9 	bl	8005678 <put_fat>
 8005926:	4603      	mov	r3, r0
 8005928:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800592a:	7ffb      	ldrb	r3, [r7, #31]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <remove_chain+0x88>
 8005930:	7ffb      	ldrb	r3, [r7, #31]
 8005932:	e01c      	b.n	800596e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	695a      	ldr	r2, [r3, #20]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	3b02      	subs	r3, #2
 800593e:	429a      	cmp	r2, r3
 8005940:	d20b      	bcs.n	800595a <remove_chain+0xae>
			fs->free_clst++;
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	795b      	ldrb	r3, [r3, #5]
 8005950:	f043 0301 	orr.w	r3, r3, #1
 8005954:	b2da      	uxtb	r2, r3
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	429a      	cmp	r2, r3
 8005966:	d3c6      	bcc.n	80058f6 <remove_chain+0x4a>
 8005968:	e000      	b.n	800596c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800596a:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3720      	adds	r7, #32
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b088      	sub	sp, #32
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10d      	bne.n	80059a8 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <create_chain+0x2c>
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d31b      	bcc.n	80059da <create_chain+0x64>
 80059a2:	2301      	movs	r3, #1
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	e018      	b.n	80059da <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff fd91 	bl	80054d2 <get_fat>
 80059b0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d801      	bhi.n	80059bc <create_chain+0x46>
 80059b8:	2301      	movs	r3, #1
 80059ba:	e0a9      	b.n	8005b10 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c2:	d101      	bne.n	80059c8 <create_chain+0x52>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	e0a3      	b.n	8005b10 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d201      	bcs.n	80059d6 <create_chain+0x60>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	e09c      	b.n	8005b10 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <create_chain+0x70>
 80059e2:	2300      	movs	r3, #0
 80059e4:	e094      	b.n	8005b10 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d129      	bne.n	8005a46 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	3301      	adds	r3, #1
 80059f6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d301      	bcc.n	8005a06 <create_chain+0x90>
 8005a02:	2302      	movs	r3, #2
 8005a04:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8005a06:	69f9      	ldr	r1, [r7, #28]
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff fd62 	bl	80054d2 <get_fat>
 8005a0e:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d003      	beq.n	8005a1e <create_chain+0xa8>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1c:	d101      	bne.n	8005a22 <create_chain+0xac>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	e076      	b.n	8005b10 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00e      	beq.n	8005a46 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d906      	bls.n	8005a42 <create_chain+0xcc>
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d201      	bcs.n	8005a42 <create_chain+0xcc>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d129      	bne.n	8005aa0 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	3301      	adds	r3, #1
 8005a54:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d307      	bcc.n	8005a70 <create_chain+0xfa>
					ncl = 2;
 8005a60:	2302      	movs	r3, #2
 8005a62:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8005a64:	69fa      	ldr	r2, [r7, #28]
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d901      	bls.n	8005a70 <create_chain+0xfa>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e04f      	b.n	8005b10 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005a70:	69f9      	ldr	r1, [r7, #28]
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff fd2d 	bl	80054d2 <get_fat>
 8005a78:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00e      	beq.n	8005a9e <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d003      	beq.n	8005a8e <create_chain+0x118>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8c:	d101      	bne.n	8005a92 <create_chain+0x11c>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	e03e      	b.n	8005b10 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d1da      	bne.n	8005a50 <create_chain+0xda>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e038      	b.n	8005b10 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8005a9e:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8005aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8005aa4:	69f9      	ldr	r1, [r7, #28]
 8005aa6:	6938      	ldr	r0, [r7, #16]
 8005aa8:	f7ff fde6 	bl	8005678 <put_fat>
 8005aac:	4603      	mov	r3, r0
 8005aae:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005ab0:	7dfb      	ldrb	r3, [r7, #23]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <create_chain+0x154>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d006      	beq.n	8005aca <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6938      	ldr	r0, [r7, #16]
 8005ac2:	f7ff fdd9 	bl	8005678 <put_fat>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d116      	bne.n	8005afe <create_chain+0x188>
		fs->last_clst = ncl;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	69fa      	ldr	r2, [r7, #28]
 8005ad4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	3b02      	subs	r3, #2
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d804      	bhi.n	8005aee <create_chain+0x178>
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	1e5a      	subs	r2, r3, #1
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	795b      	ldrb	r3, [r3, #5]
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	715a      	strb	r2, [r3, #5]
 8005afc:	e007      	b.n	8005b0e <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005afe:	7dfb      	ldrb	r3, [r7, #23]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d102      	bne.n	8005b0a <create_chain+0x194>
 8005b04:	f04f 33ff 	mov.w	r3, #4294967295
 8005b08:	e000      	b.n	8005b0c <create_chain+0x196>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005b0e:	69fb      	ldr	r3, [r7, #28]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3720      	adds	r7, #32
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7ff fbdf 	bl	80052e6 <sync_window>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <dir_clear+0x1a>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e036      	b.n	8005ba0 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff fcad 	bl	8005494 <clst2sect>
 8005b3a:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3334      	adds	r3, #52	@ 0x34
 8005b46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f00c f94b 	bl	8011de8 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3334      	adds	r3, #52	@ 0x34
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	2301      	movs	r3, #1
 8005b5a:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	e003      	b.n	8005b6a <dir_clear+0x52>
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4413      	add	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	895b      	ldrh	r3, [r3, #10]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d20b      	bcs.n	8005b8e <dir_clear+0x76>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	7858      	ldrb	r0, [r3, #1]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	441a      	add	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	68f9      	ldr	r1, [r7, #12]
 8005b84:	f7ff fa54 	bl	8005030 <disk_write>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0e9      	beq.n	8005b62 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	895b      	ldrh	r3, [r3, #10]
 8005b92:	461a      	mov	r2, r3
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	4293      	cmp	r3, r2
 8005b98:	bf14      	ite	ne
 8005b9a:	2301      	movne	r3, #1
 8005b9c:	2300      	moveq	r3, #0
 8005b9e:	b2db      	uxtb	r3, r3
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bbe:	d204      	bcs.n	8005bca <dir_sdi+0x22>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <dir_sdi+0x26>
		return FR_INT_ERR;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e071      	b.n	8005cb2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <dir_sdi+0x46>
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d902      	bls.n	8005bee <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bec:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10c      	bne.n	8005c0e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	8912      	ldrh	r2, [r2, #8]
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d301      	bcc.n	8005c04 <dir_sdi+0x5c>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e056      	b.n	8005cb2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	619a      	str	r2, [r3, #24]
 8005c0c:	e02d      	b.n	8005c6a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	895b      	ldrh	r3, [r3, #10]
 8005c12:	461a      	mov	r2, r3
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	899b      	ldrh	r3, [r3, #12]
 8005c18:	fb02 f303 	mul.w	r3, r2, r3
 8005c1c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005c1e:	e019      	b.n	8005c54 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6979      	ldr	r1, [r7, #20]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fc54 	bl	80054d2 <get_fat>
 8005c2a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d101      	bne.n	8005c38 <dir_sdi+0x90>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e03c      	b.n	8005cb2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d904      	bls.n	8005c48 <dir_sdi+0xa0>
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d301      	bcc.n	8005c4c <dir_sdi+0xa4>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e032      	b.n	8005cb2 <dir_sdi+0x10a>
			ofs -= csz;
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d2e1      	bcs.n	8005c20 <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 8005c5c:	6979      	ldr	r1, [r7, #20]
 8005c5e:	6938      	ldr	r0, [r7, #16]
 8005c60:	f7ff fc18 	bl	8005494 <clst2sect>
 8005c64:	4602      	mov	r2, r0
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <dir_sdi+0xd4>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e01a      	b.n	8005cb2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699a      	ldr	r2, [r3, #24]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	899b      	ldrh	r3, [r3, #12]
 8005c84:	4619      	mov	r1, r3
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c8c:	441a      	add	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	899b      	ldrh	r3, [r3, #12]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ca4:	fb00 f202 	mul.w	r2, r0, r2
 8005ca8:	1a9b      	subs	r3, r3, r2
 8005caa:	18ca      	adds	r2, r1, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b086      	sub	sp, #24
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	3320      	adds	r3, #32
 8005cd0:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cd8:	d302      	bcc.n	8005ce0 <dir_next+0x26>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <dir_next+0x32>
 8005ce8:	2304      	movs	r3, #4
 8005cea:	e088      	b.n	8005dfe <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	899b      	ldrh	r3, [r3, #12]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cf8:	fb01 f202 	mul.w	r2, r1, r2
 8005cfc:	1a9b      	subs	r3, r3, r2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d16a      	bne.n	8005dd8 <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	8912      	ldrh	r2, [r2, #8]
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d35b      	bcc.n	8005dd8 <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	619a      	str	r2, [r3, #24]
 8005d26:	2304      	movs	r3, #4
 8005d28:	e069      	b.n	8005dfe <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	899b      	ldrh	r3, [r3, #12]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	8952      	ldrh	r2, [r2, #10]
 8005d3a:	3a01      	subs	r2, #1
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d14a      	bne.n	8005dd8 <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	f7ff fbc1 	bl	80054d2 <get_fat>
 8005d50:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d801      	bhi.n	8005d5c <dir_next+0xa2>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e050      	b.n	8005dfe <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d62:	d101      	bne.n	8005d68 <dir_next+0xae>
 8005d64:	2301      	movs	r3, #1
 8005d66:	e04a      	b.n	8005dfe <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d328      	bcc.n	8005dc4 <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d104      	bne.n	8005d82 <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	619a      	str	r2, [r3, #24]
 8005d7e:	2304      	movs	r3, #4
 8005d80:	e03d      	b.n	8005dfe <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f7ff fdf3 	bl	8005976 <create_chain>
 8005d90:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <dir_next+0xe2>
 8005d98:	2307      	movs	r3, #7
 8005d9a:	e030      	b.n	8005dfe <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <dir_next+0xec>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e02b      	b.n	8005dfe <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d101      	bne.n	8005db2 <dir_next+0xf8>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e025      	b.n	8005dfe <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8005db2:	6979      	ldr	r1, [r7, #20]
 8005db4:	6938      	ldr	r0, [r7, #16]
 8005db6:	f7ff feaf 	bl	8005b18 <dir_clear>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <dir_next+0x10a>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e01c      	b.n	8005dfe <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8005dca:	6979      	ldr	r1, [r7, #20]
 8005dcc:	6938      	ldr	r0, [r7, #16]
 8005dce:	f7ff fb61 	bl	8005494 <clst2sect>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	899b      	ldrh	r3, [r3, #12]
 8005de8:	461a      	mov	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	fbb3 f0f2 	udiv	r0, r3, r2
 8005df0:	fb00 f202 	mul.w	r2, r0, r2
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	18ca      	adds	r2, r1, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b086      	sub	sp, #24
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005e16:	2100      	movs	r1, #0
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff fec5 	bl	8005ba8 <dir_sdi>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d12b      	bne.n	8005e80 <dir_alloc+0x7a>
		n = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	4619      	mov	r1, r3
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f7ff fa93 	bl	800535e <move_window>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d11d      	bne.n	8005e7e <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2be5      	cmp	r3, #229	@ 0xe5
 8005e4a:	d004      	beq.n	8005e56 <dir_alloc+0x50>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d107      	bne.n	8005e66 <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d102      	bne.n	8005e6a <dir_alloc+0x64>
 8005e64:	e00c      	b.n	8005e80 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8005e66:	2300      	movs	r3, #0
 8005e68:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff ff24 	bl	8005cba <dir_next>
 8005e72:	4603      	mov	r3, r0
 8005e74:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0d7      	beq.n	8005e2c <dir_alloc+0x26>
 8005e7c:	e000      	b.n	8005e80 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005e7e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d101      	bne.n	8005e8a <dir_alloc+0x84>
 8005e86:	2307      	movs	r3, #7
 8005e88:	75fb      	strb	r3, [r7, #23]
	return res;
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	331a      	adds	r3, #26
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff f97a 	bl	800519c <ld_word>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d109      	bne.n	8005ec8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	3314      	adds	r3, #20
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff f96f 	bl	800519c <ld_word>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	041b      	lsls	r3, r3, #16
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	331a      	adds	r3, #26
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff f993 	bl	8005214 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d109      	bne.n	8005f0a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f103 0214 	add.w	r2, r3, #20
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	0c1b      	lsrs	r3, r3, #16
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	4619      	mov	r1, r3
 8005f04:	4610      	mov	r0, r2
 8005f06:	f7ff f985 	bl	8005214 <st_word>
	}
}
 8005f0a:	bf00      	nop
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b086      	sub	sp, #24
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8005f26:	e03c      	b.n	8005fa2 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6938      	ldr	r0, [r7, #16]
 8005f30:	f7ff fa15 	bl	800535e <move_window>
 8005f34:	4603      	mov	r3, r0
 8005f36:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d136      	bne.n	8005fac <dir_read+0x9a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	73fb      	strb	r3, [r7, #15]
		if (b == 0) {
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d102      	bne.n	8005f52 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	75fb      	strb	r3, [r7, #23]
 8005f50:	e031      	b.n	8005fb6 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	330b      	adds	r3, #11
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f5e:	73bb      	strb	r3, [r7, #14]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	7bba      	ldrb	r2, [r7, #14]
 8005f64:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	2be5      	cmp	r3, #229	@ 0xe5
 8005f6a:	d011      	beq.n	8005f90 <dir_read+0x7e>
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f70:	d00e      	beq.n	8005f90 <dir_read+0x7e>
 8005f72:	7bbb      	ldrb	r3, [r7, #14]
 8005f74:	2b0f      	cmp	r3, #15
 8005f76:	d00b      	beq.n	8005f90 <dir_read+0x7e>
 8005f78:	7bbb      	ldrb	r3, [r7, #14]
 8005f7a:	f023 0320 	bic.w	r3, r3, #32
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	bf0c      	ite	eq
 8005f82:	2301      	moveq	r3, #1
 8005f84:	2300      	movne	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00f      	beq.n	8005fb0 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005f90:	2100      	movs	r1, #0
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fe91 	bl	8005cba <dir_next>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d108      	bne.n	8005fb4 <dir_read+0xa2>
	while (dp->sect) {
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1be      	bne.n	8005f28 <dir_read+0x16>
 8005faa:	e004      	b.n	8005fb6 <dir_read+0xa4>
		if (res != FR_OK) break;
 8005fac:	bf00      	nop
 8005fae:	e002      	b.n	8005fb6 <dir_read+0xa4>
				break;
 8005fb0:	bf00      	nop
 8005fb2:	e000      	b.n	8005fb6 <dir_read+0xa4>
		if (res != FR_OK) break;
 8005fb4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005fb6:	7dfb      	ldrb	r3, [r7, #23]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <dir_read+0xb0>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	619a      	str	r2, [r3, #24]
	return res;
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005fda:	2100      	movs	r1, #0
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff fde3 	bl	8005ba8 <dir_sdi>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <dir_find+0x24>
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
 8005fee:	e03e      	b.n	800606e <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6938      	ldr	r0, [r7, #16]
 8005ff8:	f7ff f9b1 	bl	800535e <move_window>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d12f      	bne.n	8006066 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d102      	bne.n	800601a <dir_find+0x4e>
 8006014:	2304      	movs	r3, #4
 8006016:	75fb      	strb	r3, [r7, #23]
 8006018:	e028      	b.n	800606c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	330b      	adds	r3, #11
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006026:	b2da      	uxtb	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	330b      	adds	r3, #11
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	f003 0308 	and.w	r3, r3, #8
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10a      	bne.n	8006052 <dir_find+0x86>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	69d8      	ldr	r0, [r3, #28]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3320      	adds	r3, #32
 8006044:	220b      	movs	r2, #11
 8006046:	4619      	mov	r1, r3
 8006048:	f00b febe 	bl	8011dc8 <memcmp>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00b      	beq.n	800606a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006052:	2100      	movs	r1, #0
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff fe30 	bl	8005cba <dir_next>
 800605a:	4603      	mov	r3, r0
 800605c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0c5      	beq.n	8005ff0 <dir_find+0x24>
 8006064:	e002      	b.n	800606c <dir_find+0xa0>
		if (res != FR_OK) break;
 8006066:	bf00      	nop
 8006068:	e000      	b.n	800606c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800606a:	bf00      	nop

	return res;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006084:	2101      	movs	r1, #1
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff febd 	bl	8005e06 <dir_alloc>
 800608c:	4603      	mov	r3, r0
 800608e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006090:	7bfb      	ldrb	r3, [r7, #15]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d11c      	bne.n	80060d0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	4619      	mov	r1, r3
 800609c:	68b8      	ldr	r0, [r7, #8]
 800609e:	f7ff f95e 	bl	800535e <move_window>
 80060a2:	4603      	mov	r3, r0
 80060a4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d111      	bne.n	80060d0 <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	2220      	movs	r2, #32
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f00b fe97 	bl	8011de8 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69d8      	ldr	r0, [r3, #28]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3320      	adds	r3, #32
 80060c2:	220b      	movs	r2, #11
 80060c4:	4619      	mov	r1, r3
 80060c6:	f00b ff13 	bl	8011ef0 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2201      	movs	r2, #1
 80060ce:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <dir_remove>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	4619      	mov	r1, r3
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f7ff f935 	bl	800535e <move_window>
 80060f4:	4603      	mov	r3, r0
 80060f6:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80060f8:	7afb      	ldrb	r3, [r7, #11]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	22e5      	movs	r2, #229	@ 0xe5
 8006104:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	711a      	strb	r2, [r3, #4]
	}
#endif

	return res;
 800610c:	7afb      	ldrb	r3, [r7, #11]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
	...

08006118 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08a      	sub	sp, #40	@ 0x28
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3320      	adds	r3, #32
 800612c:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 800612e:	220b      	movs	r2, #11
 8006130:	2120      	movs	r1, #32
 8006132:	6938      	ldr	r0, [r7, #16]
 8006134:	f00b fe58 	bl	8011de8 <memset>
	si = i = 0; ni = 8;
 8006138:	2300      	movs	r3, #0
 800613a:	61bb      	str	r3, [r7, #24]
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	61fb      	str	r3, [r7, #28]
 8006140:	2308      	movs	r3, #8
 8006142:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	61fa      	str	r2, [r7, #28]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4413      	add	r3, r2
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006158:	2b20      	cmp	r3, #32
 800615a:	f240 8089 	bls.w	8006270 <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 800615e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006162:	2b2f      	cmp	r3, #47	@ 0x2f
 8006164:	d007      	beq.n	8006176 <create_name+0x5e>
 8006166:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800616a:	2b5c      	cmp	r3, #92	@ 0x5c
 800616c:	d110      	bne.n	8006190 <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 800616e:	e002      	b.n	8006176 <create_name+0x5e>
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	3301      	adds	r3, #1
 8006174:	61fb      	str	r3, [r7, #28]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b2f      	cmp	r3, #47	@ 0x2f
 8006180:	d0f6      	beq.n	8006170 <create_name+0x58>
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	4413      	add	r3, r2
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b5c      	cmp	r3, #92	@ 0x5c
 800618c:	d0f0      	beq.n	8006170 <create_name+0x58>
			break;
 800618e:	e070      	b.n	8006272 <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8006190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006194:	2b2e      	cmp	r3, #46	@ 0x2e
 8006196:	d003      	beq.n	80061a0 <create_name+0x88>
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	429a      	cmp	r2, r3
 800619e:	d30d      	bcc.n	80061bc <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	2b0b      	cmp	r3, #11
 80061a4:	d003      	beq.n	80061ae <create_name+0x96>
 80061a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80061ac:	d001      	beq.n	80061b2 <create_name+0x9a>
 80061ae:	2306      	movs	r3, #6
 80061b0:	e081      	b.n	80062b6 <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 80061b2:	2308      	movs	r3, #8
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	230b      	movs	r3, #11
 80061b8:	623b      	str	r3, [r7, #32]
			continue;
 80061ba:	e058      	b.n	800626e <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 80061bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	da07      	bge.n	80061d4 <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 80061c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061cc:	4a3c      	ldr	r2, [pc, #240]	@ (80062c0 <create_name+0x1a8>)
 80061ce:	5cd3      	ldrb	r3, [r2, r3]
 80061d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 80061d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff f862 	bl	80052a2 <dbc_1st>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d024      	beq.n	800622e <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	61fa      	str	r2, [r7, #28]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	4413      	add	r3, r2
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff f865 	bl	80052c4 <dbc_2nd>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d004      	beq.n	800620a <create_name+0xf2>
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	3b01      	subs	r3, #1
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	429a      	cmp	r2, r3
 8006208:	d301      	bcc.n	800620e <create_name+0xf6>
 800620a:	2306      	movs	r3, #6
 800620c:	e053      	b.n	80062b6 <create_name+0x19e>
			sfn[i++] = c;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	61ba      	str	r2, [r7, #24]
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4413      	add	r3, r2
 8006218:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800621c:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	61ba      	str	r2, [r7, #24]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	4413      	add	r3, r2
 8006228:	7bfa      	ldrb	r2, [r7, #15]
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	e78a      	b.n	8006144 <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800622e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006232:	4619      	mov	r1, r3
 8006234:	4823      	ldr	r0, [pc, #140]	@ (80062c4 <create_name+0x1ac>)
 8006236:	f00b fddf 	bl	8011df8 <strchr>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <create_name+0x12c>
 8006240:	2306      	movs	r3, #6
 8006242:	e038      	b.n	80062b6 <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006248:	2b60      	cmp	r3, #96	@ 0x60
 800624a:	d908      	bls.n	800625e <create_name+0x146>
 800624c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006250:	2b7a      	cmp	r3, #122	@ 0x7a
 8006252:	d804      	bhi.n	800625e <create_name+0x146>
 8006254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006258:	3b20      	subs	r3, #32
 800625a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	61ba      	str	r2, [r7, #24]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4413      	add	r3, r2
 8006268:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800626c:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 800626e:	e769      	b.n	8006144 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006270:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	441a      	add	r2, r3
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <create_name+0x16e>
 8006282:	2306      	movs	r3, #6
 8006284:	e017      	b.n	80062b6 <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	2be5      	cmp	r3, #229	@ 0xe5
 800628c:	d102      	bne.n	8006294 <create_name+0x17c>
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2205      	movs	r2, #5
 8006292:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8006294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006298:	2b20      	cmp	r3, #32
 800629a:	d905      	bls.n	80062a8 <create_name+0x190>
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	d801      	bhi.n	80062ac <create_name+0x194>
 80062a8:	2204      	movs	r2, #4
 80062aa:	e000      	b.n	80062ae <create_name+0x196>
 80062ac:	2200      	movs	r2, #0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	330b      	adds	r3, #11
 80062b2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80062b4:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3728      	adds	r7, #40	@ 0x28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	080133a4 	.word	0x080133a4
 80062c4:	08013300 	.word	0x08013300

080062c8 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 80062d8:	e002      	b.n	80062e0 <follow_path+0x18>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	3301      	adds	r3, #1
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80062e6:	d0f8      	beq.n	80062da <follow_path+0x12>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80062ee:	d0f4      	beq.n	80062da <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b1f      	cmp	r3, #31
 80062fc:	d80a      	bhi.n	8006314 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2280      	movs	r2, #128	@ 0x80
 8006302:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8006306:	2100      	movs	r1, #0
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff fc4d 	bl	8005ba8 <dir_sdi>
 800630e:	4603      	mov	r3, r0
 8006310:	75fb      	strb	r3, [r7, #23]
 8006312:	e048      	b.n	80063a6 <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006314:	463b      	mov	r3, r7
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7ff fefd 	bl	8006118 <create_name>
 800631e:	4603      	mov	r3, r0
 8006320:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d139      	bne.n	800639c <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff fe4f 	bl	8005fcc <dir_find>
 800632e:	4603      	mov	r3, r0
 8006330:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8006338:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 800633a:	7dfb      	ldrb	r3, [r7, #23]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006340:	7dfb      	ldrb	r3, [r7, #23]
 8006342:	2b04      	cmp	r3, #4
 8006344:	d12c      	bne.n	80063a0 <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b00      	cmp	r3, #0
 800634e:	d127      	bne.n	80063a0 <follow_path+0xd8>
 8006350:	2305      	movs	r3, #5
 8006352:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006354:	e024      	b.n	80063a0 <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d121      	bne.n	80063a4 <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	799b      	ldrb	r3, [r3, #6]
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b00      	cmp	r3, #0
 800636a:	d102      	bne.n	8006372 <follow_path+0xaa>
				res = FR_NO_PATH; break;
 800636c:	2305      	movs	r3, #5
 800636e:	75fb      	strb	r3, [r7, #23]
 8006370:	e019      	b.n	80063a6 <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	8992      	ldrh	r2, [r2, #12]
 8006380:	fbb3 f0f2 	udiv	r0, r3, r2
 8006384:	fb00 f202 	mul.w	r2, r0, r2
 8006388:	1a9b      	subs	r3, r3, r2
 800638a:	440b      	add	r3, r1
 800638c:	4619      	mov	r1, r3
 800638e:	6938      	ldr	r0, [r7, #16]
 8006390:	f7ff fd80 	bl	8005e94 <ld_clust>
 8006394:	4602      	mov	r2, r0
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800639a:	e7bb      	b.n	8006314 <follow_path+0x4c>
			if (res != FR_OK) break;
 800639c:	bf00      	nop
 800639e:	e002      	b.n	80063a6 <follow_path+0xde>
				break;
 80063a0:	bf00      	nop
 80063a2:	e000      	b.n	80063a6 <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 80063a4:	bf00      	nop
			}
		}
	}

	return res;
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b08b      	sub	sp, #44	@ 0x2c
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 80063b8:	f04f 33ff 	mov.w	r3, #4294967295
 80063bc:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80063c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c6:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <get_ldnumber+0x22>
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	e080      	b.n	80064d4 <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	623a      	str	r2, [r7, #32]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 80063dc:	7ffb      	ldrb	r3, [r7, #31]
 80063de:	2b20      	cmp	r3, #32
 80063e0:	d902      	bls.n	80063e8 <get_ldnumber+0x38>
 80063e2:	7ffb      	ldrb	r3, [r7, #31]
 80063e4:	2b3a      	cmp	r3, #58	@ 0x3a
 80063e6:	d1f4      	bne.n	80063d2 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 80063e8:	7ffb      	ldrb	r3, [r7, #31]
 80063ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80063ec:	d11c      	bne.n	8006428 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 80063ee:	2302      	movs	r3, #2
 80063f0:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b2f      	cmp	r3, #47	@ 0x2f
 80063f8:	d90c      	bls.n	8006414 <get_ldnumber+0x64>
 80063fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b39      	cmp	r3, #57	@ 0x39
 8006400:	d808      	bhi.n	8006414 <get_ldnumber+0x64>
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	3302      	adds	r3, #2
 8006406:	6a3a      	ldr	r2, [r7, #32]
 8006408:	429a      	cmp	r2, r3
 800640a:	d103      	bne.n	8006414 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 800640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	3b30      	subs	r3, #48	@ 0x30
 8006412:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	2b01      	cmp	r3, #1
 8006418:	dc04      	bgt.n	8006424 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a3a      	ldr	r2, [r7, #32]
 8006422:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	e055      	b.n	80064d4 <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 8006428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	2b2f      	cmp	r3, #47	@ 0x2f
 800642e:	d14e      	bne.n	80064ce <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 8006430:	e002      	b.n	8006438 <get_ldnumber+0x88>
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	3301      	adds	r3, #1
 8006436:	627b      	str	r3, [r7, #36]	@ 0x24
 8006438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643a:	3301      	adds	r3, #1
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b2f      	cmp	r3, #47	@ 0x2f
 8006440:	d0f7      	beq.n	8006432 <get_ldnumber+0x82>
		i = 0;
 8006442:	2300      	movs	r3, #0
 8006444:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	623b      	str	r3, [r7, #32]
 800644a:	4a25      	ldr	r2, [pc, #148]	@ (80064e0 <get_ldnumber+0x130>)
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006452:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	613a      	str	r2, [r7, #16]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	73fb      	strb	r3, [r7, #15]
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	3301      	adds	r3, #1
 8006462:	623b      	str	r3, [r7, #32]
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	2b60      	cmp	r3, #96	@ 0x60
 800646e:	d905      	bls.n	800647c <get_ldnumber+0xcc>
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	2b7a      	cmp	r3, #122	@ 0x7a
 8006474:	d802      	bhi.n	800647c <get_ldnumber+0xcc>
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	3b20      	subs	r3, #32
 800647a:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 800647c:	7ffb      	ldrb	r3, [r7, #31]
 800647e:	2b60      	cmp	r3, #96	@ 0x60
 8006480:	d905      	bls.n	800648e <get_ldnumber+0xde>
 8006482:	7ffb      	ldrb	r3, [r7, #31]
 8006484:	2b7a      	cmp	r3, #122	@ 0x7a
 8006486:	d802      	bhi.n	800648e <get_ldnumber+0xde>
 8006488:	7ffb      	ldrb	r3, [r7, #31]
 800648a:	3b20      	subs	r3, #32
 800648c:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 800648e:	7bfb      	ldrb	r3, [r7, #15]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <get_ldnumber+0xec>
 8006494:	7bfa      	ldrb	r2, [r7, #15]
 8006496:	7ffb      	ldrb	r3, [r7, #31]
 8006498:	429a      	cmp	r2, r3
 800649a:	d0db      	beq.n	8006454 <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d105      	bne.n	80064ae <get_ldnumber+0xfe>
 80064a2:	7ffb      	ldrb	r3, [r7, #31]
 80064a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80064a6:	d008      	beq.n	80064ba <get_ldnumber+0x10a>
 80064a8:	7ffb      	ldrb	r3, [r7, #31]
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	d905      	bls.n	80064ba <get_ldnumber+0x10a>
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	3301      	adds	r3, #1
 80064b2:	61bb      	str	r3, [r7, #24]
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	ddc5      	ble.n	8006446 <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	dc04      	bgt.n	80064ca <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a3a      	ldr	r2, [r7, #32]
 80064c8:	601a      	str	r2, [r3, #0]
		}
		return vol;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	e002      	b.n	80064d4 <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 80064d2:	697b      	ldr	r3, [r7, #20]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	372c      	adds	r7, #44	@ 0x2c
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	20000004 	.word	0x20000004

080064e4 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	711a      	strb	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f04f 32ff 	mov.w	r2, #4294967295
 80064fa:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fe ff2d 	bl	800535e <move_window>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <check_fs+0x2a>
 800650a:	2304      	movs	r3, #4
 800650c:	e088      	b.n	8006620 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3334      	adds	r3, #52	@ 0x34
 8006512:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fe40 	bl	800519c <ld_word>
 800651c:	4603      	mov	r3, r0
 800651e:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006526:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8006528:	7b7b      	ldrb	r3, [r7, #13]
 800652a:	2beb      	cmp	r3, #235	@ 0xeb
 800652c:	d005      	beq.n	800653a <check_fs+0x56>
 800652e:	7b7b      	ldrb	r3, [r7, #13]
 8006530:	2be9      	cmp	r3, #233	@ 0xe9
 8006532:	d002      	beq.n	800653a <check_fs+0x56>
 8006534:	7b7b      	ldrb	r3, [r7, #13]
 8006536:	2be8      	cmp	r3, #232	@ 0xe8
 8006538:	d16a      	bne.n	8006610 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800653a:	89fb      	ldrh	r3, [r7, #14]
 800653c:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8006540:	4293      	cmp	r3, r2
 8006542:	d10c      	bne.n	800655e <check_fs+0x7a>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3334      	adds	r3, #52	@ 0x34
 8006548:	3352      	adds	r3, #82	@ 0x52
 800654a:	2208      	movs	r2, #8
 800654c:	4936      	ldr	r1, [pc, #216]	@ (8006628 <check_fs+0x144>)
 800654e:	4618      	mov	r0, r3
 8006550:	f00b fc3a 	bl	8011dc8 <memcmp>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 800655a:	2300      	movs	r3, #0
 800655c:	e060      	b.n	8006620 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3334      	adds	r3, #52	@ 0x34
 8006562:	330b      	adds	r3, #11
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe fe19 	bl	800519c <ld_word>
 800656a:	4603      	mov	r3, r0
 800656c:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006574:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 8006576:	897a      	ldrh	r2, [r7, #10]
 8006578:	897b      	ldrh	r3, [r7, #10]
 800657a:	3b01      	subs	r3, #1
 800657c:	4013      	ands	r3, r2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d146      	bne.n	8006610 <check_fs+0x12c>
 8006582:	897b      	ldrh	r3, [r7, #10]
 8006584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006588:	d342      	bcc.n	8006610 <check_fs+0x12c>
 800658a:	897b      	ldrh	r3, [r7, #10]
 800658c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006590:	d83e      	bhi.n	8006610 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8006592:	7b7b      	ldrb	r3, [r7, #13]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d03b      	beq.n	8006610 <check_fs+0x12c>
 8006598:	7b7a      	ldrb	r2, [r7, #13]
 800659a:	7b7b      	ldrb	r3, [r7, #13]
 800659c:	3b01      	subs	r3, #1
 800659e:	4013      	ands	r3, r2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d135      	bne.n	8006610 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3334      	adds	r3, #52	@ 0x34
 80065a8:	330e      	adds	r3, #14
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fe fdf6 	bl	800519c <ld_word>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d02c      	beq.n	8006610 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065bc:	3b01      	subs	r3, #1
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d826      	bhi.n	8006610 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3334      	adds	r3, #52	@ 0x34
 80065c6:	3311      	adds	r3, #17
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fe fde7 	bl	800519c <ld_word>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01d      	beq.n	8006610 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3334      	adds	r3, #52	@ 0x34
 80065d8:	3313      	adds	r3, #19
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fe fdde 	bl	800519c <ld_word>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80065e4:	d809      	bhi.n	80065fa <check_fs+0x116>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	3334      	adds	r3, #52	@ 0x34
 80065ea:	3320      	adds	r3, #32
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fe fdee 	bl	80051ce <ld_dword>
 80065f2:	4603      	mov	r3, r0
 80065f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f8:	d30a      	bcc.n	8006610 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3334      	adds	r3, #52	@ 0x34
 80065fe:	3316      	adds	r3, #22
 8006600:	4618      	mov	r0, r3
 8006602:	f7fe fdcb 	bl	800519c <ld_word>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 800660c:	2300      	movs	r3, #0
 800660e:	e007      	b.n	8006620 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 8006610:	89fb      	ldrh	r3, [r7, #14]
 8006612:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8006616:	4293      	cmp	r3, r2
 8006618:	d101      	bne.n	800661e <check_fs+0x13a>
 800661a:	2302      	movs	r3, #2
 800661c:	e000      	b.n	8006620 <check_fs+0x13c>
 800661e:	2303      	movs	r3, #3
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	08013310 	.word	0x08013310

0800662c <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b088      	sub	sp, #32
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 8006636:	2100      	movs	r1, #0
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff ff53 	bl	80064e4 <check_fs>
 800663e:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	2b02      	cmp	r3, #2
 8006644:	d007      	beq.n	8006656 <find_volume+0x2a>
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d802      	bhi.n	8006652 <find_volume+0x26>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <find_volume+0x2a>
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	e045      	b.n	80066e2 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8006656:	2300      	movs	r3, #0
 8006658:	61fb      	str	r3, [r7, #28]
 800665a:	e014      	b.n	8006686 <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 800666a:	4413      	add	r3, r2
 800666c:	4618      	mov	r0, r3
 800666e:	f7fe fdae 	bl	80051ce <ld_dword>
 8006672:	4602      	mov	r2, r0
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	3320      	adds	r3, #32
 800667a:	443b      	add	r3, r7
 800667c:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	3301      	adds	r3, #1
 8006684:	61fb      	str	r3, [r7, #28]
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	2b03      	cmp	r3, #3
 800668a:	d9e7      	bls.n	800665c <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <find_volume+0x6c>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	3b01      	subs	r3, #1
 8006696:	e000      	b.n	800669a <find_volume+0x6e>
 8006698:	2300      	movs	r3, #0
 800669a:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	3320      	adds	r3, #32
 80066a2:	443b      	add	r3, r7
 80066a4:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <find_volume+0x98>
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	3320      	adds	r3, #32
 80066b2:	443b      	add	r3, r7
 80066b4:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff ff12 	bl	80064e4 <check_fs>
 80066c0:	4603      	mov	r3, r0
 80066c2:	e000      	b.n	80066c6 <find_volume+0x9a>
 80066c4:	2303      	movs	r3, #3
 80066c6:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d108      	bne.n	80066e0 <find_volume+0xb4>
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d905      	bls.n	80066e0 <find_volume+0xb4>
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	3301      	adds	r3, #1
 80066d8:	61fb      	str	r3, [r7, #28]
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d9dd      	bls.n	800669c <find_volume+0x70>
	return fmt;
 80066e0:	69bb      	ldr	r3, [r7, #24]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3720      	adds	r7, #32
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
	...

080066ec <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b090      	sub	sp, #64	@ 0x40
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	4613      	mov	r3, r2
 80066f8:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f7ff fe55 	bl	80063b0 <get_ldnumber>
 8006706:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670a:	2b00      	cmp	r3, #0
 800670c:	da01      	bge.n	8006712 <mount_volume+0x26>
 800670e:	230b      	movs	r3, #11
 8006710:	e207      	b.n	8006b22 <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8006712:	4aa2      	ldr	r2, [pc, #648]	@ (800699c <mount_volume+0x2b0>)
 8006714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800671a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800671c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <mount_volume+0x3a>
 8006722:	230c      	movs	r3, #12
 8006724:	e1fd      	b.n	8006b22 <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800672a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	f023 0301 	bic.w	r3, r3, #1
 8006732:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d01a      	beq.n	8006772 <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 800673c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673e:	785b      	ldrb	r3, [r3, #1]
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe fbf3 	bl	8004f2c <disk_status>
 8006746:	4603      	mov	r3, r0
 8006748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800674c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10c      	bne.n	8006772 <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <mount_volume+0x82>
 800675e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 800676a:	230a      	movs	r3, #10
 800676c:	e1d9      	b.n	8006b22 <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800676e:	2300      	movs	r3, #0
 8006770:	e1d7      	b.n	8006b22 <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8006772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006774:	2200      	movs	r2, #0
 8006776:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 8006778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	4618      	mov	r0, r3
 800677e:	f7fe fbfd 	bl	8004f7c <disk_initialize>
 8006782:	4603      	mov	r3, r0
 8006784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006794:	2303      	movs	r3, #3
 8006796:	e1c4      	b.n	8006b22 <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d007      	beq.n	80067ae <mount_volume+0xc2>
 800679e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 80067aa:	230a      	movs	r3, #10
 80067ac:	e1b9      	b.n	8006b22 <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80067ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b0:	7858      	ldrb	r0, [r3, #1]
 80067b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b4:	330c      	adds	r3, #12
 80067b6:	461a      	mov	r2, r3
 80067b8:	2102      	movs	r1, #2
 80067ba:	f7fe fc6d 	bl	8005098 <disk_ioctl>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <mount_volume+0xdc>
 80067c4:	2301      	movs	r3, #1
 80067c6:	e1ac      	b.n	8006b22 <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	899b      	ldrh	r3, [r3, #12]
 80067cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067d0:	d80d      	bhi.n	80067ee <mount_volume+0x102>
 80067d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d4:	899b      	ldrh	r3, [r3, #12]
 80067d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067da:	d308      	bcc.n	80067ee <mount_volume+0x102>
 80067dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067de:	899b      	ldrh	r3, [r3, #12]
 80067e0:	461a      	mov	r2, r3
 80067e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e4:	899b      	ldrh	r3, [r3, #12]
 80067e6:	3b01      	subs	r3, #1
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <mount_volume+0x106>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e197      	b.n	8006b22 <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 80067f2:	2100      	movs	r1, #0
 80067f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067f6:	f7ff ff19 	bl	800662c <find_volume>
 80067fa:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 80067fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d101      	bne.n	8006806 <mount_volume+0x11a>
 8006802:	2301      	movs	r3, #1
 8006804:	e18d      	b.n	8006b22 <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	2b01      	cmp	r3, #1
 800680a:	d901      	bls.n	8006810 <mount_volume+0x124>
 800680c:	230d      	movs	r3, #13
 800680e:	e188      	b.n	8006b22 <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 8006810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006814:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006818:	3334      	adds	r3, #52	@ 0x34
 800681a:	330b      	adds	r3, #11
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe fcbd 	bl	800519c <ld_word>
 8006822:	4603      	mov	r3, r0
 8006824:	461a      	mov	r2, r3
 8006826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006828:	899b      	ldrh	r3, [r3, #12]
 800682a:	429a      	cmp	r2, r3
 800682c:	d001      	beq.n	8006832 <mount_volume+0x146>
 800682e:	230d      	movs	r3, #13
 8006830:	e177      	b.n	8006b22 <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006834:	3334      	adds	r3, #52	@ 0x34
 8006836:	3316      	adds	r3, #22
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe fcaf 	bl	800519c <ld_word>
 800683e:	4603      	mov	r3, r0
 8006840:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006844:	2b00      	cmp	r3, #0
 8006846:	d106      	bne.n	8006856 <mount_volume+0x16a>
 8006848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684a:	3334      	adds	r3, #52	@ 0x34
 800684c:	3324      	adds	r3, #36	@ 0x24
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe fcbd 	bl	80051ce <ld_dword>
 8006854:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 8006856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006858:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800685a:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800685c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006864:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006868:	78db      	ldrb	r3, [r3, #3]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d005      	beq.n	800687a <mount_volume+0x18e>
 800686e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006870:	78db      	ldrb	r3, [r3, #3]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d001      	beq.n	800687a <mount_volume+0x18e>
 8006876:	230d      	movs	r3, #13
 8006878:	e153      	b.n	8006b22 <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800687a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687c:	78db      	ldrb	r3, [r3, #3]
 800687e:	461a      	mov	r2, r3
 8006880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006882:	fb02 f303 	mul.w	r3, r2, r3
 8006886:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800688e:	461a      	mov	r2, r3
 8006890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006892:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006896:	895b      	ldrh	r3, [r3, #10]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d008      	beq.n	80068ae <mount_volume+0x1c2>
 800689c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689e:	895b      	ldrh	r3, [r3, #10]
 80068a0:	461a      	mov	r2, r3
 80068a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a4:	895b      	ldrh	r3, [r3, #10]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	4013      	ands	r3, r2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <mount_volume+0x1c6>
 80068ae:	230d      	movs	r3, #13
 80068b0:	e137      	b.n	8006b22 <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80068b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b4:	3334      	adds	r3, #52	@ 0x34
 80068b6:	3311      	adds	r3, #17
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe fc6f 	bl	800519c <ld_word>
 80068be:	4603      	mov	r3, r0
 80068c0:	461a      	mov	r2, r3
 80068c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c4:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80068c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c8:	891b      	ldrh	r3, [r3, #8]
 80068ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068cc:	8992      	ldrh	r2, [r2, #12]
 80068ce:	0952      	lsrs	r2, r2, #5
 80068d0:	b292      	uxth	r2, r2
 80068d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80068d6:	fb01 f202 	mul.w	r2, r1, r2
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <mount_volume+0x1fa>
 80068e2:	230d      	movs	r3, #13
 80068e4:	e11d      	b.n	8006b22 <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80068e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e8:	3334      	adds	r3, #52	@ 0x34
 80068ea:	3313      	adds	r3, #19
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fe fc55 	bl	800519c <ld_word>
 80068f2:	4603      	mov	r3, r0
 80068f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80068f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d106      	bne.n	800690a <mount_volume+0x21e>
 80068fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fe:	3334      	adds	r3, #52	@ 0x34
 8006900:	3320      	adds	r3, #32
 8006902:	4618      	mov	r0, r3
 8006904:	f7fe fc63 	bl	80051ce <ld_dword>
 8006908:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800690a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690c:	3334      	adds	r3, #52	@ 0x34
 800690e:	330e      	adds	r3, #14
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe fc43 	bl	800519c <ld_word>
 8006916:	4603      	mov	r3, r0
 8006918:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800691a:	8bfb      	ldrh	r3, [r7, #30]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <mount_volume+0x238>
 8006920:	230d      	movs	r3, #13
 8006922:	e0fe      	b.n	8006b22 <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006924:	8bfa      	ldrh	r2, [r7, #30]
 8006926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006928:	4413      	add	r3, r2
 800692a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800692c:	8911      	ldrh	r1, [r2, #8]
 800692e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006930:	8992      	ldrh	r2, [r2, #12]
 8006932:	0952      	lsrs	r2, r2, #5
 8006934:	b292      	uxth	r2, r2
 8006936:	fbb1 f2f2 	udiv	r2, r1, r2
 800693a:	b292      	uxth	r2, r2
 800693c:	4413      	add	r3, r2
 800693e:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006940:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	429a      	cmp	r2, r3
 8006946:	d201      	bcs.n	800694c <mount_volume+0x260>
 8006948:	230d      	movs	r3, #13
 800694a:	e0ea      	b.n	8006b22 <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800694c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006954:	8952      	ldrh	r2, [r2, #10]
 8006956:	fbb3 f3f2 	udiv	r3, r3, r2
 800695a:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <mount_volume+0x27a>
 8006962:	230d      	movs	r3, #13
 8006964:	e0dd      	b.n	8006b22 <mount_volume+0x436>
		fmt = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	4a0c      	ldr	r2, [pc, #48]	@ (80069a0 <mount_volume+0x2b4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d801      	bhi.n	8006976 <mount_volume+0x28a>
 8006972:	2303      	movs	r3, #3
 8006974:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800697c:	4293      	cmp	r3, r2
 800697e:	d801      	bhi.n	8006984 <mount_volume+0x298>
 8006980:	2302      	movs	r3, #2
 8006982:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800698a:	4293      	cmp	r3, r2
 800698c:	d801      	bhi.n	8006992 <mount_volume+0x2a6>
 800698e:	2301      	movs	r3, #1
 8006990:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8006992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006994:	2b00      	cmp	r3, #0
 8006996:	d105      	bne.n	80069a4 <mount_volume+0x2b8>
 8006998:	230d      	movs	r3, #13
 800699a:	e0c2      	b.n	8006b22 <mount_volume+0x436>
 800699c:	20007500 	.word	0x20007500
 80069a0:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	1c9a      	adds	r2, r3, #2
 80069a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069aa:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80069ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ae:	6a3a      	ldr	r2, [r7, #32]
 80069b0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80069b2:	8bfa      	ldrh	r2, [r7, #30]
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	441a      	add	r2, r3
 80069b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ba:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80069bc:	6a3a      	ldr	r2, [r7, #32]
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	441a      	add	r2, r3
 80069c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c4:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d11e      	bne.n	8006a0a <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80069cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ce:	3334      	adds	r3, #52	@ 0x34
 80069d0:	332a      	adds	r3, #42	@ 0x2a
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe fbe2 	bl	800519c <ld_word>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <mount_volume+0x2f6>
 80069de:	230d      	movs	r3, #13
 80069e0:	e09f      	b.n	8006b22 <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80069e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e4:	891b      	ldrh	r3, [r3, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <mount_volume+0x302>
 80069ea:	230d      	movs	r3, #13
 80069ec:	e099      	b.n	8006b22 <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80069ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f0:	3334      	adds	r3, #52	@ 0x34
 80069f2:	332c      	adds	r3, #44	@ 0x2c
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fbea 	bl	80051ce <ld_dword>
 80069fa:	4602      	mov	r2, r0
 80069fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fe:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a08:	e01e      	b.n	8006a48 <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0c:	891b      	ldrh	r3, [r3, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <mount_volume+0x32a>
 8006a12:	230d      	movs	r3, #13
 8006a14:	e085      	b.n	8006b22 <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1c:	441a      	add	r2, r3
 8006a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a20:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d103      	bne.n	8006a30 <mount_volume+0x344>
 8006a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	e00a      	b.n	8006a46 <mount_volume+0x35a>
 8006a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a32:	699a      	ldr	r2, [r3, #24]
 8006a34:	4613      	mov	r3, r2
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	4413      	add	r3, r2
 8006a3a:	085a      	lsrs	r2, r3, #1
 8006a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006a46:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4a:	69da      	ldr	r2, [r3, #28]
 8006a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4e:	899b      	ldrh	r3, [r3, #12]
 8006a50:	4619      	mov	r1, r3
 8006a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a54:	440b      	add	r3, r1
 8006a56:	3b01      	subs	r3, #1
 8006a58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a5a:	8989      	ldrh	r1, [r1, #12]
 8006a5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d201      	bcs.n	8006a68 <mount_volume+0x37c>
 8006a64:	230d      	movs	r3, #13
 8006a66:	e05c      	b.n	8006b22 <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6e:	615a      	str	r2, [r3, #20]
 8006a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a72:	695a      	ldr	r2, [r3, #20]
 8006a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a76:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7a:	2280      	movs	r2, #128	@ 0x80
 8006a7c:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d13f      	bne.n	8006b04 <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a86:	3334      	adds	r3, #52	@ 0x34
 8006a88:	3330      	adds	r3, #48	@ 0x30
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe fb86 	bl	800519c <ld_word>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d136      	bne.n	8006b04 <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a9e:	f7fe fc5e 	bl	800535e <move_window>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d12d      	bne.n	8006b04 <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 8006aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aaa:	2200      	movs	r2, #0
 8006aac:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8006aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab0:	3334      	adds	r3, #52	@ 0x34
 8006ab2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe fb70 	bl	800519c <ld_word>
 8006abc:	4603      	mov	r3, r0
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d11d      	bne.n	8006b04 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aca:	3334      	adds	r3, #52	@ 0x34
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fe fb7e 	bl	80051ce <ld_dword>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	4a15      	ldr	r2, [pc, #84]	@ (8006b2c <mount_volume+0x440>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d114      	bne.n	8006b04 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006adc:	3334      	adds	r3, #52	@ 0x34
 8006ade:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fe fb73 	bl	80051ce <ld_dword>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	4a11      	ldr	r2, [pc, #68]	@ (8006b30 <mount_volume+0x444>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d109      	bne.n	8006b04 <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af2:	3334      	adds	r3, #52	@ 0x34
 8006af4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fe fb68 	bl	80051ce <ld_dword>
 8006afe:	4602      	mov	r2, r0
 8006b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b02:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 8006b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8006b0c:	4b09      	ldr	r3, [pc, #36]	@ (8006b34 <mount_volume+0x448>)
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	3301      	adds	r3, #1
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	4b07      	ldr	r3, [pc, #28]	@ (8006b34 <mount_volume+0x448>)
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	4b06      	ldr	r3, [pc, #24]	@ (8006b34 <mount_volume+0x448>)
 8006b1a:	881a      	ldrh	r2, [r3, #0]
 8006b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1e:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3740      	adds	r7, #64	@ 0x40
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	41615252 	.word	0x41615252
 8006b30:	61417272 	.word	0x61417272
 8006b34:	20007508 	.word	0x20007508

08006b38 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006b42:	2309      	movs	r3, #9
 8006b44:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01c      	beq.n	8006b86 <validate+0x4e>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d018      	beq.n	8006b86 <validate+0x4e>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d013      	beq.n	8006b86 <validate+0x4e>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	889a      	ldrh	r2, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	88db      	ldrh	r3, [r3, #6]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d10c      	bne.n	8006b86 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	785b      	ldrb	r3, [r3, #1]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe f9da 	bl	8004f2c <disk_status>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <validate+0x4e>
			res = FR_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <validate+0x5a>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	e000      	b.n	8006b94 <validate+0x5c>
 8006b92:	2300      	movs	r3, #0
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	6013      	str	r3, [r2, #0]
	return res;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8006bb6:	f107 0310 	add.w	r3, r7, #16
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff fbf8 	bl	80063b0 <get_ldnumber>
 8006bc0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	da01      	bge.n	8006bcc <f_mount+0x28>
 8006bc8:	230b      	movs	r3, #11
 8006bca:	e02e      	b.n	8006c2a <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8006bcc:	4a19      	ldr	r2, [pc, #100]	@ (8006c34 <f_mount+0x90>)
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bd4:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d007      	beq.n	8006bec <f_mount+0x48>
		FatFs[vol] = 0;
 8006bdc:	4a15      	ldr	r2, [pc, #84]	@ (8006c34 <f_mount+0x90>)
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	2100      	movs	r1, #0
 8006be2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00b      	beq.n	8006c0a <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	490c      	ldr	r1, [pc, #48]	@ (8006c34 <f_mount+0x90>)
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <f_mount+0x70>
 8006c10:	2300      	movs	r3, #0
 8006c12:	e00a      	b.n	8006c2a <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006c14:	f107 010c 	add.w	r1, r7, #12
 8006c18:	f107 0308 	add.w	r3, r7, #8
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff fd64 	bl	80066ec <mount_volume>
 8006c24:	4603      	mov	r3, r0
 8006c26:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3720      	adds	r7, #32
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20007500 	.word	0x20007500

08006c38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b098      	sub	sp, #96	@ 0x60
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	4613      	mov	r3, r2
 8006c44:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <f_open+0x18>
 8006c4c:	2309      	movs	r3, #9
 8006c4e:	e184      	b.n	8006f5a <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8006c50:	79fb      	ldrb	r3, [r7, #7]
 8006c52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c56:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 8006c58:	79fa      	ldrb	r2, [r7, #7]
 8006c5a:	f107 0114 	add.w	r1, r7, #20
 8006c5e:	f107 0308 	add.w	r3, r7, #8
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7ff fd42 	bl	80066ec <mount_volume>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8006c6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f040 8168 	bne.w	8006f48 <f_open+0x310>
		dj.obj.fs = fs;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	f107 0318 	add.w	r3, r7, #24
 8006c82:	4611      	mov	r1, r2
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff fb1f 	bl	80062c8 <follow_path>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8006c90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d107      	bne.n	8006ca8 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006c98:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006c9c:	b25b      	sxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	da02      	bge.n	8006ca8 <f_open+0x70>
				res = FR_INVALID_NAME;
 8006ca2:	2306      	movs	r3, #6
 8006ca4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
 8006caa:	f003 031c 	and.w	r3, r3, #28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d077      	beq.n	8006da2 <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 8006cb2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d010      	beq.n	8006cdc <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006cba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	d107      	bne.n	8006cd2 <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8006cc2:	f107 0318 	add.w	r3, r7, #24
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff f9d5 	bl	8006076 <dir_register>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	f043 0308 	orr.w	r3, r3, #8
 8006cd8:	71fb      	strb	r3, [r7, #7]
 8006cda:	e010      	b.n	8006cfe <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006cdc:	7fbb      	ldrb	r3, [r7, #30]
 8006cde:	f003 0311 	and.w	r3, r3, #17
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <f_open+0xb6>
					res = FR_DENIED;
 8006ce6:	2307      	movs	r3, #7
 8006ce8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006cec:	e007      	b.n	8006cfe <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006cee:	79fb      	ldrb	r3, [r7, #7]
 8006cf0:	f003 0304 	and.w	r3, r3, #4
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <f_open+0xc6>
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8006cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d167      	bne.n	8006dd6 <f_open+0x19e>
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d062      	beq.n	8006dd6 <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 8006d10:	4b94      	ldr	r3, [pc, #592]	@ (8006f64 <f_open+0x32c>)
 8006d12:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 8006d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d16:	330e      	adds	r3, #14
 8006d18:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fa95 	bl	800524a <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 8006d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d22:	3316      	adds	r3, #22
 8006d24:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fa8f 	bl	800524a <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d30:	4611      	mov	r1, r2
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff f8ae 	bl	8005e94 <ld_clust>
 8006d38:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d3c:	330b      	adds	r3, #11
 8006d3e:	2220      	movs	r2, #32
 8006d40:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006d46:	2200      	movs	r2, #0
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff f8c2 	bl	8005ed2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d50:	331c      	adds	r3, #28
 8006d52:	2100      	movs	r1, #0
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe fa78 	bl	800524a <st_dword>
					fs->wflag = 1;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8006d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d037      	beq.n	8006dd6 <f_open+0x19e>
						sc = fs->winsect;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8006d6c:	f107 0318 	add.w	r3, r7, #24
 8006d70:	2200      	movs	r2, #0
 8006d72:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7fe fd99 	bl	80058ac <remove_chain>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8006d80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d126      	bne.n	8006dd6 <f_open+0x19e>
							res = move_window(fs, sc);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fe fae6 	bl	800535e <move_window>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d9c:	3a01      	subs	r2, #1
 8006d9e:	611a      	str	r2, [r3, #16]
 8006da0:	e019      	b.n	8006dd6 <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8006da2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d115      	bne.n	8006dd6 <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8006daa:	7fbb      	ldrb	r3, [r7, #30]
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <f_open+0x184>
					res = FR_NO_FILE;
 8006db4:	2304      	movs	r3, #4
 8006db6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006dba:	e00c      	b.n	8006dd6 <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d007      	beq.n	8006dd6 <f_open+0x19e>
 8006dc6:	7fbb      	ldrb	r3, [r7, #30]
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <f_open+0x19e>
						res = FR_DENIED;
 8006dd0:	2307      	movs	r3, #7
 8006dd2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006dd6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10f      	bne.n	8006dfe <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	f003 0308 	and.w	r3, r3, #8
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <f_open+0x1b8>
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dee:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8006df8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006dfe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f040 80a0 	bne.w	8006f48 <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff f840 	bl	8005e94 <ld_clust>
 8006e14:	4602      	mov	r2, r0
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e1c:	331c      	adds	r3, #28
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fe f9d5 	bl	80051ce <ld_dword>
 8006e24:	4602      	mov	r2, r0
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	88da      	ldrh	r2, [r3, #6]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	79fa      	ldrb	r2, [r7, #7]
 8006e3c:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3328      	adds	r3, #40	@ 0x28
 8006e54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006e58:	2100      	movs	r1, #0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f00a ffc4 	bl	8011de8 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d06e      	beq.n	8006f48 <f_open+0x310>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d06a      	beq.n	8006f48 <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	895b      	ldrh	r3, [r3, #10]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	899b      	ldrh	r3, [r3, #12]
 8006e84:	fb02 f303 	mul.w	r3, r2, r3
 8006e88:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e96:	e016      	b.n	8006ec6 <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe fb18 	bl	80054d2 <get_fat>
 8006ea2:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006ea4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d802      	bhi.n	8006eb0 <f_open+0x278>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006eb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb6:	d102      	bne.n	8006ebe <f_open+0x286>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ebe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ec6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d103      	bne.n	8006ed6 <f_open+0x29e>
 8006ece:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d8e0      	bhi.n	8006e98 <f_open+0x260>
				}
				fp->clust = clst;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006eda:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006edc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d131      	bne.n	8006f48 <f_open+0x310>
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	899b      	ldrh	r3, [r3, #12]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eec:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ef0:	fb01 f202 	mul.w	r2, r1, r2
 8006ef4:	1a9b      	subs	r3, r3, r2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d026      	beq.n	8006f48 <f_open+0x310>
					sc = clst2sect(fs, clst);
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe fac8 	bl	8005494 <clst2sect>
 8006f04:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 8006f06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d103      	bne.n	8006f14 <f_open+0x2dc>
						res = FR_INT_ERR;
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006f12:	e019      	b.n	8006f48 <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	899b      	ldrh	r3, [r3, #12]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f1c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f22:	441a      	add	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	7858      	ldrb	r0, [r3, #1]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	69da      	ldr	r2, [r3, #28]
 8006f36:	2301      	movs	r3, #1
 8006f38:	f7fe f848 	bl	8004fcc <disk_read>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <f_open+0x310>
 8006f42:	2301      	movs	r3, #1
 8006f44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006f48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <f_open+0x31e>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006f56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3760      	adds	r7, #96	@ 0x60
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	54210000 	.word	0x54210000

08006f68 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08e      	sub	sp, #56	@ 0x38
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f107 0214 	add.w	r2, r7, #20
 8006f86:	4611      	mov	r1, r2
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff fdd5 	bl	8006b38 <validate>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006f94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d107      	bne.n	8006fac <f_read+0x44>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	7c5b      	ldrb	r3, [r3, #17]
 8006fa0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006fa4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <f_read+0x4a>
 8006fac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fb0:	e129      	b.n	8007206 <f_read+0x29e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	7c1b      	ldrb	r3, [r3, #16]
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <f_read+0x5a>
 8006fbe:	2307      	movs	r3, #7
 8006fc0:	e121      	b.n	8007206 <f_read+0x29e>
	remain = fp->obj.objsize - fp->fptr;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	f240 8112 	bls.w	80071fc <f_read+0x294>
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8006fdc:	e10e      	b.n	80071fc <f_read+0x294>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	8992      	ldrh	r2, [r2, #12]
 8006fe6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fea:	fb01 f202 	mul.w	r2, r1, r2
 8006fee:	1a9b      	subs	r3, r3, r2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f040 80c9 	bne.w	8007188 <f_read+0x220>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	8992      	ldrh	r2, [r2, #12]
 8006ffe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	8952      	ldrh	r2, [r2, #10]
 8007006:	3a01      	subs	r2, #1
 8007008:	4013      	ands	r3, r2
 800700a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d123      	bne.n	800705a <f_read+0xf2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d103      	bne.n	8007022 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007020:	e007      	b.n	8007032 <f_read+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	4619      	mov	r1, r3
 800702a:	4610      	mov	r0, r2
 800702c:	f7fe fa51 	bl	80054d2 <get_fat>
 8007030:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007034:	2b01      	cmp	r3, #1
 8007036:	d804      	bhi.n	8007042 <f_read+0xda>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2202      	movs	r2, #2
 800703c:	745a      	strb	r2, [r3, #17]
 800703e:	2302      	movs	r3, #2
 8007040:	e0e1      	b.n	8007206 <f_read+0x29e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007048:	d104      	bne.n	8007054 <f_read+0xec>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	745a      	strb	r2, [r3, #17]
 8007050:	2301      	movs	r3, #1
 8007052:	e0d8      	b.n	8007206 <f_read+0x29e>
				fp->clust = clst;				/* Update current cluster */
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007058:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	4619      	mov	r1, r3
 8007062:	4610      	mov	r0, r2
 8007064:	f7fe fa16 	bl	8005494 <clst2sect>
 8007068:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d104      	bne.n	800707a <f_read+0x112>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2202      	movs	r2, #2
 8007074:	745a      	strb	r2, [r3, #17]
 8007076:	2302      	movs	r3, #2
 8007078:	e0c5      	b.n	8007206 <f_read+0x29e>
			sect += csect;
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	4413      	add	r3, r2
 8007080:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	899b      	ldrh	r3, [r3, #12]
 8007086:	461a      	mov	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	fbb3 f3f2 	udiv	r3, r3, r2
 800708e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	2b00      	cmp	r3, #0
 8007094:	d041      	beq.n	800711a <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709a:	4413      	add	r3, r2
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	8952      	ldrh	r2, [r2, #10]
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d905      	bls.n	80070b0 <f_read+0x148>
					cc = fs->csize - csect;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	895b      	ldrh	r3, [r3, #10]
 80070a8:	461a      	mov	r2, r3
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	7858      	ldrb	r0, [r3, #1]
 80070b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070ba:	f7fd ff87 	bl	8004fcc <disk_read>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d004      	beq.n	80070ce <f_read+0x166>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2201      	movs	r2, #1
 80070c8:	745a      	strb	r2, [r3, #17]
 80070ca:	2301      	movs	r3, #1
 80070cc:	e09b      	b.n	8007206 <f_read+0x29e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	7c1b      	ldrb	r3, [r3, #16]
 80070d2:	b25b      	sxtb	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	da18      	bge.n	800710a <f_read+0x1a2>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	69da      	ldr	r2, [r3, #28]
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d911      	bls.n	800710a <f_read+0x1a2>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	69da      	ldr	r2, [r3, #28]
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	8992      	ldrh	r2, [r2, #12]
 80070f2:	fb02 f303 	mul.w	r3, r2, r3
 80070f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070f8:	18d0      	adds	r0, r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	899b      	ldrh	r3, [r3, #12]
 8007104:	461a      	mov	r2, r3
 8007106:	f00a fef3 	bl	8011ef0 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	899b      	ldrh	r3, [r3, #12]
 800710e:	461a      	mov	r2, r3
 8007110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007112:	fb02 f303 	mul.w	r3, r2, r3
 8007116:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007118:	e05c      	b.n	80071d4 <f_read+0x26c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	429a      	cmp	r2, r3
 8007122:	d02e      	beq.n	8007182 <f_read+0x21a>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	7c1b      	ldrb	r3, [r3, #16]
 8007128:	b25b      	sxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	da18      	bge.n	8007160 <f_read+0x1f8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	7858      	ldrb	r0, [r3, #1]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	69da      	ldr	r2, [r3, #28]
 800713c:	2301      	movs	r3, #1
 800713e:	f7fd ff77 	bl	8005030 <disk_write>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d004      	beq.n	8007152 <f_read+0x1ea>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2201      	movs	r2, #1
 800714c:	745a      	strb	r2, [r3, #17]
 800714e:	2301      	movs	r3, #1
 8007150:	e059      	b.n	8007206 <f_read+0x29e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	7c1b      	ldrb	r3, [r3, #16]
 8007156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800715a:	b2da      	uxtb	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	7858      	ldrb	r0, [r3, #1]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800716a:	2301      	movs	r3, #1
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	f7fd ff2d 	bl	8004fcc <disk_read>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <f_read+0x21a>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	745a      	strb	r2, [r3, #17]
 800717e:	2301      	movs	r3, #1
 8007180:	e041      	b.n	8007206 <f_read+0x29e>
			}
#endif
			fp->sect = sect;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	899b      	ldrh	r3, [r3, #12]
 800718c:	4618      	mov	r0, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	8992      	ldrh	r2, [r2, #12]
 8007196:	fbb3 f1f2 	udiv	r1, r3, r2
 800719a:	fb01 f202 	mul.w	r2, r1, r2
 800719e:	1a9b      	subs	r3, r3, r2
 80071a0:	1ac3      	subs	r3, r0, r3
 80071a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80071a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d901      	bls.n	80071b0 <f_read+0x248>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	8992      	ldrh	r2, [r2, #12]
 80071be:	fbb3 f0f2 	udiv	r0, r3, r2
 80071c2:	fb00 f202 	mul.w	r2, r0, r2
 80071c6:	1a9b      	subs	r3, r3, r2
 80071c8:	440b      	add	r3, r1
 80071ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071cc:	4619      	mov	r1, r3
 80071ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80071d0:	f00a fe8e 	bl	8011ef0 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	607b      	str	r3, [r7, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e2:	441a      	add	r2, r3
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ec:	4413      	add	r3, r2
 80071ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	695a      	ldr	r2, [r3, #20]
 80071f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f6:	441a      	add	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	615a      	str	r2, [r3, #20]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f47f aeed 	bne.w	8006fde <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3738      	adds	r7, #56	@ 0x38
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b08c      	sub	sp, #48	@ 0x30
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	607a      	str	r2, [r7, #4]
 800721a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f107 0210 	add.w	r2, r7, #16
 800722c:	4611      	mov	r1, r2
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff fc82 	bl	8006b38 <validate>
 8007234:	4603      	mov	r3, r0
 8007236:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800723a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800723e:	2b00      	cmp	r3, #0
 8007240:	d107      	bne.n	8007252 <f_write+0x44>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	7c5b      	ldrb	r3, [r3, #17]
 8007246:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800724a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <f_write+0x4a>
 8007252:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007256:	e15e      	b.n	8007516 <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	7c1b      	ldrb	r3, [r3, #16]
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <f_write+0x5a>
 8007264:	2307      	movs	r3, #7
 8007266:	e156      	b.n	8007516 <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	695a      	ldr	r2, [r3, #20]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	441a      	add	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	429a      	cmp	r2, r3
 8007276:	f080 8140 	bcs.w	80074fa <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	43db      	mvns	r3, r3
 8007280:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8007282:	e13a      	b.n	80074fa <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	8992      	ldrh	r2, [r2, #12]
 800728c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007290:	fb01 f202 	mul.w	r2, r1, r2
 8007294:	1a9b      	subs	r3, r3, r2
 8007296:	2b00      	cmp	r3, #0
 8007298:	f040 80e5 	bne.w	8007466 <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	8992      	ldrh	r2, [r2, #12]
 80072a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	8952      	ldrh	r2, [r2, #10]
 80072ac:	3a01      	subs	r2, #1
 80072ae:	4013      	ands	r3, r2
 80072b0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d137      	bne.n	8007328 <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10c      	bne.n	80072da <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80072c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10e      	bne.n	80072ea <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2100      	movs	r1, #0
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe fb50 	bl	8005976 <create_chain>
 80072d6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80072d8:	e007      	b.n	80072ea <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	4619      	mov	r1, r3
 80072e2:	4610      	mov	r0, r2
 80072e4:	f7fe fb47 	bl	8005976 <create_chain>
 80072e8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80072ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 8109 	beq.w	8007504 <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80072f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d104      	bne.n	8007302 <f_write+0xf4>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2202      	movs	r2, #2
 80072fc:	745a      	strb	r2, [r3, #17]
 80072fe:	2302      	movs	r3, #2
 8007300:	e109      	b.n	8007516 <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007308:	d104      	bne.n	8007314 <f_write+0x106>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2201      	movs	r2, #1
 800730e:	745a      	strb	r2, [r3, #17]
 8007310:	2301      	movs	r3, #1
 8007312:	e100      	b.n	8007516 <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007318:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d102      	bne.n	8007328 <f_write+0x11a>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007326:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	7c1b      	ldrb	r3, [r3, #16]
 800732c:	b25b      	sxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	da18      	bge.n	8007364 <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	7858      	ldrb	r0, [r3, #1]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	69da      	ldr	r2, [r3, #28]
 8007340:	2301      	movs	r3, #1
 8007342:	f7fd fe75 	bl	8005030 <disk_write>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d004      	beq.n	8007356 <f_write+0x148>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2201      	movs	r2, #1
 8007350:	745a      	strb	r2, [r3, #17]
 8007352:	2301      	movs	r3, #1
 8007354:	e0df      	b.n	8007516 <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	7c1b      	ldrb	r3, [r3, #16]
 800735a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800735e:	b2da      	uxtb	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	4619      	mov	r1, r3
 800736c:	4610      	mov	r0, r2
 800736e:	f7fe f891 	bl	8005494 <clst2sect>
 8007372:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d104      	bne.n	8007384 <f_write+0x176>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2202      	movs	r2, #2
 800737e:	745a      	strb	r2, [r3, #17]
 8007380:	2302      	movs	r3, #2
 8007382:	e0c8      	b.n	8007516 <f_write+0x308>
			sect += csect;
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	4413      	add	r3, r2
 800738a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	899b      	ldrh	r3, [r3, #12]
 8007390:	461a      	mov	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	fbb3 f3f2 	udiv	r3, r3, r2
 8007398:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d043      	beq.n	8007428 <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	4413      	add	r3, r2
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	8952      	ldrh	r2, [r2, #10]
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d905      	bls.n	80073ba <f_write+0x1ac>
					cc = fs->csize - csect;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	895b      	ldrh	r3, [r3, #10]
 80073b2:	461a      	mov	r2, r3
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	7858      	ldrb	r0, [r3, #1]
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	69f9      	ldr	r1, [r7, #28]
 80073c4:	f7fd fe34 	bl	8005030 <disk_write>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d004      	beq.n	80073d8 <f_write+0x1ca>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	745a      	strb	r2, [r3, #17]
 80073d4:	2301      	movs	r3, #1
 80073d6:	e09e      	b.n	8007516 <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	69da      	ldr	r2, [r3, #28]
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	6a3a      	ldr	r2, [r7, #32]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d918      	bls.n	8007418 <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	69da      	ldr	r2, [r3, #28]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	8992      	ldrh	r2, [r2, #12]
 80073f8:	fb02 f303 	mul.w	r3, r2, r3
 80073fc:	69fa      	ldr	r2, [r7, #28]
 80073fe:	18d1      	adds	r1, r2, r3
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	899b      	ldrh	r3, [r3, #12]
 8007404:	461a      	mov	r2, r3
 8007406:	f00a fd73 	bl	8011ef0 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	7c1b      	ldrb	r3, [r3, #16]
 800740e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007412:	b2da      	uxtb	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	899b      	ldrh	r3, [r3, #12]
 800741c:	461a      	mov	r2, r3
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	fb02 f303 	mul.w	r3, r2, r3
 8007424:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007426:	e04b      	b.n	80074c0 <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	429a      	cmp	r2, r3
 8007430:	d016      	beq.n	8007460 <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	695a      	ldr	r2, [r3, #20]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800743a:	429a      	cmp	r2, r3
 800743c:	d210      	bcs.n	8007460 <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	7858      	ldrb	r0, [r3, #1]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007448:	2301      	movs	r3, #1
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	f7fd fdbe 	bl	8004fcc <disk_read>
 8007450:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007452:	2b00      	cmp	r3, #0
 8007454:	d004      	beq.n	8007460 <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2201      	movs	r2, #1
 800745a:	745a      	strb	r2, [r3, #17]
 800745c:	2301      	movs	r3, #1
 800745e:	e05a      	b.n	8007516 <f_write+0x308>
			}
#endif
			fp->sect = sect;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	899b      	ldrh	r3, [r3, #12]
 800746a:	4618      	mov	r0, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	8992      	ldrh	r2, [r2, #12]
 8007474:	fbb3 f1f2 	udiv	r1, r3, r2
 8007478:	fb01 f202 	mul.w	r2, r1, r2
 800747c:	1a9b      	subs	r3, r3, r2
 800747e:	1ac3      	subs	r3, r0, r3
 8007480:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	429a      	cmp	r2, r3
 8007488:	d901      	bls.n	800748e <f_write+0x280>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	8992      	ldrh	r2, [r2, #12]
 800749c:	fbb3 f0f2 	udiv	r0, r3, r2
 80074a0:	fb00 f202 	mul.w	r2, r0, r2
 80074a4:	1a9b      	subs	r3, r3, r2
 80074a6:	440b      	add	r3, r1
 80074a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074aa:	69f9      	ldr	r1, [r7, #28]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f00a fd1f 	bl	8011ef0 <memcpy>
		fp->flag |= FA_DIRTY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	7c1b      	ldrb	r3, [r3, #16]
 80074b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	607b      	str	r3, [r7, #4]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ce:	441a      	add	r2, r3
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	69fa      	ldr	r2, [r7, #28]
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d8:	4413      	add	r3, r2
 80074da:	61fb      	str	r3, [r7, #28]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	695a      	ldr	r2, [r3, #20]
 80074e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e2:	441a      	add	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	615a      	str	r2, [r3, #20]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	bf38      	it	cc
 80074f4:	461a      	movcc	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	60da      	str	r2, [r3, #12]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f47f aec1 	bne.w	8007284 <f_write+0x76>
 8007502:	e000      	b.n	8007506 <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007504:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	7c1b      	ldrb	r3, [r3, #16]
 800750a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800750e:	b2da      	uxtb	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3730      	adds	r7, #48	@ 0x30
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f107 0208 	add.w	r2, r7, #8
 800752e:	4611      	mov	r1, r2
 8007530:	4618      	mov	r0, r3
 8007532:	f7ff fb01 	bl	8006b38 <validate>
 8007536:	4603      	mov	r3, r0
 8007538:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800753a:	7dfb      	ldrb	r3, [r7, #23]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d167      	bne.n	8007610 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	7c1b      	ldrb	r3, [r3, #16]
 8007544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007548:	2b00      	cmp	r3, #0
 800754a:	d061      	beq.n	8007610 <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	7c1b      	ldrb	r3, [r3, #16]
 8007550:	b25b      	sxtb	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	da15      	bge.n	8007582 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	7858      	ldrb	r0, [r3, #1]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	69da      	ldr	r2, [r3, #28]
 8007564:	2301      	movs	r3, #1
 8007566:	f7fd fd63 	bl	8005030 <disk_write>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <f_sync+0x54>
 8007570:	2301      	movs	r3, #1
 8007572:	e04e      	b.n	8007612 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	7c1b      	ldrb	r3, [r3, #16]
 8007578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800757c:	b2da      	uxtb	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007582:	4b26      	ldr	r3, [pc, #152]	@ (800761c <f_sync+0xfc>)
 8007584:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	4619      	mov	r1, r3
 800758e:	4610      	mov	r0, r2
 8007590:	f7fd fee5 	bl	800535e <move_window>
 8007594:	4603      	mov	r3, r0
 8007596:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d138      	bne.n	8007610 <f_sync+0xf0>
					dir = fp->dir_ptr;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	330b      	adds	r3, #11
 80075a8:	781a      	ldrb	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	330b      	adds	r3, #11
 80075ae:	f042 0220 	orr.w	r2, r2, #32
 80075b2:	b2d2      	uxtb	r2, r2
 80075b4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	461a      	mov	r2, r3
 80075c0:	68f9      	ldr	r1, [r7, #12]
 80075c2:	f7fe fc86 	bl	8005ed2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f103 021c 	add.w	r2, r3, #28
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	4619      	mov	r1, r3
 80075d2:	4610      	mov	r0, r2
 80075d4:	f7fd fe39 	bl	800524a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3316      	adds	r3, #22
 80075dc:	6939      	ldr	r1, [r7, #16]
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fd fe33 	bl	800524a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3312      	adds	r3, #18
 80075e8:	2100      	movs	r1, #0
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fd fe12 	bl	8005214 <st_word>
					fs->wflag = 1;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2201      	movs	r2, #1
 80075f4:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fd fedd 	bl	80053b8 <sync_fs>
 80075fe:	4603      	mov	r3, r0
 8007600:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	7c1b      	ldrb	r3, [r3, #16]
 8007606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800760a:	b2da      	uxtb	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007610:	7dfb      	ldrb	r3, [r7, #23]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	54210000 	.word	0x54210000

08007620 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff ff79 	bl	8007520 <f_sync>
 800762e:	4603      	mov	r3, r0
 8007630:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10e      	bne.n	8007656 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f107 0208 	add.w	r2, r7, #8
 800763e:	4611      	mov	r1, r2
 8007640:	4618      	mov	r0, r3
 8007642:	f7ff fa79 	bl	8006b38 <validate>
 8007646:	4603      	mov	r3, r0
 8007648:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d102      	bne.n	8007656 <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007656:	7bfb      	ldrb	r3, [r7, #15]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b09c      	sub	sp, #112	@ 0x70
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;
	DIR dj, sdj;
	DWORD dclst = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	66bb      	str	r3, [r7, #104]	@ 0x68
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
 800766c:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8007670:	1d3b      	adds	r3, r7, #4
 8007672:	2202      	movs	r2, #2
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff f839 	bl	80066ec <mount_volume>
 800767a:	4603      	mov	r3, r0
 800767c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 8007680:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007684:	2b00      	cmp	r3, #0
 8007686:	f040 8083 	bne.w	8007790 <f_unlink+0x130>
		dj.obj.fs = fs;
 800768a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800768c:	63bb      	str	r3, [r7, #56]	@ 0x38
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007694:	4611      	mov	r1, r2
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe fe16 	bl	80062c8 <follow_path>
 800769c:	4603      	mov	r3, r0
 800769e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if FF_FS_LOCK
		if (res == FR_OK) res = chk_share(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80076a2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d172      	bne.n	8007790 <f_unlink+0x130>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80076aa:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80076ae:	b25b      	sxtb	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	da03      	bge.n	80076bc <f_unlink+0x5c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80076b4:	2306      	movs	r3, #6
 80076b6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80076ba:	e008      	b.n	80076ce <f_unlink+0x6e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80076bc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <f_unlink+0x6e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80076c8:	2307      	movs	r3, #7
 80076ca:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
			}
			if (res == FR_OK) {
 80076ce:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d134      	bne.n	8007740 <f_unlink+0xe0>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80076d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80076da:	4611      	mov	r1, r2
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fe fbd9 	bl	8005e94 <ld_clust>
 80076e2:	66b8      	str	r0, [r7, #104]	@ 0x68
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80076e4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80076e8:	f003 0310 	and.w	r3, r3, #16
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d027      	beq.n	8007740 <f_unlink+0xe0>
					if (dclst == fs->cdir) {	 	/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;			/* Open the sub-directory */
 80076f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076f2:	60fb      	str	r3, [r7, #12]
						sdj.obj.sclust = dclst;
 80076f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076f6:	617b      	str	r3, [r7, #20]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80076f8:	f107 030c 	add.w	r3, r7, #12
 80076fc:	2100      	movs	r1, #0
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe fa52 	bl	8005ba8 <dir_sdi>
 8007704:	4603      	mov	r3, r0
 8007706:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 800770a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800770e:	2b00      	cmp	r3, #0
 8007710:	d116      	bne.n	8007740 <f_unlink+0xe0>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 8007712:	f107 030c 	add.w	r3, r7, #12
 8007716:	2100      	movs	r1, #0
 8007718:	4618      	mov	r0, r3
 800771a:	f7fe fbfa 	bl	8005f12 <dir_read>
 800771e:	4603      	mov	r3, r0
 8007720:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8007724:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007728:	2b00      	cmp	r3, #0
 800772a:	d102      	bne.n	8007732 <f_unlink+0xd2>
 800772c:	2307      	movs	r3, #7
 800772e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8007732:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007736:	2b04      	cmp	r3, #4
 8007738:	d102      	bne.n	8007740 <f_unlink+0xe0>
 800773a:	2300      	movs	r3, #0
 800773c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						}
					}
				}
			}
			if (res == FR_OK) {
 8007740:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007744:	2b00      	cmp	r3, #0
 8007746:	d123      	bne.n	8007790 <f_unlink+0x130>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8007748:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800774c:	4618      	mov	r0, r3
 800774e:	f7fe fcc4 	bl	80060da <dir_remove>
 8007752:	4603      	mov	r3, r0
 8007754:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 8007758:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10c      	bne.n	800777a <f_unlink+0x11a>
 8007760:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007762:	2b00      	cmp	r3, #0
 8007764:	d009      	beq.n	800777a <f_unlink+0x11a>
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8007766:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800776a:	2200      	movs	r2, #0
 800776c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe f89c 	bl	80058ac <remove_chain>
 8007774:	4603      	mov	r3, r0
 8007776:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800777a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800777e:	2b00      	cmp	r3, #0
 8007780:	d106      	bne.n	8007790 <f_unlink+0x130>
 8007782:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007784:	4618      	mov	r0, r3
 8007786:	f7fd fe17 	bl	80053b8 <sync_fs>
 800778a:	4603      	mov	r3, r0
 800778c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8007790:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007794:	4618      	mov	r0, r3
 8007796:	3770      	adds	r7, #112	@ 0x70
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08e      	sub	sp, #56	@ 0x38
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	607b      	str	r3, [r7, #4]
 80077a6:	4603      	mov	r3, r0
 80077a8:	73fb      	strb	r3, [r7, #15]
 80077aa:	4613      	mov	r3, r2
 80077ac:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 80077ae:	f107 0210 	add.w	r2, r7, #16
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	2101      	movs	r1, #1
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fd fc6e 	bl	8005098 <disk_ioctl>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <create_partition+0x2a>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e108      	b.n	80079d8 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 80077ca:	233f      	movs	r3, #63	@ 0x3f
 80077cc:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 80077ce:	2308      	movs	r3, #8
 80077d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80077d4:	e004      	b.n	80077e0 <create_partition+0x44>
 80077d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80077e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <create_partition+0x62>
 80077e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077ec:	6a3a      	ldr	r2, [r7, #32]
 80077ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80077f2:	7ffb      	ldrb	r3, [r7, #31]
 80077f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077fc:	d8eb      	bhi.n	80077d6 <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 80077fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007802:	2b00      	cmp	r3, #0
 8007804:	d102      	bne.n	800780c <create_partition+0x70>
 8007806:	23ff      	movs	r3, #255	@ 0xff
 8007808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800780c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007810:	2100      	movs	r1, #0
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f00a fae8 	bl	8011de8 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800781e:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8007820:	2300      	movs	r3, #0
 8007822:	637b      	str	r3, [r7, #52]	@ 0x34
 8007824:	7ffb      	ldrb	r3, [r7, #31]
 8007826:	633b      	str	r3, [r7, #48]	@ 0x30
 8007828:	e0b5      	b.n	8007996 <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800782a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	4413      	add	r3, r2
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 8007836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007838:	2b64      	cmp	r3, #100	@ 0x64
 800783a:	d80d      	bhi.n	8007858 <create_partition+0xbc>
 800783c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783e:	2b64      	cmp	r3, #100	@ 0x64
 8007840:	d008      	beq.n	8007854 <create_partition+0xb8>
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	4a66      	ldr	r2, [pc, #408]	@ (80079e0 <create_partition+0x244>)
 8007846:	fba2 2303 	umull	r2, r3, r2, r3
 800784a:	095b      	lsrs	r3, r3, #5
 800784c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800784e:	fb02 f303 	mul.w	r3, r2, r3
 8007852:	e000      	b.n	8007856 <create_partition+0xba>
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 8007858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800785a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785c:	4413      	add	r3, r2
 800785e:	6a3a      	ldr	r2, [r7, #32]
 8007860:	429a      	cmp	r2, r3
 8007862:	d305      	bcc.n	8007870 <create_partition+0xd4>
 8007864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007868:	4413      	add	r3, r2
 800786a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800786c:	429a      	cmp	r2, r3
 800786e:	d903      	bls.n	8007878 <create_partition+0xdc>
 8007870:	6a3a      	ldr	r2, [r7, #32]
 8007872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 8007878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 8097 	beq.w	80079ae <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 8007880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007882:	3308      	adds	r3, #8
 8007884:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007886:	4618      	mov	r0, r3
 8007888:	f7fd fcdf 	bl	800524a <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800788c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788e:	330c      	adds	r3, #12
 8007890:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007892:	4618      	mov	r0, r3
 8007894:	f7fd fcd9 	bl	800524a <st_dword>
			pte[PTE_System] = sys;					/* System type */
 8007898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789a:	3304      	adds	r3, #4
 800789c:	7bba      	ldrb	r2, [r7, #14]
 800789e:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 80078a0:	7ffb      	ldrb	r3, [r7, #31]
 80078a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80078a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b0:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 80078b2:	7ffb      	ldrb	r3, [r7, #31]
 80078b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80078be:	fbb3 f1f2 	udiv	r1, r3, r2
 80078c2:	fb01 f202 	mul.w	r2, r1, r2
 80078c6:	1a9b      	subs	r3, r3, r2
 80078c8:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 80078ca:	7ffa      	ldrb	r2, [r7, #31]
 80078cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80078d2:	fb01 f202 	mul.w	r2, r1, r2
 80078d6:	1a9b      	subs	r3, r3, r2
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	3301      	adds	r3, #1
 80078dc:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 80078de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e0:	3301      	adds	r3, #1
 80078e2:	7dfa      	ldrb	r2, [r7, #23]
 80078e4:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	089b      	lsrs	r3, r3, #2
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80078f0:	b2d9      	uxtb	r1, r3
 80078f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f4:	3302      	adds	r3, #2
 80078f6:	7dba      	ldrb	r2, [r7, #22]
 80078f8:	430a      	orrs	r2, r1
 80078fa:	b2d2      	uxtb	r2, r2
 80078fc:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 80078fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007900:	3303      	adds	r3, #3
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	b2d2      	uxtb	r2, r2
 8007906:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 8007908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800790a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790c:	4413      	add	r3, r2
 800790e:	1e5a      	subs	r2, r3, #1
 8007910:	7ffb      	ldrb	r3, [r7, #31]
 8007912:	fbb2 f2f3 	udiv	r2, r2, r3
 8007916:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800791a:	fbb2 f3f3 	udiv	r3, r2, r3
 800791e:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 8007920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007924:	4413      	add	r3, r2
 8007926:	1e5a      	subs	r2, r3, #1
 8007928:	7ffb      	ldrb	r3, [r7, #31]
 800792a:	fbb2 f3f3 	udiv	r3, r2, r3
 800792e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007932:	fbb3 f1f2 	udiv	r1, r3, r2
 8007936:	fb01 f202 	mul.w	r2, r1, r2
 800793a:	1a9b      	subs	r3, r3, r2
 800793c:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800793e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007942:	4413      	add	r3, r2
 8007944:	3b01      	subs	r3, #1
 8007946:	7ffa      	ldrb	r2, [r7, #31]
 8007948:	fbb3 f1f2 	udiv	r1, r3, r2
 800794c:	fb01 f202 	mul.w	r2, r1, r2
 8007950:	1a9b      	subs	r3, r3, r2
 8007952:	b2db      	uxtb	r3, r3
 8007954:	3301      	adds	r3, #1
 8007956:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 8007958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795a:	3305      	adds	r3, #5
 800795c:	7dfa      	ldrb	r2, [r7, #23]
 800795e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	089b      	lsrs	r3, r3, #2
 8007964:	b2db      	uxtb	r3, r3
 8007966:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800796a:	b2d9      	uxtb	r1, r3
 800796c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796e:	3306      	adds	r3, #6
 8007970:	7dba      	ldrb	r2, [r7, #22]
 8007972:	430a      	orrs	r2, r1
 8007974:	b2d2      	uxtb	r2, r2
 8007976:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 8007978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797a:	3307      	adds	r3, #7
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 8007982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007984:	3310      	adds	r3, #16
 8007986:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 8007988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800798a:	3301      	adds	r3, #1
 800798c:	637b      	str	r3, [r7, #52]	@ 0x34
 800798e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007992:	4413      	add	r3, r2
 8007994:	633b      	str	r3, [r7, #48]	@ 0x30
 8007996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007998:	2b03      	cmp	r3, #3
 800799a:	d809      	bhi.n	80079b0 <create_partition+0x214>
 800799c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d006      	beq.n	80079b0 <create_partition+0x214>
 80079a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	f4ff af3f 	bcc.w	800782a <create_partition+0x8e>
 80079ac:	e000      	b.n	80079b0 <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 80079ae:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80079b6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fd fc2a 	bl	8005214 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80079c0:	7bf8      	ldrb	r0, [r7, #15]
 80079c2:	2301      	movs	r3, #1
 80079c4:	2200      	movs	r2, #0
 80079c6:	6879      	ldr	r1, [r7, #4]
 80079c8:	f7fd fb32 	bl	8005030 <disk_write>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <create_partition+0x23a>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e000      	b.n	80079d8 <create_partition+0x23c>
	}

	return FR_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3738      	adds	r7, #56	@ 0x38
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	51eb851f 	.word	0x51eb851f

080079e4 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b09e      	sub	sp, #120	@ 0x78
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80079f2:	f107 030c 	add.w	r3, r7, #12
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fe fcda 	bl	80063b0 <get_ldnumber>
 80079fc:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 80079fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	da02      	bge.n	8007a0a <f_mkfs+0x26>
 8007a04:	230b      	movs	r3, #11
 8007a06:	f000 bc39 	b.w	800827c <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 8007a0a:	4a90      	ldr	r2, [pc, #576]	@ (8007c4c <f_mkfs+0x268>)
 8007a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d005      	beq.n	8007a22 <f_mkfs+0x3e>
 8007a16:	4a8d      	ldr	r2, [pc, #564]	@ (8007c4c <f_mkfs+0x268>)
 8007a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 8007a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a24:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 8007a2e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fd faa2 	bl	8004f7c <disk_initialize>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 8007a3e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <f_mkfs+0x6c>
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	f000 bc16 	b.w	800827c <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 8007a50:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d002      	beq.n	8007a62 <f_mkfs+0x7e>
 8007a5c:	230a      	movs	r3, #10
 8007a5e:	f000 bc0d 	b.w	800827c <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <f_mkfs+0x88>
 8007a68:	4b79      	ldr	r3, [pc, #484]	@ (8007c50 <f_mkfs+0x26c>)
 8007a6a:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d107      	bne.n	8007a88 <f_mkfs+0xa4>
 8007a78:	f107 021c 	add.w	r2, r7, #28
 8007a7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a80:	2103      	movs	r1, #3
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fd fb08 	bl	8005098 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d009      	beq.n	8007aa2 <f_mkfs+0xbe>
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a94:	d805      	bhi.n	8007aa2 <f_mkfs+0xbe>
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	1e5a      	subs	r2, r3, #1
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <f_mkfs+0xc2>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 8007aa6:	f107 0220 	add.w	r2, r7, #32
 8007aaa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007aae:	2102      	movs	r1, #2
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fd faf1 	bl	8005098 <disk_ioctl>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <f_mkfs+0xdc>
 8007abc:	2301      	movs	r3, #1
 8007abe:	e3dd      	b.n	800827c <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 8007ac0:	8c3b      	ldrh	r3, [r7, #32]
 8007ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ac6:	d80a      	bhi.n	8007ade <f_mkfs+0xfa>
 8007ac8:	8c3b      	ldrh	r3, [r7, #32]
 8007aca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ace:	d306      	bcc.n	8007ade <f_mkfs+0xfa>
 8007ad0:	8c3b      	ldrh	r3, [r7, #32]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	8c3b      	ldrh	r3, [r7, #32]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	4013      	ands	r3, r2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <f_mkfs+0xfe>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e3cc      	b.n	800827c <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	f003 030f 	and.w	r3, r3, #15
 8007aea:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	785b      	ldrb	r3, [r3, #1]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d006      	beq.n	8007b04 <f_mkfs+0x120>
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	785b      	ldrb	r3, [r3, #1]
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d802      	bhi.n	8007b04 <f_mkfs+0x120>
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	e000      	b.n	8007b06 <f_mkfs+0x122>
 8007b04:	2301      	movs	r3, #1
 8007b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d013      	beq.n	8007b38 <f_mkfs+0x154>
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b18:	d80e      	bhi.n	8007b38 <f_mkfs+0x154>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	8c3a      	ldrh	r2, [r7, #32]
 8007b20:	0952      	lsrs	r2, r2, #5
 8007b22:	b292      	uxth	r2, r2
 8007b24:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b28:	fb01 f202 	mul.w	r2, r1, r2
 8007b2c:	1a9b      	subs	r3, r3, r2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d102      	bne.n	8007b38 <f_mkfs+0x154>
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	e001      	b.n	8007b3c <f_mkfs+0x158>
 8007b38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b46:	d80a      	bhi.n	8007b5e <f_mkfs+0x17a>
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	4013      	ands	r3, r2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d102      	bne.n	8007b5e <f_mkfs+0x17a>
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	e000      	b.n	8007b60 <f_mkfs+0x17c>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 8007b62:	8c3b      	ldrh	r3, [r7, #32]
 8007b64:	461a      	mov	r2, r3
 8007b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b68:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 8007b6e:	8c3b      	ldrh	r3, [r7, #32]
 8007b70:	461a      	mov	r2, r3
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b78:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8007b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <f_mkfs+0x1a0>
 8007b80:	2311      	movs	r3, #17
 8007b82:	e37b      	b.n	800827c <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 8007b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <f_mkfs+0x1ae>
 8007b8e:	2311      	movs	r3, #17
 8007b90:	e374      	b.n	800827c <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	61bb      	str	r3, [r7, #24]
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8007b9a:	f107 0218 	add.w	r2, r7, #24
 8007b9e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fd fa77 	bl	8005098 <disk_ioctl>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <f_mkfs+0x1d0>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e363      	b.n	800827c <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 8007bb4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007bb8:	f003 0308 	and.w	r3, r3, #8
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d108      	bne.n	8007bd2 <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8007bc4:	d905      	bls.n	8007bd2 <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 8007bc6:	233f      	movs	r3, #63	@ 0x3f
 8007bc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8007bd6:	d801      	bhi.n	8007bdc <f_mkfs+0x1f8>
 8007bd8:	230e      	movs	r3, #14
 8007bda:	e34f      	b.n	800827c <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 8007bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bde:	2b80      	cmp	r3, #128	@ 0x80
 8007be0:	d901      	bls.n	8007be6 <f_mkfs+0x202>
 8007be2:	2380      	movs	r3, #128	@ 0x80
 8007be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 8007be6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 8007bf2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d103      	bne.n	8007c06 <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8007c04:	e00a      	b.n	8007c1c <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8007c06:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <f_mkfs+0x232>
 8007c12:	2313      	movs	r3, #19
 8007c14:	e332      	b.n	800827c <f_mkfs+0x898>
		fsty = FS_FAT16;
 8007c16:	2302      	movs	r3, #2
 8007c18:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 8007c22:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 8007c26:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 8007c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c2a:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 8007c2c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d141      	bne.n	8007cb8 <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 8007c34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d120      	bne.n	8007c7c <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	0c5b      	lsrs	r3, r3, #17
 8007c3e:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007c40:	2300      	movs	r3, #0
 8007c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c44:	2301      	movs	r3, #1
 8007c46:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c48:	e00a      	b.n	8007c60 <f_mkfs+0x27c>
 8007c4a:	bf00      	nop
 8007c4c:	20007500 	.word	0x20007500
 8007c50:	08013424 	.word	0x08013424
 8007c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c56:	3301      	adds	r3, #1
 8007c58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c60:	4a95      	ldr	r2, [pc, #596]	@ (8007eb8 <f_mkfs+0x4d4>)
 8007c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d007      	beq.n	8007c7c <f_mkfs+0x298>
 8007c6c:	4a92      	ldr	r2, [pc, #584]	@ (8007eb8 <f_mkfs+0x4d4>)
 8007c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c74:	461a      	mov	r2, r3
 8007c76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d2eb      	bcs.n	8007c54 <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c84:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8007c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c88:	3302      	adds	r3, #2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	8c3a      	ldrh	r2, [r7, #32]
 8007c8e:	4413      	add	r3, r2
 8007c90:	3b01      	subs	r3, #1
 8007c92:	8c3a      	ldrh	r2, [r7, #32]
 8007c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c98:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 8007c9a:	2320      	movs	r3, #32
 8007c9c:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d903      	bls.n	8007cb4 <f_mkfs+0x2d0>
 8007cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cae:	4a83      	ldr	r2, [pc, #524]	@ (8007ebc <f_mkfs+0x4d8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d94b      	bls.n	8007d4c <f_mkfs+0x368>
 8007cb4:	230e      	movs	r3, #14
 8007cb6:	e2e1      	b.n	800827c <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 8007cb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d11b      	bne.n	8007cf6 <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	0b1b      	lsrs	r3, r3, #12
 8007cc2:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cc8:	2301      	movs	r3, #1
 8007cca:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ccc:	e005      	b.n	8007cda <f_mkfs+0x2f6>
 8007cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cda:	4a79      	ldr	r2, [pc, #484]	@ (8007ec0 <f_mkfs+0x4dc>)
 8007cdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d007      	beq.n	8007cf6 <f_mkfs+0x312>
 8007ce6:	4a76      	ldr	r2, [pc, #472]	@ (8007ec0 <f_mkfs+0x4dc>)
 8007ce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d2eb      	bcs.n	8007cce <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 8007d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d02:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d904      	bls.n	8007d14 <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8007d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0c:	3302      	adds	r3, #2
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d12:	e00a      	b.n	8007d2a <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 8007d14:	2301      	movs	r3, #1
 8007d16:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8007d1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	4413      	add	r3, r2
 8007d22:	3301      	adds	r3, #1
 8007d24:	085b      	lsrs	r3, r3, #1
 8007d26:	3303      	adds	r3, #3
 8007d28:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8007d2a:	8c3b      	ldrh	r3, [r7, #32]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d30:	4413      	add	r3, r2
 8007d32:	3b01      	subs	r3, #1
 8007d34:	8c3a      	ldrh	r2, [r7, #32]
 8007d36:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d3a:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 8007d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d42:	015b      	lsls	r3, r3, #5
 8007d44:	8c3a      	ldrh	r2, [r7, #32]
 8007d46:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d4a:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8007d4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d50:	4413      	add	r3, r2
 8007d52:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 8007d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007d58:	fb03 f202 	mul.w	r2, r3, r2
 8007d5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d5e:	4413      	add	r3, r2
 8007d60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d62:	4413      	add	r3, r2
 8007d64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6a:	4413      	add	r3, r2
 8007d6c:	1e5a      	subs	r2, r3, #1
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	425b      	negs	r3, r3
 8007d72:	401a      	ands	r2, r3
 8007d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 8007d7a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d108      	bne.n	8007d94 <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 8007d82:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007d84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d86:	4413      	add	r3, r2
 8007d88:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d8a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007d8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d8e:	4413      	add	r3, r2
 8007d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d92:	e019      	b.n	8007dc8 <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 8007d94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007d98:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d9e:	fb01 f202 	mul.w	r2, r1, r2
 8007da2:	1a9b      	subs	r3, r3, r2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 8007da8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007daa:	3b01      	subs	r3, #1
 8007dac:	667b      	str	r3, [r7, #100]	@ 0x64
 8007dae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007db0:	3301      	adds	r3, #1
 8007db2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007db4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007db6:	3301      	adds	r3, #1
 8007db8:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 8007dba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007dc4:	4413      	add	r3, r2
 8007dc6:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8007dc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007dca:	011a      	lsls	r2, r3, #4
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dce:	441a      	add	r2, r3
 8007dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dd2:	1ad2      	subs	r2, r2, r3
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d901      	bls.n	8007dde <f_mkfs+0x3fa>
 8007dda:	230e      	movs	r3, #14
 8007ddc:	e24e      	b.n	800827c <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007de2:	1ad2      	subs	r2, r2, r3
 8007de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007de6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007de8:	fb01 f303 	mul.w	r3, r1, r3
 8007dec:	1ad2      	subs	r2, r2, r3
 8007dee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007df0:	1ad2      	subs	r2, r2, r3
 8007df2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df8:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 8007dfa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007dfe:	2b03      	cmp	r3, #3
 8007e00:	d10f      	bne.n	8007e22 <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 8007e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e04:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d80a      	bhi.n	8007e22 <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8007e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d105      	bne.n	8007e1e <f_mkfs+0x43a>
 8007e12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e14:	085b      	lsrs	r3, r3, #1
 8007e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d145      	bne.n	8007eaa <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8007e1e:	230e      	movs	r3, #14
 8007e20:	e22c      	b.n	800827c <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 8007e22:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d134      	bne.n	8007e94 <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8007e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d91f      	bls.n	8007e74 <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 8007e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d107      	bne.n	8007e4a <f_mkfs+0x466>
 8007e3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	2b40      	cmp	r3, #64	@ 0x40
 8007e40:	d803      	bhi.n	8007e4a <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 8007e42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e48:	e034      	b.n	8007eb4 <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 8007e4a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007e4e:	f003 0302 	and.w	r3, r3, #2
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8007e56:	2303      	movs	r3, #3
 8007e58:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8007e5c:	e02a      	b.n	8007eb4 <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d105      	bne.n	8007e70 <f_mkfs+0x48c>
 8007e64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e6c:	2b80      	cmp	r3, #128	@ 0x80
 8007e6e:	d91e      	bls.n	8007eae <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8007e70:	230e      	movs	r3, #14
 8007e72:	e203      	b.n	800827c <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8007e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e76:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d80a      	bhi.n	8007e94 <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007e7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d105      	bne.n	8007e90 <f_mkfs+0x4ac>
 8007e84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e8c:	2b80      	cmp	r3, #128	@ 0x80
 8007e8e:	d910      	bls.n	8007eb2 <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8007e90:	230e      	movs	r3, #14
 8007e92:	e1f3      	b.n	800827c <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 8007e94:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d113      	bne.n	8007ec4 <f_mkfs+0x4e0>
 8007e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e9e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d90e      	bls.n	8007ec4 <f_mkfs+0x4e0>
 8007ea6:	230e      	movs	r3, #14
 8007ea8:	e1e8      	b.n	800827c <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8007eaa:	bf00      	nop
 8007eac:	e6bc      	b.n	8007c28 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007eae:	bf00      	nop
 8007eb0:	e6ba      	b.n	8007c28 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007eb2:	bf00      	nop
			pau = sz_au;
 8007eb4:	e6b8      	b.n	8007c28 <f_mkfs+0x244>
 8007eb6:	bf00      	nop
 8007eb8:	08013434 	.word	0x08013434
 8007ebc:	0ffffff5 	.word	0x0ffffff5
 8007ec0:	08013444 	.word	0x08013444

			/* Ok, it is the valid cluster configuration */
			break;
 8007ec4:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 8007ec6:	8c3b      	ldrh	r3, [r7, #32]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	2100      	movs	r1, #0
 8007ecc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ece:	f009 ff8b 	bl	8011de8 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 8007ed2:	220b      	movs	r2, #11
 8007ed4:	49b1      	ldr	r1, [pc, #708]	@ (800819c <f_mkfs+0x7b8>)
 8007ed6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ed8:	f00a f80a 	bl	8011ef0 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8007edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ede:	330b      	adds	r3, #11
 8007ee0:	8c3a      	ldrh	r2, [r7, #32]
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fd f995 	bl	8005214 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8007eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eec:	330d      	adds	r3, #13
 8007eee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007ef0:	b2d2      	uxtb	r2, r2
 8007ef2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef6:	330e      	adds	r3, #14
 8007ef8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007efa:	b292      	uxth	r2, r2
 8007efc:	4611      	mov	r1, r2
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fd f988 	bl	8005214 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 8007f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f06:	3310      	adds	r3, #16
 8007f08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007f0a:	b2d2      	uxtb	r2, r2
 8007f0c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f10:	f103 0211 	add.w	r2, r3, #17
 8007f14:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d002      	beq.n	8007f22 <f_mkfs+0x53e>
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	e000      	b.n	8007f24 <f_mkfs+0x540>
 8007f22:	2300      	movs	r3, #0
 8007f24:	4619      	mov	r1, r3
 8007f26:	4610      	mov	r0, r2
 8007f28:	f7fd f974 	bl	8005214 <st_word>
		if (sz_vol < 0x10000) {
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f32:	d208      	bcs.n	8007f46 <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8007f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f36:	3313      	adds	r3, #19
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	b292      	uxth	r2, r2
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fd f968 	bl	8005214 <st_word>
 8007f44:	e006      	b.n	8007f54 <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 8007f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f48:	3320      	adds	r3, #32
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fd f97b 	bl	800524a <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8007f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f56:	3315      	adds	r3, #21
 8007f58:	22f8      	movs	r2, #248	@ 0xf8
 8007f5a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5e:	3318      	adds	r3, #24
 8007f60:	213f      	movs	r1, #63	@ 0x3f
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fd f956 	bl	8005214 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8007f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6a:	331a      	adds	r3, #26
 8007f6c:	21ff      	movs	r1, #255	@ 0xff
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fd f950 	bl	8005214 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 8007f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f76:	331c      	adds	r3, #28
 8007f78:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fd f965 	bl	800524a <st_dword>
		if (fsty == FS_FAT32) {
 8007f80:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d12d      	bne.n	8007fe4 <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 8007f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8a:	3343      	adds	r3, #67	@ 0x43
 8007f8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fd f95b 	bl	800524a <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8007f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f96:	3324      	adds	r3, #36	@ 0x24
 8007f98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fd f955 	bl	800524a <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa2:	332c      	adds	r3, #44	@ 0x2c
 8007fa4:	2102      	movs	r1, #2
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fd f94f 	bl	800524a <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8007fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fae:	3330      	adds	r3, #48	@ 0x30
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fd f92e 	bl	8005214 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fba:	3332      	adds	r3, #50	@ 0x32
 8007fbc:	2106      	movs	r1, #6
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fd f928 	bl	8005214 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc6:	3340      	adds	r3, #64	@ 0x40
 8007fc8:	2280      	movs	r2, #128	@ 0x80
 8007fca:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fce:	3342      	adds	r3, #66	@ 0x42
 8007fd0:	2229      	movs	r2, #41	@ 0x29
 8007fd2:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd6:	3347      	adds	r3, #71	@ 0x47
 8007fd8:	2213      	movs	r2, #19
 8007fda:	4971      	ldr	r1, [pc, #452]	@ (80081a0 <f_mkfs+0x7bc>)
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f009 ff87 	bl	8011ef0 <memcpy>
 8007fe2:	e01c      	b.n	800801e <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe6:	3327      	adds	r3, #39	@ 0x27
 8007fe8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fd f92d 	bl	800524a <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff2:	3316      	adds	r3, #22
 8007ff4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ff6:	b292      	uxth	r2, r2
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fd f90a 	bl	8005214 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8008000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008002:	3324      	adds	r3, #36	@ 0x24
 8008004:	2280      	movs	r2, #128	@ 0x80
 8008006:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8008008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800a:	3326      	adds	r3, #38	@ 0x26
 800800c:	2229      	movs	r2, #41	@ 0x29
 800800e:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8008010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008012:	332b      	adds	r3, #43	@ 0x2b
 8008014:	2213      	movs	r2, #19
 8008016:	4963      	ldr	r1, [pc, #396]	@ (80081a4 <f_mkfs+0x7c0>)
 8008018:	4618      	mov	r0, r3
 800801a:	f009 ff69 	bl	8011ef0 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800801e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008020:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008024:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008028:	4618      	mov	r0, r3
 800802a:	f7fd f8f3 	bl	8005214 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800802e:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008032:	2301      	movs	r3, #1
 8008034:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008036:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008038:	f7fc fffa 	bl	8005030 <disk_write>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <f_mkfs+0x662>
 8008042:	2301      	movs	r3, #1
 8008044:	e11a      	b.n	800827c <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 8008046:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800804a:	2b03      	cmp	r3, #3
 800804c:	d140      	bne.n	80080d0 <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800804e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008050:	1d9a      	adds	r2, r3, #6
 8008052:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008056:	2301      	movs	r3, #1
 8008058:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800805a:	f7fc ffe9 	bl	8005030 <disk_write>
			memset(buf, 0, ss);
 800805e:	8c3b      	ldrh	r3, [r7, #32]
 8008060:	461a      	mov	r2, r3
 8008062:	2100      	movs	r1, #0
 8008064:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008066:	f009 febf 	bl	8011de8 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800806a:	494f      	ldr	r1, [pc, #316]	@ (80081a8 <f_mkfs+0x7c4>)
 800806c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800806e:	f7fd f8ec 	bl	800524a <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8008072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008074:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008078:	494c      	ldr	r1, [pc, #304]	@ (80081ac <f_mkfs+0x7c8>)
 800807a:	4618      	mov	r0, r3
 800807c:	f7fd f8e5 	bl	800524a <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8008080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008082:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008088:	3b01      	subs	r3, #1
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f7fd f8dc 	bl	800524a <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8008092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008094:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008098:	2102      	movs	r1, #2
 800809a:	4618      	mov	r0, r3
 800809c:	f7fd f8d5 	bl	800524a <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80080a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80080a6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fd f8b2 	bl	8005214 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80080b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080b2:	1dda      	adds	r2, r3, #7
 80080b4:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 80080b8:	2301      	movs	r3, #1
 80080ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80080bc:	f7fc ffb8 	bl	8005030 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80080c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 80080c8:	2301      	movs	r3, #1
 80080ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80080cc:	f7fc ffb0 	bl	8005030 <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 80080d0:	8c3b      	ldrh	r3, [r7, #32]
 80080d2:	461a      	mov	r2, r3
 80080d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d6:	fb02 f303 	mul.w	r3, r2, r3
 80080da:	461a      	mov	r2, r3
 80080dc:	2100      	movs	r1, #0
 80080de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080e0:	f009 fe82 	bl	8011de8 <memset>
		sect = b_fat;		/* FAT start sector */
 80080e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080e6:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 80080e8:	2300      	movs	r3, #0
 80080ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080ec:	e04b      	b.n	8008186 <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 80080ee:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d113      	bne.n	800811e <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 80080f6:	f06f 0107 	mvn.w	r1, #7
 80080fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080fc:	f7fd f8a5 	bl	800524a <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 8008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008102:	3304      	adds	r3, #4
 8008104:	f04f 31ff 	mov.w	r1, #4294967295
 8008108:	4618      	mov	r0, r3
 800810a:	f7fd f89e 	bl	800524a <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	3308      	adds	r3, #8
 8008112:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008116:	4618      	mov	r0, r3
 8008118:	f7fd f897 	bl	800524a <st_dword>
 800811c:	e00b      	b.n	8008136 <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800811e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008122:	2b01      	cmp	r3, #1
 8008124:	d101      	bne.n	800812a <f_mkfs+0x746>
 8008126:	4b22      	ldr	r3, [pc, #136]	@ (80081b0 <f_mkfs+0x7cc>)
 8008128:	e001      	b.n	800812e <f_mkfs+0x74a>
 800812a:	f06f 0307 	mvn.w	r3, #7
 800812e:	4619      	mov	r1, r3
 8008130:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008132:	f7fd f88a 	bl	800524a <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8008136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008138:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800813a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800813c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813e:	4293      	cmp	r3, r2
 8008140:	bf28      	it	cs
 8008142:	4613      	movcs	r3, r2
 8008144:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8008146:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800814a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800814c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800814e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008150:	f7fc ff6e 	bl	8005030 <disk_write>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <f_mkfs+0x77a>
 800815a:	2301      	movs	r3, #1
 800815c:	e08e      	b.n	800827c <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800815e:	8c3b      	ldrh	r3, [r7, #32]
 8008160:	461a      	mov	r2, r3
 8008162:	2100      	movs	r1, #0
 8008164:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008166:	f009 fe3f 	bl	8011de8 <memset>
				sect += n; nsect -= n;
 800816a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800816c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800816e:	4413      	add	r3, r2
 8008170:	673b      	str	r3, [r7, #112]	@ 0x70
 8008172:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008174:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 800817a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1dc      	bne.n	800813a <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8008180:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008182:	3301      	adds	r3, #1
 8008184:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008186:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800818a:	429a      	cmp	r2, r3
 800818c:	d3af      	bcc.n	80080ee <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800818e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008192:	2b03      	cmp	r3, #3
 8008194:	d10e      	bne.n	80081b4 <f_mkfs+0x7d0>
 8008196:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008198:	e00d      	b.n	80081b6 <f_mkfs+0x7d2>
 800819a:	bf00      	nop
 800819c:	0801331c 	.word	0x0801331c
 80081a0:	08013328 	.word	0x08013328
 80081a4:	0801333c 	.word	0x0801333c
 80081a8:	41615252 	.word	0x41615252
 80081ac:	61417272 	.word	0x61417272
 80081b0:	00fffff8 	.word	0x00fffff8
 80081b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80081b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80081ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081bc:	4293      	cmp	r3, r2
 80081be:	bf28      	it	cs
 80081c0:	4613      	movcs	r3, r2
 80081c2:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80081c4:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 80081c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081ca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80081cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80081ce:	f7fc ff2f 	bl	8005030 <disk_write>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <f_mkfs+0x7f8>
 80081d8:	2301      	movs	r3, #1
 80081da:	e04f      	b.n	800827c <f_mkfs+0x898>
			sect += n; nsect -= n;
 80081dc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80081de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081e0:	4413      	add	r3, r2
 80081e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80081e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80081e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 80081ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e2      	bne.n	80081b8 <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 80081f2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d103      	bne.n	8008202 <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 80081fa:	230c      	movs	r3, #12
 80081fc:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8008200:	e012      	b.n	8008228 <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008208:	d303      	bcc.n	8008212 <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 800820a:	2306      	movs	r3, #6
 800820c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8008210:	e00a      	b.n	8008228 <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 8008212:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008216:	2b02      	cmp	r3, #2
 8008218:	d103      	bne.n	8008222 <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 800821a:	2304      	movs	r3, #4
 800821c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8008220:	e002      	b.n	8008228 <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 8008222:	2301      	movs	r3, #1
 8008224:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 8008228:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800822c:	f003 0308 	and.w	r3, r3, #8
 8008230:	2b00      	cmp	r3, #0
 8008232:	d116      	bne.n	8008262 <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	613b      	str	r3, [r7, #16]
 8008238:	2300      	movs	r3, #0
 800823a:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 800823c:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8008240:	f107 0110 	add.w	r1, r7, #16
 8008244:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 8008248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824a:	f7ff faa7 	bl	800779c <create_partition>
 800824e:	4603      	mov	r3, r0
 8008250:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 8008254:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <f_mkfs+0x87e>
 800825c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008260:	e00c      	b.n	800827c <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8008262:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008266:	2200      	movs	r2, #0
 8008268:	2100      	movs	r1, #0
 800826a:	4618      	mov	r0, r3
 800826c:	f7fc ff14 	bl	8005098 <disk_ioctl>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <f_mkfs+0x896>
 8008276:	2301      	movs	r3, #1
 8008278:	e000      	b.n	800827c <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3778      	adds	r7, #120	@ 0x78
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008284:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80082bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008288:	f7fc fe3e 	bl	8004f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800828c:	480c      	ldr	r0, [pc, #48]	@ (80082c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800828e:	490d      	ldr	r1, [pc, #52]	@ (80082c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008290:	4a0d      	ldr	r2, [pc, #52]	@ (80082c8 <LoopForever+0xe>)
  movs r3, #0
 8008292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008294:	e002      	b.n	800829c <LoopCopyDataInit>

08008296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800829a:	3304      	adds	r3, #4

0800829c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800829c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800829e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80082a0:	d3f9      	bcc.n	8008296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80082a2:	4a0a      	ldr	r2, [pc, #40]	@ (80082cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80082a4:	4c0a      	ldr	r4, [pc, #40]	@ (80082d0 <LoopForever+0x16>)
  movs r3, #0
 80082a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80082a8:	e001      	b.n	80082ae <LoopFillZerobss>

080082aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80082aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80082ac:	3204      	adds	r2, #4

080082ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80082ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80082b0:	d3fb      	bcc.n	80082aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80082b2:	f009 fdef 	bl	8011e94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80082b6:	f7fa fd15 	bl	8002ce4 <main>

080082ba <LoopForever>:

LoopForever:
    b LoopForever
 80082ba:	e7fe      	b.n	80082ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80082bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80082c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80082c4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80082c8:	080135b4 	.word	0x080135b4
  ldr r2, =_sbss
 80082cc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80082d0:	20007658 	.word	0x20007658

080082d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80082d4:	e7fe      	b.n	80082d4 <ADC1_2_IRQHandler>

080082d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b082      	sub	sp, #8
 80082da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80082e0:	2003      	movs	r0, #3
 80082e2:	f001 fd11 	bl	8009d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80082e6:	200f      	movs	r0, #15
 80082e8:	f000 f80e 	bl	8008308 <HAL_InitTick>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	71fb      	strb	r3, [r7, #7]
 80082f6:	e001      	b.n	80082fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80082f8:	f7fc f974 	bl	80045e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80082fc:	79fb      	ldrb	r3, [r7, #7]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008314:	4b17      	ldr	r3, [pc, #92]	@ (8008374 <HAL_InitTick+0x6c>)
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d023      	beq.n	8008364 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800831c:	4b16      	ldr	r3, [pc, #88]	@ (8008378 <HAL_InitTick+0x70>)
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	4b14      	ldr	r3, [pc, #80]	@ (8008374 <HAL_InitTick+0x6c>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	4619      	mov	r1, r3
 8008326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800832a:	fbb3 f3f1 	udiv	r3, r3, r1
 800832e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008332:	4618      	mov	r0, r3
 8008334:	f001 fd21 	bl	8009d7a <HAL_SYSTICK_Config>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10f      	bne.n	800835e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b0f      	cmp	r3, #15
 8008342:	d809      	bhi.n	8008358 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008344:	2200      	movs	r2, #0
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	f001 fce7 	bl	8009d1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008350:	4a0a      	ldr	r2, [pc, #40]	@ (800837c <HAL_InitTick+0x74>)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6013      	str	r3, [r2, #0]
 8008356:	e007      	b.n	8008368 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	73fb      	strb	r3, [r7, #15]
 800835c:	e004      	b.n	8008368 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	73fb      	strb	r3, [r7, #15]
 8008362:	e001      	b.n	8008368 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008368:	7bfb      	ldrb	r3, [r7, #15]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20000010 	.word	0x20000010
 8008378:	20000000 	.word	0x20000000
 800837c:	2000000c 	.word	0x2000000c

08008380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008384:	4b06      	ldr	r3, [pc, #24]	@ (80083a0 <HAL_IncTick+0x20>)
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	461a      	mov	r2, r3
 800838a:	4b06      	ldr	r3, [pc, #24]	@ (80083a4 <HAL_IncTick+0x24>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4413      	add	r3, r2
 8008390:	4a04      	ldr	r2, [pc, #16]	@ (80083a4 <HAL_IncTick+0x24>)
 8008392:	6013      	str	r3, [r2, #0]
}
 8008394:	bf00      	nop
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	20000010 	.word	0x20000010
 80083a4:	2000750c 	.word	0x2000750c

080083a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
  return uwTick;
 80083ac:	4b03      	ldr	r3, [pc, #12]	@ (80083bc <HAL_GetTick+0x14>)
 80083ae:	681b      	ldr	r3, [r3, #0]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	2000750c 	.word	0x2000750c

080083c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80083c8:	f7ff ffee 	bl	80083a8 <HAL_GetTick>
 80083cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d8:	d005      	beq.n	80083e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80083da:	4b0a      	ldr	r3, [pc, #40]	@ (8008404 <HAL_Delay+0x44>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	4413      	add	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80083e6:	bf00      	nop
 80083e8:	f7ff ffde 	bl	80083a8 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d8f7      	bhi.n	80083e8 <HAL_Delay+0x28>
  {
  }
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000010 	.word	0x20000010

08008408 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	431a      	orrs	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	609a      	str	r2, [r3, #8]
}
 8008422:	bf00      	nop
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800842e:	b480      	push	{r7}
 8008430:	b083      	sub	sp, #12
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	431a      	orrs	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	609a      	str	r2, [r3, #8]
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008464:	4618      	mov	r0, r3
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008470:	b480      	push	{r7}
 8008472:	b087      	sub	sp, #28
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3360      	adds	r3, #96	@ 0x60
 8008482:	461a      	mov	r2, r3
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	4b08      	ldr	r3, [pc, #32]	@ (80084b4 <LL_ADC_SetOffset+0x44>)
 8008492:	4013      	ands	r3, r2
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	430a      	orrs	r2, r1
 800849e:	4313      	orrs	r3, r2
 80084a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80084a8:	bf00      	nop
 80084aa:	371c      	adds	r7, #28
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	03fff000 	.word	0x03fff000

080084b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	3360      	adds	r3, #96	@ 0x60
 80084c6:	461a      	mov	r2, r3
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3360      	adds	r3, #96	@ 0x60
 80084f4:	461a      	mov	r2, r3
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	431a      	orrs	r2, r3
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800850e:	bf00      	nop
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800851a:	b480      	push	{r7}
 800851c:	b083      	sub	sp, #12
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800852a:	2b00      	cmp	r3, #0
 800852c:	d101      	bne.n	8008532 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800852e:	2301      	movs	r3, #1
 8008530:	e000      	b.n	8008534 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3330      	adds	r3, #48	@ 0x30
 8008550:	461a      	mov	r2, r3
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	0a1b      	lsrs	r3, r3, #8
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	f003 030c 	and.w	r3, r3, #12
 800855c:	4413      	add	r3, r2
 800855e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	f003 031f 	and.w	r3, r3, #31
 800856a:	211f      	movs	r1, #31
 800856c:	fa01 f303 	lsl.w	r3, r1, r3
 8008570:	43db      	mvns	r3, r3
 8008572:	401a      	ands	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	0e9b      	lsrs	r3, r3, #26
 8008578:	f003 011f 	and.w	r1, r3, #31
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f003 031f 	and.w	r3, r3, #31
 8008582:	fa01 f303 	lsl.w	r3, r1, r3
 8008586:	431a      	orrs	r2, r3
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800858c:	bf00      	nop
 800858e:	371c      	adds	r7, #28
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3314      	adds	r3, #20
 80085a8:	461a      	mov	r2, r3
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	0e5b      	lsrs	r3, r3, #25
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	f003 0304 	and.w	r3, r3, #4
 80085b4:	4413      	add	r3, r2
 80085b6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	0d1b      	lsrs	r3, r3, #20
 80085c0:	f003 031f 	and.w	r3, r3, #31
 80085c4:	2107      	movs	r1, #7
 80085c6:	fa01 f303 	lsl.w	r3, r1, r3
 80085ca:	43db      	mvns	r3, r3
 80085cc:	401a      	ands	r2, r3
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	0d1b      	lsrs	r3, r3, #20
 80085d2:	f003 031f 	and.w	r3, r3, #31
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	fa01 f303 	lsl.w	r3, r1, r3
 80085dc:	431a      	orrs	r2, r3
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80085e2:	bf00      	nop
 80085e4:	371c      	adds	r7, #28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
	...

080085f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008608:	43db      	mvns	r3, r3
 800860a:	401a      	ands	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f003 0318 	and.w	r3, r3, #24
 8008612:	4908      	ldr	r1, [pc, #32]	@ (8008634 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008614:	40d9      	lsrs	r1, r3
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	400b      	ands	r3, r1
 800861a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800861e:	431a      	orrs	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008626:	bf00      	nop
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	0007ffff 	.word	0x0007ffff

08008638 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f003 031f 	and.w	r3, r3, #31
}
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8008664:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	6093      	str	r3, [r2, #8]
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800868c:	d101      	bne.n	8008692 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800868e:	2301      	movs	r3, #1
 8008690:	e000      	b.n	8008694 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80086b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80086b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086dc:	d101      	bne.n	80086e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80086de:	2301      	movs	r3, #1
 80086e0:	e000      	b.n	80086e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008700:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008704:	f043 0201 	orr.w	r2, r3, #1
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008728:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800872c:	f043 0202 	orr.w	r2, r3, #2
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b01      	cmp	r3, #1
 8008752:	d101      	bne.n	8008758 <LL_ADC_IsEnabled+0x18>
 8008754:	2301      	movs	r3, #1
 8008756:	e000      	b.n	800875a <LL_ADC_IsEnabled+0x1a>
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f003 0302 	and.w	r3, r3, #2
 8008776:	2b02      	cmp	r3, #2
 8008778:	d101      	bne.n	800877e <LL_ADC_IsDisableOngoing+0x18>
 800877a:	2301      	movs	r3, #1
 800877c:	e000      	b.n	8008780 <LL_ADC_IsDisableOngoing+0x1a>
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800879c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80087a0:	f043 0204 	orr.w	r2, r3, #4
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80087c8:	f043 0210 	orr.w	r2, r3, #16
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f003 0304 	and.w	r3, r3, #4
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	d101      	bne.n	80087f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80087f0:	2301      	movs	r3, #1
 80087f2:	e000      	b.n	80087f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008812:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008816:	f043 0220 	orr.w	r2, r3, #32
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800882a:	b480      	push	{r7}
 800882c:	b083      	sub	sp, #12
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f003 0308 	and.w	r3, r3, #8
 800883a:	2b08      	cmp	r3, #8
 800883c:	d101      	bne.n	8008842 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800883e:	2301      	movs	r3, #1
 8008840:	e000      	b.n	8008844 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008850:	b590      	push	{r4, r7, lr}
 8008852:	b089      	sub	sp, #36	@ 0x24
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e130      	b.n	8008acc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008874:	2b00      	cmp	r3, #0
 8008876:	d109      	bne.n	800888c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7fb fed7 	bl	800462c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4618      	mov	r0, r3
 8008892:	f7ff fef1 	bl	8008678 <LL_ADC_IsDeepPowerDownEnabled>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d004      	beq.n	80088a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7ff fed7 	bl	8008654 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7ff ff0c 	bl	80086c8 <LL_ADC_IsInternalRegulatorEnabled>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d115      	bne.n	80088e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff fef0 	bl	80086a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80088c0:	4b84      	ldr	r3, [pc, #528]	@ (8008ad4 <HAL_ADC_Init+0x284>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	099b      	lsrs	r3, r3, #6
 80088c6:	4a84      	ldr	r2, [pc, #528]	@ (8008ad8 <HAL_ADC_Init+0x288>)
 80088c8:	fba2 2303 	umull	r2, r3, r2, r3
 80088cc:	099b      	lsrs	r3, r3, #6
 80088ce:	3301      	adds	r3, #1
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80088d4:	e002      	b.n	80088dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3b01      	subs	r3, #1
 80088da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1f9      	bne.n	80088d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7ff feee 	bl	80086c8 <LL_ADC_IsInternalRegulatorEnabled>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10d      	bne.n	800890e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088f6:	f043 0210 	orr.w	r2, r3, #16
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008902:	f043 0201 	orr.w	r2, r3, #1
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff ff62 	bl	80087dc <LL_ADC_REG_IsConversionOngoing>
 8008918:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800891e:	f003 0310 	and.w	r3, r3, #16
 8008922:	2b00      	cmp	r3, #0
 8008924:	f040 80c9 	bne.w	8008aba <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2b00      	cmp	r3, #0
 800892c:	f040 80c5 	bne.w	8008aba <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008934:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8008938:	f043 0202 	orr.w	r2, r3, #2
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4618      	mov	r0, r3
 8008946:	f7ff fefb 	bl	8008740 <LL_ADC_IsEnabled>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d115      	bne.n	800897c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008950:	4862      	ldr	r0, [pc, #392]	@ (8008adc <HAL_ADC_Init+0x28c>)
 8008952:	f7ff fef5 	bl	8008740 <LL_ADC_IsEnabled>
 8008956:	4604      	mov	r4, r0
 8008958:	4861      	ldr	r0, [pc, #388]	@ (8008ae0 <HAL_ADC_Init+0x290>)
 800895a:	f7ff fef1 	bl	8008740 <LL_ADC_IsEnabled>
 800895e:	4603      	mov	r3, r0
 8008960:	431c      	orrs	r4, r3
 8008962:	4860      	ldr	r0, [pc, #384]	@ (8008ae4 <HAL_ADC_Init+0x294>)
 8008964:	f7ff feec 	bl	8008740 <LL_ADC_IsEnabled>
 8008968:	4603      	mov	r3, r0
 800896a:	4323      	orrs	r3, r4
 800896c:	2b00      	cmp	r3, #0
 800896e:	d105      	bne.n	800897c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	4619      	mov	r1, r3
 8008976:	485c      	ldr	r0, [pc, #368]	@ (8008ae8 <HAL_ADC_Init+0x298>)
 8008978:	f7ff fd46 	bl	8008408 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	7e5b      	ldrb	r3, [r3, #25]
 8008980:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008986:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800898c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8008992:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800899a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800899c:	4313      	orrs	r3, r2
 800899e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d106      	bne.n	80089b8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ae:	3b01      	subs	r3, #1
 80089b0:	045b      	lsls	r3, r3, #17
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d009      	beq.n	80089d4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089cc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80089ce:	69ba      	ldr	r2, [r7, #24]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	4b44      	ldr	r3, [pc, #272]	@ (8008aec <HAL_ADC_Init+0x29c>)
 80089dc:	4013      	ands	r3, r2
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	6812      	ldr	r2, [r2, #0]
 80089e2:	69b9      	ldr	r1, [r7, #24]
 80089e4:	430b      	orrs	r3, r1
 80089e6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7ff ff1c 	bl	800882a <LL_ADC_INJ_IsConversionOngoing>
 80089f2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d13d      	bne.n	8008a76 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d13a      	bne.n	8008a76 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8008a04:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008a0c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a1c:	f023 0302 	bic.w	r3, r3, #2
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	6812      	ldr	r2, [r2, #0]
 8008a24:	69b9      	ldr	r1, [r7, #24]
 8008a26:	430b      	orrs	r3, r1
 8008a28:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d118      	bne.n	8008a66 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008a3e:	f023 0304 	bic.w	r3, r3, #4
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008a4a:	4311      	orrs	r1, r2
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008a50:	4311      	orrs	r1, r2
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008a56:	430a      	orrs	r2, r1
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f042 0201 	orr.w	r2, r2, #1
 8008a62:	611a      	str	r2, [r3, #16]
 8008a64:	e007      	b.n	8008a76 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	691a      	ldr	r2, [r3, #16]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f022 0201 	bic.w	r2, r2, #1
 8008a74:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d10c      	bne.n	8008a98 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a84:	f023 010f 	bic.w	r1, r3, #15
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	1e5a      	subs	r2, r3, #1
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	430a      	orrs	r2, r1
 8008a94:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a96:	e007      	b.n	8008aa8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 020f 	bic.w	r2, r2, #15
 8008aa6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aac:	f023 0303 	bic.w	r3, r3, #3
 8008ab0:	f043 0201 	orr.w	r2, r3, #1
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	655a      	str	r2, [r3, #84]	@ 0x54
 8008ab8:	e007      	b.n	8008aca <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008abe:	f043 0210 	orr.w	r2, r3, #16
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008aca:	7ffb      	ldrb	r3, [r7, #31]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3724      	adds	r7, #36	@ 0x24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd90      	pop	{r4, r7, pc}
 8008ad4:	20000000 	.word	0x20000000
 8008ad8:	053e2d63 	.word	0x053e2d63
 8008adc:	50040000 	.word	0x50040000
 8008ae0:	50040100 	.word	0x50040100
 8008ae4:	50040200 	.word	0x50040200
 8008ae8:	50040300 	.word	0x50040300
 8008aec:	fff0c007 	.word	0xfff0c007

08008af0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008afc:	4853      	ldr	r0, [pc, #332]	@ (8008c4c <HAL_ADC_Start_DMA+0x15c>)
 8008afe:	f7ff fd9b 	bl	8008638 <LL_ADC_GetMultimode>
 8008b02:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7ff fe67 	bl	80087dc <LL_ADC_REG_IsConversionOngoing>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f040 8093 	bne.w	8008c3c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d101      	bne.n	8008b24 <HAL_ADC_Start_DMA+0x34>
 8008b20:	2302      	movs	r3, #2
 8008b22:	e08e      	b.n	8008c42 <HAL_ADC_Start_DMA+0x152>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a47      	ldr	r2, [pc, #284]	@ (8008c50 <HAL_ADC_Start_DMA+0x160>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d008      	beq.n	8008b48 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	2b05      	cmp	r3, #5
 8008b40:	d002      	beq.n	8008b48 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	2b09      	cmp	r3, #9
 8008b46:	d172      	bne.n	8008c2e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 fda7 	bl	800969c <ADC_Enable>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d165      	bne.n	8008c24 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008b60:	f023 0301 	bic.w	r3, r3, #1
 8008b64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a38      	ldr	r2, [pc, #224]	@ (8008c54 <HAL_ADC_Start_DMA+0x164>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d002      	beq.n	8008b7c <HAL_ADC_Start_DMA+0x8c>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	e000      	b.n	8008b7e <HAL_ADC_Start_DMA+0x8e>
 8008b7c:	4b36      	ldr	r3, [pc, #216]	@ (8008c58 <HAL_ADC_Start_DMA+0x168>)
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	6812      	ldr	r2, [r2, #0]
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d002      	beq.n	8008b8c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d105      	bne.n	8008b98 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d006      	beq.n	8008bb2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ba8:	f023 0206 	bic.w	r2, r3, #6
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	659a      	str	r2, [r3, #88]	@ 0x58
 8008bb0:	e002      	b.n	8008bb8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bbc:	4a27      	ldr	r2, [pc, #156]	@ (8008c5c <HAL_ADC_Start_DMA+0x16c>)
 8008bbe:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bc4:	4a26      	ldr	r2, [pc, #152]	@ (8008c60 <HAL_ADC_Start_DMA+0x170>)
 8008bc6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bcc:	4a25      	ldr	r2, [pc, #148]	@ (8008c64 <HAL_ADC_Start_DMA+0x174>)
 8008bce:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	221c      	movs	r2, #28
 8008bd6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f042 0210 	orr.w	r2, r2, #16
 8008bee:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f042 0201 	orr.w	r2, r2, #1
 8008bfe:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3340      	adds	r3, #64	@ 0x40
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f001 fa6a 	bl	800a0e8 <HAL_DMA_Start_IT>
 8008c14:	4603      	mov	r3, r0
 8008c16:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7ff fdb5 	bl	800878c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8008c22:	e00d      	b.n	8008c40 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8008c2c:	e008      	b.n	8008c40 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8008c3a:	e001      	b.n	8008c40 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3718      	adds	r7, #24
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	50040300 	.word	0x50040300
 8008c50:	50040200 	.word	0x50040200
 8008c54:	50040100 	.word	0x50040100
 8008c58:	50040000 	.word	0x50040000
 8008c5c:	08009867 	.word	0x08009867
 8008c60:	0800993f 	.word	0x0800993f
 8008c64:	0800995b 	.word	0x0800995b

08008c68 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d101      	bne.n	8008c7e <HAL_ADC_Stop_DMA+0x16>
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	e051      	b.n	8008d22 <HAL_ADC_Stop_DMA+0xba>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8008c86:	2103      	movs	r1, #3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fc4b 	bl	8009524 <ADC_ConversionStop>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d13f      	bne.n	8008d18 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f022 0201 	bic.w	r2, r2, #1
 8008ca6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d10f      	bne.n	8008cd6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f001 fa74 	bl	800a1a8 <HAL_DMA_Abort>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d005      	beq.n	8008cd6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f022 0210 	bic.w	r2, r2, #16
 8008ce4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d105      	bne.n	8008cf8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fd5b 	bl	80097a8 <ADC_Disable>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	73fb      	strb	r3, [r7, #15]
 8008cf6:	e002      	b.n	8008cfe <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fd55 	bl	80097a8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d109      	bne.n	8008d18 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d08:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008d0c:	f023 0301 	bic.w	r3, r3, #1
 8008d10:	f043 0201 	orr.w	r2, r3, #1
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008d32:	bf00      	nop
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
	...

08008d40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b0b6      	sub	sp, #216	@ 0xd8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d101      	bne.n	8008d62 <HAL_ADC_ConfigChannel+0x22>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e3c9      	b.n	80094f6 <HAL_ADC_ConfigChannel+0x7b6>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7ff fd34 	bl	80087dc <LL_ADC_REG_IsConversionOngoing>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f040 83aa 	bne.w	80094d0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	2b05      	cmp	r3, #5
 8008d8a:	d824      	bhi.n	8008dd6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	3b02      	subs	r3, #2
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d81b      	bhi.n	8008dce <HAL_ADC_ConfigChannel+0x8e>
 8008d96:	a201      	add	r2, pc, #4	@ (adr r2, 8008d9c <HAL_ADC_ConfigChannel+0x5c>)
 8008d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9c:	08008dad 	.word	0x08008dad
 8008da0:	08008db5 	.word	0x08008db5
 8008da4:	08008dbd 	.word	0x08008dbd
 8008da8:	08008dc5 	.word	0x08008dc5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8008dac:	230c      	movs	r3, #12
 8008dae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8008db2:	e010      	b.n	8008dd6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8008db4:	2312      	movs	r3, #18
 8008db6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8008dba:	e00c      	b.n	8008dd6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8008dbc:	2318      	movs	r3, #24
 8008dbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8008dc2:	e008      	b.n	8008dd6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8008dc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8008dcc:	e003      	b.n	8008dd6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8008dce:	2306      	movs	r3, #6
 8008dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8008dd4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6818      	ldr	r0, [r3, #0]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	461a      	mov	r2, r3
 8008de0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8008de4:	f7ff fbac 	bl	8008540 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7ff fcf5 	bl	80087dc <LL_ADC_REG_IsConversionOngoing>
 8008df2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7ff fd15 	bl	800882a <LL_ADC_INJ_IsConversionOngoing>
 8008e00:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008e04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f040 81a4 	bne.w	8009156 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008e0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f040 819f 	bne.w	8009156 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6818      	ldr	r0, [r3, #0]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	6819      	ldr	r1, [r3, #0]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	461a      	mov	r2, r3
 8008e26:	f7ff fbb7 	bl	8008598 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	695a      	ldr	r2, [r3, #20]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	08db      	lsrs	r3, r3, #3
 8008e36:	f003 0303 	and.w	r3, r3, #3
 8008e3a:	005b      	lsls	r3, r3, #1
 8008e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d00a      	beq.n	8008e62 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6818      	ldr	r0, [r3, #0]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	6919      	ldr	r1, [r3, #16]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008e5c:	f7ff fb08 	bl	8008470 <LL_ADC_SetOffset>
 8008e60:	e179      	b.n	8009156 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2100      	movs	r1, #0
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7ff fb25 	bl	80084b8 <LL_ADC_GetOffsetChannel>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10a      	bne.n	8008e8e <HAL_ADC_ConfigChannel+0x14e>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7ff fb1a 	bl	80084b8 <LL_ADC_GetOffsetChannel>
 8008e84:	4603      	mov	r3, r0
 8008e86:	0e9b      	lsrs	r3, r3, #26
 8008e88:	f003 021f 	and.w	r2, r3, #31
 8008e8c:	e01e      	b.n	8008ecc <HAL_ADC_ConfigChannel+0x18c>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2100      	movs	r1, #0
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7ff fb0f 	bl	80084b8 <LL_ADC_GetOffsetChannel>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ea0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ea4:	fa93 f3a3 	rbit	r3, r3
 8008ea8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008eac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008eb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8008ebc:	2320      	movs	r3, #32
 8008ebe:	e004      	b.n	8008eca <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8008ec0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008ec4:	fab3 f383 	clz	r3, r3
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d105      	bne.n	8008ee4 <HAL_ADC_ConfigChannel+0x1a4>
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	0e9b      	lsrs	r3, r3, #26
 8008ede:	f003 031f 	and.w	r3, r3, #31
 8008ee2:	e018      	b.n	8008f16 <HAL_ADC_ConfigChannel+0x1d6>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ef0:	fa93 f3a3 	rbit	r3, r3
 8008ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8008ef8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008efc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8008f00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8008f08:	2320      	movs	r3, #32
 8008f0a:	e004      	b.n	8008f16 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8008f0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008f10:	fab3 f383 	clz	r3, r3
 8008f14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d106      	bne.n	8008f28 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2100      	movs	r1, #0
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7ff fade 	bl	80084e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7ff fac2 	bl	80084b8 <LL_ADC_GetOffsetChannel>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10a      	bne.n	8008f54 <HAL_ADC_ConfigChannel+0x214>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2101      	movs	r1, #1
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7ff fab7 	bl	80084b8 <LL_ADC_GetOffsetChannel>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	0e9b      	lsrs	r3, r3, #26
 8008f4e:	f003 021f 	and.w	r2, r3, #31
 8008f52:	e01e      	b.n	8008f92 <HAL_ADC_ConfigChannel+0x252>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2101      	movs	r1, #1
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7ff faac 	bl	80084b8 <LL_ADC_GetOffsetChannel>
 8008f60:	4603      	mov	r3, r0
 8008f62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f6a:	fa93 f3a3 	rbit	r3, r3
 8008f6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8008f72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8008f7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d101      	bne.n	8008f86 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8008f82:	2320      	movs	r3, #32
 8008f84:	e004      	b.n	8008f90 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8008f86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008f8a:	fab3 f383 	clz	r3, r3
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d105      	bne.n	8008faa <HAL_ADC_ConfigChannel+0x26a>
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	0e9b      	lsrs	r3, r3, #26
 8008fa4:	f003 031f 	and.w	r3, r3, #31
 8008fa8:	e018      	b.n	8008fdc <HAL_ADC_ConfigChannel+0x29c>
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008fb6:	fa93 f3a3 	rbit	r3, r3
 8008fba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8008fbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008fc2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8008fc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8008fce:	2320      	movs	r3, #32
 8008fd0:	e004      	b.n	8008fdc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8008fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fd6:	fab3 f383 	clz	r3, r3
 8008fda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d106      	bne.n	8008fee <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7ff fa7b 	bl	80084e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2102      	movs	r1, #2
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7ff fa5f 	bl	80084b8 <LL_ADC_GetOffsetChannel>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <HAL_ADC_ConfigChannel+0x2da>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2102      	movs	r1, #2
 800900a:	4618      	mov	r0, r3
 800900c:	f7ff fa54 	bl	80084b8 <LL_ADC_GetOffsetChannel>
 8009010:	4603      	mov	r3, r0
 8009012:	0e9b      	lsrs	r3, r3, #26
 8009014:	f003 021f 	and.w	r2, r3, #31
 8009018:	e01e      	b.n	8009058 <HAL_ADC_ConfigChannel+0x318>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2102      	movs	r1, #2
 8009020:	4618      	mov	r0, r3
 8009022:	f7ff fa49 	bl	80084b8 <LL_ADC_GetOffsetChannel>
 8009026:	4603      	mov	r3, r0
 8009028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800902c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009030:	fa93 f3a3 	rbit	r3, r3
 8009034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8009038:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800903c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8009040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009044:	2b00      	cmp	r3, #0
 8009046:	d101      	bne.n	800904c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8009048:	2320      	movs	r3, #32
 800904a:	e004      	b.n	8009056 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800904c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009050:	fab3 f383 	clz	r3, r3
 8009054:	b2db      	uxtb	r3, r3
 8009056:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009060:	2b00      	cmp	r3, #0
 8009062:	d105      	bne.n	8009070 <HAL_ADC_ConfigChannel+0x330>
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	0e9b      	lsrs	r3, r3, #26
 800906a:	f003 031f 	and.w	r3, r3, #31
 800906e:	e014      	b.n	800909a <HAL_ADC_ConfigChannel+0x35a>
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009076:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009078:	fa93 f3a3 	rbit	r3, r3
 800907c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800907e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009080:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8009084:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800908c:	2320      	movs	r3, #32
 800908e:	e004      	b.n	800909a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8009090:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009094:	fab3 f383 	clz	r3, r3
 8009098:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800909a:	429a      	cmp	r2, r3
 800909c:	d106      	bne.n	80090ac <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2200      	movs	r2, #0
 80090a4:	2102      	movs	r1, #2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff fa1c 	bl	80084e4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2103      	movs	r1, #3
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff fa00 	bl	80084b8 <LL_ADC_GetOffsetChannel>
 80090b8:	4603      	mov	r3, r0
 80090ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10a      	bne.n	80090d8 <HAL_ADC_ConfigChannel+0x398>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2103      	movs	r1, #3
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7ff f9f5 	bl	80084b8 <LL_ADC_GetOffsetChannel>
 80090ce:	4603      	mov	r3, r0
 80090d0:	0e9b      	lsrs	r3, r3, #26
 80090d2:	f003 021f 	and.w	r2, r3, #31
 80090d6:	e017      	b.n	8009108 <HAL_ADC_ConfigChannel+0x3c8>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2103      	movs	r1, #3
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff f9ea 	bl	80084b8 <LL_ADC_GetOffsetChannel>
 80090e4:	4603      	mov	r3, r0
 80090e6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090ea:	fa93 f3a3 	rbit	r3, r3
 80090ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80090f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090f2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80090f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80090fa:	2320      	movs	r3, #32
 80090fc:	e003      	b.n	8009106 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80090fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009100:	fab3 f383 	clz	r3, r3
 8009104:	b2db      	uxtb	r3, r3
 8009106:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009110:	2b00      	cmp	r3, #0
 8009112:	d105      	bne.n	8009120 <HAL_ADC_ConfigChannel+0x3e0>
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	0e9b      	lsrs	r3, r3, #26
 800911a:	f003 031f 	and.w	r3, r3, #31
 800911e:	e011      	b.n	8009144 <HAL_ADC_ConfigChannel+0x404>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009126:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009128:	fa93 f3a3 	rbit	r3, r3
 800912c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800912e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009130:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8009132:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8009138:	2320      	movs	r3, #32
 800913a:	e003      	b.n	8009144 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800913c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800913e:	fab3 f383 	clz	r3, r3
 8009142:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009144:	429a      	cmp	r2, r3
 8009146:	d106      	bne.n	8009156 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2200      	movs	r2, #0
 800914e:	2103      	movs	r1, #3
 8009150:	4618      	mov	r0, r3
 8009152:	f7ff f9c7 	bl	80084e4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4618      	mov	r0, r3
 800915c:	f7ff faf0 	bl	8008740 <LL_ADC_IsEnabled>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	f040 8140 	bne.w	80093e8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6818      	ldr	r0, [r3, #0]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	6819      	ldr	r1, [r3, #0]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	461a      	mov	r2, r3
 8009176:	f7ff fa3b 	bl	80085f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	4a8f      	ldr	r2, [pc, #572]	@ (80093bc <HAL_ADC_ConfigChannel+0x67c>)
 8009180:	4293      	cmp	r3, r2
 8009182:	f040 8131 	bne.w	80093e8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10b      	bne.n	80091ae <HAL_ADC_ConfigChannel+0x46e>
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	0e9b      	lsrs	r3, r3, #26
 800919c:	3301      	adds	r3, #1
 800919e:	f003 031f 	and.w	r3, r3, #31
 80091a2:	2b09      	cmp	r3, #9
 80091a4:	bf94      	ite	ls
 80091a6:	2301      	movls	r3, #1
 80091a8:	2300      	movhi	r3, #0
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	e019      	b.n	80091e2 <HAL_ADC_ConfigChannel+0x4a2>
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80091b6:	fa93 f3a3 	rbit	r3, r3
 80091ba:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80091bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80091c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80091c6:	2320      	movs	r3, #32
 80091c8:	e003      	b.n	80091d2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80091ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091cc:	fab3 f383 	clz	r3, r3
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	3301      	adds	r3, #1
 80091d4:	f003 031f 	and.w	r3, r3, #31
 80091d8:	2b09      	cmp	r3, #9
 80091da:	bf94      	ite	ls
 80091dc:	2301      	movls	r3, #1
 80091de:	2300      	movhi	r3, #0
 80091e0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d079      	beq.n	80092da <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d107      	bne.n	8009202 <HAL_ADC_ConfigChannel+0x4c2>
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	0e9b      	lsrs	r3, r3, #26
 80091f8:	3301      	adds	r3, #1
 80091fa:	069b      	lsls	r3, r3, #26
 80091fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009200:	e015      	b.n	800922e <HAL_ADC_ConfigChannel+0x4ee>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800920a:	fa93 f3a3 	rbit	r3, r3
 800920e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8009210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009212:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8009214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800921a:	2320      	movs	r3, #32
 800921c:	e003      	b.n	8009226 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800921e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009220:	fab3 f383 	clz	r3, r3
 8009224:	b2db      	uxtb	r3, r3
 8009226:	3301      	adds	r3, #1
 8009228:	069b      	lsls	r3, r3, #26
 800922a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009236:	2b00      	cmp	r3, #0
 8009238:	d109      	bne.n	800924e <HAL_ADC_ConfigChannel+0x50e>
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	0e9b      	lsrs	r3, r3, #26
 8009240:	3301      	adds	r3, #1
 8009242:	f003 031f 	and.w	r3, r3, #31
 8009246:	2101      	movs	r1, #1
 8009248:	fa01 f303 	lsl.w	r3, r1, r3
 800924c:	e017      	b.n	800927e <HAL_ADC_ConfigChannel+0x53e>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009254:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009256:	fa93 f3a3 	rbit	r3, r3
 800925a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800925c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800925e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8009260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8009266:	2320      	movs	r3, #32
 8009268:	e003      	b.n	8009272 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800926a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800926c:	fab3 f383 	clz	r3, r3
 8009270:	b2db      	uxtb	r3, r3
 8009272:	3301      	adds	r3, #1
 8009274:	f003 031f 	and.w	r3, r3, #31
 8009278:	2101      	movs	r1, #1
 800927a:	fa01 f303 	lsl.w	r3, r1, r3
 800927e:	ea42 0103 	orr.w	r1, r2, r3
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10a      	bne.n	80092a4 <HAL_ADC_ConfigChannel+0x564>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	0e9b      	lsrs	r3, r3, #26
 8009294:	3301      	adds	r3, #1
 8009296:	f003 021f 	and.w	r2, r3, #31
 800929a:	4613      	mov	r3, r2
 800929c:	005b      	lsls	r3, r3, #1
 800929e:	4413      	add	r3, r2
 80092a0:	051b      	lsls	r3, r3, #20
 80092a2:	e018      	b.n	80092d6 <HAL_ADC_ConfigChannel+0x596>
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ac:	fa93 f3a3 	rbit	r3, r3
 80092b0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80092b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80092b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80092bc:	2320      	movs	r3, #32
 80092be:	e003      	b.n	80092c8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80092c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c2:	fab3 f383 	clz	r3, r3
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	3301      	adds	r3, #1
 80092ca:	f003 021f 	and.w	r2, r3, #31
 80092ce:	4613      	mov	r3, r2
 80092d0:	005b      	lsls	r3, r3, #1
 80092d2:	4413      	add	r3, r2
 80092d4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80092d6:	430b      	orrs	r3, r1
 80092d8:	e081      	b.n	80093de <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d107      	bne.n	80092f6 <HAL_ADC_ConfigChannel+0x5b6>
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	0e9b      	lsrs	r3, r3, #26
 80092ec:	3301      	adds	r3, #1
 80092ee:	069b      	lsls	r3, r3, #26
 80092f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80092f4:	e015      	b.n	8009322 <HAL_ADC_ConfigChannel+0x5e2>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fe:	fa93 f3a3 	rbit	r3, r3
 8009302:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8009304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8009308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800930e:	2320      	movs	r3, #32
 8009310:	e003      	b.n	800931a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8009312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009314:	fab3 f383 	clz	r3, r3
 8009318:	b2db      	uxtb	r3, r3
 800931a:	3301      	adds	r3, #1
 800931c:	069b      	lsls	r3, r3, #26
 800931e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800932a:	2b00      	cmp	r3, #0
 800932c:	d109      	bne.n	8009342 <HAL_ADC_ConfigChannel+0x602>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	0e9b      	lsrs	r3, r3, #26
 8009334:	3301      	adds	r3, #1
 8009336:	f003 031f 	and.w	r3, r3, #31
 800933a:	2101      	movs	r1, #1
 800933c:	fa01 f303 	lsl.w	r3, r1, r3
 8009340:	e017      	b.n	8009372 <HAL_ADC_ConfigChannel+0x632>
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	fa93 f3a3 	rbit	r3, r3
 800934e:	61bb      	str	r3, [r7, #24]
  return result;
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800935a:	2320      	movs	r3, #32
 800935c:	e003      	b.n	8009366 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800935e:	6a3b      	ldr	r3, [r7, #32]
 8009360:	fab3 f383 	clz	r3, r3
 8009364:	b2db      	uxtb	r3, r3
 8009366:	3301      	adds	r3, #1
 8009368:	f003 031f 	and.w	r3, r3, #31
 800936c:	2101      	movs	r1, #1
 800936e:	fa01 f303 	lsl.w	r3, r1, r3
 8009372:	ea42 0103 	orr.w	r1, r2, r3
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10d      	bne.n	800939e <HAL_ADC_ConfigChannel+0x65e>
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	0e9b      	lsrs	r3, r3, #26
 8009388:	3301      	adds	r3, #1
 800938a:	f003 021f 	and.w	r2, r3, #31
 800938e:	4613      	mov	r3, r2
 8009390:	005b      	lsls	r3, r3, #1
 8009392:	4413      	add	r3, r2
 8009394:	3b1e      	subs	r3, #30
 8009396:	051b      	lsls	r3, r3, #20
 8009398:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800939c:	e01e      	b.n	80093dc <HAL_ADC_ConfigChannel+0x69c>
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	fa93 f3a3 	rbit	r3, r3
 80093aa:	60fb      	str	r3, [r7, #12]
  return result;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d104      	bne.n	80093c0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80093b6:	2320      	movs	r3, #32
 80093b8:	e006      	b.n	80093c8 <HAL_ADC_ConfigChannel+0x688>
 80093ba:	bf00      	nop
 80093bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	fab3 f383 	clz	r3, r3
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	3301      	adds	r3, #1
 80093ca:	f003 021f 	and.w	r2, r3, #31
 80093ce:	4613      	mov	r3, r2
 80093d0:	005b      	lsls	r3, r3, #1
 80093d2:	4413      	add	r3, r2
 80093d4:	3b1e      	subs	r3, #30
 80093d6:	051b      	lsls	r3, r3, #20
 80093d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80093dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80093e2:	4619      	mov	r1, r3
 80093e4:	f7ff f8d8 	bl	8008598 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	4b44      	ldr	r3, [pc, #272]	@ (8009500 <HAL_ADC_ConfigChannel+0x7c0>)
 80093ee:	4013      	ands	r3, r2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d07a      	beq.n	80094ea <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80093f4:	4843      	ldr	r0, [pc, #268]	@ (8009504 <HAL_ADC_ConfigChannel+0x7c4>)
 80093f6:	f7ff f82d 	bl	8008454 <LL_ADC_GetCommonPathInternalCh>
 80093fa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a41      	ldr	r2, [pc, #260]	@ (8009508 <HAL_ADC_ConfigChannel+0x7c8>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d12c      	bne.n	8009462 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009408:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800940c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d126      	bne.n	8009462 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a3c      	ldr	r2, [pc, #240]	@ (800950c <HAL_ADC_ConfigChannel+0x7cc>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d004      	beq.n	8009428 <HAL_ADC_ConfigChannel+0x6e8>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a3b      	ldr	r2, [pc, #236]	@ (8009510 <HAL_ADC_ConfigChannel+0x7d0>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d15d      	bne.n	80094e4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009428:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800942c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009430:	4619      	mov	r1, r3
 8009432:	4834      	ldr	r0, [pc, #208]	@ (8009504 <HAL_ADC_ConfigChannel+0x7c4>)
 8009434:	f7fe fffb 	bl	800842e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009438:	4b36      	ldr	r3, [pc, #216]	@ (8009514 <HAL_ADC_ConfigChannel+0x7d4>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	099b      	lsrs	r3, r3, #6
 800943e:	4a36      	ldr	r2, [pc, #216]	@ (8009518 <HAL_ADC_ConfigChannel+0x7d8>)
 8009440:	fba2 2303 	umull	r2, r3, r2, r3
 8009444:	099b      	lsrs	r3, r3, #6
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	4613      	mov	r3, r2
 800944a:	005b      	lsls	r3, r3, #1
 800944c:	4413      	add	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009452:	e002      	b.n	800945a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	3b01      	subs	r3, #1
 8009458:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1f9      	bne.n	8009454 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009460:	e040      	b.n	80094e4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a2d      	ldr	r2, [pc, #180]	@ (800951c <HAL_ADC_ConfigChannel+0x7dc>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d118      	bne.n	800949e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800946c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d112      	bne.n	800949e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a23      	ldr	r2, [pc, #140]	@ (800950c <HAL_ADC_ConfigChannel+0x7cc>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d004      	beq.n	800948c <HAL_ADC_ConfigChannel+0x74c>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a22      	ldr	r2, [pc, #136]	@ (8009510 <HAL_ADC_ConfigChannel+0x7d0>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d12d      	bne.n	80094e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800948c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009490:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009494:	4619      	mov	r1, r3
 8009496:	481b      	ldr	r0, [pc, #108]	@ (8009504 <HAL_ADC_ConfigChannel+0x7c4>)
 8009498:	f7fe ffc9 	bl	800842e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800949c:	e024      	b.n	80094e8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a1f      	ldr	r2, [pc, #124]	@ (8009520 <HAL_ADC_ConfigChannel+0x7e0>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d120      	bne.n	80094ea <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80094a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80094ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d11a      	bne.n	80094ea <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a14      	ldr	r2, [pc, #80]	@ (800950c <HAL_ADC_ConfigChannel+0x7cc>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d115      	bne.n	80094ea <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80094be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80094c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80094c6:	4619      	mov	r1, r3
 80094c8:	480e      	ldr	r0, [pc, #56]	@ (8009504 <HAL_ADC_ConfigChannel+0x7c4>)
 80094ca:	f7fe ffb0 	bl	800842e <LL_ADC_SetCommonPathInternalCh>
 80094ce:	e00c      	b.n	80094ea <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094d4:	f043 0220 	orr.w	r2, r3, #32
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80094e2:	e002      	b.n	80094ea <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80094e4:	bf00      	nop
 80094e6:	e000      	b.n	80094ea <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80094e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80094f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	37d8      	adds	r7, #216	@ 0xd8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	80080000 	.word	0x80080000
 8009504:	50040300 	.word	0x50040300
 8009508:	c7520000 	.word	0xc7520000
 800950c:	50040000 	.word	0x50040000
 8009510:	50040200 	.word	0x50040200
 8009514:	20000000 	.word	0x20000000
 8009518:	053e2d63 	.word	0x053e2d63
 800951c:	cb840000 	.word	0xcb840000
 8009520:	80000001 	.word	0x80000001

08009524 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b088      	sub	sp, #32
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800952e:	2300      	movs	r3, #0
 8009530:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4618      	mov	r0, r3
 800953c:	f7ff f94e 	bl	80087dc <LL_ADC_REG_IsConversionOngoing>
 8009540:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4618      	mov	r0, r3
 8009548:	f7ff f96f 	bl	800882a <LL_ADC_INJ_IsConversionOngoing>
 800954c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d103      	bne.n	800955c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 8098 	beq.w	800968c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009566:	2b00      	cmp	r3, #0
 8009568:	d02a      	beq.n	80095c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	7e5b      	ldrb	r3, [r3, #25]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d126      	bne.n	80095c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	7e1b      	ldrb	r3, [r3, #24]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d122      	bne.n	80095c0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800957a:	2301      	movs	r3, #1
 800957c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800957e:	e014      	b.n	80095aa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	4a45      	ldr	r2, [pc, #276]	@ (8009698 <ADC_ConversionStop+0x174>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d90d      	bls.n	80095a4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800958c:	f043 0210 	orr.w	r2, r3, #16
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009598:	f043 0201 	orr.w	r2, r3, #1
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e074      	b.n	800968e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	3301      	adds	r3, #1
 80095a8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095b4:	2b40      	cmp	r3, #64	@ 0x40
 80095b6:	d1e3      	bne.n	8009580 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2240      	movs	r2, #64	@ 0x40
 80095be:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d014      	beq.n	80095f0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7ff f906 	bl	80087dc <LL_ADC_REG_IsConversionOngoing>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00c      	beq.n	80095f0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff f8c3 	bl	8008766 <LL_ADC_IsDisableOngoing>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d104      	bne.n	80095f0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7ff f8e2 	bl	80087b4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d014      	beq.n	8009620 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7ff f915 	bl	800882a <LL_ADC_INJ_IsConversionOngoing>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00c      	beq.n	8009620 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4618      	mov	r0, r3
 800960c:	f7ff f8ab 	bl	8008766 <LL_ADC_IsDisableOngoing>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d104      	bne.n	8009620 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f7ff f8f1 	bl	8008802 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d005      	beq.n	8009632 <ADC_ConversionStop+0x10e>
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	2b03      	cmp	r3, #3
 800962a:	d105      	bne.n	8009638 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800962c:	230c      	movs	r3, #12
 800962e:	617b      	str	r3, [r7, #20]
        break;
 8009630:	e005      	b.n	800963e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8009632:	2308      	movs	r3, #8
 8009634:	617b      	str	r3, [r7, #20]
        break;
 8009636:	e002      	b.n	800963e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8009638:	2304      	movs	r3, #4
 800963a:	617b      	str	r3, [r7, #20]
        break;
 800963c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800963e:	f7fe feb3 	bl	80083a8 <HAL_GetTick>
 8009642:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009644:	e01b      	b.n	800967e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8009646:	f7fe feaf 	bl	80083a8 <HAL_GetTick>
 800964a:	4602      	mov	r2, r0
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	2b05      	cmp	r3, #5
 8009652:	d914      	bls.n	800967e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689a      	ldr	r2, [r3, #8]
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	4013      	ands	r3, r2
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00d      	beq.n	800967e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009666:	f043 0210 	orr.w	r2, r3, #16
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009672:	f043 0201 	orr.w	r2, r3, #1
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e007      	b.n	800968e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	4013      	ands	r3, r2
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1dc      	bne.n	8009646 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3720      	adds	r7, #32
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	a33fffff 	.word	0xa33fffff

0800969c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80096a4:	2300      	movs	r3, #0
 80096a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7ff f847 	bl	8008740 <LL_ADC_IsEnabled>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d169      	bne.n	800978c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	689a      	ldr	r2, [r3, #8]
 80096be:	4b36      	ldr	r3, [pc, #216]	@ (8009798 <ADC_Enable+0xfc>)
 80096c0:	4013      	ands	r3, r2
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00d      	beq.n	80096e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ca:	f043 0210 	orr.w	r2, r3, #16
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096d6:	f043 0201 	orr.w	r2, r3, #1
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e055      	b.n	800978e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff f802 	bl	80086f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80096ec:	482b      	ldr	r0, [pc, #172]	@ (800979c <ADC_Enable+0x100>)
 80096ee:	f7fe feb1 	bl	8008454 <LL_ADC_GetCommonPathInternalCh>
 80096f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80096f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d013      	beq.n	8009724 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80096fc:	4b28      	ldr	r3, [pc, #160]	@ (80097a0 <ADC_Enable+0x104>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	099b      	lsrs	r3, r3, #6
 8009702:	4a28      	ldr	r2, [pc, #160]	@ (80097a4 <ADC_Enable+0x108>)
 8009704:	fba2 2303 	umull	r2, r3, r2, r3
 8009708:	099b      	lsrs	r3, r3, #6
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	4613      	mov	r3, r2
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	4413      	add	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8009716:	e002      	b.n	800971e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	3b01      	subs	r3, #1
 800971c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1f9      	bne.n	8009718 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009724:	f7fe fe40 	bl	80083a8 <HAL_GetTick>
 8009728:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800972a:	e028      	b.n	800977e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4618      	mov	r0, r3
 8009732:	f7ff f805 	bl	8008740 <LL_ADC_IsEnabled>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d104      	bne.n	8009746 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe ffd5 	bl	80086f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009746:	f7fe fe2f 	bl	80083a8 <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	2b02      	cmp	r3, #2
 8009752:	d914      	bls.n	800977e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b01      	cmp	r3, #1
 8009760:	d00d      	beq.n	800977e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009766:	f043 0210 	orr.w	r2, r3, #16
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009772:	f043 0201 	orr.w	r2, r3, #1
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e007      	b.n	800978e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	2b01      	cmp	r3, #1
 800978a:	d1cf      	bne.n	800972c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	8000003f 	.word	0x8000003f
 800979c:	50040300 	.word	0x50040300
 80097a0:	20000000 	.word	0x20000000
 80097a4:	053e2d63 	.word	0x053e2d63

080097a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7fe ffd6 	bl	8008766 <LL_ADC_IsDisableOngoing>
 80097ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe ffbd 	bl	8008740 <LL_ADC_IsEnabled>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d047      	beq.n	800985c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d144      	bne.n	800985c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f003 030d 	and.w	r3, r3, #13
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d10c      	bne.n	80097fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7fe ff97 	bl	8008718 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2203      	movs	r2, #3
 80097f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80097f2:	f7fe fdd9 	bl	80083a8 <HAL_GetTick>
 80097f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80097f8:	e029      	b.n	800984e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097fe:	f043 0210 	orr.w	r2, r3, #16
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800980a:	f043 0201 	orr.w	r2, r3, #1
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e023      	b.n	800985e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009816:	f7fe fdc7 	bl	80083a8 <HAL_GetTick>
 800981a:	4602      	mov	r2, r0
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	2b02      	cmp	r3, #2
 8009822:	d914      	bls.n	800984e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00d      	beq.n	800984e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009836:	f043 0210 	orr.w	r2, r3, #16
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009842:	f043 0201 	orr.w	r2, r3, #1
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e007      	b.n	800985e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1dc      	bne.n	8009816 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b084      	sub	sp, #16
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009872:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009878:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800987c:	2b00      	cmp	r3, #0
 800987e:	d14b      	bne.n	8009918 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009884:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 0308 	and.w	r3, r3, #8
 8009896:	2b00      	cmp	r3, #0
 8009898:	d021      	beq.n	80098de <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fe fe3b 	bl	800851a <LL_ADC_REG_IsTriggerSourceSWStart>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d032      	beq.n	8009910 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d12b      	bne.n	8009910 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d11f      	bne.n	8009910 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098d4:	f043 0201 	orr.w	r2, r3, #1
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	655a      	str	r2, [r3, #84]	@ 0x54
 80098dc:	e018      	b.n	8009910 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	f003 0302 	and.w	r3, r3, #2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d111      	bne.n	8009910 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009900:	2b00      	cmp	r3, #0
 8009902:	d105      	bne.n	8009910 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009908:	f043 0201 	orr.w	r2, r3, #1
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f7f7 ff55 	bl	80017c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009916:	e00e      	b.n	8009936 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800991c:	f003 0310 	and.w	r3, r3, #16
 8009920:	2b00      	cmp	r3, #0
 8009922:	d003      	beq.n	800992c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f7ff fa00 	bl	8008d2a <HAL_ADC_ErrorCallback>
}
 800992a:	e004      	b.n	8009936 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	4798      	blx	r3
}
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f7f7 ff1b 	bl	8001788 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009952:	bf00      	nop
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009966:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800996c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009978:	f043 0204 	orr.w	r2, r3, #4
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f7ff f9d2 	bl	8008d2a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <LL_ADC_IsEnabled>:
{
 800998e:	b480      	push	{r7}
 8009990:	b083      	sub	sp, #12
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d101      	bne.n	80099a6 <LL_ADC_IsEnabled+0x18>
 80099a2:	2301      	movs	r3, #1
 80099a4:	e000      	b.n	80099a8 <LL_ADC_IsEnabled+0x1a>
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <LL_ADC_REG_IsConversionOngoing>:
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b04      	cmp	r3, #4
 80099c6:	d101      	bne.n	80099cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80099c8:	2301      	movs	r3, #1
 80099ca:	e000      	b.n	80099ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
	...

080099dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80099dc:	b590      	push	{r4, r7, lr}
 80099de:	b09f      	sub	sp, #124	@ 0x7c
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d101      	bne.n	80099fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80099f6:	2302      	movs	r3, #2
 80099f8:	e093      	b.n	8009b22 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8009a02:	2300      	movs	r3, #0
 8009a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8009a06:	2300      	movs	r3, #0
 8009a08:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a47      	ldr	r2, [pc, #284]	@ (8009b2c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d102      	bne.n	8009a1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009a14:	4b46      	ldr	r3, [pc, #280]	@ (8009b30 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009a16:	60bb      	str	r3, [r7, #8]
 8009a18:	e001      	b.n	8009a1e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10b      	bne.n	8009a3c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a28:	f043 0220 	orr.w	r2, r3, #32
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e072      	b.n	8009b22 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7ff ffb8 	bl	80099b4 <LL_ADC_REG_IsConversionOngoing>
 8009a44:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7ff ffb2 	bl	80099b4 <LL_ADC_REG_IsConversionOngoing>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d154      	bne.n	8009b00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8009a56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d151      	bne.n	8009b00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009a5c:	4b35      	ldr	r3, [pc, #212]	@ (8009b34 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8009a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d02c      	beq.n	8009ac2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009a68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	6859      	ldr	r1, [r3, #4]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009a7a:	035b      	lsls	r3, r3, #13
 8009a7c:	430b      	orrs	r3, r1
 8009a7e:	431a      	orrs	r2, r3
 8009a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009a84:	4829      	ldr	r0, [pc, #164]	@ (8009b2c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8009a86:	f7ff ff82 	bl	800998e <LL_ADC_IsEnabled>
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	4828      	ldr	r0, [pc, #160]	@ (8009b30 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009a8e:	f7ff ff7e 	bl	800998e <LL_ADC_IsEnabled>
 8009a92:	4603      	mov	r3, r0
 8009a94:	431c      	orrs	r4, r3
 8009a96:	4828      	ldr	r0, [pc, #160]	@ (8009b38 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8009a98:	f7ff ff79 	bl	800998e <LL_ADC_IsEnabled>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	4323      	orrs	r3, r4
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d137      	bne.n	8009b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009aa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8009aac:	f023 030f 	bic.w	r3, r3, #15
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	6811      	ldr	r1, [r2, #0]
 8009ab4:	683a      	ldr	r2, [r7, #0]
 8009ab6:	6892      	ldr	r2, [r2, #8]
 8009ab8:	430a      	orrs	r2, r1
 8009aba:	431a      	orrs	r2, r3
 8009abc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009abe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009ac0:	e028      	b.n	8009b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009acc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009ace:	4817      	ldr	r0, [pc, #92]	@ (8009b2c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8009ad0:	f7ff ff5d 	bl	800998e <LL_ADC_IsEnabled>
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	4816      	ldr	r0, [pc, #88]	@ (8009b30 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009ad8:	f7ff ff59 	bl	800998e <LL_ADC_IsEnabled>
 8009adc:	4603      	mov	r3, r0
 8009ade:	431c      	orrs	r4, r3
 8009ae0:	4815      	ldr	r0, [pc, #84]	@ (8009b38 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8009ae2:	f7ff ff54 	bl	800998e <LL_ADC_IsEnabled>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	4323      	orrs	r3, r4
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d112      	bne.n	8009b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009aee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8009af6:	f023 030f 	bic.w	r3, r3, #15
 8009afa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009afc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009afe:	e009      	b.n	8009b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b04:	f043 0220 	orr.w	r2, r3, #32
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8009b12:	e000      	b.n	8009b16 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8009b14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8009b1e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	377c      	adds	r7, #124	@ 0x7c
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd90      	pop	{r4, r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	50040000 	.word	0x50040000
 8009b30:	50040100 	.word	0x50040100
 8009b34:	50040300 	.word	0x50040300
 8009b38:	50040200 	.word	0x50040200

08009b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f003 0307 	and.w	r3, r3, #7
 8009b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8009b80 <__NVIC_SetPriorityGrouping+0x44>)
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009b58:	4013      	ands	r3, r2
 8009b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009b6e:	4a04      	ldr	r2, [pc, #16]	@ (8009b80 <__NVIC_SetPriorityGrouping+0x44>)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	60d3      	str	r3, [r2, #12]
}
 8009b74:	bf00      	nop
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	e000ed00 	.word	0xe000ed00

08009b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009b84:	b480      	push	{r7}
 8009b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009b88:	4b04      	ldr	r3, [pc, #16]	@ (8009b9c <__NVIC_GetPriorityGrouping+0x18>)
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	0a1b      	lsrs	r3, r3, #8
 8009b8e:	f003 0307 	and.w	r3, r3, #7
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	e000ed00 	.word	0xe000ed00

08009ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	db0b      	blt.n	8009bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009bb2:	79fb      	ldrb	r3, [r7, #7]
 8009bb4:	f003 021f 	and.w	r2, r3, #31
 8009bb8:	4907      	ldr	r1, [pc, #28]	@ (8009bd8 <__NVIC_EnableIRQ+0x38>)
 8009bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bbe:	095b      	lsrs	r3, r3, #5
 8009bc0:	2001      	movs	r0, #1
 8009bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8009bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009bca:	bf00      	nop
 8009bcc:	370c      	adds	r7, #12
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	e000e100 	.word	0xe000e100

08009bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	4603      	mov	r3, r0
 8009be4:	6039      	str	r1, [r7, #0]
 8009be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	db0a      	blt.n	8009c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	b2da      	uxtb	r2, r3
 8009bf4:	490c      	ldr	r1, [pc, #48]	@ (8009c28 <__NVIC_SetPriority+0x4c>)
 8009bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bfa:	0112      	lsls	r2, r2, #4
 8009bfc:	b2d2      	uxtb	r2, r2
 8009bfe:	440b      	add	r3, r1
 8009c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009c04:	e00a      	b.n	8009c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	4908      	ldr	r1, [pc, #32]	@ (8009c2c <__NVIC_SetPriority+0x50>)
 8009c0c:	79fb      	ldrb	r3, [r7, #7]
 8009c0e:	f003 030f 	and.w	r3, r3, #15
 8009c12:	3b04      	subs	r3, #4
 8009c14:	0112      	lsls	r2, r2, #4
 8009c16:	b2d2      	uxtb	r2, r2
 8009c18:	440b      	add	r3, r1
 8009c1a:	761a      	strb	r2, [r3, #24]
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr
 8009c28:	e000e100 	.word	0xe000e100
 8009c2c:	e000ed00 	.word	0xe000ed00

08009c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b089      	sub	sp, #36	@ 0x24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f003 0307 	and.w	r3, r3, #7
 8009c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	f1c3 0307 	rsb	r3, r3, #7
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	bf28      	it	cs
 8009c4e:	2304      	movcs	r3, #4
 8009c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	3304      	adds	r3, #4
 8009c56:	2b06      	cmp	r3, #6
 8009c58:	d902      	bls.n	8009c60 <NVIC_EncodePriority+0x30>
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	3b03      	subs	r3, #3
 8009c5e:	e000      	b.n	8009c62 <NVIC_EncodePriority+0x32>
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c64:	f04f 32ff 	mov.w	r2, #4294967295
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c6e:	43da      	mvns	r2, r3
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	401a      	ands	r2, r3
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009c78:	f04f 31ff 	mov.w	r1, #4294967295
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c82:	43d9      	mvns	r1, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c88:	4313      	orrs	r3, r2
         );
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3724      	adds	r7, #36	@ 0x24
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
	...

08009c98 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009c9c:	f3bf 8f4f 	dsb	sy
}
 8009ca0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009ca2:	4b06      	ldr	r3, [pc, #24]	@ (8009cbc <__NVIC_SystemReset+0x24>)
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009caa:	4904      	ldr	r1, [pc, #16]	@ (8009cbc <__NVIC_SystemReset+0x24>)
 8009cac:	4b04      	ldr	r3, [pc, #16]	@ (8009cc0 <__NVIC_SystemReset+0x28>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009cb2:	f3bf 8f4f 	dsb	sy
}
 8009cb6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009cb8:	bf00      	nop
 8009cba:	e7fd      	b.n	8009cb8 <__NVIC_SystemReset+0x20>
 8009cbc:	e000ed00 	.word	0xe000ed00
 8009cc0:	05fa0004 	.word	0x05fa0004

08009cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cd4:	d301      	bcc.n	8009cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e00f      	b.n	8009cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009cda:	4a0a      	ldr	r2, [pc, #40]	@ (8009d04 <SysTick_Config+0x40>)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009ce2:	210f      	movs	r1, #15
 8009ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce8:	f7ff ff78 	bl	8009bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009cec:	4b05      	ldr	r3, [pc, #20]	@ (8009d04 <SysTick_Config+0x40>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009cf2:	4b04      	ldr	r3, [pc, #16]	@ (8009d04 <SysTick_Config+0x40>)
 8009cf4:	2207      	movs	r2, #7
 8009cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	e000e010 	.word	0xe000e010

08009d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7ff ff13 	bl	8009b3c <__NVIC_SetPriorityGrouping>
}
 8009d16:	bf00      	nop
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b086      	sub	sp, #24
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	4603      	mov	r3, r0
 8009d26:	60b9      	str	r1, [r7, #8]
 8009d28:	607a      	str	r2, [r7, #4]
 8009d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009d30:	f7ff ff28 	bl	8009b84 <__NVIC_GetPriorityGrouping>
 8009d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	68b9      	ldr	r1, [r7, #8]
 8009d3a:	6978      	ldr	r0, [r7, #20]
 8009d3c:	f7ff ff78 	bl	8009c30 <NVIC_EncodePriority>
 8009d40:	4602      	mov	r2, r0
 8009d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d46:	4611      	mov	r1, r2
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7ff ff47 	bl	8009bdc <__NVIC_SetPriority>
}
 8009d4e:	bf00      	nop
 8009d50:	3718      	adds	r7, #24
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b082      	sub	sp, #8
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7ff ff1b 	bl	8009ba0 <__NVIC_EnableIRQ>
}
 8009d6a:	bf00      	nop
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009d76:	f7ff ff8f 	bl	8009c98 <__NVIC_SystemReset>

08009d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b082      	sub	sp, #8
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff ff9e 	bl	8009cc4 <SysTick_Config>
 8009d88:	4603      	mov	r3, r0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
	...

08009d94 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e054      	b.n	8009e50 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	7f5b      	ldrb	r3, [r3, #29]
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d105      	bne.n	8009dbc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7fa fcd0 	bl	800475c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	791b      	ldrb	r3, [r3, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d10c      	bne.n	8009de4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a22      	ldr	r2, [pc, #136]	@ (8009e58 <HAL_CRC_Init+0xc4>)
 8009dd0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689a      	ldr	r2, [r3, #8]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f022 0218 	bic.w	r2, r2, #24
 8009de0:	609a      	str	r2, [r3, #8]
 8009de2:	e00c      	b.n	8009dfe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6899      	ldr	r1, [r3, #8]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	461a      	mov	r2, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f834 	bl	8009e5c <HAL_CRCEx_Polynomial_Set>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e028      	b.n	8009e50 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	795b      	ldrb	r3, [r3, #5]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d105      	bne.n	8009e12 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0e:	611a      	str	r2, [r3, #16]
 8009e10:	e004      	b.n	8009e1c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	6912      	ldr	r2, [r2, #16]
 8009e1a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	695a      	ldr	r2, [r3, #20]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	699a      	ldr	r2, [r3, #24]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	430a      	orrs	r2, r1
 8009e46:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	04c11db7 	.word	0x04c11db7

08009e5c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009e6c:	231f      	movs	r3, #31
 8009e6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d102      	bne.n	8009e80 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	75fb      	strb	r3, [r7, #23]
 8009e7e:	e063      	b.n	8009f48 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009e80:	bf00      	nop
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	1e5a      	subs	r2, r3, #1
 8009e86:	613a      	str	r2, [r7, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d009      	beq.n	8009ea0 <HAL_CRCEx_Polynomial_Set+0x44>
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	f003 031f 	and.w	r3, r3, #31
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	fa22 f303 	lsr.w	r3, r2, r3
 8009e98:	f003 0301 	and.w	r3, r3, #1
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d0f0      	beq.n	8009e82 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b18      	cmp	r3, #24
 8009ea4:	d846      	bhi.n	8009f34 <HAL_CRCEx_Polynomial_Set+0xd8>
 8009ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8009eac <HAL_CRCEx_Polynomial_Set+0x50>)
 8009ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eac:	08009f3b 	.word	0x08009f3b
 8009eb0:	08009f35 	.word	0x08009f35
 8009eb4:	08009f35 	.word	0x08009f35
 8009eb8:	08009f35 	.word	0x08009f35
 8009ebc:	08009f35 	.word	0x08009f35
 8009ec0:	08009f35 	.word	0x08009f35
 8009ec4:	08009f35 	.word	0x08009f35
 8009ec8:	08009f35 	.word	0x08009f35
 8009ecc:	08009f29 	.word	0x08009f29
 8009ed0:	08009f35 	.word	0x08009f35
 8009ed4:	08009f35 	.word	0x08009f35
 8009ed8:	08009f35 	.word	0x08009f35
 8009edc:	08009f35 	.word	0x08009f35
 8009ee0:	08009f35 	.word	0x08009f35
 8009ee4:	08009f35 	.word	0x08009f35
 8009ee8:	08009f35 	.word	0x08009f35
 8009eec:	08009f1d 	.word	0x08009f1d
 8009ef0:	08009f35 	.word	0x08009f35
 8009ef4:	08009f35 	.word	0x08009f35
 8009ef8:	08009f35 	.word	0x08009f35
 8009efc:	08009f35 	.word	0x08009f35
 8009f00:	08009f35 	.word	0x08009f35
 8009f04:	08009f35 	.word	0x08009f35
 8009f08:	08009f35 	.word	0x08009f35
 8009f0c:	08009f11 	.word	0x08009f11
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	2b06      	cmp	r3, #6
 8009f14:	d913      	bls.n	8009f3e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009f1a:	e010      	b.n	8009f3e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	2b07      	cmp	r3, #7
 8009f20:	d90f      	bls.n	8009f42 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009f26:	e00c      	b.n	8009f42 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	2b0f      	cmp	r3, #15
 8009f2c:	d90b      	bls.n	8009f46 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009f32:	e008      	b.n	8009f46 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	75fb      	strb	r3, [r7, #23]
        break;
 8009f38:	e006      	b.n	8009f48 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009f3a:	bf00      	nop
 8009f3c:	e004      	b.n	8009f48 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009f3e:	bf00      	nop
 8009f40:	e002      	b.n	8009f48 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009f42:	bf00      	nop
 8009f44:	e000      	b.n	8009f48 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009f46:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8009f48:	7dfb      	ldrb	r3, [r7, #23]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10d      	bne.n	8009f6a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	f023 0118 	bic.w	r1, r3, #24
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	371c      	adds	r7, #28
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e098      	b.n	800a0bc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	4b4d      	ldr	r3, [pc, #308]	@ (800a0c8 <HAL_DMA_Init+0x150>)
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d80f      	bhi.n	8009fb6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	4b4b      	ldr	r3, [pc, #300]	@ (800a0cc <HAL_DMA_Init+0x154>)
 8009f9e:	4413      	add	r3, r2
 8009fa0:	4a4b      	ldr	r2, [pc, #300]	@ (800a0d0 <HAL_DMA_Init+0x158>)
 8009fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa6:	091b      	lsrs	r3, r3, #4
 8009fa8:	009a      	lsls	r2, r3, #2
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a48      	ldr	r2, [pc, #288]	@ (800a0d4 <HAL_DMA_Init+0x15c>)
 8009fb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8009fb4:	e00e      	b.n	8009fd4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	4b46      	ldr	r3, [pc, #280]	@ (800a0d8 <HAL_DMA_Init+0x160>)
 8009fbe:	4413      	add	r3, r2
 8009fc0:	4a43      	ldr	r2, [pc, #268]	@ (800a0d0 <HAL_DMA_Init+0x158>)
 8009fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc6:	091b      	lsrs	r3, r3, #4
 8009fc8:	009a      	lsls	r2, r3, #2
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a42      	ldr	r2, [pc, #264]	@ (800a0dc <HAL_DMA_Init+0x164>)
 8009fd2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a1b      	ldr	r3, [r3, #32]
 800a016:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a02e:	d039      	beq.n	800a0a4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a034:	4a27      	ldr	r2, [pc, #156]	@ (800a0d4 <HAL_DMA_Init+0x15c>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d11a      	bne.n	800a070 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a03a:	4b29      	ldr	r3, [pc, #164]	@ (800a0e0 <HAL_DMA_Init+0x168>)
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a042:	f003 031c 	and.w	r3, r3, #28
 800a046:	210f      	movs	r1, #15
 800a048:	fa01 f303 	lsl.w	r3, r1, r3
 800a04c:	43db      	mvns	r3, r3
 800a04e:	4924      	ldr	r1, [pc, #144]	@ (800a0e0 <HAL_DMA_Init+0x168>)
 800a050:	4013      	ands	r3, r2
 800a052:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a054:	4b22      	ldr	r3, [pc, #136]	@ (800a0e0 <HAL_DMA_Init+0x168>)
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6859      	ldr	r1, [r3, #4]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a060:	f003 031c 	and.w	r3, r3, #28
 800a064:	fa01 f303 	lsl.w	r3, r1, r3
 800a068:	491d      	ldr	r1, [pc, #116]	@ (800a0e0 <HAL_DMA_Init+0x168>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	600b      	str	r3, [r1, #0]
 800a06e:	e019      	b.n	800a0a4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a070:	4b1c      	ldr	r3, [pc, #112]	@ (800a0e4 <HAL_DMA_Init+0x16c>)
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a078:	f003 031c 	and.w	r3, r3, #28
 800a07c:	210f      	movs	r1, #15
 800a07e:	fa01 f303 	lsl.w	r3, r1, r3
 800a082:	43db      	mvns	r3, r3
 800a084:	4917      	ldr	r1, [pc, #92]	@ (800a0e4 <HAL_DMA_Init+0x16c>)
 800a086:	4013      	ands	r3, r2
 800a088:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a08a:	4b16      	ldr	r3, [pc, #88]	@ (800a0e4 <HAL_DMA_Init+0x16c>)
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6859      	ldr	r1, [r3, #4]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a096:	f003 031c 	and.w	r3, r3, #28
 800a09a:	fa01 f303 	lsl.w	r3, r1, r3
 800a09e:	4911      	ldr	r1, [pc, #68]	@ (800a0e4 <HAL_DMA_Init+0x16c>)
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	40020407 	.word	0x40020407
 800a0cc:	bffdfff8 	.word	0xbffdfff8
 800a0d0:	cccccccd 	.word	0xcccccccd
 800a0d4:	40020000 	.word	0x40020000
 800a0d8:	bffdfbf8 	.word	0xbffdfbf8
 800a0dc:	40020400 	.word	0x40020400
 800a0e0:	400200a8 	.word	0x400200a8
 800a0e4:	400204a8 	.word	0x400204a8

0800a0e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a100:	2b01      	cmp	r3, #1
 800a102:	d101      	bne.n	800a108 <HAL_DMA_Start_IT+0x20>
 800a104:	2302      	movs	r3, #2
 800a106:	e04b      	b.n	800a1a0 <HAL_DMA_Start_IT+0xb8>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d13a      	bne.n	800a192 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f022 0201 	bic.w	r2, r2, #1
 800a138:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	68b9      	ldr	r1, [r7, #8]
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 f91e 	bl	800a382 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d008      	beq.n	800a160 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f042 020e 	orr.w	r2, r2, #14
 800a15c:	601a      	str	r2, [r3, #0]
 800a15e:	e00f      	b.n	800a180 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f022 0204 	bic.w	r2, r2, #4
 800a16e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f042 020a 	orr.w	r2, r2, #10
 800a17e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f042 0201 	orr.w	r2, r2, #1
 800a18e:	601a      	str	r2, [r3, #0]
 800a190:	e005      	b.n	800a19e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a19a:	2302      	movs	r3, #2
 800a19c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a19e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3718      	adds	r7, #24
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d008      	beq.n	800a1d2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2204      	movs	r2, #4
 800a1c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e022      	b.n	800a218 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f022 020e 	bic.w	r2, r2, #14
 800a1e0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f022 0201 	bic.w	r2, r2, #1
 800a1f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1f6:	f003 021c 	and.w	r2, r3, #28
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1fe:	2101      	movs	r1, #1
 800a200:	fa01 f202 	lsl.w	r2, r1, r2
 800a204:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800a216:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a240:	f003 031c 	and.w	r3, r3, #28
 800a244:	2204      	movs	r2, #4
 800a246:	409a      	lsls	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4013      	ands	r3, r2
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d026      	beq.n	800a29e <HAL_DMA_IRQHandler+0x7a>
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	f003 0304 	and.w	r3, r3, #4
 800a256:	2b00      	cmp	r3, #0
 800a258:	d021      	beq.n	800a29e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0320 	and.w	r3, r3, #32
 800a264:	2b00      	cmp	r3, #0
 800a266:	d107      	bne.n	800a278 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f022 0204 	bic.w	r2, r2, #4
 800a276:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a27c:	f003 021c 	and.w	r2, r3, #28
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a284:	2104      	movs	r1, #4
 800a286:	fa01 f202 	lsl.w	r2, r1, r2
 800a28a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a290:	2b00      	cmp	r3, #0
 800a292:	d071      	beq.n	800a378 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a29c:	e06c      	b.n	800a378 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2a2:	f003 031c 	and.w	r3, r3, #28
 800a2a6:	2202      	movs	r2, #2
 800a2a8:	409a      	lsls	r2, r3
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d02e      	beq.n	800a310 <HAL_DMA_IRQHandler+0xec>
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	f003 0302 	and.w	r3, r3, #2
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d029      	beq.n	800a310 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 0320 	and.w	r3, r3, #32
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10b      	bne.n	800a2e2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f022 020a 	bic.w	r2, r2, #10
 800a2d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2e6:	f003 021c 	and.w	r2, r3, #28
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ee:	2102      	movs	r1, #2
 800a2f0:	fa01 f202 	lsl.w	r2, r1, r2
 800a2f4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a302:	2b00      	cmp	r3, #0
 800a304:	d038      	beq.n	800a378 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a30e:	e033      	b.n	800a378 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a314:	f003 031c 	and.w	r3, r3, #28
 800a318:	2208      	movs	r2, #8
 800a31a:	409a      	lsls	r2, r3
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4013      	ands	r3, r2
 800a320:	2b00      	cmp	r3, #0
 800a322:	d02a      	beq.n	800a37a <HAL_DMA_IRQHandler+0x156>
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	f003 0308 	and.w	r3, r3, #8
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d025      	beq.n	800a37a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f022 020e 	bic.w	r2, r2, #14
 800a33c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a342:	f003 021c 	and.w	r2, r3, #28
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a34a:	2101      	movs	r1, #1
 800a34c:	fa01 f202 	lsl.w	r2, r1, r2
 800a350:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d004      	beq.n	800a37a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a378:	bf00      	nop
 800a37a:	bf00      	nop
}
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a382:	b480      	push	{r7}
 800a384:	b085      	sub	sp, #20
 800a386:	af00      	add	r7, sp, #0
 800a388:	60f8      	str	r0, [r7, #12]
 800a38a:	60b9      	str	r1, [r7, #8]
 800a38c:	607a      	str	r2, [r7, #4]
 800a38e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a394:	f003 021c 	and.w	r2, r3, #28
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a39c:	2101      	movs	r1, #1
 800a39e:	fa01 f202 	lsl.w	r2, r1, r2
 800a3a2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	683a      	ldr	r2, [r7, #0]
 800a3aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	2b10      	cmp	r3, #16
 800a3b2:	d108      	bne.n	800a3c6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a3c4:	e007      	b.n	800a3d6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	60da      	str	r2, [r3, #12]
}
 800a3d6:	bf00      	nop
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
	...

0800a3e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b087      	sub	sp, #28
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a3f2:	e17f      	b.n	800a6f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	2101      	movs	r1, #1
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a400:	4013      	ands	r3, r2
 800a402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	f000 8171 	beq.w	800a6ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	f003 0303 	and.w	r3, r3, #3
 800a414:	2b01      	cmp	r3, #1
 800a416:	d005      	beq.n	800a424 <HAL_GPIO_Init+0x40>
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	f003 0303 	and.w	r3, r3, #3
 800a420:	2b02      	cmp	r3, #2
 800a422:	d130      	bne.n	800a486 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	005b      	lsls	r3, r3, #1
 800a42e:	2203      	movs	r2, #3
 800a430:	fa02 f303 	lsl.w	r3, r2, r3
 800a434:	43db      	mvns	r3, r3
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	4013      	ands	r3, r2
 800a43a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	68da      	ldr	r2, [r3, #12]
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	005b      	lsls	r3, r3, #1
 800a444:	fa02 f303 	lsl.w	r3, r2, r3
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	693a      	ldr	r2, [r7, #16]
 800a452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a45a:	2201      	movs	r2, #1
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	fa02 f303 	lsl.w	r3, r2, r3
 800a462:	43db      	mvns	r3, r3
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	4013      	ands	r3, r2
 800a468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	091b      	lsrs	r3, r3, #4
 800a470:	f003 0201 	and.w	r2, r3, #1
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	fa02 f303 	lsl.w	r3, r2, r3
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	f003 0303 	and.w	r3, r3, #3
 800a48e:	2b03      	cmp	r3, #3
 800a490:	d118      	bne.n	800a4c4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a496:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800a498:	2201      	movs	r2, #1
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a0:	43db      	mvns	r3, r3
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	08db      	lsrs	r3, r3, #3
 800a4ae:	f003 0201 	and.w	r2, r3, #1
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	f003 0303 	and.w	r3, r3, #3
 800a4cc:	2b03      	cmp	r3, #3
 800a4ce:	d017      	beq.n	800a500 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	005b      	lsls	r3, r3, #1
 800a4da:	2203      	movs	r2, #3
 800a4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e0:	43db      	mvns	r3, r3
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	689a      	ldr	r2, [r3, #8]
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	005b      	lsls	r3, r3, #1
 800a4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	693a      	ldr	r2, [r7, #16]
 800a4fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	f003 0303 	and.w	r3, r3, #3
 800a508:	2b02      	cmp	r3, #2
 800a50a:	d123      	bne.n	800a554 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	08da      	lsrs	r2, r3, #3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	3208      	adds	r2, #8
 800a514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a518:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f003 0307 	and.w	r3, r3, #7
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	220f      	movs	r2, #15
 800a524:	fa02 f303 	lsl.w	r3, r2, r3
 800a528:	43db      	mvns	r3, r3
 800a52a:	693a      	ldr	r2, [r7, #16]
 800a52c:	4013      	ands	r3, r2
 800a52e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	691a      	ldr	r2, [r3, #16]
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	fa02 f303 	lsl.w	r3, r2, r3
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	4313      	orrs	r3, r2
 800a544:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	08da      	lsrs	r2, r3, #3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	3208      	adds	r2, #8
 800a54e:	6939      	ldr	r1, [r7, #16]
 800a550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	2203      	movs	r2, #3
 800a560:	fa02 f303 	lsl.w	r3, r2, r3
 800a564:	43db      	mvns	r3, r3
 800a566:	693a      	ldr	r2, [r7, #16]
 800a568:	4013      	ands	r3, r2
 800a56a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	f003 0203 	and.w	r2, r3, #3
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	005b      	lsls	r3, r3, #1
 800a578:	fa02 f303 	lsl.w	r3, r2, r3
 800a57c:	693a      	ldr	r2, [r7, #16]
 800a57e:	4313      	orrs	r3, r2
 800a580:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	693a      	ldr	r2, [r7, #16]
 800a586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 80ac 	beq.w	800a6ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a596:	4b5f      	ldr	r3, [pc, #380]	@ (800a714 <HAL_GPIO_Init+0x330>)
 800a598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a59a:	4a5e      	ldr	r2, [pc, #376]	@ (800a714 <HAL_GPIO_Init+0x330>)
 800a59c:	f043 0301 	orr.w	r3, r3, #1
 800a5a0:	6613      	str	r3, [r2, #96]	@ 0x60
 800a5a2:	4b5c      	ldr	r3, [pc, #368]	@ (800a714 <HAL_GPIO_Init+0x330>)
 800a5a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	60bb      	str	r3, [r7, #8]
 800a5ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a5ae:	4a5a      	ldr	r2, [pc, #360]	@ (800a718 <HAL_GPIO_Init+0x334>)
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	089b      	lsrs	r3, r3, #2
 800a5b4:	3302      	adds	r3, #2
 800a5b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	f003 0303 	and.w	r3, r3, #3
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	220f      	movs	r2, #15
 800a5c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ca:	43db      	mvns	r3, r3
 800a5cc:	693a      	ldr	r2, [r7, #16]
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a5d8:	d025      	beq.n	800a626 <HAL_GPIO_Init+0x242>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a4f      	ldr	r2, [pc, #316]	@ (800a71c <HAL_GPIO_Init+0x338>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d01f      	beq.n	800a622 <HAL_GPIO_Init+0x23e>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a4e      	ldr	r2, [pc, #312]	@ (800a720 <HAL_GPIO_Init+0x33c>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d019      	beq.n	800a61e <HAL_GPIO_Init+0x23a>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4a4d      	ldr	r2, [pc, #308]	@ (800a724 <HAL_GPIO_Init+0x340>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d013      	beq.n	800a61a <HAL_GPIO_Init+0x236>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a4c      	ldr	r2, [pc, #304]	@ (800a728 <HAL_GPIO_Init+0x344>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d00d      	beq.n	800a616 <HAL_GPIO_Init+0x232>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a4b      	ldr	r2, [pc, #300]	@ (800a72c <HAL_GPIO_Init+0x348>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d007      	beq.n	800a612 <HAL_GPIO_Init+0x22e>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a4a      	ldr	r2, [pc, #296]	@ (800a730 <HAL_GPIO_Init+0x34c>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d101      	bne.n	800a60e <HAL_GPIO_Init+0x22a>
 800a60a:	2306      	movs	r3, #6
 800a60c:	e00c      	b.n	800a628 <HAL_GPIO_Init+0x244>
 800a60e:	2307      	movs	r3, #7
 800a610:	e00a      	b.n	800a628 <HAL_GPIO_Init+0x244>
 800a612:	2305      	movs	r3, #5
 800a614:	e008      	b.n	800a628 <HAL_GPIO_Init+0x244>
 800a616:	2304      	movs	r3, #4
 800a618:	e006      	b.n	800a628 <HAL_GPIO_Init+0x244>
 800a61a:	2303      	movs	r3, #3
 800a61c:	e004      	b.n	800a628 <HAL_GPIO_Init+0x244>
 800a61e:	2302      	movs	r3, #2
 800a620:	e002      	b.n	800a628 <HAL_GPIO_Init+0x244>
 800a622:	2301      	movs	r3, #1
 800a624:	e000      	b.n	800a628 <HAL_GPIO_Init+0x244>
 800a626:	2300      	movs	r3, #0
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	f002 0203 	and.w	r2, r2, #3
 800a62e:	0092      	lsls	r2, r2, #2
 800a630:	4093      	lsls	r3, r2
 800a632:	693a      	ldr	r2, [r7, #16]
 800a634:	4313      	orrs	r3, r2
 800a636:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a638:	4937      	ldr	r1, [pc, #220]	@ (800a718 <HAL_GPIO_Init+0x334>)
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	089b      	lsrs	r3, r3, #2
 800a63e:	3302      	adds	r3, #2
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a646:	4b3b      	ldr	r3, [pc, #236]	@ (800a734 <HAL_GPIO_Init+0x350>)
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	43db      	mvns	r3, r3
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	4013      	ands	r3, r2
 800a654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	4313      	orrs	r3, r2
 800a668:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a66a:	4a32      	ldr	r2, [pc, #200]	@ (800a734 <HAL_GPIO_Init+0x350>)
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a670:	4b30      	ldr	r3, [pc, #192]	@ (800a734 <HAL_GPIO_Init+0x350>)
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	43db      	mvns	r3, r3
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	4013      	ands	r3, r2
 800a67e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d003      	beq.n	800a694 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	4313      	orrs	r3, r2
 800a692:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a694:	4a27      	ldr	r2, [pc, #156]	@ (800a734 <HAL_GPIO_Init+0x350>)
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a69a:	4b26      	ldr	r3, [pc, #152]	@ (800a734 <HAL_GPIO_Init+0x350>)
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	43db      	mvns	r3, r3
 800a6a4:	693a      	ldr	r2, [r7, #16]
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d003      	beq.n	800a6be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800a6b6:	693a      	ldr	r2, [r7, #16]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a6be:	4a1d      	ldr	r2, [pc, #116]	@ (800a734 <HAL_GPIO_Init+0x350>)
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800a6c4:	4b1b      	ldr	r3, [pc, #108]	@ (800a734 <HAL_GPIO_Init+0x350>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	43db      	mvns	r3, r3
 800a6ce:	693a      	ldr	r2, [r7, #16]
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d003      	beq.n	800a6e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800a6e0:	693a      	ldr	r2, [r7, #16]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a6e8:	4a12      	ldr	r2, [pc, #72]	@ (800a734 <HAL_GPIO_Init+0x350>)
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f47f ae78 	bne.w	800a3f4 <HAL_GPIO_Init+0x10>
  }
}
 800a704:	bf00      	nop
 800a706:	bf00      	nop
 800a708:	371c      	adds	r7, #28
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	40021000 	.word	0x40021000
 800a718:	40010000 	.word	0x40010000
 800a71c:	48000400 	.word	0x48000400
 800a720:	48000800 	.word	0x48000800
 800a724:	48000c00 	.word	0x48000c00
 800a728:	48001000 	.word	0x48001000
 800a72c:	48001400 	.word	0x48001400
 800a730:	48001800 	.word	0x48001800
 800a734:	40010400 	.word	0x40010400

0800a738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	460b      	mov	r3, r1
 800a742:	807b      	strh	r3, [r7, #2]
 800a744:	4613      	mov	r3, r2
 800a746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a748:	787b      	ldrb	r3, [r7, #1]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d003      	beq.n	800a756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a74e:	887a      	ldrh	r2, [r7, #2]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a754:	e002      	b.n	800a75c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a756:	887a      	ldrh	r2, [r7, #2]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a75c:	bf00      	nop
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e08d      	b.n	800a896 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b00      	cmp	r3, #0
 800a784:	d106      	bne.n	800a794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7fa f804 	bl	800479c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2224      	movs	r2, #36	@ 0x24
 800a798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f022 0201 	bic.w	r2, r2, #1
 800a7aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685a      	ldr	r2, [r3, #4]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a7b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	689a      	ldr	r2, [r3, #8]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a7c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d107      	bne.n	800a7e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	689a      	ldr	r2, [r3, #8]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a7de:	609a      	str	r2, [r3, #8]
 800a7e0:	e006      	b.n	800a7f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	689a      	ldr	r2, [r3, #8]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a7ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d108      	bne.n	800a80a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	685a      	ldr	r2, [r3, #4]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a806:	605a      	str	r2, [r3, #4]
 800a808:	e007      	b.n	800a81a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	685a      	ldr	r2, [r3, #4]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a818:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	6812      	ldr	r2, [r2, #0]
 800a824:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a828:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a82c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68da      	ldr	r2, [r3, #12]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a83c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	691a      	ldr	r2, [r3, #16]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	430a      	orrs	r2, r1
 800a856:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	69d9      	ldr	r1, [r3, #28]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a1a      	ldr	r2, [r3, #32]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	430a      	orrs	r2, r1
 800a866:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f042 0201 	orr.w	r2, r2, #1
 800a876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2220      	movs	r2, #32
 800a882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
	...

0800a8a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b088      	sub	sp, #32
 800a8a4:	af02      	add	r7, sp, #8
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	607a      	str	r2, [r7, #4]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	817b      	strh	r3, [r7, #10]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b20      	cmp	r3, #32
 800a8be:	f040 80fd 	bne.w	800aabc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d101      	bne.n	800a8d0 <HAL_I2C_Master_Transmit+0x30>
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	e0f6      	b.n	800aabe <HAL_I2C_Master_Transmit+0x21e>
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a8d8:	f7fd fd66 	bl	80083a8 <HAL_GetTick>
 800a8dc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	9300      	str	r3, [sp, #0]
 800a8e2:	2319      	movs	r3, #25
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f000 fa0a 	bl	800ad04 <I2C_WaitOnFlagUntilTimeout>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d001      	beq.n	800a8fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e0e1      	b.n	800aabe <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2221      	movs	r2, #33	@ 0x21
 800a8fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2210      	movs	r2, #16
 800a906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	893a      	ldrh	r2, [r7, #8]
 800a91a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2200      	movs	r2, #0
 800a920:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a926:	b29b      	uxth	r3, r3
 800a928:	2bff      	cmp	r3, #255	@ 0xff
 800a92a:	d906      	bls.n	800a93a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	22ff      	movs	r2, #255	@ 0xff
 800a930:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a932:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a936:	617b      	str	r3, [r7, #20]
 800a938:	e007      	b.n	800a94a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a93e:	b29a      	uxth	r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a944:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a948:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d024      	beq.n	800a99c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a956:	781a      	ldrb	r2, [r3, #0]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a962:	1c5a      	adds	r2, r3, #1
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	3b01      	subs	r3, #1
 800a970:	b29a      	uxth	r2, r3
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a97a:	3b01      	subs	r3, #1
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a986:	b2db      	uxtb	r3, r3
 800a988:	3301      	adds	r3, #1
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	8979      	ldrh	r1, [r7, #10]
 800a98e:	4b4e      	ldr	r3, [pc, #312]	@ (800aac8 <HAL_I2C_Master_Transmit+0x228>)
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f000 fc05 	bl	800b1a4 <I2C_TransferConfig>
 800a99a:	e066      	b.n	800aa6a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	8979      	ldrh	r1, [r7, #10]
 800a9a4:	4b48      	ldr	r3, [pc, #288]	@ (800aac8 <HAL_I2C_Master_Transmit+0x228>)
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f000 fbfa 	bl	800b1a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800a9b0:	e05b      	b.n	800aa6a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9b2:	693a      	ldr	r2, [r7, #16]
 800a9b4:	6a39      	ldr	r1, [r7, #32]
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f000 f9fd 	bl	800adb6 <I2C_WaitOnTXISFlagUntilTimeout>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e07b      	b.n	800aabe <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ca:	781a      	ldrb	r2, [r3, #0]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d6:	1c5a      	adds	r2, r3, #1
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d034      	beq.n	800aa6a <HAL_I2C_Master_Transmit+0x1ca>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d130      	bne.n	800aa6a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	2180      	movs	r1, #128	@ 0x80
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f000 f976 	bl	800ad04 <I2C_WaitOnFlagUntilTimeout>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e04d      	b.n	800aabe <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	2bff      	cmp	r3, #255	@ 0xff
 800aa2a:	d90e      	bls.n	800aa4a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	22ff      	movs	r2, #255	@ 0xff
 800aa30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	8979      	ldrh	r1, [r7, #10]
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f000 fbae 	bl	800b1a4 <I2C_TransferConfig>
 800aa48:	e00f      	b.n	800aa6a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa58:	b2da      	uxtb	r2, r3
 800aa5a:	8979      	ldrh	r1, [r7, #10]
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f000 fb9d 	bl	800b1a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d19e      	bne.n	800a9b2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	6a39      	ldr	r1, [r7, #32]
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 f9e3 	bl	800ae44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d001      	beq.n	800aa88 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e01a      	b.n	800aabe <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2220      	movs	r2, #32
 800aa8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	6859      	ldr	r1, [r3, #4]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	4b0c      	ldr	r3, [pc, #48]	@ (800aacc <HAL_I2C_Master_Transmit+0x22c>)
 800aa9c:	400b      	ands	r3, r1
 800aa9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2220      	movs	r2, #32
 800aaa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800aab8:	2300      	movs	r3, #0
 800aaba:	e000      	b.n	800aabe <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800aabc:	2302      	movs	r3, #2
  }
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3718      	adds	r7, #24
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	80002000 	.word	0x80002000
 800aacc:	fe00e800 	.word	0xfe00e800

0800aad0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af02      	add	r7, sp, #8
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	607a      	str	r2, [r7, #4]
 800aada:	461a      	mov	r2, r3
 800aadc:	460b      	mov	r3, r1
 800aade:	817b      	strh	r3, [r7, #10]
 800aae0:	4613      	mov	r3, r2
 800aae2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	2b20      	cmp	r3, #32
 800aaee:	f040 80db 	bne.w	800aca8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d101      	bne.n	800ab00 <HAL_I2C_Master_Receive+0x30>
 800aafc:	2302      	movs	r3, #2
 800aafe:	e0d4      	b.n	800acaa <HAL_I2C_Master_Receive+0x1da>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ab08:	f7fd fc4e 	bl	80083a8 <HAL_GetTick>
 800ab0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	2319      	movs	r3, #25
 800ab14:	2201      	movs	r2, #1
 800ab16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f000 f8f2 	bl	800ad04 <I2C_WaitOnFlagUntilTimeout>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d001      	beq.n	800ab2a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e0bf      	b.n	800acaa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2222      	movs	r2, #34	@ 0x22
 800ab2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2210      	movs	r2, #16
 800ab36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	893a      	ldrh	r2, [r7, #8]
 800ab4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	2bff      	cmp	r3, #255	@ 0xff
 800ab5a:	d90e      	bls.n	800ab7a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab66:	b2da      	uxtb	r2, r3
 800ab68:	8979      	ldrh	r1, [r7, #10]
 800ab6a:	4b52      	ldr	r3, [pc, #328]	@ (800acb4 <HAL_I2C_Master_Receive+0x1e4>)
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f000 fb16 	bl	800b1a4 <I2C_TransferConfig>
 800ab78:	e06d      	b.n	800ac56 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab88:	b2da      	uxtb	r2, r3
 800ab8a:	8979      	ldrh	r1, [r7, #10]
 800ab8c:	4b49      	ldr	r3, [pc, #292]	@ (800acb4 <HAL_I2C_Master_Receive+0x1e4>)
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	f000 fb05 	bl	800b1a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800ab9a:	e05c      	b.n	800ac56 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab9c:	697a      	ldr	r2, [r7, #20]
 800ab9e:	6a39      	ldr	r1, [r7, #32]
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f000 f993 	bl	800aecc <I2C_WaitOnRXNEFlagUntilTimeout>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	e07c      	b.n	800acaa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abba:	b2d2      	uxtb	r2, r2
 800abbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc2:	1c5a      	adds	r2, r3, #1
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abcc:	3b01      	subs	r3, #1
 800abce:	b29a      	uxth	r2, r3
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abd8:	b29b      	uxth	r3, r3
 800abda:	3b01      	subs	r3, #1
 800abdc:	b29a      	uxth	r2, r3
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d034      	beq.n	800ac56 <HAL_I2C_Master_Receive+0x186>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d130      	bne.n	800ac56 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	6a3b      	ldr	r3, [r7, #32]
 800abfa:	2200      	movs	r2, #0
 800abfc:	2180      	movs	r1, #128	@ 0x80
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	f000 f880 	bl	800ad04 <I2C_WaitOnFlagUntilTimeout>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d001      	beq.n	800ac0e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e04d      	b.n	800acaa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	2bff      	cmp	r3, #255	@ 0xff
 800ac16:	d90e      	bls.n	800ac36 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	22ff      	movs	r2, #255	@ 0xff
 800ac1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	8979      	ldrh	r1, [r7, #10]
 800ac26:	2300      	movs	r3, #0
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f000 fab8 	bl	800b1a4 <I2C_TransferConfig>
 800ac34:	e00f      	b.n	800ac56 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	8979      	ldrh	r1, [r7, #10]
 800ac48:	2300      	movs	r3, #0
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 faa7 	bl	800b1a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d19d      	bne.n	800ab9c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac60:	697a      	ldr	r2, [r7, #20]
 800ac62:	6a39      	ldr	r1, [r7, #32]
 800ac64:	68f8      	ldr	r0, [r7, #12]
 800ac66:	f000 f8ed 	bl	800ae44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d001      	beq.n	800ac74 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	e01a      	b.n	800acaa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2220      	movs	r2, #32
 800ac7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	6859      	ldr	r1, [r3, #4]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	4b0c      	ldr	r3, [pc, #48]	@ (800acb8 <HAL_I2C_Master_Receive+0x1e8>)
 800ac88:	400b      	ands	r3, r1
 800ac8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2220      	movs	r2, #32
 800ac90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800aca4:	2300      	movs	r3, #0
 800aca6:	e000      	b.n	800acaa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800aca8:	2302      	movs	r3, #2
  }
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3718      	adds	r7, #24
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	80002400 	.word	0x80002400
 800acb8:	fe00e800 	.word	0xfe00e800

0800acbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	699b      	ldr	r3, [r3, #24]
 800acca:	f003 0302 	and.w	r3, r3, #2
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d103      	bne.n	800acda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2200      	movs	r2, #0
 800acd8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	f003 0301 	and.w	r3, r3, #1
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d007      	beq.n	800acf8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	699a      	ldr	r2, [r3, #24]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f042 0201 	orr.w	r2, r2, #1
 800acf6:	619a      	str	r2, [r3, #24]
  }
}
 800acf8:	bf00      	nop
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	603b      	str	r3, [r7, #0]
 800ad10:	4613      	mov	r3, r2
 800ad12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad14:	e03b      	b.n	800ad8e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad16:	69ba      	ldr	r2, [r7, #24]
 800ad18:	6839      	ldr	r1, [r7, #0]
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f000 f962 	bl	800afe4 <I2C_IsErrorOccurred>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d001      	beq.n	800ad2a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e041      	b.n	800adae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad30:	d02d      	beq.n	800ad8e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad32:	f7fd fb39 	bl	80083a8 <HAL_GetTick>
 800ad36:	4602      	mov	r2, r0
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d302      	bcc.n	800ad48 <I2C_WaitOnFlagUntilTimeout+0x44>
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d122      	bne.n	800ad8e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	699a      	ldr	r2, [r3, #24]
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	4013      	ands	r3, r2
 800ad52:	68ba      	ldr	r2, [r7, #8]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	bf0c      	ite	eq
 800ad58:	2301      	moveq	r3, #1
 800ad5a:	2300      	movne	r3, #0
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	461a      	mov	r2, r3
 800ad60:	79fb      	ldrb	r3, [r7, #7]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d113      	bne.n	800ad8e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad6a:	f043 0220 	orr.w	r2, r3, #32
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2220      	movs	r2, #32
 800ad76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e00f      	b.n	800adae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	699a      	ldr	r2, [r3, #24]
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	4013      	ands	r3, r2
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	bf0c      	ite	eq
 800ad9e:	2301      	moveq	r3, #1
 800ada0:	2300      	movne	r3, #0
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	461a      	mov	r2, r3
 800ada6:	79fb      	ldrb	r3, [r7, #7]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d0b4      	beq.n	800ad16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b084      	sub	sp, #16
 800adba:	af00      	add	r7, sp, #0
 800adbc:	60f8      	str	r0, [r7, #12]
 800adbe:	60b9      	str	r1, [r7, #8]
 800adc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800adc2:	e033      	b.n	800ae2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	68b9      	ldr	r1, [r7, #8]
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 f90b 	bl	800afe4 <I2C_IsErrorOccurred>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	e031      	b.n	800ae3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adde:	d025      	beq.n	800ae2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ade0:	f7fd fae2 	bl	80083a8 <HAL_GetTick>
 800ade4:	4602      	mov	r2, r0
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	429a      	cmp	r2, r3
 800adee:	d302      	bcc.n	800adf6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d11a      	bne.n	800ae2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	699b      	ldr	r3, [r3, #24]
 800adfc:	f003 0302 	and.w	r3, r3, #2
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d013      	beq.n	800ae2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae08:	f043 0220 	orr.w	r2, r3, #32
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2220      	movs	r2, #32
 800ae14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e007      	b.n	800ae3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	699b      	ldr	r3, [r3, #24]
 800ae32:	f003 0302 	and.w	r3, r3, #2
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d1c4      	bne.n	800adc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae50:	e02f      	b.n	800aeb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	68b9      	ldr	r1, [r7, #8]
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f000 f8c4 	bl	800afe4 <I2C_IsErrorOccurred>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e02d      	b.n	800aec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae66:	f7fd fa9f 	bl	80083a8 <HAL_GetTick>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	68ba      	ldr	r2, [r7, #8]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d302      	bcc.n	800ae7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d11a      	bne.n	800aeb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	699b      	ldr	r3, [r3, #24]
 800ae82:	f003 0320 	and.w	r3, r3, #32
 800ae86:	2b20      	cmp	r3, #32
 800ae88:	d013      	beq.n	800aeb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae8e:	f043 0220 	orr.w	r2, r3, #32
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2220      	movs	r2, #32
 800ae9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e007      	b.n	800aec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	f003 0320 	and.w	r3, r3, #32
 800aebc:	2b20      	cmp	r3, #32
 800aebe:	d1c8      	bne.n	800ae52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
	...

0800aecc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aed8:	2300      	movs	r3, #0
 800aeda:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800aedc:	e071      	b.n	800afc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	68b9      	ldr	r1, [r7, #8]
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f000 f87e 	bl	800afe4 <I2C_IsErrorOccurred>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d001      	beq.n	800aef2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	699b      	ldr	r3, [r3, #24]
 800aef8:	f003 0320 	and.w	r3, r3, #32
 800aefc:	2b20      	cmp	r3, #32
 800aefe:	d13b      	bne.n	800af78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d138      	bne.n	800af78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	f003 0304 	and.w	r3, r3, #4
 800af10:	2b04      	cmp	r3, #4
 800af12:	d105      	bne.n	800af20 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d001      	beq.n	800af20 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800af1c:	2300      	movs	r3, #0
 800af1e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	f003 0310 	and.w	r3, r3, #16
 800af2a:	2b10      	cmp	r3, #16
 800af2c:	d121      	bne.n	800af72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2210      	movs	r2, #16
 800af34:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2204      	movs	r2, #4
 800af3a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2220      	movs	r2, #32
 800af42:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6859      	ldr	r1, [r3, #4]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	4b24      	ldr	r3, [pc, #144]	@ (800afe0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800af50:	400b      	ands	r3, r1
 800af52:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2220      	movs	r2, #32
 800af58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2200      	movs	r2, #0
 800af68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	75fb      	strb	r3, [r7, #23]
 800af70:	e002      	b.n	800af78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2200      	movs	r2, #0
 800af76:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800af78:	f7fd fa16 	bl	80083a8 <HAL_GetTick>
 800af7c:	4602      	mov	r2, r0
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	429a      	cmp	r2, r3
 800af86:	d302      	bcc.n	800af8e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d119      	bne.n	800afc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800af8e:	7dfb      	ldrb	r3, [r7, #23]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d116      	bne.n	800afc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	699b      	ldr	r3, [r3, #24]
 800af9a:	f003 0304 	and.w	r3, r3, #4
 800af9e:	2b04      	cmp	r3, #4
 800afa0:	d00f      	beq.n	800afc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afa6:	f043 0220 	orr.w	r2, r3, #32
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2220      	movs	r2, #32
 800afb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	f003 0304 	and.w	r3, r3, #4
 800afcc:	2b04      	cmp	r3, #4
 800afce:	d002      	beq.n	800afd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800afd0:	7dfb      	ldrb	r3, [r7, #23]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d083      	beq.n	800aede <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800afd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3718      	adds	r7, #24
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	fe00e800 	.word	0xfe00e800

0800afe4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b08a      	sub	sp, #40	@ 0x28
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	f003 0310 	and.w	r3, r3, #16
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d068      	beq.n	800b0e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2210      	movs	r2, #16
 800b016:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b018:	e049      	b.n	800b0ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b020:	d045      	beq.n	800b0ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b022:	f7fd f9c1 	bl	80083a8 <HAL_GetTick>
 800b026:	4602      	mov	r2, r0
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	68ba      	ldr	r2, [r7, #8]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d302      	bcc.n	800b038 <I2C_IsErrorOccurred+0x54>
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d13a      	bne.n	800b0ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b042:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b04a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	699b      	ldr	r3, [r3, #24]
 800b052:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b056:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b05a:	d121      	bne.n	800b0a0 <I2C_IsErrorOccurred+0xbc>
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b062:	d01d      	beq.n	800b0a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b064:	7cfb      	ldrb	r3, [r7, #19]
 800b066:	2b20      	cmp	r3, #32
 800b068:	d01a      	beq.n	800b0a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	685a      	ldr	r2, [r3, #4]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b078:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b07a:	f7fd f995 	bl	80083a8 <HAL_GetTick>
 800b07e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b080:	e00e      	b.n	800b0a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b082:	f7fd f991 	bl	80083a8 <HAL_GetTick>
 800b086:	4602      	mov	r2, r0
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	2b19      	cmp	r3, #25
 800b08e:	d907      	bls.n	800b0a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	f043 0320 	orr.w	r3, r3, #32
 800b096:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b09e:	e006      	b.n	800b0ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	f003 0320 	and.w	r3, r3, #32
 800b0aa:	2b20      	cmp	r3, #32
 800b0ac:	d1e9      	bne.n	800b082 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	f003 0320 	and.w	r3, r3, #32
 800b0b8:	2b20      	cmp	r3, #32
 800b0ba:	d003      	beq.n	800b0c4 <I2C_IsErrorOccurred+0xe0>
 800b0bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d0aa      	beq.n	800b01a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b0c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d103      	bne.n	800b0d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2220      	movs	r2, #32
 800b0d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b0d4:	6a3b      	ldr	r3, [r7, #32]
 800b0d6:	f043 0304 	orr.w	r3, r3, #4
 800b0da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00b      	beq.n	800b10c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	f043 0301 	orr.w	r3, r3, #1
 800b0fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b104:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00b      	beq.n	800b12e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b116:	6a3b      	ldr	r3, [r7, #32]
 800b118:	f043 0308 	orr.w	r3, r3, #8
 800b11c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b126:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00b      	beq.n	800b150 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	f043 0302 	orr.w	r3, r3, #2
 800b13e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b148:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800b150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b154:	2b00      	cmp	r3, #0
 800b156:	d01c      	beq.n	800b192 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f7ff fdaf 	bl	800acbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	6859      	ldr	r1, [r3, #4]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681a      	ldr	r2, [r3, #0]
 800b168:	4b0d      	ldr	r3, [pc, #52]	@ (800b1a0 <I2C_IsErrorOccurred+0x1bc>)
 800b16a:	400b      	ands	r3, r1
 800b16c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	431a      	orrs	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2220      	movs	r2, #32
 800b17e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800b192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b196:	4618      	mov	r0, r3
 800b198:	3728      	adds	r7, #40	@ 0x28
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	fe00e800 	.word	0xfe00e800

0800b1a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b087      	sub	sp, #28
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	607b      	str	r3, [r7, #4]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	817b      	strh	r3, [r7, #10]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b1b6:	897b      	ldrh	r3, [r7, #10]
 800b1b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b1bc:	7a7b      	ldrb	r3, [r7, #9]
 800b1be:	041b      	lsls	r3, r3, #16
 800b1c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b1c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	685a      	ldr	r2, [r3, #4]
 800b1da:	6a3b      	ldr	r3, [r7, #32]
 800b1dc:	0d5b      	lsrs	r3, r3, #21
 800b1de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b1e2:	4b08      	ldr	r3, [pc, #32]	@ (800b204 <I2C_TransferConfig+0x60>)
 800b1e4:	430b      	orrs	r3, r1
 800b1e6:	43db      	mvns	r3, r3
 800b1e8:	ea02 0103 	and.w	r1, r2, r3
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	430a      	orrs	r2, r1
 800b1f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b1f6:	bf00      	nop
 800b1f8:	371c      	adds	r7, #28
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	03ff63ff 	.word	0x03ff63ff

0800b208 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	2b20      	cmp	r3, #32
 800b21c:	d138      	bne.n	800b290 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b224:	2b01      	cmp	r3, #1
 800b226:	d101      	bne.n	800b22c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b228:	2302      	movs	r3, #2
 800b22a:	e032      	b.n	800b292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2224      	movs	r2, #36	@ 0x24
 800b238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f022 0201 	bic.w	r2, r2, #1
 800b24a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b25a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	6819      	ldr	r1, [r3, #0]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	430a      	orrs	r2, r1
 800b26a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f042 0201 	orr.w	r2, r2, #1
 800b27a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2220      	movs	r2, #32
 800b280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b28c:	2300      	movs	r3, #0
 800b28e:	e000      	b.n	800b292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b290:	2302      	movs	r3, #2
  }
}
 800b292:	4618      	mov	r0, r3
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr

0800b29e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b29e:	b480      	push	{r7}
 800b2a0:	b085      	sub	sp, #20
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
 800b2a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	2b20      	cmp	r3, #32
 800b2b2:	d139      	bne.n	800b328 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d101      	bne.n	800b2c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b2be:	2302      	movs	r3, #2
 800b2c0:	e033      	b.n	800b32a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2224      	movs	r2, #36	@ 0x24
 800b2ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f022 0201 	bic.w	r2, r2, #1
 800b2e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b2f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	021b      	lsls	r3, r3, #8
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f042 0201 	orr.w	r2, r2, #1
 800b312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2220      	movs	r2, #32
 800b318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b324:	2300      	movs	r3, #0
 800b326:	e000      	b.n	800b32a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b328:	2302      	movs	r3, #2
  }
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3714      	adds	r7, #20
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr
	...

0800b338 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b338:	b480      	push	{r7}
 800b33a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b33c:	4b04      	ldr	r3, [pc, #16]	@ (800b350 <HAL_PWREx_GetVoltageRange+0x18>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800b344:	4618      	mov	r0, r3
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	40007000 	.word	0x40007000

0800b354 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b362:	d130      	bne.n	800b3c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b364:	4b23      	ldr	r3, [pc, #140]	@ (800b3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b36c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b370:	d038      	beq.n	800b3e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b372:	4b20      	ldr	r3, [pc, #128]	@ (800b3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b37a:	4a1e      	ldr	r2, [pc, #120]	@ (800b3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b37c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b380:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b382:	4b1d      	ldr	r3, [pc, #116]	@ (800b3f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2232      	movs	r2, #50	@ 0x32
 800b388:	fb02 f303 	mul.w	r3, r2, r3
 800b38c:	4a1b      	ldr	r2, [pc, #108]	@ (800b3fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b38e:	fba2 2303 	umull	r2, r3, r2, r3
 800b392:	0c9b      	lsrs	r3, r3, #18
 800b394:	3301      	adds	r3, #1
 800b396:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b398:	e002      	b.n	800b3a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b3a0:	4b14      	ldr	r3, [pc, #80]	@ (800b3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b3a2:	695b      	ldr	r3, [r3, #20]
 800b3a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3ac:	d102      	bne.n	800b3b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1f2      	bne.n	800b39a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b3b4:	4b0f      	ldr	r3, [pc, #60]	@ (800b3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b3b6:	695b      	ldr	r3, [r3, #20]
 800b3b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3c0:	d110      	bne.n	800b3e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	e00f      	b.n	800b3e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b3c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b3ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3d2:	d007      	beq.n	800b3e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b3d4:	4b07      	ldr	r3, [pc, #28]	@ (800b3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b3dc:	4a05      	ldr	r2, [pc, #20]	@ (800b3f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b3de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b3e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	40007000 	.word	0x40007000
 800b3f8:	20000000 	.word	0x20000000
 800b3fc:	431bde83 	.word	0x431bde83

0800b400 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af02      	add	r7, sp, #8
 800b406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b408:	f7fc ffce 	bl	80083a8 <HAL_GetTick>
 800b40c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d101      	bne.n	800b418 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	e063      	b.n	800b4e0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b00      	cmp	r3, #0
 800b422:	d10b      	bne.n	800b43c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f7f9 fa13 	bl	8004858 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b432:	f241 3188 	movw	r1, #5000	@ 0x1388
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 fa68 	bl	800b90c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	3b01      	subs	r3, #1
 800b44c:	021a      	lsls	r2, r3, #8
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	430a      	orrs	r2, r1
 800b454:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	2120      	movs	r1, #32
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 fa60 	bl	800b928 <QSPI_WaitFlagStateUntilTimeout>
 800b468:	4603      	mov	r3, r0
 800b46a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b46c:	7afb      	ldrb	r3, [r7, #11]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d131      	bne.n	800b4d6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b47c:	f023 0310 	bic.w	r3, r3, #16
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	6852      	ldr	r2, [r2, #4]
 800b484:	0611      	lsls	r1, r2, #24
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	68d2      	ldr	r2, [r2, #12]
 800b48a:	4311      	orrs	r1, r2
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	6812      	ldr	r2, [r2, #0]
 800b490:	430b      	orrs	r3, r1
 800b492:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	685a      	ldr	r2, [r3, #4]
 800b49a:	4b13      	ldr	r3, [pc, #76]	@ (800b4e8 <HAL_QSPI_Init+0xe8>)
 800b49c:	4013      	ands	r3, r2
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	6912      	ldr	r2, [r2, #16]
 800b4a2:	0411      	lsls	r1, r2, #16
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	6952      	ldr	r2, [r2, #20]
 800b4a8:	4311      	orrs	r1, r2
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	6992      	ldr	r2, [r2, #24]
 800b4ae:	4311      	orrs	r1, r2
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	6812      	ldr	r2, [r2, #0]
 800b4b4:	430b      	orrs	r3, r1
 800b4b6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f042 0201 	orr.w	r2, r2, #1
 800b4c6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800b4de:	7afb      	ldrb	r3, [r7, #11]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	ffe0f8fe 	.word	0xffe0f8fe

0800b4ec <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b088      	sub	sp, #32
 800b4f0:	af02      	add	r7, sp, #8
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b4f8:	f7fc ff56 	bl	80083a8 <HAL_GetTick>
 800b4fc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b504:	b2db      	uxtb	r3, r3
 800b506:	2b01      	cmp	r3, #1
 800b508:	d101      	bne.n	800b50e <HAL_QSPI_Command+0x22>
 800b50a:	2302      	movs	r3, #2
 800b50c:	e048      	b.n	800b5a0 <HAL_QSPI_Command+0xb4>
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2201      	movs	r2, #1
 800b512:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d137      	bne.n	800b592 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2202      	movs	r2, #2
 800b52c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	2200      	movs	r2, #0
 800b538:	2120      	movs	r1, #32
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f000 f9f4 	bl	800b928 <QSPI_WaitFlagStateUntilTimeout>
 800b540:	4603      	mov	r3, r0
 800b542:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b544:	7dfb      	ldrb	r3, [r7, #23]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d125      	bne.n	800b596 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b54a:	2200      	movs	r2, #0
 800b54c:	68b9      	ldr	r1, [r7, #8]
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f000 fa21 	bl	800b996 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d115      	bne.n	800b588 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	2201      	movs	r2, #1
 800b564:	2102      	movs	r1, #2
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f000 f9de 	bl	800b928 <QSPI_WaitFlagStateUntilTimeout>
 800b56c:	4603      	mov	r3, r0
 800b56e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800b570:	7dfb      	ldrb	r3, [r7, #23]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d10f      	bne.n	800b596 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2202      	movs	r2, #2
 800b57c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2201      	movs	r2, #1
 800b582:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800b586:	e006      	b.n	800b596 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800b590:	e001      	b.n	800b596 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b592:	2302      	movs	r3, #2
 800b594:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800b59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3718      	adds	r7, #24
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08a      	sub	sp, #40	@ 0x28
 800b5ac:	af02      	add	r7, sp, #8
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b5b8:	f7fc fef6 	bl	80083a8 <HAL_GetTick>
 800b5bc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	3320      	adds	r3, #32
 800b5c4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d101      	bne.n	800b5d6 <HAL_QSPI_Transmit+0x2e>
 800b5d2:	2302      	movs	r3, #2
 800b5d4:	e07b      	b.n	800b6ce <HAL_QSPI_Transmit+0x126>
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2201      	movs	r2, #1
 800b5da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d16a      	bne.n	800b6c0 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d05b      	beq.n	800b6ae <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2212      	movs	r2, #18
 800b5fa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	1c5a      	adds	r2, r3, #1
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	691b      	ldr	r3, [r3, #16]
 800b610:	1c5a      	adds	r2, r3, #1
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	695a      	ldr	r2, [r3, #20]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800b62a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800b62c:	e01b      	b.n	800b666 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	9300      	str	r3, [sp, #0]
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	2201      	movs	r2, #1
 800b636:	2104      	movs	r1, #4
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f000 f975 	bl	800b928 <QSPI_WaitFlagStateUntilTimeout>
 800b63e:	4603      	mov	r3, r0
 800b640:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800b642:	7ffb      	ldrb	r3, [r7, #31]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d113      	bne.n	800b670 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	69db      	ldr	r3, [r3, #28]
 800b64c:	781a      	ldrb	r2, [r3, #0]
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	69db      	ldr	r3, [r3, #28]
 800b656:	1c5a      	adds	r2, r3, #1
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b660:	1e5a      	subs	r2, r3, #1
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d1df      	bne.n	800b62e <HAL_QSPI_Transmit+0x86>
 800b66e:	e000      	b.n	800b672 <HAL_QSPI_Transmit+0xca>
          break;
 800b670:	bf00      	nop
      }

      if (status == HAL_OK)
 800b672:	7ffb      	ldrb	r3, [r7, #31]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d115      	bne.n	800b6a4 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	9300      	str	r3, [sp, #0]
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	2201      	movs	r2, #1
 800b680:	2102      	movs	r1, #2
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f000 f950 	bl	800b928 <QSPI_WaitFlagStateUntilTimeout>
 800b688:	4603      	mov	r3, r0
 800b68a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800b68c:	7ffb      	ldrb	r3, [r7, #31]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d108      	bne.n	800b6a4 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2202      	movs	r2, #2
 800b698:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f000 f8bd 	bl	800b81a <HAL_QSPI_Abort>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800b6ac:	e00a      	b.n	800b6c4 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6b2:	f043 0208 	orr.w	r2, r3, #8
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	77fb      	strb	r3, [r7, #31]
 800b6be:	e001      	b.n	800b6c4 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b6c0:	2302      	movs	r3, #2
 800b6c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800b6cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3720      	adds	r7, #32
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b08a      	sub	sp, #40	@ 0x28
 800b6da:	af02      	add	r7, sp, #8
 800b6dc:	60f8      	str	r0, [r7, #12]
 800b6de:	60b9      	str	r1, [r7, #8]
 800b6e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b6e6:	f7fc fe5f 	bl	80083a8 <HAL_GetTick>
 800b6ea:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	699b      	ldr	r3, [r3, #24]
 800b6f2:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	3320      	adds	r3, #32
 800b6fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b01      	cmp	r3, #1
 800b706:	d101      	bne.n	800b70c <HAL_QSPI_Receive+0x36>
 800b708:	2302      	movs	r3, #2
 800b70a:	e082      	b.n	800b812 <HAL_QSPI_Receive+0x13c>
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d171      	bne.n	800b804 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d062      	beq.n	800b7f2 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2222      	movs	r2, #34	@ 0x22
 800b730:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	1c5a      	adds	r2, r3, #1
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	691b      	ldr	r3, [r3, #16]
 800b746:	1c5a      	adds	r2, r3, #1
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800b764:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800b76e:	e01c      	b.n	800b7aa <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	2201      	movs	r2, #1
 800b778:	2106      	movs	r1, #6
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f000 f8d4 	bl	800b928 <QSPI_WaitFlagStateUntilTimeout>
 800b780:	4603      	mov	r3, r0
 800b782:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800b784:	7ffb      	ldrb	r3, [r7, #31]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d114      	bne.n	800b7b4 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b78e:	693a      	ldr	r2, [r7, #16]
 800b790:	7812      	ldrb	r2, [r2, #0]
 800b792:	b2d2      	uxtb	r2, r2
 800b794:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b79a:	1c5a      	adds	r2, r3, #1
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7a4:	1e5a      	subs	r2, r3, #1
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1de      	bne.n	800b770 <HAL_QSPI_Receive+0x9a>
 800b7b2:	e000      	b.n	800b7b6 <HAL_QSPI_Receive+0xe0>
          break;
 800b7b4:	bf00      	nop
      }

      if (status == HAL_OK)
 800b7b6:	7ffb      	ldrb	r3, [r7, #31]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d115      	bne.n	800b7e8 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	9300      	str	r3, [sp, #0]
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	2102      	movs	r1, #2
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f000 f8ae 	bl	800b928 <QSPI_WaitFlagStateUntilTimeout>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800b7d0:	7ffb      	ldrb	r3, [r7, #31]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d108      	bne.n	800b7e8 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2202      	movs	r2, #2
 800b7dc:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f000 f81b 	bl	800b81a <HAL_QSPI_Abort>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800b7f0:	e00a      	b.n	800b808 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7f6:	f043 0208 	orr.w	r2, r3, #8
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800b7fe:	2301      	movs	r3, #1
 800b800:	77fb      	strb	r3, [r7, #31]
 800b802:	e001      	b.n	800b808 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b804:	2302      	movs	r3, #2
 800b806:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2200      	movs	r2, #0
 800b80c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800b810:	7ffb      	ldrb	r3, [r7, #31]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3720      	adds	r7, #32
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b086      	sub	sp, #24
 800b81e:	af02      	add	r7, sp, #8
 800b820:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b822:	2300      	movs	r3, #0
 800b824:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800b826:	f7fc fdbf 	bl	80083a8 <HAL_GetTick>
 800b82a:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b832:	b2db      	uxtb	r3, r3
 800b834:	f003 0302 	and.w	r3, r3, #2
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d062      	beq.n	800b902 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 0304 	and.w	r3, r3, #4
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d017      	beq.n	800b882 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f022 0204 	bic.w	r2, r2, #4
 800b860:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b866:	4618      	mov	r0, r3
 800b868:	f7fe fc9e 	bl	800a1a8 <HAL_DMA_Abort>
 800b86c:	4603      	mov	r3, r0
 800b86e:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800b870:	7bfb      	ldrb	r3, [r7, #15]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d005      	beq.n	800b882 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b87a:	f043 0204 	orr.w	r2, r3, #4
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	f003 0320 	and.w	r3, r3, #32
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d034      	beq.n	800b8fa <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f042 0202 	orr.w	r2, r2, #2
 800b89e:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8a4:	9300      	str	r3, [sp, #0]
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	2102      	movs	r1, #2
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f83b 	bl	800b928 <QSPI_WaitFlagStateUntilTimeout>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800b8b6:	7bfb      	ldrb	r3, [r7, #15]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d10e      	bne.n	800b8da <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2120      	movs	r1, #32
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 f829 	bl	800b928 <QSPI_WaitFlagStateUntilTimeout>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800b8da:	7bfb      	ldrb	r3, [r7, #15]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d110      	bne.n	800b902 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	695a      	ldr	r2, [r3, #20]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800b8ee:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800b8f8:	e003      	b.n	800b902 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800b902:	7bfb      	ldrb	r3, [r7, #15]
}
 800b904:	4618      	mov	r0, r3
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800b91c:	bf00      	nop
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	603b      	str	r3, [r7, #0]
 800b934:	4613      	mov	r3, r2
 800b936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b938:	e01a      	b.n	800b970 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b940:	d016      	beq.n	800b970 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b942:	f7fc fd31 	bl	80083a8 <HAL_GetTick>
 800b946:	4602      	mov	r2, r0
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	69ba      	ldr	r2, [r7, #24]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d302      	bcc.n	800b958 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10b      	bne.n	800b970 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2204      	movs	r2, #4
 800b95c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b964:	f043 0201 	orr.w	r2, r3, #1
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b96c:	2301      	movs	r3, #1
 800b96e:	e00e      	b.n	800b98e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	689a      	ldr	r2, [r3, #8]
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	4013      	ands	r3, r2
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	bf14      	ite	ne
 800b97e:	2301      	movne	r3, #1
 800b980:	2300      	moveq	r3, #0
 800b982:	b2db      	uxtb	r3, r3
 800b984:	461a      	mov	r2, r3
 800b986:	79fb      	ldrb	r3, [r7, #7]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d1d6      	bne.n	800b93a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b996:	b480      	push	{r7}
 800b998:	b085      	sub	sp, #20
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	60f8      	str	r0, [r7, #12]
 800b99e:	60b9      	str	r1, [r7, #8]
 800b9a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d009      	beq.n	800b9be <QSPI_Config+0x28>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b9b0:	d005      	beq.n	800b9be <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	3a01      	subs	r2, #1
 800b9bc:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f000 80c1 	beq.w	800bb4a <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	6a1b      	ldr	r3, [r3, #32]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d063      	beq.n	800ba98 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	6892      	ldr	r2, [r2, #8]
 800b9d8:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	69db      	ldr	r3, [r3, #28]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d031      	beq.n	800ba46 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9f0:	431a      	orrs	r2, r3
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9f6:	431a      	orrs	r2, r3
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	695b      	ldr	r3, [r3, #20]
 800b9fc:	049b      	lsls	r3, r3, #18
 800b9fe:	431a      	orrs	r2, r3
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	431a      	orrs	r2, r3
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	6a1b      	ldr	r3, [r3, #32]
 800ba0a:	431a      	orrs	r2, r3
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	431a      	orrs	r2, r3
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	69db      	ldr	r3, [r3, #28]
 800ba16:	431a      	orrs	r2, r3
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	431a      	orrs	r2, r3
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	ea42 0103 	orr.w	r1, r2, r3
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	430a      	orrs	r2, r1
 800ba2e:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ba36:	f000 813f 	beq.w	800bcb8 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	6852      	ldr	r2, [r2, #4]
 800ba42:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800ba44:	e138      	b.n	800bcb8 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba4e:	431a      	orrs	r2, r3
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba54:	431a      	orrs	r2, r3
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba5a:	431a      	orrs	r2, r3
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	695b      	ldr	r3, [r3, #20]
 800ba60:	049b      	lsls	r3, r3, #18
 800ba62:	431a      	orrs	r2, r3
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	431a      	orrs	r2, r3
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	6a1b      	ldr	r3, [r3, #32]
 800ba6e:	431a      	orrs	r2, r3
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	69db      	ldr	r3, [r3, #28]
 800ba74:	431a      	orrs	r2, r3
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	699b      	ldr	r3, [r3, #24]
 800ba7a:	431a      	orrs	r2, r3
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	ea42 0103 	orr.w	r1, r2, r3
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	430a      	orrs	r2, r1
 800ba8c:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2200      	movs	r2, #0
 800ba94:	619a      	str	r2, [r3, #24]
}
 800ba96:	e10f      	b.n	800bcb8 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	69db      	ldr	r3, [r3, #28]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d02e      	beq.n	800bafe <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baa8:	431a      	orrs	r2, r3
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baae:	431a      	orrs	r2, r3
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab4:	431a      	orrs	r2, r3
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	049b      	lsls	r3, r3, #18
 800babc:	431a      	orrs	r2, r3
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	6a1b      	ldr	r3, [r3, #32]
 800bac2:	431a      	orrs	r2, r3
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	431a      	orrs	r2, r3
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	69db      	ldr	r3, [r3, #28]
 800bace:	431a      	orrs	r2, r3
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	699b      	ldr	r3, [r3, #24]
 800bad4:	431a      	orrs	r2, r3
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	ea42 0103 	orr.w	r1, r2, r3
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	430a      	orrs	r2, r1
 800bae6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800baee:	f000 80e3 	beq.w	800bcb8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	68ba      	ldr	r2, [r7, #8]
 800baf8:	6852      	ldr	r2, [r2, #4]
 800bafa:	619a      	str	r2, [r3, #24]
}
 800bafc:	e0dc      	b.n	800bcb8 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb06:	431a      	orrs	r2, r3
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb0c:	431a      	orrs	r2, r3
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb12:	431a      	orrs	r2, r3
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	049b      	lsls	r3, r3, #18
 800bb1a:	431a      	orrs	r2, r3
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	6a1b      	ldr	r3, [r3, #32]
 800bb20:	431a      	orrs	r2, r3
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	69db      	ldr	r3, [r3, #28]
 800bb26:	431a      	orrs	r2, r3
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	699b      	ldr	r3, [r3, #24]
 800bb2c:	431a      	orrs	r2, r3
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	ea42 0103 	orr.w	r1, r2, r3
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	430a      	orrs	r2, r1
 800bb3e:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2200      	movs	r2, #0
 800bb46:	619a      	str	r2, [r3, #24]
}
 800bb48:	e0b6      	b.n	800bcb8 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d05d      	beq.n	800bc0e <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	68ba      	ldr	r2, [r7, #8]
 800bb58:	6892      	ldr	r2, [r2, #8]
 800bb5a:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	69db      	ldr	r3, [r3, #28]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d02e      	beq.n	800bbc2 <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb6c:	431a      	orrs	r2, r3
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb72:	431a      	orrs	r2, r3
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb78:	431a      	orrs	r2, r3
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	695b      	ldr	r3, [r3, #20]
 800bb7e:	049b      	lsls	r3, r3, #18
 800bb80:	431a      	orrs	r2, r3
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	431a      	orrs	r2, r3
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	6a1b      	ldr	r3, [r3, #32]
 800bb8c:	431a      	orrs	r2, r3
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	431a      	orrs	r2, r3
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	69db      	ldr	r3, [r3, #28]
 800bb98:	431a      	orrs	r2, r3
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	699b      	ldr	r3, [r3, #24]
 800bb9e:	ea42 0103 	orr.w	r1, r2, r3
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	430a      	orrs	r2, r1
 800bbaa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800bbb2:	f000 8081 	beq.w	800bcb8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68ba      	ldr	r2, [r7, #8]
 800bbbc:	6852      	ldr	r2, [r2, #4]
 800bbbe:	619a      	str	r2, [r3, #24]
}
 800bbc0:	e07a      	b.n	800bcb8 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbca:	431a      	orrs	r2, r3
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbd0:	431a      	orrs	r2, r3
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbd6:	431a      	orrs	r2, r3
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	695b      	ldr	r3, [r3, #20]
 800bbdc:	049b      	lsls	r3, r3, #18
 800bbde:	431a      	orrs	r2, r3
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	431a      	orrs	r2, r3
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	431a      	orrs	r2, r3
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	69db      	ldr	r3, [r3, #28]
 800bbf0:	431a      	orrs	r2, r3
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	ea42 0103 	orr.w	r1, r2, r3
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	430a      	orrs	r2, r1
 800bc02:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	619a      	str	r2, [r3, #24]
}
 800bc0c:	e054      	b.n	800bcb8 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	69db      	ldr	r3, [r3, #28]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d02a      	beq.n	800bc6c <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc1e:	431a      	orrs	r2, r3
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc24:	431a      	orrs	r2, r3
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc2a:	431a      	orrs	r2, r3
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	695b      	ldr	r3, [r3, #20]
 800bc30:	049b      	lsls	r3, r3, #18
 800bc32:	431a      	orrs	r2, r3
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	6a1b      	ldr	r3, [r3, #32]
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	431a      	orrs	r2, r3
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	431a      	orrs	r2, r3
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	699b      	ldr	r3, [r3, #24]
 800bc4a:	ea42 0103 	orr.w	r1, r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	430a      	orrs	r2, r1
 800bc56:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800bc5e:	d02b      	beq.n	800bcb8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	68ba      	ldr	r2, [r7, #8]
 800bc66:	6852      	ldr	r2, [r2, #4]
 800bc68:	619a      	str	r2, [r3, #24]
}
 800bc6a:	e025      	b.n	800bcb8 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d021      	beq.n	800bcb8 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc7c:	431a      	orrs	r2, r3
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc82:	431a      	orrs	r2, r3
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc88:	431a      	orrs	r2, r3
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	695b      	ldr	r3, [r3, #20]
 800bc8e:	049b      	lsls	r3, r3, #18
 800bc90:	431a      	orrs	r2, r3
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	6a1b      	ldr	r3, [r3, #32]
 800bc96:	431a      	orrs	r2, r3
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	69db      	ldr	r3, [r3, #28]
 800bc9c:	431a      	orrs	r2, r3
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	699b      	ldr	r3, [r3, #24]
 800bca2:	ea42 0103 	orr.w	r1, r2, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	430a      	orrs	r2, r1
 800bcae:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	619a      	str	r2, [r3, #24]
}
 800bcb8:	bf00      	nop
 800bcba:	3714      	adds	r7, #20
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b088      	sub	sp, #32
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d101      	bne.n	800bcd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e3ca      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bcd6:	4b97      	ldr	r3, [pc, #604]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	f003 030c 	and.w	r3, r3, #12
 800bcde:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bce0:	4b94      	ldr	r3, [pc, #592]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	f003 0303 	and.w	r3, r3, #3
 800bce8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f003 0310 	and.w	r3, r3, #16
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f000 80e4 	beq.w	800bec0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d007      	beq.n	800bd0e <HAL_RCC_OscConfig+0x4a>
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	2b0c      	cmp	r3, #12
 800bd02:	f040 808b 	bne.w	800be1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	f040 8087 	bne.w	800be1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bd0e:	4b89      	ldr	r3, [pc, #548]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f003 0302 	and.w	r3, r3, #2
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d005      	beq.n	800bd26 <HAL_RCC_OscConfig+0x62>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	699b      	ldr	r3, [r3, #24]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d101      	bne.n	800bd26 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	e3a2      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a1a      	ldr	r2, [r3, #32]
 800bd2a:	4b82      	ldr	r3, [pc, #520]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f003 0308 	and.w	r3, r3, #8
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d004      	beq.n	800bd40 <HAL_RCC_OscConfig+0x7c>
 800bd36:	4b7f      	ldr	r3, [pc, #508]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd3e:	e005      	b.n	800bd4c <HAL_RCC_OscConfig+0x88>
 800bd40:	4b7c      	ldr	r3, [pc, #496]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bd42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd46:	091b      	lsrs	r3, r3, #4
 800bd48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d223      	bcs.n	800bd98 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a1b      	ldr	r3, [r3, #32]
 800bd54:	4618      	mov	r0, r3
 800bd56:	f000 fd55 	bl	800c804 <RCC_SetFlashLatencyFromMSIRange>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d001      	beq.n	800bd64 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	e383      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bd64:	4b73      	ldr	r3, [pc, #460]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a72      	ldr	r2, [pc, #456]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bd6a:	f043 0308 	orr.w	r3, r3, #8
 800bd6e:	6013      	str	r3, [r2, #0]
 800bd70:	4b70      	ldr	r3, [pc, #448]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a1b      	ldr	r3, [r3, #32]
 800bd7c:	496d      	ldr	r1, [pc, #436]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bd82:	4b6c      	ldr	r3, [pc, #432]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	69db      	ldr	r3, [r3, #28]
 800bd8e:	021b      	lsls	r3, r3, #8
 800bd90:	4968      	ldr	r1, [pc, #416]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bd92:	4313      	orrs	r3, r2
 800bd94:	604b      	str	r3, [r1, #4]
 800bd96:	e025      	b.n	800bde4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bd98:	4b66      	ldr	r3, [pc, #408]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a65      	ldr	r2, [pc, #404]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bd9e:	f043 0308 	orr.w	r3, r3, #8
 800bda2:	6013      	str	r3, [r2, #0]
 800bda4:	4b63      	ldr	r3, [pc, #396]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a1b      	ldr	r3, [r3, #32]
 800bdb0:	4960      	ldr	r1, [pc, #384]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bdb6:	4b5f      	ldr	r3, [pc, #380]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	69db      	ldr	r3, [r3, #28]
 800bdc2:	021b      	lsls	r3, r3, #8
 800bdc4:	495b      	ldr	r1, [pc, #364]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d109      	bne.n	800bde4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a1b      	ldr	r3, [r3, #32]
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f000 fd15 	bl	800c804 <RCC_SetFlashLatencyFromMSIRange>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d001      	beq.n	800bde4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	e343      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bde4:	f000 fc4a 	bl	800c67c <HAL_RCC_GetSysClockFreq>
 800bde8:	4602      	mov	r2, r0
 800bdea:	4b52      	ldr	r3, [pc, #328]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	091b      	lsrs	r3, r3, #4
 800bdf0:	f003 030f 	and.w	r3, r3, #15
 800bdf4:	4950      	ldr	r1, [pc, #320]	@ (800bf38 <HAL_RCC_OscConfig+0x274>)
 800bdf6:	5ccb      	ldrb	r3, [r1, r3]
 800bdf8:	f003 031f 	and.w	r3, r3, #31
 800bdfc:	fa22 f303 	lsr.w	r3, r2, r3
 800be00:	4a4e      	ldr	r2, [pc, #312]	@ (800bf3c <HAL_RCC_OscConfig+0x278>)
 800be02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800be04:	4b4e      	ldr	r3, [pc, #312]	@ (800bf40 <HAL_RCC_OscConfig+0x27c>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4618      	mov	r0, r3
 800be0a:	f7fc fa7d 	bl	8008308 <HAL_InitTick>
 800be0e:	4603      	mov	r3, r0
 800be10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800be12:	7bfb      	ldrb	r3, [r7, #15]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d052      	beq.n	800bebe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800be18:	7bfb      	ldrb	r3, [r7, #15]
 800be1a:	e327      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d032      	beq.n	800be8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800be24:	4b43      	ldr	r3, [pc, #268]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a42      	ldr	r2, [pc, #264]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800be2a:	f043 0301 	orr.w	r3, r3, #1
 800be2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800be30:	f7fc faba 	bl	80083a8 <HAL_GetTick>
 800be34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800be36:	e008      	b.n	800be4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800be38:	f7fc fab6 	bl	80083a8 <HAL_GetTick>
 800be3c:	4602      	mov	r2, r0
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	2b02      	cmp	r3, #2
 800be44:	d901      	bls.n	800be4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800be46:	2303      	movs	r3, #3
 800be48:	e310      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800be4a:	4b3a      	ldr	r3, [pc, #232]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f003 0302 	and.w	r3, r3, #2
 800be52:	2b00      	cmp	r3, #0
 800be54:	d0f0      	beq.n	800be38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800be56:	4b37      	ldr	r3, [pc, #220]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a36      	ldr	r2, [pc, #216]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800be5c:	f043 0308 	orr.w	r3, r3, #8
 800be60:	6013      	str	r3, [r2, #0]
 800be62:	4b34      	ldr	r3, [pc, #208]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a1b      	ldr	r3, [r3, #32]
 800be6e:	4931      	ldr	r1, [pc, #196]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800be70:	4313      	orrs	r3, r2
 800be72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800be74:	4b2f      	ldr	r3, [pc, #188]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	69db      	ldr	r3, [r3, #28]
 800be80:	021b      	lsls	r3, r3, #8
 800be82:	492c      	ldr	r1, [pc, #176]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800be84:	4313      	orrs	r3, r2
 800be86:	604b      	str	r3, [r1, #4]
 800be88:	e01a      	b.n	800bec0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800be8a:	4b2a      	ldr	r3, [pc, #168]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a29      	ldr	r2, [pc, #164]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800be90:	f023 0301 	bic.w	r3, r3, #1
 800be94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800be96:	f7fc fa87 	bl	80083a8 <HAL_GetTick>
 800be9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800be9c:	e008      	b.n	800beb0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800be9e:	f7fc fa83 	bl	80083a8 <HAL_GetTick>
 800bea2:	4602      	mov	r2, r0
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d901      	bls.n	800beb0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	e2dd      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800beb0:	4b20      	ldr	r3, [pc, #128]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f003 0302 	and.w	r3, r3, #2
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1f0      	bne.n	800be9e <HAL_RCC_OscConfig+0x1da>
 800bebc:	e000      	b.n	800bec0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bebe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f003 0301 	and.w	r3, r3, #1
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d074      	beq.n	800bfb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	2b08      	cmp	r3, #8
 800bed0:	d005      	beq.n	800bede <HAL_RCC_OscConfig+0x21a>
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	2b0c      	cmp	r3, #12
 800bed6:	d10e      	bne.n	800bef6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	2b03      	cmp	r3, #3
 800bedc:	d10b      	bne.n	800bef6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bede:	4b15      	ldr	r3, [pc, #84]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d064      	beq.n	800bfb4 <HAL_RCC_OscConfig+0x2f0>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d160      	bne.n	800bfb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	e2ba      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800befe:	d106      	bne.n	800bf0e <HAL_RCC_OscConfig+0x24a>
 800bf00:	4b0c      	ldr	r3, [pc, #48]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a0b      	ldr	r2, [pc, #44]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bf06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf0a:	6013      	str	r3, [r2, #0]
 800bf0c:	e026      	b.n	800bf5c <HAL_RCC_OscConfig+0x298>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bf16:	d115      	bne.n	800bf44 <HAL_RCC_OscConfig+0x280>
 800bf18:	4b06      	ldr	r3, [pc, #24]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a05      	ldr	r2, [pc, #20]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bf1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bf22:	6013      	str	r3, [r2, #0]
 800bf24:	4b03      	ldr	r3, [pc, #12]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a02      	ldr	r2, [pc, #8]	@ (800bf34 <HAL_RCC_OscConfig+0x270>)
 800bf2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf2e:	6013      	str	r3, [r2, #0]
 800bf30:	e014      	b.n	800bf5c <HAL_RCC_OscConfig+0x298>
 800bf32:	bf00      	nop
 800bf34:	40021000 	.word	0x40021000
 800bf38:	0801335c 	.word	0x0801335c
 800bf3c:	20000000 	.word	0x20000000
 800bf40:	2000000c 	.word	0x2000000c
 800bf44:	4ba0      	ldr	r3, [pc, #640]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a9f      	ldr	r2, [pc, #636]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800bf4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf4e:	6013      	str	r3, [r2, #0]
 800bf50:	4b9d      	ldr	r3, [pc, #628]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a9c      	ldr	r2, [pc, #624]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800bf56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bf5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d013      	beq.n	800bf8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf64:	f7fc fa20 	bl	80083a8 <HAL_GetTick>
 800bf68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bf6a:	e008      	b.n	800bf7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bf6c:	f7fc fa1c 	bl	80083a8 <HAL_GetTick>
 800bf70:	4602      	mov	r2, r0
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	2b64      	cmp	r3, #100	@ 0x64
 800bf78:	d901      	bls.n	800bf7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	e276      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bf7e:	4b92      	ldr	r3, [pc, #584]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d0f0      	beq.n	800bf6c <HAL_RCC_OscConfig+0x2a8>
 800bf8a:	e014      	b.n	800bfb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf8c:	f7fc fa0c 	bl	80083a8 <HAL_GetTick>
 800bf90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bf92:	e008      	b.n	800bfa6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bf94:	f7fc fa08 	bl	80083a8 <HAL_GetTick>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	1ad3      	subs	r3, r2, r3
 800bf9e:	2b64      	cmp	r3, #100	@ 0x64
 800bfa0:	d901      	bls.n	800bfa6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800bfa2:	2303      	movs	r3, #3
 800bfa4:	e262      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bfa6:	4b88      	ldr	r3, [pc, #544]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d1f0      	bne.n	800bf94 <HAL_RCC_OscConfig+0x2d0>
 800bfb2:	e000      	b.n	800bfb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bfb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f003 0302 	and.w	r3, r3, #2
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d060      	beq.n	800c084 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	2b04      	cmp	r3, #4
 800bfc6:	d005      	beq.n	800bfd4 <HAL_RCC_OscConfig+0x310>
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	2b0c      	cmp	r3, #12
 800bfcc:	d119      	bne.n	800c002 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d116      	bne.n	800c002 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bfd4:	4b7c      	ldr	r3, [pc, #496]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d005      	beq.n	800bfec <HAL_RCC_OscConfig+0x328>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d101      	bne.n	800bfec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e23f      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bfec:	4b76      	ldr	r3, [pc, #472]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	691b      	ldr	r3, [r3, #16]
 800bff8:	061b      	lsls	r3, r3, #24
 800bffa:	4973      	ldr	r1, [pc, #460]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800bffc:	4313      	orrs	r3, r2
 800bffe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c000:	e040      	b.n	800c084 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d023      	beq.n	800c052 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c00a:	4b6f      	ldr	r3, [pc, #444]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a6e      	ldr	r2, [pc, #440]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c016:	f7fc f9c7 	bl	80083a8 <HAL_GetTick>
 800c01a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c01c:	e008      	b.n	800c030 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c01e:	f7fc f9c3 	bl	80083a8 <HAL_GetTick>
 800c022:	4602      	mov	r2, r0
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	1ad3      	subs	r3, r2, r3
 800c028:	2b02      	cmp	r3, #2
 800c02a:	d901      	bls.n	800c030 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c02c:	2303      	movs	r3, #3
 800c02e:	e21d      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c030:	4b65      	ldr	r3, [pc, #404]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d0f0      	beq.n	800c01e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c03c:	4b62      	ldr	r3, [pc, #392]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	691b      	ldr	r3, [r3, #16]
 800c048:	061b      	lsls	r3, r3, #24
 800c04a:	495f      	ldr	r1, [pc, #380]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c04c:	4313      	orrs	r3, r2
 800c04e:	604b      	str	r3, [r1, #4]
 800c050:	e018      	b.n	800c084 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c052:	4b5d      	ldr	r3, [pc, #372]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a5c      	ldr	r2, [pc, #368]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c05c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c05e:	f7fc f9a3 	bl	80083a8 <HAL_GetTick>
 800c062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c064:	e008      	b.n	800c078 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c066:	f7fc f99f 	bl	80083a8 <HAL_GetTick>
 800c06a:	4602      	mov	r2, r0
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	1ad3      	subs	r3, r2, r3
 800c070:	2b02      	cmp	r3, #2
 800c072:	d901      	bls.n	800c078 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c074:	2303      	movs	r3, #3
 800c076:	e1f9      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c078:	4b53      	ldr	r3, [pc, #332]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1f0      	bne.n	800c066 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f003 0308 	and.w	r3, r3, #8
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d03c      	beq.n	800c10a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	695b      	ldr	r3, [r3, #20]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d01c      	beq.n	800c0d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c098:	4b4b      	ldr	r3, [pc, #300]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c09a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c09e:	4a4a      	ldr	r2, [pc, #296]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c0a0:	f043 0301 	orr.w	r3, r3, #1
 800c0a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0a8:	f7fc f97e 	bl	80083a8 <HAL_GetTick>
 800c0ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c0ae:	e008      	b.n	800c0c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c0b0:	f7fc f97a 	bl	80083a8 <HAL_GetTick>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	1ad3      	subs	r3, r2, r3
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	d901      	bls.n	800c0c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c0be:	2303      	movs	r3, #3
 800c0c0:	e1d4      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c0c2:	4b41      	ldr	r3, [pc, #260]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c0c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c0c8:	f003 0302 	and.w	r3, r3, #2
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d0ef      	beq.n	800c0b0 <HAL_RCC_OscConfig+0x3ec>
 800c0d0:	e01b      	b.n	800c10a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c0d2:	4b3d      	ldr	r3, [pc, #244]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c0d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c0d8:	4a3b      	ldr	r2, [pc, #236]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c0da:	f023 0301 	bic.w	r3, r3, #1
 800c0de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0e2:	f7fc f961 	bl	80083a8 <HAL_GetTick>
 800c0e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c0e8:	e008      	b.n	800c0fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c0ea:	f7fc f95d 	bl	80083a8 <HAL_GetTick>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d901      	bls.n	800c0fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	e1b7      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c0fc:	4b32      	ldr	r3, [pc, #200]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c0fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c102:	f003 0302 	and.w	r3, r3, #2
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1ef      	bne.n	800c0ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f003 0304 	and.w	r3, r3, #4
 800c112:	2b00      	cmp	r3, #0
 800c114:	f000 80a6 	beq.w	800c264 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c118:	2300      	movs	r3, #0
 800c11a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c11c:	4b2a      	ldr	r3, [pc, #168]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c11e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10d      	bne.n	800c144 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c128:	4b27      	ldr	r3, [pc, #156]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c12a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c12c:	4a26      	ldr	r2, [pc, #152]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c12e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c132:	6593      	str	r3, [r2, #88]	@ 0x58
 800c134:	4b24      	ldr	r3, [pc, #144]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c13c:	60bb      	str	r3, [r7, #8]
 800c13e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c140:	2301      	movs	r3, #1
 800c142:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c144:	4b21      	ldr	r3, [pc, #132]	@ (800c1cc <HAL_RCC_OscConfig+0x508>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d118      	bne.n	800c182 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c150:	4b1e      	ldr	r3, [pc, #120]	@ (800c1cc <HAL_RCC_OscConfig+0x508>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a1d      	ldr	r2, [pc, #116]	@ (800c1cc <HAL_RCC_OscConfig+0x508>)
 800c156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c15a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c15c:	f7fc f924 	bl	80083a8 <HAL_GetTick>
 800c160:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c162:	e008      	b.n	800c176 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c164:	f7fc f920 	bl	80083a8 <HAL_GetTick>
 800c168:	4602      	mov	r2, r0
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	1ad3      	subs	r3, r2, r3
 800c16e:	2b02      	cmp	r3, #2
 800c170:	d901      	bls.n	800c176 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c172:	2303      	movs	r3, #3
 800c174:	e17a      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c176:	4b15      	ldr	r3, [pc, #84]	@ (800c1cc <HAL_RCC_OscConfig+0x508>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d0f0      	beq.n	800c164 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	2b01      	cmp	r3, #1
 800c188:	d108      	bne.n	800c19c <HAL_RCC_OscConfig+0x4d8>
 800c18a:	4b0f      	ldr	r3, [pc, #60]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c18c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c190:	4a0d      	ldr	r2, [pc, #52]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c192:	f043 0301 	orr.w	r3, r3, #1
 800c196:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c19a:	e029      	b.n	800c1f0 <HAL_RCC_OscConfig+0x52c>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	2b05      	cmp	r3, #5
 800c1a2:	d115      	bne.n	800c1d0 <HAL_RCC_OscConfig+0x50c>
 800c1a4:	4b08      	ldr	r3, [pc, #32]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1aa:	4a07      	ldr	r2, [pc, #28]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c1ac:	f043 0304 	orr.w	r3, r3, #4
 800c1b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c1b4:	4b04      	ldr	r3, [pc, #16]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c1b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1ba:	4a03      	ldr	r2, [pc, #12]	@ (800c1c8 <HAL_RCC_OscConfig+0x504>)
 800c1bc:	f043 0301 	orr.w	r3, r3, #1
 800c1c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c1c4:	e014      	b.n	800c1f0 <HAL_RCC_OscConfig+0x52c>
 800c1c6:	bf00      	nop
 800c1c8:	40021000 	.word	0x40021000
 800c1cc:	40007000 	.word	0x40007000
 800c1d0:	4b9c      	ldr	r3, [pc, #624]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1d6:	4a9b      	ldr	r2, [pc, #620]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c1d8:	f023 0301 	bic.w	r3, r3, #1
 800c1dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c1e0:	4b98      	ldr	r3, [pc, #608]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1e6:	4a97      	ldr	r2, [pc, #604]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c1e8:	f023 0304 	bic.w	r3, r3, #4
 800c1ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d016      	beq.n	800c226 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1f8:	f7fc f8d6 	bl	80083a8 <HAL_GetTick>
 800c1fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c1fe:	e00a      	b.n	800c216 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c200:	f7fc f8d2 	bl	80083a8 <HAL_GetTick>
 800c204:	4602      	mov	r2, r0
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c20e:	4293      	cmp	r3, r2
 800c210:	d901      	bls.n	800c216 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800c212:	2303      	movs	r3, #3
 800c214:	e12a      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c216:	4b8b      	ldr	r3, [pc, #556]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c21c:	f003 0302 	and.w	r3, r3, #2
 800c220:	2b00      	cmp	r3, #0
 800c222:	d0ed      	beq.n	800c200 <HAL_RCC_OscConfig+0x53c>
 800c224:	e015      	b.n	800c252 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c226:	f7fc f8bf 	bl	80083a8 <HAL_GetTick>
 800c22a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c22c:	e00a      	b.n	800c244 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c22e:	f7fc f8bb 	bl	80083a8 <HAL_GetTick>
 800c232:	4602      	mov	r2, r0
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d901      	bls.n	800c244 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c240:	2303      	movs	r3, #3
 800c242:	e113      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c244:	4b7f      	ldr	r3, [pc, #508]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c24a:	f003 0302 	and.w	r3, r3, #2
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1ed      	bne.n	800c22e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c252:	7ffb      	ldrb	r3, [r7, #31]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d105      	bne.n	800c264 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c258:	4b7a      	ldr	r3, [pc, #488]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c25a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c25c:	4a79      	ldr	r2, [pc, #484]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c25e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c262:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f000 80fe 	beq.w	800c46a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c272:	2b02      	cmp	r3, #2
 800c274:	f040 80d0 	bne.w	800c418 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c278:	4b72      	ldr	r3, [pc, #456]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	f003 0203 	and.w	r2, r3, #3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c288:	429a      	cmp	r2, r3
 800c28a:	d130      	bne.n	800c2ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c296:	3b01      	subs	r3, #1
 800c298:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d127      	bne.n	800c2ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d11f      	bne.n	800c2ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c2b8:	2a07      	cmp	r2, #7
 800c2ba:	bf14      	ite	ne
 800c2bc:	2201      	movne	r2, #1
 800c2be:	2200      	moveq	r2, #0
 800c2c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d113      	bne.n	800c2ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2d0:	085b      	lsrs	r3, r3, #1
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d109      	bne.n	800c2ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2e4:	085b      	lsrs	r3, r3, #1
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d06e      	beq.n	800c3cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c2ee:	69bb      	ldr	r3, [r7, #24]
 800c2f0:	2b0c      	cmp	r3, #12
 800c2f2:	d069      	beq.n	800c3c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c2f4:	4b53      	ldr	r3, [pc, #332]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d105      	bne.n	800c30c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800c300:	4b50      	ldr	r3, [pc, #320]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d001      	beq.n	800c310 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	e0ad      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c310:	4b4c      	ldr	r3, [pc, #304]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a4b      	ldr	r2, [pc, #300]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c316:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c31a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c31c:	f7fc f844 	bl	80083a8 <HAL_GetTick>
 800c320:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c322:	e008      	b.n	800c336 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c324:	f7fc f840 	bl	80083a8 <HAL_GetTick>
 800c328:	4602      	mov	r2, r0
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d901      	bls.n	800c336 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800c332:	2303      	movs	r3, #3
 800c334:	e09a      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c336:	4b43      	ldr	r3, [pc, #268]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1f0      	bne.n	800c324 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c342:	4b40      	ldr	r3, [pc, #256]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c344:	68da      	ldr	r2, [r3, #12]
 800c346:	4b40      	ldr	r3, [pc, #256]	@ (800c448 <HAL_RCC_OscConfig+0x784>)
 800c348:	4013      	ands	r3, r2
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c352:	3a01      	subs	r2, #1
 800c354:	0112      	lsls	r2, r2, #4
 800c356:	4311      	orrs	r1, r2
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c35c:	0212      	lsls	r2, r2, #8
 800c35e:	4311      	orrs	r1, r2
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c364:	0852      	lsrs	r2, r2, #1
 800c366:	3a01      	subs	r2, #1
 800c368:	0552      	lsls	r2, r2, #21
 800c36a:	4311      	orrs	r1, r2
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c370:	0852      	lsrs	r2, r2, #1
 800c372:	3a01      	subs	r2, #1
 800c374:	0652      	lsls	r2, r2, #25
 800c376:	4311      	orrs	r1, r2
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c37c:	0912      	lsrs	r2, r2, #4
 800c37e:	0452      	lsls	r2, r2, #17
 800c380:	430a      	orrs	r2, r1
 800c382:	4930      	ldr	r1, [pc, #192]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c384:	4313      	orrs	r3, r2
 800c386:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c388:	4b2e      	ldr	r3, [pc, #184]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a2d      	ldr	r2, [pc, #180]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c38e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c392:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c394:	4b2b      	ldr	r3, [pc, #172]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	4a2a      	ldr	r2, [pc, #168]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c39a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c39e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c3a0:	f7fc f802 	bl	80083a8 <HAL_GetTick>
 800c3a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3a6:	e008      	b.n	800c3ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3a8:	f7fb fffe 	bl	80083a8 <HAL_GetTick>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	2b02      	cmp	r3, #2
 800c3b4:	d901      	bls.n	800c3ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800c3b6:	2303      	movs	r3, #3
 800c3b8:	e058      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3ba:	4b22      	ldr	r3, [pc, #136]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d0f0      	beq.n	800c3a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c3c6:	e050      	b.n	800c46a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	e04f      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3cc:	4b1d      	ldr	r3, [pc, #116]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d148      	bne.n	800c46a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c3d8:	4b1a      	ldr	r3, [pc, #104]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a19      	ldr	r2, [pc, #100]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c3de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c3e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c3e4:	4b17      	ldr	r3, [pc, #92]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	4a16      	ldr	r2, [pc, #88]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c3ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c3ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c3f0:	f7fb ffda 	bl	80083a8 <HAL_GetTick>
 800c3f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3f6:	e008      	b.n	800c40a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3f8:	f7fb ffd6 	bl	80083a8 <HAL_GetTick>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	1ad3      	subs	r3, r2, r3
 800c402:	2b02      	cmp	r3, #2
 800c404:	d901      	bls.n	800c40a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800c406:	2303      	movs	r3, #3
 800c408:	e030      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c40a:	4b0e      	ldr	r3, [pc, #56]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c412:	2b00      	cmp	r3, #0
 800c414:	d0f0      	beq.n	800c3f8 <HAL_RCC_OscConfig+0x734>
 800c416:	e028      	b.n	800c46a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	2b0c      	cmp	r3, #12
 800c41c:	d023      	beq.n	800c466 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c41e:	4b09      	ldr	r3, [pc, #36]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a08      	ldr	r2, [pc, #32]	@ (800c444 <HAL_RCC_OscConfig+0x780>)
 800c424:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c42a:	f7fb ffbd 	bl	80083a8 <HAL_GetTick>
 800c42e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c430:	e00c      	b.n	800c44c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c432:	f7fb ffb9 	bl	80083a8 <HAL_GetTick>
 800c436:	4602      	mov	r2, r0
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	2b02      	cmp	r3, #2
 800c43e:	d905      	bls.n	800c44c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800c440:	2303      	movs	r3, #3
 800c442:	e013      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
 800c444:	40021000 	.word	0x40021000
 800c448:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c44c:	4b09      	ldr	r3, [pc, #36]	@ (800c474 <HAL_RCC_OscConfig+0x7b0>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d1ec      	bne.n	800c432 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800c458:	4b06      	ldr	r3, [pc, #24]	@ (800c474 <HAL_RCC_OscConfig+0x7b0>)
 800c45a:	68da      	ldr	r2, [r3, #12]
 800c45c:	4905      	ldr	r1, [pc, #20]	@ (800c474 <HAL_RCC_OscConfig+0x7b0>)
 800c45e:	4b06      	ldr	r3, [pc, #24]	@ (800c478 <HAL_RCC_OscConfig+0x7b4>)
 800c460:	4013      	ands	r3, r2
 800c462:	60cb      	str	r3, [r1, #12]
 800c464:	e001      	b.n	800c46a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c466:	2301      	movs	r3, #1
 800c468:	e000      	b.n	800c46c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3720      	adds	r7, #32
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	40021000 	.word	0x40021000
 800c478:	feeefffc 	.word	0xfeeefffc

0800c47c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d101      	bne.n	800c490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c48c:	2301      	movs	r3, #1
 800c48e:	e0e7      	b.n	800c660 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c490:	4b75      	ldr	r3, [pc, #468]	@ (800c668 <HAL_RCC_ClockConfig+0x1ec>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 0307 	and.w	r3, r3, #7
 800c498:	683a      	ldr	r2, [r7, #0]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d910      	bls.n	800c4c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c49e:	4b72      	ldr	r3, [pc, #456]	@ (800c668 <HAL_RCC_ClockConfig+0x1ec>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f023 0207 	bic.w	r2, r3, #7
 800c4a6:	4970      	ldr	r1, [pc, #448]	@ (800c668 <HAL_RCC_ClockConfig+0x1ec>)
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4ae:	4b6e      	ldr	r3, [pc, #440]	@ (800c668 <HAL_RCC_ClockConfig+0x1ec>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f003 0307 	and.w	r3, r3, #7
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d001      	beq.n	800c4c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e0cf      	b.n	800c660 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f003 0302 	and.w	r3, r3, #2
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d010      	beq.n	800c4ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	689a      	ldr	r2, [r3, #8]
 800c4d0:	4b66      	ldr	r3, [pc, #408]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d908      	bls.n	800c4ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c4dc:	4b63      	ldr	r3, [pc, #396]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	4960      	ldr	r1, [pc, #384]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 0301 	and.w	r3, r3, #1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d04c      	beq.n	800c594 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d107      	bne.n	800c512 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c502:	4b5a      	ldr	r3, [pc, #360]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d121      	bne.n	800c552 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c50e:	2301      	movs	r3, #1
 800c510:	e0a6      	b.n	800c660 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	2b02      	cmp	r3, #2
 800c518:	d107      	bne.n	800c52a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c51a:	4b54      	ldr	r3, [pc, #336]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c522:	2b00      	cmp	r3, #0
 800c524:	d115      	bne.n	800c552 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c526:	2301      	movs	r3, #1
 800c528:	e09a      	b.n	800c660 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d107      	bne.n	800c542 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c532:	4b4e      	ldr	r3, [pc, #312]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f003 0302 	and.w	r3, r3, #2
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d109      	bne.n	800c552 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c53e:	2301      	movs	r3, #1
 800c540:	e08e      	b.n	800c660 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c542:	4b4a      	ldr	r3, [pc, #296]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d101      	bne.n	800c552 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c54e:	2301      	movs	r3, #1
 800c550:	e086      	b.n	800c660 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c552:	4b46      	ldr	r3, [pc, #280]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	f023 0203 	bic.w	r2, r3, #3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	4943      	ldr	r1, [pc, #268]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c560:	4313      	orrs	r3, r2
 800c562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c564:	f7fb ff20 	bl	80083a8 <HAL_GetTick>
 800c568:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c56a:	e00a      	b.n	800c582 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c56c:	f7fb ff1c 	bl	80083a8 <HAL_GetTick>
 800c570:	4602      	mov	r2, r0
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d901      	bls.n	800c582 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800c57e:	2303      	movs	r3, #3
 800c580:	e06e      	b.n	800c660 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c582:	4b3a      	ldr	r3, [pc, #232]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	f003 020c 	and.w	r2, r3, #12
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	429a      	cmp	r2, r3
 800c592:	d1eb      	bne.n	800c56c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 0302 	and.w	r3, r3, #2
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d010      	beq.n	800c5c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	689a      	ldr	r2, [r3, #8]
 800c5a4:	4b31      	ldr	r3, [pc, #196]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d208      	bcs.n	800c5c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c5b0:	4b2e      	ldr	r3, [pc, #184]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	492b      	ldr	r1, [pc, #172]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c5c2:	4b29      	ldr	r3, [pc, #164]	@ (800c668 <HAL_RCC_ClockConfig+0x1ec>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f003 0307 	and.w	r3, r3, #7
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d210      	bcs.n	800c5f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c5d0:	4b25      	ldr	r3, [pc, #148]	@ (800c668 <HAL_RCC_ClockConfig+0x1ec>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f023 0207 	bic.w	r2, r3, #7
 800c5d8:	4923      	ldr	r1, [pc, #140]	@ (800c668 <HAL_RCC_ClockConfig+0x1ec>)
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5e0:	4b21      	ldr	r3, [pc, #132]	@ (800c668 <HAL_RCC_ClockConfig+0x1ec>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f003 0307 	and.w	r3, r3, #7
 800c5e8:	683a      	ldr	r2, [r7, #0]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d001      	beq.n	800c5f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e036      	b.n	800c660 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f003 0304 	and.w	r3, r3, #4
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d008      	beq.n	800c610 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c5fe:	4b1b      	ldr	r3, [pc, #108]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	4918      	ldr	r1, [pc, #96]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c60c:	4313      	orrs	r3, r2
 800c60e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f003 0308 	and.w	r3, r3, #8
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d009      	beq.n	800c630 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c61c:	4b13      	ldr	r3, [pc, #76]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	691b      	ldr	r3, [r3, #16]
 800c628:	00db      	lsls	r3, r3, #3
 800c62a:	4910      	ldr	r1, [pc, #64]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c62c:	4313      	orrs	r3, r2
 800c62e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c630:	f000 f824 	bl	800c67c <HAL_RCC_GetSysClockFreq>
 800c634:	4602      	mov	r2, r0
 800c636:	4b0d      	ldr	r3, [pc, #52]	@ (800c66c <HAL_RCC_ClockConfig+0x1f0>)
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	091b      	lsrs	r3, r3, #4
 800c63c:	f003 030f 	and.w	r3, r3, #15
 800c640:	490b      	ldr	r1, [pc, #44]	@ (800c670 <HAL_RCC_ClockConfig+0x1f4>)
 800c642:	5ccb      	ldrb	r3, [r1, r3]
 800c644:	f003 031f 	and.w	r3, r3, #31
 800c648:	fa22 f303 	lsr.w	r3, r2, r3
 800c64c:	4a09      	ldr	r2, [pc, #36]	@ (800c674 <HAL_RCC_ClockConfig+0x1f8>)
 800c64e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c650:	4b09      	ldr	r3, [pc, #36]	@ (800c678 <HAL_RCC_ClockConfig+0x1fc>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4618      	mov	r0, r3
 800c656:	f7fb fe57 	bl	8008308 <HAL_InitTick>
 800c65a:	4603      	mov	r3, r0
 800c65c:	72fb      	strb	r3, [r7, #11]

  return status;
 800c65e:	7afb      	ldrb	r3, [r7, #11]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3710      	adds	r7, #16
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	40022000 	.word	0x40022000
 800c66c:	40021000 	.word	0x40021000
 800c670:	0801335c 	.word	0x0801335c
 800c674:	20000000 	.word	0x20000000
 800c678:	2000000c 	.word	0x2000000c

0800c67c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b089      	sub	sp, #36	@ 0x24
 800c680:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c682:	2300      	movs	r3, #0
 800c684:	61fb      	str	r3, [r7, #28]
 800c686:	2300      	movs	r3, #0
 800c688:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c68a:	4b3e      	ldr	r3, [pc, #248]	@ (800c784 <HAL_RCC_GetSysClockFreq+0x108>)
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	f003 030c 	and.w	r3, r3, #12
 800c692:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c694:	4b3b      	ldr	r3, [pc, #236]	@ (800c784 <HAL_RCC_GetSysClockFreq+0x108>)
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	f003 0303 	and.w	r3, r3, #3
 800c69c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d005      	beq.n	800c6b0 <HAL_RCC_GetSysClockFreq+0x34>
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	2b0c      	cmp	r3, #12
 800c6a8:	d121      	bne.n	800c6ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d11e      	bne.n	800c6ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c6b0:	4b34      	ldr	r3, [pc, #208]	@ (800c784 <HAL_RCC_GetSysClockFreq+0x108>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f003 0308 	and.w	r3, r3, #8
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d107      	bne.n	800c6cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c6bc:	4b31      	ldr	r3, [pc, #196]	@ (800c784 <HAL_RCC_GetSysClockFreq+0x108>)
 800c6be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c6c2:	0a1b      	lsrs	r3, r3, #8
 800c6c4:	f003 030f 	and.w	r3, r3, #15
 800c6c8:	61fb      	str	r3, [r7, #28]
 800c6ca:	e005      	b.n	800c6d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c6cc:	4b2d      	ldr	r3, [pc, #180]	@ (800c784 <HAL_RCC_GetSysClockFreq+0x108>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	091b      	lsrs	r3, r3, #4
 800c6d2:	f003 030f 	and.w	r3, r3, #15
 800c6d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c6d8:	4a2b      	ldr	r2, [pc, #172]	@ (800c788 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10d      	bne.n	800c704 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c6ec:	e00a      	b.n	800c704 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	2b04      	cmp	r3, #4
 800c6f2:	d102      	bne.n	800c6fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c6f4:	4b25      	ldr	r3, [pc, #148]	@ (800c78c <HAL_RCC_GetSysClockFreq+0x110>)
 800c6f6:	61bb      	str	r3, [r7, #24]
 800c6f8:	e004      	b.n	800c704 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	2b08      	cmp	r3, #8
 800c6fe:	d101      	bne.n	800c704 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c700:	4b23      	ldr	r3, [pc, #140]	@ (800c790 <HAL_RCC_GetSysClockFreq+0x114>)
 800c702:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	2b0c      	cmp	r3, #12
 800c708:	d134      	bne.n	800c774 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c70a:	4b1e      	ldr	r3, [pc, #120]	@ (800c784 <HAL_RCC_GetSysClockFreq+0x108>)
 800c70c:	68db      	ldr	r3, [r3, #12]
 800c70e:	f003 0303 	and.w	r3, r3, #3
 800c712:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	2b02      	cmp	r3, #2
 800c718:	d003      	beq.n	800c722 <HAL_RCC_GetSysClockFreq+0xa6>
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	2b03      	cmp	r3, #3
 800c71e:	d003      	beq.n	800c728 <HAL_RCC_GetSysClockFreq+0xac>
 800c720:	e005      	b.n	800c72e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c722:	4b1a      	ldr	r3, [pc, #104]	@ (800c78c <HAL_RCC_GetSysClockFreq+0x110>)
 800c724:	617b      	str	r3, [r7, #20]
      break;
 800c726:	e005      	b.n	800c734 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c728:	4b19      	ldr	r3, [pc, #100]	@ (800c790 <HAL_RCC_GetSysClockFreq+0x114>)
 800c72a:	617b      	str	r3, [r7, #20]
      break;
 800c72c:	e002      	b.n	800c734 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c72e:	69fb      	ldr	r3, [r7, #28]
 800c730:	617b      	str	r3, [r7, #20]
      break;
 800c732:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c734:	4b13      	ldr	r3, [pc, #76]	@ (800c784 <HAL_RCC_GetSysClockFreq+0x108>)
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	091b      	lsrs	r3, r3, #4
 800c73a:	f003 0307 	and.w	r3, r3, #7
 800c73e:	3301      	adds	r3, #1
 800c740:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c742:	4b10      	ldr	r3, [pc, #64]	@ (800c784 <HAL_RCC_GetSysClockFreq+0x108>)
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	0a1b      	lsrs	r3, r3, #8
 800c748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c74c:	697a      	ldr	r2, [r7, #20]
 800c74e:	fb03 f202 	mul.w	r2, r3, r2
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	fbb2 f3f3 	udiv	r3, r2, r3
 800c758:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c75a:	4b0a      	ldr	r3, [pc, #40]	@ (800c784 <HAL_RCC_GetSysClockFreq+0x108>)
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	0e5b      	lsrs	r3, r3, #25
 800c760:	f003 0303 	and.w	r3, r3, #3
 800c764:	3301      	adds	r3, #1
 800c766:	005b      	lsls	r3, r3, #1
 800c768:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c76a:	697a      	ldr	r2, [r7, #20]
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c772:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c774:	69bb      	ldr	r3, [r7, #24]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3724      	adds	r7, #36	@ 0x24
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	40021000 	.word	0x40021000
 800c788:	08013374 	.word	0x08013374
 800c78c:	00f42400 	.word	0x00f42400
 800c790:	007a1200 	.word	0x007a1200

0800c794 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c794:	b480      	push	{r7}
 800c796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c798:	4b03      	ldr	r3, [pc, #12]	@ (800c7a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800c79a:	681b      	ldr	r3, [r3, #0]
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	20000000 	.word	0x20000000

0800c7ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c7b0:	f7ff fff0 	bl	800c794 <HAL_RCC_GetHCLKFreq>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	4b06      	ldr	r3, [pc, #24]	@ (800c7d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	0a1b      	lsrs	r3, r3, #8
 800c7bc:	f003 0307 	and.w	r3, r3, #7
 800c7c0:	4904      	ldr	r1, [pc, #16]	@ (800c7d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c7c2:	5ccb      	ldrb	r3, [r1, r3]
 800c7c4:	f003 031f 	and.w	r3, r3, #31
 800c7c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	40021000 	.word	0x40021000
 800c7d4:	0801336c 	.word	0x0801336c

0800c7d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c7dc:	f7ff ffda 	bl	800c794 <HAL_RCC_GetHCLKFreq>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	4b06      	ldr	r3, [pc, #24]	@ (800c7fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	0adb      	lsrs	r3, r3, #11
 800c7e8:	f003 0307 	and.w	r3, r3, #7
 800c7ec:	4904      	ldr	r1, [pc, #16]	@ (800c800 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c7ee:	5ccb      	ldrb	r3, [r1, r3]
 800c7f0:	f003 031f 	and.w	r3, r3, #31
 800c7f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	40021000 	.word	0x40021000
 800c800:	0801336c 	.word	0x0801336c

0800c804 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b086      	sub	sp, #24
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c80c:	2300      	movs	r3, #0
 800c80e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c810:	4b2a      	ldr	r3, [pc, #168]	@ (800c8bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d003      	beq.n	800c824 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c81c:	f7fe fd8c 	bl	800b338 <HAL_PWREx_GetVoltageRange>
 800c820:	6178      	str	r0, [r7, #20]
 800c822:	e014      	b.n	800c84e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c824:	4b25      	ldr	r3, [pc, #148]	@ (800c8bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c828:	4a24      	ldr	r2, [pc, #144]	@ (800c8bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c82a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c82e:	6593      	str	r3, [r2, #88]	@ 0x58
 800c830:	4b22      	ldr	r3, [pc, #136]	@ (800c8bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c838:	60fb      	str	r3, [r7, #12]
 800c83a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c83c:	f7fe fd7c 	bl	800b338 <HAL_PWREx_GetVoltageRange>
 800c840:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c842:	4b1e      	ldr	r3, [pc, #120]	@ (800c8bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c846:	4a1d      	ldr	r2, [pc, #116]	@ (800c8bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c848:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c84c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c854:	d10b      	bne.n	800c86e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2b80      	cmp	r3, #128	@ 0x80
 800c85a:	d919      	bls.n	800c890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2ba0      	cmp	r3, #160	@ 0xa0
 800c860:	d902      	bls.n	800c868 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c862:	2302      	movs	r3, #2
 800c864:	613b      	str	r3, [r7, #16]
 800c866:	e013      	b.n	800c890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c868:	2301      	movs	r3, #1
 800c86a:	613b      	str	r3, [r7, #16]
 800c86c:	e010      	b.n	800c890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b80      	cmp	r3, #128	@ 0x80
 800c872:	d902      	bls.n	800c87a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c874:	2303      	movs	r3, #3
 800c876:	613b      	str	r3, [r7, #16]
 800c878:	e00a      	b.n	800c890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2b80      	cmp	r3, #128	@ 0x80
 800c87e:	d102      	bne.n	800c886 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c880:	2302      	movs	r3, #2
 800c882:	613b      	str	r3, [r7, #16]
 800c884:	e004      	b.n	800c890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2b70      	cmp	r3, #112	@ 0x70
 800c88a:	d101      	bne.n	800c890 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c88c:	2301      	movs	r3, #1
 800c88e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c890:	4b0b      	ldr	r3, [pc, #44]	@ (800c8c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f023 0207 	bic.w	r2, r3, #7
 800c898:	4909      	ldr	r1, [pc, #36]	@ (800c8c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	4313      	orrs	r3, r2
 800c89e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c8a0:	4b07      	ldr	r3, [pc, #28]	@ (800c8c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f003 0307 	and.w	r3, r3, #7
 800c8a8:	693a      	ldr	r2, [r7, #16]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d001      	beq.n	800c8b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e000      	b.n	800c8b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3718      	adds	r7, #24
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	40021000 	.word	0x40021000
 800c8c0:	40022000 	.word	0x40022000

0800c8c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b086      	sub	sp, #24
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d041      	beq.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c8e8:	d02a      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c8ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c8ee:	d824      	bhi.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c8f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c8f4:	d008      	beq.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c8f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c8fa:	d81e      	bhi.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00a      	beq.n	800c916 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c900:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c904:	d010      	beq.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c906:	e018      	b.n	800c93a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c908:	4b86      	ldr	r3, [pc, #536]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	4a85      	ldr	r2, [pc, #532]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c90e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c912:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c914:	e015      	b.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	3304      	adds	r3, #4
 800c91a:	2100      	movs	r1, #0
 800c91c:	4618      	mov	r0, r3
 800c91e:	f000 fabb 	bl	800ce98 <RCCEx_PLLSAI1_Config>
 800c922:	4603      	mov	r3, r0
 800c924:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c926:	e00c      	b.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	3320      	adds	r3, #32
 800c92c:	2100      	movs	r1, #0
 800c92e:	4618      	mov	r0, r3
 800c930:	f000 fba6 	bl	800d080 <RCCEx_PLLSAI2_Config>
 800c934:	4603      	mov	r3, r0
 800c936:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c938:	e003      	b.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c93a:	2301      	movs	r3, #1
 800c93c:	74fb      	strb	r3, [r7, #19]
      break;
 800c93e:	e000      	b.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c940:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c942:	7cfb      	ldrb	r3, [r7, #19]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d10b      	bne.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c948:	4b76      	ldr	r3, [pc, #472]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c94a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c94e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c956:	4973      	ldr	r1, [pc, #460]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c958:	4313      	orrs	r3, r2
 800c95a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800c95e:	e001      	b.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c960:	7cfb      	ldrb	r3, [r7, #19]
 800c962:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d041      	beq.n	800c9f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c974:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c978:	d02a      	beq.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800c97a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c97e:	d824      	bhi.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800c980:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c984:	d008      	beq.n	800c998 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c986:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c98a:	d81e      	bhi.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d00a      	beq.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800c990:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c994:	d010      	beq.n	800c9b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800c996:	e018      	b.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c998:	4b62      	ldr	r3, [pc, #392]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	4a61      	ldr	r2, [pc, #388]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c99e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c9a4:	e015      	b.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	3304      	adds	r3, #4
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f000 fa73 	bl	800ce98 <RCCEx_PLLSAI1_Config>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c9b6:	e00c      	b.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	3320      	adds	r3, #32
 800c9bc:	2100      	movs	r1, #0
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f000 fb5e 	bl	800d080 <RCCEx_PLLSAI2_Config>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c9c8:	e003      	b.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	74fb      	strb	r3, [r7, #19]
      break;
 800c9ce:	e000      	b.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800c9d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9d2:	7cfb      	ldrb	r3, [r7, #19]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10b      	bne.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c9d8:	4b52      	ldr	r3, [pc, #328]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c9e6:	494f      	ldr	r1, [pc, #316]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800c9ee:	e001      	b.n	800c9f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9f0:	7cfb      	ldrb	r3, [r7, #19]
 800c9f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f000 80a0 	beq.w	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ca02:	2300      	movs	r3, #0
 800ca04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ca06:	4b47      	ldr	r3, [pc, #284]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ca08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d101      	bne.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800ca12:	2301      	movs	r3, #1
 800ca14:	e000      	b.n	800ca18 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800ca16:	2300      	movs	r3, #0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00d      	beq.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ca1c:	4b41      	ldr	r3, [pc, #260]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ca1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca20:	4a40      	ldr	r2, [pc, #256]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ca22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca26:	6593      	str	r3, [r2, #88]	@ 0x58
 800ca28:	4b3e      	ldr	r3, [pc, #248]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ca2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca30:	60bb      	str	r3, [r7, #8]
 800ca32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ca34:	2301      	movs	r3, #1
 800ca36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ca38:	4b3b      	ldr	r3, [pc, #236]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a3a      	ldr	r2, [pc, #232]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ca3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ca42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ca44:	f7fb fcb0 	bl	80083a8 <HAL_GetTick>
 800ca48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ca4a:	e009      	b.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca4c:	f7fb fcac 	bl	80083a8 <HAL_GetTick>
 800ca50:	4602      	mov	r2, r0
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	1ad3      	subs	r3, r2, r3
 800ca56:	2b02      	cmp	r3, #2
 800ca58:	d902      	bls.n	800ca60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800ca5a:	2303      	movs	r3, #3
 800ca5c:	74fb      	strb	r3, [r7, #19]
        break;
 800ca5e:	e005      	b.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ca60:	4b31      	ldr	r3, [pc, #196]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d0ef      	beq.n	800ca4c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800ca6c:	7cfb      	ldrb	r3, [r7, #19]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d15c      	bne.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ca72:	4b2c      	ldr	r3, [pc, #176]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ca74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d01f      	beq.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca8a:	697a      	ldr	r2, [r7, #20]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d019      	beq.n	800cac4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ca90:	4b24      	ldr	r3, [pc, #144]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ca92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ca9c:	4b21      	ldr	r3, [pc, #132]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ca9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800caa2:	4a20      	ldr	r2, [pc, #128]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800caa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800caa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800caac:	4b1d      	ldr	r3, [pc, #116]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800caae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cab2:	4a1c      	ldr	r2, [pc, #112]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cab4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cabc:	4a19      	ldr	r2, [pc, #100]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	f003 0301 	and.w	r3, r3, #1
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d016      	beq.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cace:	f7fb fc6b 	bl	80083a8 <HAL_GetTick>
 800cad2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cad4:	e00b      	b.n	800caee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cad6:	f7fb fc67 	bl	80083a8 <HAL_GetTick>
 800cada:	4602      	mov	r2, r0
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	1ad3      	subs	r3, r2, r3
 800cae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d902      	bls.n	800caee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800cae8:	2303      	movs	r3, #3
 800caea:	74fb      	strb	r3, [r7, #19]
            break;
 800caec:	e006      	b.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800caee:	4b0d      	ldr	r3, [pc, #52]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800caf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800caf4:	f003 0302 	and.w	r3, r3, #2
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d0ec      	beq.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800cafc:	7cfb      	ldrb	r3, [r7, #19]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d10c      	bne.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cb02:	4b08      	ldr	r3, [pc, #32]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cb04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb12:	4904      	ldr	r1, [pc, #16]	@ (800cb24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800cb14:	4313      	orrs	r3, r2
 800cb16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800cb1a:	e009      	b.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cb1c:	7cfb      	ldrb	r3, [r7, #19]
 800cb1e:	74bb      	strb	r3, [r7, #18]
 800cb20:	e006      	b.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800cb22:	bf00      	nop
 800cb24:	40021000 	.word	0x40021000
 800cb28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb2c:	7cfb      	ldrb	r3, [r7, #19]
 800cb2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cb30:	7c7b      	ldrb	r3, [r7, #17]
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d105      	bne.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cb36:	4b9e      	ldr	r3, [pc, #632]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cb38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb3a:	4a9d      	ldr	r2, [pc, #628]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cb3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cb40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f003 0301 	and.w	r3, r3, #1
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00a      	beq.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cb4e:	4b98      	ldr	r3, [pc, #608]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cb50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb54:	f023 0203 	bic.w	r2, r3, #3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb5c:	4994      	ldr	r1, [pc, #592]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 0302 	and.w	r3, r3, #2
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00a      	beq.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cb70:	4b8f      	ldr	r3, [pc, #572]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cb72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb76:	f023 020c 	bic.w	r2, r3, #12
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb7e:	498c      	ldr	r1, [pc, #560]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cb80:	4313      	orrs	r3, r2
 800cb82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f003 0304 	and.w	r3, r3, #4
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00a      	beq.n	800cba8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cb92:	4b87      	ldr	r3, [pc, #540]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cb94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cba0:	4983      	ldr	r1, [pc, #524]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cba2:	4313      	orrs	r3, r2
 800cba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f003 0308 	and.w	r3, r3, #8
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00a      	beq.n	800cbca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cbb4:	4b7e      	ldr	r3, [pc, #504]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cbb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbc2:	497b      	ldr	r1, [pc, #492]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f003 0310 	and.w	r3, r3, #16
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00a      	beq.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cbd6:	4b76      	ldr	r3, [pc, #472]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cbd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbe4:	4972      	ldr	r1, [pc, #456]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f003 0320 	and.w	r3, r3, #32
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00a      	beq.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cbf8:	4b6d      	ldr	r3, [pc, #436]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cbfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbfe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc06:	496a      	ldr	r1, [pc, #424]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00a      	beq.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cc1a:	4b65      	ldr	r3, [pc, #404]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cc1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc28:	4961      	ldr	r1, [pc, #388]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00a      	beq.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cc3c:	4b5c      	ldr	r3, [pc, #368]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cc3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cc4a:	4959      	ldr	r1, [pc, #356]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00a      	beq.n	800cc74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cc5e:	4b54      	ldr	r3, [pc, #336]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cc60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc64:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc6c:	4950      	ldr	r1, [pc, #320]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00a      	beq.n	800cc96 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cc80:	4b4b      	ldr	r3, [pc, #300]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cc82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc86:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc8e:	4948      	ldr	r1, [pc, #288]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cc90:	4313      	orrs	r3, r2
 800cc92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d00a      	beq.n	800ccb8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cca2:	4b43      	ldr	r3, [pc, #268]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cca8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccb0:	493f      	ldr	r1, [pc, #252]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d028      	beq.n	800cd16 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ccc4:	4b3a      	ldr	r3, [pc, #232]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ccc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccd2:	4937      	ldr	r1, [pc, #220]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cce2:	d106      	bne.n	800ccf2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cce4:	4b32      	ldr	r3, [pc, #200]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	4a31      	ldr	r2, [pc, #196]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ccea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ccee:	60d3      	str	r3, [r2, #12]
 800ccf0:	e011      	b.n	800cd16 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccf6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ccfa:	d10c      	bne.n	800cd16 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	3304      	adds	r3, #4
 800cd00:	2101      	movs	r1, #1
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 f8c8 	bl	800ce98 <RCCEx_PLLSAI1_Config>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800cd0c:	7cfb      	ldrb	r3, [r7, #19]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d001      	beq.n	800cd16 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800cd12:	7cfb      	ldrb	r3, [r7, #19]
 800cd14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d028      	beq.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800cd22:	4b23      	ldr	r3, [pc, #140]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cd24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd28:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd30:	491f      	ldr	r1, [pc, #124]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cd32:	4313      	orrs	r3, r2
 800cd34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd40:	d106      	bne.n	800cd50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cd42:	4b1b      	ldr	r3, [pc, #108]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	4a1a      	ldr	r2, [pc, #104]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cd48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd4c:	60d3      	str	r3, [r2, #12]
 800cd4e:	e011      	b.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cd58:	d10c      	bne.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	3304      	adds	r3, #4
 800cd5e:	2101      	movs	r1, #1
 800cd60:	4618      	mov	r0, r3
 800cd62:	f000 f899 	bl	800ce98 <RCCEx_PLLSAI1_Config>
 800cd66:	4603      	mov	r3, r0
 800cd68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800cd6a:	7cfb      	ldrb	r3, [r7, #19]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d001      	beq.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800cd70:	7cfb      	ldrb	r3, [r7, #19]
 800cd72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d02b      	beq.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cd80:	4b0b      	ldr	r3, [pc, #44]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cd82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd8e:	4908      	ldr	r1, [pc, #32]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cd90:	4313      	orrs	r3, r2
 800cd92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd9e:	d109      	bne.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cda0:	4b03      	ldr	r3, [pc, #12]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	4a02      	ldr	r2, [pc, #8]	@ (800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800cda6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cdaa:	60d3      	str	r3, [r2, #12]
 800cdac:	e014      	b.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800cdae:	bf00      	nop
 800cdb0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cdbc:	d10c      	bne.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	3304      	adds	r3, #4
 800cdc2:	2101      	movs	r1, #1
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f000 f867 	bl	800ce98 <RCCEx_PLLSAI1_Config>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800cdce:	7cfb      	ldrb	r3, [r7, #19]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d001      	beq.n	800cdd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800cdd4:	7cfb      	ldrb	r3, [r7, #19]
 800cdd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d02f      	beq.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cde4:	4b2b      	ldr	r3, [pc, #172]	@ (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800cde6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cdf2:	4928      	ldr	r1, [pc, #160]	@ (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cdfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce02:	d10d      	bne.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	3304      	adds	r3, #4
 800ce08:	2102      	movs	r1, #2
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 f844 	bl	800ce98 <RCCEx_PLLSAI1_Config>
 800ce10:	4603      	mov	r3, r0
 800ce12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ce14:	7cfb      	ldrb	r3, [r7, #19]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d014      	beq.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800ce1a:	7cfb      	ldrb	r3, [r7, #19]
 800ce1c:	74bb      	strb	r3, [r7, #18]
 800ce1e:	e011      	b.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce28:	d10c      	bne.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	3320      	adds	r3, #32
 800ce2e:	2102      	movs	r1, #2
 800ce30:	4618      	mov	r0, r3
 800ce32:	f000 f925 	bl	800d080 <RCCEx_PLLSAI2_Config>
 800ce36:	4603      	mov	r3, r0
 800ce38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ce3a:	7cfb      	ldrb	r3, [r7, #19]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d001      	beq.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800ce40:	7cfb      	ldrb	r3, [r7, #19]
 800ce42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00a      	beq.n	800ce66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ce50:	4b10      	ldr	r3, [pc, #64]	@ (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ce52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce56:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ce5e:	490d      	ldr	r1, [pc, #52]	@ (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ce60:	4313      	orrs	r3, r2
 800ce62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00b      	beq.n	800ce8a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ce72:	4b08      	ldr	r3, [pc, #32]	@ (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ce74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce82:	4904      	ldr	r1, [pc, #16]	@ (800ce94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ce84:	4313      	orrs	r3, r2
 800ce86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800ce8a:	7cbb      	ldrb	r3, [r7, #18]
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3718      	adds	r7, #24
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	40021000 	.word	0x40021000

0800ce98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cea2:	2300      	movs	r3, #0
 800cea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cea6:	4b75      	ldr	r3, [pc, #468]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	f003 0303 	and.w	r3, r3, #3
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d018      	beq.n	800cee4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ceb2:	4b72      	ldr	r3, [pc, #456]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	f003 0203 	and.w	r2, r3, #3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d10d      	bne.n	800cede <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
       ||
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d009      	beq.n	800cede <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800ceca:	4b6c      	ldr	r3, [pc, #432]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	091b      	lsrs	r3, r3, #4
 800ced0:	f003 0307 	and.w	r3, r3, #7
 800ced4:	1c5a      	adds	r2, r3, #1
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	685b      	ldr	r3, [r3, #4]
       ||
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d047      	beq.n	800cf6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cede:	2301      	movs	r3, #1
 800cee0:	73fb      	strb	r3, [r7, #15]
 800cee2:	e044      	b.n	800cf6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2b03      	cmp	r3, #3
 800ceea:	d018      	beq.n	800cf1e <RCCEx_PLLSAI1_Config+0x86>
 800ceec:	2b03      	cmp	r3, #3
 800ceee:	d825      	bhi.n	800cf3c <RCCEx_PLLSAI1_Config+0xa4>
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d002      	beq.n	800cefa <RCCEx_PLLSAI1_Config+0x62>
 800cef4:	2b02      	cmp	r3, #2
 800cef6:	d009      	beq.n	800cf0c <RCCEx_PLLSAI1_Config+0x74>
 800cef8:	e020      	b.n	800cf3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cefa:	4b60      	ldr	r3, [pc, #384]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f003 0302 	and.w	r3, r3, #2
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d11d      	bne.n	800cf42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800cf06:	2301      	movs	r3, #1
 800cf08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cf0a:	e01a      	b.n	800cf42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cf0c:	4b5b      	ldr	r3, [pc, #364]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d116      	bne.n	800cf46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cf1c:	e013      	b.n	800cf46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cf1e:	4b57      	ldr	r3, [pc, #348]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d10f      	bne.n	800cf4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cf2a:	4b54      	ldr	r3, [pc, #336]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d109      	bne.n	800cf4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800cf36:	2301      	movs	r3, #1
 800cf38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cf3a:	e006      	b.n	800cf4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf40:	e004      	b.n	800cf4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cf42:	bf00      	nop
 800cf44:	e002      	b.n	800cf4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cf46:	bf00      	nop
 800cf48:	e000      	b.n	800cf4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cf4a:	bf00      	nop
    }

    if(status == HAL_OK)
 800cf4c:	7bfb      	ldrb	r3, [r7, #15]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10d      	bne.n	800cf6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800cf52:	4b4a      	ldr	r3, [pc, #296]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6819      	ldr	r1, [r3, #0]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	3b01      	subs	r3, #1
 800cf64:	011b      	lsls	r3, r3, #4
 800cf66:	430b      	orrs	r3, r1
 800cf68:	4944      	ldr	r1, [pc, #272]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800cf6e:	7bfb      	ldrb	r3, [r7, #15]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d17d      	bne.n	800d070 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800cf74:	4b41      	ldr	r3, [pc, #260]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a40      	ldr	r2, [pc, #256]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cf7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cf7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf80:	f7fb fa12 	bl	80083a8 <HAL_GetTick>
 800cf84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cf86:	e009      	b.n	800cf9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cf88:	f7fb fa0e 	bl	80083a8 <HAL_GetTick>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	d902      	bls.n	800cf9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800cf96:	2303      	movs	r3, #3
 800cf98:	73fb      	strb	r3, [r7, #15]
        break;
 800cf9a:	e005      	b.n	800cfa8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cf9c:	4b37      	ldr	r3, [pc, #220]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d1ef      	bne.n	800cf88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800cfa8:	7bfb      	ldrb	r3, [r7, #15]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d160      	bne.n	800d070 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d111      	bne.n	800cfd8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cfb4:	4b31      	ldr	r3, [pc, #196]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800cfbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	6892      	ldr	r2, [r2, #8]
 800cfc4:	0211      	lsls	r1, r2, #8
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	68d2      	ldr	r2, [r2, #12]
 800cfca:	0912      	lsrs	r2, r2, #4
 800cfcc:	0452      	lsls	r2, r2, #17
 800cfce:	430a      	orrs	r2, r1
 800cfd0:	492a      	ldr	r1, [pc, #168]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	610b      	str	r3, [r1, #16]
 800cfd6:	e027      	b.n	800d028 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d112      	bne.n	800d004 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cfde:	4b27      	ldr	r3, [pc, #156]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cfe0:	691b      	ldr	r3, [r3, #16]
 800cfe2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800cfe6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	6892      	ldr	r2, [r2, #8]
 800cfee:	0211      	lsls	r1, r2, #8
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	6912      	ldr	r2, [r2, #16]
 800cff4:	0852      	lsrs	r2, r2, #1
 800cff6:	3a01      	subs	r2, #1
 800cff8:	0552      	lsls	r2, r2, #21
 800cffa:	430a      	orrs	r2, r1
 800cffc:	491f      	ldr	r1, [pc, #124]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cffe:	4313      	orrs	r3, r2
 800d000:	610b      	str	r3, [r1, #16]
 800d002:	e011      	b.n	800d028 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d004:	4b1d      	ldr	r3, [pc, #116]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800d00c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	6892      	ldr	r2, [r2, #8]
 800d014:	0211      	lsls	r1, r2, #8
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	6952      	ldr	r2, [r2, #20]
 800d01a:	0852      	lsrs	r2, r2, #1
 800d01c:	3a01      	subs	r2, #1
 800d01e:	0652      	lsls	r2, r2, #25
 800d020:	430a      	orrs	r2, r1
 800d022:	4916      	ldr	r1, [pc, #88]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d024:	4313      	orrs	r3, r2
 800d026:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d028:	4b14      	ldr	r3, [pc, #80]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a13      	ldr	r2, [pc, #76]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d02e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d032:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d034:	f7fb f9b8 	bl	80083a8 <HAL_GetTick>
 800d038:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d03a:	e009      	b.n	800d050 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d03c:	f7fb f9b4 	bl	80083a8 <HAL_GetTick>
 800d040:	4602      	mov	r2, r0
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	2b02      	cmp	r3, #2
 800d048:	d902      	bls.n	800d050 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800d04a:	2303      	movs	r3, #3
 800d04c:	73fb      	strb	r3, [r7, #15]
          break;
 800d04e:	e005      	b.n	800d05c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d050:	4b0a      	ldr	r3, [pc, #40]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d0ef      	beq.n	800d03c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800d05c:	7bfb      	ldrb	r3, [r7, #15]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d106      	bne.n	800d070 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d062:	4b06      	ldr	r3, [pc, #24]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d064:	691a      	ldr	r2, [r3, #16]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	4904      	ldr	r1, [pc, #16]	@ (800d07c <RCCEx_PLLSAI1_Config+0x1e4>)
 800d06c:	4313      	orrs	r3, r2
 800d06e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d070:	7bfb      	ldrb	r3, [r7, #15]
}
 800d072:	4618      	mov	r0, r3
 800d074:	3710      	adds	r7, #16
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}
 800d07a:	bf00      	nop
 800d07c:	40021000 	.word	0x40021000

0800d080 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d08a:	2300      	movs	r3, #0
 800d08c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d08e:	4b6a      	ldr	r3, [pc, #424]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	f003 0303 	and.w	r3, r3, #3
 800d096:	2b00      	cmp	r3, #0
 800d098:	d018      	beq.n	800d0cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800d09a:	4b67      	ldr	r3, [pc, #412]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	f003 0203 	and.w	r2, r3, #3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d10d      	bne.n	800d0c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
       ||
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d009      	beq.n	800d0c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800d0b2:	4b61      	ldr	r3, [pc, #388]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	091b      	lsrs	r3, r3, #4
 800d0b8:	f003 0307 	and.w	r3, r3, #7
 800d0bc:	1c5a      	adds	r2, r3, #1
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	685b      	ldr	r3, [r3, #4]
       ||
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d047      	beq.n	800d156 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	73fb      	strb	r3, [r7, #15]
 800d0ca:	e044      	b.n	800d156 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	2b03      	cmp	r3, #3
 800d0d2:	d018      	beq.n	800d106 <RCCEx_PLLSAI2_Config+0x86>
 800d0d4:	2b03      	cmp	r3, #3
 800d0d6:	d825      	bhi.n	800d124 <RCCEx_PLLSAI2_Config+0xa4>
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d002      	beq.n	800d0e2 <RCCEx_PLLSAI2_Config+0x62>
 800d0dc:	2b02      	cmp	r3, #2
 800d0de:	d009      	beq.n	800d0f4 <RCCEx_PLLSAI2_Config+0x74>
 800d0e0:	e020      	b.n	800d124 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d0e2:	4b55      	ldr	r3, [pc, #340]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f003 0302 	and.w	r3, r3, #2
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d11d      	bne.n	800d12a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d0f2:	e01a      	b.n	800d12a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d0f4:	4b50      	ldr	r3, [pc, #320]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d116      	bne.n	800d12e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800d100:	2301      	movs	r3, #1
 800d102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d104:	e013      	b.n	800d12e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d106:	4b4c      	ldr	r3, [pc, #304]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d10f      	bne.n	800d132 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d112:	4b49      	ldr	r3, [pc, #292]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d109      	bne.n	800d132 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d122:	e006      	b.n	800d132 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d124:	2301      	movs	r3, #1
 800d126:	73fb      	strb	r3, [r7, #15]
      break;
 800d128:	e004      	b.n	800d134 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d12a:	bf00      	nop
 800d12c:	e002      	b.n	800d134 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d12e:	bf00      	nop
 800d130:	e000      	b.n	800d134 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800d132:	bf00      	nop
    }

    if(status == HAL_OK)
 800d134:	7bfb      	ldrb	r3, [r7, #15]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10d      	bne.n	800d156 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d13a:	4b3f      	ldr	r3, [pc, #252]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6819      	ldr	r1, [r3, #0]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	3b01      	subs	r3, #1
 800d14c:	011b      	lsls	r3, r3, #4
 800d14e:	430b      	orrs	r3, r1
 800d150:	4939      	ldr	r1, [pc, #228]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d152:	4313      	orrs	r3, r2
 800d154:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d156:	7bfb      	ldrb	r3, [r7, #15]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d167      	bne.n	800d22c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d15c:	4b36      	ldr	r3, [pc, #216]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a35      	ldr	r2, [pc, #212]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d162:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d168:	f7fb f91e 	bl	80083a8 <HAL_GetTick>
 800d16c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d16e:	e009      	b.n	800d184 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d170:	f7fb f91a 	bl	80083a8 <HAL_GetTick>
 800d174:	4602      	mov	r2, r0
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d902      	bls.n	800d184 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d17e:	2303      	movs	r3, #3
 800d180:	73fb      	strb	r3, [r7, #15]
        break;
 800d182:	e005      	b.n	800d190 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d184:	4b2c      	ldr	r3, [pc, #176]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d1ef      	bne.n	800d170 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d190:	7bfb      	ldrb	r3, [r7, #15]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d14a      	bne.n	800d22c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d111      	bne.n	800d1c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d19c:	4b26      	ldr	r3, [pc, #152]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d19e:	695b      	ldr	r3, [r3, #20]
 800d1a0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800d1a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	6892      	ldr	r2, [r2, #8]
 800d1ac:	0211      	lsls	r1, r2, #8
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	68d2      	ldr	r2, [r2, #12]
 800d1b2:	0912      	lsrs	r2, r2, #4
 800d1b4:	0452      	lsls	r2, r2, #17
 800d1b6:	430a      	orrs	r2, r1
 800d1b8:	491f      	ldr	r1, [pc, #124]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	614b      	str	r3, [r1, #20]
 800d1be:	e011      	b.n	800d1e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d1c0:	4b1d      	ldr	r3, [pc, #116]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d1c2:	695b      	ldr	r3, [r3, #20]
 800d1c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800d1c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	6892      	ldr	r2, [r2, #8]
 800d1d0:	0211      	lsls	r1, r2, #8
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	6912      	ldr	r2, [r2, #16]
 800d1d6:	0852      	lsrs	r2, r2, #1
 800d1d8:	3a01      	subs	r2, #1
 800d1da:	0652      	lsls	r2, r2, #25
 800d1dc:	430a      	orrs	r2, r1
 800d1de:	4916      	ldr	r1, [pc, #88]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d1e4:	4b14      	ldr	r3, [pc, #80]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a13      	ldr	r2, [pc, #76]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d1ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d1ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1f0:	f7fb f8da 	bl	80083a8 <HAL_GetTick>
 800d1f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d1f6:	e009      	b.n	800d20c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d1f8:	f7fb f8d6 	bl	80083a8 <HAL_GetTick>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	1ad3      	subs	r3, r2, r3
 800d202:	2b02      	cmp	r3, #2
 800d204:	d902      	bls.n	800d20c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800d206:	2303      	movs	r3, #3
 800d208:	73fb      	strb	r3, [r7, #15]
          break;
 800d20a:	e005      	b.n	800d218 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d20c:	4b0a      	ldr	r3, [pc, #40]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d0ef      	beq.n	800d1f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800d218:	7bfb      	ldrb	r3, [r7, #15]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d106      	bne.n	800d22c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800d21e:	4b06      	ldr	r3, [pc, #24]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d220:	695a      	ldr	r2, [r3, #20]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	695b      	ldr	r3, [r3, #20]
 800d226:	4904      	ldr	r1, [pc, #16]	@ (800d238 <RCCEx_PLLSAI2_Config+0x1b8>)
 800d228:	4313      	orrs	r3, r2
 800d22a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	40021000 	.word	0x40021000

0800d23c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d244:	2301      	movs	r3, #1
 800d246:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d079      	beq.n	800d342 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d254:	b2db      	uxtb	r3, r3
 800d256:	2b00      	cmp	r3, #0
 800d258:	d106      	bne.n	800d268 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7f7 fb5a 	bl	800491c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2202      	movs	r2, #2
 800d26c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	f003 0310 	and.w	r3, r3, #16
 800d27a:	2b10      	cmp	r3, #16
 800d27c:	d058      	beq.n	800d330 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	22ca      	movs	r2, #202	@ 0xca
 800d284:	625a      	str	r2, [r3, #36]	@ 0x24
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	2253      	movs	r2, #83	@ 0x53
 800d28c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 fb82 	bl	800d998 <RTC_EnterInitMode>
 800d294:	4603      	mov	r3, r0
 800d296:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800d298:	7bfb      	ldrb	r3, [r7, #15]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d127      	bne.n	800d2ee <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	6812      	ldr	r2, [r2, #0]
 800d2a8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d2ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2b0:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	6899      	ldr	r1, [r3, #8]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	685a      	ldr	r2, [r3, #4]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	691b      	ldr	r3, [r3, #16]
 800d2c0:	431a      	orrs	r2, r3
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	699b      	ldr	r3, [r3, #24]
 800d2c6:	431a      	orrs	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	430a      	orrs	r2, r1
 800d2ce:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	68d2      	ldr	r2, [r2, #12]
 800d2d8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	6919      	ldr	r1, [r3, #16]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	041a      	lsls	r2, r3, #16
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	430a      	orrs	r2, r1
 800d2ec:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 fb86 	bl	800da00 <RTC_ExitInitMode>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800d2f8:	7bfb      	ldrb	r3, [r7, #15]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d113      	bne.n	800d326 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f022 0203 	bic.w	r2, r2, #3
 800d30c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	69da      	ldr	r2, [r3, #28]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	695b      	ldr	r3, [r3, #20]
 800d31c:	431a      	orrs	r2, r3
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	430a      	orrs	r2, r1
 800d324:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	22ff      	movs	r2, #255	@ 0xff
 800d32c:	625a      	str	r2, [r3, #36]	@ 0x24
 800d32e:	e001      	b.n	800d334 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d330:	2300      	movs	r3, #0
 800d332:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d334:	7bfb      	ldrb	r3, [r7, #15]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d103      	bne.n	800d342 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2201      	movs	r2, #1
 800d33e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800d342:	7bfb      	ldrb	r3, [r7, #15]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3710      	adds	r7, #16
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d34c:	b590      	push	{r4, r7, lr}
 800d34e:	b087      	sub	sp, #28
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d101      	bne.n	800d366 <HAL_RTC_SetTime+0x1a>
 800d362:	2302      	movs	r3, #2
 800d364:	e08b      	b.n	800d47e <HAL_RTC_SetTime+0x132>
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2201      	movs	r2, #1
 800d36a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2202      	movs	r2, #2
 800d372:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	22ca      	movs	r2, #202	@ 0xca
 800d37c:	625a      	str	r2, [r3, #36]	@ 0x24
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2253      	movs	r2, #83	@ 0x53
 800d384:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d386:	68f8      	ldr	r0, [r7, #12]
 800d388:	f000 fb06 	bl	800d998 <RTC_EnterInitMode>
 800d38c:	4603      	mov	r3, r0
 800d38e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d390:	7cfb      	ldrb	r3, [r7, #19]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d163      	bne.n	800d45e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d126      	bne.n	800d3ea <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d102      	bne.n	800d3b0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f000 fb61 	bl	800da7c <RTC_ByteToBcd2>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	785b      	ldrb	r3, [r3, #1]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f000 fb5a 	bl	800da7c <RTC_ByteToBcd2>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d3cc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	789b      	ldrb	r3, [r3, #2]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f000 fb52 	bl	800da7c <RTC_ByteToBcd2>
 800d3d8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d3da:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	78db      	ldrb	r3, [r3, #3]
 800d3e2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	617b      	str	r3, [r7, #20]
 800d3e8:	e018      	b.n	800d41c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	689b      	ldr	r3, [r3, #8]
 800d3f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d102      	bne.n	800d3fe <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	785b      	ldrb	r3, [r3, #1]
 800d408:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d40a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d40c:	68ba      	ldr	r2, [r7, #8]
 800d40e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d410:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	78db      	ldrb	r3, [r3, #3]
 800d416:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d418:	4313      	orrs	r3, r2
 800d41a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800d426:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800d42a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	689a      	ldr	r2, [r3, #8]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d43a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	6899      	ldr	r1, [r3, #8]
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	68da      	ldr	r2, [r3, #12]
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	691b      	ldr	r3, [r3, #16]
 800d44a:	431a      	orrs	r2, r3
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	430a      	orrs	r2, r1
 800d452:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f000 fad3 	bl	800da00 <RTC_ExitInitMode>
 800d45a:	4603      	mov	r3, r0
 800d45c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	22ff      	movs	r2, #255	@ 0xff
 800d464:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800d466:	7cfb      	ldrb	r3, [r7, #19]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d103      	bne.n	800d474 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2201      	movs	r2, #1
 800d470:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2200      	movs	r2, #0
 800d478:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d47c:	7cfb      	ldrb	r3, [r7, #19]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	371c      	adds	r7, #28
 800d482:	46bd      	mov	sp, r7
 800d484:	bd90      	pop	{r4, r7, pc}

0800d486 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b086      	sub	sp, #24
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	60f8      	str	r0, [r7, #12]
 800d48e:	60b9      	str	r1, [r7, #8]
 800d490:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	691b      	ldr	r3, [r3, #16]
 800d4a2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800d4b4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800d4b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	0c1b      	lsrs	r3, r3, #16
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d4c4:	b2da      	uxtb	r2, r3
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	0a1b      	lsrs	r3, r3, #8
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	0d9b      	lsrs	r3, r3, #22
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	f003 0301 	and.w	r3, r3, #1
 800d4f2:	b2da      	uxtb	r2, r3
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d11a      	bne.n	800d534 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	4618      	mov	r0, r3
 800d504:	f000 fada 	bl	800dabc <RTC_Bcd2ToByte>
 800d508:	4603      	mov	r3, r0
 800d50a:	461a      	mov	r2, r3
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	785b      	ldrb	r3, [r3, #1]
 800d514:	4618      	mov	r0, r3
 800d516:	f000 fad1 	bl	800dabc <RTC_Bcd2ToByte>
 800d51a:	4603      	mov	r3, r0
 800d51c:	461a      	mov	r2, r3
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	789b      	ldrb	r3, [r3, #2]
 800d526:	4618      	mov	r0, r3
 800d528:	f000 fac8 	bl	800dabc <RTC_Bcd2ToByte>
 800d52c:	4603      	mov	r3, r0
 800d52e:	461a      	mov	r2, r3
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	3718      	adds	r7, #24
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d53e:	b590      	push	{r4, r7, lr}
 800d540:	b087      	sub	sp, #28
 800d542:	af00      	add	r7, sp, #0
 800d544:	60f8      	str	r0, [r7, #12]
 800d546:	60b9      	str	r1, [r7, #8]
 800d548:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d101      	bne.n	800d558 <HAL_RTC_SetDate+0x1a>
 800d554:	2302      	movs	r3, #2
 800d556:	e075      	b.n	800d644 <HAL_RTC_SetDate+0x106>
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2201      	movs	r2, #1
 800d55c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2202      	movs	r2, #2
 800d564:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d10e      	bne.n	800d58c <HAL_RTC_SetDate+0x4e>
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	785b      	ldrb	r3, [r3, #1]
 800d572:	f003 0310 	and.w	r3, r3, #16
 800d576:	2b00      	cmp	r3, #0
 800d578:	d008      	beq.n	800d58c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	785b      	ldrb	r3, [r3, #1]
 800d57e:	f023 0310 	bic.w	r3, r3, #16
 800d582:	b2db      	uxtb	r3, r3
 800d584:	330a      	adds	r3, #10
 800d586:	b2da      	uxtb	r2, r3
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d11c      	bne.n	800d5cc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	78db      	ldrb	r3, [r3, #3]
 800d596:	4618      	mov	r0, r3
 800d598:	f000 fa70 	bl	800da7c <RTC_ByteToBcd2>
 800d59c:	4603      	mov	r3, r0
 800d59e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	785b      	ldrb	r3, [r3, #1]
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f000 fa69 	bl	800da7c <RTC_ByteToBcd2>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d5ae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	789b      	ldrb	r3, [r3, #2]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f000 fa61 	bl	800da7c <RTC_ByteToBcd2>
 800d5ba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d5bc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	617b      	str	r3, [r7, #20]
 800d5ca:	e00e      	b.n	800d5ea <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	78db      	ldrb	r3, [r3, #3]
 800d5d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	785b      	ldrb	r3, [r3, #1]
 800d5d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d5d8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800d5de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	22ca      	movs	r2, #202	@ 0xca
 800d5f0:	625a      	str	r2, [r3, #36]	@ 0x24
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2253      	movs	r2, #83	@ 0x53
 800d5f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f000 f9cc 	bl	800d998 <RTC_EnterInitMode>
 800d600:	4603      	mov	r3, r0
 800d602:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d604:	7cfb      	ldrb	r3, [r7, #19]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d10c      	bne.n	800d624 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d614:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d618:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	f000 f9f0 	bl	800da00 <RTC_ExitInitMode>
 800d620:	4603      	mov	r3, r0
 800d622:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	22ff      	movs	r2, #255	@ 0xff
 800d62a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800d62c:	7cfb      	ldrb	r3, [r7, #19]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d103      	bne.n	800d63a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2201      	movs	r2, #1
 800d636:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2200      	movs	r2, #0
 800d63e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d642:	7cfb      	ldrb	r3, [r7, #19]
}
 800d644:	4618      	mov	r0, r3
 800d646:	371c      	adds	r7, #28
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd90      	pop	{r4, r7, pc}

0800d64c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800d64c:	b590      	push	{r4, r7, lr}
 800d64e:	b089      	sub	sp, #36	@ 0x24
 800d650:	af00      	add	r7, sp, #0
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	60b9      	str	r1, [r7, #8]
 800d656:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d101      	bne.n	800d666 <HAL_RTC_SetAlarm_IT+0x1a>
 800d662:	2302      	movs	r3, #2
 800d664:	e127      	b.n	800d8b6 <HAL_RTC_SetAlarm_IT+0x26a>
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2201      	movs	r2, #1
 800d66a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2202      	movs	r2, #2
 800d672:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d137      	bne.n	800d6ec <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d686:	2b00      	cmp	r3, #0
 800d688:	d102      	bne.n	800d690 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	2200      	movs	r2, #0
 800d68e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	4618      	mov	r0, r3
 800d696:	f000 f9f1 	bl	800da7c <RTC_ByteToBcd2>
 800d69a:	4603      	mov	r3, r0
 800d69c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	785b      	ldrb	r3, [r3, #1]
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f000 f9ea 	bl	800da7c <RTC_ByteToBcd2>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800d6ac:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	789b      	ldrb	r3, [r3, #2]
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f000 f9e2 	bl	800da7c <RTC_ByteToBcd2>
 800d6b8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800d6ba:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	78db      	ldrb	r3, [r3, #3]
 800d6c2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800d6c4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f000 f9d4 	bl	800da7c <RTC_ByteToBcd2>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800d6d8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800d6e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	61fb      	str	r3, [r7, #28]
 800d6ea:	e023      	b.n	800d734 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	689b      	ldr	r3, [r3, #8]
 800d6f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d102      	bne.n	800d700 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	785b      	ldrb	r3, [r3, #1]
 800d70a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800d70c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800d70e:	68ba      	ldr	r2, [r7, #8]
 800d710:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800d712:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	78db      	ldrb	r3, [r3, #3]
 800d718:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800d71a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d722:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800d724:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800d72a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800d730:	4313      	orrs	r3, r2
 800d732:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	685a      	ldr	r2, [r3, #4]
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	69db      	ldr	r3, [r3, #28]
 800d73c:	4313      	orrs	r3, r2
 800d73e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	22ca      	movs	r2, #202	@ 0xca
 800d746:	625a      	str	r2, [r3, #36]	@ 0x24
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2253      	movs	r2, #83	@ 0x53
 800d74e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d758:	d14a      	bne.n	800d7f0 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	689a      	ldr	r2, [r3, #8]
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d768:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	b2da      	uxtb	r2, r3
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800d77a:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800d77c:	f7fa fe14 	bl	80083a8 <HAL_GetTick>
 800d780:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800d782:	e015      	b.n	800d7b0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d784:	f7fa fe10 	bl	80083a8 <HAL_GetTick>
 800d788:	4602      	mov	r2, r0
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	1ad3      	subs	r3, r2, r3
 800d78e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d792:	d90d      	bls.n	800d7b0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	22ff      	movs	r2, #255	@ 0xff
 800d79a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2203      	movs	r2, #3
 800d7a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800d7ac:	2303      	movs	r3, #3
 800d7ae:	e082      	b.n	800d8b6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	68db      	ldr	r3, [r3, #12]
 800d7b6:	f003 0301 	and.w	r3, r3, #1
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d0e2      	beq.n	800d784 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	69fa      	ldr	r2, [r7, #28]
 800d7c4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	69ba      	ldr	r2, [r7, #24]
 800d7cc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	689a      	ldr	r2, [r3, #8]
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d7dc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	689a      	ldr	r2, [r3, #8]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d7ec:	609a      	str	r2, [r3, #8]
 800d7ee:	e049      	b.n	800d884 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	689a      	ldr	r2, [r3, #8]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800d7fe:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	68db      	ldr	r3, [r3, #12]
 800d806:	b2da      	uxtb	r2, r3
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800d810:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800d812:	f7fa fdc9 	bl	80083a8 <HAL_GetTick>
 800d816:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800d818:	e015      	b.n	800d846 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d81a:	f7fa fdc5 	bl	80083a8 <HAL_GetTick>
 800d81e:	4602      	mov	r2, r0
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	1ad3      	subs	r3, r2, r3
 800d824:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d828:	d90d      	bls.n	800d846 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	22ff      	movs	r2, #255	@ 0xff
 800d830:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2203      	movs	r2, #3
 800d836:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800d842:	2303      	movs	r3, #3
 800d844:	e037      	b.n	800d8b6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	f003 0302 	and.w	r3, r3, #2
 800d850:	2b00      	cmp	r3, #0
 800d852:	d0e2      	beq.n	800d81a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	69fa      	ldr	r2, [r7, #28]
 800d85a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	69ba      	ldr	r2, [r7, #24]
 800d862:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	689a      	ldr	r2, [r3, #8]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d872:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	689a      	ldr	r2, [r3, #8]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d882:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800d884:	4b0e      	ldr	r3, [pc, #56]	@ (800d8c0 <HAL_RTC_SetAlarm_IT+0x274>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a0d      	ldr	r2, [pc, #52]	@ (800d8c0 <HAL_RTC_SetAlarm_IT+0x274>)
 800d88a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d88e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800d890:	4b0b      	ldr	r3, [pc, #44]	@ (800d8c0 <HAL_RTC_SetAlarm_IT+0x274>)
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	4a0a      	ldr	r2, [pc, #40]	@ (800d8c0 <HAL_RTC_SetAlarm_IT+0x274>)
 800d896:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d89a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	22ff      	movs	r2, #255	@ 0xff
 800d8a2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3724      	adds	r7, #36	@ 0x24
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd90      	pop	{r4, r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	40010400 	.word	0x40010400

0800d8c4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d8cc:	4b1f      	ldr	r3, [pc, #124]	@ (800d94c <HAL_RTC_AlarmIRQHandler+0x88>)
 800d8ce:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800d8d2:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	689b      	ldr	r3, [r3, #8]
 800d8da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d012      	beq.n	800d908 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68db      	ldr	r3, [r3, #12]
 800d8e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d00b      	beq.n	800d908 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	b2da      	uxtb	r2, r3
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800d900:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7f3 ff78 	bl	80017f8 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	689b      	ldr	r3, [r3, #8]
 800d90e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d912:	2b00      	cmp	r3, #0
 800d914:	d012      	beq.n	800d93c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	68db      	ldr	r3, [r3, #12]
 800d91c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d920:	2b00      	cmp	r3, #0
 800d922:	d00b      	beq.n	800d93c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68db      	ldr	r3, [r3, #12]
 800d92a:	b2da      	uxtb	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800d934:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 f8da 	bl	800daf0 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2201      	movs	r2, #1
 800d940:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800d944:	bf00      	nop
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	40010400 	.word	0x40010400

0800d950 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a0d      	ldr	r2, [pc, #52]	@ (800d994 <HAL_RTC_WaitForSynchro+0x44>)
 800d95e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800d960:	f7fa fd22 	bl	80083a8 <HAL_GetTick>
 800d964:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d966:	e009      	b.n	800d97c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d968:	f7fa fd1e 	bl	80083a8 <HAL_GetTick>
 800d96c:	4602      	mov	r2, r0
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	1ad3      	subs	r3, r2, r3
 800d972:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d976:	d901      	bls.n	800d97c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800d978:	2303      	movs	r3, #3
 800d97a:	e007      	b.n	800d98c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	f003 0320 	and.w	r3, r3, #32
 800d986:	2b00      	cmp	r3, #0
 800d988:	d0ee      	beq.n	800d968 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800d98a:	2300      	movs	r3, #0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3710      	adds	r7, #16
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}
 800d994:	0003ff5f 	.word	0x0003ff5f

0800d998 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d120      	bne.n	800d9f4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d9bc:	f7fa fcf4 	bl	80083a8 <HAL_GetTick>
 800d9c0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d9c2:	e00d      	b.n	800d9e0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d9c4:	f7fa fcf0 	bl	80083a8 <HAL_GetTick>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	1ad3      	subs	r3, r2, r3
 800d9ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d9d2:	d905      	bls.n	800d9e0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d9d4:	2303      	movs	r3, #3
 800d9d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2203      	movs	r2, #3
 800d9dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d102      	bne.n	800d9f4 <RTC_EnterInitMode+0x5c>
 800d9ee:	7bfb      	ldrb	r3, [r7, #15]
 800d9f0:	2b03      	cmp	r3, #3
 800d9f2:	d1e7      	bne.n	800d9c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800d9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3710      	adds	r7, #16
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
	...

0800da00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800da08:	2300      	movs	r3, #0
 800da0a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800da0c:	4b1a      	ldr	r3, [pc, #104]	@ (800da78 <RTC_ExitInitMode+0x78>)
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	4a19      	ldr	r2, [pc, #100]	@ (800da78 <RTC_ExitInitMode+0x78>)
 800da12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da16:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800da18:	4b17      	ldr	r3, [pc, #92]	@ (800da78 <RTC_ExitInitMode+0x78>)
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	f003 0320 	and.w	r3, r3, #32
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10c      	bne.n	800da3e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f7ff ff93 	bl	800d950 <HAL_RTC_WaitForSynchro>
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d01e      	beq.n	800da6e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2203      	movs	r2, #3
 800da34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800da38:	2303      	movs	r3, #3
 800da3a:	73fb      	strb	r3, [r7, #15]
 800da3c:	e017      	b.n	800da6e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800da3e:	4b0e      	ldr	r3, [pc, #56]	@ (800da78 <RTC_ExitInitMode+0x78>)
 800da40:	689b      	ldr	r3, [r3, #8]
 800da42:	4a0d      	ldr	r2, [pc, #52]	@ (800da78 <RTC_ExitInitMode+0x78>)
 800da44:	f023 0320 	bic.w	r3, r3, #32
 800da48:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f7ff ff80 	bl	800d950 <HAL_RTC_WaitForSynchro>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d005      	beq.n	800da62 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2203      	movs	r2, #3
 800da5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800da5e:	2303      	movs	r3, #3
 800da60:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800da62:	4b05      	ldr	r3, [pc, #20]	@ (800da78 <RTC_ExitInitMode+0x78>)
 800da64:	689b      	ldr	r3, [r3, #8]
 800da66:	4a04      	ldr	r2, [pc, #16]	@ (800da78 <RTC_ExitInitMode+0x78>)
 800da68:	f043 0320 	orr.w	r3, r3, #32
 800da6c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800da6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da70:	4618      	mov	r0, r3
 800da72:	3710      	adds	r7, #16
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}
 800da78:	40002800 	.word	0x40002800

0800da7c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b085      	sub	sp, #20
 800da80:	af00      	add	r7, sp, #0
 800da82:	4603      	mov	r3, r0
 800da84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800da86:	2300      	movs	r3, #0
 800da88:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800da8a:	79fb      	ldrb	r3, [r7, #7]
 800da8c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800da8e:	e005      	b.n	800da9c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	3301      	adds	r3, #1
 800da94:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800da96:	7afb      	ldrb	r3, [r7, #11]
 800da98:	3b0a      	subs	r3, #10
 800da9a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800da9c:	7afb      	ldrb	r3, [r7, #11]
 800da9e:	2b09      	cmp	r3, #9
 800daa0:	d8f6      	bhi.n	800da90 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	011b      	lsls	r3, r3, #4
 800daa8:	b2da      	uxtb	r2, r3
 800daaa:	7afb      	ldrb	r3, [r7, #11]
 800daac:	4313      	orrs	r3, r2
 800daae:	b2db      	uxtb	r3, r3
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3714      	adds	r7, #20
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b085      	sub	sp, #20
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	4603      	mov	r3, r0
 800dac4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dac6:	79fb      	ldrb	r3, [r7, #7]
 800dac8:	091b      	lsrs	r3, r3, #4
 800daca:	b2db      	uxtb	r3, r3
 800dacc:	461a      	mov	r2, r3
 800dace:	0092      	lsls	r2, r2, #2
 800dad0:	4413      	add	r3, r2
 800dad2:	005b      	lsls	r3, r3, #1
 800dad4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800dad6:	79fb      	ldrb	r3, [r7, #7]
 800dad8:	f003 030f 	and.w	r3, r3, #15
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	7bfb      	ldrb	r3, [r7, #15]
 800dae0:	4413      	add	r3, r2
 800dae2:	b2db      	uxtb	r3, r3
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3714      	adds	r7, #20
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800daf8:	bf00      	nop
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d101      	bne.n	800db16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800db12:	2301      	movs	r3, #1
 800db14:	e095      	b.n	800dc42 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d108      	bne.n	800db30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800db26:	d009      	beq.n	800db3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	61da      	str	r2, [r3, #28]
 800db2e:	e005      	b.n	800db3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2200      	movs	r2, #0
 800db3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2200      	movs	r2, #0
 800db40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d106      	bne.n	800db5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2200      	movs	r2, #0
 800db52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f7f6 ff1a 	bl	8004990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2202      	movs	r2, #2
 800db60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800db72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800db7c:	d902      	bls.n	800db84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800db7e:	2300      	movs	r3, #0
 800db80:	60fb      	str	r3, [r7, #12]
 800db82:	e002      	b.n	800db8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800db84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800db88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	68db      	ldr	r3, [r3, #12]
 800db8e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800db92:	d007      	beq.n	800dba4 <HAL_SPI_Init+0xa0>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	68db      	ldr	r3, [r3, #12]
 800db98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800db9c:	d002      	beq.n	800dba4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800dbb4:	431a      	orrs	r2, r3
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	691b      	ldr	r3, [r3, #16]
 800dbba:	f003 0302 	and.w	r3, r3, #2
 800dbbe:	431a      	orrs	r2, r3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	695b      	ldr	r3, [r3, #20]
 800dbc4:	f003 0301 	and.w	r3, r3, #1
 800dbc8:	431a      	orrs	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	699b      	ldr	r3, [r3, #24]
 800dbce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dbd2:	431a      	orrs	r2, r3
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	69db      	ldr	r3, [r3, #28]
 800dbd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dbdc:	431a      	orrs	r2, r3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6a1b      	ldr	r3, [r3, #32]
 800dbe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbe6:	ea42 0103 	orr.w	r1, r2, r3
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	430a      	orrs	r2, r1
 800dbf8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	699b      	ldr	r3, [r3, #24]
 800dbfe:	0c1b      	lsrs	r3, r3, #16
 800dc00:	f003 0204 	and.w	r2, r3, #4
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc08:	f003 0310 	and.w	r3, r3, #16
 800dc0c:	431a      	orrs	r2, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc12:	f003 0308 	and.w	r3, r3, #8
 800dc16:	431a      	orrs	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	68db      	ldr	r3, [r3, #12]
 800dc1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800dc20:	ea42 0103 	orr.w	r1, r2, r3
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	430a      	orrs	r2, r1
 800dc30:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2200      	movs	r2, #0
 800dc36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800dc40:	2300      	movs	r3, #0
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3710      	adds	r7, #16
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}

0800dc4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc4a:	b580      	push	{r7, lr}
 800dc4c:	b088      	sub	sp, #32
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	60f8      	str	r0, [r7, #12]
 800dc52:	60b9      	str	r1, [r7, #8]
 800dc54:	603b      	str	r3, [r7, #0]
 800dc56:	4613      	mov	r3, r2
 800dc58:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc5a:	f7fa fba5 	bl	80083a8 <HAL_GetTick>
 800dc5e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800dc60:	88fb      	ldrh	r3, [r7, #6]
 800dc62:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d001      	beq.n	800dc74 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800dc70:	2302      	movs	r3, #2
 800dc72:	e15c      	b.n	800df2e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d002      	beq.n	800dc80 <HAL_SPI_Transmit+0x36>
 800dc7a:	88fb      	ldrh	r3, [r7, #6]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d101      	bne.n	800dc84 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800dc80:	2301      	movs	r3, #1
 800dc82:	e154      	b.n	800df2e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d101      	bne.n	800dc92 <HAL_SPI_Transmit+0x48>
 800dc8e:	2302      	movs	r3, #2
 800dc90:	e14d      	b.n	800df2e <HAL_SPI_Transmit+0x2e4>
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2201      	movs	r2, #1
 800dc96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2203      	movs	r2, #3
 800dc9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2200      	movs	r2, #0
 800dca6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	68ba      	ldr	r2, [r7, #8]
 800dcac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	88fa      	ldrh	r2, [r7, #6]
 800dcb2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	88fa      	ldrh	r2, [r7, #6]
 800dcb8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2200      	movs	r2, #0
 800dccc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dce4:	d10f      	bne.n	800dd06 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dcf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dd04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd10:	2b40      	cmp	r3, #64	@ 0x40
 800dd12:	d007      	beq.n	800dd24 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	681a      	ldr	r2, [r3, #0]
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dd22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dd2c:	d952      	bls.n	800ddd4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d002      	beq.n	800dd3c <HAL_SPI_Transmit+0xf2>
 800dd36:	8b7b      	ldrh	r3, [r7, #26]
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d145      	bne.n	800ddc8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd40:	881a      	ldrh	r2, [r3, #0]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd4c:	1c9a      	adds	r2, r3, #2
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	3b01      	subs	r3, #1
 800dd5a:	b29a      	uxth	r2, r3
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800dd60:	e032      	b.n	800ddc8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	689b      	ldr	r3, [r3, #8]
 800dd68:	f003 0302 	and.w	r3, r3, #2
 800dd6c:	2b02      	cmp	r3, #2
 800dd6e:	d112      	bne.n	800dd96 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd74:	881a      	ldrh	r2, [r3, #0]
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd80:	1c9a      	adds	r2, r3, #2
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	3b01      	subs	r3, #1
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800dd94:	e018      	b.n	800ddc8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd96:	f7fa fb07 	bl	80083a8 <HAL_GetTick>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	1ad3      	subs	r3, r2, r3
 800dda0:	683a      	ldr	r2, [r7, #0]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d803      	bhi.n	800ddae <HAL_SPI_Transmit+0x164>
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddac:	d102      	bne.n	800ddb4 <HAL_SPI_Transmit+0x16a>
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d109      	bne.n	800ddc8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800ddc4:	2303      	movs	r3, #3
 800ddc6:	e0b2      	b.n	800df2e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1c7      	bne.n	800dd62 <HAL_SPI_Transmit+0x118>
 800ddd2:	e083      	b.n	800dedc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	685b      	ldr	r3, [r3, #4]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d002      	beq.n	800dde2 <HAL_SPI_Transmit+0x198>
 800dddc:	8b7b      	ldrh	r3, [r7, #26]
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	d177      	bne.n	800ded2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d912      	bls.n	800de12 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddf0:	881a      	ldrh	r2, [r3, #0]
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddfc:	1c9a      	adds	r2, r3, #2
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800de06:	b29b      	uxth	r3, r3
 800de08:	3b02      	subs	r3, #2
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800de10:	e05f      	b.n	800ded2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	330c      	adds	r3, #12
 800de1c:	7812      	ldrb	r2, [r2, #0]
 800de1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de24:	1c5a      	adds	r2, r3, #1
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800de2e:	b29b      	uxth	r3, r3
 800de30:	3b01      	subs	r3, #1
 800de32:	b29a      	uxth	r2, r3
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800de38:	e04b      	b.n	800ded2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	689b      	ldr	r3, [r3, #8]
 800de40:	f003 0302 	and.w	r3, r3, #2
 800de44:	2b02      	cmp	r3, #2
 800de46:	d12b      	bne.n	800dea0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800de4c:	b29b      	uxth	r3, r3
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d912      	bls.n	800de78 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de56:	881a      	ldrh	r2, [r3, #0]
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de62:	1c9a      	adds	r2, r3, #2
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	3b02      	subs	r3, #2
 800de70:	b29a      	uxth	r2, r3
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800de76:	e02c      	b.n	800ded2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	330c      	adds	r3, #12
 800de82:	7812      	ldrb	r2, [r2, #0]
 800de84:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de8a:	1c5a      	adds	r2, r3, #1
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800de94:	b29b      	uxth	r3, r3
 800de96:	3b01      	subs	r3, #1
 800de98:	b29a      	uxth	r2, r3
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800de9e:	e018      	b.n	800ded2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dea0:	f7fa fa82 	bl	80083a8 <HAL_GetTick>
 800dea4:	4602      	mov	r2, r0
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	1ad3      	subs	r3, r2, r3
 800deaa:	683a      	ldr	r2, [r7, #0]
 800deac:	429a      	cmp	r2, r3
 800deae:	d803      	bhi.n	800deb8 <HAL_SPI_Transmit+0x26e>
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb6:	d102      	bne.n	800debe <HAL_SPI_Transmit+0x274>
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d109      	bne.n	800ded2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2201      	movs	r2, #1
 800dec2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2200      	movs	r2, #0
 800deca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800dece:	2303      	movs	r3, #3
 800ded0:	e02d      	b.n	800df2e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d1ae      	bne.n	800de3a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dedc:	69fa      	ldr	r2, [r7, #28]
 800dede:	6839      	ldr	r1, [r7, #0]
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f000 fcf5 	bl	800e8d0 <SPI_EndRxTxTransaction>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d002      	beq.n	800def2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2220      	movs	r2, #32
 800def0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	689b      	ldr	r3, [r3, #8]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d10a      	bne.n	800df10 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800defa:	2300      	movs	r3, #0
 800defc:	617b      	str	r3, [r7, #20]
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	68db      	ldr	r3, [r3, #12]
 800df04:	617b      	str	r3, [r7, #20]
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	689b      	ldr	r3, [r3, #8]
 800df0c:	617b      	str	r3, [r7, #20]
 800df0e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2201      	movs	r2, #1
 800df14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2200      	movs	r2, #0
 800df1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df24:	2b00      	cmp	r3, #0
 800df26:	d001      	beq.n	800df2c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800df28:	2301      	movs	r3, #1
 800df2a:	e000      	b.n	800df2e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800df2c:	2300      	movs	r3, #0
  }
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3720      	adds	r7, #32
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}

0800df36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df36:	b580      	push	{r7, lr}
 800df38:	b088      	sub	sp, #32
 800df3a:	af02      	add	r7, sp, #8
 800df3c:	60f8      	str	r0, [r7, #12]
 800df3e:	60b9      	str	r1, [r7, #8]
 800df40:	603b      	str	r3, [r7, #0]
 800df42:	4613      	mov	r3, r2
 800df44:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d001      	beq.n	800df56 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800df52:	2302      	movs	r3, #2
 800df54:	e123      	b.n	800e19e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800df5e:	d112      	bne.n	800df86 <HAL_SPI_Receive+0x50>
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	689b      	ldr	r3, [r3, #8]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d10e      	bne.n	800df86 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2204      	movs	r2, #4
 800df6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800df70:	88fa      	ldrh	r2, [r7, #6]
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	4613      	mov	r3, r2
 800df78:	68ba      	ldr	r2, [r7, #8]
 800df7a:	68b9      	ldr	r1, [r7, #8]
 800df7c:	68f8      	ldr	r0, [r7, #12]
 800df7e:	f000 f912 	bl	800e1a6 <HAL_SPI_TransmitReceive>
 800df82:	4603      	mov	r3, r0
 800df84:	e10b      	b.n	800e19e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df86:	f7fa fa0f 	bl	80083a8 <HAL_GetTick>
 800df8a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d002      	beq.n	800df98 <HAL_SPI_Receive+0x62>
 800df92:	88fb      	ldrh	r3, [r7, #6]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d101      	bne.n	800df9c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800df98:	2301      	movs	r3, #1
 800df9a:	e100      	b.n	800e19e <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d101      	bne.n	800dfaa <HAL_SPI_Receive+0x74>
 800dfa6:	2302      	movs	r3, #2
 800dfa8:	e0f9      	b.n	800e19e <HAL_SPI_Receive+0x268>
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2201      	movs	r2, #1
 800dfae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2204      	movs	r2, #4
 800dfb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	68ba      	ldr	r2, [r7, #8]
 800dfc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	88fa      	ldrh	r2, [r7, #6]
 800dfca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	88fa      	ldrh	r2, [r7, #6]
 800dfd2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2200      	movs	r2, #0
 800dfec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2200      	movs	r2, #0
 800dff2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dffc:	d908      	bls.n	800e010 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	685a      	ldr	r2, [r3, #4]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e00c:	605a      	str	r2, [r3, #4]
 800e00e:	e007      	b.n	800e020 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	685a      	ldr	r2, [r3, #4]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e01e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e028:	d10f      	bne.n	800e04a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	681a      	ldr	r2, [r3, #0]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e038:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e048:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e054:	2b40      	cmp	r3, #64	@ 0x40
 800e056:	d007      	beq.n	800e068 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e066:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e070:	d875      	bhi.n	800e15e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e072:	e037      	b.n	800e0e4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	689b      	ldr	r3, [r3, #8]
 800e07a:	f003 0301 	and.w	r3, r3, #1
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d117      	bne.n	800e0b2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f103 020c 	add.w	r2, r3, #12
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e08e:	7812      	ldrb	r2, [r2, #0]
 800e090:	b2d2      	uxtb	r2, r2
 800e092:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e098:	1c5a      	adds	r2, r3, #1
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	b29a      	uxth	r2, r3
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e0b0:	e018      	b.n	800e0e4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0b2:	f7fa f979 	bl	80083a8 <HAL_GetTick>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	1ad3      	subs	r3, r2, r3
 800e0bc:	683a      	ldr	r2, [r7, #0]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d803      	bhi.n	800e0ca <HAL_SPI_Receive+0x194>
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0c8:	d102      	bne.n	800e0d0 <HAL_SPI_Receive+0x19a>
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d109      	bne.n	800e0e4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e0e0:	2303      	movs	r3, #3
 800e0e2:	e05c      	b.n	800e19e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1c1      	bne.n	800e074 <HAL_SPI_Receive+0x13e>
 800e0f0:	e03b      	b.n	800e16a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	f003 0301 	and.w	r3, r3, #1
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d115      	bne.n	800e12c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	68da      	ldr	r2, [r3, #12]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e10a:	b292      	uxth	r2, r2
 800e10c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e112:	1c9a      	adds	r2, r3, #2
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e11e:	b29b      	uxth	r3, r3
 800e120:	3b01      	subs	r3, #1
 800e122:	b29a      	uxth	r2, r3
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e12a:	e018      	b.n	800e15e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e12c:	f7fa f93c 	bl	80083a8 <HAL_GetTick>
 800e130:	4602      	mov	r2, r0
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	1ad3      	subs	r3, r2, r3
 800e136:	683a      	ldr	r2, [r7, #0]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d803      	bhi.n	800e144 <HAL_SPI_Receive+0x20e>
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e142:	d102      	bne.n	800e14a <HAL_SPI_Receive+0x214>
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d109      	bne.n	800e15e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2201      	movs	r2, #1
 800e14e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2200      	movs	r2, #0
 800e156:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e15a:	2303      	movs	r3, #3
 800e15c:	e01f      	b.n	800e19e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e164:	b29b      	uxth	r3, r3
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1c3      	bne.n	800e0f2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e16a:	697a      	ldr	r2, [r7, #20]
 800e16c:	6839      	ldr	r1, [r7, #0]
 800e16e:	68f8      	ldr	r0, [r7, #12]
 800e170:	f000 fb56 	bl	800e820 <SPI_EndRxTransaction>
 800e174:	4603      	mov	r3, r0
 800e176:	2b00      	cmp	r3, #0
 800e178:	d002      	beq.n	800e180 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2220      	movs	r2, #32
 800e17e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2201      	movs	r2, #1
 800e184:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2200      	movs	r2, #0
 800e18c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800e198:	2301      	movs	r3, #1
 800e19a:	e000      	b.n	800e19e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800e19c:	2300      	movs	r3, #0
  }
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3718      	adds	r7, #24
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b08a      	sub	sp, #40	@ 0x28
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	60f8      	str	r0, [r7, #12]
 800e1ae:	60b9      	str	r1, [r7, #8]
 800e1b0:	607a      	str	r2, [r7, #4]
 800e1b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e1b8:	f7fa f8f6 	bl	80083a8 <HAL_GetTick>
 800e1bc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e1c4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800e1cc:	887b      	ldrh	r3, [r7, #2]
 800e1ce:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800e1d0:	887b      	ldrh	r3, [r7, #2]
 800e1d2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e1d4:	7ffb      	ldrb	r3, [r7, #31]
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d00c      	beq.n	800e1f4 <HAL_SPI_TransmitReceive+0x4e>
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e1e0:	d106      	bne.n	800e1f0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	689b      	ldr	r3, [r3, #8]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d102      	bne.n	800e1f0 <HAL_SPI_TransmitReceive+0x4a>
 800e1ea:	7ffb      	ldrb	r3, [r7, #31]
 800e1ec:	2b04      	cmp	r3, #4
 800e1ee:	d001      	beq.n	800e1f4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800e1f0:	2302      	movs	r3, #2
 800e1f2:	e1f3      	b.n	800e5dc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d005      	beq.n	800e206 <HAL_SPI_TransmitReceive+0x60>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d002      	beq.n	800e206 <HAL_SPI_TransmitReceive+0x60>
 800e200:	887b      	ldrh	r3, [r7, #2]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d101      	bne.n	800e20a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800e206:	2301      	movs	r3, #1
 800e208:	e1e8      	b.n	800e5dc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e210:	2b01      	cmp	r3, #1
 800e212:	d101      	bne.n	800e218 <HAL_SPI_TransmitReceive+0x72>
 800e214:	2302      	movs	r3, #2
 800e216:	e1e1      	b.n	800e5dc <HAL_SPI_TransmitReceive+0x436>
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2201      	movs	r2, #1
 800e21c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e226:	b2db      	uxtb	r3, r3
 800e228:	2b04      	cmp	r3, #4
 800e22a:	d003      	beq.n	800e234 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2205      	movs	r2, #5
 800e230:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2200      	movs	r2, #0
 800e238:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	687a      	ldr	r2, [r7, #4]
 800e23e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	887a      	ldrh	r2, [r7, #2]
 800e244:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	887a      	ldrh	r2, [r7, #2]
 800e24c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	68ba      	ldr	r2, [r7, #8]
 800e254:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	887a      	ldrh	r2, [r7, #2]
 800e25a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	887a      	ldrh	r2, [r7, #2]
 800e260:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2200      	movs	r2, #0
 800e266:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2200      	movs	r2, #0
 800e26c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	68db      	ldr	r3, [r3, #12]
 800e272:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e276:	d802      	bhi.n	800e27e <HAL_SPI_TransmitReceive+0xd8>
 800e278:	8abb      	ldrh	r3, [r7, #20]
 800e27a:	2b01      	cmp	r3, #1
 800e27c:	d908      	bls.n	800e290 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	685a      	ldr	r2, [r3, #4]
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e28c:	605a      	str	r2, [r3, #4]
 800e28e:	e007      	b.n	800e2a0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	685a      	ldr	r2, [r3, #4]
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e29e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2aa:	2b40      	cmp	r3, #64	@ 0x40
 800e2ac:	d007      	beq.n	800e2be <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e2bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e2c6:	f240 8083 	bls.w	800e3d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d002      	beq.n	800e2d8 <HAL_SPI_TransmitReceive+0x132>
 800e2d2:	8afb      	ldrh	r3, [r7, #22]
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d16f      	bne.n	800e3b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2dc:	881a      	ldrh	r2, [r3, #0]
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2e8:	1c9a      	adds	r2, r3, #2
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	3b01      	subs	r3, #1
 800e2f6:	b29a      	uxth	r2, r3
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e2fc:	e05c      	b.n	800e3b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	f003 0302 	and.w	r3, r3, #2
 800e308:	2b02      	cmp	r3, #2
 800e30a:	d11b      	bne.n	800e344 <HAL_SPI_TransmitReceive+0x19e>
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e310:	b29b      	uxth	r3, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	d016      	beq.n	800e344 <HAL_SPI_TransmitReceive+0x19e>
 800e316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d113      	bne.n	800e344 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e320:	881a      	ldrh	r2, [r3, #0]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e32c:	1c9a      	adds	r2, r3, #2
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e336:	b29b      	uxth	r3, r3
 800e338:	3b01      	subs	r3, #1
 800e33a:	b29a      	uxth	r2, r3
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e340:	2300      	movs	r3, #0
 800e342:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	689b      	ldr	r3, [r3, #8]
 800e34a:	f003 0301 	and.w	r3, r3, #1
 800e34e:	2b01      	cmp	r3, #1
 800e350:	d11c      	bne.n	800e38c <HAL_SPI_TransmitReceive+0x1e6>
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e358:	b29b      	uxth	r3, r3
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d016      	beq.n	800e38c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	68da      	ldr	r2, [r3, #12]
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e368:	b292      	uxth	r2, r2
 800e36a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e370:	1c9a      	adds	r2, r3, #2
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	3b01      	subs	r3, #1
 800e380:	b29a      	uxth	r2, r3
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e388:	2301      	movs	r3, #1
 800e38a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e38c:	f7fa f80c 	bl	80083a8 <HAL_GetTick>
 800e390:	4602      	mov	r2, r0
 800e392:	6a3b      	ldr	r3, [r7, #32]
 800e394:	1ad3      	subs	r3, r2, r3
 800e396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e398:	429a      	cmp	r2, r3
 800e39a:	d80d      	bhi.n	800e3b8 <HAL_SPI_TransmitReceive+0x212>
 800e39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a2:	d009      	beq.n	800e3b8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800e3b4:	2303      	movs	r3, #3
 800e3b6:	e111      	b.n	800e5dc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e3bc:	b29b      	uxth	r3, r3
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d19d      	bne.n	800e2fe <HAL_SPI_TransmitReceive+0x158>
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d197      	bne.n	800e2fe <HAL_SPI_TransmitReceive+0x158>
 800e3ce:	e0e5      	b.n	800e59c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d003      	beq.n	800e3e0 <HAL_SPI_TransmitReceive+0x23a>
 800e3d8:	8afb      	ldrh	r3, [r7, #22]
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	f040 80d1 	bne.w	800e582 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d912      	bls.n	800e410 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3ee:	881a      	ldrh	r2, [r3, #0]
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3fa:	1c9a      	adds	r2, r3, #2
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e404:	b29b      	uxth	r3, r3
 800e406:	3b02      	subs	r3, #2
 800e408:	b29a      	uxth	r2, r3
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e40e:	e0b8      	b.n	800e582 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	330c      	adds	r3, #12
 800e41a:	7812      	ldrb	r2, [r2, #0]
 800e41c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e422:	1c5a      	adds	r2, r3, #1
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	3b01      	subs	r3, #1
 800e430:	b29a      	uxth	r2, r3
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e436:	e0a4      	b.n	800e582 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	f003 0302 	and.w	r3, r3, #2
 800e442:	2b02      	cmp	r3, #2
 800e444:	d134      	bne.n	800e4b0 <HAL_SPI_TransmitReceive+0x30a>
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d02f      	beq.n	800e4b0 <HAL_SPI_TransmitReceive+0x30a>
 800e450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e452:	2b01      	cmp	r3, #1
 800e454:	d12c      	bne.n	800e4b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d912      	bls.n	800e486 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e464:	881a      	ldrh	r2, [r3, #0]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e470:	1c9a      	adds	r2, r3, #2
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	3b02      	subs	r3, #2
 800e47e:	b29a      	uxth	r2, r3
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e484:	e012      	b.n	800e4ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	330c      	adds	r3, #12
 800e490:	7812      	ldrb	r2, [r2, #0]
 800e492:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e498:	1c5a      	adds	r2, r3, #1
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	3b01      	subs	r3, #1
 800e4a6:	b29a      	uxth	r2, r3
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	689b      	ldr	r3, [r3, #8]
 800e4b6:	f003 0301 	and.w	r3, r3, #1
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d148      	bne.n	800e550 <HAL_SPI_TransmitReceive+0x3aa>
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d042      	beq.n	800e550 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d923      	bls.n	800e51e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	68da      	ldr	r2, [r3, #12]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4e0:	b292      	uxth	r2, r2
 800e4e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4e8:	1c9a      	adds	r2, r3, #2
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	3b02      	subs	r3, #2
 800e4f8:	b29a      	uxth	r2, r3
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e506:	b29b      	uxth	r3, r3
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d81f      	bhi.n	800e54c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	685a      	ldr	r2, [r3, #4]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e51a:	605a      	str	r2, [r3, #4]
 800e51c:	e016      	b.n	800e54c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f103 020c 	add.w	r2, r3, #12
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e52a:	7812      	ldrb	r2, [r2, #0]
 800e52c:	b2d2      	uxtb	r2, r2
 800e52e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e534:	1c5a      	adds	r2, r3, #1
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e540:	b29b      	uxth	r3, r3
 800e542:	3b01      	subs	r3, #1
 800e544:	b29a      	uxth	r2, r3
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e54c:	2301      	movs	r3, #1
 800e54e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e550:	f7f9 ff2a 	bl	80083a8 <HAL_GetTick>
 800e554:	4602      	mov	r2, r0
 800e556:	6a3b      	ldr	r3, [r7, #32]
 800e558:	1ad3      	subs	r3, r2, r3
 800e55a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d803      	bhi.n	800e568 <HAL_SPI_TransmitReceive+0x3c2>
 800e560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e566:	d102      	bne.n	800e56e <HAL_SPI_TransmitReceive+0x3c8>
 800e568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d109      	bne.n	800e582 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2201      	movs	r2, #1
 800e572:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2200      	movs	r2, #0
 800e57a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800e57e:	2303      	movs	r3, #3
 800e580:	e02c      	b.n	800e5dc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e586:	b29b      	uxth	r3, r3
 800e588:	2b00      	cmp	r3, #0
 800e58a:	f47f af55 	bne.w	800e438 <HAL_SPI_TransmitReceive+0x292>
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e594:	b29b      	uxth	r3, r3
 800e596:	2b00      	cmp	r3, #0
 800e598:	f47f af4e 	bne.w	800e438 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e59c:	6a3a      	ldr	r2, [r7, #32]
 800e59e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	f000 f995 	bl	800e8d0 <SPI_EndRxTxTransaction>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d008      	beq.n	800e5be <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2220      	movs	r2, #32
 800e5b0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e00e      	b.n	800e5dc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d001      	beq.n	800e5da <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e000      	b.n	800e5dc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800e5da:	2300      	movs	r3, #0
  }
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3728      	adds	r7, #40	@ 0x28
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b088      	sub	sp, #32
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	603b      	str	r3, [r7, #0]
 800e5f0:	4613      	mov	r3, r2
 800e5f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e5f4:	f7f9 fed8 	bl	80083a8 <HAL_GetTick>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5fc:	1a9b      	subs	r3, r3, r2
 800e5fe:	683a      	ldr	r2, [r7, #0]
 800e600:	4413      	add	r3, r2
 800e602:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e604:	f7f9 fed0 	bl	80083a8 <HAL_GetTick>
 800e608:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e60a:	4b39      	ldr	r3, [pc, #228]	@ (800e6f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	015b      	lsls	r3, r3, #5
 800e610:	0d1b      	lsrs	r3, r3, #20
 800e612:	69fa      	ldr	r2, [r7, #28]
 800e614:	fb02 f303 	mul.w	r3, r2, r3
 800e618:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e61a:	e054      	b.n	800e6c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e622:	d050      	beq.n	800e6c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e624:	f7f9 fec0 	bl	80083a8 <HAL_GetTick>
 800e628:	4602      	mov	r2, r0
 800e62a:	69bb      	ldr	r3, [r7, #24]
 800e62c:	1ad3      	subs	r3, r2, r3
 800e62e:	69fa      	ldr	r2, [r7, #28]
 800e630:	429a      	cmp	r2, r3
 800e632:	d902      	bls.n	800e63a <SPI_WaitFlagStateUntilTimeout+0x56>
 800e634:	69fb      	ldr	r3, [r7, #28]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d13d      	bne.n	800e6b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	685a      	ldr	r2, [r3, #4]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e648:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e652:	d111      	bne.n	800e678 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	689b      	ldr	r3, [r3, #8]
 800e658:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e65c:	d004      	beq.n	800e668 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	689b      	ldr	r3, [r3, #8]
 800e662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e666:	d107      	bne.n	800e678 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e676:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e67c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e680:	d10f      	bne.n	800e6a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e690:	601a      	str	r2, [r3, #0]
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	681a      	ldr	r2, [r3, #0]
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e6a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800e6b2:	2303      	movs	r3, #3
 800e6b4:	e017      	b.n	800e6e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d101      	bne.n	800e6c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	3b01      	subs	r3, #1
 800e6c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	689a      	ldr	r2, [r3, #8]
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	4013      	ands	r3, r2
 800e6d0:	68ba      	ldr	r2, [r7, #8]
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	bf0c      	ite	eq
 800e6d6:	2301      	moveq	r3, #1
 800e6d8:	2300      	movne	r3, #0
 800e6da:	b2db      	uxtb	r3, r3
 800e6dc:	461a      	mov	r2, r3
 800e6de:	79fb      	ldrb	r3, [r7, #7]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d19b      	bne.n	800e61c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3720      	adds	r7, #32
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	20000000 	.word	0x20000000

0800e6f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b08a      	sub	sp, #40	@ 0x28
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	60b9      	str	r1, [r7, #8]
 800e6fe:	607a      	str	r2, [r7, #4]
 800e700:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e702:	2300      	movs	r3, #0
 800e704:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e706:	f7f9 fe4f 	bl	80083a8 <HAL_GetTick>
 800e70a:	4602      	mov	r2, r0
 800e70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e70e:	1a9b      	subs	r3, r3, r2
 800e710:	683a      	ldr	r2, [r7, #0]
 800e712:	4413      	add	r3, r2
 800e714:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800e716:	f7f9 fe47 	bl	80083a8 <HAL_GetTick>
 800e71a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	330c      	adds	r3, #12
 800e722:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e724:	4b3d      	ldr	r3, [pc, #244]	@ (800e81c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e726:	681a      	ldr	r2, [r3, #0]
 800e728:	4613      	mov	r3, r2
 800e72a:	009b      	lsls	r3, r3, #2
 800e72c:	4413      	add	r3, r2
 800e72e:	00da      	lsls	r2, r3, #3
 800e730:	1ad3      	subs	r3, r2, r3
 800e732:	0d1b      	lsrs	r3, r3, #20
 800e734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e736:	fb02 f303 	mul.w	r3, r2, r3
 800e73a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e73c:	e060      	b.n	800e800 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e744:	d107      	bne.n	800e756 <SPI_WaitFifoStateUntilTimeout+0x62>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d104      	bne.n	800e756 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	b2db      	uxtb	r3, r3
 800e752:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e754:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e75c:	d050      	beq.n	800e800 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e75e:	f7f9 fe23 	bl	80083a8 <HAL_GetTick>
 800e762:	4602      	mov	r2, r0
 800e764:	6a3b      	ldr	r3, [r7, #32]
 800e766:	1ad3      	subs	r3, r2, r3
 800e768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d902      	bls.n	800e774 <SPI_WaitFifoStateUntilTimeout+0x80>
 800e76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e770:	2b00      	cmp	r3, #0
 800e772:	d13d      	bne.n	800e7f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	685a      	ldr	r2, [r3, #4]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e782:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e78c:	d111      	bne.n	800e7b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	689b      	ldr	r3, [r3, #8]
 800e792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e796:	d004      	beq.n	800e7a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	689b      	ldr	r3, [r3, #8]
 800e79c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e7a0:	d107      	bne.n	800e7b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e7b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e7ba:	d10f      	bne.n	800e7dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e7ca:	601a      	str	r2, [r3, #0]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e7da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2201      	movs	r2, #1
 800e7e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800e7ec:	2303      	movs	r3, #3
 800e7ee:	e010      	b.n	800e812 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d101      	bne.n	800e7fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800e7fa:	69bb      	ldr	r3, [r7, #24]
 800e7fc:	3b01      	subs	r3, #1
 800e7fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	689a      	ldr	r2, [r3, #8]
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	4013      	ands	r3, r2
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d196      	bne.n	800e73e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e810:	2300      	movs	r3, #0
}
 800e812:	4618      	mov	r0, r3
 800e814:	3728      	adds	r7, #40	@ 0x28
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	20000000 	.word	0x20000000

0800e820 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af02      	add	r7, sp, #8
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e834:	d111      	bne.n	800e85a <SPI_EndRxTransaction+0x3a>
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	689b      	ldr	r3, [r3, #8]
 800e83a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e83e:	d004      	beq.n	800e84a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	689b      	ldr	r3, [r3, #8]
 800e844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e848:	d107      	bne.n	800e85a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e858:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	9300      	str	r3, [sp, #0]
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	2200      	movs	r2, #0
 800e862:	2180      	movs	r1, #128	@ 0x80
 800e864:	68f8      	ldr	r0, [r7, #12]
 800e866:	f7ff febd 	bl	800e5e4 <SPI_WaitFlagStateUntilTimeout>
 800e86a:	4603      	mov	r3, r0
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d007      	beq.n	800e880 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e874:	f043 0220 	orr.w	r2, r3, #32
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e87c:	2303      	movs	r3, #3
 800e87e:	e023      	b.n	800e8c8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e888:	d11d      	bne.n	800e8c6 <SPI_EndRxTransaction+0xa6>
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	689b      	ldr	r3, [r3, #8]
 800e88e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e892:	d004      	beq.n	800e89e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	689b      	ldr	r3, [r3, #8]
 800e898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e89c:	d113      	bne.n	800e8c6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	9300      	str	r3, [sp, #0]
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f7ff ff22 	bl	800e6f4 <SPI_WaitFifoStateUntilTimeout>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d007      	beq.n	800e8c6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8ba:	f043 0220 	orr.w	r2, r3, #32
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800e8c2:	2303      	movs	r3, #3
 800e8c4:	e000      	b.n	800e8c8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800e8c6:	2300      	movs	r3, #0
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3710      	adds	r7, #16
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b086      	sub	sp, #24
 800e8d4:	af02      	add	r7, sp, #8
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	60b9      	str	r1, [r7, #8]
 800e8da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	9300      	str	r3, [sp, #0]
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	f7ff ff03 	bl	800e6f4 <SPI_WaitFifoStateUntilTimeout>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d007      	beq.n	800e904 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8f8:	f043 0220 	orr.w	r2, r3, #32
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e900:	2303      	movs	r3, #3
 800e902:	e027      	b.n	800e954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	9300      	str	r3, [sp, #0]
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	2200      	movs	r2, #0
 800e90c:	2180      	movs	r1, #128	@ 0x80
 800e90e:	68f8      	ldr	r0, [r7, #12]
 800e910:	f7ff fe68 	bl	800e5e4 <SPI_WaitFlagStateUntilTimeout>
 800e914:	4603      	mov	r3, r0
 800e916:	2b00      	cmp	r3, #0
 800e918:	d007      	beq.n	800e92a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e91e:	f043 0220 	orr.w	r2, r3, #32
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e926:	2303      	movs	r3, #3
 800e928:	e014      	b.n	800e954 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	2200      	movs	r2, #0
 800e932:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800e936:	68f8      	ldr	r0, [r7, #12]
 800e938:	f7ff fedc 	bl	800e6f4 <SPI_WaitFifoStateUntilTimeout>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d007      	beq.n	800e952 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e946:	f043 0220 	orr.w	r2, r3, #32
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e94e:	2303      	movs	r3, #3
 800e950:	e000      	b.n	800e954 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e952:	2300      	movs	r3, #0
}
 800e954:	4618      	mov	r0, r3
 800e956:	3710      	adds	r7, #16
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}

0800e95c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b082      	sub	sp, #8
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d101      	bne.n	800e96e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e96a:	2301      	movs	r3, #1
 800e96c:	e049      	b.n	800ea02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e974:	b2db      	uxtb	r3, r3
 800e976:	2b00      	cmp	r3, #0
 800e978:	d106      	bne.n	800e988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2200      	movs	r2, #0
 800e97e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f7f6 f8dc 	bl	8004b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2202      	movs	r2, #2
 800e98c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	3304      	adds	r3, #4
 800e998:	4619      	mov	r1, r3
 800e99a:	4610      	mov	r0, r2
 800e99c:	f001 f850 	bl	800fa40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ea00:	2300      	movs	r3, #0
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3708      	adds	r7, #8
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b082      	sub	sp, #8
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d101      	bne.n	800ea1c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ea18:	2301      	movs	r3, #1
 800ea1a:	e049      	b.n	800eab0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d106      	bne.n	800ea36 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7f6 f825 	bl	8004a80 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2202      	movs	r2, #2
 800ea3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681a      	ldr	r2, [r3, #0]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	3304      	adds	r3, #4
 800ea46:	4619      	mov	r1, r3
 800ea48:	4610      	mov	r0, r2
 800ea4a:	f000 fff9 	bl	800fa40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2201      	movs	r2, #1
 800ea52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2201      	movs	r2, #1
 800ea5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2201      	movs	r2, #1
 800ea62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2201      	movs	r2, #1
 800ea6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2201      	movs	r2, #1
 800ea72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2201      	movs	r2, #1
 800ea7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2201      	movs	r2, #1
 800ea82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2201      	movs	r2, #1
 800ea8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2201      	movs	r2, #1
 800ea92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2201      	movs	r2, #1
 800eaaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800eaae:	2300      	movs	r3, #0
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3708      	adds	r7, #8
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eac2:	2300      	movs	r3, #0
 800eac4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d109      	bne.n	800eae0 <HAL_TIM_OC_Start_IT+0x28>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ead2:	b2db      	uxtb	r3, r3
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	bf14      	ite	ne
 800ead8:	2301      	movne	r3, #1
 800eada:	2300      	moveq	r3, #0
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	e03c      	b.n	800eb5a <HAL_TIM_OC_Start_IT+0xa2>
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	2b04      	cmp	r3, #4
 800eae4:	d109      	bne.n	800eafa <HAL_TIM_OC_Start_IT+0x42>
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	bf14      	ite	ne
 800eaf2:	2301      	movne	r3, #1
 800eaf4:	2300      	moveq	r3, #0
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	e02f      	b.n	800eb5a <HAL_TIM_OC_Start_IT+0xa2>
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	2b08      	cmp	r3, #8
 800eafe:	d109      	bne.n	800eb14 <HAL_TIM_OC_Start_IT+0x5c>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	bf14      	ite	ne
 800eb0c:	2301      	movne	r3, #1
 800eb0e:	2300      	moveq	r3, #0
 800eb10:	b2db      	uxtb	r3, r3
 800eb12:	e022      	b.n	800eb5a <HAL_TIM_OC_Start_IT+0xa2>
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	2b0c      	cmp	r3, #12
 800eb18:	d109      	bne.n	800eb2e <HAL_TIM_OC_Start_IT+0x76>
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	bf14      	ite	ne
 800eb26:	2301      	movne	r3, #1
 800eb28:	2300      	moveq	r3, #0
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	e015      	b.n	800eb5a <HAL_TIM_OC_Start_IT+0xa2>
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	2b10      	cmp	r3, #16
 800eb32:	d109      	bne.n	800eb48 <HAL_TIM_OC_Start_IT+0x90>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	bf14      	ite	ne
 800eb40:	2301      	movne	r3, #1
 800eb42:	2300      	moveq	r3, #0
 800eb44:	b2db      	uxtb	r3, r3
 800eb46:	e008      	b.n	800eb5a <HAL_TIM_OC_Start_IT+0xa2>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	bf14      	ite	ne
 800eb54:	2301      	movne	r3, #1
 800eb56:	2300      	moveq	r3, #0
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d001      	beq.n	800eb62 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800eb5e:	2301      	movs	r3, #1
 800eb60:	e0e7      	b.n	800ed32 <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d104      	bne.n	800eb72 <HAL_TIM_OC_Start_IT+0xba>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2202      	movs	r2, #2
 800eb6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eb70:	e023      	b.n	800ebba <HAL_TIM_OC_Start_IT+0x102>
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	2b04      	cmp	r3, #4
 800eb76:	d104      	bne.n	800eb82 <HAL_TIM_OC_Start_IT+0xca>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2202      	movs	r2, #2
 800eb7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eb80:	e01b      	b.n	800ebba <HAL_TIM_OC_Start_IT+0x102>
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	2b08      	cmp	r3, #8
 800eb86:	d104      	bne.n	800eb92 <HAL_TIM_OC_Start_IT+0xda>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2202      	movs	r2, #2
 800eb8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eb90:	e013      	b.n	800ebba <HAL_TIM_OC_Start_IT+0x102>
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	2b0c      	cmp	r3, #12
 800eb96:	d104      	bne.n	800eba2 <HAL_TIM_OC_Start_IT+0xea>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2202      	movs	r2, #2
 800eb9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eba0:	e00b      	b.n	800ebba <HAL_TIM_OC_Start_IT+0x102>
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	2b10      	cmp	r3, #16
 800eba6:	d104      	bne.n	800ebb2 <HAL_TIM_OC_Start_IT+0xfa>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2202      	movs	r2, #2
 800ebac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ebb0:	e003      	b.n	800ebba <HAL_TIM_OC_Start_IT+0x102>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2202      	movs	r2, #2
 800ebb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	2b0c      	cmp	r3, #12
 800ebbe:	d841      	bhi.n	800ec44 <HAL_TIM_OC_Start_IT+0x18c>
 800ebc0:	a201      	add	r2, pc, #4	@ (adr r2, 800ebc8 <HAL_TIM_OC_Start_IT+0x110>)
 800ebc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc6:	bf00      	nop
 800ebc8:	0800ebfd 	.word	0x0800ebfd
 800ebcc:	0800ec45 	.word	0x0800ec45
 800ebd0:	0800ec45 	.word	0x0800ec45
 800ebd4:	0800ec45 	.word	0x0800ec45
 800ebd8:	0800ec0f 	.word	0x0800ec0f
 800ebdc:	0800ec45 	.word	0x0800ec45
 800ebe0:	0800ec45 	.word	0x0800ec45
 800ebe4:	0800ec45 	.word	0x0800ec45
 800ebe8:	0800ec21 	.word	0x0800ec21
 800ebec:	0800ec45 	.word	0x0800ec45
 800ebf0:	0800ec45 	.word	0x0800ec45
 800ebf4:	0800ec45 	.word	0x0800ec45
 800ebf8:	0800ec33 	.word	0x0800ec33
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	68da      	ldr	r2, [r3, #12]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f042 0202 	orr.w	r2, r2, #2
 800ec0a:	60da      	str	r2, [r3, #12]
      break;
 800ec0c:	e01d      	b.n	800ec4a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	68da      	ldr	r2, [r3, #12]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f042 0204 	orr.w	r2, r2, #4
 800ec1c:	60da      	str	r2, [r3, #12]
      break;
 800ec1e:	e014      	b.n	800ec4a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	68da      	ldr	r2, [r3, #12]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f042 0208 	orr.w	r2, r2, #8
 800ec2e:	60da      	str	r2, [r3, #12]
      break;
 800ec30:	e00b      	b.n	800ec4a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	68da      	ldr	r2, [r3, #12]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f042 0210 	orr.w	r2, r2, #16
 800ec40:	60da      	str	r2, [r3, #12]
      break;
 800ec42:	e002      	b.n	800ec4a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ec44:	2301      	movs	r3, #1
 800ec46:	73fb      	strb	r3, [r7, #15]
      break;
 800ec48:	bf00      	nop
  }

  if (status == HAL_OK)
 800ec4a:	7bfb      	ldrb	r3, [r7, #15]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d16f      	bne.n	800ed30 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	2201      	movs	r2, #1
 800ec56:	6839      	ldr	r1, [r7, #0]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f001 fcbf 	bl	80105dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4a36      	ldr	r2, [pc, #216]	@ (800ed3c <HAL_TIM_OC_Start_IT+0x284>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d013      	beq.n	800ec90 <HAL_TIM_OC_Start_IT+0x1d8>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a34      	ldr	r2, [pc, #208]	@ (800ed40 <HAL_TIM_OC_Start_IT+0x288>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d00e      	beq.n	800ec90 <HAL_TIM_OC_Start_IT+0x1d8>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4a33      	ldr	r2, [pc, #204]	@ (800ed44 <HAL_TIM_OC_Start_IT+0x28c>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d009      	beq.n	800ec90 <HAL_TIM_OC_Start_IT+0x1d8>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a31      	ldr	r2, [pc, #196]	@ (800ed48 <HAL_TIM_OC_Start_IT+0x290>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d004      	beq.n	800ec90 <HAL_TIM_OC_Start_IT+0x1d8>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4a30      	ldr	r2, [pc, #192]	@ (800ed4c <HAL_TIM_OC_Start_IT+0x294>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d101      	bne.n	800ec94 <HAL_TIM_OC_Start_IT+0x1dc>
 800ec90:	2301      	movs	r3, #1
 800ec92:	e000      	b.n	800ec96 <HAL_TIM_OC_Start_IT+0x1de>
 800ec94:	2300      	movs	r3, #0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d007      	beq.n	800ecaa <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800eca8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	4a23      	ldr	r2, [pc, #140]	@ (800ed3c <HAL_TIM_OC_Start_IT+0x284>)
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d01d      	beq.n	800ecf0 <HAL_TIM_OC_Start_IT+0x238>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ecbc:	d018      	beq.n	800ecf0 <HAL_TIM_OC_Start_IT+0x238>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4a23      	ldr	r2, [pc, #140]	@ (800ed50 <HAL_TIM_OC_Start_IT+0x298>)
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d013      	beq.n	800ecf0 <HAL_TIM_OC_Start_IT+0x238>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4a21      	ldr	r2, [pc, #132]	@ (800ed54 <HAL_TIM_OC_Start_IT+0x29c>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d00e      	beq.n	800ecf0 <HAL_TIM_OC_Start_IT+0x238>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4a20      	ldr	r2, [pc, #128]	@ (800ed58 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d009      	beq.n	800ecf0 <HAL_TIM_OC_Start_IT+0x238>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a17      	ldr	r2, [pc, #92]	@ (800ed40 <HAL_TIM_OC_Start_IT+0x288>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d004      	beq.n	800ecf0 <HAL_TIM_OC_Start_IT+0x238>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4a16      	ldr	r2, [pc, #88]	@ (800ed44 <HAL_TIM_OC_Start_IT+0x28c>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d115      	bne.n	800ed1c <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	689a      	ldr	r2, [r3, #8]
 800ecf6:	4b19      	ldr	r3, [pc, #100]	@ (800ed5c <HAL_TIM_OC_Start_IT+0x2a4>)
 800ecf8:	4013      	ands	r3, r2
 800ecfa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	2b06      	cmp	r3, #6
 800ed00:	d015      	beq.n	800ed2e <HAL_TIM_OC_Start_IT+0x276>
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ed08:	d011      	beq.n	800ed2e <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	681a      	ldr	r2, [r3, #0]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f042 0201 	orr.w	r2, r2, #1
 800ed18:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed1a:	e008      	b.n	800ed2e <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	f042 0201 	orr.w	r2, r2, #1
 800ed2a:	601a      	str	r2, [r3, #0]
 800ed2c:	e000      	b.n	800ed30 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed2e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ed30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3710      	adds	r7, #16
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	40012c00 	.word	0x40012c00
 800ed40:	40013400 	.word	0x40013400
 800ed44:	40014000 	.word	0x40014000
 800ed48:	40014400 	.word	0x40014400
 800ed4c:	40014800 	.word	0x40014800
 800ed50:	40000400 	.word	0x40000400
 800ed54:	40000800 	.word	0x40000800
 800ed58:	40000c00 	.word	0x40000c00
 800ed5c:	00010007 	.word	0x00010007

0800ed60 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	2b0c      	cmp	r3, #12
 800ed72:	d841      	bhi.n	800edf8 <HAL_TIM_OC_Stop_IT+0x98>
 800ed74:	a201      	add	r2, pc, #4	@ (adr r2, 800ed7c <HAL_TIM_OC_Stop_IT+0x1c>)
 800ed76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed7a:	bf00      	nop
 800ed7c:	0800edb1 	.word	0x0800edb1
 800ed80:	0800edf9 	.word	0x0800edf9
 800ed84:	0800edf9 	.word	0x0800edf9
 800ed88:	0800edf9 	.word	0x0800edf9
 800ed8c:	0800edc3 	.word	0x0800edc3
 800ed90:	0800edf9 	.word	0x0800edf9
 800ed94:	0800edf9 	.word	0x0800edf9
 800ed98:	0800edf9 	.word	0x0800edf9
 800ed9c:	0800edd5 	.word	0x0800edd5
 800eda0:	0800edf9 	.word	0x0800edf9
 800eda4:	0800edf9 	.word	0x0800edf9
 800eda8:	0800edf9 	.word	0x0800edf9
 800edac:	0800ede7 	.word	0x0800ede7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	68da      	ldr	r2, [r3, #12]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f022 0202 	bic.w	r2, r2, #2
 800edbe:	60da      	str	r2, [r3, #12]
      break;
 800edc0:	e01d      	b.n	800edfe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	68da      	ldr	r2, [r3, #12]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f022 0204 	bic.w	r2, r2, #4
 800edd0:	60da      	str	r2, [r3, #12]
      break;
 800edd2:	e014      	b.n	800edfe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	68da      	ldr	r2, [r3, #12]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f022 0208 	bic.w	r2, r2, #8
 800ede2:	60da      	str	r2, [r3, #12]
      break;
 800ede4:	e00b      	b.n	800edfe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	68da      	ldr	r2, [r3, #12]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f022 0210 	bic.w	r2, r2, #16
 800edf4:	60da      	str	r2, [r3, #12]
      break;
 800edf6:	e002      	b.n	800edfe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800edf8:	2301      	movs	r3, #1
 800edfa:	73fb      	strb	r3, [r7, #15]
      break;
 800edfc:	bf00      	nop
  }

  if (status == HAL_OK)
 800edfe:	7bfb      	ldrb	r3, [r7, #15]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	f040 8081 	bne.w	800ef08 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	6839      	ldr	r1, [r7, #0]
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f001 fbe4 	bl	80105dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	4a3e      	ldr	r2, [pc, #248]	@ (800ef14 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d013      	beq.n	800ee46 <HAL_TIM_OC_Stop_IT+0xe6>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4a3d      	ldr	r2, [pc, #244]	@ (800ef18 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d00e      	beq.n	800ee46 <HAL_TIM_OC_Stop_IT+0xe6>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a3b      	ldr	r2, [pc, #236]	@ (800ef1c <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d009      	beq.n	800ee46 <HAL_TIM_OC_Stop_IT+0xe6>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	4a3a      	ldr	r2, [pc, #232]	@ (800ef20 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d004      	beq.n	800ee46 <HAL_TIM_OC_Stop_IT+0xe6>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4a38      	ldr	r2, [pc, #224]	@ (800ef24 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d101      	bne.n	800ee4a <HAL_TIM_OC_Stop_IT+0xea>
 800ee46:	2301      	movs	r3, #1
 800ee48:	e000      	b.n	800ee4c <HAL_TIM_OC_Stop_IT+0xec>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d017      	beq.n	800ee80 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	6a1a      	ldr	r2, [r3, #32]
 800ee56:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ee5a:	4013      	ands	r3, r2
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d10f      	bne.n	800ee80 <HAL_TIM_OC_Stop_IT+0x120>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	6a1a      	ldr	r2, [r3, #32]
 800ee66:	f240 4344 	movw	r3, #1092	@ 0x444
 800ee6a:	4013      	ands	r3, r2
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d107      	bne.n	800ee80 <HAL_TIM_OC_Stop_IT+0x120>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ee7e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	6a1a      	ldr	r2, [r3, #32]
 800ee86:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ee8a:	4013      	ands	r3, r2
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d10f      	bne.n	800eeb0 <HAL_TIM_OC_Stop_IT+0x150>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	6a1a      	ldr	r2, [r3, #32]
 800ee96:	f240 4344 	movw	r3, #1092	@ 0x444
 800ee9a:	4013      	ands	r3, r2
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d107      	bne.n	800eeb0 <HAL_TIM_OC_Stop_IT+0x150>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f022 0201 	bic.w	r2, r2, #1
 800eeae:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d104      	bne.n	800eec0 <HAL_TIM_OC_Stop_IT+0x160>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2201      	movs	r2, #1
 800eeba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eebe:	e023      	b.n	800ef08 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	2b04      	cmp	r3, #4
 800eec4:	d104      	bne.n	800eed0 <HAL_TIM_OC_Stop_IT+0x170>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2201      	movs	r2, #1
 800eeca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eece:	e01b      	b.n	800ef08 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	2b08      	cmp	r3, #8
 800eed4:	d104      	bne.n	800eee0 <HAL_TIM_OC_Stop_IT+0x180>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2201      	movs	r2, #1
 800eeda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eede:	e013      	b.n	800ef08 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	2b0c      	cmp	r3, #12
 800eee4:	d104      	bne.n	800eef0 <HAL_TIM_OC_Stop_IT+0x190>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2201      	movs	r2, #1
 800eeea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eeee:	e00b      	b.n	800ef08 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	2b10      	cmp	r3, #16
 800eef4:	d104      	bne.n	800ef00 <HAL_TIM_OC_Stop_IT+0x1a0>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2201      	movs	r2, #1
 800eefa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eefe:	e003      	b.n	800ef08 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2201      	movs	r2, #1
 800ef04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800ef08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3710      	adds	r7, #16
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	40012c00 	.word	0x40012c00
 800ef18:	40013400 	.word	0x40013400
 800ef1c:	40014000 	.word	0x40014000
 800ef20:	40014400 	.word	0x40014400
 800ef24:	40014800 	.word	0x40014800

0800ef28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d101      	bne.n	800ef3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ef36:	2301      	movs	r3, #1
 800ef38:	e049      	b.n	800efce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ef40:	b2db      	uxtb	r3, r3
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d106      	bne.n	800ef54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 f841 	bl	800efd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2202      	movs	r2, #2
 800ef58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	3304      	adds	r3, #4
 800ef64:	4619      	mov	r1, r3
 800ef66:	4610      	mov	r0, r2
 800ef68:	f000 fd6a 	bl	800fa40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2201      	movs	r2, #1
 800ef78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2201      	movs	r2, #1
 800ef80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2201      	movs	r2, #1
 800ef88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2201      	movs	r2, #1
 800ef90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2201      	movs	r2, #1
 800ef98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2201      	movs	r2, #1
 800efa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2201      	movs	r2, #1
 800efb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2201      	movs	r2, #1
 800efb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2201      	movs	r2, #1
 800efc0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2201      	movs	r2, #1
 800efc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800efcc:	2300      	movs	r3, #0
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3708      	adds	r7, #8
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}

0800efd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800efd6:	b480      	push	{r7}
 800efd8:	b083      	sub	sp, #12
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800efde:	bf00      	nop
 800efe0:	370c      	adds	r7, #12
 800efe2:	46bd      	mov	sp, r7
 800efe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe8:	4770      	bx	lr
	...

0800efec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b084      	sub	sp, #16
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d109      	bne.n	800f010 <HAL_TIM_PWM_Start+0x24>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800f002:	b2db      	uxtb	r3, r3
 800f004:	2b01      	cmp	r3, #1
 800f006:	bf14      	ite	ne
 800f008:	2301      	movne	r3, #1
 800f00a:	2300      	moveq	r3, #0
 800f00c:	b2db      	uxtb	r3, r3
 800f00e:	e03c      	b.n	800f08a <HAL_TIM_PWM_Start+0x9e>
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	2b04      	cmp	r3, #4
 800f014:	d109      	bne.n	800f02a <HAL_TIM_PWM_Start+0x3e>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800f01c:	b2db      	uxtb	r3, r3
 800f01e:	2b01      	cmp	r3, #1
 800f020:	bf14      	ite	ne
 800f022:	2301      	movne	r3, #1
 800f024:	2300      	moveq	r3, #0
 800f026:	b2db      	uxtb	r3, r3
 800f028:	e02f      	b.n	800f08a <HAL_TIM_PWM_Start+0x9e>
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	2b08      	cmp	r3, #8
 800f02e:	d109      	bne.n	800f044 <HAL_TIM_PWM_Start+0x58>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f036:	b2db      	uxtb	r3, r3
 800f038:	2b01      	cmp	r3, #1
 800f03a:	bf14      	ite	ne
 800f03c:	2301      	movne	r3, #1
 800f03e:	2300      	moveq	r3, #0
 800f040:	b2db      	uxtb	r3, r3
 800f042:	e022      	b.n	800f08a <HAL_TIM_PWM_Start+0x9e>
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	2b0c      	cmp	r3, #12
 800f048:	d109      	bne.n	800f05e <HAL_TIM_PWM_Start+0x72>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f050:	b2db      	uxtb	r3, r3
 800f052:	2b01      	cmp	r3, #1
 800f054:	bf14      	ite	ne
 800f056:	2301      	movne	r3, #1
 800f058:	2300      	moveq	r3, #0
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	e015      	b.n	800f08a <HAL_TIM_PWM_Start+0x9e>
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	2b10      	cmp	r3, #16
 800f062:	d109      	bne.n	800f078 <HAL_TIM_PWM_Start+0x8c>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f06a:	b2db      	uxtb	r3, r3
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	bf14      	ite	ne
 800f070:	2301      	movne	r3, #1
 800f072:	2300      	moveq	r3, #0
 800f074:	b2db      	uxtb	r3, r3
 800f076:	e008      	b.n	800f08a <HAL_TIM_PWM_Start+0x9e>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f07e:	b2db      	uxtb	r3, r3
 800f080:	2b01      	cmp	r3, #1
 800f082:	bf14      	ite	ne
 800f084:	2301      	movne	r3, #1
 800f086:	2300      	moveq	r3, #0
 800f088:	b2db      	uxtb	r3, r3
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d001      	beq.n	800f092 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f08e:	2301      	movs	r3, #1
 800f090:	e09c      	b.n	800f1cc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d104      	bne.n	800f0a2 <HAL_TIM_PWM_Start+0xb6>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2202      	movs	r2, #2
 800f09c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f0a0:	e023      	b.n	800f0ea <HAL_TIM_PWM_Start+0xfe>
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	2b04      	cmp	r3, #4
 800f0a6:	d104      	bne.n	800f0b2 <HAL_TIM_PWM_Start+0xc6>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2202      	movs	r2, #2
 800f0ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f0b0:	e01b      	b.n	800f0ea <HAL_TIM_PWM_Start+0xfe>
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	2b08      	cmp	r3, #8
 800f0b6:	d104      	bne.n	800f0c2 <HAL_TIM_PWM_Start+0xd6>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2202      	movs	r2, #2
 800f0bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f0c0:	e013      	b.n	800f0ea <HAL_TIM_PWM_Start+0xfe>
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	2b0c      	cmp	r3, #12
 800f0c6:	d104      	bne.n	800f0d2 <HAL_TIM_PWM_Start+0xe6>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2202      	movs	r2, #2
 800f0cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f0d0:	e00b      	b.n	800f0ea <HAL_TIM_PWM_Start+0xfe>
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	2b10      	cmp	r3, #16
 800f0d6:	d104      	bne.n	800f0e2 <HAL_TIM_PWM_Start+0xf6>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2202      	movs	r2, #2
 800f0dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f0e0:	e003      	b.n	800f0ea <HAL_TIM_PWM_Start+0xfe>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2202      	movs	r2, #2
 800f0e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	6839      	ldr	r1, [r7, #0]
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f001 fa72 	bl	80105dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4a35      	ldr	r2, [pc, #212]	@ (800f1d4 <HAL_TIM_PWM_Start+0x1e8>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d013      	beq.n	800f12a <HAL_TIM_PWM_Start+0x13e>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	4a34      	ldr	r2, [pc, #208]	@ (800f1d8 <HAL_TIM_PWM_Start+0x1ec>)
 800f108:	4293      	cmp	r3, r2
 800f10a:	d00e      	beq.n	800f12a <HAL_TIM_PWM_Start+0x13e>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4a32      	ldr	r2, [pc, #200]	@ (800f1dc <HAL_TIM_PWM_Start+0x1f0>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d009      	beq.n	800f12a <HAL_TIM_PWM_Start+0x13e>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	4a31      	ldr	r2, [pc, #196]	@ (800f1e0 <HAL_TIM_PWM_Start+0x1f4>)
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d004      	beq.n	800f12a <HAL_TIM_PWM_Start+0x13e>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4a2f      	ldr	r2, [pc, #188]	@ (800f1e4 <HAL_TIM_PWM_Start+0x1f8>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d101      	bne.n	800f12e <HAL_TIM_PWM_Start+0x142>
 800f12a:	2301      	movs	r3, #1
 800f12c:	e000      	b.n	800f130 <HAL_TIM_PWM_Start+0x144>
 800f12e:	2300      	movs	r3, #0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d007      	beq.n	800f144 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f142:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	4a22      	ldr	r2, [pc, #136]	@ (800f1d4 <HAL_TIM_PWM_Start+0x1e8>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d01d      	beq.n	800f18a <HAL_TIM_PWM_Start+0x19e>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f156:	d018      	beq.n	800f18a <HAL_TIM_PWM_Start+0x19e>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	4a22      	ldr	r2, [pc, #136]	@ (800f1e8 <HAL_TIM_PWM_Start+0x1fc>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d013      	beq.n	800f18a <HAL_TIM_PWM_Start+0x19e>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	4a21      	ldr	r2, [pc, #132]	@ (800f1ec <HAL_TIM_PWM_Start+0x200>)
 800f168:	4293      	cmp	r3, r2
 800f16a:	d00e      	beq.n	800f18a <HAL_TIM_PWM_Start+0x19e>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	4a1f      	ldr	r2, [pc, #124]	@ (800f1f0 <HAL_TIM_PWM_Start+0x204>)
 800f172:	4293      	cmp	r3, r2
 800f174:	d009      	beq.n	800f18a <HAL_TIM_PWM_Start+0x19e>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	4a17      	ldr	r2, [pc, #92]	@ (800f1d8 <HAL_TIM_PWM_Start+0x1ec>)
 800f17c:	4293      	cmp	r3, r2
 800f17e:	d004      	beq.n	800f18a <HAL_TIM_PWM_Start+0x19e>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	4a15      	ldr	r2, [pc, #84]	@ (800f1dc <HAL_TIM_PWM_Start+0x1f0>)
 800f186:	4293      	cmp	r3, r2
 800f188:	d115      	bne.n	800f1b6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	689a      	ldr	r2, [r3, #8]
 800f190:	4b18      	ldr	r3, [pc, #96]	@ (800f1f4 <HAL_TIM_PWM_Start+0x208>)
 800f192:	4013      	ands	r3, r2
 800f194:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2b06      	cmp	r3, #6
 800f19a:	d015      	beq.n	800f1c8 <HAL_TIM_PWM_Start+0x1dc>
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f1a2:	d011      	beq.n	800f1c8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f042 0201 	orr.w	r2, r2, #1
 800f1b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1b4:	e008      	b.n	800f1c8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	681a      	ldr	r2, [r3, #0]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	f042 0201 	orr.w	r2, r2, #1
 800f1c4:	601a      	str	r2, [r3, #0]
 800f1c6:	e000      	b.n	800f1ca <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f1ca:	2300      	movs	r3, #0
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3710      	adds	r7, #16
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	40012c00 	.word	0x40012c00
 800f1d8:	40013400 	.word	0x40013400
 800f1dc:	40014000 	.word	0x40014000
 800f1e0:	40014400 	.word	0x40014400
 800f1e4:	40014800 	.word	0x40014800
 800f1e8:	40000400 	.word	0x40000400
 800f1ec:	40000800 	.word	0x40000800
 800f1f0:	40000c00 	.word	0x40000c00
 800f1f4:	00010007 	.word	0x00010007

0800f1f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2200      	movs	r2, #0
 800f208:	6839      	ldr	r1, [r7, #0]
 800f20a:	4618      	mov	r0, r3
 800f20c:	f001 f9e6 	bl	80105dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	4a3e      	ldr	r2, [pc, #248]	@ (800f310 <HAL_TIM_PWM_Stop+0x118>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d013      	beq.n	800f242 <HAL_TIM_PWM_Stop+0x4a>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	4a3d      	ldr	r2, [pc, #244]	@ (800f314 <HAL_TIM_PWM_Stop+0x11c>)
 800f220:	4293      	cmp	r3, r2
 800f222:	d00e      	beq.n	800f242 <HAL_TIM_PWM_Stop+0x4a>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	4a3b      	ldr	r2, [pc, #236]	@ (800f318 <HAL_TIM_PWM_Stop+0x120>)
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d009      	beq.n	800f242 <HAL_TIM_PWM_Stop+0x4a>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	4a3a      	ldr	r2, [pc, #232]	@ (800f31c <HAL_TIM_PWM_Stop+0x124>)
 800f234:	4293      	cmp	r3, r2
 800f236:	d004      	beq.n	800f242 <HAL_TIM_PWM_Stop+0x4a>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	4a38      	ldr	r2, [pc, #224]	@ (800f320 <HAL_TIM_PWM_Stop+0x128>)
 800f23e:	4293      	cmp	r3, r2
 800f240:	d101      	bne.n	800f246 <HAL_TIM_PWM_Stop+0x4e>
 800f242:	2301      	movs	r3, #1
 800f244:	e000      	b.n	800f248 <HAL_TIM_PWM_Stop+0x50>
 800f246:	2300      	movs	r3, #0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d017      	beq.n	800f27c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	6a1a      	ldr	r2, [r3, #32]
 800f252:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f256:	4013      	ands	r3, r2
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d10f      	bne.n	800f27c <HAL_TIM_PWM_Stop+0x84>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	6a1a      	ldr	r2, [r3, #32]
 800f262:	f240 4344 	movw	r3, #1092	@ 0x444
 800f266:	4013      	ands	r3, r2
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d107      	bne.n	800f27c <HAL_TIM_PWM_Stop+0x84>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f27a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	6a1a      	ldr	r2, [r3, #32]
 800f282:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f286:	4013      	ands	r3, r2
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d10f      	bne.n	800f2ac <HAL_TIM_PWM_Stop+0xb4>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	6a1a      	ldr	r2, [r3, #32]
 800f292:	f240 4344 	movw	r3, #1092	@ 0x444
 800f296:	4013      	ands	r3, r2
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d107      	bne.n	800f2ac <HAL_TIM_PWM_Stop+0xb4>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	681a      	ldr	r2, [r3, #0]
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	f022 0201 	bic.w	r2, r2, #1
 800f2aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d104      	bne.n	800f2bc <HAL_TIM_PWM_Stop+0xc4>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2201      	movs	r2, #1
 800f2b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f2ba:	e023      	b.n	800f304 <HAL_TIM_PWM_Stop+0x10c>
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	2b04      	cmp	r3, #4
 800f2c0:	d104      	bne.n	800f2cc <HAL_TIM_PWM_Stop+0xd4>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2201      	movs	r2, #1
 800f2c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f2ca:	e01b      	b.n	800f304 <HAL_TIM_PWM_Stop+0x10c>
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	2b08      	cmp	r3, #8
 800f2d0:	d104      	bne.n	800f2dc <HAL_TIM_PWM_Stop+0xe4>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f2da:	e013      	b.n	800f304 <HAL_TIM_PWM_Stop+0x10c>
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	2b0c      	cmp	r3, #12
 800f2e0:	d104      	bne.n	800f2ec <HAL_TIM_PWM_Stop+0xf4>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f2ea:	e00b      	b.n	800f304 <HAL_TIM_PWM_Stop+0x10c>
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	2b10      	cmp	r3, #16
 800f2f0:	d104      	bne.n	800f2fc <HAL_TIM_PWM_Stop+0x104>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f2fa:	e003      	b.n	800f304 <HAL_TIM_PWM_Stop+0x10c>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2201      	movs	r2, #1
 800f300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800f304:	2300      	movs	r3, #0
}
 800f306:	4618      	mov	r0, r3
 800f308:	3708      	adds	r7, #8
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
 800f30e:	bf00      	nop
 800f310:	40012c00 	.word	0x40012c00
 800f314:	40013400 	.word	0x40013400
 800f318:	40014000 	.word	0x40014000
 800f31c:	40014400 	.word	0x40014400
 800f320:	40014800 	.word	0x40014800

0800f324 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d101      	bne.n	800f336 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800f332:	2301      	movs	r3, #1
 800f334:	e049      	b.n	800f3ca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d106      	bne.n	800f350 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2200      	movs	r2, #0
 800f346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f7f5 fbb8 	bl	8004ac0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2202      	movs	r2, #2
 800f354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	3304      	adds	r3, #4
 800f360:	4619      	mov	r1, r3
 800f362:	4610      	mov	r0, r2
 800f364:	f000 fb6c 	bl	800fa40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2201      	movs	r2, #1
 800f36c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2201      	movs	r2, #1
 800f374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2201      	movs	r2, #1
 800f37c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2201      	movs	r2, #1
 800f384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2201      	movs	r2, #1
 800f38c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2201      	movs	r2, #1
 800f394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2201      	movs	r2, #1
 800f39c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f3c8:	2300      	movs	r3, #0
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	3708      	adds	r7, #8
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
	...

0800f3d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b086      	sub	sp, #24
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	60b9      	str	r1, [r7, #8]
 800f3de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	d101      	bne.n	800f3f2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800f3ee:	2302      	movs	r3, #2
 800f3f0:	e066      	b.n	800f4c0 <HAL_TIM_OC_ConfigChannel+0xec>
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2b14      	cmp	r3, #20
 800f3fe:	d857      	bhi.n	800f4b0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800f400:	a201      	add	r2, pc, #4	@ (adr r2, 800f408 <HAL_TIM_OC_ConfigChannel+0x34>)
 800f402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f406:	bf00      	nop
 800f408:	0800f45d 	.word	0x0800f45d
 800f40c:	0800f4b1 	.word	0x0800f4b1
 800f410:	0800f4b1 	.word	0x0800f4b1
 800f414:	0800f4b1 	.word	0x0800f4b1
 800f418:	0800f46b 	.word	0x0800f46b
 800f41c:	0800f4b1 	.word	0x0800f4b1
 800f420:	0800f4b1 	.word	0x0800f4b1
 800f424:	0800f4b1 	.word	0x0800f4b1
 800f428:	0800f479 	.word	0x0800f479
 800f42c:	0800f4b1 	.word	0x0800f4b1
 800f430:	0800f4b1 	.word	0x0800f4b1
 800f434:	0800f4b1 	.word	0x0800f4b1
 800f438:	0800f487 	.word	0x0800f487
 800f43c:	0800f4b1 	.word	0x0800f4b1
 800f440:	0800f4b1 	.word	0x0800f4b1
 800f444:	0800f4b1 	.word	0x0800f4b1
 800f448:	0800f495 	.word	0x0800f495
 800f44c:	0800f4b1 	.word	0x0800f4b1
 800f450:	0800f4b1 	.word	0x0800f4b1
 800f454:	0800f4b1 	.word	0x0800f4b1
 800f458:	0800f4a3 	.word	0x0800f4a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	68b9      	ldr	r1, [r7, #8]
 800f462:	4618      	mov	r0, r3
 800f464:	f000 fb92 	bl	800fb8c <TIM_OC1_SetConfig>
      break;
 800f468:	e025      	b.n	800f4b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	68b9      	ldr	r1, [r7, #8]
 800f470:	4618      	mov	r0, r3
 800f472:	f000 fc1b 	bl	800fcac <TIM_OC2_SetConfig>
      break;
 800f476:	e01e      	b.n	800f4b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	68b9      	ldr	r1, [r7, #8]
 800f47e:	4618      	mov	r0, r3
 800f480:	f000 fc9e 	bl	800fdc0 <TIM_OC3_SetConfig>
      break;
 800f484:	e017      	b.n	800f4b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	68b9      	ldr	r1, [r7, #8]
 800f48c:	4618      	mov	r0, r3
 800f48e:	f000 fd1f 	bl	800fed0 <TIM_OC4_SetConfig>
      break;
 800f492:	e010      	b.n	800f4b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	68b9      	ldr	r1, [r7, #8]
 800f49a:	4618      	mov	r0, r3
 800f49c:	f000 fd82 	bl	800ffa4 <TIM_OC5_SetConfig>
      break;
 800f4a0:	e009      	b.n	800f4b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	68b9      	ldr	r1, [r7, #8]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f000 fddf 	bl	801006c <TIM_OC6_SetConfig>
      break;
 800f4ae:	e002      	b.n	800f4b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	75fb      	strb	r3, [r7, #23]
      break;
 800f4b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f4be:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3718      	adds	r7, #24
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b086      	sub	sp, #24
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d101      	bne.n	800f4e6 <HAL_TIM_IC_ConfigChannel+0x1e>
 800f4e2:	2302      	movs	r3, #2
 800f4e4:	e088      	b.n	800f5f8 <HAL_TIM_IC_ConfigChannel+0x130>
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d11b      	bne.n	800f52c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800f504:	f000 feac 	bl	8010260 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	699a      	ldr	r2, [r3, #24]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f022 020c 	bic.w	r2, r2, #12
 800f516:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	6999      	ldr	r1, [r3, #24]
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	689a      	ldr	r2, [r3, #8]
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	430a      	orrs	r2, r1
 800f528:	619a      	str	r2, [r3, #24]
 800f52a:	e060      	b.n	800f5ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2b04      	cmp	r3, #4
 800f530:	d11c      	bne.n	800f56c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800f542:	f000 ff2a 	bl	801039a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	699a      	ldr	r2, [r3, #24]
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800f554:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	6999      	ldr	r1, [r3, #24]
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	021a      	lsls	r2, r3, #8
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	430a      	orrs	r2, r1
 800f568:	619a      	str	r2, [r3, #24]
 800f56a:	e040      	b.n	800f5ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2b08      	cmp	r3, #8
 800f570:	d11b      	bne.n	800f5aa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800f582:	f000 ff77 	bl	8010474 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	69da      	ldr	r2, [r3, #28]
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	f022 020c 	bic.w	r2, r2, #12
 800f594:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	69d9      	ldr	r1, [r3, #28]
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	689a      	ldr	r2, [r3, #8]
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	430a      	orrs	r2, r1
 800f5a6:	61da      	str	r2, [r3, #28]
 800f5a8:	e021      	b.n	800f5ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2b0c      	cmp	r3, #12
 800f5ae:	d11c      	bne.n	800f5ea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800f5c0:	f000 ff94 	bl	80104ec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	69da      	ldr	r2, [r3, #28]
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800f5d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	69d9      	ldr	r1, [r3, #28]
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	689b      	ldr	r3, [r3, #8]
 800f5de:	021a      	lsls	r2, r3, #8
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	430a      	orrs	r2, r1
 800f5e6:	61da      	str	r2, [r3, #28]
 800f5e8:	e001      	b.n	800f5ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f5f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3718      	adds	r7, #24
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b086      	sub	sp, #24
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f60c:	2300      	movs	r3, #0
 800f60e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f616:	2b01      	cmp	r3, #1
 800f618:	d101      	bne.n	800f61e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f61a:	2302      	movs	r3, #2
 800f61c:	e0ff      	b.n	800f81e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	2201      	movs	r2, #1
 800f622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2b14      	cmp	r3, #20
 800f62a:	f200 80f0 	bhi.w	800f80e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f62e:	a201      	add	r2, pc, #4	@ (adr r2, 800f634 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f634:	0800f689 	.word	0x0800f689
 800f638:	0800f80f 	.word	0x0800f80f
 800f63c:	0800f80f 	.word	0x0800f80f
 800f640:	0800f80f 	.word	0x0800f80f
 800f644:	0800f6c9 	.word	0x0800f6c9
 800f648:	0800f80f 	.word	0x0800f80f
 800f64c:	0800f80f 	.word	0x0800f80f
 800f650:	0800f80f 	.word	0x0800f80f
 800f654:	0800f70b 	.word	0x0800f70b
 800f658:	0800f80f 	.word	0x0800f80f
 800f65c:	0800f80f 	.word	0x0800f80f
 800f660:	0800f80f 	.word	0x0800f80f
 800f664:	0800f74b 	.word	0x0800f74b
 800f668:	0800f80f 	.word	0x0800f80f
 800f66c:	0800f80f 	.word	0x0800f80f
 800f670:	0800f80f 	.word	0x0800f80f
 800f674:	0800f78d 	.word	0x0800f78d
 800f678:	0800f80f 	.word	0x0800f80f
 800f67c:	0800f80f 	.word	0x0800f80f
 800f680:	0800f80f 	.word	0x0800f80f
 800f684:	0800f7cd 	.word	0x0800f7cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	68b9      	ldr	r1, [r7, #8]
 800f68e:	4618      	mov	r0, r3
 800f690:	f000 fa7c 	bl	800fb8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	699a      	ldr	r2, [r3, #24]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f042 0208 	orr.w	r2, r2, #8
 800f6a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	699a      	ldr	r2, [r3, #24]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f022 0204 	bic.w	r2, r2, #4
 800f6b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	6999      	ldr	r1, [r3, #24]
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	691a      	ldr	r2, [r3, #16]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	430a      	orrs	r2, r1
 800f6c4:	619a      	str	r2, [r3, #24]
      break;
 800f6c6:	e0a5      	b.n	800f814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	68b9      	ldr	r1, [r7, #8]
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f000 faec 	bl	800fcac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	699a      	ldr	r2, [r3, #24]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f6e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	699a      	ldr	r2, [r3, #24]
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f6f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	6999      	ldr	r1, [r3, #24]
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	691b      	ldr	r3, [r3, #16]
 800f6fe:	021a      	lsls	r2, r3, #8
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	430a      	orrs	r2, r1
 800f706:	619a      	str	r2, [r3, #24]
      break;
 800f708:	e084      	b.n	800f814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	68b9      	ldr	r1, [r7, #8]
 800f710:	4618      	mov	r0, r3
 800f712:	f000 fb55 	bl	800fdc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	69da      	ldr	r2, [r3, #28]
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f042 0208 	orr.w	r2, r2, #8
 800f724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	69da      	ldr	r2, [r3, #28]
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f022 0204 	bic.w	r2, r2, #4
 800f734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	69d9      	ldr	r1, [r3, #28]
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	691a      	ldr	r2, [r3, #16]
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	430a      	orrs	r2, r1
 800f746:	61da      	str	r2, [r3, #28]
      break;
 800f748:	e064      	b.n	800f814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	68b9      	ldr	r1, [r7, #8]
 800f750:	4618      	mov	r0, r3
 800f752:	f000 fbbd 	bl	800fed0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	69da      	ldr	r2, [r3, #28]
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	69da      	ldr	r2, [r3, #28]
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	69d9      	ldr	r1, [r3, #28]
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	691b      	ldr	r3, [r3, #16]
 800f780:	021a      	lsls	r2, r3, #8
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	430a      	orrs	r2, r1
 800f788:	61da      	str	r2, [r3, #28]
      break;
 800f78a:	e043      	b.n	800f814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	68b9      	ldr	r1, [r7, #8]
 800f792:	4618      	mov	r0, r3
 800f794:	f000 fc06 	bl	800ffa4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f042 0208 	orr.w	r2, r2, #8
 800f7a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f022 0204 	bic.w	r2, r2, #4
 800f7b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	691a      	ldr	r2, [r3, #16]
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	430a      	orrs	r2, r1
 800f7c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f7ca:	e023      	b.n	800f814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	68b9      	ldr	r1, [r7, #8]
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f000 fc4a 	bl	801006c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f7e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f7f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	691b      	ldr	r3, [r3, #16]
 800f802:	021a      	lsls	r2, r3, #8
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	430a      	orrs	r2, r1
 800f80a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f80c:	e002      	b.n	800f814 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f80e:	2301      	movs	r3, #1
 800f810:	75fb      	strb	r3, [r7, #23]
      break;
 800f812:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2200      	movs	r2, #0
 800f818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f81c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3718      	adds	r7, #24
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop

0800f828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b084      	sub	sp, #16
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f832:	2300      	movs	r3, #0
 800f834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f83c:	2b01      	cmp	r3, #1
 800f83e:	d101      	bne.n	800f844 <HAL_TIM_ConfigClockSource+0x1c>
 800f840:	2302      	movs	r3, #2
 800f842:	e0b6      	b.n	800f9b2 <HAL_TIM_ConfigClockSource+0x18a>
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2201      	movs	r2, #1
 800f848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2202      	movs	r2, #2
 800f850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	689b      	ldr	r3, [r3, #8]
 800f85a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f862:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f86e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	68ba      	ldr	r2, [r7, #8]
 800f876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f880:	d03e      	beq.n	800f900 <HAL_TIM_ConfigClockSource+0xd8>
 800f882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f886:	f200 8087 	bhi.w	800f998 <HAL_TIM_ConfigClockSource+0x170>
 800f88a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f88e:	f000 8086 	beq.w	800f99e <HAL_TIM_ConfigClockSource+0x176>
 800f892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f896:	d87f      	bhi.n	800f998 <HAL_TIM_ConfigClockSource+0x170>
 800f898:	2b70      	cmp	r3, #112	@ 0x70
 800f89a:	d01a      	beq.n	800f8d2 <HAL_TIM_ConfigClockSource+0xaa>
 800f89c:	2b70      	cmp	r3, #112	@ 0x70
 800f89e:	d87b      	bhi.n	800f998 <HAL_TIM_ConfigClockSource+0x170>
 800f8a0:	2b60      	cmp	r3, #96	@ 0x60
 800f8a2:	d050      	beq.n	800f946 <HAL_TIM_ConfigClockSource+0x11e>
 800f8a4:	2b60      	cmp	r3, #96	@ 0x60
 800f8a6:	d877      	bhi.n	800f998 <HAL_TIM_ConfigClockSource+0x170>
 800f8a8:	2b50      	cmp	r3, #80	@ 0x50
 800f8aa:	d03c      	beq.n	800f926 <HAL_TIM_ConfigClockSource+0xfe>
 800f8ac:	2b50      	cmp	r3, #80	@ 0x50
 800f8ae:	d873      	bhi.n	800f998 <HAL_TIM_ConfigClockSource+0x170>
 800f8b0:	2b40      	cmp	r3, #64	@ 0x40
 800f8b2:	d058      	beq.n	800f966 <HAL_TIM_ConfigClockSource+0x13e>
 800f8b4:	2b40      	cmp	r3, #64	@ 0x40
 800f8b6:	d86f      	bhi.n	800f998 <HAL_TIM_ConfigClockSource+0x170>
 800f8b8:	2b30      	cmp	r3, #48	@ 0x30
 800f8ba:	d064      	beq.n	800f986 <HAL_TIM_ConfigClockSource+0x15e>
 800f8bc:	2b30      	cmp	r3, #48	@ 0x30
 800f8be:	d86b      	bhi.n	800f998 <HAL_TIM_ConfigClockSource+0x170>
 800f8c0:	2b20      	cmp	r3, #32
 800f8c2:	d060      	beq.n	800f986 <HAL_TIM_ConfigClockSource+0x15e>
 800f8c4:	2b20      	cmp	r3, #32
 800f8c6:	d867      	bhi.n	800f998 <HAL_TIM_ConfigClockSource+0x170>
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d05c      	beq.n	800f986 <HAL_TIM_ConfigClockSource+0x15e>
 800f8cc:	2b10      	cmp	r3, #16
 800f8ce:	d05a      	beq.n	800f986 <HAL_TIM_ConfigClockSource+0x15e>
 800f8d0:	e062      	b.n	800f998 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f8e2:	f000 fe5b 	bl	801059c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	689b      	ldr	r3, [r3, #8]
 800f8ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f8f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	68ba      	ldr	r2, [r7, #8]
 800f8fc:	609a      	str	r2, [r3, #8]
      break;
 800f8fe:	e04f      	b.n	800f9a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f910:	f000 fe44 	bl	801059c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	689a      	ldr	r2, [r3, #8]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f922:	609a      	str	r2, [r3, #8]
      break;
 800f924:	e03c      	b.n	800f9a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f932:	461a      	mov	r2, r3
 800f934:	f000 fd02 	bl	801033c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	2150      	movs	r1, #80	@ 0x50
 800f93e:	4618      	mov	r0, r3
 800f940:	f000 fe11 	bl	8010566 <TIM_ITRx_SetConfig>
      break;
 800f944:	e02c      	b.n	800f9a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f952:	461a      	mov	r2, r3
 800f954:	f000 fd5e 	bl	8010414 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	2160      	movs	r1, #96	@ 0x60
 800f95e:	4618      	mov	r0, r3
 800f960:	f000 fe01 	bl	8010566 <TIM_ITRx_SetConfig>
      break;
 800f964:	e01c      	b.n	800f9a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f972:	461a      	mov	r2, r3
 800f974:	f000 fce2 	bl	801033c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	2140      	movs	r1, #64	@ 0x40
 800f97e:	4618      	mov	r0, r3
 800f980:	f000 fdf1 	bl	8010566 <TIM_ITRx_SetConfig>
      break;
 800f984:	e00c      	b.n	800f9a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681a      	ldr	r2, [r3, #0]
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	4619      	mov	r1, r3
 800f990:	4610      	mov	r0, r2
 800f992:	f000 fde8 	bl	8010566 <TIM_ITRx_SetConfig>
      break;
 800f996:	e003      	b.n	800f9a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800f998:	2301      	movs	r3, #1
 800f99a:	73fb      	strb	r3, [r7, #15]
      break;
 800f99c:	e000      	b.n	800f9a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800f99e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b082      	sub	sp, #8
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
 800f9c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	d101      	bne.n	800f9d2 <HAL_TIM_SlaveConfigSynchro+0x18>
 800f9ce:	2302      	movs	r3, #2
 800f9d0:	e031      	b.n	800fa36 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2202      	movs	r2, #2
 800f9de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800f9e2:	6839      	ldr	r1, [r7, #0]
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f000 fba7 	bl	8010138 <TIM_SlaveTimer_SetConfig>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d009      	beq.n	800fa04 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800fa00:	2301      	movs	r3, #1
 800fa02:	e018      	b.n	800fa36 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	68da      	ldr	r2, [r3, #12]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fa12:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	68da      	ldr	r2, [r3, #12]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fa22:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2201      	movs	r2, #1
 800fa28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fa34:	2300      	movs	r3, #0
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3708      	adds	r7, #8
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
	...

0800fa40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b085      	sub	sp, #20
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	4a46      	ldr	r2, [pc, #280]	@ (800fb6c <TIM_Base_SetConfig+0x12c>)
 800fa54:	4293      	cmp	r3, r2
 800fa56:	d013      	beq.n	800fa80 <TIM_Base_SetConfig+0x40>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa5e:	d00f      	beq.n	800fa80 <TIM_Base_SetConfig+0x40>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	4a43      	ldr	r2, [pc, #268]	@ (800fb70 <TIM_Base_SetConfig+0x130>)
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d00b      	beq.n	800fa80 <TIM_Base_SetConfig+0x40>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	4a42      	ldr	r2, [pc, #264]	@ (800fb74 <TIM_Base_SetConfig+0x134>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d007      	beq.n	800fa80 <TIM_Base_SetConfig+0x40>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	4a41      	ldr	r2, [pc, #260]	@ (800fb78 <TIM_Base_SetConfig+0x138>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d003      	beq.n	800fa80 <TIM_Base_SetConfig+0x40>
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	4a40      	ldr	r2, [pc, #256]	@ (800fb7c <TIM_Base_SetConfig+0x13c>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d108      	bne.n	800fa92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	68fa      	ldr	r2, [r7, #12]
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	4a35      	ldr	r2, [pc, #212]	@ (800fb6c <TIM_Base_SetConfig+0x12c>)
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d01f      	beq.n	800fada <TIM_Base_SetConfig+0x9a>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800faa0:	d01b      	beq.n	800fada <TIM_Base_SetConfig+0x9a>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	4a32      	ldr	r2, [pc, #200]	@ (800fb70 <TIM_Base_SetConfig+0x130>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d017      	beq.n	800fada <TIM_Base_SetConfig+0x9a>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4a31      	ldr	r2, [pc, #196]	@ (800fb74 <TIM_Base_SetConfig+0x134>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d013      	beq.n	800fada <TIM_Base_SetConfig+0x9a>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	4a30      	ldr	r2, [pc, #192]	@ (800fb78 <TIM_Base_SetConfig+0x138>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d00f      	beq.n	800fada <TIM_Base_SetConfig+0x9a>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4a2f      	ldr	r2, [pc, #188]	@ (800fb7c <TIM_Base_SetConfig+0x13c>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d00b      	beq.n	800fada <TIM_Base_SetConfig+0x9a>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	4a2e      	ldr	r2, [pc, #184]	@ (800fb80 <TIM_Base_SetConfig+0x140>)
 800fac6:	4293      	cmp	r3, r2
 800fac8:	d007      	beq.n	800fada <TIM_Base_SetConfig+0x9a>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	4a2d      	ldr	r2, [pc, #180]	@ (800fb84 <TIM_Base_SetConfig+0x144>)
 800face:	4293      	cmp	r3, r2
 800fad0:	d003      	beq.n	800fada <TIM_Base_SetConfig+0x9a>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	4a2c      	ldr	r2, [pc, #176]	@ (800fb88 <TIM_Base_SetConfig+0x148>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d108      	bne.n	800faec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	68db      	ldr	r3, [r3, #12]
 800fae6:	68fa      	ldr	r2, [r7, #12]
 800fae8:	4313      	orrs	r3, r2
 800faea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	695b      	ldr	r3, [r3, #20]
 800faf6:	4313      	orrs	r3, r2
 800faf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	689a      	ldr	r2, [r3, #8]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	4a16      	ldr	r2, [pc, #88]	@ (800fb6c <TIM_Base_SetConfig+0x12c>)
 800fb14:	4293      	cmp	r3, r2
 800fb16:	d00f      	beq.n	800fb38 <TIM_Base_SetConfig+0xf8>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	4a18      	ldr	r2, [pc, #96]	@ (800fb7c <TIM_Base_SetConfig+0x13c>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d00b      	beq.n	800fb38 <TIM_Base_SetConfig+0xf8>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4a17      	ldr	r2, [pc, #92]	@ (800fb80 <TIM_Base_SetConfig+0x140>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d007      	beq.n	800fb38 <TIM_Base_SetConfig+0xf8>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4a16      	ldr	r2, [pc, #88]	@ (800fb84 <TIM_Base_SetConfig+0x144>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d003      	beq.n	800fb38 <TIM_Base_SetConfig+0xf8>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4a15      	ldr	r2, [pc, #84]	@ (800fb88 <TIM_Base_SetConfig+0x148>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d103      	bne.n	800fb40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	691a      	ldr	r2, [r3, #16]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2201      	movs	r2, #1
 800fb44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	691b      	ldr	r3, [r3, #16]
 800fb4a:	f003 0301 	and.w	r3, r3, #1
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d105      	bne.n	800fb5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	691b      	ldr	r3, [r3, #16]
 800fb56:	f023 0201 	bic.w	r2, r3, #1
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	611a      	str	r2, [r3, #16]
  }
}
 800fb5e:	bf00      	nop
 800fb60:	3714      	adds	r7, #20
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr
 800fb6a:	bf00      	nop
 800fb6c:	40012c00 	.word	0x40012c00
 800fb70:	40000400 	.word	0x40000400
 800fb74:	40000800 	.word	0x40000800
 800fb78:	40000c00 	.word	0x40000c00
 800fb7c:	40013400 	.word	0x40013400
 800fb80:	40014000 	.word	0x40014000
 800fb84:	40014400 	.word	0x40014400
 800fb88:	40014800 	.word	0x40014800

0800fb8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b087      	sub	sp, #28
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6a1b      	ldr	r3, [r3, #32]
 800fb9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6a1b      	ldr	r3, [r3, #32]
 800fba0:	f023 0201 	bic.w	r2, r3, #1
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	699b      	ldr	r3, [r3, #24]
 800fbb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fbba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fbbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f023 0303 	bic.w	r3, r3, #3
 800fbc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	f023 0302 	bic.w	r3, r3, #2
 800fbd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	689b      	ldr	r3, [r3, #8]
 800fbde:	697a      	ldr	r2, [r7, #20]
 800fbe0:	4313      	orrs	r3, r2
 800fbe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	4a2c      	ldr	r2, [pc, #176]	@ (800fc98 <TIM_OC1_SetConfig+0x10c>)
 800fbe8:	4293      	cmp	r3, r2
 800fbea:	d00f      	beq.n	800fc0c <TIM_OC1_SetConfig+0x80>
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	4a2b      	ldr	r2, [pc, #172]	@ (800fc9c <TIM_OC1_SetConfig+0x110>)
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	d00b      	beq.n	800fc0c <TIM_OC1_SetConfig+0x80>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	4a2a      	ldr	r2, [pc, #168]	@ (800fca0 <TIM_OC1_SetConfig+0x114>)
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d007      	beq.n	800fc0c <TIM_OC1_SetConfig+0x80>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	4a29      	ldr	r2, [pc, #164]	@ (800fca4 <TIM_OC1_SetConfig+0x118>)
 800fc00:	4293      	cmp	r3, r2
 800fc02:	d003      	beq.n	800fc0c <TIM_OC1_SetConfig+0x80>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	4a28      	ldr	r2, [pc, #160]	@ (800fca8 <TIM_OC1_SetConfig+0x11c>)
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	d10c      	bne.n	800fc26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	f023 0308 	bic.w	r3, r3, #8
 800fc12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	68db      	ldr	r3, [r3, #12]
 800fc18:	697a      	ldr	r2, [r7, #20]
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	f023 0304 	bic.w	r3, r3, #4
 800fc24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	4a1b      	ldr	r2, [pc, #108]	@ (800fc98 <TIM_OC1_SetConfig+0x10c>)
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	d00f      	beq.n	800fc4e <TIM_OC1_SetConfig+0xc2>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	4a1a      	ldr	r2, [pc, #104]	@ (800fc9c <TIM_OC1_SetConfig+0x110>)
 800fc32:	4293      	cmp	r3, r2
 800fc34:	d00b      	beq.n	800fc4e <TIM_OC1_SetConfig+0xc2>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	4a19      	ldr	r2, [pc, #100]	@ (800fca0 <TIM_OC1_SetConfig+0x114>)
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	d007      	beq.n	800fc4e <TIM_OC1_SetConfig+0xc2>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	4a18      	ldr	r2, [pc, #96]	@ (800fca4 <TIM_OC1_SetConfig+0x118>)
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d003      	beq.n	800fc4e <TIM_OC1_SetConfig+0xc2>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	4a17      	ldr	r2, [pc, #92]	@ (800fca8 <TIM_OC1_SetConfig+0x11c>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d111      	bne.n	800fc72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fc54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fc5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	695b      	ldr	r3, [r3, #20]
 800fc62:	693a      	ldr	r2, [r7, #16]
 800fc64:	4313      	orrs	r3, r2
 800fc66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	699b      	ldr	r3, [r3, #24]
 800fc6c:	693a      	ldr	r2, [r7, #16]
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	693a      	ldr	r2, [r7, #16]
 800fc76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	68fa      	ldr	r2, [r7, #12]
 800fc7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	685a      	ldr	r2, [r3, #4]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	697a      	ldr	r2, [r7, #20]
 800fc8a:	621a      	str	r2, [r3, #32]
}
 800fc8c:	bf00      	nop
 800fc8e:	371c      	adds	r7, #28
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr
 800fc98:	40012c00 	.word	0x40012c00
 800fc9c:	40013400 	.word	0x40013400
 800fca0:	40014000 	.word	0x40014000
 800fca4:	40014400 	.word	0x40014400
 800fca8:	40014800 	.word	0x40014800

0800fcac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b087      	sub	sp, #28
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6a1b      	ldr	r3, [r3, #32]
 800fcba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6a1b      	ldr	r3, [r3, #32]
 800fcc0:	f023 0210 	bic.w	r2, r3, #16
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	699b      	ldr	r3, [r3, #24]
 800fcd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fcda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fcde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	021b      	lsls	r3, r3, #8
 800fcee:	68fa      	ldr	r2, [r7, #12]
 800fcf0:	4313      	orrs	r3, r2
 800fcf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	f023 0320 	bic.w	r3, r3, #32
 800fcfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	689b      	ldr	r3, [r3, #8]
 800fd00:	011b      	lsls	r3, r3, #4
 800fd02:	697a      	ldr	r2, [r7, #20]
 800fd04:	4313      	orrs	r3, r2
 800fd06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	4a28      	ldr	r2, [pc, #160]	@ (800fdac <TIM_OC2_SetConfig+0x100>)
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d003      	beq.n	800fd18 <TIM_OC2_SetConfig+0x6c>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4a27      	ldr	r2, [pc, #156]	@ (800fdb0 <TIM_OC2_SetConfig+0x104>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d10d      	bne.n	800fd34 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fd1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	011b      	lsls	r3, r3, #4
 800fd26:	697a      	ldr	r2, [r7, #20]
 800fd28:	4313      	orrs	r3, r2
 800fd2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	4a1d      	ldr	r2, [pc, #116]	@ (800fdac <TIM_OC2_SetConfig+0x100>)
 800fd38:	4293      	cmp	r3, r2
 800fd3a:	d00f      	beq.n	800fd5c <TIM_OC2_SetConfig+0xb0>
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	4a1c      	ldr	r2, [pc, #112]	@ (800fdb0 <TIM_OC2_SetConfig+0x104>)
 800fd40:	4293      	cmp	r3, r2
 800fd42:	d00b      	beq.n	800fd5c <TIM_OC2_SetConfig+0xb0>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	4a1b      	ldr	r2, [pc, #108]	@ (800fdb4 <TIM_OC2_SetConfig+0x108>)
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d007      	beq.n	800fd5c <TIM_OC2_SetConfig+0xb0>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	4a1a      	ldr	r2, [pc, #104]	@ (800fdb8 <TIM_OC2_SetConfig+0x10c>)
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d003      	beq.n	800fd5c <TIM_OC2_SetConfig+0xb0>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	4a19      	ldr	r2, [pc, #100]	@ (800fdbc <TIM_OC2_SetConfig+0x110>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d113      	bne.n	800fd84 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fd62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fd6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	695b      	ldr	r3, [r3, #20]
 800fd70:	009b      	lsls	r3, r3, #2
 800fd72:	693a      	ldr	r2, [r7, #16]
 800fd74:	4313      	orrs	r3, r2
 800fd76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	699b      	ldr	r3, [r3, #24]
 800fd7c:	009b      	lsls	r3, r3, #2
 800fd7e:	693a      	ldr	r2, [r7, #16]
 800fd80:	4313      	orrs	r3, r2
 800fd82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	693a      	ldr	r2, [r7, #16]
 800fd88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	68fa      	ldr	r2, [r7, #12]
 800fd8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	685a      	ldr	r2, [r3, #4]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	697a      	ldr	r2, [r7, #20]
 800fd9c:	621a      	str	r2, [r3, #32]
}
 800fd9e:	bf00      	nop
 800fda0:	371c      	adds	r7, #28
 800fda2:	46bd      	mov	sp, r7
 800fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda8:	4770      	bx	lr
 800fdaa:	bf00      	nop
 800fdac:	40012c00 	.word	0x40012c00
 800fdb0:	40013400 	.word	0x40013400
 800fdb4:	40014000 	.word	0x40014000
 800fdb8:	40014400 	.word	0x40014400
 800fdbc:	40014800 	.word	0x40014800

0800fdc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b087      	sub	sp, #28
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6a1b      	ldr	r3, [r3, #32]
 800fdce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6a1b      	ldr	r3, [r3, #32]
 800fdd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	685b      	ldr	r3, [r3, #4]
 800fde0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	69db      	ldr	r3, [r3, #28]
 800fde6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fdee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fdf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	f023 0303 	bic.w	r3, r3, #3
 800fdfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	68fa      	ldr	r2, [r7, #12]
 800fe02:	4313      	orrs	r3, r2
 800fe04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fe0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	689b      	ldr	r3, [r3, #8]
 800fe12:	021b      	lsls	r3, r3, #8
 800fe14:	697a      	ldr	r2, [r7, #20]
 800fe16:	4313      	orrs	r3, r2
 800fe18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	4a27      	ldr	r2, [pc, #156]	@ (800febc <TIM_OC3_SetConfig+0xfc>)
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d003      	beq.n	800fe2a <TIM_OC3_SetConfig+0x6a>
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	4a26      	ldr	r2, [pc, #152]	@ (800fec0 <TIM_OC3_SetConfig+0x100>)
 800fe26:	4293      	cmp	r3, r2
 800fe28:	d10d      	bne.n	800fe46 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fe2a:	697b      	ldr	r3, [r7, #20]
 800fe2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fe30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	68db      	ldr	r3, [r3, #12]
 800fe36:	021b      	lsls	r3, r3, #8
 800fe38:	697a      	ldr	r2, [r7, #20]
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fe44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	4a1c      	ldr	r2, [pc, #112]	@ (800febc <TIM_OC3_SetConfig+0xfc>)
 800fe4a:	4293      	cmp	r3, r2
 800fe4c:	d00f      	beq.n	800fe6e <TIM_OC3_SetConfig+0xae>
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	4a1b      	ldr	r2, [pc, #108]	@ (800fec0 <TIM_OC3_SetConfig+0x100>)
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d00b      	beq.n	800fe6e <TIM_OC3_SetConfig+0xae>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	4a1a      	ldr	r2, [pc, #104]	@ (800fec4 <TIM_OC3_SetConfig+0x104>)
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	d007      	beq.n	800fe6e <TIM_OC3_SetConfig+0xae>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	4a19      	ldr	r2, [pc, #100]	@ (800fec8 <TIM_OC3_SetConfig+0x108>)
 800fe62:	4293      	cmp	r3, r2
 800fe64:	d003      	beq.n	800fe6e <TIM_OC3_SetConfig+0xae>
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	4a18      	ldr	r2, [pc, #96]	@ (800fecc <TIM_OC3_SetConfig+0x10c>)
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d113      	bne.n	800fe96 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fe74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fe7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	695b      	ldr	r3, [r3, #20]
 800fe82:	011b      	lsls	r3, r3, #4
 800fe84:	693a      	ldr	r2, [r7, #16]
 800fe86:	4313      	orrs	r3, r2
 800fe88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	699b      	ldr	r3, [r3, #24]
 800fe8e:	011b      	lsls	r3, r3, #4
 800fe90:	693a      	ldr	r2, [r7, #16]
 800fe92:	4313      	orrs	r3, r2
 800fe94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	693a      	ldr	r2, [r7, #16]
 800fe9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	68fa      	ldr	r2, [r7, #12]
 800fea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	685a      	ldr	r2, [r3, #4]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	697a      	ldr	r2, [r7, #20]
 800feae:	621a      	str	r2, [r3, #32]
}
 800feb0:	bf00      	nop
 800feb2:	371c      	adds	r7, #28
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr
 800febc:	40012c00 	.word	0x40012c00
 800fec0:	40013400 	.word	0x40013400
 800fec4:	40014000 	.word	0x40014000
 800fec8:	40014400 	.word	0x40014400
 800fecc:	40014800 	.word	0x40014800

0800fed0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b087      	sub	sp, #28
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6a1b      	ldr	r3, [r3, #32]
 800fede:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6a1b      	ldr	r3, [r3, #32]
 800fee4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	69db      	ldr	r3, [r3, #28]
 800fef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fefe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ff02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ff0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	021b      	lsls	r3, r3, #8
 800ff12:	68fa      	ldr	r2, [r7, #12]
 800ff14:	4313      	orrs	r3, r2
 800ff16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ff1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	689b      	ldr	r3, [r3, #8]
 800ff24:	031b      	lsls	r3, r3, #12
 800ff26:	693a      	ldr	r2, [r7, #16]
 800ff28:	4313      	orrs	r3, r2
 800ff2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	4a18      	ldr	r2, [pc, #96]	@ (800ff90 <TIM_OC4_SetConfig+0xc0>)
 800ff30:	4293      	cmp	r3, r2
 800ff32:	d00f      	beq.n	800ff54 <TIM_OC4_SetConfig+0x84>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	4a17      	ldr	r2, [pc, #92]	@ (800ff94 <TIM_OC4_SetConfig+0xc4>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d00b      	beq.n	800ff54 <TIM_OC4_SetConfig+0x84>
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	4a16      	ldr	r2, [pc, #88]	@ (800ff98 <TIM_OC4_SetConfig+0xc8>)
 800ff40:	4293      	cmp	r3, r2
 800ff42:	d007      	beq.n	800ff54 <TIM_OC4_SetConfig+0x84>
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	4a15      	ldr	r2, [pc, #84]	@ (800ff9c <TIM_OC4_SetConfig+0xcc>)
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d003      	beq.n	800ff54 <TIM_OC4_SetConfig+0x84>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	4a14      	ldr	r2, [pc, #80]	@ (800ffa0 <TIM_OC4_SetConfig+0xd0>)
 800ff50:	4293      	cmp	r3, r2
 800ff52:	d109      	bne.n	800ff68 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ff5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	695b      	ldr	r3, [r3, #20]
 800ff60:	019b      	lsls	r3, r3, #6
 800ff62:	697a      	ldr	r2, [r7, #20]
 800ff64:	4313      	orrs	r3, r2
 800ff66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	697a      	ldr	r2, [r7, #20]
 800ff6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	68fa      	ldr	r2, [r7, #12]
 800ff72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	685a      	ldr	r2, [r3, #4]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	693a      	ldr	r2, [r7, #16]
 800ff80:	621a      	str	r2, [r3, #32]
}
 800ff82:	bf00      	nop
 800ff84:	371c      	adds	r7, #28
 800ff86:	46bd      	mov	sp, r7
 800ff88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8c:	4770      	bx	lr
 800ff8e:	bf00      	nop
 800ff90:	40012c00 	.word	0x40012c00
 800ff94:	40013400 	.word	0x40013400
 800ff98:	40014000 	.word	0x40014000
 800ff9c:	40014400 	.word	0x40014400
 800ffa0:	40014800 	.word	0x40014800

0800ffa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b087      	sub	sp, #28
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6a1b      	ldr	r3, [r3, #32]
 800ffb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6a1b      	ldr	r3, [r3, #32]
 800ffb8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ffca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ffd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ffd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	68fa      	ldr	r2, [r7, #12]
 800ffde:	4313      	orrs	r3, r2
 800ffe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ffe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	041b      	lsls	r3, r3, #16
 800fff0:	693a      	ldr	r2, [r7, #16]
 800fff2:	4313      	orrs	r3, r2
 800fff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	4a17      	ldr	r2, [pc, #92]	@ (8010058 <TIM_OC5_SetConfig+0xb4>)
 800fffa:	4293      	cmp	r3, r2
 800fffc:	d00f      	beq.n	801001e <TIM_OC5_SetConfig+0x7a>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	4a16      	ldr	r2, [pc, #88]	@ (801005c <TIM_OC5_SetConfig+0xb8>)
 8010002:	4293      	cmp	r3, r2
 8010004:	d00b      	beq.n	801001e <TIM_OC5_SetConfig+0x7a>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	4a15      	ldr	r2, [pc, #84]	@ (8010060 <TIM_OC5_SetConfig+0xbc>)
 801000a:	4293      	cmp	r3, r2
 801000c:	d007      	beq.n	801001e <TIM_OC5_SetConfig+0x7a>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4a14      	ldr	r2, [pc, #80]	@ (8010064 <TIM_OC5_SetConfig+0xc0>)
 8010012:	4293      	cmp	r3, r2
 8010014:	d003      	beq.n	801001e <TIM_OC5_SetConfig+0x7a>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	4a13      	ldr	r2, [pc, #76]	@ (8010068 <TIM_OC5_SetConfig+0xc4>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d109      	bne.n	8010032 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010024:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	695b      	ldr	r3, [r3, #20]
 801002a:	021b      	lsls	r3, r3, #8
 801002c:	697a      	ldr	r2, [r7, #20]
 801002e:	4313      	orrs	r3, r2
 8010030:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	697a      	ldr	r2, [r7, #20]
 8010036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	68fa      	ldr	r2, [r7, #12]
 801003c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801003e:	683b      	ldr	r3, [r7, #0]
 8010040:	685a      	ldr	r2, [r3, #4]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	693a      	ldr	r2, [r7, #16]
 801004a:	621a      	str	r2, [r3, #32]
}
 801004c:	bf00      	nop
 801004e:	371c      	adds	r7, #28
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr
 8010058:	40012c00 	.word	0x40012c00
 801005c:	40013400 	.word	0x40013400
 8010060:	40014000 	.word	0x40014000
 8010064:	40014400 	.word	0x40014400
 8010068:	40014800 	.word	0x40014800

0801006c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801006c:	b480      	push	{r7}
 801006e:	b087      	sub	sp, #28
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6a1b      	ldr	r3, [r3, #32]
 801007a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6a1b      	ldr	r3, [r3, #32]
 8010080:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801009a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801009e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	021b      	lsls	r3, r3, #8
 80100a6:	68fa      	ldr	r2, [r7, #12]
 80100a8:	4313      	orrs	r3, r2
 80100aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80100ac:	693b      	ldr	r3, [r7, #16]
 80100ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80100b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	689b      	ldr	r3, [r3, #8]
 80100b8:	051b      	lsls	r3, r3, #20
 80100ba:	693a      	ldr	r2, [r7, #16]
 80100bc:	4313      	orrs	r3, r2
 80100be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	4a18      	ldr	r2, [pc, #96]	@ (8010124 <TIM_OC6_SetConfig+0xb8>)
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d00f      	beq.n	80100e8 <TIM_OC6_SetConfig+0x7c>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	4a17      	ldr	r2, [pc, #92]	@ (8010128 <TIM_OC6_SetConfig+0xbc>)
 80100cc:	4293      	cmp	r3, r2
 80100ce:	d00b      	beq.n	80100e8 <TIM_OC6_SetConfig+0x7c>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	4a16      	ldr	r2, [pc, #88]	@ (801012c <TIM_OC6_SetConfig+0xc0>)
 80100d4:	4293      	cmp	r3, r2
 80100d6:	d007      	beq.n	80100e8 <TIM_OC6_SetConfig+0x7c>
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	4a15      	ldr	r2, [pc, #84]	@ (8010130 <TIM_OC6_SetConfig+0xc4>)
 80100dc:	4293      	cmp	r3, r2
 80100de:	d003      	beq.n	80100e8 <TIM_OC6_SetConfig+0x7c>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	4a14      	ldr	r2, [pc, #80]	@ (8010134 <TIM_OC6_SetConfig+0xc8>)
 80100e4:	4293      	cmp	r3, r2
 80100e6:	d109      	bne.n	80100fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80100ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	695b      	ldr	r3, [r3, #20]
 80100f4:	029b      	lsls	r3, r3, #10
 80100f6:	697a      	ldr	r2, [r7, #20]
 80100f8:	4313      	orrs	r3, r2
 80100fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	697a      	ldr	r2, [r7, #20]
 8010100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	68fa      	ldr	r2, [r7, #12]
 8010106:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	685a      	ldr	r2, [r3, #4]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	693a      	ldr	r2, [r7, #16]
 8010114:	621a      	str	r2, [r3, #32]
}
 8010116:	bf00      	nop
 8010118:	371c      	adds	r7, #28
 801011a:	46bd      	mov	sp, r7
 801011c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010120:	4770      	bx	lr
 8010122:	bf00      	nop
 8010124:	40012c00 	.word	0x40012c00
 8010128:	40013400 	.word	0x40013400
 801012c:	40014000 	.word	0x40014000
 8010130:	40014400 	.word	0x40014400
 8010134:	40014800 	.word	0x40014800

08010138 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b086      	sub	sp, #24
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010142:	2300      	movs	r3, #0
 8010144:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	689b      	ldr	r3, [r3, #8]
 801014c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010154:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	693a      	ldr	r2, [r7, #16]
 801015c:	4313      	orrs	r3, r2
 801015e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010166:	f023 0307 	bic.w	r3, r3, #7
 801016a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	693a      	ldr	r2, [r7, #16]
 8010172:	4313      	orrs	r3, r2
 8010174:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	693a      	ldr	r2, [r7, #16]
 801017c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	685b      	ldr	r3, [r3, #4]
 8010182:	2b70      	cmp	r3, #112	@ 0x70
 8010184:	d01a      	beq.n	80101bc <TIM_SlaveTimer_SetConfig+0x84>
 8010186:	2b70      	cmp	r3, #112	@ 0x70
 8010188:	d860      	bhi.n	801024c <TIM_SlaveTimer_SetConfig+0x114>
 801018a:	2b60      	cmp	r3, #96	@ 0x60
 801018c:	d054      	beq.n	8010238 <TIM_SlaveTimer_SetConfig+0x100>
 801018e:	2b60      	cmp	r3, #96	@ 0x60
 8010190:	d85c      	bhi.n	801024c <TIM_SlaveTimer_SetConfig+0x114>
 8010192:	2b50      	cmp	r3, #80	@ 0x50
 8010194:	d046      	beq.n	8010224 <TIM_SlaveTimer_SetConfig+0xec>
 8010196:	2b50      	cmp	r3, #80	@ 0x50
 8010198:	d858      	bhi.n	801024c <TIM_SlaveTimer_SetConfig+0x114>
 801019a:	2b40      	cmp	r3, #64	@ 0x40
 801019c:	d019      	beq.n	80101d2 <TIM_SlaveTimer_SetConfig+0x9a>
 801019e:	2b40      	cmp	r3, #64	@ 0x40
 80101a0:	d854      	bhi.n	801024c <TIM_SlaveTimer_SetConfig+0x114>
 80101a2:	2b30      	cmp	r3, #48	@ 0x30
 80101a4:	d055      	beq.n	8010252 <TIM_SlaveTimer_SetConfig+0x11a>
 80101a6:	2b30      	cmp	r3, #48	@ 0x30
 80101a8:	d850      	bhi.n	801024c <TIM_SlaveTimer_SetConfig+0x114>
 80101aa:	2b20      	cmp	r3, #32
 80101ac:	d051      	beq.n	8010252 <TIM_SlaveTimer_SetConfig+0x11a>
 80101ae:	2b20      	cmp	r3, #32
 80101b0:	d84c      	bhi.n	801024c <TIM_SlaveTimer_SetConfig+0x114>
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d04d      	beq.n	8010252 <TIM_SlaveTimer_SetConfig+0x11a>
 80101b6:	2b10      	cmp	r3, #16
 80101b8:	d04b      	beq.n	8010252 <TIM_SlaveTimer_SetConfig+0x11a>
 80101ba:	e047      	b.n	801024c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80101cc:	f000 f9e6 	bl	801059c <TIM_ETR_SetConfig>
      break;
 80101d0:	e040      	b.n	8010254 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	2b05      	cmp	r3, #5
 80101d8:	d101      	bne.n	80101de <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80101da:	2301      	movs	r3, #1
 80101dc:	e03b      	b.n	8010256 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	6a1b      	ldr	r3, [r3, #32]
 80101e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	6a1a      	ldr	r2, [r3, #32]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	f022 0201 	bic.w	r2, r2, #1
 80101f4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	699b      	ldr	r3, [r3, #24]
 80101fc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010204:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	691b      	ldr	r3, [r3, #16]
 801020a:	011b      	lsls	r3, r3, #4
 801020c:	68ba      	ldr	r2, [r7, #8]
 801020e:	4313      	orrs	r3, r2
 8010210:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	68ba      	ldr	r2, [r7, #8]
 8010218:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	68fa      	ldr	r2, [r7, #12]
 8010220:	621a      	str	r2, [r3, #32]
      break;
 8010222:	e017      	b.n	8010254 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010230:	461a      	mov	r2, r3
 8010232:	f000 f883 	bl	801033c <TIM_TI1_ConfigInputStage>
      break;
 8010236:	e00d      	b.n	8010254 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010244:	461a      	mov	r2, r3
 8010246:	f000 f8e5 	bl	8010414 <TIM_TI2_ConfigInputStage>
      break;
 801024a:	e003      	b.n	8010254 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 801024c:	2301      	movs	r3, #1
 801024e:	75fb      	strb	r3, [r7, #23]
      break;
 8010250:	e000      	b.n	8010254 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8010252:	bf00      	nop
  }

  return status;
 8010254:	7dfb      	ldrb	r3, [r7, #23]
}
 8010256:	4618      	mov	r0, r3
 8010258:	3718      	adds	r7, #24
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
	...

08010260 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8010260:	b480      	push	{r7}
 8010262:	b087      	sub	sp, #28
 8010264:	af00      	add	r7, sp, #0
 8010266:	60f8      	str	r0, [r7, #12]
 8010268:	60b9      	str	r1, [r7, #8]
 801026a:	607a      	str	r2, [r7, #4]
 801026c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	6a1b      	ldr	r3, [r3, #32]
 8010272:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	6a1b      	ldr	r3, [r3, #32]
 8010278:	f023 0201 	bic.w	r2, r3, #1
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	699b      	ldr	r3, [r3, #24]
 8010284:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	4a26      	ldr	r2, [pc, #152]	@ (8010324 <TIM_TI1_SetConfig+0xc4>)
 801028a:	4293      	cmp	r3, r2
 801028c:	d017      	beq.n	80102be <TIM_TI1_SetConfig+0x5e>
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010294:	d013      	beq.n	80102be <TIM_TI1_SetConfig+0x5e>
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	4a23      	ldr	r2, [pc, #140]	@ (8010328 <TIM_TI1_SetConfig+0xc8>)
 801029a:	4293      	cmp	r3, r2
 801029c:	d00f      	beq.n	80102be <TIM_TI1_SetConfig+0x5e>
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	4a22      	ldr	r2, [pc, #136]	@ (801032c <TIM_TI1_SetConfig+0xcc>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d00b      	beq.n	80102be <TIM_TI1_SetConfig+0x5e>
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	4a21      	ldr	r2, [pc, #132]	@ (8010330 <TIM_TI1_SetConfig+0xd0>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d007      	beq.n	80102be <TIM_TI1_SetConfig+0x5e>
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	4a20      	ldr	r2, [pc, #128]	@ (8010334 <TIM_TI1_SetConfig+0xd4>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d003      	beq.n	80102be <TIM_TI1_SetConfig+0x5e>
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	4a1f      	ldr	r2, [pc, #124]	@ (8010338 <TIM_TI1_SetConfig+0xd8>)
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d101      	bne.n	80102c2 <TIM_TI1_SetConfig+0x62>
 80102be:	2301      	movs	r3, #1
 80102c0:	e000      	b.n	80102c4 <TIM_TI1_SetConfig+0x64>
 80102c2:	2300      	movs	r3, #0
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d008      	beq.n	80102da <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	f023 0303 	bic.w	r3, r3, #3
 80102ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80102d0:	697a      	ldr	r2, [r7, #20]
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	4313      	orrs	r3, r2
 80102d6:	617b      	str	r3, [r7, #20]
 80102d8:	e003      	b.n	80102e2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	f043 0301 	orr.w	r3, r3, #1
 80102e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80102e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	011b      	lsls	r3, r3, #4
 80102ee:	b2db      	uxtb	r3, r3
 80102f0:	697a      	ldr	r2, [r7, #20]
 80102f2:	4313      	orrs	r3, r2
 80102f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	f023 030a 	bic.w	r3, r3, #10
 80102fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	f003 030a 	and.w	r3, r3, #10
 8010304:	693a      	ldr	r2, [r7, #16]
 8010306:	4313      	orrs	r3, r2
 8010308:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	697a      	ldr	r2, [r7, #20]
 801030e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	693a      	ldr	r2, [r7, #16]
 8010314:	621a      	str	r2, [r3, #32]
}
 8010316:	bf00      	nop
 8010318:	371c      	adds	r7, #28
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr
 8010322:	bf00      	nop
 8010324:	40012c00 	.word	0x40012c00
 8010328:	40000400 	.word	0x40000400
 801032c:	40000800 	.word	0x40000800
 8010330:	40000c00 	.word	0x40000c00
 8010334:	40013400 	.word	0x40013400
 8010338:	40014000 	.word	0x40014000

0801033c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801033c:	b480      	push	{r7}
 801033e:	b087      	sub	sp, #28
 8010340:	af00      	add	r7, sp, #0
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	60b9      	str	r1, [r7, #8]
 8010346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	6a1b      	ldr	r3, [r3, #32]
 801034c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	6a1b      	ldr	r3, [r3, #32]
 8010352:	f023 0201 	bic.w	r2, r3, #1
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	699b      	ldr	r3, [r3, #24]
 801035e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	011b      	lsls	r3, r3, #4
 801036c:	693a      	ldr	r2, [r7, #16]
 801036e:	4313      	orrs	r3, r2
 8010370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	f023 030a 	bic.w	r3, r3, #10
 8010378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801037a:	697a      	ldr	r2, [r7, #20]
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	4313      	orrs	r3, r2
 8010380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	693a      	ldr	r2, [r7, #16]
 8010386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	697a      	ldr	r2, [r7, #20]
 801038c:	621a      	str	r2, [r3, #32]
}
 801038e:	bf00      	nop
 8010390:	371c      	adds	r7, #28
 8010392:	46bd      	mov	sp, r7
 8010394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010398:	4770      	bx	lr

0801039a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801039a:	b480      	push	{r7}
 801039c:	b087      	sub	sp, #28
 801039e:	af00      	add	r7, sp, #0
 80103a0:	60f8      	str	r0, [r7, #12]
 80103a2:	60b9      	str	r1, [r7, #8]
 80103a4:	607a      	str	r2, [r7, #4]
 80103a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	6a1b      	ldr	r3, [r3, #32]
 80103ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	6a1b      	ldr	r3, [r3, #32]
 80103b2:	f023 0210 	bic.w	r2, r3, #16
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	699b      	ldr	r3, [r3, #24]
 80103be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80103c0:	693b      	ldr	r3, [r7, #16]
 80103c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80103c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	021b      	lsls	r3, r3, #8
 80103cc:	693a      	ldr	r2, [r7, #16]
 80103ce:	4313      	orrs	r3, r2
 80103d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80103d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	031b      	lsls	r3, r3, #12
 80103de:	b29b      	uxth	r3, r3
 80103e0:	693a      	ldr	r2, [r7, #16]
 80103e2:	4313      	orrs	r3, r2
 80103e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80103ec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	011b      	lsls	r3, r3, #4
 80103f2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80103f6:	697a      	ldr	r2, [r7, #20]
 80103f8:	4313      	orrs	r3, r2
 80103fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	693a      	ldr	r2, [r7, #16]
 8010400:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	697a      	ldr	r2, [r7, #20]
 8010406:	621a      	str	r2, [r3, #32]
}
 8010408:	bf00      	nop
 801040a:	371c      	adds	r7, #28
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr

08010414 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010414:	b480      	push	{r7}
 8010416:	b087      	sub	sp, #28
 8010418:	af00      	add	r7, sp, #0
 801041a:	60f8      	str	r0, [r7, #12]
 801041c:	60b9      	str	r1, [r7, #8]
 801041e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	6a1b      	ldr	r3, [r3, #32]
 8010424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	6a1b      	ldr	r3, [r3, #32]
 801042a:	f023 0210 	bic.w	r2, r3, #16
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	699b      	ldr	r3, [r3, #24]
 8010436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801043e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	031b      	lsls	r3, r3, #12
 8010444:	693a      	ldr	r2, [r7, #16]
 8010446:	4313      	orrs	r3, r2
 8010448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010450:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	011b      	lsls	r3, r3, #4
 8010456:	697a      	ldr	r2, [r7, #20]
 8010458:	4313      	orrs	r3, r2
 801045a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	693a      	ldr	r2, [r7, #16]
 8010460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	697a      	ldr	r2, [r7, #20]
 8010466:	621a      	str	r2, [r3, #32]
}
 8010468:	bf00      	nop
 801046a:	371c      	adds	r7, #28
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr

08010474 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010474:	b480      	push	{r7}
 8010476:	b087      	sub	sp, #28
 8010478:	af00      	add	r7, sp, #0
 801047a:	60f8      	str	r0, [r7, #12]
 801047c:	60b9      	str	r1, [r7, #8]
 801047e:	607a      	str	r2, [r7, #4]
 8010480:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	6a1b      	ldr	r3, [r3, #32]
 8010486:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	6a1b      	ldr	r3, [r3, #32]
 801048c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	69db      	ldr	r3, [r3, #28]
 8010498:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	f023 0303 	bic.w	r3, r3, #3
 80104a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80104a2:	693a      	ldr	r2, [r7, #16]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	4313      	orrs	r3, r2
 80104a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80104b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	011b      	lsls	r3, r3, #4
 80104b6:	b2db      	uxtb	r3, r3
 80104b8:	693a      	ldr	r2, [r7, #16]
 80104ba:	4313      	orrs	r3, r2
 80104bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80104c4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	021b      	lsls	r3, r3, #8
 80104ca:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80104ce:	697a      	ldr	r2, [r7, #20]
 80104d0:	4313      	orrs	r3, r2
 80104d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	693a      	ldr	r2, [r7, #16]
 80104d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	697a      	ldr	r2, [r7, #20]
 80104de:	621a      	str	r2, [r3, #32]
}
 80104e0:	bf00      	nop
 80104e2:	371c      	adds	r7, #28
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr

080104ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80104ec:	b480      	push	{r7}
 80104ee:	b087      	sub	sp, #28
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	60f8      	str	r0, [r7, #12]
 80104f4:	60b9      	str	r1, [r7, #8]
 80104f6:	607a      	str	r2, [r7, #4]
 80104f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	6a1b      	ldr	r3, [r3, #32]
 80104fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	6a1b      	ldr	r3, [r3, #32]
 8010504:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	69db      	ldr	r3, [r3, #28]
 8010510:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8010512:	693b      	ldr	r3, [r7, #16]
 8010514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010518:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	021b      	lsls	r3, r3, #8
 801051e:	693a      	ldr	r2, [r7, #16]
 8010520:	4313      	orrs	r3, r2
 8010522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801052a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	031b      	lsls	r3, r3, #12
 8010530:	b29b      	uxth	r3, r3
 8010532:	693a      	ldr	r2, [r7, #16]
 8010534:	4313      	orrs	r3, r2
 8010536:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 801053e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	031b      	lsls	r3, r3, #12
 8010544:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8010548:	697a      	ldr	r2, [r7, #20]
 801054a:	4313      	orrs	r3, r2
 801054c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	693a      	ldr	r2, [r7, #16]
 8010552:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	697a      	ldr	r2, [r7, #20]
 8010558:	621a      	str	r2, [r3, #32]
}
 801055a:	bf00      	nop
 801055c:	371c      	adds	r7, #28
 801055e:	46bd      	mov	sp, r7
 8010560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010564:	4770      	bx	lr

08010566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010566:	b480      	push	{r7}
 8010568:	b085      	sub	sp, #20
 801056a:	af00      	add	r7, sp, #0
 801056c:	6078      	str	r0, [r7, #4]
 801056e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	689b      	ldr	r3, [r3, #8]
 8010574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801057c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801057e:	683a      	ldr	r2, [r7, #0]
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	4313      	orrs	r3, r2
 8010584:	f043 0307 	orr.w	r3, r3, #7
 8010588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	68fa      	ldr	r2, [r7, #12]
 801058e:	609a      	str	r2, [r3, #8]
}
 8010590:	bf00      	nop
 8010592:	3714      	adds	r7, #20
 8010594:	46bd      	mov	sp, r7
 8010596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059a:	4770      	bx	lr

0801059c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801059c:	b480      	push	{r7}
 801059e:	b087      	sub	sp, #28
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	607a      	str	r2, [r7, #4]
 80105a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	689b      	ldr	r3, [r3, #8]
 80105ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80105b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	021a      	lsls	r2, r3, #8
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	431a      	orrs	r2, r3
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	4313      	orrs	r3, r2
 80105c4:	697a      	ldr	r2, [r7, #20]
 80105c6:	4313      	orrs	r3, r2
 80105c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	697a      	ldr	r2, [r7, #20]
 80105ce:	609a      	str	r2, [r3, #8]
}
 80105d0:	bf00      	nop
 80105d2:	371c      	adds	r7, #28
 80105d4:	46bd      	mov	sp, r7
 80105d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105da:	4770      	bx	lr

080105dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80105dc:	b480      	push	{r7}
 80105de:	b087      	sub	sp, #28
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	60f8      	str	r0, [r7, #12]
 80105e4:	60b9      	str	r1, [r7, #8]
 80105e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	f003 031f 	and.w	r3, r3, #31
 80105ee:	2201      	movs	r2, #1
 80105f0:	fa02 f303 	lsl.w	r3, r2, r3
 80105f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6a1a      	ldr	r2, [r3, #32]
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	43db      	mvns	r3, r3
 80105fe:	401a      	ands	r2, r3
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	6a1a      	ldr	r2, [r3, #32]
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	f003 031f 	and.w	r3, r3, #31
 801060e:	6879      	ldr	r1, [r7, #4]
 8010610:	fa01 f303 	lsl.w	r3, r1, r3
 8010614:	431a      	orrs	r2, r3
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	621a      	str	r2, [r3, #32]
}
 801061a:	bf00      	nop
 801061c:	371c      	adds	r7, #28
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr
	...

08010628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010628:	b480      	push	{r7}
 801062a:	b085      	sub	sp, #20
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010638:	2b01      	cmp	r3, #1
 801063a:	d101      	bne.n	8010640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801063c:	2302      	movs	r3, #2
 801063e:	e068      	b.n	8010712 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2201      	movs	r2, #1
 8010644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2202      	movs	r2, #2
 801064c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	689b      	ldr	r3, [r3, #8]
 801065e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	4a2e      	ldr	r2, [pc, #184]	@ (8010720 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8010666:	4293      	cmp	r3, r2
 8010668:	d004      	beq.n	8010674 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4a2d      	ldr	r2, [pc, #180]	@ (8010724 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010670:	4293      	cmp	r3, r2
 8010672:	d108      	bne.n	8010686 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801067a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	68fa      	ldr	r2, [r7, #12]
 8010682:	4313      	orrs	r3, r2
 8010684:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801068c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	68fa      	ldr	r2, [r7, #12]
 8010694:	4313      	orrs	r3, r2
 8010696:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	68fa      	ldr	r2, [r7, #12]
 801069e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4a1e      	ldr	r2, [pc, #120]	@ (8010720 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80106a6:	4293      	cmp	r3, r2
 80106a8:	d01d      	beq.n	80106e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80106b2:	d018      	beq.n	80106e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4a1b      	ldr	r2, [pc, #108]	@ (8010728 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80106ba:	4293      	cmp	r3, r2
 80106bc:	d013      	beq.n	80106e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	4a1a      	ldr	r2, [pc, #104]	@ (801072c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80106c4:	4293      	cmp	r3, r2
 80106c6:	d00e      	beq.n	80106e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	4a18      	ldr	r2, [pc, #96]	@ (8010730 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d009      	beq.n	80106e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	4a13      	ldr	r2, [pc, #76]	@ (8010724 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80106d8:	4293      	cmp	r3, r2
 80106da:	d004      	beq.n	80106e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4a14      	ldr	r2, [pc, #80]	@ (8010734 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80106e2:	4293      	cmp	r3, r2
 80106e4:	d10c      	bne.n	8010700 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80106ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	689b      	ldr	r3, [r3, #8]
 80106f2:	68ba      	ldr	r2, [r7, #8]
 80106f4:	4313      	orrs	r3, r2
 80106f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	68ba      	ldr	r2, [r7, #8]
 80106fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2201      	movs	r2, #1
 8010704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2200      	movs	r2, #0
 801070c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010710:	2300      	movs	r3, #0
}
 8010712:	4618      	mov	r0, r3
 8010714:	3714      	adds	r7, #20
 8010716:	46bd      	mov	sp, r7
 8010718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071c:	4770      	bx	lr
 801071e:	bf00      	nop
 8010720:	40012c00 	.word	0x40012c00
 8010724:	40013400 	.word	0x40013400
 8010728:	40000400 	.word	0x40000400
 801072c:	40000800 	.word	0x40000800
 8010730:	40000c00 	.word	0x40000c00
 8010734:	40014000 	.word	0x40014000

08010738 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010738:	b480      	push	{r7}
 801073a:	b085      	sub	sp, #20
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010742:	2300      	movs	r3, #0
 8010744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801074c:	2b01      	cmp	r3, #1
 801074e:	d101      	bne.n	8010754 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010750:	2302      	movs	r3, #2
 8010752:	e065      	b.n	8010820 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2201      	movs	r2, #1
 8010758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	68db      	ldr	r3, [r3, #12]
 8010766:	4313      	orrs	r3, r2
 8010768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	689b      	ldr	r3, [r3, #8]
 8010774:	4313      	orrs	r3, r2
 8010776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	4313      	orrs	r3, r2
 8010784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	4313      	orrs	r3, r2
 8010792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	691b      	ldr	r3, [r3, #16]
 801079e:	4313      	orrs	r3, r2
 80107a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	695b      	ldr	r3, [r3, #20]
 80107ac:	4313      	orrs	r3, r2
 80107ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107ba:	4313      	orrs	r3, r2
 80107bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	699b      	ldr	r3, [r3, #24]
 80107c8:	041b      	lsls	r3, r3, #16
 80107ca:	4313      	orrs	r3, r2
 80107cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	4a16      	ldr	r2, [pc, #88]	@ (801082c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d004      	beq.n	80107e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	4a14      	ldr	r2, [pc, #80]	@ (8010830 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80107de:	4293      	cmp	r3, r2
 80107e0:	d115      	bne.n	801080e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107ec:	051b      	lsls	r3, r3, #20
 80107ee:	4313      	orrs	r3, r2
 80107f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	69db      	ldr	r3, [r3, #28]
 80107fc:	4313      	orrs	r3, r2
 80107fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	6a1b      	ldr	r3, [r3, #32]
 801080a:	4313      	orrs	r3, r2
 801080c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	68fa      	ldr	r2, [r7, #12]
 8010814:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2200      	movs	r2, #0
 801081a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801081e:	2300      	movs	r3, #0
}
 8010820:	4618      	mov	r0, r3
 8010822:	3714      	adds	r7, #20
 8010824:	46bd      	mov	sp, r7
 8010826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082a:	4770      	bx	lr
 801082c:	40012c00 	.word	0x40012c00
 8010830:	40013400 	.word	0x40013400

08010834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b082      	sub	sp, #8
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d101      	bne.n	8010846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010842:	2301      	movs	r3, #1
 8010844:	e040      	b.n	80108c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801084a:	2b00      	cmp	r3, #0
 801084c:	d106      	bne.n	801085c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2200      	movs	r2, #0
 8010852:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f7f4 fa04 	bl	8004c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2224      	movs	r2, #36	@ 0x24
 8010860:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	681a      	ldr	r2, [r3, #0]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	f022 0201 	bic.w	r2, r2, #1
 8010870:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010876:	2b00      	cmp	r3, #0
 8010878:	d002      	beq.n	8010880 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801087a:	6878      	ldr	r0, [r7, #4]
 801087c:	f000 fc9c 	bl	80111b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f000 f9e1 	bl	8010c48 <UART_SetConfig>
 8010886:	4603      	mov	r3, r0
 8010888:	2b01      	cmp	r3, #1
 801088a:	d101      	bne.n	8010890 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 801088c:	2301      	movs	r3, #1
 801088e:	e01b      	b.n	80108c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	685a      	ldr	r2, [r3, #4]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801089e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	689a      	ldr	r2, [r3, #8]
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80108ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	681a      	ldr	r2, [r3, #0]
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f042 0201 	orr.w	r2, r2, #1
 80108be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f000 fd1b 	bl	80112fc <UART_CheckIdleState>
 80108c6:	4603      	mov	r3, r0
}
 80108c8:	4618      	mov	r0, r3
 80108ca:	3708      	adds	r7, #8
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}

080108d0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d101      	bne.n	80108e2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80108de:	2301      	movs	r3, #1
 80108e0:	e048      	b.n	8010974 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d106      	bne.n	80108f8 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2200      	movs	r2, #0
 80108ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f7f4 f9b6 	bl	8004c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2224      	movs	r2, #36	@ 0x24
 80108fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	681a      	ldr	r2, [r3, #0]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	f022 0201 	bic.w	r2, r2, #1
 801090c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010912:	2b00      	cmp	r3, #0
 8010914:	d002      	beq.n	801091c <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 fc4e 	bl	80111b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f000 f993 	bl	8010c48 <UART_SetConfig>
 8010922:	4603      	mov	r3, r0
 8010924:	2b01      	cmp	r3, #1
 8010926:	d101      	bne.n	801092c <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8010928:	2301      	movs	r3, #1
 801092a:	e023      	b.n	8010974 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	685a      	ldr	r2, [r3, #4]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801093a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	689a      	ldr	r2, [r3, #8]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 801094a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	689a      	ldr	r2, [r3, #8]
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	f042 0208 	orr.w	r2, r2, #8
 801095a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	681a      	ldr	r2, [r3, #0]
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f042 0201 	orr.w	r2, r2, #1
 801096a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f000 fcc5 	bl	80112fc <UART_CheckIdleState>
 8010972:	4603      	mov	r3, r0
}
 8010974:	4618      	mov	r0, r3
 8010976:	3708      	adds	r7, #8
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b08a      	sub	sp, #40	@ 0x28
 8010980:	af02      	add	r7, sp, #8
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	603b      	str	r3, [r7, #0]
 8010988:	4613      	mov	r3, r2
 801098a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010990:	2b20      	cmp	r3, #32
 8010992:	d177      	bne.n	8010a84 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d002      	beq.n	80109a0 <HAL_UART_Transmit+0x24>
 801099a:	88fb      	ldrh	r3, [r7, #6]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d101      	bne.n	80109a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80109a0:	2301      	movs	r3, #1
 80109a2:	e070      	b.n	8010a86 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2200      	movs	r2, #0
 80109a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	2221      	movs	r2, #33	@ 0x21
 80109b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80109b2:	f7f7 fcf9 	bl	80083a8 <HAL_GetTick>
 80109b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	88fa      	ldrh	r2, [r7, #6]
 80109bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	88fa      	ldrh	r2, [r7, #6]
 80109c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	689b      	ldr	r3, [r3, #8]
 80109cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80109d0:	d108      	bne.n	80109e4 <HAL_UART_Transmit+0x68>
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	691b      	ldr	r3, [r3, #16]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d104      	bne.n	80109e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80109da:	2300      	movs	r3, #0
 80109dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	61bb      	str	r3, [r7, #24]
 80109e2:	e003      	b.n	80109ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80109e8:	2300      	movs	r3, #0
 80109ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80109ec:	e02f      	b.n	8010a4e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	9300      	str	r3, [sp, #0]
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	2200      	movs	r2, #0
 80109f6:	2180      	movs	r1, #128	@ 0x80
 80109f8:	68f8      	ldr	r0, [r7, #12]
 80109fa:	f000 fd27 	bl	801144c <UART_WaitOnFlagUntilTimeout>
 80109fe:	4603      	mov	r3, r0
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d004      	beq.n	8010a0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	2220      	movs	r2, #32
 8010a08:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8010a0a:	2303      	movs	r3, #3
 8010a0c:	e03b      	b.n	8010a86 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8010a0e:	69fb      	ldr	r3, [r7, #28]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d10b      	bne.n	8010a2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010a14:	69bb      	ldr	r3, [r7, #24]
 8010a16:	881a      	ldrh	r2, [r3, #0]
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010a20:	b292      	uxth	r2, r2
 8010a22:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8010a24:	69bb      	ldr	r3, [r7, #24]
 8010a26:	3302      	adds	r3, #2
 8010a28:	61bb      	str	r3, [r7, #24]
 8010a2a:	e007      	b.n	8010a3c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010a2c:	69fb      	ldr	r3, [r7, #28]
 8010a2e:	781a      	ldrb	r2, [r3, #0]
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010a36:	69fb      	ldr	r3, [r7, #28]
 8010a38:	3301      	adds	r3, #1
 8010a3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	3b01      	subs	r3, #1
 8010a46:	b29a      	uxth	r2, r3
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8010a54:	b29b      	uxth	r3, r3
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d1c9      	bne.n	80109ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	9300      	str	r3, [sp, #0]
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	2200      	movs	r2, #0
 8010a62:	2140      	movs	r1, #64	@ 0x40
 8010a64:	68f8      	ldr	r0, [r7, #12]
 8010a66:	f000 fcf1 	bl	801144c <UART_WaitOnFlagUntilTimeout>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d004      	beq.n	8010a7a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2220      	movs	r2, #32
 8010a74:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8010a76:	2303      	movs	r3, #3
 8010a78:	e005      	b.n	8010a86 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	2220      	movs	r2, #32
 8010a7e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8010a80:	2300      	movs	r3, #0
 8010a82:	e000      	b.n	8010a86 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8010a84:	2302      	movs	r3, #2
  }
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3720      	adds	r7, #32
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}

08010a8e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010a8e:	b580      	push	{r7, lr}
 8010a90:	b08a      	sub	sp, #40	@ 0x28
 8010a92:	af02      	add	r7, sp, #8
 8010a94:	60f8      	str	r0, [r7, #12]
 8010a96:	60b9      	str	r1, [r7, #8]
 8010a98:	603b      	str	r3, [r7, #0]
 8010a9a:	4613      	mov	r3, r2
 8010a9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010aa4:	2b20      	cmp	r3, #32
 8010aa6:	f040 80b6 	bne.w	8010c16 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8010aaa:	68bb      	ldr	r3, [r7, #8]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d002      	beq.n	8010ab6 <HAL_UART_Receive+0x28>
 8010ab0:	88fb      	ldrh	r3, [r7, #6]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d101      	bne.n	8010aba <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	e0ae      	b.n	8010c18 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2200      	movs	r2, #0
 8010abe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	2222      	movs	r2, #34	@ 0x22
 8010ac6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	2200      	movs	r2, #0
 8010ace:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010ad0:	f7f7 fc6a 	bl	80083a8 <HAL_GetTick>
 8010ad4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	88fa      	ldrh	r2, [r7, #6]
 8010ada:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	88fa      	ldrh	r2, [r7, #6]
 8010ae2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	689b      	ldr	r3, [r3, #8]
 8010aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010aee:	d10e      	bne.n	8010b0e <HAL_UART_Receive+0x80>
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	691b      	ldr	r3, [r3, #16]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d105      	bne.n	8010b04 <HAL_UART_Receive+0x76>
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8010afe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8010b02:	e02d      	b.n	8010b60 <HAL_UART_Receive+0xd2>
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	22ff      	movs	r2, #255	@ 0xff
 8010b08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8010b0c:	e028      	b.n	8010b60 <HAL_UART_Receive+0xd2>
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	689b      	ldr	r3, [r3, #8]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d10d      	bne.n	8010b32 <HAL_UART_Receive+0xa4>
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	691b      	ldr	r3, [r3, #16]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d104      	bne.n	8010b28 <HAL_UART_Receive+0x9a>
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	22ff      	movs	r2, #255	@ 0xff
 8010b22:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8010b26:	e01b      	b.n	8010b60 <HAL_UART_Receive+0xd2>
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	227f      	movs	r2, #127	@ 0x7f
 8010b2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8010b30:	e016      	b.n	8010b60 <HAL_UART_Receive+0xd2>
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	689b      	ldr	r3, [r3, #8]
 8010b36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010b3a:	d10d      	bne.n	8010b58 <HAL_UART_Receive+0xca>
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	691b      	ldr	r3, [r3, #16]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d104      	bne.n	8010b4e <HAL_UART_Receive+0xc0>
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	227f      	movs	r2, #127	@ 0x7f
 8010b48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8010b4c:	e008      	b.n	8010b60 <HAL_UART_Receive+0xd2>
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	223f      	movs	r2, #63	@ 0x3f
 8010b52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8010b56:	e003      	b.n	8010b60 <HAL_UART_Receive+0xd2>
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010b66:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	689b      	ldr	r3, [r3, #8]
 8010b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010b70:	d108      	bne.n	8010b84 <HAL_UART_Receive+0xf6>
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	691b      	ldr	r3, [r3, #16]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d104      	bne.n	8010b84 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	61bb      	str	r3, [r7, #24]
 8010b82:	e003      	b.n	8010b8c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8010b8c:	e037      	b.n	8010bfe <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	9300      	str	r3, [sp, #0]
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	2200      	movs	r2, #0
 8010b96:	2120      	movs	r1, #32
 8010b98:	68f8      	ldr	r0, [r7, #12]
 8010b9a:	f000 fc57 	bl	801144c <UART_WaitOnFlagUntilTimeout>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d005      	beq.n	8010bb0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	2220      	movs	r2, #32
 8010ba8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8010bac:	2303      	movs	r3, #3
 8010bae:	e033      	b.n	8010c18 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8010bb0:	69fb      	ldr	r3, [r7, #28]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d10c      	bne.n	8010bd0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010bbc:	b29a      	uxth	r2, r3
 8010bbe:	8a7b      	ldrh	r3, [r7, #18]
 8010bc0:	4013      	ands	r3, r2
 8010bc2:	b29a      	uxth	r2, r3
 8010bc4:	69bb      	ldr	r3, [r7, #24]
 8010bc6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010bc8:	69bb      	ldr	r3, [r7, #24]
 8010bca:	3302      	adds	r3, #2
 8010bcc:	61bb      	str	r3, [r7, #24]
 8010bce:	e00d      	b.n	8010bec <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	b2da      	uxtb	r2, r3
 8010bda:	8a7b      	ldrh	r3, [r7, #18]
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	4013      	ands	r3, r2
 8010be0:	b2da      	uxtb	r2, r3
 8010be2:	69fb      	ldr	r3, [r7, #28]
 8010be4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8010be6:	69fb      	ldr	r3, [r7, #28]
 8010be8:	3301      	adds	r3, #1
 8010bea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	3b01      	subs	r3, #1
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d1c1      	bne.n	8010b8e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	2220      	movs	r2, #32
 8010c0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8010c12:	2300      	movs	r3, #0
 8010c14:	e000      	b.n	8010c18 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8010c16:	2302      	movs	r3, #2
  }
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3720      	adds	r7, #32
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b083      	sub	sp, #12
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010c28:	bf00      	nop
 8010c2a:	370c      	adds	r7, #12
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr

08010c34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010c34:	b480      	push	{r7}
 8010c36:	b083      	sub	sp, #12
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010c3c:	bf00      	nop
 8010c3e:	370c      	adds	r7, #12
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c4c:	b08a      	sub	sp, #40	@ 0x28
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010c52:	2300      	movs	r3, #0
 8010c54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	689a      	ldr	r2, [r3, #8]
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	691b      	ldr	r3, [r3, #16]
 8010c60:	431a      	orrs	r2, r3
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	695b      	ldr	r3, [r3, #20]
 8010c66:	431a      	orrs	r2, r3
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	69db      	ldr	r3, [r3, #28]
 8010c6c:	4313      	orrs	r3, r2
 8010c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	681a      	ldr	r2, [r3, #0]
 8010c76:	4ba4      	ldr	r3, [pc, #656]	@ (8010f08 <UART_SetConfig+0x2c0>)
 8010c78:	4013      	ands	r3, r2
 8010c7a:	68fa      	ldr	r2, [r7, #12]
 8010c7c:	6812      	ldr	r2, [r2, #0]
 8010c7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010c80:	430b      	orrs	r3, r1
 8010c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	68da      	ldr	r2, [r3, #12]
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	430a      	orrs	r2, r1
 8010c98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	699b      	ldr	r3, [r3, #24]
 8010c9e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	4a99      	ldr	r2, [pc, #612]	@ (8010f0c <UART_SetConfig+0x2c4>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d004      	beq.n	8010cb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	6a1b      	ldr	r3, [r3, #32]
 8010cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010cb0:	4313      	orrs	r3, r2
 8010cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	689b      	ldr	r3, [r3, #8]
 8010cba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010cc4:	430a      	orrs	r2, r1
 8010cc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	4a90      	ldr	r2, [pc, #576]	@ (8010f10 <UART_SetConfig+0x2c8>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d126      	bne.n	8010d20 <UART_SetConfig+0xd8>
 8010cd2:	4b90      	ldr	r3, [pc, #576]	@ (8010f14 <UART_SetConfig+0x2cc>)
 8010cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010cd8:	f003 0303 	and.w	r3, r3, #3
 8010cdc:	2b03      	cmp	r3, #3
 8010cde:	d81b      	bhi.n	8010d18 <UART_SetConfig+0xd0>
 8010ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8010ce8 <UART_SetConfig+0xa0>)
 8010ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce6:	bf00      	nop
 8010ce8:	08010cf9 	.word	0x08010cf9
 8010cec:	08010d09 	.word	0x08010d09
 8010cf0:	08010d01 	.word	0x08010d01
 8010cf4:	08010d11 	.word	0x08010d11
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010cfe:	e116      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010d00:	2302      	movs	r3, #2
 8010d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010d06:	e112      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010d08:	2304      	movs	r3, #4
 8010d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010d0e:	e10e      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010d10:	2308      	movs	r3, #8
 8010d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010d16:	e10a      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010d18:	2310      	movs	r3, #16
 8010d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010d1e:	e106      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	4a7c      	ldr	r2, [pc, #496]	@ (8010f18 <UART_SetConfig+0x2d0>)
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d138      	bne.n	8010d9c <UART_SetConfig+0x154>
 8010d2a:	4b7a      	ldr	r3, [pc, #488]	@ (8010f14 <UART_SetConfig+0x2cc>)
 8010d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010d30:	f003 030c 	and.w	r3, r3, #12
 8010d34:	2b0c      	cmp	r3, #12
 8010d36:	d82d      	bhi.n	8010d94 <UART_SetConfig+0x14c>
 8010d38:	a201      	add	r2, pc, #4	@ (adr r2, 8010d40 <UART_SetConfig+0xf8>)
 8010d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d3e:	bf00      	nop
 8010d40:	08010d75 	.word	0x08010d75
 8010d44:	08010d95 	.word	0x08010d95
 8010d48:	08010d95 	.word	0x08010d95
 8010d4c:	08010d95 	.word	0x08010d95
 8010d50:	08010d85 	.word	0x08010d85
 8010d54:	08010d95 	.word	0x08010d95
 8010d58:	08010d95 	.word	0x08010d95
 8010d5c:	08010d95 	.word	0x08010d95
 8010d60:	08010d7d 	.word	0x08010d7d
 8010d64:	08010d95 	.word	0x08010d95
 8010d68:	08010d95 	.word	0x08010d95
 8010d6c:	08010d95 	.word	0x08010d95
 8010d70:	08010d8d 	.word	0x08010d8d
 8010d74:	2300      	movs	r3, #0
 8010d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010d7a:	e0d8      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010d7c:	2302      	movs	r3, #2
 8010d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010d82:	e0d4      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010d84:	2304      	movs	r3, #4
 8010d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010d8a:	e0d0      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010d8c:	2308      	movs	r3, #8
 8010d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010d92:	e0cc      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010d94:	2310      	movs	r3, #16
 8010d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010d9a:	e0c8      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	4a5e      	ldr	r2, [pc, #376]	@ (8010f1c <UART_SetConfig+0x2d4>)
 8010da2:	4293      	cmp	r3, r2
 8010da4:	d125      	bne.n	8010df2 <UART_SetConfig+0x1aa>
 8010da6:	4b5b      	ldr	r3, [pc, #364]	@ (8010f14 <UART_SetConfig+0x2cc>)
 8010da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010dac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010db0:	2b30      	cmp	r3, #48	@ 0x30
 8010db2:	d016      	beq.n	8010de2 <UART_SetConfig+0x19a>
 8010db4:	2b30      	cmp	r3, #48	@ 0x30
 8010db6:	d818      	bhi.n	8010dea <UART_SetConfig+0x1a2>
 8010db8:	2b20      	cmp	r3, #32
 8010dba:	d00a      	beq.n	8010dd2 <UART_SetConfig+0x18a>
 8010dbc:	2b20      	cmp	r3, #32
 8010dbe:	d814      	bhi.n	8010dea <UART_SetConfig+0x1a2>
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d002      	beq.n	8010dca <UART_SetConfig+0x182>
 8010dc4:	2b10      	cmp	r3, #16
 8010dc6:	d008      	beq.n	8010dda <UART_SetConfig+0x192>
 8010dc8:	e00f      	b.n	8010dea <UART_SetConfig+0x1a2>
 8010dca:	2300      	movs	r3, #0
 8010dcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010dd0:	e0ad      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010dd2:	2302      	movs	r3, #2
 8010dd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010dd8:	e0a9      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010dda:	2304      	movs	r3, #4
 8010ddc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010de0:	e0a5      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010de2:	2308      	movs	r3, #8
 8010de4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010de8:	e0a1      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010dea:	2310      	movs	r3, #16
 8010dec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010df0:	e09d      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	4a4a      	ldr	r2, [pc, #296]	@ (8010f20 <UART_SetConfig+0x2d8>)
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	d125      	bne.n	8010e48 <UART_SetConfig+0x200>
 8010dfc:	4b45      	ldr	r3, [pc, #276]	@ (8010f14 <UART_SetConfig+0x2cc>)
 8010dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8010e06:	2bc0      	cmp	r3, #192	@ 0xc0
 8010e08:	d016      	beq.n	8010e38 <UART_SetConfig+0x1f0>
 8010e0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8010e0c:	d818      	bhi.n	8010e40 <UART_SetConfig+0x1f8>
 8010e0e:	2b80      	cmp	r3, #128	@ 0x80
 8010e10:	d00a      	beq.n	8010e28 <UART_SetConfig+0x1e0>
 8010e12:	2b80      	cmp	r3, #128	@ 0x80
 8010e14:	d814      	bhi.n	8010e40 <UART_SetConfig+0x1f8>
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d002      	beq.n	8010e20 <UART_SetConfig+0x1d8>
 8010e1a:	2b40      	cmp	r3, #64	@ 0x40
 8010e1c:	d008      	beq.n	8010e30 <UART_SetConfig+0x1e8>
 8010e1e:	e00f      	b.n	8010e40 <UART_SetConfig+0x1f8>
 8010e20:	2300      	movs	r3, #0
 8010e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010e26:	e082      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010e28:	2302      	movs	r3, #2
 8010e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010e2e:	e07e      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010e30:	2304      	movs	r3, #4
 8010e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010e36:	e07a      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010e38:	2308      	movs	r3, #8
 8010e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010e3e:	e076      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010e40:	2310      	movs	r3, #16
 8010e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010e46:	e072      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4a35      	ldr	r2, [pc, #212]	@ (8010f24 <UART_SetConfig+0x2dc>)
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d12a      	bne.n	8010ea8 <UART_SetConfig+0x260>
 8010e52:	4b30      	ldr	r3, [pc, #192]	@ (8010f14 <UART_SetConfig+0x2cc>)
 8010e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010e5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010e60:	d01a      	beq.n	8010e98 <UART_SetConfig+0x250>
 8010e62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010e66:	d81b      	bhi.n	8010ea0 <UART_SetConfig+0x258>
 8010e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e6c:	d00c      	beq.n	8010e88 <UART_SetConfig+0x240>
 8010e6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e72:	d815      	bhi.n	8010ea0 <UART_SetConfig+0x258>
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d003      	beq.n	8010e80 <UART_SetConfig+0x238>
 8010e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010e7c:	d008      	beq.n	8010e90 <UART_SetConfig+0x248>
 8010e7e:	e00f      	b.n	8010ea0 <UART_SetConfig+0x258>
 8010e80:	2300      	movs	r3, #0
 8010e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010e86:	e052      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010e88:	2302      	movs	r3, #2
 8010e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010e8e:	e04e      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010e90:	2304      	movs	r3, #4
 8010e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010e96:	e04a      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010e98:	2308      	movs	r3, #8
 8010e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010e9e:	e046      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010ea0:	2310      	movs	r3, #16
 8010ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010ea6:	e042      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	4a17      	ldr	r2, [pc, #92]	@ (8010f0c <UART_SetConfig+0x2c4>)
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	d13a      	bne.n	8010f28 <UART_SetConfig+0x2e0>
 8010eb2:	4b18      	ldr	r3, [pc, #96]	@ (8010f14 <UART_SetConfig+0x2cc>)
 8010eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010eb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010ebc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010ec0:	d01a      	beq.n	8010ef8 <UART_SetConfig+0x2b0>
 8010ec2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010ec6:	d81b      	bhi.n	8010f00 <UART_SetConfig+0x2b8>
 8010ec8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010ecc:	d00c      	beq.n	8010ee8 <UART_SetConfig+0x2a0>
 8010ece:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010ed2:	d815      	bhi.n	8010f00 <UART_SetConfig+0x2b8>
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d003      	beq.n	8010ee0 <UART_SetConfig+0x298>
 8010ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010edc:	d008      	beq.n	8010ef0 <UART_SetConfig+0x2a8>
 8010ede:	e00f      	b.n	8010f00 <UART_SetConfig+0x2b8>
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010ee6:	e022      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010ee8:	2302      	movs	r3, #2
 8010eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010eee:	e01e      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010ef0:	2304      	movs	r3, #4
 8010ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010ef6:	e01a      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010ef8:	2308      	movs	r3, #8
 8010efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010efe:	e016      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010f00:	2310      	movs	r3, #16
 8010f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010f06:	e012      	b.n	8010f2e <UART_SetConfig+0x2e6>
 8010f08:	efff69f3 	.word	0xefff69f3
 8010f0c:	40008000 	.word	0x40008000
 8010f10:	40013800 	.word	0x40013800
 8010f14:	40021000 	.word	0x40021000
 8010f18:	40004400 	.word	0x40004400
 8010f1c:	40004800 	.word	0x40004800
 8010f20:	40004c00 	.word	0x40004c00
 8010f24:	40005000 	.word	0x40005000
 8010f28:	2310      	movs	r3, #16
 8010f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	4a9f      	ldr	r2, [pc, #636]	@ (80111b0 <UART_SetConfig+0x568>)
 8010f34:	4293      	cmp	r3, r2
 8010f36:	d17a      	bne.n	801102e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010f38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010f3c:	2b08      	cmp	r3, #8
 8010f3e:	d824      	bhi.n	8010f8a <UART_SetConfig+0x342>
 8010f40:	a201      	add	r2, pc, #4	@ (adr r2, 8010f48 <UART_SetConfig+0x300>)
 8010f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f46:	bf00      	nop
 8010f48:	08010f6d 	.word	0x08010f6d
 8010f4c:	08010f8b 	.word	0x08010f8b
 8010f50:	08010f75 	.word	0x08010f75
 8010f54:	08010f8b 	.word	0x08010f8b
 8010f58:	08010f7b 	.word	0x08010f7b
 8010f5c:	08010f8b 	.word	0x08010f8b
 8010f60:	08010f8b 	.word	0x08010f8b
 8010f64:	08010f8b 	.word	0x08010f8b
 8010f68:	08010f83 	.word	0x08010f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010f6c:	f7fb fc1e 	bl	800c7ac <HAL_RCC_GetPCLK1Freq>
 8010f70:	61f8      	str	r0, [r7, #28]
        break;
 8010f72:	e010      	b.n	8010f96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010f74:	4b8f      	ldr	r3, [pc, #572]	@ (80111b4 <UART_SetConfig+0x56c>)
 8010f76:	61fb      	str	r3, [r7, #28]
        break;
 8010f78:	e00d      	b.n	8010f96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010f7a:	f7fb fb7f 	bl	800c67c <HAL_RCC_GetSysClockFreq>
 8010f7e:	61f8      	str	r0, [r7, #28]
        break;
 8010f80:	e009      	b.n	8010f96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010f86:	61fb      	str	r3, [r7, #28]
        break;
 8010f88:	e005      	b.n	8010f96 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8010f8e:	2301      	movs	r3, #1
 8010f90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8010f94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010f96:	69fb      	ldr	r3, [r7, #28]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	f000 80fb 	beq.w	8011194 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	685a      	ldr	r2, [r3, #4]
 8010fa2:	4613      	mov	r3, r2
 8010fa4:	005b      	lsls	r3, r3, #1
 8010fa6:	4413      	add	r3, r2
 8010fa8:	69fa      	ldr	r2, [r7, #28]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d305      	bcc.n	8010fba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010fb4:	69fa      	ldr	r2, [r7, #28]
 8010fb6:	429a      	cmp	r2, r3
 8010fb8:	d903      	bls.n	8010fc2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8010fba:	2301      	movs	r3, #1
 8010fbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8010fc0:	e0e8      	b.n	8011194 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8010fc2:	69fb      	ldr	r3, [r7, #28]
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	461c      	mov	r4, r3
 8010fc8:	4615      	mov	r5, r2
 8010fca:	f04f 0200 	mov.w	r2, #0
 8010fce:	f04f 0300 	mov.w	r3, #0
 8010fd2:	022b      	lsls	r3, r5, #8
 8010fd4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8010fd8:	0222      	lsls	r2, r4, #8
 8010fda:	68f9      	ldr	r1, [r7, #12]
 8010fdc:	6849      	ldr	r1, [r1, #4]
 8010fde:	0849      	lsrs	r1, r1, #1
 8010fe0:	2000      	movs	r0, #0
 8010fe2:	4688      	mov	r8, r1
 8010fe4:	4681      	mov	r9, r0
 8010fe6:	eb12 0a08 	adds.w	sl, r2, r8
 8010fea:	eb43 0b09 	adc.w	fp, r3, r9
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	685b      	ldr	r3, [r3, #4]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	603b      	str	r3, [r7, #0]
 8010ff6:	607a      	str	r2, [r7, #4]
 8010ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ffc:	4650      	mov	r0, sl
 8010ffe:	4659      	mov	r1, fp
 8011000:	f7ef f94e 	bl	80002a0 <__aeabi_uldivmod>
 8011004:	4602      	mov	r2, r0
 8011006:	460b      	mov	r3, r1
 8011008:	4613      	mov	r3, r2
 801100a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801100c:	69bb      	ldr	r3, [r7, #24]
 801100e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011012:	d308      	bcc.n	8011026 <UART_SetConfig+0x3de>
 8011014:	69bb      	ldr	r3, [r7, #24]
 8011016:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801101a:	d204      	bcs.n	8011026 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	69ba      	ldr	r2, [r7, #24]
 8011022:	60da      	str	r2, [r3, #12]
 8011024:	e0b6      	b.n	8011194 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8011026:	2301      	movs	r3, #1
 8011028:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801102c:	e0b2      	b.n	8011194 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	69db      	ldr	r3, [r3, #28]
 8011032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011036:	d15e      	bne.n	80110f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8011038:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801103c:	2b08      	cmp	r3, #8
 801103e:	d828      	bhi.n	8011092 <UART_SetConfig+0x44a>
 8011040:	a201      	add	r2, pc, #4	@ (adr r2, 8011048 <UART_SetConfig+0x400>)
 8011042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011046:	bf00      	nop
 8011048:	0801106d 	.word	0x0801106d
 801104c:	08011075 	.word	0x08011075
 8011050:	0801107d 	.word	0x0801107d
 8011054:	08011093 	.word	0x08011093
 8011058:	08011083 	.word	0x08011083
 801105c:	08011093 	.word	0x08011093
 8011060:	08011093 	.word	0x08011093
 8011064:	08011093 	.word	0x08011093
 8011068:	0801108b 	.word	0x0801108b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801106c:	f7fb fb9e 	bl	800c7ac <HAL_RCC_GetPCLK1Freq>
 8011070:	61f8      	str	r0, [r7, #28]
        break;
 8011072:	e014      	b.n	801109e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011074:	f7fb fbb0 	bl	800c7d8 <HAL_RCC_GetPCLK2Freq>
 8011078:	61f8      	str	r0, [r7, #28]
        break;
 801107a:	e010      	b.n	801109e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801107c:	4b4d      	ldr	r3, [pc, #308]	@ (80111b4 <UART_SetConfig+0x56c>)
 801107e:	61fb      	str	r3, [r7, #28]
        break;
 8011080:	e00d      	b.n	801109e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011082:	f7fb fafb 	bl	800c67c <HAL_RCC_GetSysClockFreq>
 8011086:	61f8      	str	r0, [r7, #28]
        break;
 8011088:	e009      	b.n	801109e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801108a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801108e:	61fb      	str	r3, [r7, #28]
        break;
 8011090:	e005      	b.n	801109e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8011092:	2300      	movs	r3, #0
 8011094:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8011096:	2301      	movs	r3, #1
 8011098:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801109c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801109e:	69fb      	ldr	r3, [r7, #28]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d077      	beq.n	8011194 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80110a4:	69fb      	ldr	r3, [r7, #28]
 80110a6:	005a      	lsls	r2, r3, #1
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	685b      	ldr	r3, [r3, #4]
 80110ac:	085b      	lsrs	r3, r3, #1
 80110ae:	441a      	add	r2, r3
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80110b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80110ba:	69bb      	ldr	r3, [r7, #24]
 80110bc:	2b0f      	cmp	r3, #15
 80110be:	d916      	bls.n	80110ee <UART_SetConfig+0x4a6>
 80110c0:	69bb      	ldr	r3, [r7, #24]
 80110c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80110c6:	d212      	bcs.n	80110ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80110c8:	69bb      	ldr	r3, [r7, #24]
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	f023 030f 	bic.w	r3, r3, #15
 80110d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80110d2:	69bb      	ldr	r3, [r7, #24]
 80110d4:	085b      	lsrs	r3, r3, #1
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	f003 0307 	and.w	r3, r3, #7
 80110dc:	b29a      	uxth	r2, r3
 80110de:	8afb      	ldrh	r3, [r7, #22]
 80110e0:	4313      	orrs	r3, r2
 80110e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	8afa      	ldrh	r2, [r7, #22]
 80110ea:	60da      	str	r2, [r3, #12]
 80110ec:	e052      	b.n	8011194 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80110ee:	2301      	movs	r3, #1
 80110f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80110f4:	e04e      	b.n	8011194 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80110f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80110fa:	2b08      	cmp	r3, #8
 80110fc:	d827      	bhi.n	801114e <UART_SetConfig+0x506>
 80110fe:	a201      	add	r2, pc, #4	@ (adr r2, 8011104 <UART_SetConfig+0x4bc>)
 8011100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011104:	08011129 	.word	0x08011129
 8011108:	08011131 	.word	0x08011131
 801110c:	08011139 	.word	0x08011139
 8011110:	0801114f 	.word	0x0801114f
 8011114:	0801113f 	.word	0x0801113f
 8011118:	0801114f 	.word	0x0801114f
 801111c:	0801114f 	.word	0x0801114f
 8011120:	0801114f 	.word	0x0801114f
 8011124:	08011147 	.word	0x08011147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011128:	f7fb fb40 	bl	800c7ac <HAL_RCC_GetPCLK1Freq>
 801112c:	61f8      	str	r0, [r7, #28]
        break;
 801112e:	e014      	b.n	801115a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011130:	f7fb fb52 	bl	800c7d8 <HAL_RCC_GetPCLK2Freq>
 8011134:	61f8      	str	r0, [r7, #28]
        break;
 8011136:	e010      	b.n	801115a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011138:	4b1e      	ldr	r3, [pc, #120]	@ (80111b4 <UART_SetConfig+0x56c>)
 801113a:	61fb      	str	r3, [r7, #28]
        break;
 801113c:	e00d      	b.n	801115a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801113e:	f7fb fa9d 	bl	800c67c <HAL_RCC_GetSysClockFreq>
 8011142:	61f8      	str	r0, [r7, #28]
        break;
 8011144:	e009      	b.n	801115a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801114a:	61fb      	str	r3, [r7, #28]
        break;
 801114c:	e005      	b.n	801115a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 801114e:	2300      	movs	r3, #0
 8011150:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8011152:	2301      	movs	r3, #1
 8011154:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8011158:	bf00      	nop
    }

    if (pclk != 0U)
 801115a:	69fb      	ldr	r3, [r7, #28]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d019      	beq.n	8011194 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	685b      	ldr	r3, [r3, #4]
 8011164:	085a      	lsrs	r2, r3, #1
 8011166:	69fb      	ldr	r3, [r7, #28]
 8011168:	441a      	add	r2, r3
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011172:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011174:	69bb      	ldr	r3, [r7, #24]
 8011176:	2b0f      	cmp	r3, #15
 8011178:	d909      	bls.n	801118e <UART_SetConfig+0x546>
 801117a:	69bb      	ldr	r3, [r7, #24]
 801117c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011180:	d205      	bcs.n	801118e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011182:	69bb      	ldr	r3, [r7, #24]
 8011184:	b29a      	uxth	r2, r3
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	60da      	str	r2, [r3, #12]
 801118c:	e002      	b.n	8011194 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 801118e:	2301      	movs	r3, #1
 8011190:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2200      	movs	r2, #0
 8011198:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2200      	movs	r2, #0
 801119e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80111a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3728      	adds	r7, #40	@ 0x28
 80111a8:	46bd      	mov	sp, r7
 80111aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80111ae:	bf00      	nop
 80111b0:	40008000 	.word	0x40008000
 80111b4:	00f42400 	.word	0x00f42400

080111b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80111b8:	b480      	push	{r7}
 80111ba:	b083      	sub	sp, #12
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111c4:	f003 0308 	and.w	r3, r3, #8
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d00a      	beq.n	80111e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	430a      	orrs	r2, r1
 80111e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111e6:	f003 0301 	and.w	r3, r3, #1
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d00a      	beq.n	8011204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	430a      	orrs	r2, r1
 8011202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011208:	f003 0302 	and.w	r3, r3, #2
 801120c:	2b00      	cmp	r3, #0
 801120e:	d00a      	beq.n	8011226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	430a      	orrs	r2, r1
 8011224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801122a:	f003 0304 	and.w	r3, r3, #4
 801122e:	2b00      	cmp	r3, #0
 8011230:	d00a      	beq.n	8011248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	430a      	orrs	r2, r1
 8011246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801124c:	f003 0310 	and.w	r3, r3, #16
 8011250:	2b00      	cmp	r3, #0
 8011252:	d00a      	beq.n	801126a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	689b      	ldr	r3, [r3, #8]
 801125a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	430a      	orrs	r2, r1
 8011268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801126e:	f003 0320 	and.w	r3, r3, #32
 8011272:	2b00      	cmp	r3, #0
 8011274:	d00a      	beq.n	801128c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	689b      	ldr	r3, [r3, #8]
 801127c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	430a      	orrs	r2, r1
 801128a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011294:	2b00      	cmp	r3, #0
 8011296:	d01a      	beq.n	80112ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	430a      	orrs	r2, r1
 80112ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80112b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80112b6:	d10a      	bne.n	80112ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	430a      	orrs	r2, r1
 80112cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d00a      	beq.n	80112f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	685b      	ldr	r3, [r3, #4]
 80112e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	430a      	orrs	r2, r1
 80112ee:	605a      	str	r2, [r3, #4]
  }
}
 80112f0:	bf00      	nop
 80112f2:	370c      	adds	r7, #12
 80112f4:	46bd      	mov	sp, r7
 80112f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fa:	4770      	bx	lr

080112fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b098      	sub	sp, #96	@ 0x60
 8011300:	af02      	add	r7, sp, #8
 8011302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2200      	movs	r2, #0
 8011308:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801130c:	f7f7 f84c 	bl	80083a8 <HAL_GetTick>
 8011310:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	f003 0308 	and.w	r3, r3, #8
 801131c:	2b08      	cmp	r3, #8
 801131e:	d12e      	bne.n	801137e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011320:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011324:	9300      	str	r3, [sp, #0]
 8011326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011328:	2200      	movs	r2, #0
 801132a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 f88c 	bl	801144c <UART_WaitOnFlagUntilTimeout>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d021      	beq.n	801137e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011342:	e853 3f00 	ldrex	r3, [r3]
 8011346:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801134a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801134e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	461a      	mov	r2, r3
 8011356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011358:	647b      	str	r3, [r7, #68]	@ 0x44
 801135a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801135c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801135e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011360:	e841 2300 	strex	r3, r2, [r1]
 8011364:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011368:	2b00      	cmp	r3, #0
 801136a:	d1e6      	bne.n	801133a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2220      	movs	r2, #32
 8011370:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2200      	movs	r2, #0
 8011376:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801137a:	2303      	movs	r3, #3
 801137c:	e062      	b.n	8011444 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	f003 0304 	and.w	r3, r3, #4
 8011388:	2b04      	cmp	r3, #4
 801138a:	d149      	bne.n	8011420 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801138c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011390:	9300      	str	r3, [sp, #0]
 8011392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011394:	2200      	movs	r2, #0
 8011396:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f000 f856 	bl	801144c <UART_WaitOnFlagUntilTimeout>
 80113a0:	4603      	mov	r3, r0
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d03c      	beq.n	8011420 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113ae:	e853 3f00 	ldrex	r3, [r3]
 80113b2:	623b      	str	r3, [r7, #32]
   return(result);
 80113b4:	6a3b      	ldr	r3, [r7, #32]
 80113b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80113ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	461a      	mov	r2, r3
 80113c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80113c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80113ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80113cc:	e841 2300 	strex	r3, r2, [r1]
 80113d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80113d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d1e6      	bne.n	80113a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	3308      	adds	r3, #8
 80113de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	e853 3f00 	ldrex	r3, [r3]
 80113e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f023 0301 	bic.w	r3, r3, #1
 80113ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	3308      	adds	r3, #8
 80113f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80113f8:	61fa      	str	r2, [r7, #28]
 80113fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113fc:	69b9      	ldr	r1, [r7, #24]
 80113fe:	69fa      	ldr	r2, [r7, #28]
 8011400:	e841 2300 	strex	r3, r2, [r1]
 8011404:	617b      	str	r3, [r7, #20]
   return(result);
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d1e5      	bne.n	80113d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2220      	movs	r2, #32
 8011410:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2200      	movs	r2, #0
 8011418:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801141c:	2303      	movs	r3, #3
 801141e:	e011      	b.n	8011444 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2220      	movs	r2, #32
 8011424:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2220      	movs	r2, #32
 801142a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2200      	movs	r2, #0
 8011432:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2200      	movs	r2, #0
 8011438:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2200      	movs	r2, #0
 801143e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8011442:	2300      	movs	r3, #0
}
 8011444:	4618      	mov	r0, r3
 8011446:	3758      	adds	r7, #88	@ 0x58
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}

0801144c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b084      	sub	sp, #16
 8011450:	af00      	add	r7, sp, #0
 8011452:	60f8      	str	r0, [r7, #12]
 8011454:	60b9      	str	r1, [r7, #8]
 8011456:	603b      	str	r3, [r7, #0]
 8011458:	4613      	mov	r3, r2
 801145a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801145c:	e04f      	b.n	80114fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801145e:	69bb      	ldr	r3, [r7, #24]
 8011460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011464:	d04b      	beq.n	80114fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011466:	f7f6 ff9f 	bl	80083a8 <HAL_GetTick>
 801146a:	4602      	mov	r2, r0
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	1ad3      	subs	r3, r2, r3
 8011470:	69ba      	ldr	r2, [r7, #24]
 8011472:	429a      	cmp	r2, r3
 8011474:	d302      	bcc.n	801147c <UART_WaitOnFlagUntilTimeout+0x30>
 8011476:	69bb      	ldr	r3, [r7, #24]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d101      	bne.n	8011480 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801147c:	2303      	movs	r3, #3
 801147e:	e04e      	b.n	801151e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	f003 0304 	and.w	r3, r3, #4
 801148a:	2b00      	cmp	r3, #0
 801148c:	d037      	beq.n	80114fe <UART_WaitOnFlagUntilTimeout+0xb2>
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	2b80      	cmp	r3, #128	@ 0x80
 8011492:	d034      	beq.n	80114fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	2b40      	cmp	r3, #64	@ 0x40
 8011498:	d031      	beq.n	80114fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	69db      	ldr	r3, [r3, #28]
 80114a0:	f003 0308 	and.w	r3, r3, #8
 80114a4:	2b08      	cmp	r3, #8
 80114a6:	d110      	bne.n	80114ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	2208      	movs	r2, #8
 80114ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80114b0:	68f8      	ldr	r0, [r7, #12]
 80114b2:	f000 f8ff 	bl	80116b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	2208      	movs	r2, #8
 80114ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	2200      	movs	r2, #0
 80114c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80114c6:	2301      	movs	r3, #1
 80114c8:	e029      	b.n	801151e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	69db      	ldr	r3, [r3, #28]
 80114d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80114d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80114d8:	d111      	bne.n	80114fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80114e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80114e4:	68f8      	ldr	r0, [r7, #12]
 80114e6:	f000 f8e5 	bl	80116b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	2220      	movs	r2, #32
 80114ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	2200      	movs	r2, #0
 80114f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80114fa:	2303      	movs	r3, #3
 80114fc:	e00f      	b.n	801151e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	69da      	ldr	r2, [r3, #28]
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	4013      	ands	r3, r2
 8011508:	68ba      	ldr	r2, [r7, #8]
 801150a:	429a      	cmp	r2, r3
 801150c:	bf0c      	ite	eq
 801150e:	2301      	moveq	r3, #1
 8011510:	2300      	movne	r3, #0
 8011512:	b2db      	uxtb	r3, r3
 8011514:	461a      	mov	r2, r3
 8011516:	79fb      	ldrb	r3, [r7, #7]
 8011518:	429a      	cmp	r2, r3
 801151a:	d0a0      	beq.n	801145e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801151c:	2300      	movs	r3, #0
}
 801151e:	4618      	mov	r0, r3
 8011520:	3710      	adds	r7, #16
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
	...

08011528 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b096      	sub	sp, #88	@ 0x58
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	4613      	mov	r3, r2
 8011534:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	68ba      	ldr	r2, [r7, #8]
 801153a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	88fa      	ldrh	r2, [r7, #6]
 8011540:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	2200      	movs	r2, #0
 8011548:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	2222      	movs	r2, #34	@ 0x22
 8011550:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011558:	2b00      	cmp	r3, #0
 801155a:	d028      	beq.n	80115ae <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011560:	4a3e      	ldr	r2, [pc, #248]	@ (801165c <UART_Start_Receive_DMA+0x134>)
 8011562:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011568:	4a3d      	ldr	r2, [pc, #244]	@ (8011660 <UART_Start_Receive_DMA+0x138>)
 801156a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011570:	4a3c      	ldr	r2, [pc, #240]	@ (8011664 <UART_Start_Receive_DMA+0x13c>)
 8011572:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011578:	2200      	movs	r2, #0
 801157a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	3324      	adds	r3, #36	@ 0x24
 8011586:	4619      	mov	r1, r3
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801158c:	461a      	mov	r2, r3
 801158e:	88fb      	ldrh	r3, [r7, #6]
 8011590:	f7f8 fdaa 	bl	800a0e8 <HAL_DMA_Start_IT>
 8011594:	4603      	mov	r3, r0
 8011596:	2b00      	cmp	r3, #0
 8011598:	d009      	beq.n	80115ae <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2210      	movs	r2, #16
 801159e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	2220      	movs	r2, #32
 80115a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80115aa:	2301      	movs	r3, #1
 80115ac:	e051      	b.n	8011652 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	691b      	ldr	r3, [r3, #16]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d018      	beq.n	80115e8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115be:	e853 3f00 	ldrex	r3, [r3]
 80115c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80115c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80115ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	461a      	mov	r2, r3
 80115d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80115d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80115d6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80115da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80115dc:	e841 2300 	strex	r3, r2, [r1]
 80115e0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80115e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d1e6      	bne.n	80115b6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	3308      	adds	r3, #8
 80115ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115f2:	e853 3f00 	ldrex	r3, [r3]
 80115f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80115f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115fa:	f043 0301 	orr.w	r3, r3, #1
 80115fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	3308      	adds	r3, #8
 8011606:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011608:	637a      	str	r2, [r7, #52]	@ 0x34
 801160a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801160c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801160e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011610:	e841 2300 	strex	r3, r2, [r1]
 8011614:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011618:	2b00      	cmp	r3, #0
 801161a:	d1e5      	bne.n	80115e8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	3308      	adds	r3, #8
 8011622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	e853 3f00 	ldrex	r3, [r3]
 801162a:	613b      	str	r3, [r7, #16]
   return(result);
 801162c:	693b      	ldr	r3, [r7, #16]
 801162e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	3308      	adds	r3, #8
 801163a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801163c:	623a      	str	r2, [r7, #32]
 801163e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011640:	69f9      	ldr	r1, [r7, #28]
 8011642:	6a3a      	ldr	r2, [r7, #32]
 8011644:	e841 2300 	strex	r3, r2, [r1]
 8011648:	61bb      	str	r3, [r7, #24]
   return(result);
 801164a:	69bb      	ldr	r3, [r7, #24]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d1e5      	bne.n	801161c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8011650:	2300      	movs	r3, #0
}
 8011652:	4618      	mov	r0, r3
 8011654:	3758      	adds	r7, #88	@ 0x58
 8011656:	46bd      	mov	sp, r7
 8011658:	bd80      	pop	{r7, pc}
 801165a:	bf00      	nop
 801165c:	0801177d 	.word	0x0801177d
 8011660:	080118a9 	.word	0x080118a9
 8011664:	080118e7 	.word	0x080118e7

08011668 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011668:	b480      	push	{r7}
 801166a:	b089      	sub	sp, #36	@ 0x24
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	e853 3f00 	ldrex	r3, [r3]
 801167c:	60bb      	str	r3, [r7, #8]
   return(result);
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011684:	61fb      	str	r3, [r7, #28]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	461a      	mov	r2, r3
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	61bb      	str	r3, [r7, #24]
 8011690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011692:	6979      	ldr	r1, [r7, #20]
 8011694:	69ba      	ldr	r2, [r7, #24]
 8011696:	e841 2300 	strex	r3, r2, [r1]
 801169a:	613b      	str	r3, [r7, #16]
   return(result);
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d1e6      	bne.n	8011670 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2220      	movs	r2, #32
 80116a6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80116a8:	bf00      	nop
 80116aa:	3724      	adds	r7, #36	@ 0x24
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr

080116b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80116b4:	b480      	push	{r7}
 80116b6:	b095      	sub	sp, #84	@ 0x54
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116c4:	e853 3f00 	ldrex	r3, [r3]
 80116c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80116ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80116d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	461a      	mov	r2, r3
 80116d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116da:	643b      	str	r3, [r7, #64]	@ 0x40
 80116dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80116e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80116e2:	e841 2300 	strex	r3, r2, [r1]
 80116e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80116e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d1e6      	bne.n	80116bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	3308      	adds	r3, #8
 80116f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116f6:	6a3b      	ldr	r3, [r7, #32]
 80116f8:	e853 3f00 	ldrex	r3, [r3]
 80116fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80116fe:	69fb      	ldr	r3, [r7, #28]
 8011700:	f023 0301 	bic.w	r3, r3, #1
 8011704:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	3308      	adds	r3, #8
 801170c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801170e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011710:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011714:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011716:	e841 2300 	strex	r3, r2, [r1]
 801171a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801171c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801171e:	2b00      	cmp	r3, #0
 8011720:	d1e5      	bne.n	80116ee <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011726:	2b01      	cmp	r3, #1
 8011728:	d118      	bne.n	801175c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	e853 3f00 	ldrex	r3, [r3]
 8011736:	60bb      	str	r3, [r7, #8]
   return(result);
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	f023 0310 	bic.w	r3, r3, #16
 801173e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	461a      	mov	r2, r3
 8011746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011748:	61bb      	str	r3, [r7, #24]
 801174a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801174c:	6979      	ldr	r1, [r7, #20]
 801174e:	69ba      	ldr	r2, [r7, #24]
 8011750:	e841 2300 	strex	r3, r2, [r1]
 8011754:	613b      	str	r3, [r7, #16]
   return(result);
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d1e6      	bne.n	801172a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2220      	movs	r2, #32
 8011760:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2200      	movs	r2, #0
 8011768:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2200      	movs	r2, #0
 801176e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8011770:	bf00      	nop
 8011772:	3754      	adds	r7, #84	@ 0x54
 8011774:	46bd      	mov	sp, r7
 8011776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177a:	4770      	bx	lr

0801177c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b09c      	sub	sp, #112	@ 0x70
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011788:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	f003 0320 	and.w	r3, r3, #32
 8011794:	2b00      	cmp	r3, #0
 8011796:	d171      	bne.n	801187c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8011798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801179a:	2200      	movs	r2, #0
 801179c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80117a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117a8:	e853 3f00 	ldrex	r3, [r3]
 80117ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80117ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80117b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80117b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	461a      	mov	r2, r3
 80117bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80117be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80117c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80117c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80117c6:	e841 2300 	strex	r3, r2, [r1]
 80117ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80117cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d1e6      	bne.n	80117a0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80117d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	3308      	adds	r3, #8
 80117d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117dc:	e853 3f00 	ldrex	r3, [r3]
 80117e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80117e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117e4:	f023 0301 	bic.w	r3, r3, #1
 80117e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80117ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	3308      	adds	r3, #8
 80117f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80117f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80117f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80117f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80117fa:	e841 2300 	strex	r3, r2, [r1]
 80117fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011802:	2b00      	cmp	r3, #0
 8011804:	d1e5      	bne.n	80117d2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	3308      	adds	r3, #8
 801180c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011810:	e853 3f00 	ldrex	r3, [r3]
 8011814:	623b      	str	r3, [r7, #32]
   return(result);
 8011816:	6a3b      	ldr	r3, [r7, #32]
 8011818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801181c:	663b      	str	r3, [r7, #96]	@ 0x60
 801181e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	3308      	adds	r3, #8
 8011824:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011826:	633a      	str	r2, [r7, #48]	@ 0x30
 8011828:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801182a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801182c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801182e:	e841 2300 	strex	r3, r2, [r1]
 8011832:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011836:	2b00      	cmp	r3, #0
 8011838:	d1e5      	bne.n	8011806 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801183a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801183c:	2220      	movs	r2, #32
 801183e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011846:	2b01      	cmp	r3, #1
 8011848:	d118      	bne.n	801187c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801184a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	e853 3f00 	ldrex	r3, [r3]
 8011856:	60fb      	str	r3, [r7, #12]
   return(result);
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	f023 0310 	bic.w	r3, r3, #16
 801185e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	461a      	mov	r2, r3
 8011866:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011868:	61fb      	str	r3, [r7, #28]
 801186a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801186c:	69b9      	ldr	r1, [r7, #24]
 801186e:	69fa      	ldr	r2, [r7, #28]
 8011870:	e841 2300 	strex	r3, r2, [r1]
 8011874:	617b      	str	r3, [r7, #20]
   return(result);
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d1e6      	bne.n	801184a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801187c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801187e:	2200      	movs	r2, #0
 8011880:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011886:	2b01      	cmp	r3, #1
 8011888:	d107      	bne.n	801189a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801188a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801188c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8011890:	4619      	mov	r1, r3
 8011892:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011894:	f7ef ff3c 	bl	8001710 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011898:	e002      	b.n	80118a0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 801189a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801189c:	f7ef ff6a 	bl	8001774 <HAL_UART_RxCpltCallback>
}
 80118a0:	bf00      	nop
 80118a2:	3770      	adds	r7, #112	@ 0x70
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}

080118a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b084      	sub	sp, #16
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118b4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	2201      	movs	r2, #1
 80118ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80118c0:	2b01      	cmp	r3, #1
 80118c2:	d109      	bne.n	80118d8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80118ca:	085b      	lsrs	r3, r3, #1
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	4619      	mov	r1, r3
 80118d0:	68f8      	ldr	r0, [r7, #12]
 80118d2:	f7ef ff1d 	bl	8001710 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80118d6:	e002      	b.n	80118de <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80118d8:	68f8      	ldr	r0, [r7, #12]
 80118da:	f7ff f9a1 	bl	8010c20 <HAL_UART_RxHalfCpltCallback>
}
 80118de:	bf00      	nop
 80118e0:	3710      	adds	r7, #16
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80118e6:	b580      	push	{r7, lr}
 80118e8:	b086      	sub	sp, #24
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118f2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80118f8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011900:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	689b      	ldr	r3, [r3, #8]
 8011908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801190c:	2b80      	cmp	r3, #128	@ 0x80
 801190e:	d109      	bne.n	8011924 <UART_DMAError+0x3e>
 8011910:	693b      	ldr	r3, [r7, #16]
 8011912:	2b21      	cmp	r3, #33	@ 0x21
 8011914:	d106      	bne.n	8011924 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	2200      	movs	r2, #0
 801191a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 801191e:	6978      	ldr	r0, [r7, #20]
 8011920:	f7ff fea2 	bl	8011668 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	689b      	ldr	r3, [r3, #8]
 801192a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801192e:	2b40      	cmp	r3, #64	@ 0x40
 8011930:	d109      	bne.n	8011946 <UART_DMAError+0x60>
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	2b22      	cmp	r3, #34	@ 0x22
 8011936:	d106      	bne.n	8011946 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	2200      	movs	r2, #0
 801193c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8011940:	6978      	ldr	r0, [r7, #20]
 8011942:	f7ff feb7 	bl	80116b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801194c:	f043 0210 	orr.w	r2, r3, #16
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011956:	6978      	ldr	r0, [r7, #20]
 8011958:	f7ff f96c 	bl	8010c34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801195c:	bf00      	nop
 801195e:	3718      	adds	r7, #24
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}

08011964 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b088      	sub	sp, #32
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	603b      	str	r3, [r7, #0]
 8011970:	4613      	mov	r3, r2
 8011972:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801197a:	2b20      	cmp	r3, #32
 801197c:	f040 80f0 	bne.w	8011b60 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d002      	beq.n	801198c <HAL_UARTEx_ReceiveToIdle+0x28>
 8011986:	88fb      	ldrh	r3, [r7, #6]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d101      	bne.n	8011990 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 801198c:	2301      	movs	r3, #1
 801198e:	e0e8      	b.n	8011b62 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	2200      	movs	r2, #0
 8011994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	2222      	movs	r2, #34	@ 0x22
 801199c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	2201      	movs	r2, #1
 80119a4:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	2200      	movs	r2, #0
 80119aa:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80119ac:	f7f6 fcfc 	bl	80083a8 <HAL_GetTick>
 80119b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	88fa      	ldrh	r2, [r7, #6]
 80119b6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	88fa      	ldrh	r2, [r7, #6]
 80119be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	689b      	ldr	r3, [r3, #8]
 80119c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80119ca:	d10e      	bne.n	80119ea <HAL_UARTEx_ReceiveToIdle+0x86>
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	691b      	ldr	r3, [r3, #16]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d105      	bne.n	80119e0 <HAL_UARTEx_ReceiveToIdle+0x7c>
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80119da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80119de:	e02d      	b.n	8011a3c <HAL_UARTEx_ReceiveToIdle+0xd8>
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	22ff      	movs	r2, #255	@ 0xff
 80119e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80119e8:	e028      	b.n	8011a3c <HAL_UARTEx_ReceiveToIdle+0xd8>
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	689b      	ldr	r3, [r3, #8]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d10d      	bne.n	8011a0e <HAL_UARTEx_ReceiveToIdle+0xaa>
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	691b      	ldr	r3, [r3, #16]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d104      	bne.n	8011a04 <HAL_UARTEx_ReceiveToIdle+0xa0>
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	22ff      	movs	r2, #255	@ 0xff
 80119fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011a02:	e01b      	b.n	8011a3c <HAL_UARTEx_ReceiveToIdle+0xd8>
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	227f      	movs	r2, #127	@ 0x7f
 8011a08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011a0c:	e016      	b.n	8011a3c <HAL_UARTEx_ReceiveToIdle+0xd8>
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	689b      	ldr	r3, [r3, #8]
 8011a12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011a16:	d10d      	bne.n	8011a34 <HAL_UARTEx_ReceiveToIdle+0xd0>
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	691b      	ldr	r3, [r3, #16]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d104      	bne.n	8011a2a <HAL_UARTEx_ReceiveToIdle+0xc6>
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	227f      	movs	r2, #127	@ 0x7f
 8011a24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011a28:	e008      	b.n	8011a3c <HAL_UARTEx_ReceiveToIdle+0xd8>
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	223f      	movs	r2, #63	@ 0x3f
 8011a2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8011a32:	e003      	b.n	8011a3c <HAL_UARTEx_ReceiveToIdle+0xd8>
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	2200      	movs	r2, #0
 8011a38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011a42:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	689b      	ldr	r3, [r3, #8]
 8011a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011a4c:	d108      	bne.n	8011a60 <HAL_UARTEx_ReceiveToIdle+0xfc>
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	691b      	ldr	r3, [r3, #16]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d104      	bne.n	8011a60 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 8011a56:	2300      	movs	r3, #0
 8011a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	61bb      	str	r3, [r7, #24]
 8011a5e:	e003      	b.n	8011a68 <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011a64:	2300      	movs	r3, #0
 8011a66:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8011a6e:	e060      	b.n	8011b32 <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	69db      	ldr	r3, [r3, #28]
 8011a76:	f003 0310 	and.w	r3, r3, #16
 8011a7a:	2b10      	cmp	r3, #16
 8011a7c:	d110      	bne.n	8011aa0 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	2210      	movs	r2, #16
 8011a84:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	881b      	ldrh	r3, [r3, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d008      	beq.n	8011aa0 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	2202      	movs	r2, #2
 8011a92:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	2220      	movs	r2, #32
 8011a98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	e060      	b.n	8011b62 <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	69db      	ldr	r3, [r3, #28]
 8011aa6:	f003 0320 	and.w	r3, r3, #32
 8011aaa:	2b20      	cmp	r3, #32
 8011aac:	d12c      	bne.n	8011b08 <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 8011aae:	69fb      	ldr	r3, [r7, #28]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d10c      	bne.n	8011ace <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011aba:	b29a      	uxth	r2, r3
 8011abc:	8a7b      	ldrh	r3, [r7, #18]
 8011abe:	4013      	ands	r3, r2
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	69bb      	ldr	r3, [r7, #24]
 8011ac4:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	3302      	adds	r3, #2
 8011aca:	61bb      	str	r3, [r7, #24]
 8011acc:	e00d      	b.n	8011aea <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011ad4:	b29b      	uxth	r3, r3
 8011ad6:	b2da      	uxtb	r2, r3
 8011ad8:	8a7b      	ldrh	r3, [r7, #18]
 8011ada:	b2db      	uxtb	r3, r3
 8011adc:	4013      	ands	r3, r2
 8011ade:	b2da      	uxtb	r2, r3
 8011ae0:	69fb      	ldr	r3, [r7, #28]
 8011ae2:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	881b      	ldrh	r3, [r3, #0]
 8011aee:	3301      	adds	r3, #1
 8011af0:	b29a      	uxth	r2, r3
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	3b01      	subs	r3, #1
 8011b00:	b29a      	uxth	r2, r3
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b0e:	d010      	beq.n	8011b32 <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8011b10:	f7f6 fc4a 	bl	80083a8 <HAL_GetTick>
 8011b14:	4602      	mov	r2, r0
 8011b16:	697b      	ldr	r3, [r7, #20]
 8011b18:	1ad3      	subs	r3, r2, r3
 8011b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d302      	bcc.n	8011b26 <HAL_UARTEx_ReceiveToIdle+0x1c2>
 8011b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d105      	bne.n	8011b32 <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	2220      	movs	r2, #32
 8011b2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8011b2e:	2303      	movs	r3, #3
 8011b30:	e017      	b.n	8011b62 <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8011b38:	b29b      	uxth	r3, r3
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d198      	bne.n	8011a70 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8011b4a:	b29b      	uxth	r3, r3
 8011b4c:	1ad3      	subs	r3, r2, r3
 8011b4e:	b29a      	uxth	r2, r3
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	2220      	movs	r2, #32
 8011b58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	e000      	b.n	8011b62 <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8011b60:	2302      	movs	r3, #2
  }
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	3720      	adds	r7, #32
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}

08011b6a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011b6a:	b580      	push	{r7, lr}
 8011b6c:	b08c      	sub	sp, #48	@ 0x30
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	60f8      	str	r0, [r7, #12]
 8011b72:	60b9      	str	r1, [r7, #8]
 8011b74:	4613      	mov	r3, r2
 8011b76:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011b7e:	2b20      	cmp	r3, #32
 8011b80:	d142      	bne.n	8011c08 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d002      	beq.n	8011b8e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8011b88:	88fb      	ldrh	r3, [r7, #6]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d101      	bne.n	8011b92 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8011b8e:	2301      	movs	r3, #1
 8011b90:	e03b      	b.n	8011c0a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2201      	movs	r2, #1
 8011b96:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8011b9e:	88fb      	ldrh	r3, [r7, #6]
 8011ba0:	461a      	mov	r2, r3
 8011ba2:	68b9      	ldr	r1, [r7, #8]
 8011ba4:	68f8      	ldr	r0, [r7, #12]
 8011ba6:	f7ff fcbf 	bl	8011528 <UART_Start_Receive_DMA>
 8011baa:	4603      	mov	r3, r0
 8011bac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8011bb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d124      	bne.n	8011c02 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011bbc:	2b01      	cmp	r3, #1
 8011bbe:	d11d      	bne.n	8011bfc <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	2210      	movs	r2, #16
 8011bc6:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bce:	69bb      	ldr	r3, [r7, #24]
 8011bd0:	e853 3f00 	ldrex	r3, [r3]
 8011bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	f043 0310 	orr.w	r3, r3, #16
 8011bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	461a      	mov	r2, r3
 8011be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8011be8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bea:	6a39      	ldr	r1, [r7, #32]
 8011bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011bee:	e841 2300 	strex	r3, r2, [r1]
 8011bf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8011bf4:	69fb      	ldr	r3, [r7, #28]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d1e6      	bne.n	8011bc8 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8011bfa:	e002      	b.n	8011c02 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8011c02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011c06:	e000      	b.n	8011c0a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8011c08:	2302      	movs	r3, #2
  }
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3730      	adds	r7, #48	@ 0x30
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}

08011c12 <atoi>:
 8011c12:	220a      	movs	r2, #10
 8011c14:	2100      	movs	r1, #0
 8011c16:	f000 b87d 	b.w	8011d14 <strtol>
	...

08011c1c <_strtol_l.isra.0>:
 8011c1c:	2b24      	cmp	r3, #36	@ 0x24
 8011c1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c22:	4686      	mov	lr, r0
 8011c24:	4690      	mov	r8, r2
 8011c26:	d801      	bhi.n	8011c2c <_strtol_l.isra.0+0x10>
 8011c28:	2b01      	cmp	r3, #1
 8011c2a:	d106      	bne.n	8011c3a <_strtol_l.isra.0+0x1e>
 8011c2c:	f000 f92c 	bl	8011e88 <__errno>
 8011c30:	2316      	movs	r3, #22
 8011c32:	6003      	str	r3, [r0, #0]
 8011c34:	2000      	movs	r0, #0
 8011c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c3a:	4834      	ldr	r0, [pc, #208]	@ (8011d0c <_strtol_l.isra.0+0xf0>)
 8011c3c:	460d      	mov	r5, r1
 8011c3e:	462a      	mov	r2, r5
 8011c40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011c44:	5d06      	ldrb	r6, [r0, r4]
 8011c46:	f016 0608 	ands.w	r6, r6, #8
 8011c4a:	d1f8      	bne.n	8011c3e <_strtol_l.isra.0+0x22>
 8011c4c:	2c2d      	cmp	r4, #45	@ 0x2d
 8011c4e:	d110      	bne.n	8011c72 <_strtol_l.isra.0+0x56>
 8011c50:	782c      	ldrb	r4, [r5, #0]
 8011c52:	2601      	movs	r6, #1
 8011c54:	1c95      	adds	r5, r2, #2
 8011c56:	f033 0210 	bics.w	r2, r3, #16
 8011c5a:	d115      	bne.n	8011c88 <_strtol_l.isra.0+0x6c>
 8011c5c:	2c30      	cmp	r4, #48	@ 0x30
 8011c5e:	d10d      	bne.n	8011c7c <_strtol_l.isra.0+0x60>
 8011c60:	782a      	ldrb	r2, [r5, #0]
 8011c62:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011c66:	2a58      	cmp	r2, #88	@ 0x58
 8011c68:	d108      	bne.n	8011c7c <_strtol_l.isra.0+0x60>
 8011c6a:	786c      	ldrb	r4, [r5, #1]
 8011c6c:	3502      	adds	r5, #2
 8011c6e:	2310      	movs	r3, #16
 8011c70:	e00a      	b.n	8011c88 <_strtol_l.isra.0+0x6c>
 8011c72:	2c2b      	cmp	r4, #43	@ 0x2b
 8011c74:	bf04      	itt	eq
 8011c76:	782c      	ldrbeq	r4, [r5, #0]
 8011c78:	1c95      	addeq	r5, r2, #2
 8011c7a:	e7ec      	b.n	8011c56 <_strtol_l.isra.0+0x3a>
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d1f6      	bne.n	8011c6e <_strtol_l.isra.0+0x52>
 8011c80:	2c30      	cmp	r4, #48	@ 0x30
 8011c82:	bf14      	ite	ne
 8011c84:	230a      	movne	r3, #10
 8011c86:	2308      	moveq	r3, #8
 8011c88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011c8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011c90:	2200      	movs	r2, #0
 8011c92:	fbbc f9f3 	udiv	r9, ip, r3
 8011c96:	4610      	mov	r0, r2
 8011c98:	fb03 ca19 	mls	sl, r3, r9, ip
 8011c9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011ca0:	2f09      	cmp	r7, #9
 8011ca2:	d80f      	bhi.n	8011cc4 <_strtol_l.isra.0+0xa8>
 8011ca4:	463c      	mov	r4, r7
 8011ca6:	42a3      	cmp	r3, r4
 8011ca8:	dd1b      	ble.n	8011ce2 <_strtol_l.isra.0+0xc6>
 8011caa:	1c57      	adds	r7, r2, #1
 8011cac:	d007      	beq.n	8011cbe <_strtol_l.isra.0+0xa2>
 8011cae:	4581      	cmp	r9, r0
 8011cb0:	d314      	bcc.n	8011cdc <_strtol_l.isra.0+0xc0>
 8011cb2:	d101      	bne.n	8011cb8 <_strtol_l.isra.0+0x9c>
 8011cb4:	45a2      	cmp	sl, r4
 8011cb6:	db11      	blt.n	8011cdc <_strtol_l.isra.0+0xc0>
 8011cb8:	fb00 4003 	mla	r0, r0, r3, r4
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011cc2:	e7eb      	b.n	8011c9c <_strtol_l.isra.0+0x80>
 8011cc4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011cc8:	2f19      	cmp	r7, #25
 8011cca:	d801      	bhi.n	8011cd0 <_strtol_l.isra.0+0xb4>
 8011ccc:	3c37      	subs	r4, #55	@ 0x37
 8011cce:	e7ea      	b.n	8011ca6 <_strtol_l.isra.0+0x8a>
 8011cd0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011cd4:	2f19      	cmp	r7, #25
 8011cd6:	d804      	bhi.n	8011ce2 <_strtol_l.isra.0+0xc6>
 8011cd8:	3c57      	subs	r4, #87	@ 0x57
 8011cda:	e7e4      	b.n	8011ca6 <_strtol_l.isra.0+0x8a>
 8011cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8011ce0:	e7ed      	b.n	8011cbe <_strtol_l.isra.0+0xa2>
 8011ce2:	1c53      	adds	r3, r2, #1
 8011ce4:	d108      	bne.n	8011cf8 <_strtol_l.isra.0+0xdc>
 8011ce6:	2322      	movs	r3, #34	@ 0x22
 8011ce8:	f8ce 3000 	str.w	r3, [lr]
 8011cec:	4660      	mov	r0, ip
 8011cee:	f1b8 0f00 	cmp.w	r8, #0
 8011cf2:	d0a0      	beq.n	8011c36 <_strtol_l.isra.0+0x1a>
 8011cf4:	1e69      	subs	r1, r5, #1
 8011cf6:	e006      	b.n	8011d06 <_strtol_l.isra.0+0xea>
 8011cf8:	b106      	cbz	r6, 8011cfc <_strtol_l.isra.0+0xe0>
 8011cfa:	4240      	negs	r0, r0
 8011cfc:	f1b8 0f00 	cmp.w	r8, #0
 8011d00:	d099      	beq.n	8011c36 <_strtol_l.isra.0+0x1a>
 8011d02:	2a00      	cmp	r2, #0
 8011d04:	d1f6      	bne.n	8011cf4 <_strtol_l.isra.0+0xd8>
 8011d06:	f8c8 1000 	str.w	r1, [r8]
 8011d0a:	e794      	b.n	8011c36 <_strtol_l.isra.0+0x1a>
 8011d0c:	08013453 	.word	0x08013453

08011d10 <_strtol_r>:
 8011d10:	f7ff bf84 	b.w	8011c1c <_strtol_l.isra.0>

08011d14 <strtol>:
 8011d14:	4613      	mov	r3, r2
 8011d16:	460a      	mov	r2, r1
 8011d18:	4601      	mov	r1, r0
 8011d1a:	4802      	ldr	r0, [pc, #8]	@ (8011d24 <strtol+0x10>)
 8011d1c:	6800      	ldr	r0, [r0, #0]
 8011d1e:	f7ff bf7d 	b.w	8011c1c <_strtol_l.isra.0>
 8011d22:	bf00      	nop
 8011d24:	20000014 	.word	0x20000014

08011d28 <siprintf>:
 8011d28:	b40e      	push	{r1, r2, r3}
 8011d2a:	b510      	push	{r4, lr}
 8011d2c:	b09d      	sub	sp, #116	@ 0x74
 8011d2e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011d30:	9002      	str	r0, [sp, #8]
 8011d32:	9006      	str	r0, [sp, #24]
 8011d34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011d38:	480a      	ldr	r0, [pc, #40]	@ (8011d64 <siprintf+0x3c>)
 8011d3a:	9107      	str	r1, [sp, #28]
 8011d3c:	9104      	str	r1, [sp, #16]
 8011d3e:	490a      	ldr	r1, [pc, #40]	@ (8011d68 <siprintf+0x40>)
 8011d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d44:	9105      	str	r1, [sp, #20]
 8011d46:	2400      	movs	r4, #0
 8011d48:	a902      	add	r1, sp, #8
 8011d4a:	6800      	ldr	r0, [r0, #0]
 8011d4c:	9301      	str	r3, [sp, #4]
 8011d4e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011d50:	f000 fa30 	bl	80121b4 <_svfiprintf_r>
 8011d54:	9b02      	ldr	r3, [sp, #8]
 8011d56:	701c      	strb	r4, [r3, #0]
 8011d58:	b01d      	add	sp, #116	@ 0x74
 8011d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d5e:	b003      	add	sp, #12
 8011d60:	4770      	bx	lr
 8011d62:	bf00      	nop
 8011d64:	20000014 	.word	0x20000014
 8011d68:	ffff0208 	.word	0xffff0208

08011d6c <siscanf>:
 8011d6c:	b40e      	push	{r1, r2, r3}
 8011d6e:	b570      	push	{r4, r5, r6, lr}
 8011d70:	b09d      	sub	sp, #116	@ 0x74
 8011d72:	ac21      	add	r4, sp, #132	@ 0x84
 8011d74:	2500      	movs	r5, #0
 8011d76:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011d7a:	f854 6b04 	ldr.w	r6, [r4], #4
 8011d7e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011d82:	951b      	str	r5, [sp, #108]	@ 0x6c
 8011d84:	9002      	str	r0, [sp, #8]
 8011d86:	9006      	str	r0, [sp, #24]
 8011d88:	f7ee fa2c 	bl	80001e4 <strlen>
 8011d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8011dbc <siscanf+0x50>)
 8011d8e:	9003      	str	r0, [sp, #12]
 8011d90:	9007      	str	r0, [sp, #28]
 8011d92:	480b      	ldr	r0, [pc, #44]	@ (8011dc0 <siscanf+0x54>)
 8011d94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011d9a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011d9e:	4632      	mov	r2, r6
 8011da0:	4623      	mov	r3, r4
 8011da2:	a902      	add	r1, sp, #8
 8011da4:	6800      	ldr	r0, [r0, #0]
 8011da6:	950f      	str	r5, [sp, #60]	@ 0x3c
 8011da8:	9514      	str	r5, [sp, #80]	@ 0x50
 8011daa:	9401      	str	r4, [sp, #4]
 8011dac:	f000 fb58 	bl	8012460 <__ssvfiscanf_r>
 8011db0:	b01d      	add	sp, #116	@ 0x74
 8011db2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011db6:	b003      	add	sp, #12
 8011db8:	4770      	bx	lr
 8011dba:	bf00      	nop
 8011dbc:	08011dc5 	.word	0x08011dc5
 8011dc0:	20000014 	.word	0x20000014

08011dc4 <__seofread>:
 8011dc4:	2000      	movs	r0, #0
 8011dc6:	4770      	bx	lr

08011dc8 <memcmp>:
 8011dc8:	b510      	push	{r4, lr}
 8011dca:	3901      	subs	r1, #1
 8011dcc:	4402      	add	r2, r0
 8011dce:	4290      	cmp	r0, r2
 8011dd0:	d101      	bne.n	8011dd6 <memcmp+0xe>
 8011dd2:	2000      	movs	r0, #0
 8011dd4:	e005      	b.n	8011de2 <memcmp+0x1a>
 8011dd6:	7803      	ldrb	r3, [r0, #0]
 8011dd8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011ddc:	42a3      	cmp	r3, r4
 8011dde:	d001      	beq.n	8011de4 <memcmp+0x1c>
 8011de0:	1b18      	subs	r0, r3, r4
 8011de2:	bd10      	pop	{r4, pc}
 8011de4:	3001      	adds	r0, #1
 8011de6:	e7f2      	b.n	8011dce <memcmp+0x6>

08011de8 <memset>:
 8011de8:	4402      	add	r2, r0
 8011dea:	4603      	mov	r3, r0
 8011dec:	4293      	cmp	r3, r2
 8011dee:	d100      	bne.n	8011df2 <memset+0xa>
 8011df0:	4770      	bx	lr
 8011df2:	f803 1b01 	strb.w	r1, [r3], #1
 8011df6:	e7f9      	b.n	8011dec <memset+0x4>

08011df8 <strchr>:
 8011df8:	b2c9      	uxtb	r1, r1
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e02:	b112      	cbz	r2, 8011e0a <strchr+0x12>
 8011e04:	428a      	cmp	r2, r1
 8011e06:	d1f9      	bne.n	8011dfc <strchr+0x4>
 8011e08:	4770      	bx	lr
 8011e0a:	2900      	cmp	r1, #0
 8011e0c:	bf18      	it	ne
 8011e0e:	2000      	movne	r0, #0
 8011e10:	4770      	bx	lr

08011e12 <strncmp>:
 8011e12:	b510      	push	{r4, lr}
 8011e14:	b16a      	cbz	r2, 8011e32 <strncmp+0x20>
 8011e16:	3901      	subs	r1, #1
 8011e18:	1884      	adds	r4, r0, r2
 8011e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e1e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011e22:	429a      	cmp	r2, r3
 8011e24:	d103      	bne.n	8011e2e <strncmp+0x1c>
 8011e26:	42a0      	cmp	r0, r4
 8011e28:	d001      	beq.n	8011e2e <strncmp+0x1c>
 8011e2a:	2a00      	cmp	r2, #0
 8011e2c:	d1f5      	bne.n	8011e1a <strncmp+0x8>
 8011e2e:	1ad0      	subs	r0, r2, r3
 8011e30:	bd10      	pop	{r4, pc}
 8011e32:	4610      	mov	r0, r2
 8011e34:	e7fc      	b.n	8011e30 <strncmp+0x1e>

08011e36 <strncpy>:
 8011e36:	b510      	push	{r4, lr}
 8011e38:	3901      	subs	r1, #1
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	b132      	cbz	r2, 8011e4c <strncpy+0x16>
 8011e3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011e42:	f803 4b01 	strb.w	r4, [r3], #1
 8011e46:	3a01      	subs	r2, #1
 8011e48:	2c00      	cmp	r4, #0
 8011e4a:	d1f7      	bne.n	8011e3c <strncpy+0x6>
 8011e4c:	441a      	add	r2, r3
 8011e4e:	2100      	movs	r1, #0
 8011e50:	4293      	cmp	r3, r2
 8011e52:	d100      	bne.n	8011e56 <strncpy+0x20>
 8011e54:	bd10      	pop	{r4, pc}
 8011e56:	f803 1b01 	strb.w	r1, [r3], #1
 8011e5a:	e7f9      	b.n	8011e50 <strncpy+0x1a>

08011e5c <strstr>:
 8011e5c:	780a      	ldrb	r2, [r1, #0]
 8011e5e:	b570      	push	{r4, r5, r6, lr}
 8011e60:	b96a      	cbnz	r2, 8011e7e <strstr+0x22>
 8011e62:	bd70      	pop	{r4, r5, r6, pc}
 8011e64:	429a      	cmp	r2, r3
 8011e66:	d109      	bne.n	8011e7c <strstr+0x20>
 8011e68:	460c      	mov	r4, r1
 8011e6a:	4605      	mov	r5, r0
 8011e6c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d0f6      	beq.n	8011e62 <strstr+0x6>
 8011e74:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011e78:	429e      	cmp	r6, r3
 8011e7a:	d0f7      	beq.n	8011e6c <strstr+0x10>
 8011e7c:	3001      	adds	r0, #1
 8011e7e:	7803      	ldrb	r3, [r0, #0]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d1ef      	bne.n	8011e64 <strstr+0x8>
 8011e84:	4618      	mov	r0, r3
 8011e86:	e7ec      	b.n	8011e62 <strstr+0x6>

08011e88 <__errno>:
 8011e88:	4b01      	ldr	r3, [pc, #4]	@ (8011e90 <__errno+0x8>)
 8011e8a:	6818      	ldr	r0, [r3, #0]
 8011e8c:	4770      	bx	lr
 8011e8e:	bf00      	nop
 8011e90:	20000014 	.word	0x20000014

08011e94 <__libc_init_array>:
 8011e94:	b570      	push	{r4, r5, r6, lr}
 8011e96:	4d0d      	ldr	r5, [pc, #52]	@ (8011ecc <__libc_init_array+0x38>)
 8011e98:	4c0d      	ldr	r4, [pc, #52]	@ (8011ed0 <__libc_init_array+0x3c>)
 8011e9a:	1b64      	subs	r4, r4, r5
 8011e9c:	10a4      	asrs	r4, r4, #2
 8011e9e:	2600      	movs	r6, #0
 8011ea0:	42a6      	cmp	r6, r4
 8011ea2:	d109      	bne.n	8011eb8 <__libc_init_array+0x24>
 8011ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8011ed4 <__libc_init_array+0x40>)
 8011ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8011ed8 <__libc_init_array+0x44>)
 8011ea8:	f001 f86e 	bl	8012f88 <_init>
 8011eac:	1b64      	subs	r4, r4, r5
 8011eae:	10a4      	asrs	r4, r4, #2
 8011eb0:	2600      	movs	r6, #0
 8011eb2:	42a6      	cmp	r6, r4
 8011eb4:	d105      	bne.n	8011ec2 <__libc_init_array+0x2e>
 8011eb6:	bd70      	pop	{r4, r5, r6, pc}
 8011eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ebc:	4798      	blx	r3
 8011ebe:	3601      	adds	r6, #1
 8011ec0:	e7ee      	b.n	8011ea0 <__libc_init_array+0xc>
 8011ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ec6:	4798      	blx	r3
 8011ec8:	3601      	adds	r6, #1
 8011eca:	e7f2      	b.n	8011eb2 <__libc_init_array+0x1e>
 8011ecc:	080135ac 	.word	0x080135ac
 8011ed0:	080135ac 	.word	0x080135ac
 8011ed4:	080135ac 	.word	0x080135ac
 8011ed8:	080135b0 	.word	0x080135b0

08011edc <__retarget_lock_acquire_recursive>:
 8011edc:	4770      	bx	lr

08011ede <__retarget_lock_release_recursive>:
 8011ede:	4770      	bx	lr

08011ee0 <strcpy>:
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ee6:	f803 2b01 	strb.w	r2, [r3], #1
 8011eea:	2a00      	cmp	r2, #0
 8011eec:	d1f9      	bne.n	8011ee2 <strcpy+0x2>
 8011eee:	4770      	bx	lr

08011ef0 <memcpy>:
 8011ef0:	440a      	add	r2, r1
 8011ef2:	4291      	cmp	r1, r2
 8011ef4:	f100 33ff 	add.w	r3, r0, #4294967295
 8011ef8:	d100      	bne.n	8011efc <memcpy+0xc>
 8011efa:	4770      	bx	lr
 8011efc:	b510      	push	{r4, lr}
 8011efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f06:	4291      	cmp	r1, r2
 8011f08:	d1f9      	bne.n	8011efe <memcpy+0xe>
 8011f0a:	bd10      	pop	{r4, pc}

08011f0c <_free_r>:
 8011f0c:	b538      	push	{r3, r4, r5, lr}
 8011f0e:	4605      	mov	r5, r0
 8011f10:	2900      	cmp	r1, #0
 8011f12:	d041      	beq.n	8011f98 <_free_r+0x8c>
 8011f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f18:	1f0c      	subs	r4, r1, #4
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	bfb8      	it	lt
 8011f1e:	18e4      	addlt	r4, r4, r3
 8011f20:	f000 f8e0 	bl	80120e4 <__malloc_lock>
 8011f24:	4a1d      	ldr	r2, [pc, #116]	@ (8011f9c <_free_r+0x90>)
 8011f26:	6813      	ldr	r3, [r2, #0]
 8011f28:	b933      	cbnz	r3, 8011f38 <_free_r+0x2c>
 8011f2a:	6063      	str	r3, [r4, #4]
 8011f2c:	6014      	str	r4, [r2, #0]
 8011f2e:	4628      	mov	r0, r5
 8011f30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f34:	f000 b8dc 	b.w	80120f0 <__malloc_unlock>
 8011f38:	42a3      	cmp	r3, r4
 8011f3a:	d908      	bls.n	8011f4e <_free_r+0x42>
 8011f3c:	6820      	ldr	r0, [r4, #0]
 8011f3e:	1821      	adds	r1, r4, r0
 8011f40:	428b      	cmp	r3, r1
 8011f42:	bf01      	itttt	eq
 8011f44:	6819      	ldreq	r1, [r3, #0]
 8011f46:	685b      	ldreq	r3, [r3, #4]
 8011f48:	1809      	addeq	r1, r1, r0
 8011f4a:	6021      	streq	r1, [r4, #0]
 8011f4c:	e7ed      	b.n	8011f2a <_free_r+0x1e>
 8011f4e:	461a      	mov	r2, r3
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	b10b      	cbz	r3, 8011f58 <_free_r+0x4c>
 8011f54:	42a3      	cmp	r3, r4
 8011f56:	d9fa      	bls.n	8011f4e <_free_r+0x42>
 8011f58:	6811      	ldr	r1, [r2, #0]
 8011f5a:	1850      	adds	r0, r2, r1
 8011f5c:	42a0      	cmp	r0, r4
 8011f5e:	d10b      	bne.n	8011f78 <_free_r+0x6c>
 8011f60:	6820      	ldr	r0, [r4, #0]
 8011f62:	4401      	add	r1, r0
 8011f64:	1850      	adds	r0, r2, r1
 8011f66:	4283      	cmp	r3, r0
 8011f68:	6011      	str	r1, [r2, #0]
 8011f6a:	d1e0      	bne.n	8011f2e <_free_r+0x22>
 8011f6c:	6818      	ldr	r0, [r3, #0]
 8011f6e:	685b      	ldr	r3, [r3, #4]
 8011f70:	6053      	str	r3, [r2, #4]
 8011f72:	4408      	add	r0, r1
 8011f74:	6010      	str	r0, [r2, #0]
 8011f76:	e7da      	b.n	8011f2e <_free_r+0x22>
 8011f78:	d902      	bls.n	8011f80 <_free_r+0x74>
 8011f7a:	230c      	movs	r3, #12
 8011f7c:	602b      	str	r3, [r5, #0]
 8011f7e:	e7d6      	b.n	8011f2e <_free_r+0x22>
 8011f80:	6820      	ldr	r0, [r4, #0]
 8011f82:	1821      	adds	r1, r4, r0
 8011f84:	428b      	cmp	r3, r1
 8011f86:	bf04      	itt	eq
 8011f88:	6819      	ldreq	r1, [r3, #0]
 8011f8a:	685b      	ldreq	r3, [r3, #4]
 8011f8c:	6063      	str	r3, [r4, #4]
 8011f8e:	bf04      	itt	eq
 8011f90:	1809      	addeq	r1, r1, r0
 8011f92:	6021      	streq	r1, [r4, #0]
 8011f94:	6054      	str	r4, [r2, #4]
 8011f96:	e7ca      	b.n	8011f2e <_free_r+0x22>
 8011f98:	bd38      	pop	{r3, r4, r5, pc}
 8011f9a:	bf00      	nop
 8011f9c:	20007654 	.word	0x20007654

08011fa0 <sbrk_aligned>:
 8011fa0:	b570      	push	{r4, r5, r6, lr}
 8011fa2:	4e0f      	ldr	r6, [pc, #60]	@ (8011fe0 <sbrk_aligned+0x40>)
 8011fa4:	460c      	mov	r4, r1
 8011fa6:	6831      	ldr	r1, [r6, #0]
 8011fa8:	4605      	mov	r5, r0
 8011faa:	b911      	cbnz	r1, 8011fb2 <sbrk_aligned+0x12>
 8011fac:	f000 ff36 	bl	8012e1c <_sbrk_r>
 8011fb0:	6030      	str	r0, [r6, #0]
 8011fb2:	4621      	mov	r1, r4
 8011fb4:	4628      	mov	r0, r5
 8011fb6:	f000 ff31 	bl	8012e1c <_sbrk_r>
 8011fba:	1c43      	adds	r3, r0, #1
 8011fbc:	d103      	bne.n	8011fc6 <sbrk_aligned+0x26>
 8011fbe:	f04f 34ff 	mov.w	r4, #4294967295
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	bd70      	pop	{r4, r5, r6, pc}
 8011fc6:	1cc4      	adds	r4, r0, #3
 8011fc8:	f024 0403 	bic.w	r4, r4, #3
 8011fcc:	42a0      	cmp	r0, r4
 8011fce:	d0f8      	beq.n	8011fc2 <sbrk_aligned+0x22>
 8011fd0:	1a21      	subs	r1, r4, r0
 8011fd2:	4628      	mov	r0, r5
 8011fd4:	f000 ff22 	bl	8012e1c <_sbrk_r>
 8011fd8:	3001      	adds	r0, #1
 8011fda:	d1f2      	bne.n	8011fc2 <sbrk_aligned+0x22>
 8011fdc:	e7ef      	b.n	8011fbe <sbrk_aligned+0x1e>
 8011fde:	bf00      	nop
 8011fe0:	20007650 	.word	0x20007650

08011fe4 <_malloc_r>:
 8011fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fe8:	1ccd      	adds	r5, r1, #3
 8011fea:	f025 0503 	bic.w	r5, r5, #3
 8011fee:	3508      	adds	r5, #8
 8011ff0:	2d0c      	cmp	r5, #12
 8011ff2:	bf38      	it	cc
 8011ff4:	250c      	movcc	r5, #12
 8011ff6:	2d00      	cmp	r5, #0
 8011ff8:	4606      	mov	r6, r0
 8011ffa:	db01      	blt.n	8012000 <_malloc_r+0x1c>
 8011ffc:	42a9      	cmp	r1, r5
 8011ffe:	d904      	bls.n	801200a <_malloc_r+0x26>
 8012000:	230c      	movs	r3, #12
 8012002:	6033      	str	r3, [r6, #0]
 8012004:	2000      	movs	r0, #0
 8012006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801200a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80120e0 <_malloc_r+0xfc>
 801200e:	f000 f869 	bl	80120e4 <__malloc_lock>
 8012012:	f8d8 3000 	ldr.w	r3, [r8]
 8012016:	461c      	mov	r4, r3
 8012018:	bb44      	cbnz	r4, 801206c <_malloc_r+0x88>
 801201a:	4629      	mov	r1, r5
 801201c:	4630      	mov	r0, r6
 801201e:	f7ff ffbf 	bl	8011fa0 <sbrk_aligned>
 8012022:	1c43      	adds	r3, r0, #1
 8012024:	4604      	mov	r4, r0
 8012026:	d158      	bne.n	80120da <_malloc_r+0xf6>
 8012028:	f8d8 4000 	ldr.w	r4, [r8]
 801202c:	4627      	mov	r7, r4
 801202e:	2f00      	cmp	r7, #0
 8012030:	d143      	bne.n	80120ba <_malloc_r+0xd6>
 8012032:	2c00      	cmp	r4, #0
 8012034:	d04b      	beq.n	80120ce <_malloc_r+0xea>
 8012036:	6823      	ldr	r3, [r4, #0]
 8012038:	4639      	mov	r1, r7
 801203a:	4630      	mov	r0, r6
 801203c:	eb04 0903 	add.w	r9, r4, r3
 8012040:	f000 feec 	bl	8012e1c <_sbrk_r>
 8012044:	4581      	cmp	r9, r0
 8012046:	d142      	bne.n	80120ce <_malloc_r+0xea>
 8012048:	6821      	ldr	r1, [r4, #0]
 801204a:	1a6d      	subs	r5, r5, r1
 801204c:	4629      	mov	r1, r5
 801204e:	4630      	mov	r0, r6
 8012050:	f7ff ffa6 	bl	8011fa0 <sbrk_aligned>
 8012054:	3001      	adds	r0, #1
 8012056:	d03a      	beq.n	80120ce <_malloc_r+0xea>
 8012058:	6823      	ldr	r3, [r4, #0]
 801205a:	442b      	add	r3, r5
 801205c:	6023      	str	r3, [r4, #0]
 801205e:	f8d8 3000 	ldr.w	r3, [r8]
 8012062:	685a      	ldr	r2, [r3, #4]
 8012064:	bb62      	cbnz	r2, 80120c0 <_malloc_r+0xdc>
 8012066:	f8c8 7000 	str.w	r7, [r8]
 801206a:	e00f      	b.n	801208c <_malloc_r+0xa8>
 801206c:	6822      	ldr	r2, [r4, #0]
 801206e:	1b52      	subs	r2, r2, r5
 8012070:	d420      	bmi.n	80120b4 <_malloc_r+0xd0>
 8012072:	2a0b      	cmp	r2, #11
 8012074:	d917      	bls.n	80120a6 <_malloc_r+0xc2>
 8012076:	1961      	adds	r1, r4, r5
 8012078:	42a3      	cmp	r3, r4
 801207a:	6025      	str	r5, [r4, #0]
 801207c:	bf18      	it	ne
 801207e:	6059      	strne	r1, [r3, #4]
 8012080:	6863      	ldr	r3, [r4, #4]
 8012082:	bf08      	it	eq
 8012084:	f8c8 1000 	streq.w	r1, [r8]
 8012088:	5162      	str	r2, [r4, r5]
 801208a:	604b      	str	r3, [r1, #4]
 801208c:	4630      	mov	r0, r6
 801208e:	f000 f82f 	bl	80120f0 <__malloc_unlock>
 8012092:	f104 000b 	add.w	r0, r4, #11
 8012096:	1d23      	adds	r3, r4, #4
 8012098:	f020 0007 	bic.w	r0, r0, #7
 801209c:	1ac2      	subs	r2, r0, r3
 801209e:	bf1c      	itt	ne
 80120a0:	1a1b      	subne	r3, r3, r0
 80120a2:	50a3      	strne	r3, [r4, r2]
 80120a4:	e7af      	b.n	8012006 <_malloc_r+0x22>
 80120a6:	6862      	ldr	r2, [r4, #4]
 80120a8:	42a3      	cmp	r3, r4
 80120aa:	bf0c      	ite	eq
 80120ac:	f8c8 2000 	streq.w	r2, [r8]
 80120b0:	605a      	strne	r2, [r3, #4]
 80120b2:	e7eb      	b.n	801208c <_malloc_r+0xa8>
 80120b4:	4623      	mov	r3, r4
 80120b6:	6864      	ldr	r4, [r4, #4]
 80120b8:	e7ae      	b.n	8012018 <_malloc_r+0x34>
 80120ba:	463c      	mov	r4, r7
 80120bc:	687f      	ldr	r7, [r7, #4]
 80120be:	e7b6      	b.n	801202e <_malloc_r+0x4a>
 80120c0:	461a      	mov	r2, r3
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	42a3      	cmp	r3, r4
 80120c6:	d1fb      	bne.n	80120c0 <_malloc_r+0xdc>
 80120c8:	2300      	movs	r3, #0
 80120ca:	6053      	str	r3, [r2, #4]
 80120cc:	e7de      	b.n	801208c <_malloc_r+0xa8>
 80120ce:	230c      	movs	r3, #12
 80120d0:	6033      	str	r3, [r6, #0]
 80120d2:	4630      	mov	r0, r6
 80120d4:	f000 f80c 	bl	80120f0 <__malloc_unlock>
 80120d8:	e794      	b.n	8012004 <_malloc_r+0x20>
 80120da:	6005      	str	r5, [r0, #0]
 80120dc:	e7d6      	b.n	801208c <_malloc_r+0xa8>
 80120de:	bf00      	nop
 80120e0:	20007654 	.word	0x20007654

080120e4 <__malloc_lock>:
 80120e4:	4801      	ldr	r0, [pc, #4]	@ (80120ec <__malloc_lock+0x8>)
 80120e6:	f7ff bef9 	b.w	8011edc <__retarget_lock_acquire_recursive>
 80120ea:	bf00      	nop
 80120ec:	2000764c 	.word	0x2000764c

080120f0 <__malloc_unlock>:
 80120f0:	4801      	ldr	r0, [pc, #4]	@ (80120f8 <__malloc_unlock+0x8>)
 80120f2:	f7ff bef4 	b.w	8011ede <__retarget_lock_release_recursive>
 80120f6:	bf00      	nop
 80120f8:	2000764c 	.word	0x2000764c

080120fc <__ssputs_r>:
 80120fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012100:	688e      	ldr	r6, [r1, #8]
 8012102:	461f      	mov	r7, r3
 8012104:	42be      	cmp	r6, r7
 8012106:	680b      	ldr	r3, [r1, #0]
 8012108:	4682      	mov	sl, r0
 801210a:	460c      	mov	r4, r1
 801210c:	4690      	mov	r8, r2
 801210e:	d82d      	bhi.n	801216c <__ssputs_r+0x70>
 8012110:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012114:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012118:	d026      	beq.n	8012168 <__ssputs_r+0x6c>
 801211a:	6965      	ldr	r5, [r4, #20]
 801211c:	6909      	ldr	r1, [r1, #16]
 801211e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012122:	eba3 0901 	sub.w	r9, r3, r1
 8012126:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801212a:	1c7b      	adds	r3, r7, #1
 801212c:	444b      	add	r3, r9
 801212e:	106d      	asrs	r5, r5, #1
 8012130:	429d      	cmp	r5, r3
 8012132:	bf38      	it	cc
 8012134:	461d      	movcc	r5, r3
 8012136:	0553      	lsls	r3, r2, #21
 8012138:	d527      	bpl.n	801218a <__ssputs_r+0x8e>
 801213a:	4629      	mov	r1, r5
 801213c:	f7ff ff52 	bl	8011fe4 <_malloc_r>
 8012140:	4606      	mov	r6, r0
 8012142:	b360      	cbz	r0, 801219e <__ssputs_r+0xa2>
 8012144:	6921      	ldr	r1, [r4, #16]
 8012146:	464a      	mov	r2, r9
 8012148:	f7ff fed2 	bl	8011ef0 <memcpy>
 801214c:	89a3      	ldrh	r3, [r4, #12]
 801214e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012156:	81a3      	strh	r3, [r4, #12]
 8012158:	6126      	str	r6, [r4, #16]
 801215a:	6165      	str	r5, [r4, #20]
 801215c:	444e      	add	r6, r9
 801215e:	eba5 0509 	sub.w	r5, r5, r9
 8012162:	6026      	str	r6, [r4, #0]
 8012164:	60a5      	str	r5, [r4, #8]
 8012166:	463e      	mov	r6, r7
 8012168:	42be      	cmp	r6, r7
 801216a:	d900      	bls.n	801216e <__ssputs_r+0x72>
 801216c:	463e      	mov	r6, r7
 801216e:	6820      	ldr	r0, [r4, #0]
 8012170:	4632      	mov	r2, r6
 8012172:	4641      	mov	r1, r8
 8012174:	f000 fe37 	bl	8012de6 <memmove>
 8012178:	68a3      	ldr	r3, [r4, #8]
 801217a:	1b9b      	subs	r3, r3, r6
 801217c:	60a3      	str	r3, [r4, #8]
 801217e:	6823      	ldr	r3, [r4, #0]
 8012180:	4433      	add	r3, r6
 8012182:	6023      	str	r3, [r4, #0]
 8012184:	2000      	movs	r0, #0
 8012186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801218a:	462a      	mov	r2, r5
 801218c:	f000 fe56 	bl	8012e3c <_realloc_r>
 8012190:	4606      	mov	r6, r0
 8012192:	2800      	cmp	r0, #0
 8012194:	d1e0      	bne.n	8012158 <__ssputs_r+0x5c>
 8012196:	6921      	ldr	r1, [r4, #16]
 8012198:	4650      	mov	r0, sl
 801219a:	f7ff feb7 	bl	8011f0c <_free_r>
 801219e:	230c      	movs	r3, #12
 80121a0:	f8ca 3000 	str.w	r3, [sl]
 80121a4:	89a3      	ldrh	r3, [r4, #12]
 80121a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121aa:	81a3      	strh	r3, [r4, #12]
 80121ac:	f04f 30ff 	mov.w	r0, #4294967295
 80121b0:	e7e9      	b.n	8012186 <__ssputs_r+0x8a>
	...

080121b4 <_svfiprintf_r>:
 80121b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b8:	4698      	mov	r8, r3
 80121ba:	898b      	ldrh	r3, [r1, #12]
 80121bc:	061b      	lsls	r3, r3, #24
 80121be:	b09d      	sub	sp, #116	@ 0x74
 80121c0:	4607      	mov	r7, r0
 80121c2:	460d      	mov	r5, r1
 80121c4:	4614      	mov	r4, r2
 80121c6:	d510      	bpl.n	80121ea <_svfiprintf_r+0x36>
 80121c8:	690b      	ldr	r3, [r1, #16]
 80121ca:	b973      	cbnz	r3, 80121ea <_svfiprintf_r+0x36>
 80121cc:	2140      	movs	r1, #64	@ 0x40
 80121ce:	f7ff ff09 	bl	8011fe4 <_malloc_r>
 80121d2:	6028      	str	r0, [r5, #0]
 80121d4:	6128      	str	r0, [r5, #16]
 80121d6:	b930      	cbnz	r0, 80121e6 <_svfiprintf_r+0x32>
 80121d8:	230c      	movs	r3, #12
 80121da:	603b      	str	r3, [r7, #0]
 80121dc:	f04f 30ff 	mov.w	r0, #4294967295
 80121e0:	b01d      	add	sp, #116	@ 0x74
 80121e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121e6:	2340      	movs	r3, #64	@ 0x40
 80121e8:	616b      	str	r3, [r5, #20]
 80121ea:	2300      	movs	r3, #0
 80121ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80121ee:	2320      	movs	r3, #32
 80121f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80121f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80121f8:	2330      	movs	r3, #48	@ 0x30
 80121fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012398 <_svfiprintf_r+0x1e4>
 80121fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012202:	f04f 0901 	mov.w	r9, #1
 8012206:	4623      	mov	r3, r4
 8012208:	469a      	mov	sl, r3
 801220a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801220e:	b10a      	cbz	r2, 8012214 <_svfiprintf_r+0x60>
 8012210:	2a25      	cmp	r2, #37	@ 0x25
 8012212:	d1f9      	bne.n	8012208 <_svfiprintf_r+0x54>
 8012214:	ebba 0b04 	subs.w	fp, sl, r4
 8012218:	d00b      	beq.n	8012232 <_svfiprintf_r+0x7e>
 801221a:	465b      	mov	r3, fp
 801221c:	4622      	mov	r2, r4
 801221e:	4629      	mov	r1, r5
 8012220:	4638      	mov	r0, r7
 8012222:	f7ff ff6b 	bl	80120fc <__ssputs_r>
 8012226:	3001      	adds	r0, #1
 8012228:	f000 80a7 	beq.w	801237a <_svfiprintf_r+0x1c6>
 801222c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801222e:	445a      	add	r2, fp
 8012230:	9209      	str	r2, [sp, #36]	@ 0x24
 8012232:	f89a 3000 	ldrb.w	r3, [sl]
 8012236:	2b00      	cmp	r3, #0
 8012238:	f000 809f 	beq.w	801237a <_svfiprintf_r+0x1c6>
 801223c:	2300      	movs	r3, #0
 801223e:	f04f 32ff 	mov.w	r2, #4294967295
 8012242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012246:	f10a 0a01 	add.w	sl, sl, #1
 801224a:	9304      	str	r3, [sp, #16]
 801224c:	9307      	str	r3, [sp, #28]
 801224e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012252:	931a      	str	r3, [sp, #104]	@ 0x68
 8012254:	4654      	mov	r4, sl
 8012256:	2205      	movs	r2, #5
 8012258:	f814 1b01 	ldrb.w	r1, [r4], #1
 801225c:	484e      	ldr	r0, [pc, #312]	@ (8012398 <_svfiprintf_r+0x1e4>)
 801225e:	f7ed ffcf 	bl	8000200 <memchr>
 8012262:	9a04      	ldr	r2, [sp, #16]
 8012264:	b9d8      	cbnz	r0, 801229e <_svfiprintf_r+0xea>
 8012266:	06d0      	lsls	r0, r2, #27
 8012268:	bf44      	itt	mi
 801226a:	2320      	movmi	r3, #32
 801226c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012270:	0711      	lsls	r1, r2, #28
 8012272:	bf44      	itt	mi
 8012274:	232b      	movmi	r3, #43	@ 0x2b
 8012276:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801227a:	f89a 3000 	ldrb.w	r3, [sl]
 801227e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012280:	d015      	beq.n	80122ae <_svfiprintf_r+0xfa>
 8012282:	9a07      	ldr	r2, [sp, #28]
 8012284:	4654      	mov	r4, sl
 8012286:	2000      	movs	r0, #0
 8012288:	f04f 0c0a 	mov.w	ip, #10
 801228c:	4621      	mov	r1, r4
 801228e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012292:	3b30      	subs	r3, #48	@ 0x30
 8012294:	2b09      	cmp	r3, #9
 8012296:	d94b      	bls.n	8012330 <_svfiprintf_r+0x17c>
 8012298:	b1b0      	cbz	r0, 80122c8 <_svfiprintf_r+0x114>
 801229a:	9207      	str	r2, [sp, #28]
 801229c:	e014      	b.n	80122c8 <_svfiprintf_r+0x114>
 801229e:	eba0 0308 	sub.w	r3, r0, r8
 80122a2:	fa09 f303 	lsl.w	r3, r9, r3
 80122a6:	4313      	orrs	r3, r2
 80122a8:	9304      	str	r3, [sp, #16]
 80122aa:	46a2      	mov	sl, r4
 80122ac:	e7d2      	b.n	8012254 <_svfiprintf_r+0xa0>
 80122ae:	9b03      	ldr	r3, [sp, #12]
 80122b0:	1d19      	adds	r1, r3, #4
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	9103      	str	r1, [sp, #12]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	bfbb      	ittet	lt
 80122ba:	425b      	neglt	r3, r3
 80122bc:	f042 0202 	orrlt.w	r2, r2, #2
 80122c0:	9307      	strge	r3, [sp, #28]
 80122c2:	9307      	strlt	r3, [sp, #28]
 80122c4:	bfb8      	it	lt
 80122c6:	9204      	strlt	r2, [sp, #16]
 80122c8:	7823      	ldrb	r3, [r4, #0]
 80122ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80122cc:	d10a      	bne.n	80122e4 <_svfiprintf_r+0x130>
 80122ce:	7863      	ldrb	r3, [r4, #1]
 80122d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80122d2:	d132      	bne.n	801233a <_svfiprintf_r+0x186>
 80122d4:	9b03      	ldr	r3, [sp, #12]
 80122d6:	1d1a      	adds	r2, r3, #4
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	9203      	str	r2, [sp, #12]
 80122dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80122e0:	3402      	adds	r4, #2
 80122e2:	9305      	str	r3, [sp, #20]
 80122e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80123a8 <_svfiprintf_r+0x1f4>
 80122e8:	7821      	ldrb	r1, [r4, #0]
 80122ea:	2203      	movs	r2, #3
 80122ec:	4650      	mov	r0, sl
 80122ee:	f7ed ff87 	bl	8000200 <memchr>
 80122f2:	b138      	cbz	r0, 8012304 <_svfiprintf_r+0x150>
 80122f4:	9b04      	ldr	r3, [sp, #16]
 80122f6:	eba0 000a 	sub.w	r0, r0, sl
 80122fa:	2240      	movs	r2, #64	@ 0x40
 80122fc:	4082      	lsls	r2, r0
 80122fe:	4313      	orrs	r3, r2
 8012300:	3401      	adds	r4, #1
 8012302:	9304      	str	r3, [sp, #16]
 8012304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012308:	4824      	ldr	r0, [pc, #144]	@ (801239c <_svfiprintf_r+0x1e8>)
 801230a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801230e:	2206      	movs	r2, #6
 8012310:	f7ed ff76 	bl	8000200 <memchr>
 8012314:	2800      	cmp	r0, #0
 8012316:	d036      	beq.n	8012386 <_svfiprintf_r+0x1d2>
 8012318:	4b21      	ldr	r3, [pc, #132]	@ (80123a0 <_svfiprintf_r+0x1ec>)
 801231a:	bb1b      	cbnz	r3, 8012364 <_svfiprintf_r+0x1b0>
 801231c:	9b03      	ldr	r3, [sp, #12]
 801231e:	3307      	adds	r3, #7
 8012320:	f023 0307 	bic.w	r3, r3, #7
 8012324:	3308      	adds	r3, #8
 8012326:	9303      	str	r3, [sp, #12]
 8012328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801232a:	4433      	add	r3, r6
 801232c:	9309      	str	r3, [sp, #36]	@ 0x24
 801232e:	e76a      	b.n	8012206 <_svfiprintf_r+0x52>
 8012330:	fb0c 3202 	mla	r2, ip, r2, r3
 8012334:	460c      	mov	r4, r1
 8012336:	2001      	movs	r0, #1
 8012338:	e7a8      	b.n	801228c <_svfiprintf_r+0xd8>
 801233a:	2300      	movs	r3, #0
 801233c:	3401      	adds	r4, #1
 801233e:	9305      	str	r3, [sp, #20]
 8012340:	4619      	mov	r1, r3
 8012342:	f04f 0c0a 	mov.w	ip, #10
 8012346:	4620      	mov	r0, r4
 8012348:	f810 2b01 	ldrb.w	r2, [r0], #1
 801234c:	3a30      	subs	r2, #48	@ 0x30
 801234e:	2a09      	cmp	r2, #9
 8012350:	d903      	bls.n	801235a <_svfiprintf_r+0x1a6>
 8012352:	2b00      	cmp	r3, #0
 8012354:	d0c6      	beq.n	80122e4 <_svfiprintf_r+0x130>
 8012356:	9105      	str	r1, [sp, #20]
 8012358:	e7c4      	b.n	80122e4 <_svfiprintf_r+0x130>
 801235a:	fb0c 2101 	mla	r1, ip, r1, r2
 801235e:	4604      	mov	r4, r0
 8012360:	2301      	movs	r3, #1
 8012362:	e7f0      	b.n	8012346 <_svfiprintf_r+0x192>
 8012364:	ab03      	add	r3, sp, #12
 8012366:	9300      	str	r3, [sp, #0]
 8012368:	462a      	mov	r2, r5
 801236a:	4b0e      	ldr	r3, [pc, #56]	@ (80123a4 <_svfiprintf_r+0x1f0>)
 801236c:	a904      	add	r1, sp, #16
 801236e:	4638      	mov	r0, r7
 8012370:	f3af 8000 	nop.w
 8012374:	1c42      	adds	r2, r0, #1
 8012376:	4606      	mov	r6, r0
 8012378:	d1d6      	bne.n	8012328 <_svfiprintf_r+0x174>
 801237a:	89ab      	ldrh	r3, [r5, #12]
 801237c:	065b      	lsls	r3, r3, #25
 801237e:	f53f af2d 	bmi.w	80121dc <_svfiprintf_r+0x28>
 8012382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012384:	e72c      	b.n	80121e0 <_svfiprintf_r+0x2c>
 8012386:	ab03      	add	r3, sp, #12
 8012388:	9300      	str	r3, [sp, #0]
 801238a:	462a      	mov	r2, r5
 801238c:	4b05      	ldr	r3, [pc, #20]	@ (80123a4 <_svfiprintf_r+0x1f0>)
 801238e:	a904      	add	r1, sp, #16
 8012390:	4638      	mov	r0, r7
 8012392:	f000 fa49 	bl	8012828 <_printf_i>
 8012396:	e7ed      	b.n	8012374 <_svfiprintf_r+0x1c0>
 8012398:	08013553 	.word	0x08013553
 801239c:	0801355d 	.word	0x0801355d
 80123a0:	00000000 	.word	0x00000000
 80123a4:	080120fd 	.word	0x080120fd
 80123a8:	08013559 	.word	0x08013559

080123ac <_sungetc_r>:
 80123ac:	b538      	push	{r3, r4, r5, lr}
 80123ae:	1c4b      	adds	r3, r1, #1
 80123b0:	4614      	mov	r4, r2
 80123b2:	d103      	bne.n	80123bc <_sungetc_r+0x10>
 80123b4:	f04f 35ff 	mov.w	r5, #4294967295
 80123b8:	4628      	mov	r0, r5
 80123ba:	bd38      	pop	{r3, r4, r5, pc}
 80123bc:	8993      	ldrh	r3, [r2, #12]
 80123be:	f023 0320 	bic.w	r3, r3, #32
 80123c2:	8193      	strh	r3, [r2, #12]
 80123c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80123c6:	6852      	ldr	r2, [r2, #4]
 80123c8:	b2cd      	uxtb	r5, r1
 80123ca:	b18b      	cbz	r3, 80123f0 <_sungetc_r+0x44>
 80123cc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80123ce:	4293      	cmp	r3, r2
 80123d0:	dd08      	ble.n	80123e4 <_sungetc_r+0x38>
 80123d2:	6823      	ldr	r3, [r4, #0]
 80123d4:	1e5a      	subs	r2, r3, #1
 80123d6:	6022      	str	r2, [r4, #0]
 80123d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80123dc:	6863      	ldr	r3, [r4, #4]
 80123de:	3301      	adds	r3, #1
 80123e0:	6063      	str	r3, [r4, #4]
 80123e2:	e7e9      	b.n	80123b8 <_sungetc_r+0xc>
 80123e4:	4621      	mov	r1, r4
 80123e6:	f000 fcc4 	bl	8012d72 <__submore>
 80123ea:	2800      	cmp	r0, #0
 80123ec:	d0f1      	beq.n	80123d2 <_sungetc_r+0x26>
 80123ee:	e7e1      	b.n	80123b4 <_sungetc_r+0x8>
 80123f0:	6921      	ldr	r1, [r4, #16]
 80123f2:	6823      	ldr	r3, [r4, #0]
 80123f4:	b151      	cbz	r1, 801240c <_sungetc_r+0x60>
 80123f6:	4299      	cmp	r1, r3
 80123f8:	d208      	bcs.n	801240c <_sungetc_r+0x60>
 80123fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80123fe:	42a9      	cmp	r1, r5
 8012400:	d104      	bne.n	801240c <_sungetc_r+0x60>
 8012402:	3b01      	subs	r3, #1
 8012404:	3201      	adds	r2, #1
 8012406:	6023      	str	r3, [r4, #0]
 8012408:	6062      	str	r2, [r4, #4]
 801240a:	e7d5      	b.n	80123b8 <_sungetc_r+0xc>
 801240c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8012410:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012414:	6363      	str	r3, [r4, #52]	@ 0x34
 8012416:	2303      	movs	r3, #3
 8012418:	63a3      	str	r3, [r4, #56]	@ 0x38
 801241a:	4623      	mov	r3, r4
 801241c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012420:	6023      	str	r3, [r4, #0]
 8012422:	2301      	movs	r3, #1
 8012424:	e7dc      	b.n	80123e0 <_sungetc_r+0x34>

08012426 <__ssrefill_r>:
 8012426:	b510      	push	{r4, lr}
 8012428:	460c      	mov	r4, r1
 801242a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801242c:	b169      	cbz	r1, 801244a <__ssrefill_r+0x24>
 801242e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012432:	4299      	cmp	r1, r3
 8012434:	d001      	beq.n	801243a <__ssrefill_r+0x14>
 8012436:	f7ff fd69 	bl	8011f0c <_free_r>
 801243a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801243c:	6063      	str	r3, [r4, #4]
 801243e:	2000      	movs	r0, #0
 8012440:	6360      	str	r0, [r4, #52]	@ 0x34
 8012442:	b113      	cbz	r3, 801244a <__ssrefill_r+0x24>
 8012444:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012446:	6023      	str	r3, [r4, #0]
 8012448:	bd10      	pop	{r4, pc}
 801244a:	6923      	ldr	r3, [r4, #16]
 801244c:	6023      	str	r3, [r4, #0]
 801244e:	2300      	movs	r3, #0
 8012450:	6063      	str	r3, [r4, #4]
 8012452:	89a3      	ldrh	r3, [r4, #12]
 8012454:	f043 0320 	orr.w	r3, r3, #32
 8012458:	81a3      	strh	r3, [r4, #12]
 801245a:	f04f 30ff 	mov.w	r0, #4294967295
 801245e:	e7f3      	b.n	8012448 <__ssrefill_r+0x22>

08012460 <__ssvfiscanf_r>:
 8012460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012464:	460c      	mov	r4, r1
 8012466:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801246a:	2100      	movs	r1, #0
 801246c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012470:	49a6      	ldr	r1, [pc, #664]	@ (801270c <__ssvfiscanf_r+0x2ac>)
 8012472:	91a0      	str	r1, [sp, #640]	@ 0x280
 8012474:	f10d 0804 	add.w	r8, sp, #4
 8012478:	49a5      	ldr	r1, [pc, #660]	@ (8012710 <__ssvfiscanf_r+0x2b0>)
 801247a:	4fa6      	ldr	r7, [pc, #664]	@ (8012714 <__ssvfiscanf_r+0x2b4>)
 801247c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8012480:	4606      	mov	r6, r0
 8012482:	91a1      	str	r1, [sp, #644]	@ 0x284
 8012484:	9300      	str	r3, [sp, #0]
 8012486:	f892 9000 	ldrb.w	r9, [r2]
 801248a:	f1b9 0f00 	cmp.w	r9, #0
 801248e:	f000 8158 	beq.w	8012742 <__ssvfiscanf_r+0x2e2>
 8012492:	f817 3009 	ldrb.w	r3, [r7, r9]
 8012496:	f013 0308 	ands.w	r3, r3, #8
 801249a:	f102 0501 	add.w	r5, r2, #1
 801249e:	d019      	beq.n	80124d4 <__ssvfiscanf_r+0x74>
 80124a0:	6863      	ldr	r3, [r4, #4]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	dd0f      	ble.n	80124c6 <__ssvfiscanf_r+0x66>
 80124a6:	6823      	ldr	r3, [r4, #0]
 80124a8:	781a      	ldrb	r2, [r3, #0]
 80124aa:	5cba      	ldrb	r2, [r7, r2]
 80124ac:	0712      	lsls	r2, r2, #28
 80124ae:	d401      	bmi.n	80124b4 <__ssvfiscanf_r+0x54>
 80124b0:	462a      	mov	r2, r5
 80124b2:	e7e8      	b.n	8012486 <__ssvfiscanf_r+0x26>
 80124b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80124b6:	3201      	adds	r2, #1
 80124b8:	9245      	str	r2, [sp, #276]	@ 0x114
 80124ba:	6862      	ldr	r2, [r4, #4]
 80124bc:	3301      	adds	r3, #1
 80124be:	3a01      	subs	r2, #1
 80124c0:	6062      	str	r2, [r4, #4]
 80124c2:	6023      	str	r3, [r4, #0]
 80124c4:	e7ec      	b.n	80124a0 <__ssvfiscanf_r+0x40>
 80124c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80124c8:	4621      	mov	r1, r4
 80124ca:	4630      	mov	r0, r6
 80124cc:	4798      	blx	r3
 80124ce:	2800      	cmp	r0, #0
 80124d0:	d0e9      	beq.n	80124a6 <__ssvfiscanf_r+0x46>
 80124d2:	e7ed      	b.n	80124b0 <__ssvfiscanf_r+0x50>
 80124d4:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80124d8:	f040 8085 	bne.w	80125e6 <__ssvfiscanf_r+0x186>
 80124dc:	9341      	str	r3, [sp, #260]	@ 0x104
 80124de:	9343      	str	r3, [sp, #268]	@ 0x10c
 80124e0:	7853      	ldrb	r3, [r2, #1]
 80124e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80124e4:	bf02      	ittt	eq
 80124e6:	2310      	moveq	r3, #16
 80124e8:	1c95      	addeq	r5, r2, #2
 80124ea:	9341      	streq	r3, [sp, #260]	@ 0x104
 80124ec:	220a      	movs	r2, #10
 80124ee:	46aa      	mov	sl, r5
 80124f0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80124f4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80124f8:	2b09      	cmp	r3, #9
 80124fa:	d91e      	bls.n	801253a <__ssvfiscanf_r+0xda>
 80124fc:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8012718 <__ssvfiscanf_r+0x2b8>
 8012500:	2203      	movs	r2, #3
 8012502:	4658      	mov	r0, fp
 8012504:	f7ed fe7c 	bl	8000200 <memchr>
 8012508:	b138      	cbz	r0, 801251a <__ssvfiscanf_r+0xba>
 801250a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801250c:	eba0 000b 	sub.w	r0, r0, fp
 8012510:	2301      	movs	r3, #1
 8012512:	4083      	lsls	r3, r0
 8012514:	4313      	orrs	r3, r2
 8012516:	9341      	str	r3, [sp, #260]	@ 0x104
 8012518:	4655      	mov	r5, sl
 801251a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801251e:	2b78      	cmp	r3, #120	@ 0x78
 8012520:	d806      	bhi.n	8012530 <__ssvfiscanf_r+0xd0>
 8012522:	2b57      	cmp	r3, #87	@ 0x57
 8012524:	d810      	bhi.n	8012548 <__ssvfiscanf_r+0xe8>
 8012526:	2b25      	cmp	r3, #37	@ 0x25
 8012528:	d05d      	beq.n	80125e6 <__ssvfiscanf_r+0x186>
 801252a:	d857      	bhi.n	80125dc <__ssvfiscanf_r+0x17c>
 801252c:	2b00      	cmp	r3, #0
 801252e:	d075      	beq.n	801261c <__ssvfiscanf_r+0x1bc>
 8012530:	2303      	movs	r3, #3
 8012532:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012534:	230a      	movs	r3, #10
 8012536:	9342      	str	r3, [sp, #264]	@ 0x108
 8012538:	e088      	b.n	801264c <__ssvfiscanf_r+0x1ec>
 801253a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801253c:	fb02 1103 	mla	r1, r2, r3, r1
 8012540:	3930      	subs	r1, #48	@ 0x30
 8012542:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012544:	4655      	mov	r5, sl
 8012546:	e7d2      	b.n	80124ee <__ssvfiscanf_r+0x8e>
 8012548:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801254c:	2a20      	cmp	r2, #32
 801254e:	d8ef      	bhi.n	8012530 <__ssvfiscanf_r+0xd0>
 8012550:	a101      	add	r1, pc, #4	@ (adr r1, 8012558 <__ssvfiscanf_r+0xf8>)
 8012552:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012556:	bf00      	nop
 8012558:	0801262b 	.word	0x0801262b
 801255c:	08012531 	.word	0x08012531
 8012560:	08012531 	.word	0x08012531
 8012564:	08012685 	.word	0x08012685
 8012568:	08012531 	.word	0x08012531
 801256c:	08012531 	.word	0x08012531
 8012570:	08012531 	.word	0x08012531
 8012574:	08012531 	.word	0x08012531
 8012578:	08012531 	.word	0x08012531
 801257c:	08012531 	.word	0x08012531
 8012580:	08012531 	.word	0x08012531
 8012584:	0801269b 	.word	0x0801269b
 8012588:	08012681 	.word	0x08012681
 801258c:	080125e3 	.word	0x080125e3
 8012590:	080125e3 	.word	0x080125e3
 8012594:	080125e3 	.word	0x080125e3
 8012598:	08012531 	.word	0x08012531
 801259c:	0801263d 	.word	0x0801263d
 80125a0:	08012531 	.word	0x08012531
 80125a4:	08012531 	.word	0x08012531
 80125a8:	08012531 	.word	0x08012531
 80125ac:	08012531 	.word	0x08012531
 80125b0:	080126ab 	.word	0x080126ab
 80125b4:	08012645 	.word	0x08012645
 80125b8:	08012623 	.word	0x08012623
 80125bc:	08012531 	.word	0x08012531
 80125c0:	08012531 	.word	0x08012531
 80125c4:	080126a7 	.word	0x080126a7
 80125c8:	08012531 	.word	0x08012531
 80125cc:	08012681 	.word	0x08012681
 80125d0:	08012531 	.word	0x08012531
 80125d4:	08012531 	.word	0x08012531
 80125d8:	0801262b 	.word	0x0801262b
 80125dc:	3b45      	subs	r3, #69	@ 0x45
 80125de:	2b02      	cmp	r3, #2
 80125e0:	d8a6      	bhi.n	8012530 <__ssvfiscanf_r+0xd0>
 80125e2:	2305      	movs	r3, #5
 80125e4:	e031      	b.n	801264a <__ssvfiscanf_r+0x1ea>
 80125e6:	6863      	ldr	r3, [r4, #4]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	dd0d      	ble.n	8012608 <__ssvfiscanf_r+0x1a8>
 80125ec:	6823      	ldr	r3, [r4, #0]
 80125ee:	781a      	ldrb	r2, [r3, #0]
 80125f0:	454a      	cmp	r2, r9
 80125f2:	f040 80a6 	bne.w	8012742 <__ssvfiscanf_r+0x2e2>
 80125f6:	3301      	adds	r3, #1
 80125f8:	6862      	ldr	r2, [r4, #4]
 80125fa:	6023      	str	r3, [r4, #0]
 80125fc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80125fe:	3a01      	subs	r2, #1
 8012600:	3301      	adds	r3, #1
 8012602:	6062      	str	r2, [r4, #4]
 8012604:	9345      	str	r3, [sp, #276]	@ 0x114
 8012606:	e753      	b.n	80124b0 <__ssvfiscanf_r+0x50>
 8012608:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801260a:	4621      	mov	r1, r4
 801260c:	4630      	mov	r0, r6
 801260e:	4798      	blx	r3
 8012610:	2800      	cmp	r0, #0
 8012612:	d0eb      	beq.n	80125ec <__ssvfiscanf_r+0x18c>
 8012614:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012616:	2800      	cmp	r0, #0
 8012618:	f040 808b 	bne.w	8012732 <__ssvfiscanf_r+0x2d2>
 801261c:	f04f 30ff 	mov.w	r0, #4294967295
 8012620:	e08b      	b.n	801273a <__ssvfiscanf_r+0x2da>
 8012622:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012624:	f042 0220 	orr.w	r2, r2, #32
 8012628:	9241      	str	r2, [sp, #260]	@ 0x104
 801262a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801262c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012630:	9241      	str	r2, [sp, #260]	@ 0x104
 8012632:	2210      	movs	r2, #16
 8012634:	2b6e      	cmp	r3, #110	@ 0x6e
 8012636:	9242      	str	r2, [sp, #264]	@ 0x108
 8012638:	d902      	bls.n	8012640 <__ssvfiscanf_r+0x1e0>
 801263a:	e005      	b.n	8012648 <__ssvfiscanf_r+0x1e8>
 801263c:	2300      	movs	r3, #0
 801263e:	9342      	str	r3, [sp, #264]	@ 0x108
 8012640:	2303      	movs	r3, #3
 8012642:	e002      	b.n	801264a <__ssvfiscanf_r+0x1ea>
 8012644:	2308      	movs	r3, #8
 8012646:	9342      	str	r3, [sp, #264]	@ 0x108
 8012648:	2304      	movs	r3, #4
 801264a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801264c:	6863      	ldr	r3, [r4, #4]
 801264e:	2b00      	cmp	r3, #0
 8012650:	dd39      	ble.n	80126c6 <__ssvfiscanf_r+0x266>
 8012652:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012654:	0659      	lsls	r1, r3, #25
 8012656:	d404      	bmi.n	8012662 <__ssvfiscanf_r+0x202>
 8012658:	6823      	ldr	r3, [r4, #0]
 801265a:	781a      	ldrb	r2, [r3, #0]
 801265c:	5cba      	ldrb	r2, [r7, r2]
 801265e:	0712      	lsls	r2, r2, #28
 8012660:	d438      	bmi.n	80126d4 <__ssvfiscanf_r+0x274>
 8012662:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012664:	2b02      	cmp	r3, #2
 8012666:	dc47      	bgt.n	80126f8 <__ssvfiscanf_r+0x298>
 8012668:	466b      	mov	r3, sp
 801266a:	4622      	mov	r2, r4
 801266c:	a941      	add	r1, sp, #260	@ 0x104
 801266e:	4630      	mov	r0, r6
 8012670:	f000 f9f8 	bl	8012a64 <_scanf_chars>
 8012674:	2801      	cmp	r0, #1
 8012676:	d064      	beq.n	8012742 <__ssvfiscanf_r+0x2e2>
 8012678:	2802      	cmp	r0, #2
 801267a:	f47f af19 	bne.w	80124b0 <__ssvfiscanf_r+0x50>
 801267e:	e7c9      	b.n	8012614 <__ssvfiscanf_r+0x1b4>
 8012680:	220a      	movs	r2, #10
 8012682:	e7d7      	b.n	8012634 <__ssvfiscanf_r+0x1d4>
 8012684:	4629      	mov	r1, r5
 8012686:	4640      	mov	r0, r8
 8012688:	f000 fb3a 	bl	8012d00 <__sccl>
 801268c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801268e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012692:	9341      	str	r3, [sp, #260]	@ 0x104
 8012694:	4605      	mov	r5, r0
 8012696:	2301      	movs	r3, #1
 8012698:	e7d7      	b.n	801264a <__ssvfiscanf_r+0x1ea>
 801269a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801269c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80126a0:	9341      	str	r3, [sp, #260]	@ 0x104
 80126a2:	2300      	movs	r3, #0
 80126a4:	e7d1      	b.n	801264a <__ssvfiscanf_r+0x1ea>
 80126a6:	2302      	movs	r3, #2
 80126a8:	e7cf      	b.n	801264a <__ssvfiscanf_r+0x1ea>
 80126aa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80126ac:	06c3      	lsls	r3, r0, #27
 80126ae:	f53f aeff 	bmi.w	80124b0 <__ssvfiscanf_r+0x50>
 80126b2:	9b00      	ldr	r3, [sp, #0]
 80126b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80126b6:	1d19      	adds	r1, r3, #4
 80126b8:	9100      	str	r1, [sp, #0]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	07c0      	lsls	r0, r0, #31
 80126be:	bf4c      	ite	mi
 80126c0:	801a      	strhmi	r2, [r3, #0]
 80126c2:	601a      	strpl	r2, [r3, #0]
 80126c4:	e6f4      	b.n	80124b0 <__ssvfiscanf_r+0x50>
 80126c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80126c8:	4621      	mov	r1, r4
 80126ca:	4630      	mov	r0, r6
 80126cc:	4798      	blx	r3
 80126ce:	2800      	cmp	r0, #0
 80126d0:	d0bf      	beq.n	8012652 <__ssvfiscanf_r+0x1f2>
 80126d2:	e79f      	b.n	8012614 <__ssvfiscanf_r+0x1b4>
 80126d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80126d6:	3201      	adds	r2, #1
 80126d8:	9245      	str	r2, [sp, #276]	@ 0x114
 80126da:	6862      	ldr	r2, [r4, #4]
 80126dc:	3a01      	subs	r2, #1
 80126de:	2a00      	cmp	r2, #0
 80126e0:	6062      	str	r2, [r4, #4]
 80126e2:	dd02      	ble.n	80126ea <__ssvfiscanf_r+0x28a>
 80126e4:	3301      	adds	r3, #1
 80126e6:	6023      	str	r3, [r4, #0]
 80126e8:	e7b6      	b.n	8012658 <__ssvfiscanf_r+0x1f8>
 80126ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80126ec:	4621      	mov	r1, r4
 80126ee:	4630      	mov	r0, r6
 80126f0:	4798      	blx	r3
 80126f2:	2800      	cmp	r0, #0
 80126f4:	d0b0      	beq.n	8012658 <__ssvfiscanf_r+0x1f8>
 80126f6:	e78d      	b.n	8012614 <__ssvfiscanf_r+0x1b4>
 80126f8:	2b04      	cmp	r3, #4
 80126fa:	dc0f      	bgt.n	801271c <__ssvfiscanf_r+0x2bc>
 80126fc:	466b      	mov	r3, sp
 80126fe:	4622      	mov	r2, r4
 8012700:	a941      	add	r1, sp, #260	@ 0x104
 8012702:	4630      	mov	r0, r6
 8012704:	f000 fa08 	bl	8012b18 <_scanf_i>
 8012708:	e7b4      	b.n	8012674 <__ssvfiscanf_r+0x214>
 801270a:	bf00      	nop
 801270c:	080123ad 	.word	0x080123ad
 8012710:	08012427 	.word	0x08012427
 8012714:	08013453 	.word	0x08013453
 8012718:	08013559 	.word	0x08013559
 801271c:	4b0a      	ldr	r3, [pc, #40]	@ (8012748 <__ssvfiscanf_r+0x2e8>)
 801271e:	2b00      	cmp	r3, #0
 8012720:	f43f aec6 	beq.w	80124b0 <__ssvfiscanf_r+0x50>
 8012724:	466b      	mov	r3, sp
 8012726:	4622      	mov	r2, r4
 8012728:	a941      	add	r1, sp, #260	@ 0x104
 801272a:	4630      	mov	r0, r6
 801272c:	f3af 8000 	nop.w
 8012730:	e7a0      	b.n	8012674 <__ssvfiscanf_r+0x214>
 8012732:	89a3      	ldrh	r3, [r4, #12]
 8012734:	065b      	lsls	r3, r3, #25
 8012736:	f53f af71 	bmi.w	801261c <__ssvfiscanf_r+0x1bc>
 801273a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801273e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012742:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012744:	e7f9      	b.n	801273a <__ssvfiscanf_r+0x2da>
 8012746:	bf00      	nop
 8012748:	00000000 	.word	0x00000000

0801274c <_printf_common>:
 801274c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012750:	4616      	mov	r6, r2
 8012752:	4698      	mov	r8, r3
 8012754:	688a      	ldr	r2, [r1, #8]
 8012756:	690b      	ldr	r3, [r1, #16]
 8012758:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801275c:	4293      	cmp	r3, r2
 801275e:	bfb8      	it	lt
 8012760:	4613      	movlt	r3, r2
 8012762:	6033      	str	r3, [r6, #0]
 8012764:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012768:	4607      	mov	r7, r0
 801276a:	460c      	mov	r4, r1
 801276c:	b10a      	cbz	r2, 8012772 <_printf_common+0x26>
 801276e:	3301      	adds	r3, #1
 8012770:	6033      	str	r3, [r6, #0]
 8012772:	6823      	ldr	r3, [r4, #0]
 8012774:	0699      	lsls	r1, r3, #26
 8012776:	bf42      	ittt	mi
 8012778:	6833      	ldrmi	r3, [r6, #0]
 801277a:	3302      	addmi	r3, #2
 801277c:	6033      	strmi	r3, [r6, #0]
 801277e:	6825      	ldr	r5, [r4, #0]
 8012780:	f015 0506 	ands.w	r5, r5, #6
 8012784:	d106      	bne.n	8012794 <_printf_common+0x48>
 8012786:	f104 0a19 	add.w	sl, r4, #25
 801278a:	68e3      	ldr	r3, [r4, #12]
 801278c:	6832      	ldr	r2, [r6, #0]
 801278e:	1a9b      	subs	r3, r3, r2
 8012790:	42ab      	cmp	r3, r5
 8012792:	dc26      	bgt.n	80127e2 <_printf_common+0x96>
 8012794:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012798:	6822      	ldr	r2, [r4, #0]
 801279a:	3b00      	subs	r3, #0
 801279c:	bf18      	it	ne
 801279e:	2301      	movne	r3, #1
 80127a0:	0692      	lsls	r2, r2, #26
 80127a2:	d42b      	bmi.n	80127fc <_printf_common+0xb0>
 80127a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80127a8:	4641      	mov	r1, r8
 80127aa:	4638      	mov	r0, r7
 80127ac:	47c8      	blx	r9
 80127ae:	3001      	adds	r0, #1
 80127b0:	d01e      	beq.n	80127f0 <_printf_common+0xa4>
 80127b2:	6823      	ldr	r3, [r4, #0]
 80127b4:	6922      	ldr	r2, [r4, #16]
 80127b6:	f003 0306 	and.w	r3, r3, #6
 80127ba:	2b04      	cmp	r3, #4
 80127bc:	bf02      	ittt	eq
 80127be:	68e5      	ldreq	r5, [r4, #12]
 80127c0:	6833      	ldreq	r3, [r6, #0]
 80127c2:	1aed      	subeq	r5, r5, r3
 80127c4:	68a3      	ldr	r3, [r4, #8]
 80127c6:	bf0c      	ite	eq
 80127c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80127cc:	2500      	movne	r5, #0
 80127ce:	4293      	cmp	r3, r2
 80127d0:	bfc4      	itt	gt
 80127d2:	1a9b      	subgt	r3, r3, r2
 80127d4:	18ed      	addgt	r5, r5, r3
 80127d6:	2600      	movs	r6, #0
 80127d8:	341a      	adds	r4, #26
 80127da:	42b5      	cmp	r5, r6
 80127dc:	d11a      	bne.n	8012814 <_printf_common+0xc8>
 80127de:	2000      	movs	r0, #0
 80127e0:	e008      	b.n	80127f4 <_printf_common+0xa8>
 80127e2:	2301      	movs	r3, #1
 80127e4:	4652      	mov	r2, sl
 80127e6:	4641      	mov	r1, r8
 80127e8:	4638      	mov	r0, r7
 80127ea:	47c8      	blx	r9
 80127ec:	3001      	adds	r0, #1
 80127ee:	d103      	bne.n	80127f8 <_printf_common+0xac>
 80127f0:	f04f 30ff 	mov.w	r0, #4294967295
 80127f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127f8:	3501      	adds	r5, #1
 80127fa:	e7c6      	b.n	801278a <_printf_common+0x3e>
 80127fc:	18e1      	adds	r1, r4, r3
 80127fe:	1c5a      	adds	r2, r3, #1
 8012800:	2030      	movs	r0, #48	@ 0x30
 8012802:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012806:	4422      	add	r2, r4
 8012808:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801280c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012810:	3302      	adds	r3, #2
 8012812:	e7c7      	b.n	80127a4 <_printf_common+0x58>
 8012814:	2301      	movs	r3, #1
 8012816:	4622      	mov	r2, r4
 8012818:	4641      	mov	r1, r8
 801281a:	4638      	mov	r0, r7
 801281c:	47c8      	blx	r9
 801281e:	3001      	adds	r0, #1
 8012820:	d0e6      	beq.n	80127f0 <_printf_common+0xa4>
 8012822:	3601      	adds	r6, #1
 8012824:	e7d9      	b.n	80127da <_printf_common+0x8e>
	...

08012828 <_printf_i>:
 8012828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801282c:	7e0f      	ldrb	r7, [r1, #24]
 801282e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012830:	2f78      	cmp	r7, #120	@ 0x78
 8012832:	4691      	mov	r9, r2
 8012834:	4680      	mov	r8, r0
 8012836:	460c      	mov	r4, r1
 8012838:	469a      	mov	sl, r3
 801283a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801283e:	d807      	bhi.n	8012850 <_printf_i+0x28>
 8012840:	2f62      	cmp	r7, #98	@ 0x62
 8012842:	d80a      	bhi.n	801285a <_printf_i+0x32>
 8012844:	2f00      	cmp	r7, #0
 8012846:	f000 80d1 	beq.w	80129ec <_printf_i+0x1c4>
 801284a:	2f58      	cmp	r7, #88	@ 0x58
 801284c:	f000 80b8 	beq.w	80129c0 <_printf_i+0x198>
 8012850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012854:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012858:	e03a      	b.n	80128d0 <_printf_i+0xa8>
 801285a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801285e:	2b15      	cmp	r3, #21
 8012860:	d8f6      	bhi.n	8012850 <_printf_i+0x28>
 8012862:	a101      	add	r1, pc, #4	@ (adr r1, 8012868 <_printf_i+0x40>)
 8012864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012868:	080128c1 	.word	0x080128c1
 801286c:	080128d5 	.word	0x080128d5
 8012870:	08012851 	.word	0x08012851
 8012874:	08012851 	.word	0x08012851
 8012878:	08012851 	.word	0x08012851
 801287c:	08012851 	.word	0x08012851
 8012880:	080128d5 	.word	0x080128d5
 8012884:	08012851 	.word	0x08012851
 8012888:	08012851 	.word	0x08012851
 801288c:	08012851 	.word	0x08012851
 8012890:	08012851 	.word	0x08012851
 8012894:	080129d3 	.word	0x080129d3
 8012898:	080128ff 	.word	0x080128ff
 801289c:	0801298d 	.word	0x0801298d
 80128a0:	08012851 	.word	0x08012851
 80128a4:	08012851 	.word	0x08012851
 80128a8:	080129f5 	.word	0x080129f5
 80128ac:	08012851 	.word	0x08012851
 80128b0:	080128ff 	.word	0x080128ff
 80128b4:	08012851 	.word	0x08012851
 80128b8:	08012851 	.word	0x08012851
 80128bc:	08012995 	.word	0x08012995
 80128c0:	6833      	ldr	r3, [r6, #0]
 80128c2:	1d1a      	adds	r2, r3, #4
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	6032      	str	r2, [r6, #0]
 80128c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80128cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80128d0:	2301      	movs	r3, #1
 80128d2:	e09c      	b.n	8012a0e <_printf_i+0x1e6>
 80128d4:	6833      	ldr	r3, [r6, #0]
 80128d6:	6820      	ldr	r0, [r4, #0]
 80128d8:	1d19      	adds	r1, r3, #4
 80128da:	6031      	str	r1, [r6, #0]
 80128dc:	0606      	lsls	r6, r0, #24
 80128de:	d501      	bpl.n	80128e4 <_printf_i+0xbc>
 80128e0:	681d      	ldr	r5, [r3, #0]
 80128e2:	e003      	b.n	80128ec <_printf_i+0xc4>
 80128e4:	0645      	lsls	r5, r0, #25
 80128e6:	d5fb      	bpl.n	80128e0 <_printf_i+0xb8>
 80128e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80128ec:	2d00      	cmp	r5, #0
 80128ee:	da03      	bge.n	80128f8 <_printf_i+0xd0>
 80128f0:	232d      	movs	r3, #45	@ 0x2d
 80128f2:	426d      	negs	r5, r5
 80128f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80128f8:	4858      	ldr	r0, [pc, #352]	@ (8012a5c <_printf_i+0x234>)
 80128fa:	230a      	movs	r3, #10
 80128fc:	e011      	b.n	8012922 <_printf_i+0xfa>
 80128fe:	6821      	ldr	r1, [r4, #0]
 8012900:	6833      	ldr	r3, [r6, #0]
 8012902:	0608      	lsls	r0, r1, #24
 8012904:	f853 5b04 	ldr.w	r5, [r3], #4
 8012908:	d402      	bmi.n	8012910 <_printf_i+0xe8>
 801290a:	0649      	lsls	r1, r1, #25
 801290c:	bf48      	it	mi
 801290e:	b2ad      	uxthmi	r5, r5
 8012910:	2f6f      	cmp	r7, #111	@ 0x6f
 8012912:	4852      	ldr	r0, [pc, #328]	@ (8012a5c <_printf_i+0x234>)
 8012914:	6033      	str	r3, [r6, #0]
 8012916:	bf14      	ite	ne
 8012918:	230a      	movne	r3, #10
 801291a:	2308      	moveq	r3, #8
 801291c:	2100      	movs	r1, #0
 801291e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012922:	6866      	ldr	r6, [r4, #4]
 8012924:	60a6      	str	r6, [r4, #8]
 8012926:	2e00      	cmp	r6, #0
 8012928:	db05      	blt.n	8012936 <_printf_i+0x10e>
 801292a:	6821      	ldr	r1, [r4, #0]
 801292c:	432e      	orrs	r6, r5
 801292e:	f021 0104 	bic.w	r1, r1, #4
 8012932:	6021      	str	r1, [r4, #0]
 8012934:	d04b      	beq.n	80129ce <_printf_i+0x1a6>
 8012936:	4616      	mov	r6, r2
 8012938:	fbb5 f1f3 	udiv	r1, r5, r3
 801293c:	fb03 5711 	mls	r7, r3, r1, r5
 8012940:	5dc7      	ldrb	r7, [r0, r7]
 8012942:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012946:	462f      	mov	r7, r5
 8012948:	42bb      	cmp	r3, r7
 801294a:	460d      	mov	r5, r1
 801294c:	d9f4      	bls.n	8012938 <_printf_i+0x110>
 801294e:	2b08      	cmp	r3, #8
 8012950:	d10b      	bne.n	801296a <_printf_i+0x142>
 8012952:	6823      	ldr	r3, [r4, #0]
 8012954:	07df      	lsls	r7, r3, #31
 8012956:	d508      	bpl.n	801296a <_printf_i+0x142>
 8012958:	6923      	ldr	r3, [r4, #16]
 801295a:	6861      	ldr	r1, [r4, #4]
 801295c:	4299      	cmp	r1, r3
 801295e:	bfde      	ittt	le
 8012960:	2330      	movle	r3, #48	@ 0x30
 8012962:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012966:	f106 36ff 	addle.w	r6, r6, #4294967295
 801296a:	1b92      	subs	r2, r2, r6
 801296c:	6122      	str	r2, [r4, #16]
 801296e:	f8cd a000 	str.w	sl, [sp]
 8012972:	464b      	mov	r3, r9
 8012974:	aa03      	add	r2, sp, #12
 8012976:	4621      	mov	r1, r4
 8012978:	4640      	mov	r0, r8
 801297a:	f7ff fee7 	bl	801274c <_printf_common>
 801297e:	3001      	adds	r0, #1
 8012980:	d14a      	bne.n	8012a18 <_printf_i+0x1f0>
 8012982:	f04f 30ff 	mov.w	r0, #4294967295
 8012986:	b004      	add	sp, #16
 8012988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801298c:	6823      	ldr	r3, [r4, #0]
 801298e:	f043 0320 	orr.w	r3, r3, #32
 8012992:	6023      	str	r3, [r4, #0]
 8012994:	4832      	ldr	r0, [pc, #200]	@ (8012a60 <_printf_i+0x238>)
 8012996:	2778      	movs	r7, #120	@ 0x78
 8012998:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801299c:	6823      	ldr	r3, [r4, #0]
 801299e:	6831      	ldr	r1, [r6, #0]
 80129a0:	061f      	lsls	r7, r3, #24
 80129a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80129a6:	d402      	bmi.n	80129ae <_printf_i+0x186>
 80129a8:	065f      	lsls	r7, r3, #25
 80129aa:	bf48      	it	mi
 80129ac:	b2ad      	uxthmi	r5, r5
 80129ae:	6031      	str	r1, [r6, #0]
 80129b0:	07d9      	lsls	r1, r3, #31
 80129b2:	bf44      	itt	mi
 80129b4:	f043 0320 	orrmi.w	r3, r3, #32
 80129b8:	6023      	strmi	r3, [r4, #0]
 80129ba:	b11d      	cbz	r5, 80129c4 <_printf_i+0x19c>
 80129bc:	2310      	movs	r3, #16
 80129be:	e7ad      	b.n	801291c <_printf_i+0xf4>
 80129c0:	4826      	ldr	r0, [pc, #152]	@ (8012a5c <_printf_i+0x234>)
 80129c2:	e7e9      	b.n	8012998 <_printf_i+0x170>
 80129c4:	6823      	ldr	r3, [r4, #0]
 80129c6:	f023 0320 	bic.w	r3, r3, #32
 80129ca:	6023      	str	r3, [r4, #0]
 80129cc:	e7f6      	b.n	80129bc <_printf_i+0x194>
 80129ce:	4616      	mov	r6, r2
 80129d0:	e7bd      	b.n	801294e <_printf_i+0x126>
 80129d2:	6833      	ldr	r3, [r6, #0]
 80129d4:	6825      	ldr	r5, [r4, #0]
 80129d6:	6961      	ldr	r1, [r4, #20]
 80129d8:	1d18      	adds	r0, r3, #4
 80129da:	6030      	str	r0, [r6, #0]
 80129dc:	062e      	lsls	r6, r5, #24
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	d501      	bpl.n	80129e6 <_printf_i+0x1be>
 80129e2:	6019      	str	r1, [r3, #0]
 80129e4:	e002      	b.n	80129ec <_printf_i+0x1c4>
 80129e6:	0668      	lsls	r0, r5, #25
 80129e8:	d5fb      	bpl.n	80129e2 <_printf_i+0x1ba>
 80129ea:	8019      	strh	r1, [r3, #0]
 80129ec:	2300      	movs	r3, #0
 80129ee:	6123      	str	r3, [r4, #16]
 80129f0:	4616      	mov	r6, r2
 80129f2:	e7bc      	b.n	801296e <_printf_i+0x146>
 80129f4:	6833      	ldr	r3, [r6, #0]
 80129f6:	1d1a      	adds	r2, r3, #4
 80129f8:	6032      	str	r2, [r6, #0]
 80129fa:	681e      	ldr	r6, [r3, #0]
 80129fc:	6862      	ldr	r2, [r4, #4]
 80129fe:	2100      	movs	r1, #0
 8012a00:	4630      	mov	r0, r6
 8012a02:	f7ed fbfd 	bl	8000200 <memchr>
 8012a06:	b108      	cbz	r0, 8012a0c <_printf_i+0x1e4>
 8012a08:	1b80      	subs	r0, r0, r6
 8012a0a:	6060      	str	r0, [r4, #4]
 8012a0c:	6863      	ldr	r3, [r4, #4]
 8012a0e:	6123      	str	r3, [r4, #16]
 8012a10:	2300      	movs	r3, #0
 8012a12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012a16:	e7aa      	b.n	801296e <_printf_i+0x146>
 8012a18:	6923      	ldr	r3, [r4, #16]
 8012a1a:	4632      	mov	r2, r6
 8012a1c:	4649      	mov	r1, r9
 8012a1e:	4640      	mov	r0, r8
 8012a20:	47d0      	blx	sl
 8012a22:	3001      	adds	r0, #1
 8012a24:	d0ad      	beq.n	8012982 <_printf_i+0x15a>
 8012a26:	6823      	ldr	r3, [r4, #0]
 8012a28:	079b      	lsls	r3, r3, #30
 8012a2a:	d413      	bmi.n	8012a54 <_printf_i+0x22c>
 8012a2c:	68e0      	ldr	r0, [r4, #12]
 8012a2e:	9b03      	ldr	r3, [sp, #12]
 8012a30:	4298      	cmp	r0, r3
 8012a32:	bfb8      	it	lt
 8012a34:	4618      	movlt	r0, r3
 8012a36:	e7a6      	b.n	8012986 <_printf_i+0x15e>
 8012a38:	2301      	movs	r3, #1
 8012a3a:	4632      	mov	r2, r6
 8012a3c:	4649      	mov	r1, r9
 8012a3e:	4640      	mov	r0, r8
 8012a40:	47d0      	blx	sl
 8012a42:	3001      	adds	r0, #1
 8012a44:	d09d      	beq.n	8012982 <_printf_i+0x15a>
 8012a46:	3501      	adds	r5, #1
 8012a48:	68e3      	ldr	r3, [r4, #12]
 8012a4a:	9903      	ldr	r1, [sp, #12]
 8012a4c:	1a5b      	subs	r3, r3, r1
 8012a4e:	42ab      	cmp	r3, r5
 8012a50:	dcf2      	bgt.n	8012a38 <_printf_i+0x210>
 8012a52:	e7eb      	b.n	8012a2c <_printf_i+0x204>
 8012a54:	2500      	movs	r5, #0
 8012a56:	f104 0619 	add.w	r6, r4, #25
 8012a5a:	e7f5      	b.n	8012a48 <_printf_i+0x220>
 8012a5c:	08013564 	.word	0x08013564
 8012a60:	08013575 	.word	0x08013575

08012a64 <_scanf_chars>:
 8012a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a68:	4615      	mov	r5, r2
 8012a6a:	688a      	ldr	r2, [r1, #8]
 8012a6c:	4680      	mov	r8, r0
 8012a6e:	460c      	mov	r4, r1
 8012a70:	b932      	cbnz	r2, 8012a80 <_scanf_chars+0x1c>
 8012a72:	698a      	ldr	r2, [r1, #24]
 8012a74:	2a00      	cmp	r2, #0
 8012a76:	bf14      	ite	ne
 8012a78:	f04f 32ff 	movne.w	r2, #4294967295
 8012a7c:	2201      	moveq	r2, #1
 8012a7e:	608a      	str	r2, [r1, #8]
 8012a80:	6822      	ldr	r2, [r4, #0]
 8012a82:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012b14 <_scanf_chars+0xb0>
 8012a86:	06d1      	lsls	r1, r2, #27
 8012a88:	bf5f      	itttt	pl
 8012a8a:	681a      	ldrpl	r2, [r3, #0]
 8012a8c:	1d11      	addpl	r1, r2, #4
 8012a8e:	6019      	strpl	r1, [r3, #0]
 8012a90:	6816      	ldrpl	r6, [r2, #0]
 8012a92:	2700      	movs	r7, #0
 8012a94:	69a0      	ldr	r0, [r4, #24]
 8012a96:	b188      	cbz	r0, 8012abc <_scanf_chars+0x58>
 8012a98:	2801      	cmp	r0, #1
 8012a9a:	d107      	bne.n	8012aac <_scanf_chars+0x48>
 8012a9c:	682b      	ldr	r3, [r5, #0]
 8012a9e:	781a      	ldrb	r2, [r3, #0]
 8012aa0:	6963      	ldr	r3, [r4, #20]
 8012aa2:	5c9b      	ldrb	r3, [r3, r2]
 8012aa4:	b953      	cbnz	r3, 8012abc <_scanf_chars+0x58>
 8012aa6:	2f00      	cmp	r7, #0
 8012aa8:	d031      	beq.n	8012b0e <_scanf_chars+0xaa>
 8012aaa:	e022      	b.n	8012af2 <_scanf_chars+0x8e>
 8012aac:	2802      	cmp	r0, #2
 8012aae:	d120      	bne.n	8012af2 <_scanf_chars+0x8e>
 8012ab0:	682b      	ldr	r3, [r5, #0]
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012ab8:	071b      	lsls	r3, r3, #28
 8012aba:	d41a      	bmi.n	8012af2 <_scanf_chars+0x8e>
 8012abc:	6823      	ldr	r3, [r4, #0]
 8012abe:	06da      	lsls	r2, r3, #27
 8012ac0:	bf5e      	ittt	pl
 8012ac2:	682b      	ldrpl	r3, [r5, #0]
 8012ac4:	781b      	ldrbpl	r3, [r3, #0]
 8012ac6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012aca:	682a      	ldr	r2, [r5, #0]
 8012acc:	686b      	ldr	r3, [r5, #4]
 8012ace:	3201      	adds	r2, #1
 8012ad0:	602a      	str	r2, [r5, #0]
 8012ad2:	68a2      	ldr	r2, [r4, #8]
 8012ad4:	3b01      	subs	r3, #1
 8012ad6:	3a01      	subs	r2, #1
 8012ad8:	606b      	str	r3, [r5, #4]
 8012ada:	3701      	adds	r7, #1
 8012adc:	60a2      	str	r2, [r4, #8]
 8012ade:	b142      	cbz	r2, 8012af2 <_scanf_chars+0x8e>
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	dcd7      	bgt.n	8012a94 <_scanf_chars+0x30>
 8012ae4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012ae8:	4629      	mov	r1, r5
 8012aea:	4640      	mov	r0, r8
 8012aec:	4798      	blx	r3
 8012aee:	2800      	cmp	r0, #0
 8012af0:	d0d0      	beq.n	8012a94 <_scanf_chars+0x30>
 8012af2:	6823      	ldr	r3, [r4, #0]
 8012af4:	f013 0310 	ands.w	r3, r3, #16
 8012af8:	d105      	bne.n	8012b06 <_scanf_chars+0xa2>
 8012afa:	68e2      	ldr	r2, [r4, #12]
 8012afc:	3201      	adds	r2, #1
 8012afe:	60e2      	str	r2, [r4, #12]
 8012b00:	69a2      	ldr	r2, [r4, #24]
 8012b02:	b102      	cbz	r2, 8012b06 <_scanf_chars+0xa2>
 8012b04:	7033      	strb	r3, [r6, #0]
 8012b06:	6923      	ldr	r3, [r4, #16]
 8012b08:	443b      	add	r3, r7
 8012b0a:	6123      	str	r3, [r4, #16]
 8012b0c:	2000      	movs	r0, #0
 8012b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b12:	bf00      	nop
 8012b14:	08013453 	.word	0x08013453

08012b18 <_scanf_i>:
 8012b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b1c:	4698      	mov	r8, r3
 8012b1e:	4b74      	ldr	r3, [pc, #464]	@ (8012cf0 <_scanf_i+0x1d8>)
 8012b20:	460c      	mov	r4, r1
 8012b22:	4682      	mov	sl, r0
 8012b24:	4616      	mov	r6, r2
 8012b26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b2a:	b087      	sub	sp, #28
 8012b2c:	ab03      	add	r3, sp, #12
 8012b2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012b32:	4b70      	ldr	r3, [pc, #448]	@ (8012cf4 <_scanf_i+0x1dc>)
 8012b34:	69a1      	ldr	r1, [r4, #24]
 8012b36:	4a70      	ldr	r2, [pc, #448]	@ (8012cf8 <_scanf_i+0x1e0>)
 8012b38:	2903      	cmp	r1, #3
 8012b3a:	bf08      	it	eq
 8012b3c:	461a      	moveq	r2, r3
 8012b3e:	68a3      	ldr	r3, [r4, #8]
 8012b40:	9201      	str	r2, [sp, #4]
 8012b42:	1e5a      	subs	r2, r3, #1
 8012b44:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012b48:	bf88      	it	hi
 8012b4a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012b4e:	4627      	mov	r7, r4
 8012b50:	bf82      	ittt	hi
 8012b52:	eb03 0905 	addhi.w	r9, r3, r5
 8012b56:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012b5a:	60a3      	strhi	r3, [r4, #8]
 8012b5c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012b60:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012b64:	bf98      	it	ls
 8012b66:	f04f 0900 	movls.w	r9, #0
 8012b6a:	6023      	str	r3, [r4, #0]
 8012b6c:	463d      	mov	r5, r7
 8012b6e:	f04f 0b00 	mov.w	fp, #0
 8012b72:	6831      	ldr	r1, [r6, #0]
 8012b74:	ab03      	add	r3, sp, #12
 8012b76:	7809      	ldrb	r1, [r1, #0]
 8012b78:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012b7c:	2202      	movs	r2, #2
 8012b7e:	f7ed fb3f 	bl	8000200 <memchr>
 8012b82:	b328      	cbz	r0, 8012bd0 <_scanf_i+0xb8>
 8012b84:	f1bb 0f01 	cmp.w	fp, #1
 8012b88:	d159      	bne.n	8012c3e <_scanf_i+0x126>
 8012b8a:	6862      	ldr	r2, [r4, #4]
 8012b8c:	b92a      	cbnz	r2, 8012b9a <_scanf_i+0x82>
 8012b8e:	6822      	ldr	r2, [r4, #0]
 8012b90:	2108      	movs	r1, #8
 8012b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012b96:	6061      	str	r1, [r4, #4]
 8012b98:	6022      	str	r2, [r4, #0]
 8012b9a:	6822      	ldr	r2, [r4, #0]
 8012b9c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012ba0:	6022      	str	r2, [r4, #0]
 8012ba2:	68a2      	ldr	r2, [r4, #8]
 8012ba4:	1e51      	subs	r1, r2, #1
 8012ba6:	60a1      	str	r1, [r4, #8]
 8012ba8:	b192      	cbz	r2, 8012bd0 <_scanf_i+0xb8>
 8012baa:	6832      	ldr	r2, [r6, #0]
 8012bac:	1c51      	adds	r1, r2, #1
 8012bae:	6031      	str	r1, [r6, #0]
 8012bb0:	7812      	ldrb	r2, [r2, #0]
 8012bb2:	f805 2b01 	strb.w	r2, [r5], #1
 8012bb6:	6872      	ldr	r2, [r6, #4]
 8012bb8:	3a01      	subs	r2, #1
 8012bba:	2a00      	cmp	r2, #0
 8012bbc:	6072      	str	r2, [r6, #4]
 8012bbe:	dc07      	bgt.n	8012bd0 <_scanf_i+0xb8>
 8012bc0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012bc4:	4631      	mov	r1, r6
 8012bc6:	4650      	mov	r0, sl
 8012bc8:	4790      	blx	r2
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	f040 8085 	bne.w	8012cda <_scanf_i+0x1c2>
 8012bd0:	f10b 0b01 	add.w	fp, fp, #1
 8012bd4:	f1bb 0f03 	cmp.w	fp, #3
 8012bd8:	d1cb      	bne.n	8012b72 <_scanf_i+0x5a>
 8012bda:	6863      	ldr	r3, [r4, #4]
 8012bdc:	b90b      	cbnz	r3, 8012be2 <_scanf_i+0xca>
 8012bde:	230a      	movs	r3, #10
 8012be0:	6063      	str	r3, [r4, #4]
 8012be2:	6863      	ldr	r3, [r4, #4]
 8012be4:	4945      	ldr	r1, [pc, #276]	@ (8012cfc <_scanf_i+0x1e4>)
 8012be6:	6960      	ldr	r0, [r4, #20]
 8012be8:	1ac9      	subs	r1, r1, r3
 8012bea:	f000 f889 	bl	8012d00 <__sccl>
 8012bee:	f04f 0b00 	mov.w	fp, #0
 8012bf2:	68a3      	ldr	r3, [r4, #8]
 8012bf4:	6822      	ldr	r2, [r4, #0]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d03d      	beq.n	8012c76 <_scanf_i+0x15e>
 8012bfa:	6831      	ldr	r1, [r6, #0]
 8012bfc:	6960      	ldr	r0, [r4, #20]
 8012bfe:	f891 c000 	ldrb.w	ip, [r1]
 8012c02:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012c06:	2800      	cmp	r0, #0
 8012c08:	d035      	beq.n	8012c76 <_scanf_i+0x15e>
 8012c0a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012c0e:	d124      	bne.n	8012c5a <_scanf_i+0x142>
 8012c10:	0510      	lsls	r0, r2, #20
 8012c12:	d522      	bpl.n	8012c5a <_scanf_i+0x142>
 8012c14:	f10b 0b01 	add.w	fp, fp, #1
 8012c18:	f1b9 0f00 	cmp.w	r9, #0
 8012c1c:	d003      	beq.n	8012c26 <_scanf_i+0x10e>
 8012c1e:	3301      	adds	r3, #1
 8012c20:	f109 39ff 	add.w	r9, r9, #4294967295
 8012c24:	60a3      	str	r3, [r4, #8]
 8012c26:	6873      	ldr	r3, [r6, #4]
 8012c28:	3b01      	subs	r3, #1
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	6073      	str	r3, [r6, #4]
 8012c2e:	dd1b      	ble.n	8012c68 <_scanf_i+0x150>
 8012c30:	6833      	ldr	r3, [r6, #0]
 8012c32:	3301      	adds	r3, #1
 8012c34:	6033      	str	r3, [r6, #0]
 8012c36:	68a3      	ldr	r3, [r4, #8]
 8012c38:	3b01      	subs	r3, #1
 8012c3a:	60a3      	str	r3, [r4, #8]
 8012c3c:	e7d9      	b.n	8012bf2 <_scanf_i+0xda>
 8012c3e:	f1bb 0f02 	cmp.w	fp, #2
 8012c42:	d1ae      	bne.n	8012ba2 <_scanf_i+0x8a>
 8012c44:	6822      	ldr	r2, [r4, #0]
 8012c46:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012c4a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012c4e:	d1c4      	bne.n	8012bda <_scanf_i+0xc2>
 8012c50:	2110      	movs	r1, #16
 8012c52:	6061      	str	r1, [r4, #4]
 8012c54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012c58:	e7a2      	b.n	8012ba0 <_scanf_i+0x88>
 8012c5a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012c5e:	6022      	str	r2, [r4, #0]
 8012c60:	780b      	ldrb	r3, [r1, #0]
 8012c62:	f805 3b01 	strb.w	r3, [r5], #1
 8012c66:	e7de      	b.n	8012c26 <_scanf_i+0x10e>
 8012c68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012c6c:	4631      	mov	r1, r6
 8012c6e:	4650      	mov	r0, sl
 8012c70:	4798      	blx	r3
 8012c72:	2800      	cmp	r0, #0
 8012c74:	d0df      	beq.n	8012c36 <_scanf_i+0x11e>
 8012c76:	6823      	ldr	r3, [r4, #0]
 8012c78:	05d9      	lsls	r1, r3, #23
 8012c7a:	d50d      	bpl.n	8012c98 <_scanf_i+0x180>
 8012c7c:	42bd      	cmp	r5, r7
 8012c7e:	d909      	bls.n	8012c94 <_scanf_i+0x17c>
 8012c80:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012c84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012c88:	4632      	mov	r2, r6
 8012c8a:	4650      	mov	r0, sl
 8012c8c:	4798      	blx	r3
 8012c8e:	f105 39ff 	add.w	r9, r5, #4294967295
 8012c92:	464d      	mov	r5, r9
 8012c94:	42bd      	cmp	r5, r7
 8012c96:	d028      	beq.n	8012cea <_scanf_i+0x1d2>
 8012c98:	6822      	ldr	r2, [r4, #0]
 8012c9a:	f012 0210 	ands.w	r2, r2, #16
 8012c9e:	d113      	bne.n	8012cc8 <_scanf_i+0x1b0>
 8012ca0:	702a      	strb	r2, [r5, #0]
 8012ca2:	6863      	ldr	r3, [r4, #4]
 8012ca4:	9e01      	ldr	r6, [sp, #4]
 8012ca6:	4639      	mov	r1, r7
 8012ca8:	4650      	mov	r0, sl
 8012caa:	47b0      	blx	r6
 8012cac:	f8d8 3000 	ldr.w	r3, [r8]
 8012cb0:	6821      	ldr	r1, [r4, #0]
 8012cb2:	1d1a      	adds	r2, r3, #4
 8012cb4:	f8c8 2000 	str.w	r2, [r8]
 8012cb8:	f011 0f20 	tst.w	r1, #32
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	d00f      	beq.n	8012ce0 <_scanf_i+0x1c8>
 8012cc0:	6018      	str	r0, [r3, #0]
 8012cc2:	68e3      	ldr	r3, [r4, #12]
 8012cc4:	3301      	adds	r3, #1
 8012cc6:	60e3      	str	r3, [r4, #12]
 8012cc8:	6923      	ldr	r3, [r4, #16]
 8012cca:	1bed      	subs	r5, r5, r7
 8012ccc:	445d      	add	r5, fp
 8012cce:	442b      	add	r3, r5
 8012cd0:	6123      	str	r3, [r4, #16]
 8012cd2:	2000      	movs	r0, #0
 8012cd4:	b007      	add	sp, #28
 8012cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cda:	f04f 0b00 	mov.w	fp, #0
 8012cde:	e7ca      	b.n	8012c76 <_scanf_i+0x15e>
 8012ce0:	07ca      	lsls	r2, r1, #31
 8012ce2:	bf4c      	ite	mi
 8012ce4:	8018      	strhmi	r0, [r3, #0]
 8012ce6:	6018      	strpl	r0, [r3, #0]
 8012ce8:	e7eb      	b.n	8012cc2 <_scanf_i+0x1aa>
 8012cea:	2001      	movs	r0, #1
 8012cec:	e7f2      	b.n	8012cd4 <_scanf_i+0x1bc>
 8012cee:	bf00      	nop
 8012cf0:	08013350 	.word	0x08013350
 8012cf4:	08011d11 	.word	0x08011d11
 8012cf8:	08012f75 	.word	0x08012f75
 8012cfc:	08013596 	.word	0x08013596

08012d00 <__sccl>:
 8012d00:	b570      	push	{r4, r5, r6, lr}
 8012d02:	780b      	ldrb	r3, [r1, #0]
 8012d04:	4604      	mov	r4, r0
 8012d06:	2b5e      	cmp	r3, #94	@ 0x5e
 8012d08:	bf0b      	itete	eq
 8012d0a:	784b      	ldrbeq	r3, [r1, #1]
 8012d0c:	1c4a      	addne	r2, r1, #1
 8012d0e:	1c8a      	addeq	r2, r1, #2
 8012d10:	2100      	movne	r1, #0
 8012d12:	bf08      	it	eq
 8012d14:	2101      	moveq	r1, #1
 8012d16:	3801      	subs	r0, #1
 8012d18:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012d1c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012d20:	42a8      	cmp	r0, r5
 8012d22:	d1fb      	bne.n	8012d1c <__sccl+0x1c>
 8012d24:	b90b      	cbnz	r3, 8012d2a <__sccl+0x2a>
 8012d26:	1e50      	subs	r0, r2, #1
 8012d28:	bd70      	pop	{r4, r5, r6, pc}
 8012d2a:	f081 0101 	eor.w	r1, r1, #1
 8012d2e:	54e1      	strb	r1, [r4, r3]
 8012d30:	4610      	mov	r0, r2
 8012d32:	4602      	mov	r2, r0
 8012d34:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012d38:	2d2d      	cmp	r5, #45	@ 0x2d
 8012d3a:	d005      	beq.n	8012d48 <__sccl+0x48>
 8012d3c:	2d5d      	cmp	r5, #93	@ 0x5d
 8012d3e:	d016      	beq.n	8012d6e <__sccl+0x6e>
 8012d40:	2d00      	cmp	r5, #0
 8012d42:	d0f1      	beq.n	8012d28 <__sccl+0x28>
 8012d44:	462b      	mov	r3, r5
 8012d46:	e7f2      	b.n	8012d2e <__sccl+0x2e>
 8012d48:	7846      	ldrb	r6, [r0, #1]
 8012d4a:	2e5d      	cmp	r6, #93	@ 0x5d
 8012d4c:	d0fa      	beq.n	8012d44 <__sccl+0x44>
 8012d4e:	42b3      	cmp	r3, r6
 8012d50:	dcf8      	bgt.n	8012d44 <__sccl+0x44>
 8012d52:	3002      	adds	r0, #2
 8012d54:	461a      	mov	r2, r3
 8012d56:	3201      	adds	r2, #1
 8012d58:	4296      	cmp	r6, r2
 8012d5a:	54a1      	strb	r1, [r4, r2]
 8012d5c:	dcfb      	bgt.n	8012d56 <__sccl+0x56>
 8012d5e:	1af2      	subs	r2, r6, r3
 8012d60:	3a01      	subs	r2, #1
 8012d62:	1c5d      	adds	r5, r3, #1
 8012d64:	42b3      	cmp	r3, r6
 8012d66:	bfa8      	it	ge
 8012d68:	2200      	movge	r2, #0
 8012d6a:	18ab      	adds	r3, r5, r2
 8012d6c:	e7e1      	b.n	8012d32 <__sccl+0x32>
 8012d6e:	4610      	mov	r0, r2
 8012d70:	e7da      	b.n	8012d28 <__sccl+0x28>

08012d72 <__submore>:
 8012d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d76:	460c      	mov	r4, r1
 8012d78:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012d7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012d7e:	4299      	cmp	r1, r3
 8012d80:	d11d      	bne.n	8012dbe <__submore+0x4c>
 8012d82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012d86:	f7ff f92d 	bl	8011fe4 <_malloc_r>
 8012d8a:	b918      	cbnz	r0, 8012d94 <__submore+0x22>
 8012d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012d98:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012d9a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012d9e:	6360      	str	r0, [r4, #52]	@ 0x34
 8012da0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012da4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012da8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012dac:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012db0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012db4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012db8:	6020      	str	r0, [r4, #0]
 8012dba:	2000      	movs	r0, #0
 8012dbc:	e7e8      	b.n	8012d90 <__submore+0x1e>
 8012dbe:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012dc0:	0077      	lsls	r7, r6, #1
 8012dc2:	463a      	mov	r2, r7
 8012dc4:	f000 f83a 	bl	8012e3c <_realloc_r>
 8012dc8:	4605      	mov	r5, r0
 8012dca:	2800      	cmp	r0, #0
 8012dcc:	d0de      	beq.n	8012d8c <__submore+0x1a>
 8012dce:	eb00 0806 	add.w	r8, r0, r6
 8012dd2:	4601      	mov	r1, r0
 8012dd4:	4632      	mov	r2, r6
 8012dd6:	4640      	mov	r0, r8
 8012dd8:	f7ff f88a 	bl	8011ef0 <memcpy>
 8012ddc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012de0:	f8c4 8000 	str.w	r8, [r4]
 8012de4:	e7e9      	b.n	8012dba <__submore+0x48>

08012de6 <memmove>:
 8012de6:	4288      	cmp	r0, r1
 8012de8:	b510      	push	{r4, lr}
 8012dea:	eb01 0402 	add.w	r4, r1, r2
 8012dee:	d902      	bls.n	8012df6 <memmove+0x10>
 8012df0:	4284      	cmp	r4, r0
 8012df2:	4623      	mov	r3, r4
 8012df4:	d807      	bhi.n	8012e06 <memmove+0x20>
 8012df6:	1e43      	subs	r3, r0, #1
 8012df8:	42a1      	cmp	r1, r4
 8012dfa:	d008      	beq.n	8012e0e <memmove+0x28>
 8012dfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012e00:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012e04:	e7f8      	b.n	8012df8 <memmove+0x12>
 8012e06:	4402      	add	r2, r0
 8012e08:	4601      	mov	r1, r0
 8012e0a:	428a      	cmp	r2, r1
 8012e0c:	d100      	bne.n	8012e10 <memmove+0x2a>
 8012e0e:	bd10      	pop	{r4, pc}
 8012e10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012e14:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012e18:	e7f7      	b.n	8012e0a <memmove+0x24>
	...

08012e1c <_sbrk_r>:
 8012e1c:	b538      	push	{r3, r4, r5, lr}
 8012e1e:	4d06      	ldr	r5, [pc, #24]	@ (8012e38 <_sbrk_r+0x1c>)
 8012e20:	2300      	movs	r3, #0
 8012e22:	4604      	mov	r4, r0
 8012e24:	4608      	mov	r0, r1
 8012e26:	602b      	str	r3, [r5, #0]
 8012e28:	f7f2 f838 	bl	8004e9c <_sbrk>
 8012e2c:	1c43      	adds	r3, r0, #1
 8012e2e:	d102      	bne.n	8012e36 <_sbrk_r+0x1a>
 8012e30:	682b      	ldr	r3, [r5, #0]
 8012e32:	b103      	cbz	r3, 8012e36 <_sbrk_r+0x1a>
 8012e34:	6023      	str	r3, [r4, #0]
 8012e36:	bd38      	pop	{r3, r4, r5, pc}
 8012e38:	20007648 	.word	0x20007648

08012e3c <_realloc_r>:
 8012e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e40:	4607      	mov	r7, r0
 8012e42:	4614      	mov	r4, r2
 8012e44:	460d      	mov	r5, r1
 8012e46:	b921      	cbnz	r1, 8012e52 <_realloc_r+0x16>
 8012e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e4c:	4611      	mov	r1, r2
 8012e4e:	f7ff b8c9 	b.w	8011fe4 <_malloc_r>
 8012e52:	b92a      	cbnz	r2, 8012e60 <_realloc_r+0x24>
 8012e54:	f7ff f85a 	bl	8011f0c <_free_r>
 8012e58:	4625      	mov	r5, r4
 8012e5a:	4628      	mov	r0, r5
 8012e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e60:	f000 f88a 	bl	8012f78 <_malloc_usable_size_r>
 8012e64:	4284      	cmp	r4, r0
 8012e66:	4606      	mov	r6, r0
 8012e68:	d802      	bhi.n	8012e70 <_realloc_r+0x34>
 8012e6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012e6e:	d8f4      	bhi.n	8012e5a <_realloc_r+0x1e>
 8012e70:	4621      	mov	r1, r4
 8012e72:	4638      	mov	r0, r7
 8012e74:	f7ff f8b6 	bl	8011fe4 <_malloc_r>
 8012e78:	4680      	mov	r8, r0
 8012e7a:	b908      	cbnz	r0, 8012e80 <_realloc_r+0x44>
 8012e7c:	4645      	mov	r5, r8
 8012e7e:	e7ec      	b.n	8012e5a <_realloc_r+0x1e>
 8012e80:	42b4      	cmp	r4, r6
 8012e82:	4622      	mov	r2, r4
 8012e84:	4629      	mov	r1, r5
 8012e86:	bf28      	it	cs
 8012e88:	4632      	movcs	r2, r6
 8012e8a:	f7ff f831 	bl	8011ef0 <memcpy>
 8012e8e:	4629      	mov	r1, r5
 8012e90:	4638      	mov	r0, r7
 8012e92:	f7ff f83b 	bl	8011f0c <_free_r>
 8012e96:	e7f1      	b.n	8012e7c <_realloc_r+0x40>

08012e98 <_strtoul_l.isra.0>:
 8012e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e9c:	4e34      	ldr	r6, [pc, #208]	@ (8012f70 <_strtoul_l.isra.0+0xd8>)
 8012e9e:	4686      	mov	lr, r0
 8012ea0:	460d      	mov	r5, r1
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012ea8:	5d37      	ldrb	r7, [r6, r4]
 8012eaa:	f017 0708 	ands.w	r7, r7, #8
 8012eae:	d1f8      	bne.n	8012ea2 <_strtoul_l.isra.0+0xa>
 8012eb0:	2c2d      	cmp	r4, #45	@ 0x2d
 8012eb2:	d110      	bne.n	8012ed6 <_strtoul_l.isra.0+0x3e>
 8012eb4:	782c      	ldrb	r4, [r5, #0]
 8012eb6:	2701      	movs	r7, #1
 8012eb8:	1c85      	adds	r5, r0, #2
 8012eba:	f033 0010 	bics.w	r0, r3, #16
 8012ebe:	d115      	bne.n	8012eec <_strtoul_l.isra.0+0x54>
 8012ec0:	2c30      	cmp	r4, #48	@ 0x30
 8012ec2:	d10d      	bne.n	8012ee0 <_strtoul_l.isra.0+0x48>
 8012ec4:	7828      	ldrb	r0, [r5, #0]
 8012ec6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012eca:	2858      	cmp	r0, #88	@ 0x58
 8012ecc:	d108      	bne.n	8012ee0 <_strtoul_l.isra.0+0x48>
 8012ece:	786c      	ldrb	r4, [r5, #1]
 8012ed0:	3502      	adds	r5, #2
 8012ed2:	2310      	movs	r3, #16
 8012ed4:	e00a      	b.n	8012eec <_strtoul_l.isra.0+0x54>
 8012ed6:	2c2b      	cmp	r4, #43	@ 0x2b
 8012ed8:	bf04      	itt	eq
 8012eda:	782c      	ldrbeq	r4, [r5, #0]
 8012edc:	1c85      	addeq	r5, r0, #2
 8012ede:	e7ec      	b.n	8012eba <_strtoul_l.isra.0+0x22>
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d1f6      	bne.n	8012ed2 <_strtoul_l.isra.0+0x3a>
 8012ee4:	2c30      	cmp	r4, #48	@ 0x30
 8012ee6:	bf14      	ite	ne
 8012ee8:	230a      	movne	r3, #10
 8012eea:	2308      	moveq	r3, #8
 8012eec:	f04f 38ff 	mov.w	r8, #4294967295
 8012ef0:	2600      	movs	r6, #0
 8012ef2:	fbb8 f8f3 	udiv	r8, r8, r3
 8012ef6:	fb03 f908 	mul.w	r9, r3, r8
 8012efa:	ea6f 0909 	mvn.w	r9, r9
 8012efe:	4630      	mov	r0, r6
 8012f00:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012f04:	f1bc 0f09 	cmp.w	ip, #9
 8012f08:	d810      	bhi.n	8012f2c <_strtoul_l.isra.0+0x94>
 8012f0a:	4664      	mov	r4, ip
 8012f0c:	42a3      	cmp	r3, r4
 8012f0e:	dd1e      	ble.n	8012f4e <_strtoul_l.isra.0+0xb6>
 8012f10:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012f14:	d007      	beq.n	8012f26 <_strtoul_l.isra.0+0x8e>
 8012f16:	4580      	cmp	r8, r0
 8012f18:	d316      	bcc.n	8012f48 <_strtoul_l.isra.0+0xb0>
 8012f1a:	d101      	bne.n	8012f20 <_strtoul_l.isra.0+0x88>
 8012f1c:	45a1      	cmp	r9, r4
 8012f1e:	db13      	blt.n	8012f48 <_strtoul_l.isra.0+0xb0>
 8012f20:	fb00 4003 	mla	r0, r0, r3, r4
 8012f24:	2601      	movs	r6, #1
 8012f26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f2a:	e7e9      	b.n	8012f00 <_strtoul_l.isra.0+0x68>
 8012f2c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012f30:	f1bc 0f19 	cmp.w	ip, #25
 8012f34:	d801      	bhi.n	8012f3a <_strtoul_l.isra.0+0xa2>
 8012f36:	3c37      	subs	r4, #55	@ 0x37
 8012f38:	e7e8      	b.n	8012f0c <_strtoul_l.isra.0+0x74>
 8012f3a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012f3e:	f1bc 0f19 	cmp.w	ip, #25
 8012f42:	d804      	bhi.n	8012f4e <_strtoul_l.isra.0+0xb6>
 8012f44:	3c57      	subs	r4, #87	@ 0x57
 8012f46:	e7e1      	b.n	8012f0c <_strtoul_l.isra.0+0x74>
 8012f48:	f04f 36ff 	mov.w	r6, #4294967295
 8012f4c:	e7eb      	b.n	8012f26 <_strtoul_l.isra.0+0x8e>
 8012f4e:	1c73      	adds	r3, r6, #1
 8012f50:	d106      	bne.n	8012f60 <_strtoul_l.isra.0+0xc8>
 8012f52:	2322      	movs	r3, #34	@ 0x22
 8012f54:	f8ce 3000 	str.w	r3, [lr]
 8012f58:	4630      	mov	r0, r6
 8012f5a:	b932      	cbnz	r2, 8012f6a <_strtoul_l.isra.0+0xd2>
 8012f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f60:	b107      	cbz	r7, 8012f64 <_strtoul_l.isra.0+0xcc>
 8012f62:	4240      	negs	r0, r0
 8012f64:	2a00      	cmp	r2, #0
 8012f66:	d0f9      	beq.n	8012f5c <_strtoul_l.isra.0+0xc4>
 8012f68:	b106      	cbz	r6, 8012f6c <_strtoul_l.isra.0+0xd4>
 8012f6a:	1e69      	subs	r1, r5, #1
 8012f6c:	6011      	str	r1, [r2, #0]
 8012f6e:	e7f5      	b.n	8012f5c <_strtoul_l.isra.0+0xc4>
 8012f70:	08013453 	.word	0x08013453

08012f74 <_strtoul_r>:
 8012f74:	f7ff bf90 	b.w	8012e98 <_strtoul_l.isra.0>

08012f78 <_malloc_usable_size_r>:
 8012f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f7c:	1f18      	subs	r0, r3, #4
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	bfbc      	itt	lt
 8012f82:	580b      	ldrlt	r3, [r1, r0]
 8012f84:	18c0      	addlt	r0, r0, r3
 8012f86:	4770      	bx	lr

08012f88 <_init>:
 8012f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f8a:	bf00      	nop
 8012f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f8e:	bc08      	pop	{r3}
 8012f90:	469e      	mov	lr, r3
 8012f92:	4770      	bx	lr

08012f94 <_fini>:
 8012f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f96:	bf00      	nop
 8012f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f9a:	bc08      	pop	{r3}
 8012f9c:	469e      	mov	lr, r3
 8012f9e:	4770      	bx	lr
