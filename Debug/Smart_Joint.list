
Smart_Joint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e98  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  08017028  08017028  00018028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080177d0  080177d0  000191ec  2**0
                  CONTENTS
  4 .ARM          00000008  080177d0  080177d0  000187d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080177d8  080177d8  000191ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080177d8  080177d8  000187d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080177dc  080177dc  000187dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080177e0  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c64  200001f0  080179cc  000191f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005e54  080179cc  00019e54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000191ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039ca4  00000000  00000000  0001921c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000675b  00000000  00000000  00052ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e38  00000000  00000000  00059620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002418  00000000  00000000  0005c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003110e  00000000  00000000  0005e870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037be9  00000000  00000000  0008f97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012498d  00000000  00000000  000c7567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ebef4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d08c  00000000  00000000  001ebf38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001f8fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017010 	.word	0x08017010

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08017010 	.word	0x08017010

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif /* USART_PRESC_PRESCALER */
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
  {
    /* Can Not divide per 0 */
  }
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
#else
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000dbc:	d11a      	bne.n	8000df4 <LL_USART_SetBaudRate+0x4c>
#endif /* USART_PRESC_PRESCALER */
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	005a      	lsls	r2, r3, #1
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	085b      	lsrs	r3, r3, #1
 8000dc6:	441a      	add	r2, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
    brrtemp = usartdiv & 0xFFF0U;
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	085b      	lsrs	r3, r3, #1
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif /* USART_PRESC_PRESCALER */
  }
}
 8000df2:	e00a      	b.n	8000e0a <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	085a      	lsrs	r2, r3, #1
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	441a      	add	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	60da      	str	r2, [r3, #12]
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <Temp_Sensor_Init>:
#include "stm32l4xx_ll_usart.h"


/*------INIZIALIZZAZIONE SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Init(void)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 8000e1e:	23f0      	movs	r3, #240	@ 0xf0
 8000e20:	71fb      	strb	r3, [r7, #7]

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 9600);
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e24:	681c      	ldr	r4, [r3, #0]
 8000e26:	f00f f9a1 	bl	801016c <HAL_RCC_GetPCLK2Freq>
 8000e2a:	4601      	mov	r1, r0
 8000e2c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000e30:	2200      	movs	r2, #0
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff ffb8 	bl	8000da8 <LL_USART_SetBaudRate>

	HAL_UART_Transmit(TEMP_UART, &data, 1, 100);  // low for 500+us
 8000e38:	1df9      	adds	r1, r7, #7
 8000e3a:	2364      	movs	r3, #100	@ 0x64
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e40:	f013 fc6e 	bl	8014720 <HAL_UART_Transmit>
	if (HAL_UART_Receive(TEMP_UART, &data, 1, 1000) != HAL_OK)
 8000e44:	1df9      	adds	r1, r7, #7
 8000e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e4e:	f013 fcf0 	bl	8014832 <HAL_UART_Receive>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <Temp_Sensor_Init+0x44>
		while(1);
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <Temp_Sensor_Init+0x40>

	LL_USART_SetBaudRate(huart4.Instance, HAL_RCC_GetPCLK2Freq(), UART_OVERSAMPLING_16, 115200);
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <Temp_Sensor_Init+0x74>)
 8000e5e:	681c      	ldr	r4, [r3, #0]
 8000e60:	f00f f984 	bl	801016c <HAL_RCC_GetPCLK2Freq>
 8000e64:	4601      	mov	r1, r0
 8000e66:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff ff9b 	bl	8000da8 <LL_USART_SetBaudRate>

	if (data == 0xF0)
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2bf0      	cmp	r3, #240	@ 0xf0
 8000e76:	d101      	bne.n	8000e7c <Temp_Sensor_Init+0x64>
		while(1);
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Temp_Sensor_Init+0x60>

	Temp_Sensor_Write(0xCC);  // skip ROM
 8000e7c:	20cc      	movs	r0, #204	@ 0xcc
 8000e7e:	f000 f807 	bl	8000e90 <Temp_Sensor_Write>
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd90      	pop	{r4, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000059c 	.word	0x2000059c

08000e90 <Temp_Sensor_Write>:

/*------SCRITTURA SU SENSORE DI TEMPERATURA------*/
void Temp_Sensor_Write(uint8_t data)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];

	for (int i=0; i<8; i++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	e017      	b.n	8000ed0 <Temp_Sensor_Write+0x40>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa42 f303 	asr.w	r3, r2, r3
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <Temp_Sensor_Write+0x2e>
		{
			buffer[i] = 0xFF;  // write 1
 8000eb0:	f107 020c 	add.w	r2, r7, #12
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	22ff      	movs	r2, #255	@ 0xff
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e005      	b.n	8000eca <Temp_Sensor_Write+0x3a>
		}
		else  // if the bit is low
		{
			buffer[i] = 0;  // write 0
 8000ebe:	f107 020c 	add.w	r2, r7, #12
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	dde4      	ble.n	8000ea0 <Temp_Sensor_Write+0x10>
		}
	}

	HAL_UART_Transmit(TEMP_UART, buffer, 8, 100);
 8000ed6:	f107 010c 	add.w	r1, r7, #12
 8000eda:	2364      	movs	r3, #100	@ 0x64
 8000edc:	2208      	movs	r2, #8
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <Temp_Sensor_Write+0x5c>)
 8000ee0:	f013 fc1e 	bl	8014720 <HAL_UART_Transmit>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000059c 	.word	0x2000059c

08000ef0 <Temp_Sensor_ReadByte>:

/*------LETTURA BYTE DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadByte(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	e00e      	b.n	8000f1e <Temp_Sensor_ReadByte+0x2e>
	{
		RxByte >>= 1;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	71fb      	strb	r3, [r7, #7]
		if (Temp_Sensor_ReadBit())
 8000f06:	f000 f813 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <Temp_Sensor_ReadByte+0x28>
		{
			RxByte |= 0x80;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f16:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	71bb      	strb	r3, [r7, #6]
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	d9ed      	bls.n	8000f00 <Temp_Sensor_ReadByte+0x10>
		}
	}
	return RxByte;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <Temp_Sensor_ReadBit>:

/*------LETTURA BIT DA SENSORE DI TEMPERATURA------*/
uint8_t Temp_Sensor_ReadBit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 8000f36:	23ff      	movs	r3, #255	@ 0xff
 8000f38:	71fb      	strb	r3, [r7, #7]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 8000f3a:	1df9      	adds	r1, r7, #7
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f42:	f013 fbed 	bl	8014720 <HAL_UART_Transmit>
    // Receive The Bit
    HAL_UART_Receive(&huart1, &RxBit, 1, 1);
 8000f46:	1db9      	adds	r1, r7, #6
 8000f48:	2301      	movs	r3, #1
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <Temp_Sensor_ReadBit+0x34>)
 8000f4e:	f013 fc70 	bl	8014832 <HAL_UART_Receive>

    return (RxBit & 0x01);
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000624 	.word	0x20000624

08000f68 <Read_Temperature>:

/*------LETTURA TEMPERATURA------*/
uint16_t Read_Temperature(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_MSB = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]
	uint16_t Temp = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	80bb      	strh	r3, [r7, #4]
	
	Temp_Sensor_Init();
 8000f7a:	f7ff ff4d 	bl	8000e18 <Temp_Sensor_Init>
	Temp_Sensor_Write(0xCC);  // skip ROM
 8000f7e:	20cc      	movs	r0, #204	@ 0xcc
 8000f80:	f7ff ff86 	bl	8000e90 <Temp_Sensor_Write>

	uint8_t status = Temp_Sensor_ReadBit();
 8000f84:	f7ff ffd4 	bl	8000f30 <Temp_Sensor_ReadBit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	70fb      	strb	r3, [r7, #3]

	if (status) 
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01d      	beq.n	8000fce <Read_Temperature+0x66>
	{
		Temp_Sensor_Write(0xBE);  // read Scratch-pad
 8000f92:	20be      	movs	r0, #190	@ 0xbe
 8000f94:	f7ff ff7c 	bl	8000e90 <Temp_Sensor_Write>
		Temp_LSB = Temp_Sensor_ReadByte();
 8000f98:	f7ff ffaa 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
	    Temp_MSB = Temp_Sensor_ReadByte();
 8000fa0:	f7ff ffa6 	bl	8000ef0 <Temp_Sensor_ReadByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71bb      	strb	r3, [r7, #6]
		Temp_Sensor_Init();
 8000fa8:	f7ff ff36 	bl	8000e18 <Temp_Sensor_Init>
		Temp_Sensor_Write(0xCC);  // skip ROM
 8000fac:	20cc      	movs	r0, #204	@ 0xcc
 8000fae:	f7ff ff6f 	bl	8000e90 <Temp_Sensor_Write>
		Temp_Sensor_Write(0x44);  // convert t
 8000fb2:	2044      	movs	r0, #68	@ 0x44
 8000fb4:	f7ff ff6c 	bl	8000e90 <Temp_Sensor_Write>
		Temp = ((Temp_MSB << 8)) | Temp_LSB;
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	80bb      	strh	r3, [r7, #4]
		return Temp;
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	e000      	b.n	8000fd0 <Read_Temperature+0x68>
	}
	
	return 0; 
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <INA3221_Init>:
#include "INA3221.h"
#include "INA3221_reg.h"
#include "peripherals.h"

void INA3221_Init()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint16_t rcheck = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	80fb      	strh	r3, [r7, #6]

	INA3221_write_reg(INA3221_REG_CONFIG, 0x8000);   //RESET
 8000fe2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f87a 	bl	80010e0 <INA3221_write_reg>

	HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	@ 0x64
 8000fee:	f009 fe9b 	bl	800ad28 <HAL_Delay>

	INA3221_read_reg(INA3221_REG_MID, &rcheck);
 8000ff2:	1dbb      	adds	r3, r7, #6
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	20fe      	movs	r0, #254	@ 0xfe
 8000ff8:	f000 f83c 	bl	8001074 <INA3221_read_reg>

	if(rcheck != INA3221_DEFAULT_MID)
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	f245 4249 	movw	r2, #21577	@ 0x5449
 8001002:	4293      	cmp	r3, r2
 8001004:	d001      	beq.n	800100a <INA3221_Init+0x32>
		while(1);
 8001006:	bf00      	nop
 8001008:	e7fd      	b.n	8001006 <INA3221_Init+0x2e>

	INA3221_write_reg(INA3221_REG_CONFIG, 0x7D27);   //CH1 CH2 CH3 Enabled, 512 AVG, 1.1ms conv time, continous mode
 800100a:	f647 5127 	movw	r1, #32039	@ 0x7d27
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f866 	bl	80010e0 <INA3221_write_reg>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <INA3221_Read_Measure>:

void INA3221_Read_Measure(supply_bus_t *measure)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_1, (uint16_t *)&(measure->v1));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4619      	mov	r1, r3
 8001028:	2002      	movs	r0, #2
 800102a:	f000 f823 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_2, (uint16_t *)&(measure->v2));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3302      	adds	r3, #2
 8001032:	4619      	mov	r1, r3
 8001034:	2004      	movs	r0, #4
 8001036:	f000 f81d 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_BUSVOLTAGE_3, (uint16_t *)&(measure->v3));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3304      	adds	r3, #4
 800103e:	4619      	mov	r1, r3
 8001040:	2006      	movs	r0, #6
 8001042:	f000 f817 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_1, (uint16_t *)&(measure->i1));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3306      	adds	r3, #6
 800104a:	4619      	mov	r1, r3
 800104c:	2001      	movs	r0, #1
 800104e:	f000 f811 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_2, (uint16_t *)&(measure->i2));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3308      	adds	r3, #8
 8001056:	4619      	mov	r1, r3
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f80b 	bl	8001074 <INA3221_read_reg>
	INA3221_read_reg(INA3221_REG_SHUNTVOLTAGE_3, (uint16_t *)&(measure->i3));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	330a      	adds	r3, #10
 8001062:	4619      	mov	r1, r3
 8001064:	2005      	movs	r0, #5
 8001066:	f000 f805 	bl	8001074 <INA3221_read_reg>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <INA3221_read_reg>:


int INA3221_read_reg(uint8_t reg, uint16_t *rdata)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af02      	add	r7, sp, #8
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 8001086:	2300      	movs	r3, #0
 8001088:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, &reg, 1, 100) == HAL_OK)
 800108a:	1dfa      	adds	r2, r7, #7
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	2180      	movs	r1, #128	@ 0x80
 8001094:	4811      	ldr	r0, [pc, #68]	@ (80010dc <INA3221_read_reg+0x68>)
 8001096:	f00d f8cd 	bl	800e234 <HAL_I2C_Master_Transmit>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d118      	bne.n	80010d2 <INA3221_read_reg+0x5e>
	{

		if(HAL_I2C_Master_Receive(I2C,  INA3221_ADDR_0 << 1, data, 2, 100) == HAL_OK)
 80010a0:	f107 0208 	add.w	r2, r7, #8
 80010a4:	2364      	movs	r3, #100	@ 0x64
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2302      	movs	r3, #2
 80010aa:	2180      	movs	r1, #128	@ 0x80
 80010ac:	480b      	ldr	r0, [pc, #44]	@ (80010dc <INA3221_read_reg+0x68>)
 80010ae:	f00d f9d9 	bl	800e464 <HAL_I2C_Master_Receive>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10c      	bne.n	80010d2 <INA3221_read_reg+0x5e>
		{
			result = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80010bc:	7a3b      	ldrb	r3, [r7, #8]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	7a7b      	ldrb	r3, [r7, #9]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200002e8 	.word	0x200002e8

080010e0 <INA3221_write_reg>:


int INA3221_write_reg(uint8_t reg, uint16_t wdata)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	80bb      	strh	r3, [r7, #4]
    int result = -1;
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	60fb      	str	r3, [r7, #12]
    uint8_t data[3];
    
    data[0] = reg;                    
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	723b      	strb	r3, [r7, #8]
    data[1] = (wdata >> 8);          
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	b29b      	uxth	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	727b      	strb	r3, [r7, #9]
    data[2] = (wdata & 0xFF);        
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	72bb      	strb	r3, [r7, #10]

    if(HAL_I2C_Master_Transmit(I2C, INA3221_ADDR_0 << 1, data, 3, 100) == HAL_OK)
 800110a:	f107 0208 	add.w	r2, r7, #8
 800110e:	2364      	movs	r3, #100	@ 0x64
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2303      	movs	r3, #3
 8001114:	2180      	movs	r1, #128	@ 0x80
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <INA3221_write_reg+0x50>)
 8001118:	f00d f88c 	bl	800e234 <HAL_I2C_Master_Transmit>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <INA3221_write_reg+0x46>
    {
        result = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
    }
    
    return result;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200002e8 	.word	0x200002e8

08001134 <RTC_Init>:
#include "RTC.h"


/*-----INIZiALIZZAZIONE ORA RTC-----*/
void RTC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	for (int retry = 0; retry < 3; retry++)
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	e00b      	b.n	8001158 <RTC_Init+0x24>
	{
		if (Get_DateTime_From_Network())
 8001140:	f000 f814 	bl	800116c <Get_DateTime_From_Network>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10c      	bne.n	8001164 <RTC_Init+0x30>
		{
			return;
		}
		HAL_Delay(1000);
 800114a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800114e:	f009 fdeb 	bl	800ad28 <HAL_Delay>
	for (int retry = 0; retry < 3; retry++)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3301      	adds	r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b02      	cmp	r3, #2
 800115c:	ddf0      	ble.n	8001140 <RTC_Init+0xc>
	}
	Set_Default_DateTime();
 800115e:	f000 f903 	bl	8001368 <Set_Default_DateTime>
 8001162:	e000      	b.n	8001166 <RTC_Init+0x32>
			return;
 8001164:	bf00      	nop
}
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Get_DateTime_From_Network>:

/*-----SINCRONIZZAZIONE RTC DA RETE-----*/
int Get_DateTime_From_Network(void)
{
 800116c:	b5b0      	push	{r4, r5, r7, lr}
 800116e:	b0a2      	sub	sp, #136	@ 0x88
 8001170:	af00      	add	r7, sp, #0
	char response[100] = {0};
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	2264      	movs	r2, #100	@ 0x64
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f014 fe78 	bl	8015e70 <memset>
	RTC_DateTypeDef sDate = {0};
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
	RTC_TimeTypeDef sTime = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

	SIM_Send_Command("AT+CCLK?\r");
 8001192:	4871      	ldr	r0, [pc, #452]	@ (8001358 <Get_DateTime_From_Network+0x1ec>)
 8001194:	f000 fc4c 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fc73 	bl	8001a88 <SIM_Receive_Response>

    char* cclk_pos = strstr(response, "+CCLK: \"");
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	496d      	ldr	r1, [pc, #436]	@ (800135c <Get_DateTime_From_Network+0x1f0>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f014 fe9b 	bl	8015ee4 <strstr>
 80011ae:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (cclk_pos == NULL)
 80011b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <Get_DateTime_From_Network+0x52>
	{
        return 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e0c8      	b.n	8001350 <Get_DateTime_From_Network+0x1e4>
    }

    char* time_start = cclk_pos + 8;
 80011be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011c2:	3308      	adds	r3, #8
 80011c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    if (strlen(time_start) < 17)
 80011c8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80011cc:	f7ff f80a 	bl	80001e4 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b10      	cmp	r3, #16
 80011d4:	d801      	bhi.n	80011da <Get_DateTime_From_Network+0x6e>
	{
		return 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e0ba      	b.n	8001350 <Get_DateTime_From_Network+0x1e4>
	}

	sDate.Year = (time_start[0] - '0') * 10 + (time_start[1] - '0');
 80011da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	3b30      	subs	r3, #48	@ 0x30
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80011f2:	3301      	adds	r3, #1
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	3b30      	subs	r3, #48	@ 0x30
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	76fb      	strb	r3, [r7, #27]
	sDate.Month = (time_start[3] - '0') * 10 + (time_start[4] - '0');
 8001200:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001204:	3303      	adds	r3, #3
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	3b30      	subs	r3, #48	@ 0x30
 800120a:	b2db      	uxtb	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4413      	add	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	b2da      	uxtb	r2, r3
 8001216:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800121a:	3304      	adds	r3, #4
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	3b30      	subs	r3, #48	@ 0x30
 8001224:	b2db      	uxtb	r3, r3
 8001226:	767b      	strb	r3, [r7, #25]
	sDate.Date = (time_start[6] - '0') * 10 + (time_start[7] - '0');
 8001228:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800122c:	3306      	adds	r3, #6
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	3b30      	subs	r3, #48	@ 0x30
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4413      	add	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001242:	3307      	adds	r3, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	b2db      	uxtb	r3, r3
 800124a:	3b30      	subs	r3, #48	@ 0x30
 800124c:	b2db      	uxtb	r3, r3
 800124e:	76bb      	strb	r3, [r7, #26]

	sTime.Hours = (time_start[9] - '0') * 10 + (time_start[10] - '0');
 8001250:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001254:	3309      	adds	r3, #9
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	3b30      	subs	r3, #48	@ 0x30
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800126a:	330a      	adds	r3, #10
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3b30      	subs	r3, #48	@ 0x30
 8001274:	b2db      	uxtb	r3, r3
 8001276:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = (time_start[12] - '0') * 10 + (time_start[13] - '0');
 8001278:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800127c:	330c      	adds	r3, #12
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	3b30      	subs	r3, #48	@ 0x30
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4413      	add	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001292:	330d      	adds	r3, #13
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	b2db      	uxtb	r3, r3
 800129a:	3b30      	subs	r3, #48	@ 0x30
 800129c:	b2db      	uxtb	r3, r3
 800129e:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = (time_start[15] - '0') * 10 + (time_start[16] - '0');
 80012a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012a4:	330f      	adds	r3, #15
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	3b30      	subs	r3, #48	@ 0x30
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	461a      	mov	r2, r3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012ba:	3310      	adds	r3, #16
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	3b30      	subs	r3, #48	@ 0x30
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	71bb      	strb	r3, [r7, #6]

	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012c8:	7e7b      	ldrb	r3, [r7, #25]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d011      	beq.n	80012f2 <Get_DateTime_From_Network+0x186>
 80012ce:	7e7b      	ldrb	r3, [r7, #25]
 80012d0:	2b0c      	cmp	r3, #12
 80012d2:	d80e      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012d4:	7ebb      	ldrb	r3, [r7, #26]
	if (sDate.Month < 1 || sDate.Month > 12 ||
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <Get_DateTime_From_Network+0x186>
        sDate.Date < 1 || sDate.Date > 31 ||
 80012da:	7ebb      	ldrb	r3, [r7, #26]
 80012dc:	2b1f      	cmp	r3, #31
 80012de:	d808      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012e0:	793b      	ldrb	r3, [r7, #4]
        sDate.Date < 1 || sDate.Date > 31 ||
 80012e2:	2b17      	cmp	r3, #23
 80012e4:	d805      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
        sTime.Hours > 23 || sTime.Minutes > 59 || sTime.Seconds > 59) {
 80012e6:	797b      	ldrb	r3, [r7, #5]
 80012e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80012ea:	d802      	bhi.n	80012f2 <Get_DateTime_From_Network+0x186>
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	2b3b      	cmp	r3, #59	@ 0x3b
 80012f0:	d901      	bls.n	80012f6 <Get_DateTime_From_Network+0x18a>
        return 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e02c      	b.n	8001350 <Get_DateTime_From_Network+0x1e4>
    }

	sDate.WeekDay = Calculate_Weekday(sDate.Year + 2000, sDate.Month, sDate.Date);
 80012f6:	7efb      	ldrb	r3, [r7, #27]
 80012f8:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	7e79      	ldrb	r1, [r7, #25]
 8001300:	7eba      	ldrb	r2, [r7, #26]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f874 	bl	80013f0 <Calculate_Weekday>
 8001308:	4603      	mov	r3, r0
 800130a:	763b      	strb	r3, [r7, #24]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	4810      	ldr	r0, [pc, #64]	@ (8001360 <Get_DateTime_From_Network+0x1f4>)
 800131e:	f00f fdd8 	bl	8010ed2 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	480d      	ldr	r0, [pc, #52]	@ (8001360 <Get_DateTime_From_Network+0x1f4>)
 800132a:	f00f fcd9 	bl	8010ce0 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 800132e:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <Get_DateTime_From_Network+0x1f8>)
 8001330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001334:	461a      	mov	r2, r3
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <Get_DateTime_From_Network+0x1f8>)
 800133c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001340:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 8001344:	1d3d      	adds	r5, r7, #4
 8001346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800134a:	682b      	ldr	r3, [r5, #0]
 800134c:	6023      	str	r3, [r4, #0]
    
	return 1;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3788      	adds	r7, #136	@ 0x88
 8001354:	46bd      	mov	sp, r7
 8001356:	bdb0      	pop	{r4, r5, r7, pc}
 8001358:	08017028 	.word	0x08017028
 800135c:	08017034 	.word	0x08017034
 8001360:	20000380 	.word	0x20000380
 8001364:	20000740 	.word	0x20000740

08001368 <Set_Default_DateTime>:

/*-----DATA E ORA DI DEFAULT 1/1/2020 00:00:00-----*/
void Set_Default_DateTime(void)
{
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
    RTC_DateTypeDef sDate = {0};
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
    RTC_TimeTypeDef sTime = {0};
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

    // Default: 01/01/2020 00:00:00
    sDate.Year = 20;  // 2020
 8001380:	2314      	movs	r3, #20
 8001382:	75fb      	strb	r3, [r7, #23]
    sDate.Month = RTC_MONTH_JANUARY;
 8001384:	2301      	movs	r3, #1
 8001386:	757b      	strb	r3, [r7, #21]
    sDate.Date = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	75bb      	strb	r3, [r7, #22]
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; // 1 Jan 2020 era mercoledì
 800138c:	2303      	movs	r3, #3
 800138e:	753b      	strb	r3, [r7, #20]

    sTime.Hours = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	703b      	strb	r3, [r7, #0]
    sTime.Minutes = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	707b      	strb	r3, [r7, #1]
    sTime.Seconds = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	70bb      	strb	r3, [r7, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]

    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	480e      	ldr	r0, [pc, #56]	@ (80013e8 <Set_Default_DateTime+0x80>)
 80013ae:	f00f fd90 	bl	8010ed2 <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	480b      	ldr	r0, [pc, #44]	@ (80013e8 <Set_Default_DateTime+0x80>)
 80013ba:	f00f fc91 	bl	8010ce0 <HAL_RTC_SetTime>

    sys.onDate = sDate;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <Set_Default_DateTime+0x84>)
 80013c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013c4:	461a      	mov	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
    sys.onTime = sTime;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <Set_Default_DateTime+0x84>)
 80013cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013d0:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 80013d4:	463d      	mov	r5, r7
 80013d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013da:	682b      	ldr	r3, [r5, #0]
 80013dc:	6023      	str	r3, [r4, #0]
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bdb0      	pop	{r4, r5, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000380 	.word	0x20000380
 80013ec:	20000740 	.word	0x20000740

080013f0 <Calculate_Weekday>:

/*-----CALCOLO GIORNO SETTIMANA-----*/
uint8_t Calculate_Weekday(uint16_t year, uint8_t month, uint8_t day)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
 80013fa:	460b      	mov	r3, r1
 80013fc:	717b      	strb	r3, [r7, #5]
 80013fe:	4613      	mov	r3, r2
 8001400:	713b      	strb	r3, [r7, #4]
    // Algoritmo di Zeller per calcolo giorno settimana
    if (month < 3) {
 8001402:	797b      	ldrb	r3, [r7, #5]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d805      	bhi.n	8001414 <Calculate_Weekday+0x24>
        month += 12;
 8001408:	797b      	ldrb	r3, [r7, #5]
 800140a:	330c      	adds	r3, #12
 800140c:	717b      	strb	r3, [r7, #5]
        year--;
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	3b01      	subs	r3, #1
 8001412:	80fb      	strh	r3, [r7, #6]
    }
    uint8_t zeller_day = (day + ((13 * (month + 1)) / 5) + year + (year / 4) - (year / 100) + (year / 400)) % 7;
 8001414:	7939      	ldrb	r1, [r7, #4]
 8001416:	797b      	ldrb	r3, [r7, #5]
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	4a1e      	ldr	r2, [pc, #120]	@ (80014a0 <Calculate_Weekday+0xb0>)
 8001426:	fb82 0203 	smull	r0, r2, r2, r3
 800142a:	1052      	asrs	r2, r2, #1
 800142c:	17db      	asrs	r3, r3, #31
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	18ca      	adds	r2, r1, r3
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	4413      	add	r3, r2
 8001436:	88fa      	ldrh	r2, [r7, #6]
 8001438:	0892      	lsrs	r2, r2, #2
 800143a:	b292      	uxth	r2, r2
 800143c:	4413      	add	r3, r2
 800143e:	88fa      	ldrh	r2, [r7, #6]
 8001440:	4918      	ldr	r1, [pc, #96]	@ (80014a4 <Calculate_Weekday+0xb4>)
 8001442:	fba1 1202 	umull	r1, r2, r1, r2
 8001446:	0952      	lsrs	r2, r2, #5
 8001448:	b292      	uxth	r2, r2
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	88fa      	ldrh	r2, [r7, #6]
 800144e:	4915      	ldr	r1, [pc, #84]	@ (80014a4 <Calculate_Weekday+0xb4>)
 8001450:	fba1 1202 	umull	r1, r2, r1, r2
 8001454:	09d2      	lsrs	r2, r2, #7
 8001456:	b292      	uxth	r2, r2
 8001458:	441a      	add	r2, r3
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <Calculate_Weekday+0xb8>)
 800145c:	fb83 1302 	smull	r1, r3, r3, r2
 8001460:	4413      	add	r3, r2
 8001462:	1099      	asrs	r1, r3, #2
 8001464:	17d3      	asrs	r3, r2, #31
 8001466:	1ac9      	subs	r1, r1, r3
 8001468:	460b      	mov	r3, r1
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	1a5b      	subs	r3, r3, r1
 800146e:	1ad1      	subs	r1, r2, r3
 8001470:	460b      	mov	r3, r1
 8001472:	73fb      	strb	r3, [r7, #15]

    uint8_t hal_weekday_map[] = {RTC_WEEKDAY_SATURDAY, RTC_WEEKDAY_SUNDAY, RTC_WEEKDAY_MONDAY,
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <Calculate_Weekday+0xbc>)
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800147e:	6018      	str	r0, [r3, #0]
 8001480:	3304      	adds	r3, #4
 8001482:	8019      	strh	r1, [r3, #0]
 8001484:	3302      	adds	r3, #2
 8001486:	0c0a      	lsrs	r2, r1, #16
 8001488:	701a      	strb	r2, [r3, #0]
                                 RTC_WEEKDAY_TUESDAY, RTC_WEEKDAY_WEDNESDAY, RTC_WEEKDAY_THURSDAY, RTC_WEEKDAY_FRIDAY};

    return hal_weekday_map[zeller_day];
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	3310      	adds	r3, #16
 800148e:	443b      	add	r3, r7
 8001490:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	66666667 	.word	0x66666667
 80014a4:	51eb851f 	.word	0x51eb851f
 80014a8:	92492493 	.word	0x92492493
 80014ac:	08017040 	.word	0x08017040

080014b0 <SIM_Init>:
#include "process.h"
#include "leds.h"

/*------INIZIALIZZAZIONE DEL MODULO LTE------*/
int SIM_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80014b6:	af00      	add	r7, sp, #0
	char command[256];
	char response[256];
	sprintf(sys.apn, "a");
 80014b8:	49bb      	ldr	r1, [pc, #748]	@ (80017a8 <SIM_Init+0x2f8>)
 80014ba:	48bc      	ldr	r0, [pc, #752]	@ (80017ac <SIM_Init+0x2fc>)
 80014bc:	f014 fc78 	bl	8015db0 <siprintf>
	sprintf(sys.MQTT.clientID, "a");
 80014c0:	49b9      	ldr	r1, [pc, #740]	@ (80017a8 <SIM_Init+0x2f8>)
 80014c2:	48bb      	ldr	r0, [pc, #748]	@ (80017b0 <SIM_Init+0x300>)
 80014c4:	f014 fc74 	bl	8015db0 <siprintf>
	sprintf(sys.MQTT.server_name, "a");
 80014c8:	49b7      	ldr	r1, [pc, #732]	@ (80017a8 <SIM_Init+0x2f8>)
 80014ca:	48ba      	ldr	r0, [pc, #744]	@ (80017b4 <SIM_Init+0x304>)
 80014cc:	f014 fc70 	bl	8015db0 <siprintf>
	sprintf(sys.MQTT.port, "a");
 80014d0:	49b5      	ldr	r1, [pc, #724]	@ (80017a8 <SIM_Init+0x2f8>)
 80014d2:	48b9      	ldr	r0, [pc, #740]	@ (80017b8 <SIM_Init+0x308>)
 80014d4:	f014 fc6c 	bl	8015db0 <siprintf>
	sprintf(sys.MQTT.username, "a");
 80014d8:	49b3      	ldr	r1, [pc, #716]	@ (80017a8 <SIM_Init+0x2f8>)
 80014da:	48b8      	ldr	r0, [pc, #736]	@ (80017bc <SIM_Init+0x30c>)
 80014dc:	f014 fc68 	bl	8015db0 <siprintf>
	sprintf(sys.MQTT.password, "a");
 80014e0:	49b1      	ldr	r1, [pc, #708]	@ (80017a8 <SIM_Init+0x2f8>)
 80014e2:	48b7      	ldr	r0, [pc, #732]	@ (80017c0 <SIM_Init+0x310>)
 80014e4:	f014 fc64 	bl	8015db0 <siprintf>
	sprintf(sys.TCP.IP_address, "a");
 80014e8:	49af      	ldr	r1, [pc, #700]	@ (80017a8 <SIM_Init+0x2f8>)
 80014ea:	48b6      	ldr	r0, [pc, #728]	@ (80017c4 <SIM_Init+0x314>)
 80014ec:	f014 fc60 	bl	8015db0 <siprintf>
	sprintf(sys.TCP.Port, "a");
 80014f0:	49ad      	ldr	r1, [pc, #692]	@ (80017a8 <SIM_Init+0x2f8>)
 80014f2:	48b5      	ldr	r0, [pc, #724]	@ (80017c8 <SIM_Init+0x318>)
 80014f4:	f014 fc5c 	bl	8015db0 <siprintf>
	strcpy(sys.MQTT.Data_Topic, config.data_topic);
 80014f8:	49b4      	ldr	r1, [pc, #720]	@ (80017cc <SIM_Init+0x31c>)
 80014fa:	48b5      	ldr	r0, [pc, #724]	@ (80017d0 <SIM_Init+0x320>)
 80014fc:	f014 fd34 	bl	8015f68 <strcpy>
	strcpy(sys.MQTT.Command_Topic, config.command_topic);
 8001500:	49b4      	ldr	r1, [pc, #720]	@ (80017d4 <SIM_Init+0x324>)
 8001502:	48b5      	ldr	r0, [pc, #724]	@ (80017d8 <SIM_Init+0x328>)
 8001504:	f014 fd30 	bl	8015f68 <strcpy>
	strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8001508:	49b4      	ldr	r1, [pc, #720]	@ (80017dc <SIM_Init+0x32c>)
 800150a:	48b5      	ldr	r0, [pc, #724]	@ (80017e0 <SIM_Init+0x330>)
 800150c:	f014 fd2c 	bl	8015f68 <strcpy>
	strcpy(sys.MQTT.Info_Topic, config.info_topic);
 8001510:	49b4      	ldr	r1, [pc, #720]	@ (80017e4 <SIM_Init+0x334>)
 8001512:	48b5      	ldr	r0, [pc, #724]	@ (80017e8 <SIM_Init+0x338>)
 8001514:	f014 fd28 	bl	8015f68 <strcpy>

	SIM_Power_On();
 8001518:	f000 fa74 	bl	8001a04 <SIM_Power_On>
	HAL_Delay(5000);
 800151c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001520:	f009 fc02 	bl	800ad28 <HAL_Delay>

	SIM_Send_Command("AT\r");                                                                     //Verifica comunicazione
 8001524:	48b1      	ldr	r0, [pc, #708]	@ (80017ec <SIM_Init+0x33c>)
 8001526:	f000 fa83 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800152a:	48b1      	ldr	r0, [pc, #708]	@ (80017f0 <SIM_Init+0x340>)
 800152c:	f000 fec4 	bl	80022b8 <SIM_Wait_Response>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <SIM_Init+0x8c>
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e23c      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+IPR=921600\r");                                                          //Baudrate a 921600
 800153c:	48ad      	ldr	r0, [pc, #692]	@ (80017f4 <SIM_Init+0x344>)
 800153e:	f000 fa77 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001542:	48ab      	ldr	r0, [pc, #684]	@ (80017f0 <SIM_Init+0x340>)
 8001544:	f000 feb8 	bl	80022b8 <SIM_Wait_Response>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <SIM_Init+0xa4>
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	e230      	b.n	80019b6 <SIM_Init+0x506>

	huart1.Init.BaudRate = 921600;
 8001554:	4ba8      	ldr	r3, [pc, #672]	@ (80017f8 <SIM_Init+0x348>)
 8001556:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800155a:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(SIM_UART);
 800155c:	48a6      	ldr	r0, [pc, #664]	@ (80017f8 <SIM_Init+0x348>)
 800155e:	f013 f83b 	bl	80145d8 <HAL_UART_Init>

	SIM_Send_Command("AT+CFUN=1\r");                                                              //Full functionality
 8001562:	48a6      	ldr	r0, [pc, #664]	@ (80017fc <SIM_Init+0x34c>)
 8001564:	f000 fa64 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001568:	48a1      	ldr	r0, [pc, #644]	@ (80017f0 <SIM_Init+0x340>)
 800156a:	f000 fea5 	bl	80022b8 <SIM_Wait_Response>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <SIM_Init+0xca>
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	e21d      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CNMP=38\r");                                                             //Modalità solo LTE o NB-IoT
 800157a:	48a1      	ldr	r0, [pc, #644]	@ (8001800 <SIM_Init+0x350>)
 800157c:	f000 fa58 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001580:	489b      	ldr	r0, [pc, #620]	@ (80017f0 <SIM_Init+0x340>)
 8001582:	f000 fe99 	bl	80022b8 <SIM_Wait_Response>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <SIM_Init+0xe2>
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	e211      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CMNB=2\r");                                                              //NB-IoT
 8001592:	489c      	ldr	r0, [pc, #624]	@ (8001804 <SIM_Init+0x354>)
 8001594:	f000 fa4c 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001598:	4895      	ldr	r0, [pc, #596]	@ (80017f0 <SIM_Init+0x340>)
 800159a:	f000 fe8d 	bl	80022b8 <SIM_Wait_Response>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <SIM_Init+0xfa>
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	e205      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+NBSC=1\r");                                                              //Abilitazione scrambling feature DA VEDERE SE L'OPERATORE LA RICHIEDE
 80015aa:	4897      	ldr	r0, [pc, #604]	@ (8001808 <SIM_Init+0x358>)
 80015ac:	f000 fa40 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80015b0:	488f      	ldr	r0, [pc, #572]	@ (80017f0 <SIM_Init+0x340>)
 80015b2:	f000 fe81 	bl	80022b8 <SIM_Wait_Response>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <SIM_Init+0x112>
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
 80015c0:	e1f9      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CEREG?\r");                                                              //Controllo registrazione alla rete
 80015c2:	4892      	ldr	r0, [pc, #584]	@ (800180c <SIM_Init+0x35c>)
 80015c4:	f000 fa34 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fa5b 	bl	8001a88 <SIM_Receive_Response>
	int stat = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
	int n, stat_value;
	if(strstr(response, "+CEREG: ") != NULL)
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	498c      	ldr	r1, [pc, #560]	@ (8001810 <SIM_Init+0x360>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f014 fc80 	bl	8015ee4 <strstr>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d03a      	beq.n	8001660 <SIM_Init+0x1b0>
	{
		while(stat != 1)
 80015ea:	e035      	b.n	8001658 <SIM_Init+0x1a8>
		{
			if(sscanf(response, "+CEREG: %d,%d", &n, &stat_value) >= 2) 
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	f107 0208 	add.w	r2, r7, #8
 80015f2:	f107 000c 	add.w	r0, r7, #12
 80015f6:	4987      	ldr	r1, [pc, #540]	@ (8001814 <SIM_Init+0x364>)
 80015f8:	f014 fbfc 	bl	8015df4 <siscanf>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b01      	cmp	r3, #1
 8001600:	dd1e      	ble.n	8001640 <SIM_Init+0x190>
			{
				if(stat_value == 1 || stat_value == 5)
 8001602:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001606:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d006      	beq.n	800161e <SIM_Init+0x16e>
 8001610:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001614:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d103      	bne.n	8001626 <SIM_Init+0x176>
			    {
					 stat = 1;
 800161e:	2301      	movs	r3, #1
 8001620:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8001624:	e018      	b.n	8001658 <SIM_Init+0x1a8>
				}
				 else
				{
					SIM_Send_Command("AT+CEREG?\r");
 8001626:	4879      	ldr	r0, [pc, #484]	@ (800180c <SIM_Init+0x35c>)
 8001628:	f000 fa02 	bl	8001a30 <SIM_Send_Command>
					SIM_Receive_Response(response);
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fa29 	bl	8001a88 <SIM_Receive_Response>
					HAL_Delay(1000);
 8001636:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800163a:	f009 fb75 	bl	800ad28 <HAL_Delay>
 800163e:	e00b      	b.n	8001658 <SIM_Init+0x1a8>
				}
			}
			else  
			{
				SIM_Send_Command("AT+CEREG?\r");
 8001640:	4872      	ldr	r0, [pc, #456]	@ (800180c <SIM_Init+0x35c>)
 8001642:	f000 f9f5 	bl	8001a30 <SIM_Send_Command>
				SIM_Receive_Response(response);
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fa1c 	bl	8001a88 <SIM_Receive_Response>
				HAL_Delay(1000);
 8001650:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001654:	f009 fb68 	bl	800ad28 <HAL_Delay>
		while(stat != 1)
 8001658:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800165c:	2b01      	cmp	r3, #1
 800165e:	d1c5      	bne.n	80015ec <SIM_Init+0x13c>
			}
		}

	}

	sprintf(command, "AT+CGDCONT=1,\"IP\",\"%s\"\r", sys.apn);                                    //Configurazione APN
 8001660:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001664:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <SIM_Init+0x2fc>)
 8001666:	496c      	ldr	r1, [pc, #432]	@ (8001818 <SIM_Init+0x368>)
 8001668:	4618      	mov	r0, r3
 800166a:	f014 fba1 	bl	8015db0 <siprintf>
	SIM_Send_Command(command);
 800166e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f9dc 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001678:	485d      	ldr	r0, [pc, #372]	@ (80017f0 <SIM_Init+0x340>)
 800167a:	f000 fe1d 	bl	80022b8 <SIM_Wait_Response>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <SIM_Init+0x1da>
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	e195      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CNACT=1\r");                                                             //Attivazione della rete
 800168a:	4864      	ldr	r0, [pc, #400]	@ (800181c <SIM_Init+0x36c>)
 800168c:	f000 f9d0 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4618      	mov	r0, r3
 8001696:	f000 f9f7 	bl	8001a88 <SIM_Receive_Response>
	if(strstr(response, "+APP PDP: ACTIVE") == NULL)
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	4960      	ldr	r1, [pc, #384]	@ (8001820 <SIM_Init+0x370>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f014 fc1f 	bl	8015ee4 <strstr>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d115      	bne.n	80016d8 <SIM_Init+0x228>
	{
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 80016ac:	e00b      	b.n	80016c6 <SIM_Init+0x216>
		{
			SIM_Send_Command("AT+CNACT=1\r");
 80016ae:	485b      	ldr	r0, [pc, #364]	@ (800181c <SIM_Init+0x36c>)
 80016b0:	f000 f9be 	bl	8001a30 <SIM_Send_Command>
			SIM_Receive_Response(response);
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f9e5 	bl	8001a88 <SIM_Receive_Response>
			HAL_Delay(1000);
 80016be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016c2:	f009 fb31 	bl	800ad28 <HAL_Delay>
		while(strstr(response, "+APP PDP: ACTIVE") == NULL)
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	4955      	ldr	r1, [pc, #340]	@ (8001820 <SIM_Init+0x370>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f014 fc09 	bl	8015ee4 <strstr>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ea      	beq.n	80016ae <SIM_Init+0x1fe>
		}
	}

	SIM_Send_Command("AT+CNACT?\r");                                                              //Verifica indirizzo IP
 80016d8:	4852      	ldr	r0, [pc, #328]	@ (8001824 <SIM_Init+0x374>)
 80016da:	f000 f9a9 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f9d0 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_IP(response))
 80016e8:	e00b      	b.n	8001702 <SIM_Init+0x252>
	{
		SIM_Send_Command("AT+CNACT?\r");
 80016ea:	484e      	ldr	r0, [pc, #312]	@ (8001824 <SIM_Init+0x374>)
 80016ec:	f000 f9a0 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response);
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f9c7 	bl	8001a88 <SIM_Receive_Response>
		HAL_Delay(1000);
 80016fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016fe:	f009 fb13 	bl	800ad28 <HAL_Delay>
	while(!SIM_Check_IP(response))
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f9d8 	bl	8001abc <SIM_Check_IP>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0eb      	beq.n	80016ea <SIM_Init+0x23a>
	}

	sprintf(command, "AT+SMCONF=\"URL\",\"%s\",%s\r", sys.MQTT.server_name, sys.MQTT.port);       //Configurazione MQTT
 8001712:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001716:	4b28      	ldr	r3, [pc, #160]	@ (80017b8 <SIM_Init+0x308>)
 8001718:	4a26      	ldr	r2, [pc, #152]	@ (80017b4 <SIM_Init+0x304>)
 800171a:	4943      	ldr	r1, [pc, #268]	@ (8001828 <SIM_Init+0x378>)
 800171c:	f014 fb48 	bl	8015db0 <siprintf>
	SIM_Send_Command(command);
 8001720:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001724:	4618      	mov	r0, r3
 8001726:	f000 f983 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800172a:	4831      	ldr	r0, [pc, #196]	@ (80017f0 <SIM_Init+0x340>)
 800172c:	f000 fdc4 	bl	80022b8 <SIM_Wait_Response>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <SIM_Init+0x28c>
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	e13c      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+SMCONF=\"CLIENTID\",\"%s\"\r", sys.MQTT.clientID);
 800173c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001740:	4a1b      	ldr	r2, [pc, #108]	@ (80017b0 <SIM_Init+0x300>)
 8001742:	493a      	ldr	r1, [pc, #232]	@ (800182c <SIM_Init+0x37c>)
 8001744:	4618      	mov	r0, r3
 8001746:	f014 fb33 	bl	8015db0 <siprintf>
	SIM_Send_Command(command);
 800174a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f96e 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001754:	4826      	ldr	r0, [pc, #152]	@ (80017f0 <SIM_Init+0x340>)
 8001756:	f000 fdaf 	bl	80022b8 <SIM_Wait_Response>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <SIM_Init+0x2b6>
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
 8001764:	e127      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONF=\"KEEPTIME\",60\r");
 8001766:	4832      	ldr	r0, [pc, #200]	@ (8001830 <SIM_Init+0x380>)
 8001768:	f000 f962 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800176c:	4820      	ldr	r0, [pc, #128]	@ (80017f0 <SIM_Init+0x340>)
 800176e:	f000 fda3 	bl	80022b8 <SIM_Wait_Response>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <SIM_Init+0x2ce>
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	e11b      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+SMCONF=\"USERNAME\",\"%s\"\r", sys.MQTT.username);
 800177e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001782:	4a0e      	ldr	r2, [pc, #56]	@ (80017bc <SIM_Init+0x30c>)
 8001784:	492b      	ldr	r1, [pc, #172]	@ (8001834 <SIM_Init+0x384>)
 8001786:	4618      	mov	r0, r3
 8001788:	f014 fb12 	bl	8015db0 <siprintf>
	SIM_Send_Command(command);
 800178c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001790:	4618      	mov	r0, r3
 8001792:	f000 f94d 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001796:	4816      	ldr	r0, [pc, #88]	@ (80017f0 <SIM_Init+0x340>)
 8001798:	f000 fd8e 	bl	80022b8 <SIM_Wait_Response>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d04a      	beq.n	8001838 <SIM_Init+0x388>
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e106      	b.n	80019b6 <SIM_Init+0x506>
 80017a8:	08017048 	.word	0x08017048
 80017ac:	20001798 	.word	0x20001798
 80017b0:	200019ac 	.word	0x200019ac
 80017b4:	2000181c 	.word	0x2000181c
 80017b8:	20001880 	.word	0x20001880
 80017bc:	200018e4 	.word	0x200018e4
 80017c0:	20001948 	.word	0x20001948
 80017c4:	20001ba0 	.word	0x20001ba0
 80017c8:	20001c04 	.word	0x20001c04
 80017cc:	20001cda 	.word	0x20001cda
 80017d0:	20001a10 	.word	0x20001a10
 80017d4:	20001d1a 	.word	0x20001d1a
 80017d8:	20001a74 	.word	0x20001a74
 80017dc:	20001d5a 	.word	0x20001d5a
 80017e0:	20001ad8 	.word	0x20001ad8
 80017e4:	20001d9a 	.word	0x20001d9a
 80017e8:	20001b3c 	.word	0x20001b3c
 80017ec:	0801704c 	.word	0x0801704c
 80017f0:	08017050 	.word	0x08017050
 80017f4:	08017054 	.word	0x08017054
 80017f8:	20000624 	.word	0x20000624
 80017fc:	08017064 	.word	0x08017064
 8001800:	08017070 	.word	0x08017070
 8001804:	0801707c 	.word	0x0801707c
 8001808:	08017088 	.word	0x08017088
 800180c:	08017094 	.word	0x08017094
 8001810:	080170a0 	.word	0x080170a0
 8001814:	080170ac 	.word	0x080170ac
 8001818:	080170bc 	.word	0x080170bc
 800181c:	080170d4 	.word	0x080170d4
 8001820:	080170e0 	.word	0x080170e0
 8001824:	080170f4 	.word	0x080170f4
 8001828:	08017100 	.word	0x08017100
 800182c:	0801711c 	.word	0x0801711c
 8001830:	08017138 	.word	0x08017138
 8001834:	08017154 	.word	0x08017154

	sprintf(command, "AT+SMCONF=\"PASSWORD\",\"%s\"\r", sys.MQTT.password);
 8001838:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800183c:	4a60      	ldr	r2, [pc, #384]	@ (80019c0 <SIM_Init+0x510>)
 800183e:	4961      	ldr	r1, [pc, #388]	@ (80019c4 <SIM_Init+0x514>)
 8001840:	4618      	mov	r0, r3
 8001842:	f014 fab5 	bl	8015db0 <siprintf>
	SIM_Send_Command(command);
 8001846:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f8f0 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001850:	485d      	ldr	r0, [pc, #372]	@ (80019c8 <SIM_Init+0x518>)
 8001852:	f000 fd31 	bl	80022b8 <SIM_Wait_Response>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <SIM_Init+0x3b2>
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	e0a9      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONF=\"QOS\",1\r");
 8001862:	485a      	ldr	r0, [pc, #360]	@ (80019cc <SIM_Init+0x51c>)
 8001864:	f000 f8e4 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001868:	4857      	ldr	r0, [pc, #348]	@ (80019c8 <SIM_Init+0x518>)
 800186a:	f000 fd25 	bl	80022b8 <SIM_Wait_Response>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <SIM_Init+0x3ca>
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	e09d      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONF=\"RETAIN\",0\r");
 800187a:	4855      	ldr	r0, [pc, #340]	@ (80019d0 <SIM_Init+0x520>)
 800187c:	f000 f8d8 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001880:	4851      	ldr	r0, [pc, #324]	@ (80019c8 <SIM_Init+0x518>)
 8001882:	f000 fd19 	bl	80022b8 <SIM_Wait_Response>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <SIM_Init+0x3e2>
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
 8001890:	e091      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+SMCONF=\"TOPIC\",\"%s\"\r", sys.MQTT.Data_Topic);
 8001892:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001896:	4a4f      	ldr	r2, [pc, #316]	@ (80019d4 <SIM_Init+0x524>)
 8001898:	494f      	ldr	r1, [pc, #316]	@ (80019d8 <SIM_Init+0x528>)
 800189a:	4618      	mov	r0, r3
 800189c:	f014 fa88 	bl	8015db0 <siprintf>
	SIM_Send_Command(command);
 80018a0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f8c3 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80018aa:	4847      	ldr	r0, [pc, #284]	@ (80019c8 <SIM_Init+0x518>)
 80018ac:	f000 fd04 	bl	80022b8 <SIM_Wait_Response>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <SIM_Init+0x40c>
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e07c      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMCONN\r");                                                              //Connessione al broker MQTT
 80018bc:	4847      	ldr	r0, [pc, #284]	@ (80019dc <SIM_Init+0x52c>)
 80018be:	f000 f8b7 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 80018c2:	4841      	ldr	r0, [pc, #260]	@ (80019c8 <SIM_Init+0x518>)
 80018c4:	f000 fcf8 	bl	80022b8 <SIM_Wait_Response>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <SIM_Init+0x424>
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e070      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+SMSTATE?\r");                                                            //Verifica connessione al broker MQTT
 80018d4:	4842      	ldr	r0, [pc, #264]	@ (80019e0 <SIM_Init+0x530>)
 80018d6:	f000 f8ab 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f8d2 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response))
 80018e4:	e00b      	b.n	80018fe <SIM_Init+0x44e>
	{
		SIM_Send_Command("AT+SMSTATE?\r");
 80018e6:	483e      	ldr	r0, [pc, #248]	@ (80019e0 <SIM_Init+0x530>)
 80018e8:	f000 f8a2 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response);
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f8c9 	bl	8001a88 <SIM_Receive_Response>
		HAL_Delay(1000);
 80018f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018fa:	f009 fa15 	bl	800ad28 <HAL_Delay>
	while(!SIM_Check_MQTT_State(response))
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f904 	bl	8001b10 <SIM_Check_MQTT_State>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0eb      	beq.n	80018e6 <SIM_Init+0x436>
	}

	sprintf(command, "AT+SMSUB=\"%s\",1\r", sys.MQTT.Command_Topic);                              //Iscrizione al topic per ricezione comandi dal server
 800190e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001912:	4a34      	ldr	r2, [pc, #208]	@ (80019e4 <SIM_Init+0x534>)
 8001914:	4934      	ldr	r1, [pc, #208]	@ (80019e8 <SIM_Init+0x538>)
 8001916:	4618      	mov	r0, r3
 8001918:	f014 fa4a 	bl	8015db0 <siprintf>
	SIM_Send_Command(command);
 800191c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f885 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 8001926:	4828      	ldr	r0, [pc, #160]	@ (80019c8 <SIM_Init+0x518>)
 8001928:	f000 fcc6 	bl	80022b8 <SIM_Wait_Response>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <SIM_Init+0x488>
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e03e      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CIPRXGET=1\r");                                                         //Impostazione ricezione manuale da server TCP
 8001938:	482c      	ldr	r0, [pc, #176]	@ (80019ec <SIM_Init+0x53c>)
 800193a:	f000 f879 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("OK") != HAL_OK) return -1;
 800193e:	4822      	ldr	r0, [pc, #136]	@ (80019c8 <SIM_Init+0x518>)
 8001940:	f000 fcba 	bl	80022b8 <SIM_Wait_Response>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <SIM_Init+0x4a0>
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e032      	b.n	80019b6 <SIM_Init+0x506>

	sprintf(command, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);        //Connessione TCP
 8001950:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <SIM_Init+0x540>)
 8001956:	4a27      	ldr	r2, [pc, #156]	@ (80019f4 <SIM_Init+0x544>)
 8001958:	4927      	ldr	r1, [pc, #156]	@ (80019f8 <SIM_Init+0x548>)
 800195a:	f014 fa29 	bl	8015db0 <siprintf>
	SIM_Send_Command(command);
 800195e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f864 	bl	8001a30 <SIM_Send_Command>
	if(SIM_Wait_Response("CONNECT OK") != HAL_OK) return -1;
 8001968:	4824      	ldr	r0, [pc, #144]	@ (80019fc <SIM_Init+0x54c>)
 800196a:	f000 fca5 	bl	80022b8 <SIM_Wait_Response>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <SIM_Init+0x4ca>
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
 8001978:	e01d      	b.n	80019b6 <SIM_Init+0x506>

	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        //Verifica connessione al server TCP
 800197a:	4821      	ldr	r0, [pc, #132]	@ (8001a00 <SIM_Init+0x550>)
 800197c:	f000 f858 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f87f 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response))
 800198a:	e00b      	b.n	80019a4 <SIM_Init+0x4f4>
	{
		SIM_Send_Command("AT+CIPSTATUS=0\r");
 800198c:	481c      	ldr	r0, [pc, #112]	@ (8001a00 <SIM_Init+0x550>)
 800198e:	f000 f84f 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response);
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f876 	bl	8001a88 <SIM_Receive_Response>
		HAL_Delay(1000);
 800199c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019a0:	f009 f9c2 	bl	800ad28 <HAL_Delay>
	while(!SIM_Check_TCP_State(response))
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 f8d7 	bl	8001b5c <SIM_Check_TCP_State>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0eb      	beq.n	800198c <SIM_Init+0x4dc>
	}

	return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20001948 	.word	0x20001948
 80019c4:	08017170 	.word	0x08017170
 80019c8:	08017050 	.word	0x08017050
 80019cc:	0801718c 	.word	0x0801718c
 80019d0:	080171a0 	.word	0x080171a0
 80019d4:	20001a10 	.word	0x20001a10
 80019d8:	080171b8 	.word	0x080171b8
 80019dc:	080171d0 	.word	0x080171d0
 80019e0:	080171dc 	.word	0x080171dc
 80019e4:	20001a74 	.word	0x20001a74
 80019e8:	080171ec 	.word	0x080171ec
 80019ec:	08017200 	.word	0x08017200
 80019f0:	20001c04 	.word	0x20001c04
 80019f4:	20001ba0 	.word	0x20001ba0
 80019f8:	08017210 	.word	0x08017210
 80019fc:	0801722c 	.word	0x0801722c
 8001a00:	08017238 	.word	0x08017238

08001a04 <SIM_Power_On>:

/*------ACCENSIONE DEL MODULO LTE------*/
void SIM_Power_On(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a12:	f00c fb5b 	bl	800e0cc <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001a16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a1a:	f009 f985 	bl	800ad28 <HAL_Delay>
	HAL_GPIO_WritePin(LTE_POWER_ON_GPIO_Port, LTE_POWER_ON_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a28:	f00c fb50 	bl	800e0cc <HAL_GPIO_WritePin>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <SIM_Send_Command>:
	HAL_GPIO_WritePin(LTE_RESET_GPIO_Port, LTE_RESET_Pin, GPIO_PIN_RESET);
}

/*------INVIO COMANDO AL MODULO LTE------*/
void SIM_Send_Command(char* command)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7fe fbd3 	bl	80001e4 <strlen>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(SIM_UART, (uint8_t*)command, len, 100);
 8001a42:	89fa      	ldrh	r2, [r7, #14]
 8001a44:	2364      	movs	r3, #100	@ 0x64
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <SIM_Send_Command+0x28>)
 8001a4a:	f012 fe69 	bl	8014720 <HAL_UART_Transmit>
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000624 	.word	0x20000624

08001a5c <SIM_Send_Command_DMA>:

/*------INVIO COMANDO AL MODULO LTE (DMA)------*/
void SIM_Send_Command_DMA(char* command)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen(command);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7fe fbbd 	bl	80001e4 <strlen>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit_DMA(SIM_UART, (uint8_t*)command, len);
 8001a6e:	89fb      	ldrh	r3, [r7, #14]
 8001a70:	461a      	mov	r2, r3
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4803      	ldr	r0, [pc, #12]	@ (8001a84 <SIM_Send_Command_DMA+0x28>)
 8001a76:	f012 ffa5 	bl	80149c4 <HAL_UART_Transmit_DMA>
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000624 	.word	0x20000624

08001a88 <SIM_Receive_Response>:

/*------RICEZIONE RISPOSTA DAL MODULO LTE------*/
uint16_t SIM_Receive_Response(char* response)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	6078      	str	r0, [r7, #4]
	uint16_t max_size = 256;
 8001a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a94:	81fb      	strh	r3, [r7, #14]
	uint16_t RxLen = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	81bb      	strh	r3, [r7, #12]

	HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t *)response, max_size, &RxLen, 1000);
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	89fa      	ldrh	r2, [r7, #14]
 8001aa0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001aa4:	9100      	str	r1, [sp, #0]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <SIM_Receive_Response+0x30>)
 8001aaa:	f013 ffa0 	bl	80159ee <HAL_UARTEx_ReceiveToIdle>
	return RxLen;
 8001aae:	89bb      	ldrh	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000624 	.word	0x20000624

08001abc <SIM_Check_IP>:

/*------CONTROLLO INDIRIZZO IP------*/
int SIM_Check_IP(const char* response)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	char* cnact_pos = strstr(response, "+CNACT:");
 8001ac4:	4910      	ldr	r1, [pc, #64]	@ (8001b08 <SIM_Check_IP+0x4c>)
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f014 fa0c 	bl	8015ee4 <strstr>
 8001acc:	6178      	str	r0, [r7, #20]
    if(cnact_pos != NULL) {
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d014      	beq.n	8001afe <SIM_Check_IP+0x42>
        int context_id, status;
        if(sscanf(cnact_pos, "+CNACT: %d,%d", &context_id, &status) >= 2) {
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	f107 0210 	add.w	r2, r7, #16
 8001adc:	490b      	ldr	r1, [pc, #44]	@ (8001b0c <SIM_Check_IP+0x50>)
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f014 f988 	bl	8015df4 <siscanf>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	dd09      	ble.n	8001afe <SIM_Check_IP+0x42>
            return (context_id == 1 && status == 1) ? 1 : 0;
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d104      	bne.n	8001afa <SIM_Check_IP+0x3e>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <SIM_Check_IP+0x3e>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e002      	b.n	8001b00 <SIM_Check_IP+0x44>
 8001afa:	2300      	movs	r3, #0
 8001afc:	e000      	b.n	8001b00 <SIM_Check_IP+0x44>
        }
    }
    return 0;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	08017248 	.word	0x08017248
 8001b0c:	08017250 	.word	0x08017250

08001b10 <SIM_Check_MQTT_State>:

/*------CONTROLLO STATO CONNESSIONE MQTT------*/
int SIM_Check_MQTT_State(const char* response)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
    char* smstate_pos = strstr(response, "+SMSTATE:");
 8001b18:	490e      	ldr	r1, [pc, #56]	@ (8001b54 <SIM_Check_MQTT_State+0x44>)
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f014 f9e2 	bl	8015ee4 <strstr>
 8001b20:	60f8      	str	r0, [r7, #12]
    if(smstate_pos != NULL) {
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d010      	beq.n	8001b4a <SIM_Check_MQTT_State+0x3a>
        int mqtt_state;
        if(sscanf(smstate_pos, "+SMSTATE: %d", &mqtt_state) >= 1) {
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	490a      	ldr	r1, [pc, #40]	@ (8001b58 <SIM_Check_MQTT_State+0x48>)
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f014 f95f 	bl	8015df4 <siscanf>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	dd06      	ble.n	8001b4a <SIM_Check_MQTT_State+0x3a>
            return (mqtt_state == 1) ? 1 : 0;
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	bf0c      	ite	eq
 8001b42:	2301      	moveq	r3, #1
 8001b44:	2300      	movne	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	e000      	b.n	8001b4c <SIM_Check_MQTT_State+0x3c>
        }
    }
    return 0;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	08017260 	.word	0x08017260
 8001b58:	0801726c 	.word	0x0801726c

08001b5c <SIM_Check_TCP_State>:

/*------CONTROLLO STATO CONNESSIONE TCP------*/
int SIM_Check_TCP_State(const char* response)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    char* cipstatus_pos = strstr(response, "+CIPSTATUS: 0");
 8001b64:	490a      	ldr	r1, [pc, #40]	@ (8001b90 <SIM_Check_TCP_State+0x34>)
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f014 f9bc 	bl	8015ee4 <strstr>
 8001b6c:	60f8      	str	r0, [r7, #12]
    if(cipstatus_pos != NULL) {
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <SIM_Check_TCP_State+0x2a>
        // Cerca "CONNECTED" nella stessa riga
        if(strstr(cipstatus_pos, "CONNECTED") != NULL) {
 8001b74:	4907      	ldr	r1, [pc, #28]	@ (8001b94 <SIM_Check_TCP_State+0x38>)
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f014 f9b4 	bl	8015ee4 <strstr>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SIM_Check_TCP_State+0x2a>
            return 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <SIM_Check_TCP_State+0x2c>
        }
    }
    return 0;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	0801727c 	.word	0x0801727c
 8001b94:	0801728c 	.word	0x0801728c

08001b98 <SIM_Parse_Command>:

/*------PARSING MESSAGGIO MQTT------*/
void SIM_Parse_Command(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
    char* buf = (char*)sim_rx_buffer;
 8001b9e:	4b78      	ldr	r3, [pc, #480]	@ (8001d80 <SIM_Parse_Command+0x1e8>)
 8001ba0:	61fb      	str	r3, [r7, #28]

    if(strncmp(buf, "+SMSUB: ", 8) == 0)
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	4977      	ldr	r1, [pc, #476]	@ (8001d84 <SIM_Parse_Command+0x1ec>)
 8001ba6:	69f8      	ldr	r0, [r7, #28]
 8001ba8:	f014 f977 	bl	8015e9a <strncmp>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 80e1 	bne.w	8001d76 <SIM_Parse_Command+0x1de>
    {
        char* pos = buf + 8;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	61bb      	str	r3, [r7, #24]

        char* first_quote = strchr(pos, '"');
 8001bba:	2122      	movs	r1, #34	@ 0x22
 8001bbc:	69b8      	ldr	r0, [r7, #24]
 8001bbe:	f014 f95f 	bl	8015e80 <strchr>
 8001bc2:	6178      	str	r0, [r7, #20]
        if(first_quote) {
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80d5 	beq.w	8001d76 <SIM_Parse_Command+0x1de>
            char* second_quote = strchr(first_quote + 1, '"');
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	2122      	movs	r1, #34	@ 0x22
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f014 f954 	bl	8015e80 <strchr>
 8001bd8:	6138      	str	r0, [r7, #16]

            if(second_quote) {
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ca 	beq.w	8001d76 <SIM_Parse_Command+0x1de>
                char* third_quote = strchr(second_quote + 1, '"');
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	3301      	adds	r3, #1
 8001be6:	2122      	movs	r1, #34	@ 0x22
 8001be8:	4618      	mov	r0, r3
 8001bea:	f014 f949 	bl	8015e80 <strchr>
 8001bee:	60f8      	str	r0, [r7, #12]

                if(third_quote) {
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80bf 	beq.w	8001d76 <SIM_Parse_Command+0x1de>
                    char* cmd_pos = third_quote + 1;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
                    char* fourth_quote = strchr(cmd_pos, '"');
 8001bfe:	2122      	movs	r1, #34	@ 0x22
 8001c00:	68b8      	ldr	r0, [r7, #8]
 8001c02:	f014 f93d 	bl	8015e80 <strchr>
 8001c06:	6078      	str	r0, [r7, #4]

                    if(fourth_quote && (fourth_quote - cmd_pos) >= 3) {
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80b3 	beq.w	8001d76 <SIM_Parse_Command+0x1de>
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	f340 80ad 	ble.w	8001d76 <SIM_Parse_Command+0x1de>

                        uint32_t cmd_val = (cmd_pos[2] << 16) | (cmd_pos[1] << 8) | cmd_pos[0];
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	3302      	adds	r3, #2
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	041a      	lsls	r2, r3, #16
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	3301      	adds	r3, #1
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	7812      	ldrb	r2, [r2, #0]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	603b      	str	r3, [r7, #0]

                        switch(cmd_val) {
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	4a53      	ldr	r2, [pc, #332]	@ (8001d88 <SIM_Parse_Command+0x1f0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	f000 8093 	beq.w	8001d66 <SIM_Parse_Command+0x1ce>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	4a51      	ldr	r2, [pc, #324]	@ (8001d88 <SIM_Parse_Command+0x1f0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	f200 8091 	bhi.w	8001d6c <SIM_Parse_Command+0x1d4>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d8c <SIM_Parse_Command+0x1f4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d03b      	beq.n	8001cca <SIM_Parse_Command+0x132>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	4a4e      	ldr	r2, [pc, #312]	@ (8001d90 <SIM_Parse_Command+0x1f8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	f080 8088 	bcs.w	8001d6c <SIM_Parse_Command+0x1d4>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d94 <SIM_Parse_Command+0x1fc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d066      	beq.n	8001d32 <SIM_Parse_Command+0x19a>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4a4c      	ldr	r2, [pc, #304]	@ (8001d98 <SIM_Parse_Command+0x200>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d27f      	bcs.n	8001d6c <SIM_Parse_Command+0x1d4>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d9c <SIM_Parse_Command+0x204>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d06b      	beq.n	8001d4c <SIM_Parse_Command+0x1b4>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4a49      	ldr	r2, [pc, #292]	@ (8001d9c <SIM_Parse_Command+0x204>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d877      	bhi.n	8001d6c <SIM_Parse_Command+0x1d4>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	4a48      	ldr	r2, [pc, #288]	@ (8001da0 <SIM_Parse_Command+0x208>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d034      	beq.n	8001cee <SIM_Parse_Command+0x156>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4a46      	ldr	r2, [pc, #280]	@ (8001da0 <SIM_Parse_Command+0x208>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d86f      	bhi.n	8001d6c <SIM_Parse_Command+0x1d4>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4a45      	ldr	r2, [pc, #276]	@ (8001da4 <SIM_Parse_Command+0x20c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d014      	beq.n	8001cbe <SIM_Parse_Command+0x126>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4a43      	ldr	r2, [pc, #268]	@ (8001da4 <SIM_Parse_Command+0x20c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d867      	bhi.n	8001d6c <SIM_Parse_Command+0x1d4>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4a42      	ldr	r2, [pc, #264]	@ (8001da8 <SIM_Parse_Command+0x210>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d018      	beq.n	8001cd6 <SIM_Parse_Command+0x13e>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4a40      	ldr	r2, [pc, #256]	@ (8001da8 <SIM_Parse_Command+0x210>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d85f      	bhi.n	8001d6c <SIM_Parse_Command+0x1d4>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4a3f      	ldr	r2, [pc, #252]	@ (8001dac <SIM_Parse_Command+0x214>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d034      	beq.n	8001d1e <SIM_Parse_Command+0x186>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4a3e      	ldr	r2, [pc, #248]	@ (8001db0 <SIM_Parse_Command+0x218>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d012      	beq.n	8001ce2 <SIM_Parse_Command+0x14a>
								}
							case 0x545352: // RST
								HAL_NVIC_SystemReset();
								break;
							default: 
								break;
 8001cbc:	e056      	b.n	8001d6c <SIM_Parse_Command+0x1d4>
								flags.CMD.Idle = 1; 
 8001cbe:	4a3d      	ldr	r2, [pc, #244]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001cc0:	7893      	ldrb	r3, [r2, #2]
 8001cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc6:	7093      	strb	r3, [r2, #2]
								break;    
 8001cc8:	e055      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								flags.CMD.Start_Meas = 1; 
 8001cca:	4a3a      	ldr	r2, [pc, #232]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001ccc:	7893      	ldrb	r3, [r2, #2]
 8001cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cd2:	7093      	strb	r3, [r2, #2]
								break;
 8001cd4:	e04f      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								flags.CMD.Ping = 1; 
 8001cd6:	4a37      	ldr	r2, [pc, #220]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001cd8:	7893      	ldrb	r3, [r2, #2]
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	7093      	strb	r3, [r2, #2]
								break;
 8001ce0:	e049      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								flags.CMD.Data_Request = 1; 
 8001ce2:	4a34      	ldr	r2, [pc, #208]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001ce4:	7893      	ldrb	r3, [r2, #2]
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	7093      	strb	r3, [r2, #2]
								break;
 8001cec:	e043      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								if(!flags.CMD.Measure_Request)
 8001cee:	4b31      	ldr	r3, [pc, #196]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001cf0:	789b      	ldrb	r3, [r3, #2]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d139      	bne.n	8001d70 <SIM_Parse_Command+0x1d8>
									LED_Start(RED_LED, FAST, LOW);
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2004      	movs	r0, #4
 8001d02:	f001 fc1d 	bl	8003540 <LED_Start>
									Send_Measure_Addr = Saved_Bytes;
 8001d06:	4b2c      	ldr	r3, [pc, #176]	@ (8001db8 <SIM_Parse_Command+0x220>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8001dbc <SIM_Parse_Command+0x224>)
 8001d0c:	6013      	str	r3, [r2, #0]
									flags.CMD.Measure_Request = 1; 
 8001d0e:	4a29      	ldr	r2, [pc, #164]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001d10:	7893      	ldrb	r3, [r2, #2]
 8001d12:	f043 0302 	orr.w	r3, r3, #2
 8001d16:	7093      	strb	r3, [r2, #2]
									Switch_Buffer();
 8001d18:	f003 feee 	bl	8005af8 <Switch_Buffer>
								break;
 8001d1c:	e028      	b.n	8001d70 <SIM_Parse_Command+0x1d8>
								if(state == IDLE)
 8001d1e:	4b28      	ldr	r3, [pc, #160]	@ (8001dc0 <SIM_Parse_Command+0x228>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d126      	bne.n	8001d74 <SIM_Parse_Command+0x1dc>
									flags.CMD.Start_OTA = 1;
 8001d26:	4a23      	ldr	r2, [pc, #140]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001d28:	7893      	ldrb	r3, [r2, #2]
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	7093      	strb	r3, [r2, #2]
								break;
 8001d30:	e020      	b.n	8001d74 <SIM_Parse_Command+0x1dc>
								if(state == IDLE)
 8001d32:	4b23      	ldr	r3, [pc, #140]	@ (8001dc0 <SIM_Parse_Command+0x228>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d108      	bne.n	8001d4c <SIM_Parse_Command+0x1b4>
									flags.CMD.Set_Config = 1;
 8001d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001d3c:	7893      	ldrb	r3, [r2, #2]
 8001d3e:	f043 0310 	orr.w	r3, r3, #16
 8001d42:	7093      	strb	r3, [r2, #2]
									SIM_Parse_Cfg(cmd_pos, fourth_quote);
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	68b8      	ldr	r0, [r7, #8]
 8001d48:	f000 f83c 	bl	8001dc4 <SIM_Parse_Cfg>
								if(state == IDLE)
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc0 <SIM_Parse_Command+0x228>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d108      	bne.n	8001d66 <SIM_Parse_Command+0x1ce>
									flags.CMD.Get_Config = 1;
 8001d54:	4a17      	ldr	r2, [pc, #92]	@ (8001db4 <SIM_Parse_Command+0x21c>)
 8001d56:	7893      	ldrb	r3, [r2, #2]
 8001d58:	f043 0320 	orr.w	r3, r3, #32
 8001d5c:	7093      	strb	r3, [r2, #2]
									SIM_Get_Cfg(cmd_pos, fourth_quote);
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	68b8      	ldr	r0, [r7, #8]
 8001d62:	f000 f8af 	bl	8001ec4 <SIM_Get_Cfg>
								HAL_NVIC_SystemReset();
 8001d66:	f00a fcb8 	bl	800c6da <HAL_NVIC_SystemReset>
								break;
 8001d6a:	e004      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								break;
 8001d6c:	bf00      	nop
 8001d6e:	e002      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								break;
 8001d70:	bf00      	nop
 8001d72:	e000      	b.n	8001d76 <SIM_Parse_Command+0x1de>
								break;
 8001d74:	bf00      	nop
                    }
                }
            }
        }
    }
}
 8001d76:	bf00      	nop
 8001d78:	3720      	adds	r7, #32
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200054f4 	.word	0x200054f4
 8001d84:	08017298 	.word	0x08017298
 8001d88:	00545352 	.word	0x00545352
 8001d8c:	00545253 	.word	0x00545253
 8001d90:	00545254 	.word	0x00545254
 8001d94:	00544553 	.word	0x00544553
 8001d98:	00544554 	.word	0x00544554
 8001d9c:	00544547 	.word	0x00544547
 8001da0:	0052534d 	.word	0x0052534d
 8001da4:	004c4449 	.word	0x004c4449
 8001da8:	00474e50 	.word	0x00474e50
 8001dac:	0041544f 	.word	0x0041544f
 8001db0:	00444e53 	.word	0x00444e53
 8001db4:	20001c68 	.word	0x20001c68
 8001db8:	20004ec0 	.word	0x20004ec0
 8001dbc:	20004ec8 	.word	0x20004ec8
 8001dc0:	2000073c 	.word	0x2000073c

08001dc4 <SIM_Parse_Cfg>:

/*-----PARSING CONFIGURAZIONE-----*/
void SIM_Parse_Cfg(char* cmd_start, char* cmd_end)
{   
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
    memset(cfg_var, 0, sizeof(cfg_var));
 8001dce:	2214      	movs	r2, #20
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4839      	ldr	r0, [pc, #228]	@ (8001eb8 <SIM_Parse_Cfg+0xf4>)
 8001dd4:	f014 f84c 	bl	8015e70 <memset>
    memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001dd8:	220a      	movs	r2, #10
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4837      	ldr	r0, [pc, #220]	@ (8001ebc <SIM_Parse_Cfg+0xf8>)
 8001dde:	f014 f847 	bl	8015e70 <memset>
    
    char* pos = cmd_start + 4; // Salta "SET,"
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3304      	adds	r3, #4
 8001de6:	61fb      	str	r3, [r7, #28]
    
    // Prima virgola (dopo SET)
    char* comma1 = strchr(pos, ',');
 8001de8:	212c      	movs	r1, #44	@ 0x2c
 8001dea:	69f8      	ldr	r0, [r7, #28]
 8001dec:	f014 f848 	bl	8015e80 <strchr>
 8001df0:	61b8      	str	r0, [r7, #24]
    if(!comma1 || comma1 >= cmd_end) return;
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d056      	beq.n	8001ea6 <SIM_Parse_Cfg+0xe2>
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d252      	bcs.n	8001ea6 <SIM_Parse_Cfg+0xe2>
    
    // Seconda virgola
    char* comma2 = strchr(comma1 + 1, ',');
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	3301      	adds	r3, #1
 8001e04:	212c      	movs	r1, #44	@ 0x2c
 8001e06:	4618      	mov	r0, r3
 8001e08:	f014 f83a 	bl	8015e80 <strchr>
 8001e0c:	6178      	str	r0, [r7, #20]
    if(!comma2 || comma2 >= cmd_end) return;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d04a      	beq.n	8001eaa <SIM_Parse_Cfg+0xe6>
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d246      	bcs.n	8001eaa <SIM_Parse_Cfg+0xe6>
    
    // Terza virgola
    char* comma3 = strchr(comma2 + 1, ',');
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	212c      	movs	r1, #44	@ 0x2c
 8001e22:	4618      	mov	r0, r3
 8001e24:	f014 f82c 	bl	8015e80 <strchr>
 8001e28:	6138      	str	r0, [r7, #16]
    if(!comma3 || comma3 >= cmd_end) return;
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d03e      	beq.n	8001eae <SIM_Parse_Cfg+0xea>
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d23a      	bcs.n	8001eae <SIM_Parse_Cfg+0xea>
    
    // Estrai cfg_var (tra SET, e prima virgola)
    int var_len = comma2 - comma1 - 1;
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
    if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	dd0e      	ble.n	8001e66 <SIM_Parse_Cfg+0xa2>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2b13      	cmp	r3, #19
 8001e4c:	d80b      	bhi.n	8001e66 <SIM_Parse_Cfg+0xa2>
	{
        strncpy(cfg_var, comma1 + 1, var_len);
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	3301      	adds	r3, #1
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4619      	mov	r1, r3
 8001e56:	4818      	ldr	r0, [pc, #96]	@ (8001eb8 <SIM_Parse_Cfg+0xf4>)
 8001e58:	f014 f831 	bl	8015ebe <strncpy>
        cfg_var[var_len] = '\0';
 8001e5c:	4a16      	ldr	r2, [pc, #88]	@ (8001eb8 <SIM_Parse_Cfg+0xf4>)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4413      	add	r3, r2
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
    }
    
    // Estrai cfg_idx
    cfg_idx = atoi(comma2 + 1);
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f013 ff16 	bl	8015c9c <atoi>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4a13      	ldr	r2, [pc, #76]	@ (8001ec0 <SIM_Parse_Cfg+0xfc>)
 8001e74:	6013      	str	r3, [r2, #0]
    
    // Estrai new_cfg_val
    int val_len = cmd_end - comma3 - 1;
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
    if(val_len > 0 && val_len < sizeof(new_cfg_val)) 
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	dd14      	ble.n	8001eb0 <SIM_Parse_Cfg+0xec>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b09      	cmp	r3, #9
 8001e8a:	d811      	bhi.n	8001eb0 <SIM_Parse_Cfg+0xec>
	{
        strncpy(new_cfg_val, comma3 + 1, val_len);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	4619      	mov	r1, r3
 8001e94:	4809      	ldr	r0, [pc, #36]	@ (8001ebc <SIM_Parse_Cfg+0xf8>)
 8001e96:	f014 f812 	bl	8015ebe <strncpy>
        new_cfg_val[val_len] = '\0';
 8001e9a:	4a08      	ldr	r2, [pc, #32]	@ (8001ebc <SIM_Parse_Cfg+0xf8>)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	e004      	b.n	8001eb0 <SIM_Parse_Cfg+0xec>
    if(!comma1 || comma1 >= cmd_end) return;
 8001ea6:	bf00      	nop
 8001ea8:	e002      	b.n	8001eb0 <SIM_Parse_Cfg+0xec>
    if(!comma2 || comma2 >= cmd_end) return;
 8001eaa:	bf00      	nop
 8001eac:	e000      	b.n	8001eb0 <SIM_Parse_Cfg+0xec>
    if(!comma3 || comma3 >= cmd_end) return;
 8001eae:	bf00      	nop
    }
}
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20005cc4 	.word	0x20005cc4
 8001ebc:	20005cdc 	.word	0x20005cdc
 8001ec0:	20005cd8 	.word	0x20005cd8

08001ec4 <SIM_Get_Cfg>:

/*-----RECUPERO VALORE DI CONFIGURAZIONE-----*/
void SIM_Get_Cfg(char* cmd_start, char* cmd_end)
{   
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
	memset(cfg_var, 0, sizeof(cfg_var));
 8001ece:	2214      	movs	r2, #20
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4825      	ldr	r0, [pc, #148]	@ (8001f68 <SIM_Get_Cfg+0xa4>)
 8001ed4:	f013 ffcc 	bl	8015e70 <memset>
	memset(new_cfg_val, 0, sizeof(new_cfg_val));
 8001ed8:	220a      	movs	r2, #10
 8001eda:	2100      	movs	r1, #0
 8001edc:	4823      	ldr	r0, [pc, #140]	@ (8001f6c <SIM_Get_Cfg+0xa8>)
 8001ede:	f013 ffc7 	bl	8015e70 <memset>
	
	char* pos = cmd_start + 4; // Salta "GET,"
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	617b      	str	r3, [r7, #20]
	
	// Prima virgola (dopo GET)
	char* comma1 = strchr(pos, ',');
 8001ee8:	212c      	movs	r1, #44	@ 0x2c
 8001eea:	6978      	ldr	r0, [r7, #20]
 8001eec:	f013 ffc8 	bl	8015e80 <strchr>
 8001ef0:	6138      	str	r0, [r7, #16]
	if(!comma1 || comma1 >= cmd_end) return;
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d031      	beq.n	8001f5c <SIM_Get_Cfg+0x98>
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d22d      	bcs.n	8001f5c <SIM_Get_Cfg+0x98>
	
	// Seconda virgola
	char* comma2 = strchr(comma1 + 1, ',');
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	3301      	adds	r3, #1
 8001f04:	212c      	movs	r1, #44	@ 0x2c
 8001f06:	4618      	mov	r0, r3
 8001f08:	f013 ffba 	bl	8015e80 <strchr>
 8001f0c:	60f8      	str	r0, [r7, #12]
	if(!comma2 || comma2 >= cmd_end) return;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d025      	beq.n	8001f60 <SIM_Get_Cfg+0x9c>
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d221      	bcs.n	8001f60 <SIM_Get_Cfg+0x9c>
	
	// Estrai cfg_var (tra GET, e prima virgola)
	int var_len = comma2 - comma1 - 1;
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	60bb      	str	r3, [r7, #8]
	if(var_len > 0 && var_len < sizeof(cfg_var)) 
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	dd0e      	ble.n	8001f4a <SIM_Get_Cfg+0x86>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b13      	cmp	r3, #19
 8001f30:	d80b      	bhi.n	8001f4a <SIM_Get_Cfg+0x86>
	{
		strncpy(cfg_var, comma1 + 1, var_len);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	3301      	adds	r3, #1
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	480b      	ldr	r0, [pc, #44]	@ (8001f68 <SIM_Get_Cfg+0xa4>)
 8001f3c:	f013 ffbf 	bl	8015ebe <strncpy>
		cfg_var[var_len] = '\0';
 8001f40:	4a09      	ldr	r2, [pc, #36]	@ (8001f68 <SIM_Get_Cfg+0xa4>)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4413      	add	r3, r2
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
	}
	
	// Estrai cfg_idx
	cfg_idx = atoi(comma2 + 1);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f013 fea4 	bl	8015c9c <atoi>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4a06      	ldr	r2, [pc, #24]	@ (8001f70 <SIM_Get_Cfg+0xac>)
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e002      	b.n	8001f62 <SIM_Get_Cfg+0x9e>
	if(!comma1 || comma1 >= cmd_end) return;
 8001f5c:	bf00      	nop
 8001f5e:	e000      	b.n	8001f62 <SIM_Get_Cfg+0x9e>
	if(!comma2 || comma2 >= cmd_end) return;
 8001f60:	bf00      	nop
}
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20005cc4 	.word	0x20005cc4
 8001f6c:	20005cdc 	.word	0x20005cdc
 8001f70:	20005cd8 	.word	0x20005cd8

08001f74 <SIM_publish_MQTT_Message_DMA>:

/*------PUBBLICAZIONE MESSAGGIO MQTT IN MODALITA' DMA------*/
void SIM_publish_MQTT_Message_DMA(const char* topic, const char* message)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0c4      	sub	sp, #272	@ 0x110
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001f82:	6018      	str	r0, [r3, #0]
 8001f84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f88:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f8c:	6019      	str	r1, [r3, #0]
    char command[256];
    uint16_t len = (uint16_t)strlen(message);
 8001f8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001f92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	f7fe f924 	bl	80001e4 <strlen>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

    if(topic != NULL && strlen(topic) > 0)
 8001fa2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fa6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d014      	beq.n	8001fda <SIM_publish_MQTT_Message_DMA+0x66>
 8001fb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001fb4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00c      	beq.n	8001fda <SIM_publish_MQTT_Message_DMA+0x66>
	{
        sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 8001fc0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8001fc4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001fc8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001fcc:	f107 000c 	add.w	r0, r7, #12
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	490b      	ldr	r1, [pc, #44]	@ (8002000 <SIM_publish_MQTT_Message_DMA+0x8c>)
 8001fd4:	f013 feec 	bl	8015db0 <siprintf>
 8001fd8:	e007      	b.n	8001fea <SIM_publish_MQTT_Message_DMA+0x76>
    } 
	else 
	{
        sprintf(command, "AT+SMPUB=%d\r", len);
 8001fda:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4908      	ldr	r1, [pc, #32]	@ (8002004 <SIM_publish_MQTT_Message_DMA+0x90>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f013 fee3 	bl	8015db0 <siprintf>
    }
    
    SIM_Send_Command_DMA(command);
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fd34 	bl	8001a5c <SIM_Send_Command_DMA>
}
 8001ff4:	bf00      	nop
 8001ff6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	080172a4 	.word	0x080172a4
 8002004:	080172bc 	.word	0x080172bc

08002008 <SIM_publish_MQTT_Message>:

/*-----PUBBLICAZIONE MESSAGGIO MQTT-----*/
void SIM_publish_MQTT_Message(const char* topic, const char* message)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b0c4      	sub	sp, #272	@ 0x110
 800200c:	af00      	add	r7, sp, #0
 800200e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002012:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002016:	6018      	str	r0, [r3, #0]
 8002018:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800201c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002020:	6019      	str	r1, [r3, #0]
	char command[256];
	uint16_t len = (uint16_t)strlen(message);
 8002022:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002026:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	f7fe f8da 	bl	80001e4 <strlen>
 8002030:	4603      	mov	r3, r0
 8002032:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

	if(topic != NULL && strlen(topic) > 0)
 8002036:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800203a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d014      	beq.n	800206e <SIM_publish_MQTT_Message+0x66>
 8002044:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002048:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00c      	beq.n	800206e <SIM_publish_MQTT_Message+0x66>
	{
		sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", topic, len);
 8002054:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8002058:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800205c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002060:	f107 000c 	add.w	r0, r7, #12
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	4917      	ldr	r1, [pc, #92]	@ (80020c4 <SIM_publish_MQTT_Message+0xbc>)
 8002068:	f013 fea2 	bl	8015db0 <siprintf>
 800206c:	e007      	b.n	800207e <SIM_publish_MQTT_Message+0x76>
	} 
	else 
	{
		sprintf(command, "AT+SMPUB=%d\r", len);
 800206e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	@ 0x10e
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	4914      	ldr	r1, [pc, #80]	@ (80020c8 <SIM_publish_MQTT_Message+0xc0>)
 8002078:	4618      	mov	r0, r3
 800207a:	f013 fe99 	bl	8015db0 <siprintf>
	}
	
	SIM_Send_Command(command);
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fcd4 	bl	8001a30 <SIM_Send_Command>
	SIM_Wait_Response(">");                       
 8002088:	4810      	ldr	r0, [pc, #64]	@ (80020cc <SIM_publish_MQTT_Message+0xc4>)
 800208a:	f000 f915 	bl	80022b8 <SIM_Wait_Response>
	HAL_UART_Transmit(SIM_UART, (uint8_t*)message, strlen(message), 1000);
 800208e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002092:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	f7fe f8a4 	bl	80001e4 <strlen>
 800209c:	4603      	mov	r3, r0
 800209e:	b29a      	uxth	r2, r3
 80020a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80020a4:	f5a3 7188 	sub.w	r1, r3, #272	@ 0x110
 80020a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ac:	6809      	ldr	r1, [r1, #0]
 80020ae:	4808      	ldr	r0, [pc, #32]	@ (80020d0 <SIM_publish_MQTT_Message+0xc8>)
 80020b0:	f012 fb36 	bl	8014720 <HAL_UART_Transmit>
    SIM_Wait_Response("OK");
 80020b4:	4807      	ldr	r0, [pc, #28]	@ (80020d4 <SIM_publish_MQTT_Message+0xcc>)
 80020b6:	f000 f8ff 	bl	80022b8 <SIM_Wait_Response>
}
 80020ba:	bf00      	nop
 80020bc:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	080172a4 	.word	0x080172a4
 80020c8:	080172bc 	.word	0x080172bc
 80020cc:	080172cc 	.word	0x080172cc
 80020d0:	20000624 	.word	0x20000624
 80020d4:	08017050 	.word	0x08017050

080020d8 <SIM_Send_TCP_Chunk_DMA>:
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
}

/*-----INVIO DATI AL SERVER TCP CON DMA-----*/
void SIM_Send_TCP_Chunk_DMA(uint8_t* data, uint16_t size)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b090      	sub	sp, #64	@ 0x40
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
    char cmd[50];

    sprintf(cmd, "AT+CIPSEND=%u\r", size);
 80020e4:	887a      	ldrh	r2, [r7, #2]
 80020e6:	f107 030c 	add.w	r3, r7, #12
 80020ea:	490d      	ldr	r1, [pc, #52]	@ (8002120 <SIM_Send_TCP_Chunk_DMA+0x48>)
 80020ec:	4618      	mov	r0, r3
 80020ee:	f013 fe5f 	bl	8015db0 <siprintf>
    SIM_Send_Command_DMA(cmd);
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fcb0 	bl	8001a5c <SIM_Send_Command_DMA>

    SIM_Wait_Response(">");                                    // Attesa prompt '>'
 80020fc:	4809      	ldr	r0, [pc, #36]	@ (8002124 <SIM_Send_TCP_Chunk_DMA+0x4c>)
 80020fe:	f000 f8db 	bl	80022b8 <SIM_Wait_Response>

    HAL_UART_Transmit(SIM_UART, data, size, 1000);             // Invia dati binari
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4807      	ldr	r0, [pc, #28]	@ (8002128 <SIM_Send_TCP_Chunk_DMA+0x50>)
 800210c:	f012 fb08 	bl	8014720 <HAL_UART_Transmit>
    
    SIM_Wait_Response("SEND OK");                              // Attesa invio avvenuto
 8002110:	4806      	ldr	r0, [pc, #24]	@ (800212c <SIM_Send_TCP_Chunk_DMA+0x54>)
 8002112:	f000 f8d1 	bl	80022b8 <SIM_Wait_Response>
}
 8002116:	bf00      	nop
 8002118:	3740      	adds	r7, #64	@ 0x40
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	080172d0 	.word	0x080172d0
 8002124:	080172cc 	.word	0x080172cc
 8002128:	20000624 	.word	0x20000624
 800212c:	080172e0 	.word	0x080172e0

08002130 <SIM_Send_Infos>:

/*-----INVIO INFORMAZIONI AL SERVER MQTT-----*/
void SIM_Send_Infos(void)
{
 8002130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002132:	f5ad 7d3f 	sub.w	sp, sp, #764	@ 0x2fc
 8002136:	af10      	add	r7, sp, #64	@ 0x40
	uint16_t len = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	f8a7 32b6 	strh.w	r3, [r7, #694]	@ 0x2b6
	char command[128];
	char infos[512];
	uint16_t new_temp = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	f8a7 32b4 	strh.w	r3, [r7, #692]	@ 0x2b4

	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 8002144:	4951      	ldr	r1, [pc, #324]	@ (800228c <SIM_Send_Infos+0x15c>)
 8002146:	203b      	movs	r0, #59	@ 0x3b
 8002148:	f000 fa0e 	bl	8002568 <BC_MultiRead_Reg>
	INA3221_Read_Measure(&Supply);
 800214c:	4850      	ldr	r0, [pc, #320]	@ (8002290 <SIM_Send_Infos+0x160>)
 800214e:	f7fe ff65 	bl	800101c <INA3221_Read_Measure>
	if((new_temp = Read_Temperature()) != 0)
 8002152:	f7fe ff09 	bl	8000f68 <Read_Temperature>
 8002156:	4603      	mov	r3, r0
 8002158:	f8a7 32b4 	strh.w	r3, [r7, #692]	@ 0x2b4
 800215c:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	@ 0x2b4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <SIM_Send_Infos+0x3c>
	{
		Temperature = new_temp;
 8002164:	4a4b      	ldr	r2, [pc, #300]	@ (8002294 <SIM_Send_Infos+0x164>)
 8002166:	f8b7 32b4 	ldrh.w	r3, [r7, #692]	@ 0x2b4
 800216a:	8013      	strh	r3, [r2, #0]
	}
	uint16_t fw_ver = FW_VERSION;
 800216c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002170:	f8a7 32b2 	strh.w	r3, [r7, #690]	@ 0x2b2

	sprintf(infos, "%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, fw_ver, sys.onDate.Year, sys.onDate.Month, sys.onDate.Date, sys.onTime.Hours, sys.onTime.Minutes, sys.onTime.Seconds, Vbatt, config.samp_freq, config.buffering_secs, Supply.v1, Supply.v2, Supply.v3, Supply.i1, Supply.i2, Supply.i3, Temperature);
 8002174:	4b48      	ldr	r3, [pc, #288]	@ (8002298 <SIM_Send_Infos+0x168>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	469c      	mov	ip, r3
 800217a:	f8b7 42b2 	ldrh.w	r4, [r7, #690]	@ 0x2b2
 800217e:	4b47      	ldr	r3, [pc, #284]	@ (800229c <SIM_Send_Infos+0x16c>)
 8002180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002184:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800218a:	4b44      	ldr	r3, [pc, #272]	@ (800229c <SIM_Send_Infos+0x16c>)
 800218c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002190:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002194:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002196:	4b41      	ldr	r3, [pc, #260]	@ (800229c <SIM_Send_Infos+0x16c>)
 8002198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800219c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a2:	4b3e      	ldr	r3, [pc, #248]	@ (800229c <SIM_Send_Infos+0x16c>)
 80021a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80021ac:	623b      	str	r3, [r7, #32]
 80021ae:	4b3b      	ldr	r3, [pc, #236]	@ (800229c <SIM_Send_Infos+0x16c>)
 80021b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	4b38      	ldr	r3, [pc, #224]	@ (800229c <SIM_Send_Infos+0x16c>)
 80021bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021c0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	4b31      	ldr	r3, [pc, #196]	@ (800228c <SIM_Send_Infos+0x15c>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	4b32      	ldr	r3, [pc, #200]	@ (8002298 <SIM_Send_Infos+0x168>)
 80021ce:	885b      	ldrh	r3, [r3, #2]
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	4b31      	ldr	r3, [pc, #196]	@ (8002298 <SIM_Send_Infos+0x168>)
 80021d4:	791b      	ldrb	r3, [r3, #4]
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002290 <SIM_Send_Infos+0x160>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	4b2c      	ldr	r3, [pc, #176]	@ (8002290 <SIM_Send_Infos+0x160>)
 80021e0:	885b      	ldrh	r3, [r3, #2]
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002290 <SIM_Send_Infos+0x160>)
 80021e6:	889b      	ldrh	r3, [r3, #4]
 80021e8:	461e      	mov	r6, r3
 80021ea:	4b29      	ldr	r3, [pc, #164]	@ (8002290 <SIM_Send_Infos+0x160>)
 80021ec:	88db      	ldrh	r3, [r3, #6]
 80021ee:	461d      	mov	r5, r3
 80021f0:	4b27      	ldr	r3, [pc, #156]	@ (8002290 <SIM_Send_Infos+0x160>)
 80021f2:	891b      	ldrh	r3, [r3, #8]
 80021f4:	4619      	mov	r1, r3
 80021f6:	4b26      	ldr	r3, [pc, #152]	@ (8002290 <SIM_Send_Infos+0x160>)
 80021f8:	895b      	ldrh	r3, [r3, #10]
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b25      	ldr	r3, [pc, #148]	@ (8002294 <SIM_Send_Infos+0x164>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002204:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002206:	920e      	str	r2, [sp, #56]	@ 0x38
 8002208:	910d      	str	r1, [sp, #52]	@ 0x34
 800220a:	950c      	str	r5, [sp, #48]	@ 0x30
 800220c:	960b      	str	r6, [sp, #44]	@ 0x2c
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	920a      	str	r2, [sp, #40]	@ 0x28
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	9209      	str	r2, [sp, #36]	@ 0x24
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	9208      	str	r2, [sp, #32]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	9207      	str	r2, [sp, #28]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	9206      	str	r2, [sp, #24]
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	9205      	str	r2, [sp, #20]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	9204      	str	r2, [sp, #16]
 800222a:	6a3a      	ldr	r2, [r7, #32]
 800222c:	9203      	str	r2, [sp, #12]
 800222e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002230:	9202      	str	r2, [sp, #8]
 8002232:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002234:	9201      	str	r2, [sp, #4]
 8002236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	4623      	mov	r3, r4
 800223c:	4662      	mov	r2, ip
 800223e:	4918      	ldr	r1, [pc, #96]	@ (80022a0 <SIM_Send_Infos+0x170>)
 8002240:	f013 fdb6 	bl	8015db0 <siprintf>
	len = (uint16_t)strlen(infos);
 8002244:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002248:	4618      	mov	r0, r3
 800224a:	f7fd ffcb 	bl	80001e4 <strlen>
 800224e:	4603      	mov	r3, r0
 8002250:	f8a7 32b6 	strh.w	r3, [r7, #694]	@ 0x2b6

	sprintf(command, "AT+SMPUB=\"%s\",%d,1,0\r", sys.MQTT.Info_Topic, len);
 8002254:	f8b7 32b6 	ldrh.w	r3, [r7, #694]	@ 0x2b6
 8002258:	f507 700c 	add.w	r0, r7, #560	@ 0x230
 800225c:	4a11      	ldr	r2, [pc, #68]	@ (80022a4 <SIM_Send_Infos+0x174>)
 800225e:	4912      	ldr	r1, [pc, #72]	@ (80022a8 <SIM_Send_Infos+0x178>)
 8002260:	f013 fda6 	bl	8015db0 <siprintf>
	SIM_Wait_Response(">"); 
 8002264:	4811      	ldr	r0, [pc, #68]	@ (80022ac <SIM_Send_Infos+0x17c>)
 8002266:	f000 f827 	bl	80022b8 <SIM_Wait_Response>
	HAL_UART_Transmit(SIM_UART, (uint8_t*)infos, len, 100);
 800226a:	f8b7 22b6 	ldrh.w	r2, [r7, #694]	@ 0x2b6
 800226e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002272:	2364      	movs	r3, #100	@ 0x64
 8002274:	480e      	ldr	r0, [pc, #56]	@ (80022b0 <SIM_Send_Infos+0x180>)
 8002276:	f012 fa53 	bl	8014720 <HAL_UART_Transmit>
	SIM_Wait_Response("OK");
 800227a:	480e      	ldr	r0, [pc, #56]	@ (80022b4 <SIM_Send_Infos+0x184>)
 800227c:	f000 f81c 	bl	80022b8 <SIM_Wait_Response>
}
 8002280:	bf00      	nop
 8002282:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8002286:	46bd      	mov	sp, r7
 8002288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800228a:	bf00      	nop
 800228c:	20004722 	.word	0x20004722
 8002290:	20003e44 	.word	0x20003e44
 8002294:	20004720 	.word	0x20004720
 8002298:	20001c6c 	.word	0x20001c6c
 800229c:	20000740 	.word	0x20000740
 80022a0:	080172e8 	.word	0x080172e8
 80022a4:	20001b3c 	.word	0x20001b3c
 80022a8:	080172a4 	.word	0x080172a4
 80022ac:	080172cc 	.word	0x080172cc
 80022b0:	20000624 	.word	0x20000624
 80022b4:	08017050 	.word	0x08017050

080022b8 <SIM_Wait_Response>:

/*-----ATTESA RISPOSTA-----*/
int SIM_Wait_Response(const char* expected)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b0c8      	sub	sp, #288	@ 0x120
 80022bc:	af02      	add	r7, sp, #8
 80022be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022c6:	6018      	str	r0, [r3, #0]
    char response[256];
    uint16_t timeout = 10000; // 10 secondi
 80022c8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80022cc:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    uint32_t start_time = HAL_GetTick();
 80022d0:	f008 fd1e 	bl	800ad10 <HAL_GetTick>
 80022d4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    
    while((HAL_GetTick() - start_time) < timeout)
 80022d8:	e02a      	b.n	8002330 <SIM_Wait_Response+0x78>
    {
        uint16_t RxLen = 0;
 80022da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022de:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80022e2:	2200      	movs	r2, #0
 80022e4:	801a      	strh	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle(SIM_UART, (uint8_t*)response, sizeof(response), &RxLen, 500);
 80022e6:	f107 030e 	add.w	r3, r7, #14
 80022ea:	f107 0110 	add.w	r1, r7, #16
 80022ee:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022f2:	9200      	str	r2, [sp, #0]
 80022f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022f8:	4816      	ldr	r0, [pc, #88]	@ (8002354 <SIM_Wait_Response+0x9c>)
 80022fa:	f013 fb78 	bl	80159ee <HAL_UARTEx_ReceiveToIdle>
        
        if(RxLen > 0 && strstr(response, expected) != NULL)
 80022fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002302:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <SIM_Wait_Response+0x72>
 800230c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002310:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002314:	f107 0210 	add.w	r2, r7, #16
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	4610      	mov	r0, r2
 800231c:	f013 fde2 	bl	8015ee4 <strstr>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <SIM_Wait_Response+0x72>
        {
            return 0; 
 8002326:	2300      	movs	r3, #0
 8002328:	e00e      	b.n	8002348 <SIM_Wait_Response+0x90>
        }
        
        HAL_Delay(10);
 800232a:	200a      	movs	r0, #10
 800232c:	f008 fcfc 	bl	800ad28 <HAL_Delay>
    while((HAL_GetTick() - start_time) < timeout)
 8002330:	f008 fcee 	bl	800ad10 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800233a:	1ad2      	subs	r2, r2, r3
 800233c:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8002340:	429a      	cmp	r2, r3
 8002342:	d3ca      	bcc.n	80022da <SIM_Wait_Response+0x22>
    }
	return -1;
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002348:	4618      	mov	r0, r3
 800234a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000624 	.word	0x20000624

08002358 <SIM_Check_Connection>:

/*-----CONTROLLA STATO CONNESSIONE MQTT E TCP-----*/
void SIM_Check_Connection(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800235e:	af00      	add	r7, sp, #0
	char command_sim[256];
	char response_sim[256];

	SIM_Send_Command("AT+SMSTATE?\r");                                                            
 8002360:	4823      	ldr	r0, [pc, #140]	@ (80023f0 <SIM_Check_Connection+0x98>)
 8002362:	f7ff fb65 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response_sim);
 8002366:	463b      	mov	r3, r7
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fb8d 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response_sim))
 800236e:	e00c      	b.n	800238a <SIM_Check_Connection+0x32>
	{
		SIM_Send_Command("AT+SMCONN\r");                                                              
 8002370:	4820      	ldr	r0, [pc, #128]	@ (80023f4 <SIM_Check_Connection+0x9c>)
 8002372:	f7ff fb5d 	bl	8001a30 <SIM_Send_Command>
		SIM_Wait_Response("OK");
 8002376:	4820      	ldr	r0, [pc, #128]	@ (80023f8 <SIM_Check_Connection+0xa0>)
 8002378:	f7ff ff9e 	bl	80022b8 <SIM_Wait_Response>
		SIM_Send_Command("AT+SMSTATE?\r");                                                            
 800237c:	481c      	ldr	r0, [pc, #112]	@ (80023f0 <SIM_Check_Connection+0x98>)
 800237e:	f7ff fb57 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response_sim);
 8002382:	463b      	mov	r3, r7
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fb7f 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_MQTT_State(response_sim))
 800238a:	463b      	mov	r3, r7
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fbbf 	bl	8001b10 <SIM_Check_MQTT_State>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0eb      	beq.n	8002370 <SIM_Check_Connection+0x18>
	}
	SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 8002398:	4818      	ldr	r0, [pc, #96]	@ (80023fc <SIM_Check_Connection+0xa4>)
 800239a:	f7ff fb49 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response(response_sim);
 800239e:	463b      	mov	r3, r7
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fb71 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response_sim))
 80023a6:	e015      	b.n	80023d4 <SIM_Check_Connection+0x7c>
	{
		sprintf(command_sim, "AT+CIPSTART=\"TCP\",\"%s\",%s\r", sys.TCP.IP_address, sys.TCP.Port);       
 80023a8:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 80023ac:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <SIM_Check_Connection+0xa8>)
 80023ae:	4a15      	ldr	r2, [pc, #84]	@ (8002404 <SIM_Check_Connection+0xac>)
 80023b0:	4915      	ldr	r1, [pc, #84]	@ (8002408 <SIM_Check_Connection+0xb0>)
 80023b2:	f013 fcfd 	bl	8015db0 <siprintf>
		SIM_Send_Command(command_sim);
 80023b6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fb38 	bl	8001a30 <SIM_Send_Command>
		SIM_Wait_Response("CONNECT OK");
 80023c0:	4812      	ldr	r0, [pc, #72]	@ (800240c <SIM_Check_Connection+0xb4>)
 80023c2:	f7ff ff79 	bl	80022b8 <SIM_Wait_Response>
		SIM_Send_Command("AT+CIPSTATUS=0\r");                                                        
 80023c6:	480d      	ldr	r0, [pc, #52]	@ (80023fc <SIM_Check_Connection+0xa4>)
 80023c8:	f7ff fb32 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response(response_sim);
 80023cc:	463b      	mov	r3, r7
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fb5a 	bl	8001a88 <SIM_Receive_Response>
	while(!SIM_Check_TCP_State(response_sim))
 80023d4:	463b      	mov	r3, r7
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fbc0 	bl	8001b5c <SIM_Check_TCP_State>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0e2      	beq.n	80023a8 <SIM_Check_Connection+0x50>
	}
}
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	080171dc 	.word	0x080171dc
 80023f4:	080171d0 	.word	0x080171d0
 80023f8:	08017050 	.word	0x08017050
 80023fc:	08017238 	.word	0x08017238
 8002400:	20001c04 	.word	0x20001c04
 8002404:	20001ba0 	.word	0x20001ba0
 8002408:	08017210 	.word	0x08017210
 800240c:	0801722c 	.word	0x0801722c

08002410 <BC_Init>:
#include "global_variables.h"


/*------INIZIALIZZAZIONE BATTERY CHARGER------*/
void BC_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
	BC_Write_Reg(REG00_MINIMAL_SYSTEM_VOLTAGE, 0x1A);           //Tensione minima di uscita con 3 celle = 9V   <----- Senza Batteria il sistema fornisce questa tensione
 8002414:	211a      	movs	r1, #26
 8002416:	2000      	movs	r0, #0
 8002418:	f000 f830 	bl	800247c <BC_Write_Reg>
	BC_MultiWrite_Reg(REG01_CHARGE_VOLTAGE_LIMIT, 0x04EC);      //Limite tensione di carica con 3 celle = 12.6V
 800241c:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 8002420:	2001      	movs	r0, #1
 8002422:	f000 f877 	bl	8002514 <BC_MultiWrite_Reg>
	BC_MultiWrite_Reg(REG03_CHARGE_CURRENT_LIMIT, 0x0064);      //Limite corrente di carica con 3 celle = 1A
 8002426:	2164      	movs	r1, #100	@ 0x64
 8002428:	2003      	movs	r0, #3
 800242a:	f000 f873 	bl	8002514 <BC_MultiWrite_Reg>
	BC_Write_Reg(REG10_CHARGER_CONTROL_1, 0x85);                //Tensione di OVP in ingresso = 26V
 800242e:	2185      	movs	r1, #133	@ 0x85
 8002430:	2010      	movs	r0, #16
 8002432:	f000 f823 	bl	800247c <BC_Write_Reg>
	BC_Write_Reg(REG14_CHARGER_CONTROL_5, 0x96);                //Informazione sulla presenza dello Ship-FET
 8002436:	2196      	movs	r1, #150	@ 0x96
 8002438:	2014      	movs	r0, #20
 800243a:	f000 f81f 	bl	800247c <BC_Write_Reg>
	BC_Write_Reg(REG15_MPPT_CONTROL, 0xAB);                     //MPPT attivato, tensione di MPP = 0.875*Vin, misura di 300ms ogni 2 minuti della Vin
 800243e:	21ab      	movs	r1, #171	@ 0xab
 8002440:	2015      	movs	r0, #21
 8002442:	f000 f81b 	bl	800247c <BC_Write_Reg>
	BC_Write_Reg(REG28_CHARGER_MASK_0, 0xE1);                   //Interrupt attivati: Poor source, Power good, VAC2 present, VAC1 present
 8002446:	21e1      	movs	r1, #225	@ 0xe1
 8002448:	2028      	movs	r0, #40	@ 0x28
 800244a:	f000 f817 	bl	800247c <BC_Write_Reg>
	BC_Write_Reg(REG29_CHARGER_MASK_1, 0xD7);                   //Interrupt attivati: nessuno
 800244e:	21d7      	movs	r1, #215	@ 0xd7
 8002450:	2029      	movs	r0, #41	@ 0x29
 8002452:	f000 f813 	bl	800247c <BC_Write_Reg>
	BC_Write_Reg(REG2A_CHARGER_MASK_2, 0x7F);                   //Interrupt attivati: nessuno
 8002456:	217f      	movs	r1, #127	@ 0x7f
 8002458:	202a      	movs	r0, #42	@ 0x2a
 800245a:	f000 f80f 	bl	800247c <BC_Write_Reg>
	BC_Write_Reg(REG2B_CHARGER_MASK_3, 0x1F);                   //Interrupt attivati: nessuno
 800245e:	211f      	movs	r1, #31
 8002460:	202b      	movs	r0, #43	@ 0x2b
 8002462:	f000 f80b 	bl	800247c <BC_Write_Reg>
	BC_Write_Reg(REG2C_FAULT_MASK_0, 0xFC);                     //Interrupt attivati: VAC2 over-voltage, VAC1 over-voltage
 8002466:	21fc      	movs	r1, #252	@ 0xfc
 8002468:	202c      	movs	r0, #44	@ 0x2c
 800246a:	f000 f807 	bl	800247c <BC_Write_Reg>
	BC_Write_Reg(REG2D_FAULT_MASK_1, 0xF4);                     //Interrupt attivati: nessuno
 800246e:	21f4      	movs	r1, #244	@ 0xf4
 8002470:	202d      	movs	r0, #45	@ 0x2d
 8002472:	f000 f803 	bl	800247c <BC_Write_Reg>
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <BC_Write_Reg>:

/*------SCRITTURA REGISTRO 8 BIT------*/
int BC_Write_Reg(uint8_t reg, uint8_t wdata)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af02      	add	r7, sp, #8
 8002482:	4603      	mov	r3, r0
 8002484:	460a      	mov	r2, r1
 8002486:	71fb      	strb	r3, [r7, #7]
 8002488:	4613      	mov	r3, r2
 800248a:	71bb      	strb	r3, [r7, #6]
	int result = -1;
 800248c:	f04f 33ff 	mov.w	r3, #4294967295
 8002490:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[2];
	toSend[0] = reg;
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	723b      	strb	r3, [r7, #8]
	toSend[1] = wdata;
 8002496:	79bb      	ldrb	r3, [r7, #6]
 8002498:	727b      	strb	r3, [r7, #9]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 2, 100) == HAL_OK)
 800249a:	f107 0208 	add.w	r2, r7, #8
 800249e:	2364      	movs	r3, #100	@ 0x64
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2302      	movs	r3, #2
 80024a4:	21d6      	movs	r1, #214	@ 0xd6
 80024a6:	4806      	ldr	r0, [pc, #24]	@ (80024c0 <BC_Write_Reg+0x44>)
 80024a8:	f00b fec4 	bl	800e234 <HAL_I2C_Master_Transmit>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <BC_Write_Reg+0x3a>
	{
		result = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
	}

	return result;
 80024b6:	68fb      	ldr	r3, [r7, #12]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200002e8 	.word	0x200002e8

080024c4 <BC_Read_Reg>:

/*------LETTURA REGISTRO 8 BIT------*/
int BC_Read_Reg(uint8_t reg, uint8_t *rdata)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	4603      	mov	r3, r0
 80024cc:	6039      	str	r1, [r7, #0]
 80024ce:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295
 80024d4:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 80024d6:	1dfa      	adds	r2, r7, #7
 80024d8:	2364      	movs	r3, #100	@ 0x64
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2301      	movs	r3, #1
 80024de:	21d6      	movs	r1, #214	@ 0xd6
 80024e0:	480b      	ldr	r0, [pc, #44]	@ (8002510 <BC_Read_Reg+0x4c>)
 80024e2:	f00b fea7 	bl	800e234 <HAL_I2C_Master_Transmit>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10c      	bne.n	8002506 <BC_Read_Reg+0x42>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, rdata, 1, 100) == HAL_OK)
 80024ec:	2364      	movs	r3, #100	@ 0x64
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2301      	movs	r3, #1
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	21d6      	movs	r1, #214	@ 0xd6
 80024f6:	4806      	ldr	r0, [pc, #24]	@ (8002510 <BC_Read_Reg+0x4c>)
 80024f8:	f00b ffb4 	bl	800e464 <HAL_I2C_Master_Receive>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <BC_Read_Reg+0x42>
		{
			result = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
		}
	}

	return result;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200002e8 	.word	0x200002e8

08002514 <BC_MultiWrite_Reg>:

/*------SCRITTURA REGISTRO 16 BIT------*/
int BC_MultiWrite_Reg(uint8_t reg, uint16_t wdata)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af02      	add	r7, sp, #8
 800251a:	4603      	mov	r3, r0
 800251c:	460a      	mov	r2, r1
 800251e:	71fb      	strb	r3, [r7, #7]
 8002520:	4613      	mov	r3, r2
 8002522:	80bb      	strh	r3, [r7, #4]
	int result = -1;
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
 8002528:	60fb      	str	r3, [r7, #12]
	uint8_t toSend[3];
	toSend[0] = reg;
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	723b      	strb	r3, [r7, #8]
	toSend[1] = (wdata & 0xFF00) >> 8;
 800252e:	88bb      	ldrh	r3, [r7, #4]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	b29b      	uxth	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	727b      	strb	r3, [r7, #9]
	toSend[2] = wdata & 0x00FF;
 8002538:	88bb      	ldrh	r3, [r7, #4]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, toSend, 3, 100) == HAL_OK)
 800253e:	f107 0208 	add.w	r2, r7, #8
 8002542:	2364      	movs	r3, #100	@ 0x64
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	2303      	movs	r3, #3
 8002548:	21d6      	movs	r1, #214	@ 0xd6
 800254a:	4806      	ldr	r0, [pc, #24]	@ (8002564 <BC_MultiWrite_Reg+0x50>)
 800254c:	f00b fe72 	bl	800e234 <HAL_I2C_Master_Transmit>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <BC_MultiWrite_Reg+0x46>
	{
		result = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
	}

	return result;
 800255a:	68fb      	ldr	r3, [r7, #12]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	200002e8 	.word	0x200002e8

08002568 <BC_MultiRead_Reg>:

/*------LETTURA REGISTRO 16 BIT------*/
int BC_MultiRead_Reg(uint8_t reg, uint16_t *rdata)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af02      	add	r7, sp, #8
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
	int result = -1;
 8002574:	f04f 33ff 	mov.w	r3, #4294967295
 8002578:	60fb      	str	r3, [r7, #12]
	uint8_t data[2] = {0};
 800257a:	2300      	movs	r3, #0
 800257c:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 800257e:	1dfa      	adds	r2, r7, #7
 8002580:	2364      	movs	r3, #100	@ 0x64
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2301      	movs	r3, #1
 8002586:	21d6      	movs	r1, #214	@ 0xd6
 8002588:	4811      	ldr	r0, [pc, #68]	@ (80025d0 <BC_MultiRead_Reg+0x68>)
 800258a:	f00b fe53 	bl	800e234 <HAL_I2C_Master_Transmit>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d118      	bne.n	80025c6 <BC_MultiRead_Reg+0x5e>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1, data, 2, 100) == HAL_OK)
 8002594:	f107 0208 	add.w	r2, r7, #8
 8002598:	2364      	movs	r3, #100	@ 0x64
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2302      	movs	r3, #2
 800259e:	21d6      	movs	r1, #214	@ 0xd6
 80025a0:	480b      	ldr	r0, [pc, #44]	@ (80025d0 <BC_MultiRead_Reg+0x68>)
 80025a2:	f00b ff5f 	bl	800e464 <HAL_I2C_Master_Receive>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10c      	bne.n	80025c6 <BC_MultiRead_Reg+0x5e>
		{
			result = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
			*rdata = (data[0] << 8) | data[1];
 80025b0:	7a3b      	ldrb	r3, [r7, #8]
 80025b2:	b21b      	sxth	r3, r3
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	b21a      	sxth	r2, r3
 80025b8:	7a7b      	ldrb	r3, [r7, #9]
 80025ba:	b21b      	sxth	r3, r3
 80025bc:	4313      	orrs	r3, r2
 80025be:	b21b      	sxth	r3, r3
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	801a      	strh	r2, [r3, #0]
		}
	}

	return result;
 80025c6:	68fb      	ldr	r3, [r7, #12]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	200002e8 	.word	0x200002e8

080025d4 <BC_Read_Flags>:

/*------LETTURA FLAGS DI INTERRUZIONE------*/
int BC_Read_Flags(uint64_t *flags)
{
 80025d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d8:	b09b      	sub	sp, #108	@ 0x6c
 80025da:	af02      	add	r7, sp, #8
 80025dc:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int result = -1;
 80025de:	f04f 33ff 	mov.w	r3, #4294967295
 80025e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t data[6] = {0};
 80025e4:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80025e8:	2300      	movs	r3, #0
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	8093      	strh	r3, [r2, #4]
	uint8_t reg = REG22_CHARGER_FLAG_0;
 80025ee:	2322      	movs	r3, #34	@ 0x22
 80025f0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if(HAL_I2C_Master_Transmit(I2C, BATTERY_CHARGER_ADDR << 1, &reg, 1, 100) == HAL_OK)
 80025f4:	f107 0253 	add.w	r2, r7, #83	@ 0x53
 80025f8:	2364      	movs	r3, #100	@ 0x64
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2301      	movs	r3, #1
 80025fe:	21d6      	movs	r1, #214	@ 0xd6
 8002600:	484a      	ldr	r0, [pc, #296]	@ (800272c <BC_Read_Flags+0x158>)
 8002602:	f00b fe17 	bl	800e234 <HAL_I2C_Master_Transmit>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	f040 8089 	bne.w	8002720 <BC_Read_Flags+0x14c>
	{
		if(HAL_I2C_Master_Receive(I2C,  BATTERY_CHARGER_ADDR << 1 , (uint8_t *)data, 6, 100) == HAL_OK)
 800260e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002612:	2364      	movs	r3, #100	@ 0x64
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2306      	movs	r3, #6
 8002618:	21d6      	movs	r1, #214	@ 0xd6
 800261a:	4844      	ldr	r0, [pc, #272]	@ (800272c <BC_Read_Flags+0x158>)
 800261c:	f00b ff22 	bl	800e464 <HAL_I2C_Master_Receive>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d17c      	bne.n	8002720 <BC_Read_Flags+0x14c>
		{
			result = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	65fb      	str	r3, [r7, #92]	@ 0x5c
			*flags = ((uint64_t)data[0] << 40) | ((uint64_t)data[1] << 32) | ((uint64_t)data[2] << 24) | ((uint64_t)data[3] << 16) | ((uint64_t)data[4] << 8) | (uint64_t)data[5];
 800262a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2200      	movs	r2, #0
 8002632:	643b      	str	r3, [r7, #64]	@ 0x40
 8002634:	647a      	str	r2, [r7, #68]	@ 0x44
 8002636:	f04f 0000 	mov.w	r0, #0
 800263a:	f04f 0100 	mov.w	r1, #0
 800263e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002640:	0219      	lsls	r1, r3, #8
 8002642:	2000      	movs	r0, #0
 8002644:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2200      	movs	r2, #0
 800264c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800264e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 800265a:	0033      	movs	r3, r6
 800265c:	2200      	movs	r2, #0
 800265e:	ea40 0802 	orr.w	r8, r0, r2
 8002662:	ea41 0903 	orr.w	r9, r1, r3
 8002666:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2200      	movs	r2, #0
 800266e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002670:	637a      	str	r2, [r7, #52]	@ 0x34
 8002672:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002676:	460b      	mov	r3, r1
 8002678:	0a1d      	lsrs	r5, r3, #8
 800267a:	460b      	mov	r3, r1
 800267c:	061c      	lsls	r4, r3, #24
 800267e:	ea48 0304 	orr.w	r3, r8, r4
 8002682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002684:	ea49 0305 	orr.w	r3, r9, r5
 8002688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800268a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2200      	movs	r2, #0
 8002692:	623b      	str	r3, [r7, #32]
 8002694:	627a      	str	r2, [r7, #36]	@ 0x24
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80026a2:	4629      	mov	r1, r5
 80026a4:	040b      	lsls	r3, r1, #16
 80026a6:	4621      	mov	r1, r4
 80026a8:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80026ac:	4621      	mov	r1, r4
 80026ae:	040a      	lsls	r2, r1, #16
 80026b0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80026b4:	4621      	mov	r1, r4
 80026b6:	4311      	orrs	r1, r2
 80026b8:	61b9      	str	r1, [r7, #24]
 80026ba:	4629      	mov	r1, r5
 80026bc:	4319      	orrs	r1, r3
 80026be:	61f9      	str	r1, [r7, #28]
 80026c0:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2200      	movs	r2, #0
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	617a      	str	r2, [r7, #20]
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80026d8:	4629      	mov	r1, r5
 80026da:	020b      	lsls	r3, r1, #8
 80026dc:	4621      	mov	r1, r4
 80026de:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80026e2:	4621      	mov	r1, r4
 80026e4:	020a      	lsls	r2, r1, #8
 80026e6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80026ea:	4621      	mov	r1, r4
 80026ec:	ea41 0a02 	orr.w	sl, r1, r2
 80026f0:	4629      	mov	r1, r5
 80026f2:	ea41 0b03 	orr.w	fp, r1, r3
 80026f6:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2200      	movs	r2, #0
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	60fa      	str	r2, [r7, #12]
 8002702:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002706:	460b      	mov	r3, r1
 8002708:	ea4a 0303 	orr.w	r3, sl, r3
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	4613      	mov	r3, r2
 8002710:	ea4b 0303 	orr.w	r3, fp, r3
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002718:	e9d7 1200 	ldrd	r1, r2, [r7]
 800271c:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}

	return result;
 8002720:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8002722:	4618      	mov	r0, r3
 8002724:	3764      	adds	r7, #100	@ 0x64
 8002726:	46bd      	mov	sp, r7
 8002728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800272c:	200002e8 	.word	0x200002e8

08002730 <BC_Manage_Interrupts>:

/*------GESTIONE DELLE INTERRUZIONI------*/
void BC_Manage_Interrupts(uint64_t flags)
{
 8002730:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t status = 0;
 800273c:	2100      	movs	r1, #0
 800273e:	73f9      	strb	r1, [r7, #15]

	if((flags & POOR_SOURCE_MASK) != 0)   //INGRESSO NON BUONO
 8002740:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002744:	2200      	movs	r2, #0
 8002746:	f401 5380 	and.w	r3, r1, #4096	@ 0x1000
 800274a:	4313      	orrs	r3, r2
 800274c:	d00c      	beq.n	8002768 <BC_Manage_Interrupts+0x38>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 800274e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	0a0a      	lsrs	r2, r1, #8
 800275c:	2300      	movs	r3, #0
 800275e:	b2d3      	uxtb	r3, r2
 8002760:	4619      	mov	r1, r3
 8002762:	2022      	movs	r0, #34	@ 0x22
 8002764:	f7ff fe8a 	bl	800247c <BC_Write_Reg>
	}

	if((flags & VAC2_CHANGE_MASK) != 0)  //PANNELLO INSERITO O RIMOSSO
 8002768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800276c:	f04f 0800 	mov.w	r8, #0
 8002770:	f403 6980 	and.w	r9, r3, #1024	@ 0x400
 8002774:	ea58 0309 	orrs.w	r3, r8, r9
 8002778:	d020      	beq.n	80027bc <BC_Manage_Interrupts+0x8c>
	{
		BC_Read_Reg(REG1B_CHARGER_STATUS_0, &status);
 800277a:	f107 030f 	add.w	r3, r7, #15
 800277e:	4619      	mov	r1, r3
 8002780:	201b      	movs	r0, #27
 8002782:	f7ff fe9f 	bl	80024c4 <BC_Read_Reg>
		if((status & VAC2_PRESENT_MASK) != 0)
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <BC_Manage_Interrupts+0x6a>
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x80);                //Usa Pannello
 8002790:	2180      	movs	r1, #128	@ 0x80
 8002792:	2013      	movs	r0, #19
 8002794:	f7ff fe72 	bl	800247c <BC_Write_Reg>
 8002798:	e003      	b.n	80027a2 <BC_Manage_Interrupts+0x72>
		}
		else
		{
			BC_Write_Reg(REG13_CHARGER_CONTROL_4, 0x40);                //Usa Turbina
 800279a:	2140      	movs	r1, #64	@ 0x40
 800279c:	2013      	movs	r0, #19
 800279e:	f7ff fe6d 	bl	800247c <BC_Write_Reg>
		}
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 80027a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	0a0a      	lsrs	r2, r1, #8
 80027b0:	2300      	movs	r3, #0
 80027b2:	b2d3      	uxtb	r3, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	2022      	movs	r0, #34	@ 0x22
 80027b8:	f7ff fe60 	bl	800247c <BC_Write_Reg>
	}

	if((flags & VAC1_CHANGE_MASK) != 0)  //TURBINA INSERITA O RIMOSSA
 80027bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027c0:	2400      	movs	r4, #0
 80027c2:	f403 7500 	and.w	r5, r3, #512	@ 0x200
 80027c6:	ea54 0305 	orrs.w	r3, r4, r5
 80027ca:	d00c      	beq.n	80027e6 <BC_Manage_Interrupts+0xb6>
	{
		// ...gestione evento...
		BC_Write_Reg(REG22_CHARGER_FLAG_0, (flags >> 40) & 0xFF);
 80027cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	0a0a      	lsrs	r2, r1, #8
 80027da:	2300      	movs	r3, #0
 80027dc:	b2d3      	uxtb	r3, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	2022      	movs	r0, #34	@ 0x22
 80027e2:	f7ff fe4b 	bl	800247c <BC_Write_Reg>
	}

	flags = 0;
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9c7 2300 	strd	r2, r3, [r7]
}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080027fc <HAL_UARTEx_RxEventCallback>:
	}
}

/* ------CALLBACK UART RX IDLE------*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	807b      	strh	r3, [r7, #2]
	if(huart == SIM_UART)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a31      	ldr	r2, [pc, #196]	@ (80028d0 <HAL_UARTEx_RxEventCallback+0xd4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d155      	bne.n	80028bc <HAL_UARTEx_RxEventCallback+0xc0>
	{
		if(*(uint8_t*)sim_rx_buffer == '>')
 8002810:	4b30      	ldr	r3, [pc, #192]	@ (80028d4 <HAL_UARTEx_RxEventCallback+0xd8>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b3e      	cmp	r3, #62	@ 0x3e
 8002816:	d120      	bne.n	800285a <HAL_UARTEx_RxEventCallback+0x5e>
		{
			if(flags.CMD.Measure_Request)
 8002818:	4b2f      	ldr	r3, [pc, #188]	@ (80028d8 <HAL_UARTEx_RxEventCallback+0xdc>)
 800281a:	789b      	ldrb	r3, [r3, #2]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_UARTEx_RxEventCallback+0x36>
			{
				flags.TCP_ReadytoSend = 1;
 8002826:	4a2c      	ldr	r2, [pc, #176]	@ (80028d8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002828:	7853      	ldrb	r3, [r2, #1]
 800282a:	f043 0302 	orr.w	r3, r3, #2
 800282e:	7053      	strb	r3, [r2, #1]
 8002830:	e044      	b.n	80028bc <HAL_UARTEx_RxEventCallback+0xc0>
			}
			else if(flags.CMD.Data_Request)
 8002832:	4b29      	ldr	r3, [pc, #164]	@ (80028d8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002834:	789b      	ldrb	r3, [r3, #2]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d03d      	beq.n	80028bc <HAL_UARTEx_RxEventCallback+0xc0>
			{
				flags.MQTT_ReadytoSend = 1;
 8002840:	4a25      	ldr	r2, [pc, #148]	@ (80028d8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002842:	7853      	ldrb	r3, [r2, #1]
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	7053      	strb	r3, [r2, #1]
				sys.SIM_Prompt_Status = 0;
 800284a:	4b24      	ldr	r3, [pc, #144]	@ (80028dc <HAL_UARTEx_RxEventCallback+0xe0>)
 800284c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002850:	461a      	mov	r2, r3
 8002852:	2300      	movs	r3, #0
 8002854:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002858:	e030      	b.n	80028bc <HAL_UARTEx_RxEventCallback+0xc0>
			}
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 800285a:	4b1e      	ldr	r3, [pc, #120]	@ (80028d4 <HAL_UARTEx_RxEventCallback+0xd8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a20      	ldr	r2, [pc, #128]	@ (80028e0 <HAL_UARTEx_RxEventCallback+0xe4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d10a      	bne.n	800287a <HAL_UARTEx_RxEventCallback+0x7e>
				*(uint32_t*)(sim_rx_buffer + 4) == 0x203A4255)       // "UB: "
 8002864:	4b1f      	ldr	r3, [pc, #124]	@ (80028e4 <HAL_UARTEx_RxEventCallback+0xe8>)
 8002866:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x534D532B &&           // "+SMS"
 8002868:	4a1f      	ldr	r2, [pc, #124]	@ (80028e8 <HAL_UARTEx_RxEventCallback+0xec>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d105      	bne.n	800287a <HAL_UARTEx_RxEventCallback+0x7e>
		{     
			flags.MQTT_Message_Rx = 1;
 800286e:	4a1a      	ldr	r2, [pc, #104]	@ (80028d8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002870:	7813      	ldrb	r3, [r2, #0]
 8002872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002876:	7013      	strb	r3, [r2, #0]
 8002878:	e020      	b.n	80028bc <HAL_UARTEx_RxEventCallback+0xc0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&           // "SEND"
 800287a:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <HAL_UARTEx_RxEventCallback+0xd8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1b      	ldr	r2, [pc, #108]	@ (80028ec <HAL_UARTEx_RxEventCallback+0xf0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d10a      	bne.n	800289a <HAL_UARTEx_RxEventCallback+0x9e>
       			*(uint32_t*)(sim_rx_buffer + 4) == 0x004B204F)       // " OK\0"
 8002884:	4b17      	ldr	r3, [pc, #92]	@ (80028e4 <HAL_UARTEx_RxEventCallback+0xe8>)
 8002886:	681b      	ldr	r3, [r3, #0]
		else if(*(uint32_t*)sim_rx_buffer == 0x444E4553 &&           // "SEND"
 8002888:	4a19      	ldr	r2, [pc, #100]	@ (80028f0 <HAL_UARTEx_RxEventCallback+0xf4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d105      	bne.n	800289a <HAL_UARTEx_RxEventCallback+0x9e>
		{
			flags.TCP_isSending = 0;
 800288e:	4a12      	ldr	r2, [pc, #72]	@ (80028d8 <HAL_UARTEx_RxEventCallback+0xdc>)
 8002890:	7853      	ldrb	r3, [r2, #1]
 8002892:	f023 0304 	bic.w	r3, r3, #4
 8002896:	7053      	strb	r3, [r2, #1]
 8002898:	e010      	b.n	80028bc <HAL_UARTEx_RxEventCallback+0xc0>
		}

		else if(*(uint32_t*)sim_rx_buffer == 0x4552524F)            //"ERRO"
 800289a:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <HAL_UARTEx_RxEventCallback+0xd8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a15      	ldr	r2, [pc, #84]	@ (80028f4 <HAL_UARTEx_RxEventCallback+0xf8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d10b      	bne.n	80028bc <HAL_UARTEx_RxEventCallback+0xc0>
		{
			flags.MQTT_ReadytoSend = 0;
 80028a4:	4a0c      	ldr	r2, [pc, #48]	@ (80028d8 <HAL_UARTEx_RxEventCallback+0xdc>)
 80028a6:	7853      	ldrb	r3, [r2, #1]
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	7053      	strb	r3, [r2, #1]
			sys.SIM_Prompt_Status = 0;
 80028ae:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <HAL_UARTEx_RxEventCallback+0xe0>)
 80028b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028b4:	461a      	mov	r2, r3
 80028b6:	2300      	movs	r3, #0
 80028b8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
		}
	}
	
	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80028bc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80028c0:	4904      	ldr	r1, [pc, #16]	@ (80028d4 <HAL_UARTEx_RxEventCallback+0xd8>)
 80028c2:	4803      	ldr	r0, [pc, #12]	@ (80028d0 <HAL_UARTEx_RxEventCallback+0xd4>)
 80028c4:	f013 f996 	bl	8015bf4 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000624 	.word	0x20000624
 80028d4:	200054f4 	.word	0x200054f4
 80028d8:	20001c68 	.word	0x20001c68
 80028dc:	20000740 	.word	0x20000740
 80028e0:	534d532b 	.word	0x534d532b
 80028e4:	200054f8 	.word	0x200054f8
 80028e8:	203a4255 	.word	0x203a4255
 80028ec:	444e4553 	.word	0x444e4553
 80028f0:	004b204f 	.word	0x004b204f
 80028f4:	4552524f 	.word	0x4552524f

080028f8 <HAL_UART_RxCpltCallback>:

/* ------CALLBACK UART RX COMPLETE------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_UART_TxCpltCallback>:

/* ------CALLBACK UART TX COMPLETE------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	if (huart == SIM_UART)
	{

	}

}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_ADC_ConvHalfCpltCallback>:

/* ------CALLBACK HALF ADC------*/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a09      	ldr	r2, [pc, #36]	@ (8002950 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d109      	bne.n	8002944 <HAL_ADC_ConvHalfCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8002930:	4a08      	ldr	r2, [pc, #32]	@ (8002954 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8002932:	7813      	ldrb	r3, [r2, #0]
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	7013      	strb	r3, [r2, #0]
		flags.ADC_Half_Buffer = 1;
 800293a:	4a06      	ldr	r2, [pc, #24]	@ (8002954 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800293c:	7813      	ldrb	r3, [r2, #0]
 800293e:	f043 0302 	orr.w	r3, r3, #2
 8002942:	7013      	strb	r3, [r2, #0]
	}
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	20000218 	.word	0x20000218
 8002954:	20001c68 	.word	0x20001c68

08002958 <HAL_ADC_ConvCpltCallback>:

/*------CALLBACK FULL ADC------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	if(hadc == PRESSURE_ADC)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a09      	ldr	r2, [pc, #36]	@ (8002988 <HAL_ADC_ConvCpltCallback+0x30>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d109      	bne.n	800297c <HAL_ADC_ConvCpltCallback+0x24>
	{
		flags.ADC_Complete = 1;
 8002968:	4a08      	ldr	r2, [pc, #32]	@ (800298c <HAL_ADC_ConvCpltCallback+0x34>)
 800296a:	7813      	ldrb	r3, [r2, #0]
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	7013      	strb	r3, [r2, #0]
		flags.ADC_Full_Buffer = 1;
 8002972:	4a06      	ldr	r2, [pc, #24]	@ (800298c <HAL_ADC_ConvCpltCallback+0x34>)
 8002974:	7813      	ldrb	r3, [r2, #0]
 8002976:	f043 0304 	orr.w	r3, r3, #4
 800297a:	7013      	strb	r3, [r2, #0]
	}
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	20000218 	.word	0x20000218
 800298c:	20001c68 	.word	0x20001c68

08002990 <HAL_RTC_AlarmAEventCallback>:

/*------CALLBACK RTC CAMBIO ORA------*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b092      	sub	sp, #72	@ 0x48
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef gTime;
	RTC_AlarmTypeDef sAlarm = {0};
 8002998:	f107 0308 	add.w	r3, r7, #8
 800299c:	222c      	movs	r2, #44	@ 0x2c
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f013 fa65 	bl	8015e70 <memset>

	HAL_RTC_GetTime(hrtc, &gTime, RTC_FORMAT_BIN);
 80029a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80029aa:	2200      	movs	r2, #0
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f00e fa33 	bl	8010e1a <HAL_RTC_GetTime>

	sys.Low_th = Low_TH_Array[gTime.Hours];
 80029b4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b17      	ldr	r3, [pc, #92]	@ (8002a18 <HAL_RTC_AlarmAEventCallback+0x88>)
 80029bc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80029c0:	4b16      	ldr	r3, [pc, #88]	@ (8002a1c <HAL_RTC_AlarmAEventCallback+0x8c>)
 80029c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
	sys.High_th = High_TH_Array[gTime.Hours];
 80029c8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b14      	ldr	r3, [pc, #80]	@ (8002a20 <HAL_RTC_AlarmAEventCallback+0x90>)
 80029d0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80029d4:	4b11      	ldr	r3, [pc, #68]	@ (8002a1c <HAL_RTC_AlarmAEventCallback+0x8c>)
 80029d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029da:	861a      	strh	r2, [r3, #48]	@ 0x30

	sAlarm.AlarmTime.Hours = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	723b      	strb	r3, [r7, #8]
    sAlarm.AlarmTime.Minutes = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	727b      	strb	r3, [r7, #9]
    sAlarm.AlarmTime.Seconds = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	72bb      	strb	r3, [r7, #10]
    sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 80029e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a24 <HAL_RTC_AlarmAEventCallback+0x94>)
 80029ea:	61fb      	str	r3, [r7, #28]
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    sAlarm.AlarmDateWeekDay = 1;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    sAlarm.Alarm = RTC_ALARM_A;
 80029fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029fe:	633b      	str	r3, [r7, #48]	@ 0x30
    
    HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BIN);
 8002a00:	f107 0308 	add.w	r3, r7, #8
 8002a04:	2200      	movs	r2, #0
 8002a06:	4619      	mov	r1, r3
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f00e fae9 	bl	8010fe0 <HAL_RTC_SetAlarm_IT>
}
 8002a0e:	bf00      	nop
 8002a10:	3748      	adds	r7, #72	@ 0x48
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	200054b4 	.word	0x200054b4
 8002a1c:	20000740 	.word	0x20000740
 8002a20:	20005484 	.word	0x20005484
 8002a24:	80800080 	.word	0x80800080

08002a28 <extflash_cs_set>:
uint32_t	exflashNumSectors = 0;
uint8_t		exflashInitDone = 0;


void extflash_cs_set()
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a32:	4802      	ldr	r0, [pc, #8]	@ (8002a3c <extflash_cs_set+0x14>)
 8002a34:	f00b fb4a 	bl	800e0cc <HAL_GPIO_WritePin>
}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	48000400 	.word	0x48000400

08002a40 <extflash_cs_reset>:

void extflash_cs_reset()
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8002a44:	2201      	movs	r2, #1
 8002a46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a4a:	4802      	ldr	r0, [pc, #8]	@ (8002a54 <extflash_cs_reset+0x14>)
 8002a4c:	f00b fb3e 	bl	800e0cc <HAL_GPIO_WritePin>
}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	48000400 	.word	0x48000400

08002a58 <extflash_wp_reset>:
{
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_RESET);
}

void extflash_wp_reset()
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_nWP_GPIO_Port, FLASH_nWP_Pin, GPIO_PIN_SET);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	2140      	movs	r1, #64	@ 0x40
 8002a60:	4802      	ldr	r0, [pc, #8]	@ (8002a6c <extflash_wp_reset+0x14>)
 8002a62:	f00b fb33 	bl	800e0cc <HAL_GPIO_WritePin>
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	48000800 	.word	0x48000800

08002a70 <extflash_hard_reset>:


void extflash_hard_reset()
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_RESET);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2180      	movs	r1, #128	@ 0x80
 8002a78:	4806      	ldr	r0, [pc, #24]	@ (8002a94 <extflash_hard_reset+0x24>)
 8002a7a:	f00b fb27 	bl	800e0cc <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8002a7e:	2032      	movs	r0, #50	@ 0x32
 8002a80:	f008 f952 	bl	800ad28 <HAL_Delay>

	HAL_GPIO_WritePin(FLASH_nRESET_GPIO_Port, FLASH_nRESET_Pin, GPIO_PIN_SET);
 8002a84:	2201      	movs	r2, #1
 8002a86:	2180      	movs	r1, #128	@ 0x80
 8002a88:	4802      	ldr	r0, [pc, #8]	@ (8002a94 <extflash_hard_reset+0x24>)
 8002a8a:	f00b fb1f 	bl	800e0cc <HAL_GPIO_WritePin>

	return;
 8002a8e:	bf00      	nop
}
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	48000800 	.word	0x48000800

08002a98 <extflash_send_cmd>:


int32_t extflash_send_cmd(extflash_cmd_t command)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

	uint8_t addr_bytes[4] = {0};
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61bb      	str	r3, [r7, #24]
	uint8_t dummy_bytes[8] = {0};
 8002aa4:	f107 0310 	add.w	r3, r7, #16
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
	uint8_t dummy = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	77fb      	strb	r3, [r7, #31]
	uint8_t cmd_data = command->cmd;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	73fb      	strb	r3, [r7, #15]

	if(command->address_en != 0)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	785b      	ldrb	r3, [r3, #1]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00d      	beq.n	8002adc <extflash_send_cmd+0x44>
	{
		addr_bytes[0] = (command->address >> 16) & 0xFF;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	0c1b      	lsrs	r3, r3, #16
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	763b      	strb	r3, [r7, #24]
		addr_bytes[1] = (command->address >> 8) & 0xFF;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	767b      	strb	r3, [r7, #25]
		addr_bytes[2] = (command->address) & 0xFF;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	76bb      	strb	r3, [r7, #26]
	}

	extflash_cs_set();
 8002adc:	f7ff ffa4 	bl	8002a28 <extflash_cs_set>

	HAL_SPI_Transmit(EXTFLASH_SPI, &cmd_data, 1, FLASH_SPI_DEF_TIMEOUT);
 8002ae0:	f107 010f 	add.w	r1, r7, #15
 8002ae4:	2364      	movs	r3, #100	@ 0x64
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4823      	ldr	r0, [pc, #140]	@ (8002b78 <extflash_send_cmd+0xe0>)
 8002aea:	f00e fd78 	bl	80115de <HAL_SPI_Transmit>

	if(command->address_en != 0)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	785b      	ldrb	r3, [r3, #1]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <extflash_send_cmd+0x6c>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, addr_bytes, 3, FLASH_SPI_DEF_TIMEOUT);
 8002af6:	f107 0118 	add.w	r1, r7, #24
 8002afa:	2364      	movs	r3, #100	@ 0x64
 8002afc:	2203      	movs	r2, #3
 8002afe:	481e      	ldr	r0, [pc, #120]	@ (8002b78 <extflash_send_cmd+0xe0>)
 8002b00:	f00e fd6d 	bl	80115de <HAL_SPI_Transmit>
	}

	if(command->dummy_nb > 0)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	88db      	ldrh	r3, [r3, #6]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00e      	beq.n	8002b2a <extflash_send_cmd+0x92>
	{
		dummy = command->dummy_nb > sizeof(dummy_bytes) ? sizeof(dummy_bytes) : command->dummy_nb;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	88db      	ldrh	r3, [r3, #6]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	bf28      	it	cs
 8002b14:	2308      	movcs	r3, #8
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	77fb      	strb	r3, [r7, #31]
		HAL_SPI_Transmit(EXTFLASH_SPI, dummy_bytes, dummy, FLASH_SPI_DEF_TIMEOUT);
 8002b1a:	7ffb      	ldrb	r3, [r7, #31]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	f107 0110 	add.w	r1, r7, #16
 8002b22:	2364      	movs	r3, #100	@ 0x64
 8002b24:	4814      	ldr	r0, [pc, #80]	@ (8002b78 <extflash_send_cmd+0xe0>)
 8002b26:	f00e fd5a 	bl	80115de <HAL_SPI_Transmit>
	}

	if(command->tx_nb > 0 && command->tx_data != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	885b      	ldrh	r3, [r3, #2]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <extflash_send_cmd+0xb2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <extflash_send_cmd+0xb2>
	{
		HAL_SPI_Transmit(EXTFLASH_SPI, command->tx_data, command->tx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68d9      	ldr	r1, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	885a      	ldrh	r2, [r3, #2]
 8002b42:	2364      	movs	r3, #100	@ 0x64
 8002b44:	480c      	ldr	r0, [pc, #48]	@ (8002b78 <extflash_send_cmd+0xe0>)
 8002b46:	f00e fd4a 	bl	80115de <HAL_SPI_Transmit>
	}

	if(command->rx_nb > 0 && command->rx_data != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	889b      	ldrh	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <extflash_send_cmd+0xd2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <extflash_send_cmd+0xd2>
	{
		HAL_SPI_Receive(EXTFLASH_SPI, command->rx_data, command->rx_nb, FLASH_SPI_DEF_TIMEOUT);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6919      	ldr	r1, [r3, #16]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	889a      	ldrh	r2, [r3, #4]
 8002b62:	2364      	movs	r3, #100	@ 0x64
 8002b64:	4804      	ldr	r0, [pc, #16]	@ (8002b78 <extflash_send_cmd+0xe0>)
 8002b66:	f00e feb0 	bl	80118ca <HAL_SPI_Receive>
	}

	extflash_cs_reset();
 8002b6a:	f7ff ff69 	bl	8002a40 <extflash_cs_reset>

	return 0;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	200003a4 	.word	0x200003a4

08002b7c <extflash_read_extended_read_reg>:

}


int extflash_read_extended_read_reg(uint8_t *ereg)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8002b84:	f107 030c 	add.w	r3, r7, #12
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDERP;
 8002b94:	2381      	movs	r3, #129	@ 0x81
 8002b96:	733b      	strb	r3, [r7, #12]
	command.address_en = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	737b      	strb	r3, [r7, #13]
	command.address = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
	command.rx_nb = 1;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	823b      	strh	r3, [r7, #16]
	command.rx_data = ereg;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	61fb      	str	r3, [r7, #28]

	return extflash_send_cmd(&command);
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff73 	bl	8002a98 <extflash_send_cmd>
 8002bb2:	4603      	mov	r3, r0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <extflash_clear_extended_read_reg>:


int extflash_clear_extended_read_reg()
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
	extflash_cmd command = {0};
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_CLERP;
 8002bd0:	2382      	movs	r3, #130	@ 0x82
 8002bd2:	713b      	strb	r3, [r7, #4]

	return extflash_send_cmd(&command);
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff5e 	bl	8002a98 <extflash_send_cmd>
 8002bdc:	4603      	mov	r3, r0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <extflash_set_write_protection>:
	return extflash_send_cmd(&command);

}

int extflash_set_write_protection(uint8_t enable)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b088      	sub	sp, #32
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002bf0:	f107 030c 	add.w	r3, r7, #12
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
	command.cmd = enable==0 ? EFLASH_CMD_WREN : EFLASH_CMD_WRDI;
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <extflash_set_write_protection+0x24>
 8002c06:	2306      	movs	r3, #6
 8002c08:	e000      	b.n	8002c0c <extflash_set_write_protection+0x26>
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	733b      	strb	r3, [r7, #12]

	return extflash_send_cmd(&command);
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ff40 	bl	8002a98 <extflash_send_cmd>
 8002c18:	4603      	mov	r3, r0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <extflash_read_sfdp>:

int extflash_read_sfdp(uint32_t regaddr, uint8_t *reg, uint8_t nregs)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b08a      	sub	sp, #40	@ 0x28
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	71fb      	strb	r3, [r7, #7]

	extflash_cmd command = {0};
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_RDSFDP;
 8002c40:	235a      	movs	r3, #90	@ 0x5a
 8002c42:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	757b      	strb	r3, [r7, #21]
	command.address = regaddr;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nregs;
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	833b      	strh	r3, [r7, #24]
	command.rx_data = reg;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002c5a:	f107 0314 	add.w	r3, r7, #20
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff ff1a 	bl	8002a98 <extflash_send_cmd>
 8002c64:	4603      	mov	r3, r0

}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3728      	adds	r7, #40	@ 0x28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <extflash_raw_read>:

int extflash_raw_read(uint32_t address, uint8_t *pBuffer, uint16_t nbytes)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b08a      	sub	sp, #40	@ 0x28
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	80fb      	strh	r3, [r7, #6]

	extflash_cmd command = {0};
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_FRD;
 8002c8c:	230b      	movs	r3, #11
 8002c8e:	753b      	strb	r3, [r7, #20]
	command.address_en = 1;
 8002c90:	2301      	movs	r3, #1
 8002c92:	757b      	strb	r3, [r7, #21]
	command.address = address;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	61fb      	str	r3, [r7, #28]
	command.dummy_nb = 1;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	837b      	strh	r3, [r7, #26]
	command.rx_nb = nbytes;
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	833b      	strh	r3, [r7, #24]
	command.rx_data = pBuffer;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24

	return extflash_send_cmd(&command);
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fef5 	bl	8002a98 <extflash_send_cmd>
 8002cae:	4603      	mov	r3, r0

}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3728      	adds	r7, #40	@ 0x28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <extflash_raw_erase>:

int extflash_raw_erase(uint32_t address)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

	extflash_cmd command = {0};
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_SER;
 8002cd0:	23d7      	movs	r3, #215	@ 0xd7
 8002cd2:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	617b      	str	r3, [r7, #20]

	return extflash_send_cmd(&command);
 8002cdc:	f107 030c 	add.w	r3, r7, #12
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fed9 	bl	8002a98 <extflash_send_cmd>
 8002ce6:	4603      	mov	r3, r0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3720      	adds	r7, #32
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <extflash_raw_page_write>:

int extflash_raw_page_write(uint32_t address, const uint8_t *pBuffer)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]

	extflash_cmd command = {0};
 8002cfa:	f107 030c 	add.w	r3, r7, #12
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	609a      	str	r2, [r3, #8]
 8002d06:	60da      	str	r2, [r3, #12]
 8002d08:	611a      	str	r2, [r3, #16]
	command.cmd = EFLASH_CMD_PP;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	733b      	strb	r3, [r7, #12]
	command.address_en = 1;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	737b      	strb	r3, [r7, #13]
	command.address = address;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	617b      	str	r3, [r7, #20]
	command.tx_nb = EFLASH_DEF_PAGE_SIZE;
 8002d16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d1a:	81fb      	strh	r3, [r7, #14]
	command.tx_data = pBuffer;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	61bb      	str	r3, [r7, #24]

	return extflash_send_cmd(&command);
 8002d20:	f107 030c 	add.w	r3, r7, #12
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff feb7 	bl	8002a98 <extflash_send_cmd>
 8002d2a:	4603      	mov	r3, r0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <extflash_sector_read>:


int extflash_sector_read(uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	@ 0x28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61fb      	str	r3, [r7, #28]
	uint8_t ereg = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	75fb      	strb	r3, [r7, #23]
	uint32_t tmo = HAL_GetTick();
 8002d48:	f007 ffe2 	bl	800ad10 <HAL_GetTick>
 8002d4c:	61b8      	str	r0, [r7, #24]
	uint8_t *wPtr = pBuffer;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	031b      	lsls	r3, r3, #12
 8002d56:	623b      	str	r3, [r7, #32]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002d58:	f107 0317 	add.w	r3, r7, #23
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff0d 	bl	8002b7c <extflash_read_extended_read_reg>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	da10      	bge.n	8002d8a <extflash_sector_read+0x56>
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6c:	e037      	b.n	8002dde <extflash_sector_read+0xaa>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002d6e:	f107 0317 	add.w	r3, r7, #23
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff02 	bl	8002b7c <extflash_read_extended_read_reg>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	da02      	bge.n	8002d84 <extflash_sector_read+0x50>
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	e02c      	b.n	8002dde <extflash_sector_read+0xaa>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002d84:	2001      	movs	r0, #1
 8002d86:	f007 ffcf 	bl	800ad28 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < FLASH_WRITE_ERASE_TIMEOUT))
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <extflash_sector_read+0xa2>
 8002d94:	f007 ffbc 	bl	800ad10 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002da2:	d3e4      	bcc.n	8002d6e <extflash_sector_read+0x3a>
	}

	while(nsectors > 0)
 8002da4:	e017      	b.n	8002dd6 <extflash_sector_read+0xa2>
	{
		result = extflash_raw_read(address, wPtr, EFLASH_DEF_SECTOR_SIZE);
 8002da6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002daa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dac:	6a38      	ldr	r0, [r7, #32]
 8002dae:	f7ff ff5e 	bl	8002c6e <extflash_raw_read>
 8002db2:	61f8      	str	r0, [r7, #28]
		if(result < 0)return -1;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	da02      	bge.n	8002dc0 <extflash_sector_read+0x8c>
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295
 8002dbe:	e00e      	b.n	8002dde <extflash_sector_read+0xaa>

		address += EFLASH_DEF_SECTOR_SIZE;
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc6:	623b      	str	r3, [r7, #32]
		wPtr += EFLASH_DEF_SECTOR_SIZE;
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dce:	627b      	str	r3, [r7, #36]	@ 0x24
		nsectors--;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e4      	bne.n	8002da6 <extflash_sector_read+0x72>
	}

	return 0;
 8002ddc:	2300      	movs	r3, #0

}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3728      	adds	r7, #40	@ 0x28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <extflash_wait_for_wop>:

int extflash_wait_for_wop(uint32_t timeout)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
	uint8_t ereg = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	72fb      	strb	r3, [r7, #11]
	uint32_t tmo = HAL_GetTick();
 8002df2:	f007 ff8d 	bl	800ad10 <HAL_GetTick>
 8002df6:	60f8      	str	r0, [r7, #12]

	if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002df8:	f107 030b 	add.w	r3, r7, #11
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff febd 	bl	8002b7c <extflash_read_extended_read_reg>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	da10      	bge.n	8002e2a <extflash_wait_for_wop+0x44>
 8002e08:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0c:	e023      	b.n	8002e56 <extflash_wait_for_wop+0x70>

	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
	{
		//Scrittura-erase in corso
		if(extflash_read_extended_read_reg(&ereg) < 0)return -1;
 8002e0e:	f107 030b 	add.w	r3, r7, #11
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff feb2 	bl	8002b7c <extflash_read_extended_read_reg>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	da02      	bge.n	8002e24 <extflash_wait_for_wop+0x3e>
 8002e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e22:	e018      	b.n	8002e56 <extflash_wait_for_wop+0x70>
		HAL_Delay(FLASH_STATUS_POLL_INTERVAL);
 8002e24:	2001      	movs	r0, #1
 8002e26:	f007 ff7f 	bl	800ad28 <HAL_Delay>
	while((ereg & ESTATUS_WIP) && (HAL_GetTick() - tmo < timeout))
 8002e2a:	7afb      	ldrb	r3, [r7, #11]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <extflash_wait_for_wop+0x5e>
 8002e34:	f007 ff6c 	bl	800ad10 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d8e4      	bhi.n	8002e0e <extflash_wait_for_wop+0x28>
	}

	if(ereg & (ESTATUS_PROT_ERR | ESTATUS_P_ERR | ESTATUS_E_ERR))
 8002e44:	7afb      	ldrb	r3, [r7, #11]
 8002e46:	f003 030e 	and.w	r3, r3, #14
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <extflash_wait_for_wop+0x6e>
	{
		return -2; //Erase o write error
 8002e4e:	f06f 0301 	mvn.w	r3, #1
 8002e52:	e000      	b.n	8002e56 <extflash_wait_for_wop+0x70>
	}

	return 0;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <extflash_sector_write>:

int extflash_sector_write(uint32_t sector, uint32_t nsectors, const uint8_t *pBuffer)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b088      	sub	sp, #32
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
	int result = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
	const uint8_t *wPtr = pBuffer;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * EFLASH_DEF_SECTOR_SIZE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	031b      	lsls	r3, r3, #12
 8002e76:	61bb      	str	r3, [r7, #24]

	extflash_clear_extended_read_reg();
 8002e78:	f7ff fea0 	bl	8002bbc <extflash_clear_extended_read_reg>

	while(nsectors > 0)
 8002e7c:	e04e      	b.n	8002f1c <extflash_sector_write+0xbe>
	{
		//Controllo operazioni in corso
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002e7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e82:	f7ff ffb0 	bl	8002de6 <extflash_wait_for_wop>
 8002e86:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	db4a      	blt.n	8002f24 <extflash_sector_write+0xc6>

		//Erase del settore
		result = extflash_set_write_protection(0);
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7ff fea9 	bl	8002be6 <extflash_set_write_protection>
 8002e94:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db45      	blt.n	8002f28 <extflash_sector_write+0xca>
		result = extflash_raw_erase(address);
 8002e9c:	69b8      	ldr	r0, [r7, #24]
 8002e9e:	f7ff ff0b 	bl	8002cb8 <extflash_raw_erase>
 8002ea2:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	db40      	blt.n	8002f2c <extflash_sector_write+0xce>

		//Attesa ERASE
		result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002eaa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002eae:	f7ff ff9a 	bl	8002de6 <extflash_wait_for_wop>
 8002eb2:	6138      	str	r0, [r7, #16]
		if(result < 0)break;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	db3a      	blt.n	8002f30 <extflash_sector_write+0xd2>

		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e021      	b.n	8002f04 <extflash_sector_write+0xa6>
		{
			result = extflash_set_write_protection(0);
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f7ff fe90 	bl	8002be6 <extflash_set_write_protection>
 8002ec6:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	db1e      	blt.n	8002f0c <extflash_sector_write+0xae>
			result = extflash_raw_page_write(address, wPtr);
 8002ece:	69f9      	ldr	r1, [r7, #28]
 8002ed0:	69b8      	ldr	r0, [r7, #24]
 8002ed2:	f7ff ff0d 	bl	8002cf0 <extflash_raw_page_write>
 8002ed6:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	db18      	blt.n	8002f10 <extflash_sector_write+0xb2>

			address += EFLASH_DEF_PAGE_SIZE;
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ee4:	61bb      	str	r3, [r7, #24]
			wPtr += EFLASH_DEF_PAGE_SIZE;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002eec:	61fb      	str	r3, [r7, #28]
			//Attesa write
			result = extflash_wait_for_wop(FLASH_WRITE_ERASE_TIMEOUT);
 8002eee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ef2:	f7ff ff78 	bl	8002de6 <extflash_wait_for_wop>
 8002ef6:	6138      	str	r0, [r7, #16]
			if(result < 0)break;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	db0a      	blt.n	8002f14 <extflash_sector_write+0xb6>
		for(int i=0; i < EFLASH_PAGES_PER_SECTOR; i++)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	3301      	adds	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2b0f      	cmp	r3, #15
 8002f08:	ddda      	ble.n	8002ec0 <extflash_sector_write+0x62>
 8002f0a:	e004      	b.n	8002f16 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002f0c:	bf00      	nop
 8002f0e:	e002      	b.n	8002f16 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002f10:	bf00      	nop
 8002f12:	e000      	b.n	8002f16 <extflash_sector_write+0xb8>
			if(result < 0)break;
 8002f14:	bf00      	nop
		}

		nsectors--;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	60bb      	str	r3, [r7, #8]
	while(nsectors > 0)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1ad      	bne.n	8002e7e <extflash_sector_write+0x20>
 8002f22:	e006      	b.n	8002f32 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002f24:	bf00      	nop
 8002f26:	e004      	b.n	8002f32 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002f28:	bf00      	nop
 8002f2a:	e002      	b.n	8002f32 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002f2c:	bf00      	nop
 8002f2e:	e000      	b.n	8002f32 <extflash_sector_write+0xd4>
		if(result < 0)break;
 8002f30:	bf00      	nop
	}

	extflash_set_write_protection(1);
 8002f32:	2001      	movs	r0, #1
 8002f34:	f7ff fe57 	bl	8002be6 <extflash_set_write_protection>

	return 0;
 8002f38:	2300      	movs	r3, #0

}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <extflash_get_sector_size>:


unsigned int extflash_get_sector_size()
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0
	return EFLASH_DEF_SECTOR_SIZE;
 8002f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <extflash_get_sector_count>:

unsigned int extflash_get_sector_count()
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
	return exflashNumSectors;
 8002f58:	4b03      	ldr	r3, [pc, #12]	@ (8002f68 <extflash_get_sector_count+0x14>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000210 	.word	0x20000210

08002f6c <extflash_is_initialized>:
{
	return exflashSize;
}

int extflash_is_initialized()
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
	return exflashInitDone;
 8002f70:	4b03      	ldr	r3, [pc, #12]	@ (8002f80 <extflash_is_initialized+0x14>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000214 	.word	0x20000214

08002f84 <extflash_init>:

int extflash_init()
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
	uint8_t manufacturer_id[2] = {0};
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	83bb      	strh	r3, [r7, #28]
	extflash_cmd command = {0};
 8002f8e:	f107 0308 	add.w	r3, r7, #8
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	611a      	str	r2, [r3, #16]
	uint8_t density[4] = {0};
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]

	exflashInitDone = 0;
 8002fa2:	4b26      	ldr	r3, [pc, #152]	@ (800303c <extflash_init+0xb8>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
	exflashNumSectors = 0;
 8002fa8:	4b25      	ldr	r3, [pc, #148]	@ (8003040 <extflash_init+0xbc>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

	extflash_hard_reset();
 8002fae:	f7ff fd5f 	bl	8002a70 <extflash_hard_reset>
	extflash_cs_reset();
 8002fb2:	f7ff fd45 	bl	8002a40 <extflash_cs_reset>
	extflash_wp_reset();
 8002fb6:	f7ff fd4f 	bl	8002a58 <extflash_wp_reset>

	command.cmd = EFLASH_CMD_RDMDID;
 8002fba:	2390      	movs	r3, #144	@ 0x90
 8002fbc:	723b      	strb	r3, [r7, #8]
	command.address_en = 1;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	727b      	strb	r3, [r7, #9]
	command.address = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
	command.rx_nb = 2;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	81bb      	strh	r3, [r7, #12]
	command.rx_data = manufacturer_id;
 8002fca:	f107 031c 	add.w	r3, r7, #28
 8002fce:	61bb      	str	r3, [r7, #24]

	extflash_send_cmd(&command);
 8002fd0:	f107 0308 	add.w	r3, r7, #8
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff fd5f 	bl	8002a98 <extflash_send_cmd>

	if(manufacturer_id[0] != EFLASH_DEF_MANIFACTURER || manufacturer_id[1] != EFLASH_DEF_DEVID)
 8002fda:	7f3b      	ldrb	r3, [r7, #28]
 8002fdc:	2b9d      	cmp	r3, #157	@ 0x9d
 8002fde:	d102      	bne.n	8002fe6 <extflash_init+0x62>
 8002fe0:	7f7b      	ldrb	r3, [r7, #29]
 8002fe2:	2b17      	cmp	r3, #23
 8002fe4:	d002      	beq.n	8002fec <extflash_init+0x68>
	{
		return -1;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	e022      	b.n	8003032 <extflash_init+0xae>
	}

	memset((void *)&command, 0, sizeof(command));
 8002fec:	f107 0308 	add.w	r3, r7, #8
 8002ff0:	2214      	movs	r2, #20
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f012 ff3b 	bl	8015e70 <memset>

	extflash_read_sfdp(SFDP_FLASH_DENSITY, density, sizeof(density));
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	4619      	mov	r1, r3
 8003000:	2034      	movs	r0, #52	@ 0x34
 8003002:	f7ff fe0e 	bl	8002c22 <extflash_read_sfdp>

	memcpy(&exflashSize, density, sizeof(uint32_t));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a0e      	ldr	r2, [pc, #56]	@ (8003044 <extflash_init+0xc0>)
 800300a:	6013      	str	r3, [r2, #0]

	exflashSize += 1;
 800300c:	4b0d      	ldr	r3, [pc, #52]	@ (8003044 <extflash_init+0xc0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3301      	adds	r3, #1
 8003012:	4a0c      	ldr	r2, [pc, #48]	@ (8003044 <extflash_init+0xc0>)
 8003014:	6013      	str	r3, [r2, #0]
	exflashSize >>= 3;
 8003016:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <extflash_init+0xc0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	08db      	lsrs	r3, r3, #3
 800301c:	4a09      	ldr	r2, [pc, #36]	@ (8003044 <extflash_init+0xc0>)
 800301e:	6013      	str	r3, [r2, #0]

	exflashNumSectors = exflashSize / EFLASH_DEF_SECTOR_SIZE;
 8003020:	4b08      	ldr	r3, [pc, #32]	@ (8003044 <extflash_init+0xc0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	0b1b      	lsrs	r3, r3, #12
 8003026:	4a06      	ldr	r2, [pc, #24]	@ (8003040 <extflash_init+0xbc>)
 8003028:	6013      	str	r3, [r2, #0]

	exflashInitDone = 1;
 800302a:	4b04      	ldr	r3, [pc, #16]	@ (800303c <extflash_init+0xb8>)
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]

	return 0;
 8003030:	2300      	movs	r3, #0

}
 8003032:	4618      	mov	r0, r3
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000214 	.word	0x20000214
 8003040:	20000210 	.word	0x20000210
 8003044:	2000020c 	.word	0x2000020c

08003048 <System_Init>:
#include "lsm6dsv16x_rw.h"
#include "DS18B20.h"

/*-----INIZiALIZZAZIONE SISTEMA-----*/
void System_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
	acc.write_reg = acc_write;
 800304c:	4b1f      	ldr	r3, [pc, #124]	@ (80030cc <System_Init+0x84>)
 800304e:	4a20      	ldr	r2, [pc, #128]	@ (80030d0 <System_Init+0x88>)
 8003050:	601a      	str	r2, [r3, #0]
	acc.read_reg = acc_read;
 8003052:	4b1e      	ldr	r3, [pc, #120]	@ (80030cc <System_Init+0x84>)
 8003054:	4a1f      	ldr	r2, [pc, #124]	@ (80030d4 <System_Init+0x8c>)
 8003056:	605a      	str	r2, [r3, #4]
	acc.handle = &hspi3;
 8003058:	4b1c      	ldr	r3, [pc, #112]	@ (80030cc <System_Init+0x84>)
 800305a:	4a1f      	ldr	r2, [pc, #124]	@ (80030d8 <System_Init+0x90>)
 800305c:	60da      	str	r2, [r3, #12]

	LED_Start(GRN_LED, FAST, HIGH);
 800305e:	2205      	movs	r2, #5
 8003060:	2100      	movs	r1, #0
 8003062:	2008      	movs	r0, #8
 8003064:	f000 fa6c 	bl	8003540 <LED_Start>

	BC_Init();
 8003068:	f7ff f9d2 	bl	8002410 <BC_Init>
	INA3221_Init();
 800306c:	f7fd ffb4 	bl	8000fd8 <INA3221_Init>
	FatFS_Init();
 8003070:	f000 f83a 	bl	80030e8 <FatFS_Init>
	Config_Init();
 8003074:	f000 f980 	bl	8003378 <Config_Init>
	Acc_Init(&acc);
 8003078:	4814      	ldr	r0, [pc, #80]	@ (80030cc <System_Init+0x84>)
 800307a:	f000 f8d1 	bl	8003220 <Acc_Init>
	LED_Start(ORG_LED, FAST, HALF);
 800307e:	2206      	movs	r2, #6
 8003080:	2100      	movs	r1, #0
 8003082:	2000      	movs	r0, #0
 8003084:	f000 fa5c 	bl	8003540 <LED_Start>
	while(SIM_Init() != HAL_OK);
 8003088:	bf00      	nop
 800308a:	f7fe fa11 	bl	80014b0 <SIM_Init>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1fa      	bne.n	800308a <System_Init+0x42>
	LED_Stop(ORG_LED);
 8003094:	2000      	movs	r0, #0
 8003096:	f000 fb45 	bl	8003724 <LED_Stop>
	RTC_Init();
 800309a:	f7fe f84b 	bl	8001134 <RTC_Init>
	Temperature = Read_Temperature();
 800309e:	f7fd ff63 	bl	8000f68 <Read_Temperature>
 80030a2:	4603      	mov	r3, r0
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b0d      	ldr	r3, [pc, #52]	@ (80030dc <System_Init+0x94>)
 80030a8:	801a      	strh	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80030aa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80030ae:	490c      	ldr	r1, [pc, #48]	@ (80030e0 <System_Init+0x98>)
 80030b0:	480c      	ldr	r0, [pc, #48]	@ (80030e4 <System_Init+0x9c>)
 80030b2:	f012 fd9f 	bl	8015bf4 <HAL_UARTEx_ReceiveToIdle_DMA>

	HAL_Delay(9000);
 80030b6:	f242 3028 	movw	r0, #9000	@ 0x2328
 80030ba:	f007 fe35 	bl	800ad28 <HAL_Delay>
	LED_Start(GRN_LED, MEDIUM, HALF);
 80030be:	2206      	movs	r2, #6
 80030c0:	2101      	movs	r1, #1
 80030c2:	2008      	movs	r0, #8
 80030c4:	f000 fa3c 	bl	8003540 <LED_Start>
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	200054e4 	.word	0x200054e4
 80030d0:	08003f47 	.word	0x08003f47
 80030d4:	08003f9f 	.word	0x08003f9f
 80030d8:	20000408 	.word	0x20000408
 80030dc:	20004720 	.word	0x20004720
 80030e0:	200054f4 	.word	0x200054f4
 80030e4:	20000624 	.word	0x20000624

080030e8 <FatFS_Init>:

/*-----INIZiALIZZAZIONE MEMORIE-----*/
void FatFS_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	75fb      	strb	r3, [r7, #23]
	MKFS_PARM mkfs_opt = {0};
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	60da      	str	r2, [r3, #12]

	do
	{
		sys.RAM_Mounted = 0;
 80030fe:	4b41      	ldr	r3, [pc, #260]	@ (8003204 <FatFS_Init+0x11c>)
 8003100:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003104:	461a      	mov	r2, r3
 8003106:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800310a:	f023 0302 	bic.w	r3, r3, #2
 800310e:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		
		mkfs_opt.fmt = FM_FAT32;
 8003112:	2302      	movs	r3, #2
 8003114:	713b      	strb	r3, [r7, #4]
		mkfs_opt.au_size = 1024; 
 8003116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800311a:	613b      	str	r3, [r7, #16]
		mkfs_opt.n_fat = 1;
 800311c:	2301      	movs	r3, #1
 800311e:	717b      	strb	r3, [r7, #5]
		mkfs_opt.align = 1;
 8003120:	2301      	movs	r3, #1
 8003122:	60bb      	str	r3, [r7, #8]

		fRes = f_mkfs("/ram", &mkfs_opt, psram_fs.win, sizeof(psram_fs.win));
 8003124:	1d39      	adds	r1, r7, #4
 8003126:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800312a:	4a37      	ldr	r2, [pc, #220]	@ (8003208 <FatFS_Init+0x120>)
 800312c:	4837      	ldr	r0, [pc, #220]	@ (800320c <FatFS_Init+0x124>)
 800312e:	f007 f90d 	bl	800a34c <f_mkfs>
 8003132:	4603      	mov	r3, r0
 8003134:	75fb      	strb	r3, [r7, #23]
		if (fRes != FR_OK)
 8003136:	7dfb      	ldrb	r3, [r7, #23]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d114      	bne.n	8003166 <FatFS_Init+0x7e>
		{
			break;
		}

		fRes = f_mount(&psram_fs, "/ram", 1);
 800313c:	2201      	movs	r2, #1
 800313e:	4933      	ldr	r1, [pc, #204]	@ (800320c <FatFS_Init+0x124>)
 8003140:	4833      	ldr	r0, [pc, #204]	@ (8003210 <FatFS_Init+0x128>)
 8003142:	f006 fa81 	bl	8009648 <f_mount>
 8003146:	4603      	mov	r3, r0
 8003148:	75fb      	strb	r3, [r7, #23]

		if (fRes != FR_OK)
 800314a:	7dfb      	ldrb	r3, [r7, #23]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10c      	bne.n	800316a <FatFS_Init+0x82>
		{
			break;
		}

		sys.RAM_Mounted = 1;
 8003150:	4b2c      	ldr	r3, [pc, #176]	@ (8003204 <FatFS_Init+0x11c>)
 8003152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003156:	461a      	mov	r2, r3
 8003158:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800315c:	f043 0302 	orr.w	r3, r3, #2
 8003160:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 8003164:	e002      	b.n	800316c <FatFS_Init+0x84>
			break;
 8003166:	bf00      	nop
 8003168:	e000      	b.n	800316c <FatFS_Init+0x84>
			break;
 800316a:	bf00      	nop
	} while (1);

	do
	{
		sys.FLASH_Mounted = 0;
 800316c:	4b25      	ldr	r3, [pc, #148]	@ (8003204 <FatFS_Init+0x11c>)
 800316e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003172:	461a      	mov	r2, r3
 8003174:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8003178:	f023 0304 	bic.w	r3, r3, #4
 800317c:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
		fRes = f_mount(&flash_fs, "/flash", 1);
 8003180:	2201      	movs	r2, #1
 8003182:	4924      	ldr	r1, [pc, #144]	@ (8003214 <FatFS_Init+0x12c>)
 8003184:	4824      	ldr	r0, [pc, #144]	@ (8003218 <FatFS_Init+0x130>)
 8003186:	f006 fa5f 	bl	8009648 <f_mount>
 800318a:	4603      	mov	r3, r0
 800318c:	75fb      	strb	r3, [r7, #23]

		if (fRes == FR_NO_FILESYSTEM)
 800318e:	7dfb      	ldrb	r3, [r7, #23]
 8003190:	2b0d      	cmp	r3, #13
 8003192:	d124      	bne.n	80031de <FatFS_Init+0xf6>
		{
			memset((void *)&mkfs_opt, 0, sizeof(mkfs_opt));
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	2210      	movs	r2, #16
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f012 fe68 	bl	8015e70 <memset>
			mkfs_opt.fmt = FM_FAT32;
 80031a0:	2302      	movs	r3, #2
 80031a2:	713b      	strb	r3, [r7, #4]
			mkfs_opt.au_size = 4096;    
 80031a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031a8:	613b      	str	r3, [r7, #16]
			mkfs_opt.n_fat = 1;
 80031aa:	2301      	movs	r3, #1
 80031ac:	717b      	strb	r3, [r7, #5]
			mkfs_opt.align = 1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	60bb      	str	r3, [r7, #8]

			fRes = f_mkfs("/flash", &mkfs_opt, flash_fs.win, sizeof(flash_fs.win));
 80031b2:	1d39      	adds	r1, r7, #4
 80031b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031b8:	4a18      	ldr	r2, [pc, #96]	@ (800321c <FatFS_Init+0x134>)
 80031ba:	4816      	ldr	r0, [pc, #88]	@ (8003214 <FatFS_Init+0x12c>)
 80031bc:	f007 f8c6 	bl	800a34c <f_mkfs>
 80031c0:	4603      	mov	r3, r0
 80031c2:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d114      	bne.n	80031f4 <FatFS_Init+0x10c>
			{
				break;
			}

			fRes = f_mount(&flash_fs, "/flash", 1);
 80031ca:	2201      	movs	r2, #1
 80031cc:	4911      	ldr	r1, [pc, #68]	@ (8003214 <FatFS_Init+0x12c>)
 80031ce:	4812      	ldr	r0, [pc, #72]	@ (8003218 <FatFS_Init+0x130>)
 80031d0:	f006 fa3a 	bl	8009648 <f_mount>
 80031d4:	4603      	mov	r3, r0
 80031d6:	75fb      	strb	r3, [r7, #23]
			if (fRes != FR_OK)
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10c      	bne.n	80031f8 <FatFS_Init+0x110>
			{
				break;
			}
		}

		sys.FLASH_Mounted = 1;
 80031de:	4b09      	ldr	r3, [pc, #36]	@ (8003204 <FatFS_Init+0x11c>)
 80031e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031e4:	461a      	mov	r2, r3
 80031e6:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

		break;
 80031f2:	e002      	b.n	80031fa <FatFS_Init+0x112>
				break;
 80031f4:	bf00      	nop
 80031f6:	e000      	b.n	80031fa <FatFS_Init+0x112>
				break;
 80031f8:	bf00      	nop
	} while (1);


}
 80031fa:	bf00      	nop
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000740 	.word	0x20000740
 8003208:	20001e10 	.word	0x20001e10
 800320c:	08017320 	.word	0x08017320
 8003210:	20001ddc 	.word	0x20001ddc
 8003214:	08017328 	.word	0x08017328
 8003218:	20002e10 	.word	0x20002e10
 800321c:	20002e44 	.word	0x20002e44

08003220 <Acc_Init>:

/*-----INIZiALIZZAZIONE ACCELEROMETRO-----*/
void Acc_Init(stmdev_ctx_t* acc)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	lsm6dsv16x_reset_t rst;
	lsm6dsv16x_pin_int_route_t pin_int = {0};
 8003228:	f107 0310 	add.w	r3, r7, #16
 800322c:	2100      	movs	r1, #0
 800322e:	460a      	mov	r2, r1
 8003230:	801a      	strh	r2, [r3, #0]
 8003232:	460a      	mov	r2, r1
 8003234:	709a      	strb	r2, [r3, #2]
	uint8_t acc_whoamI = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	73fb      	strb	r3, [r7, #15]
	uint8_t wmi_cnt = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]

	pin_int.fifo_th = PROPERTY_ENABLE;
 800323e:	7c3b      	ldrb	r3, [r7, #16]
 8003240:	f043 0308 	orr.w	r3, r3, #8
 8003244:	743b      	strb	r3, [r7, #16]


	lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 8003246:	f107 030f 	add.w	r3, r7, #15
 800324a:	4619      	mov	r1, r3
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fb4d 	bl	80038ec <lsm6dsv16x_device_id_get>
	if (acc_whoamI != LSM6DSV16X_ID)
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	2b70      	cmp	r3, #112	@ 0x70
 8003256:	d01f      	beq.n	8003298 <Acc_Init+0x78>
		while (acc_whoamI != LSM6DSV16X_ID)
 8003258:	e01b      	b.n	8003292 <Acc_Init+0x72>
		{
			lsm6dsv16x_device_id_get(acc, &acc_whoamI);
 800325a:	f107 030f 	add.w	r3, r7, #15
 800325e:	4619      	mov	r1, r3
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fb43 	bl	80038ec <lsm6dsv16x_device_id_get>
			wmi_cnt++;
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	3301      	adds	r3, #1
 800326a:	75fb      	strb	r3, [r7, #23]
			if (wmi_cnt == 3)
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d10f      	bne.n	8003292 <Acc_Init+0x72>
			{
				sys.ACC_Present = 0;
 8003272:	4b3e      	ldr	r3, [pc, #248]	@ (800336c <Acc_Init+0x14c>)
 8003274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003278:	461a      	mov	r2, r3
 800327a:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
				flags.ACC_Complete = 1;
 8003286:	4a3a      	ldr	r2, [pc, #232]	@ (8003370 <Acc_Init+0x150>)
 8003288:	7813      	ldrb	r3, [r2, #0]
 800328a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800328e:	7013      	strb	r3, [r2, #0]
 8003290:	e069      	b.n	8003366 <Acc_Init+0x146>
		while (acc_whoamI != LSM6DSV16X_ID)
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	2b70      	cmp	r3, #112	@ 0x70
 8003296:	d1e0      	bne.n	800325a <Acc_Init+0x3a>
				return;
			}
		}
	sys.ACC_Present = 1;
 8003298:	4b34      	ldr	r3, [pc, #208]	@ (800336c <Acc_Init+0x14c>)
 800329a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800329e:	461a      	mov	r2, r3
 80032a0:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	lsm6dsv16x_reset_set(acc, LSM6DSV16X_GLOBAL_RST);
 80032ac:	2101      	movs	r1, #1
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 fa76 	bl	80037a0 <lsm6dsv16x_reset_set>
	do {
		lsm6dsv16x_reset_get(acc, &rst);
 80032b4:	f107 0316 	add.w	r3, r7, #22
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fac0 	bl	8003840 <lsm6dsv16x_reset_get>
		HAL_Delay(10);
 80032c0:	200a      	movs	r0, #10
 80032c2:	f007 fd31 	bl	800ad28 <HAL_Delay>
	} while (rst != LSM6DSV16X_READY);
 80032c6:	7dbb      	ldrb	r3, [r7, #22]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f3      	bne.n	80032b4 <Acc_Init+0x94>

	lsm6dsv16x_block_data_update_set(acc, PROPERTY_ENABLE);
 80032cc:	2101      	movs	r1, #1
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fc09 	bl	8003ae6 <lsm6dsv16x_block_data_update_set>
	lsm6dsv16x_ui_i2c_i3c_mode_set(acc, LSM6DSV16X_I2C_I3C_DISABLE);
 80032d4:	2101      	movs	r1, #1
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fe0f 	bl	8003efa <lsm6dsv16x_ui_i2c_i3c_mode_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_HIGH_PERFORMANCE_MD);
 80032dc:	2100      	movs	r1, #0
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fb66 	bl	80039b0 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_HIGH_PERFORMANCE_MD);
 80032e4:	2100      	movs	r1, #0
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fbd7 	bl	8003a9a <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_fifo_xl_batch_set(acc, LSM6DSV16X_XL_BATCHED_AT_960Hz);
 80032ec:	2109      	movs	r1, #9
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fd91 	bl	8003e16 <lsm6dsv16x_fifo_xl_batch_set>
	lsm6dsv16x_fifo_gy_batch_set(acc, LSM6DSV16X_GY_NOT_BATCHED);
 80032f4:	2100      	movs	r1, #0
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fdb3 	bl	8003e62 <lsm6dsv16x_fifo_gy_batch_set>
	lsm6dsv16x_fifo_mode_set(acc, LSM6DSV16X_BYPASS_MODE);
 80032fc:	2100      	movs	r1, #0
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fdd5 	bl	8003eae <lsm6dsv16x_fifo_mode_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 8003304:	2100      	movs	r1, #0
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fb01 	bl	800390e <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_gy_data_rate_set(acc, LSM6DSV16X_ODR_OFF);
 800330c:	2100      	movs	r1, #0
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fb74 	bl	80039fc <lsm6dsv16x_gy_data_rate_set>
	lsm6dsv16x_odr_trig_cfg_set(acc, 16);  //800SPS
 8003314:	2110      	movs	r1, #16
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fc0b 	bl	8003b32 <lsm6dsv16x_odr_trig_cfg_set>
	lsm6dsv16x_xl_mode_set(acc, LSM6DSV16X_XL_ODR_TRIGGERED_MD);
 800331c:	2103      	movs	r1, #3
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fb46 	bl	80039b0 <lsm6dsv16x_xl_mode_set>
	lsm6dsv16x_gy_mode_set(acc, LSM6DSV16X_GY_ODR_TRIGGERED_MD);
 8003324:	2103      	movs	r1, #3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fbb7 	bl	8003a9a <lsm6dsv16x_gy_mode_set>
	lsm6dsv16x_den_polarity_set(acc, LSM6DSV16X_DEN_ACT_HIGH);
 800332c:	2101      	movs	r1, #1
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fd2b 	bl	8003d8a <lsm6dsv16x_den_polarity_set>
	lsm6dsv16x_xl_data_rate_set(acc, LSM6DSV16X_ODR_AT_960Hz);
 8003334:	2109      	movs	r1, #9
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fae9 	bl	800390e <lsm6dsv16x_xl_data_rate_set>
	lsm6dsv16x_xl_full_scale_set(acc, LSM6DSV16X_2g);
 800333c:	2100      	movs	r1, #0
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fc46 	bl	8003bd0 <lsm6dsv16x_xl_full_scale_set>
	lsm6dsv16x_gy_full_scale_set(acc, LSM6DSV16X_2000dps);
 8003344:	2104      	movs	r1, #4
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fc1c 	bl	8003b84 <lsm6dsv16x_gy_full_scale_set>
	lsm6dsv16x_fifo_watermark_set(acc, ACC_FIFO_WATERMARK);
 800334c:	21c8      	movs	r1, #200	@ 0xc8
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fd41 	bl	8003dd6 <lsm6dsv16x_fifo_watermark_set>
	lsm6dsv16x_pin_int1_route_set(acc, &pin_int);
 8003354:	f107 0310 	add.w	r3, r7, #16
 8003358:	4619      	mov	r1, r3
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fc5e 	bl	8003c1c <lsm6dsv16x_pin_int1_route_set>

	__HAL_GPIO_EXTI_CLEAR_IT(ACC_INTERRUPT);
 8003360:	4b04      	ldr	r3, [pc, #16]	@ (8003374 <Acc_Init+0x154>)
 8003362:	2204      	movs	r2, #4
 8003364:	615a      	str	r2, [r3, #20]
}
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20000740 	.word	0x20000740
 8003370:	20001c68 	.word	0x20001c68
 8003374:	40010400 	.word	0x40010400

08003378 <Config_Init>:

/*-----INIZiALIZZAZIONE CONFIGURAZIONE-----*/
void Config_Init(void)
{
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
    FIL config_file;
    UINT bytes_read;
    UINT bytes_written;

    if (f_open(&config_file, CONFIG_FILE, FA_READ) == FR_OK) 
 8003382:	f107 0318 	add.w	r3, r7, #24
 8003386:	3b0c      	subs	r3, #12
 8003388:	2201      	movs	r2, #1
 800338a:	4963      	ldr	r1, [pc, #396]	@ (8003518 <Config_Init+0x1a0>)
 800338c:	4618      	mov	r0, r3
 800338e:	f006 f9a5 	bl	80096dc <f_open>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d121      	bne.n	80033dc <Config_Init+0x64>
	{
        if (f_read(&config_file, &config, sizeof(config), &bytes_read) == FR_OK && bytes_read == sizeof(config))
 8003398:	f107 0318 	add.w	r3, r7, #24
 800339c:	3b10      	subs	r3, #16
 800339e:	f107 0018 	add.w	r0, r7, #24
 80033a2:	380c      	subs	r0, #12
 80033a4:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80033a8:	495c      	ldr	r1, [pc, #368]	@ (800351c <Config_Init+0x1a4>)
 80033aa:	f006 fb2f 	bl	8009a0c <f_read>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10d      	bne.n	80033d0 <Config_Init+0x58>
 80033b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80033b8:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80033bc:	f5b3 7fb8 	cmp.w	r3, #368	@ 0x170
 80033c0:	d106      	bne.n	80033d0 <Config_Init+0x58>
		{
			f_close(&config_file);
 80033c2:	f107 0318 	add.w	r3, r7, #24
 80033c6:	3b0c      	subs	r3, #12
 80033c8:	4618      	mov	r0, r3
 80033ca:	f006 fe7b 	bl	800a0c4 <f_close>
			return;
 80033ce:	e09e      	b.n	800350e <Config_Init+0x196>
        }
        f_close(&config_file);
 80033d0:	f107 0318 	add.w	r3, r7, #24
 80033d4:	3b0c      	subs	r3, #12
 80033d6:	4618      	mov	r0, r3
 80033d8:	f006 fe74 	bl	800a0c4 <f_close>
    }

    config.device_id = 0;
 80033dc:	4b4f      	ldr	r3, [pc, #316]	@ (800351c <Config_Init+0x1a4>)
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
	config.samp_freq = 800;
 80033e2:	4b4e      	ldr	r3, [pc, #312]	@ (800351c <Config_Init+0x1a4>)
 80033e4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80033e8:	805a      	strh	r2, [r3, #2]
	config.buffering_secs = 30;
 80033ea:	4b4c      	ldr	r3, [pc, #304]	@ (800351c <Config_Init+0x1a4>)
 80033ec:	221e      	movs	r2, #30
 80033ee:	711a      	strb	r2, [r3, #4]
	config.connection_timeout = 60000;
 80033f0:	4b4a      	ldr	r3, [pc, #296]	@ (800351c <Config_Init+0x1a4>)
 80033f2:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80033f6:	609a      	str	r2, [r3, #8]
	config.hammer_th = 2048;
 80033f8:	4b48      	ldr	r3, [pc, #288]	@ (800351c <Config_Init+0x1a4>)
 80033fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033fe:	819a      	strh	r2, [r3, #12]
    for(int i = 0; i < 24; i++) 
 8003400:	2300      	movs	r3, #0
 8003402:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8003406:	f102 0214 	add.w	r2, r2, #20
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	e021      	b.n	8003452 <Config_Init+0xda>
	{
        config.low_th[i] = 0;
 800340e:	4a43      	ldr	r2, [pc, #268]	@ (800351c <Config_Init+0x1a4>)
 8003410:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003414:	f103 0314 	add.w	r3, r3, #20
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3304      	adds	r3, #4
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	2200      	movs	r2, #0
 8003422:	80da      	strh	r2, [r3, #6]
        config.high_th[i] = 4096;
 8003424:	4a3d      	ldr	r2, [pc, #244]	@ (800351c <Config_Init+0x1a4>)
 8003426:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800342a:	f103 0314 	add.w	r3, r3, #20
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	331c      	adds	r3, #28
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800343a:	80da      	strh	r2, [r3, #6]
    for(int i = 0; i < 24; i++) 
 800343c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003440:	f103 0314 	add.w	r3, r3, #20
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3301      	adds	r3, #1
 8003448:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800344c:	f102 0214 	add.w	r2, r2, #20
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8003456:	f103 0314 	add.w	r3, r3, #20
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b17      	cmp	r3, #23
 800345e:	ddd6      	ble.n	800340e <Config_Init+0x96>
    }
    strcpy(config.data_topic, "Data_Topic");
 8003460:	4a2f      	ldr	r2, [pc, #188]	@ (8003520 <Config_Init+0x1a8>)
 8003462:	4b30      	ldr	r3, [pc, #192]	@ (8003524 <Config_Init+0x1ac>)
 8003464:	cb03      	ldmia	r3!, {r0, r1}
 8003466:	6010      	str	r0, [r2, #0]
 8003468:	6051      	str	r1, [r2, #4]
 800346a:	8819      	ldrh	r1, [r3, #0]
 800346c:	789b      	ldrb	r3, [r3, #2]
 800346e:	8111      	strh	r1, [r2, #8]
 8003470:	7293      	strb	r3, [r2, #10]
    strcpy(config.command_topic, "Command_Topic");  
 8003472:	4a2d      	ldr	r2, [pc, #180]	@ (8003528 <Config_Init+0x1b0>)
 8003474:	4b2d      	ldr	r3, [pc, #180]	@ (800352c <Config_Init+0x1b4>)
 8003476:	4614      	mov	r4, r2
 8003478:	cb07      	ldmia	r3!, {r0, r1, r2}
 800347a:	6020      	str	r0, [r4, #0]
 800347c:	6061      	str	r1, [r4, #4]
 800347e:	60a2      	str	r2, [r4, #8]
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	81a3      	strh	r3, [r4, #12]
    strcpy(config.ota_topic, "OTA_Topic");
 8003484:	4a2a      	ldr	r2, [pc, #168]	@ (8003530 <Config_Init+0x1b8>)
 8003486:	4b2b      	ldr	r3, [pc, #172]	@ (8003534 <Config_Init+0x1bc>)
 8003488:	cb03      	ldmia	r3!, {r0, r1}
 800348a:	6010      	str	r0, [r2, #0]
 800348c:	6051      	str	r1, [r2, #4]
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	8113      	strh	r3, [r2, #8]
	strcpy(config.info_topic, "Info_Topic");
 8003492:	4a29      	ldr	r2, [pc, #164]	@ (8003538 <Config_Init+0x1c0>)
 8003494:	4b29      	ldr	r3, [pc, #164]	@ (800353c <Config_Init+0x1c4>)
 8003496:	cb03      	ldmia	r3!, {r0, r1}
 8003498:	6010      	str	r0, [r2, #0]
 800349a:	6051      	str	r1, [r2, #4]
 800349c:	8819      	ldrh	r1, [r3, #0]
 800349e:	789b      	ldrb	r3, [r3, #2]
 80034a0:	8111      	strh	r1, [r2, #8]
 80034a2:	7293      	strb	r3, [r2, #10]
    
    if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) != FR_OK)
 80034a4:	f107 0318 	add.w	r3, r7, #24
 80034a8:	3b0c      	subs	r3, #12
 80034aa:	220a      	movs	r2, #10
 80034ac:	491a      	ldr	r1, [pc, #104]	@ (8003518 <Config_Init+0x1a0>)
 80034ae:	4618      	mov	r0, r3
 80034b0:	f006 f914 	bl	80096dc <f_open>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d128      	bne.n	800350c <Config_Init+0x194>
    {
        return;
    }

    if (f_write(&config_file, &config, sizeof(Config_Typedef), &bytes_written) != FR_OK || bytes_written != sizeof(Config_Typedef)) 
 80034ba:	f107 0318 	add.w	r3, r7, #24
 80034be:	3b14      	subs	r3, #20
 80034c0:	f107 0018 	add.w	r0, r7, #24
 80034c4:	380c      	subs	r0, #12
 80034c6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80034ca:	4914      	ldr	r1, [pc, #80]	@ (800351c <Config_Init+0x1a4>)
 80034cc:	f006 fbf1 	bl	8009cb2 <f_write>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <Config_Init+0x16c>
 80034d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80034da:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80034de:	f5b3 7fb8 	cmp.w	r3, #368	@ 0x170
 80034e2:	d006      	beq.n	80034f2 <Config_Init+0x17a>
	{
        f_close(&config_file);
 80034e4:	f107 0318 	add.w	r3, r7, #24
 80034e8:	3b0c      	subs	r3, #12
 80034ea:	4618      	mov	r0, r3
 80034ec:	f006 fdea 	bl	800a0c4 <f_close>
        return;
 80034f0:	e00d      	b.n	800350e <Config_Init+0x196>
    }
    
    f_sync(&config_file);
 80034f2:	f107 0318 	add.w	r3, r7, #24
 80034f6:	3b0c      	subs	r3, #12
 80034f8:	4618      	mov	r0, r3
 80034fa:	f006 fd63 	bl	8009fc4 <f_sync>
    f_close(&config_file);
 80034fe:	f107 0318 	add.w	r3, r7, #24
 8003502:	3b0c      	subs	r3, #12
 8003504:	4618      	mov	r0, r3
 8003506:	f006 fddd 	bl	800a0c4 <f_close>
 800350a:	e000      	b.n	800350e <Config_Init+0x196>
        return;
 800350c:	bf00      	nop
}
 800350e:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	bd90      	pop	{r4, r7, pc}
 8003518:	08017330 	.word	0x08017330
 800351c:	20001c6c 	.word	0x20001c6c
 8003520:	20001cda 	.word	0x20001cda
 8003524:	08017344 	.word	0x08017344
 8003528:	20001d1a 	.word	0x20001d1a
 800352c:	08017350 	.word	0x08017350
 8003530:	20001d5a 	.word	0x20001d5a
 8003534:	08017360 	.word	0x08017360
 8003538:	20001d9a 	.word	0x20001d9a
 800353c:	0801736c 	.word	0x0801736c

08003540 <LED_Start>:
#include "leds.h"
#include "peripherals.h"

/*------ACCENSIONE LED------*/
void LED_Start(uint32_t LED, uint8_t freq, uint8_t duty)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	70fb      	strb	r3, [r7, #3]
 800354c:	4613      	mov	r3, r2
 800354e:	70bb      	strb	r3, [r7, #2]
    TIM_HandleTypeDef *htim = LED_TIMER;
 8003550:	4b6f      	ldr	r3, [pc, #444]	@ (8003710 <LED_Start+0x1d0>)
 8003552:	60fb      	str	r3, [r7, #12]
	uint16_t pulse = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	82fb      	strh	r3, [r7, #22]

    uint16_t prescaler = (uint16_t)(SystemCoreClock / 5000 - 1);
 8003558:	4b6e      	ldr	r3, [pc, #440]	@ (8003714 <LED_Start+0x1d4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a6e      	ldr	r2, [pc, #440]	@ (8003718 <LED_Start+0x1d8>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	0b1b      	lsrs	r3, r3, #12
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	82bb      	strh	r3, [r7, #20]
    uint16_t period = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	827b      	strh	r3, [r7, #18]

    switch(freq)
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	2b03      	cmp	r3, #3
 8003572:	f200 80c3 	bhi.w	80036fc <LED_Start+0x1bc>
 8003576:	a201      	add	r2, pc, #4	@ (adr r2, 800357c <LED_Start+0x3c>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	0800358d 	.word	0x0800358d
 8003580:	08003599 	.word	0x08003599
 8003584:	080035a1 	.word	0x080035a1
 8003588:	080035d9 	.word	0x080035d9
    {
        case FAST:  
            period = (uint16_t)((prescaler / 2) - 1);
 800358c:	8abb      	ldrh	r3, [r7, #20]
 800358e:	085b      	lsrs	r3, r3, #1
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	827b      	strh	r3, [r7, #18]
            break;
 8003596:	e03b      	b.n	8003610 <LED_Start+0xd0>
        case MEDIUM:
            period = (uint16_t)(prescaler / 1 - 1);
 8003598:	8abb      	ldrh	r3, [r7, #20]
 800359a:	3b01      	subs	r3, #1
 800359c:	827b      	strh	r3, [r7, #18]
            break;
 800359e:	e037      	b.n	8003610 <LED_Start+0xd0>
        case SLOW:
            prescaler = (uint16_t)(SystemCoreClock / 0.5 - 1);
 80035a0:	4b5c      	ldr	r3, [pc, #368]	@ (8003714 <LED_Start+0x1d4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc ffbd 	bl	8000524 <__aeabi_ui2d>
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	4b5b      	ldr	r3, [pc, #364]	@ (800371c <LED_Start+0x1dc>)
 80035b0:	f7fd f95c 	bl	800086c <__aeabi_ddiv>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4610      	mov	r0, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	4b57      	ldr	r3, [pc, #348]	@ (8003720 <LED_Start+0x1e0>)
 80035c2:	f7fc fe71 	bl	80002a8 <__aeabi_dsub>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	f7fd fa35 	bl	8000a3c <__aeabi_d2uiz>
 80035d2:	4603      	mov	r3, r0
 80035d4:	82bb      	strh	r3, [r7, #20]
            break;
 80035d6:	e01b      	b.n	8003610 <LED_Start+0xd0>
        case VERY_SLOW:
            prescaler = (uint16_t)(SystemCoreClock / 0.1 - 1);
 80035d8:	4b4e      	ldr	r3, [pc, #312]	@ (8003714 <LED_Start+0x1d4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ffa1 	bl	8000524 <__aeabi_ui2d>
 80035e2:	a349      	add	r3, pc, #292	@ (adr r3, 8003708 <LED_Start+0x1c8>)
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f7fd f940 	bl	800086c <__aeabi_ddiv>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4610      	mov	r0, r2
 80035f2:	4619      	mov	r1, r3
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	4b49      	ldr	r3, [pc, #292]	@ (8003720 <LED_Start+0x1e0>)
 80035fa:	f7fc fe55 	bl	80002a8 <__aeabi_dsub>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	f7fd fa19 	bl	8000a3c <__aeabi_d2uiz>
 800360a:	4603      	mov	r3, r0
 800360c:	82bb      	strh	r3, [r7, #20]
            break;
 800360e:	bf00      	nop
        default:
            return;
    }

	switch(duty)
 8003610:	78bb      	ldrb	r3, [r7, #2]
 8003612:	3b04      	subs	r3, #4
 8003614:	2b03      	cmp	r3, #3
 8003616:	d873      	bhi.n	8003700 <LED_Start+0x1c0>
 8003618:	a201      	add	r2, pc, #4	@ (adr r2, 8003620 <LED_Start+0xe0>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003631 	.word	0x08003631
 8003624:	08003637 	.word	0x08003637
 8003628:	0800364b 	.word	0x0800364b
 800362c:	08003653 	.word	0x08003653
	{
		case FULL:
			pulse = period; 
 8003630:	8a7b      	ldrh	r3, [r7, #18]
 8003632:	82fb      	strh	r3, [r7, #22]
		    break;
 8003634:	e011      	b.n	800365a <LED_Start+0x11a>
        case HIGH:
			pulse = period * 3 / 4;
 8003636:	8a7a      	ldrh	r2, [r7, #18]
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	da00      	bge.n	8003644 <LED_Start+0x104>
 8003642:	3303      	adds	r3, #3
 8003644:	109b      	asrs	r3, r3, #2
 8003646:	82fb      	strh	r3, [r7, #22]
			break;
 8003648:	e007      	b.n	800365a <LED_Start+0x11a>
		case HALF:
			pulse = period / 2;
 800364a:	8a7b      	ldrh	r3, [r7, #18]
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	82fb      	strh	r3, [r7, #22]
			break;
 8003650:	e003      	b.n	800365a <LED_Start+0x11a>
		case LOW:
			pulse = period / 4;
 8003652:	8a7b      	ldrh	r3, [r7, #18]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	82fb      	strh	r3, [r7, #22]
			break;
 8003658:	bf00      	nop
        default:
            return;
	}

    // Imposta periodo e prescaler
    htim->Instance->PSC = prescaler;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	8aba      	ldrh	r2, [r7, #20]
 8003660:	629a      	str	r2, [r3, #40]	@ 0x28
    htim->Instance->ARR = period;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	8a7a      	ldrh	r2, [r7, #18]
 8003668:	62da      	str	r2, [r3, #44]	@ 0x2c
    htim->Instance->CCR1 = (LED == GRN_LED) ? pulse : htim->Instance->CCR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d101      	bne.n	8003674 <LED_Start+0x134>
 8003670:	8afb      	ldrh	r3, [r7, #22]
 8003672:	e002      	b.n	800367a <LED_Start+0x13a>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	6353      	str	r3, [r2, #52]	@ 0x34
    htim->Instance->CCR2 = (LED == ORG_LED) ? pulse : htim->Instance->CCR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <LED_Start+0x14a>
 8003686:	8afb      	ldrh	r3, [r7, #22]
 8003688:	e002      	b.n	8003690 <LED_Start+0x150>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	6393      	str	r3, [r2, #56]	@ 0x38
    htim->Instance->CCR3 = (LED == RED_LED) ? pulse : htim->Instance->CCR3;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b04      	cmp	r3, #4
 800369a:	d101      	bne.n	80036a0 <LED_Start+0x160>
 800369c:	8afb      	ldrh	r3, [r7, #22]
 800369e:	e002      	b.n	80036a6 <LED_Start+0x166>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	63d3      	str	r3, [r2, #60]	@ 0x3c

    // Avvia PWM solo se non già attivo
    switch(LED)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d009      	beq.n	80036c6 <LED_Start+0x186>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d824      	bhi.n	8003702 <LED_Start+0x1c2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00c      	beq.n	80036d8 <LED_Start+0x198>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d012      	beq.n	80036ea <LED_Start+0x1aa>
 80036c4:	e01d      	b.n	8003702 <LED_Start+0x1c2>
    {
        case GRN_LED:
            htim->Instance->CCER |= TIM_CCER_CC1E;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0201 	orr.w	r2, r2, #1
 80036d4:	621a      	str	r2, [r3, #32]
            break;
 80036d6:	e014      	b.n	8003702 <LED_Start+0x1c2>
        case ORG_LED:
            htim->Instance->CCER |= TIM_CCER_CC2E;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6a1a      	ldr	r2, [r3, #32]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0210 	orr.w	r2, r2, #16
 80036e6:	621a      	str	r2, [r3, #32]
            break;
 80036e8:	e00b      	b.n	8003702 <LED_Start+0x1c2>
        case RED_LED:
            htim->Instance->CCER |= TIM_CCER_CC3E;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6a1a      	ldr	r2, [r3, #32]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036f8:	621a      	str	r2, [r3, #32]
            break;
 80036fa:	e002      	b.n	8003702 <LED_Start+0x1c2>
            return;
 80036fc:	bf00      	nop
 80036fe:	e000      	b.n	8003702 <LED_Start+0x1c2>
            return;
 8003700:	bf00      	nop
    }
}
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	9999999a 	.word	0x9999999a
 800370c:	3fb99999 	.word	0x3fb99999
 8003710:	2000046c 	.word	0x2000046c
 8003714:	20000168 	.word	0x20000168
 8003718:	d1b71759 	.word	0xd1b71759
 800371c:	3fe00000 	.word	0x3fe00000
 8003720:	3ff00000 	.word	0x3ff00000

08003724 <LED_Stop>:

/*------SPEGNIMENTO LED------*/
void LED_Stop(uint32_t LED)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(LED_TIMER, LED);
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4803      	ldr	r0, [pc, #12]	@ (800373c <LED_Stop+0x18>)
 8003730:	f00f fa2c 	bl	8012b8c <HAL_TIM_PWM_Stop>
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	2000046c 	.word	0x2000046c

08003740 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	461a      	mov	r2, r3
 800374c:	460b      	mov	r3, r1
 800374e:	72fb      	strb	r3, [r7, #11]
 8003750:	4613      	mov	r3, r2
 8003752:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685c      	ldr	r4, [r3, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	68d8      	ldr	r0, [r3, #12]
 800375c:	893b      	ldrh	r3, [r7, #8]
 800375e:	7af9      	ldrb	r1, [r7, #11]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	47a0      	blx	r4
 8003764:	6178      	str	r0, [r7, #20]

  return ret;
 8003766:	697b      	ldr	r3, [r7, #20]
}
 8003768:	4618      	mov	r0, r3
 800376a:	371c      	adds	r7, #28
 800376c:	46bd      	mov	sp, r7
 800376e:	bd90      	pop	{r4, r7, pc}

08003770 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	461a      	mov	r2, r3
 800377c:	460b      	mov	r3, r1
 800377e:	72fb      	strb	r3, [r7, #11]
 8003780:	4613      	mov	r3, r2
 8003782:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681c      	ldr	r4, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	68d8      	ldr	r0, [r3, #12]
 800378c:	893b      	ldrh	r3, [r7, #8]
 800378e:	7af9      	ldrb	r1, [r7, #11]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	47a0      	blx	r4
 8003794:	6178      	str	r0, [r7, #20]

  return ret;
 8003796:	697b      	ldr	r3, [r7, #20]
}
 8003798:	4618      	mov	r0, r3
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	bd90      	pop	{r4, r7, pc}

080037a0 <lsm6dsv16x_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_set(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t val)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80037ac:	f107 020c 	add.w	r2, r7, #12
 80037b0:	2301      	movs	r3, #1
 80037b2:	2112      	movs	r1, #18
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ffc3 	bl	8003740 <lsm6dsv16x_read_reg>
 80037ba:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80037bc:	f107 0210 	add.w	r2, r7, #16
 80037c0:	2301      	movs	r3, #1
 80037c2:	2101      	movs	r1, #1
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ffbb 	bl	8003740 <lsm6dsv16x_read_reg>
 80037ca:	4602      	mov	r2, r0
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	4413      	add	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <lsm6dsv16x_reset_set+0x3c>
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	e02d      	b.n	8003838 <lsm6dsv16x_reset_set+0x98>

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	089b      	lsrs	r3, r3, #2
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	7b3b      	ldrb	r3, [r7, #12]
 80037e8:	f362 13c7 	bfi	r3, r2, #7, #1
 80037ec:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	085b      	lsrs	r3, r3, #1
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	7b3b      	ldrb	r3, [r7, #12]
 80037fa:	f362 0300 	bfi	r3, r2, #0, #1
 80037fe:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	b2da      	uxtb	r2, r3
 8003808:	7c3b      	ldrb	r3, [r7, #16]
 800380a:	f362 0382 	bfi	r3, r2, #2, #1
 800380e:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003810:	f107 020c 	add.w	r2, r7, #12
 8003814:	2301      	movs	r3, #1
 8003816:	2112      	movs	r1, #18
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ffa9 	bl	8003770 <lsm6dsv16x_write_reg>
 800381e:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003820:	f107 0210 	add.w	r2, r7, #16
 8003824:	2301      	movs	r3, #1
 8003826:	2101      	movs	r1, #1
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ffa1 	bl	8003770 <lsm6dsv16x_write_reg>
 800382e:	4602      	mov	r2, r0
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	4413      	add	r3, r2
 8003834:	617b      	str	r3, [r7, #20]

  return ret;
 8003836:	697b      	ldr	r3, [r7, #20]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <lsm6dsv16x_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_reset_get(stmdev_ctx_t *ctx, lsm6dsv16x_reset_t *val)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800384a:	f107 020c 	add.w	r2, r7, #12
 800384e:	2301      	movs	r3, #1
 8003850:	2112      	movs	r1, #18
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ff74 	bl	8003740 <lsm6dsv16x_read_reg>
 8003858:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800385a:	f107 0210 	add.w	r2, r7, #16
 800385e:	2301      	movs	r3, #1
 8003860:	2101      	movs	r1, #1
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ff6c 	bl	8003740 <lsm6dsv16x_read_reg>
 8003868:	4602      	mov	r2, r0
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4413      	add	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <lsm6dsv16x_reset_get+0x3a>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	e033      	b.n	80038e2 <lsm6dsv16x_reset_get+0xa2>

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 800387a:	7b3b      	ldrb	r3, [r7, #12]
 800387c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	009a      	lsls	r2, r3, #2
 8003884:	7b3b      	ldrb	r3, [r7, #12]
 8003886:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800388a:	b2db      	uxtb	r3, r3
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	7c3a      	ldrb	r2, [r7, #16]
 8003892:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	4413      	add	r3, r2
 800389a:	2b04      	cmp	r3, #4
 800389c:	d81c      	bhi.n	80038d8 <lsm6dsv16x_reset_get+0x98>
 800389e:	a201      	add	r2, pc, #4	@ (adr r2, 80038a4 <lsm6dsv16x_reset_get+0x64>)
 80038a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a4:	080038b9 	.word	0x080038b9
 80038a8:	080038c1 	.word	0x080038c1
 80038ac:	080038c9 	.word	0x080038c9
 80038b0:	080038d9 	.word	0x080038d9
 80038b4:	080038d1 	.word	0x080038d1
  {
    case LSM6DSV16X_READY:
      *val = LSM6DSV16X_READY;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
      break;
 80038be:	e00f      	b.n	80038e0 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_GLOBAL_RST:
      *val = LSM6DSV16X_GLOBAL_RST;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
      break;
 80038c6:	e00b      	b.n	80038e0 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CAL_PARAM:
      *val = LSM6DSV16X_RESTORE_CAL_PARAM;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2202      	movs	r2, #2
 80038cc:	701a      	strb	r2, [r3, #0]
      break;
 80038ce:	e007      	b.n	80038e0 <lsm6dsv16x_reset_get+0xa0>

    case LSM6DSV16X_RESTORE_CTRL_REGS:
      *val = LSM6DSV16X_RESTORE_CTRL_REGS;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2204      	movs	r2, #4
 80038d4:	701a      	strb	r2, [r3, #0]
      break;
 80038d6:	e003      	b.n	80038e0 <lsm6dsv16x_reset_get+0xa0>

    default:
      *val = LSM6DSV16X_GLOBAL_RST;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2201      	movs	r2, #1
 80038dc:	701a      	strb	r2, [r3, #0]
      break;
 80038de:	bf00      	nop
  }

  return ret;
 80038e0:	697b      	ldr	r3, [r7, #20]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop

080038ec <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 80038f6:	2301      	movs	r3, #1
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	210f      	movs	r1, #15
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff1f 	bl	8003740 <lsm6dsv16x_read_reg>
 8003902:	60f8      	str	r0, [r7, #12]

  return ret;
 8003904:	68fb      	ldr	r3, [r7, #12]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	460b      	mov	r3, r1
 8003918:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800391a:	f107 0210 	add.w	r2, r7, #16
 800391e:	2301      	movs	r3, #1
 8003920:	2110      	movs	r1, #16
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ff0c 	bl	8003740 <lsm6dsv16x_read_reg>
 8003928:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <lsm6dsv16x_xl_data_rate_set+0x26>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	e039      	b.n	80039a8 <lsm6dsv16x_xl_data_rate_set+0x9a>

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	b2da      	uxtb	r2, r3
 800393c:	7c3b      	ldrb	r3, [r7, #16]
 800393e:	f362 0303 	bfi	r3, r2, #0, #4
 8003942:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8003944:	f107 0210 	add.w	r2, r7, #16
 8003948:	2301      	movs	r3, #1
 800394a:	2110      	movs	r1, #16
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff0f 	bl	8003770 <lsm6dsv16x_write_reg>
 8003952:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <lsm6dsv16x_xl_data_rate_set+0x50>
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	e024      	b.n	80039a8 <lsm6dsv16x_xl_data_rate_set+0x9a>

  sel = ((uint8_t)val >> 4) & 0xFU;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8003964:	7cfb      	ldrb	r3, [r7, #19]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d01d      	beq.n	80039a6 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800396a:	f107 020c 	add.w	r2, r7, #12
 800396e:	2301      	movs	r3, #1
 8003970:	2162      	movs	r1, #98	@ 0x62
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff fee4 	bl	8003740 <lsm6dsv16x_read_reg>
 8003978:	4602      	mov	r2, r0
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	4413      	add	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8003980:	7cfb      	ldrb	r3, [r7, #19]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	b2da      	uxtb	r2, r3
 8003988:	7b3b      	ldrb	r3, [r7, #12]
 800398a:	f362 0301 	bfi	r3, r2, #0, #2
 800398e:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003990:	f107 020c 	add.w	r2, r7, #12
 8003994:	2301      	movs	r3, #1
 8003996:	2162      	movs	r1, #98	@ 0x62
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff fee9 	bl	8003770 <lsm6dsv16x_write_reg>
 800399e:	4602      	mov	r2, r0
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	4413      	add	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80039a6:	697b      	ldr	r3, [r7, #20]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <lsm6dsv16x_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_xl_mode_t val)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80039bc:	f107 0208 	add.w	r2, r7, #8
 80039c0:	2301      	movs	r3, #1
 80039c2:	2110      	movs	r1, #16
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff febb 	bl	8003740 <lsm6dsv16x_read_reg>
 80039ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10f      	bne.n	80039f2 <lsm6dsv16x_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	7a3b      	ldrb	r3, [r7, #8]
 80039dc:	f362 1306 	bfi	r3, r2, #4, #3
 80039e0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80039e2:	f107 0208 	add.w	r2, r7, #8
 80039e6:	2301      	movs	r3, #1
 80039e8:	2110      	movs	r1, #16
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff fec0 	bl	8003770 <lsm6dsv16x_write_reg>
 80039f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80039f2:	68fb      	ldr	r3, [r7, #12]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003a08:	f107 0210 	add.w	r2, r7, #16
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	2111      	movs	r1, #17
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff fe95 	bl	8003740 <lsm6dsv16x_read_reg>
 8003a16:	6178      	str	r0, [r7, #20]
  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	7c3b      	ldrb	r3, [r7, #16]
 8003a22:	f362 0303 	bfi	r3, r2, #0, #4
 8003a26:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003a28:	f107 0210 	add.w	r2, r7, #16
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	2111      	movs	r1, #17
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fe9d 	bl	8003770 <lsm6dsv16x_write_reg>
 8003a36:	4602      	mov	r2, r0
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <lsm6dsv16x_gy_data_rate_set+0x4c>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	e024      	b.n	8003a92 <lsm6dsv16x_gy_data_rate_set+0x96>

  sel = ((uint8_t)val >> 4) & 0xFU;
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8003a4e:	7cfb      	ldrb	r3, [r7, #19]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01d      	beq.n	8003a90 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003a54:	f107 020c 	add.w	r2, r7, #12
 8003a58:	2301      	movs	r3, #1
 8003a5a:	2162      	movs	r1, #98	@ 0x62
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff fe6f 	bl	8003740 <lsm6dsv16x_read_reg>
 8003a62:	4602      	mov	r2, r0
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	4413      	add	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8003a6a:	7cfb      	ldrb	r3, [r7, #19]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	7b3b      	ldrb	r3, [r7, #12]
 8003a74:	f362 0301 	bfi	r3, r2, #0, #2
 8003a78:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8003a7a:	f107 020c 	add.w	r2, r7, #12
 8003a7e:	2301      	movs	r3, #1
 8003a80:	2162      	movs	r1, #98	@ 0x62
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff fe74 	bl	8003770 <lsm6dsv16x_write_reg>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003a90:	697b      	ldr	r3, [r7, #20]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <lsm6dsv16x_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_gy_mode_t val)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003aa6:	f107 0208 	add.w	r2, r7, #8
 8003aaa:	2301      	movs	r3, #1
 8003aac:	2111      	movs	r1, #17
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff fe46 	bl	8003740 <lsm6dsv16x_read_reg>
 8003ab4:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10f      	bne.n	8003adc <lsm6dsv16x_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	7a3b      	ldrb	r3, [r7, #8]
 8003ac6:	f362 1306 	bfi	r3, r2, #4, #3
 8003aca:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8003acc:	f107 0208 	add.w	r2, r7, #8
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	2111      	movs	r1, #17
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff fe4b 	bl	8003770 <lsm6dsv16x_write_reg>
 8003ada:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003adc:	68fb      	ldr	r3, [r7, #12]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	460b      	mov	r3, r1
 8003af0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003af2:	f107 0208 	add.w	r2, r7, #8
 8003af6:	2301      	movs	r3, #1
 8003af8:	2112      	movs	r1, #18
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fe20 	bl	8003740 <lsm6dsv16x_read_reg>
 8003b00:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10f      	bne.n	8003b28 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	7a3b      	ldrb	r3, [r7, #8]
 8003b12:	f362 1386 	bfi	r3, r2, #6, #1
 8003b16:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8003b18:	f107 0208 	add.w	r2, r7, #8
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	2112      	movs	r1, #18
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff fe25 	bl	8003770 <lsm6dsv16x_write_reg>
 8003b26:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b28:	68fb      	ldr	r3, [r7, #12]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <lsm6dsv16x_odr_trig_cfg_set>:
  * @param  val      number of data in the reference period.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_odr_trig_cfg_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_odr_trig_cfg_t odr_trig;
  int32_t ret;

  if (val >= 1U && val <= 3U) {
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d802      	bhi.n	8003b50 <lsm6dsv16x_odr_trig_cfg_set+0x1e>
    return -1;
 8003b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4e:	e015      	b.n	8003b7c <lsm6dsv16x_odr_trig_cfg_set+0x4a>
  }

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8003b50:	f107 0208 	add.w	r2, r7, #8
 8003b54:	2301      	movs	r3, #1
 8003b56:	2106      	movs	r1, #6
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff fdf1 	bl	8003740 <lsm6dsv16x_read_reg>
 8003b5e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <lsm6dsv16x_odr_trig_cfg_set+0x48>
  {
    odr_trig.odr_trig_nodr = val;
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_ODR_TRIG_CFG, (uint8_t *)&odr_trig, 1);
 8003b6a:	f107 0208 	add.w	r2, r7, #8
 8003b6e:	2301      	movs	r3, #1
 8003b70:	2106      	movs	r1, #6
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff fdfc 	bl	8003770 <lsm6dsv16x_write_reg>
 8003b78:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8003b90:	f107 0208 	add.w	r2, r7, #8
 8003b94:	2301      	movs	r3, #1
 8003b96:	2115      	movs	r1, #21
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fdd1 	bl	8003740 <lsm6dsv16x_read_reg>
 8003b9e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10f      	bne.n	8003bc6 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	7a3b      	ldrb	r3, [r7, #8]
 8003bb0:	f362 0303 	bfi	r3, r2, #0, #4
 8003bb4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8003bb6:	f107 0208 	add.w	r2, r7, #8
 8003bba:	2301      	movs	r3, #1
 8003bbc:	2115      	movs	r1, #21
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fdd6 	bl	8003770 <lsm6dsv16x_write_reg>
 8003bc4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003bdc:	f107 0208 	add.w	r2, r7, #8
 8003be0:	2301      	movs	r3, #1
 8003be2:	2117      	movs	r1, #23
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff fdab 	bl	8003740 <lsm6dsv16x_read_reg>
 8003bea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	7a3b      	ldrb	r3, [r7, #8]
 8003bfc:	f362 0301 	bfi	r3, r2, #0, #2
 8003c00:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8003c02:	f107 0208 	add.w	r2, r7, #8
 8003c06:	2301      	movs	r3, #1
 8003c08:	2117      	movs	r1, #23
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff fdb0 	bl	8003770 <lsm6dsv16x_write_reg>
 8003c10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003c12:	68fb      	ldr	r3, [r7, #12]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <lsm6dsv16x_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsv16x_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      lsm6dsv16x_pin_int_route_t *val)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_int1_ctrl_t          int1_ctrl;
  lsm6dsv16x_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003c26:	f107 0210 	add.w	r2, r7, #16
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	210d      	movs	r1, #13
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff fd86 	bl	8003740 <lsm6dsv16x_read_reg>
 8003c34:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <lsm6dsv16x_pin_int1_route_set+0x24>
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	e0a0      	b.n	8003d82 <lsm6dsv16x_pin_int1_route_set+0x166>

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	7c3b      	ldrb	r3, [r7, #16]
 8003c4c:	f362 0300 	bfi	r3, r2, #0, #1
 8003c50:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_drdy_g        = val->drdy_g;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	7c3b      	ldrb	r3, [r7, #16]
 8003c5e:	f362 0341 	bfi	r3, r2, #1, #1
 8003c62:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	7c3b      	ldrb	r3, [r7, #16]
 8003c70:	f362 03c3 	bfi	r3, r2, #3, #1
 8003c74:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	7c3b      	ldrb	r3, [r7, #16]
 8003c82:	f362 1304 	bfi	r3, r2, #4, #1
 8003c86:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	7c3b      	ldrb	r3, [r7, #16]
 8003c94:	f362 1345 	bfi	r3, r2, #5, #1
 8003c98:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->cnt_bdr;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	7c3b      	ldrb	r3, [r7, #16]
 8003ca6:	f362 1386 	bfi	r3, r2, #6, #1
 8003caa:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003cac:	f107 0210 	add.w	r2, r7, #16
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	210d      	movs	r1, #13
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff fd5b 	bl	8003770 <lsm6dsv16x_write_reg>
 8003cba:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <lsm6dsv16x_pin_int1_route_set+0xaa>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	e05d      	b.n	8003d82 <lsm6dsv16x_pin_int1_route_set+0x166>

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003cc6:	f107 020c 	add.w	r2, r7, #12
 8003cca:	2301      	movs	r3, #1
 8003ccc:	215e      	movs	r1, #94	@ 0x5e
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff fd36 	bl	8003740 <lsm6dsv16x_read_reg>
 8003cd4:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <lsm6dsv16x_pin_int1_route_set+0xc4>
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	e050      	b.n	8003d82 <lsm6dsv16x_pin_int1_route_set+0x166>

  md1_cfg.int1_shub            = val->shub;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	785b      	ldrb	r3, [r3, #1]
 8003ce4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	7b3b      	ldrb	r3, [r7, #12]
 8003cec:	f362 0300 	bfi	r3, r2, #0, #1
 8003cf0:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_emb_func        = val->emb_func;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	785b      	ldrb	r3, [r3, #1]
 8003cf6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	7b3b      	ldrb	r3, [r7, #12]
 8003cfe:	f362 0341 	bfi	r3, r2, #1, #1
 8003d02:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_6d              = val->sixd;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	785b      	ldrb	r3, [r3, #1]
 8003d08:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	7b3b      	ldrb	r3, [r7, #12]
 8003d10:	f362 0382 	bfi	r3, r2, #2, #1
 8003d14:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_single_tap      = val->single_tap;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	785b      	ldrb	r3, [r3, #1]
 8003d1a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	7b3b      	ldrb	r3, [r7, #12]
 8003d22:	f362 1386 	bfi	r3, r2, #6, #1
 8003d26:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_double_tap      = val->double_tap;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	785b      	ldrb	r3, [r3, #1]
 8003d2c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	7b3b      	ldrb	r3, [r7, #12]
 8003d34:	f362 03c3 	bfi	r3, r2, #3, #1
 8003d38:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_wu              = val->wakeup;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	785b      	ldrb	r3, [r3, #1]
 8003d3e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	7b3b      	ldrb	r3, [r7, #12]
 8003d46:	f362 1345 	bfi	r3, r2, #5, #1
 8003d4a:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_ff              = val->freefall;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	7b3b      	ldrb	r3, [r7, #12]
 8003d58:	f362 1304 	bfi	r3, r2, #4, #1
 8003d5c:	733b      	strb	r3, [r7, #12]
  md1_cfg.int1_sleep_change    = val->sleep_change;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	789b      	ldrb	r3, [r3, #2]
 8003d62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	7b3b      	ldrb	r3, [r7, #12]
 8003d6a:	f362 13c7 	bfi	r3, r2, #7, #1
 8003d6e:	733b      	strb	r3, [r7, #12]

  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003d70:	f107 020c 	add.w	r2, r7, #12
 8003d74:	2301      	movs	r3, #1
 8003d76:	215e      	movs	r1, #94	@ 0x5e
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff fcf9 	bl	8003770 <lsm6dsv16x_write_reg>
 8003d7e:	6178      	str	r0, [r7, #20]

  return ret;
 8003d80:	697b      	ldr	r3, [r7, #20]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <lsm6dsv16x_den_polarity_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_den_polarity_set(stmdev_ctx_t *ctx,
                                    lsm6dsv16x_den_polarity_t val)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl4_t ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8003d96:	f107 0208 	add.w	r2, r7, #8
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	2113      	movs	r1, #19
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff fcce 	bl	8003740 <lsm6dsv16x_read_reg>
 8003da4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10f      	bne.n	8003dcc <lsm6dsv16x_den_polarity_set+0x42>
  {
    ctrl4.int2_in_lh = (uint8_t)val & 0x1U;
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	7a3b      	ldrb	r3, [r7, #8]
 8003db6:	f362 0300 	bfi	r3, r2, #0, #1
 8003dba:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL4, (uint8_t *)&ctrl4, 1);
 8003dbc:	f107 0208 	add.w	r2, r7, #8
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	2113      	movs	r1, #19
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff fcd3 	bl	8003770 <lsm6dsv16x_write_reg>
 8003dca:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <lsm6dsv16x_fifo_watermark_set>:
  * @param  val      FIFO watermark threshold (1 LSb = TAG (1 Byte) + 1 sensor (6 Bytes) written in FIFO).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	460b      	mov	r3, r1
 8003de0:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl1_t fifo_ctrl1;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8003de2:	f107 0208 	add.w	r2, r7, #8
 8003de6:	2301      	movs	r3, #1
 8003de8:	2107      	movs	r1, #7
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff fca8 	bl	8003740 <lsm6dsv16x_read_reg>
 8003df0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <lsm6dsv16x_fifo_watermark_set+0x36>
  {
    fifo_ctrl1.wtm = val;
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8003dfc:	f107 0208 	add.w	r2, r7, #8
 8003e00:	2301      	movs	r3, #1
 8003e02:	2107      	movs	r1, #7
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff fcb3 	bl	8003770 <lsm6dsv16x_write_reg>
 8003e0a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <lsm6dsv16x_fifo_xl_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_xl_batch_t val)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003e22:	f107 0208 	add.w	r2, r7, #8
 8003e26:	2301      	movs	r3, #1
 8003e28:	2109      	movs	r1, #9
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fc88 	bl	8003740 <lsm6dsv16x_read_reg>
 8003e30:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10f      	bne.n	8003e58 <lsm6dsv16x_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val & 0xFu;
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	7a3b      	ldrb	r3, [r7, #8]
 8003e42:	f362 0303 	bfi	r3, r2, #0, #4
 8003e46:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003e48:	f107 0208 	add.w	r2, r7, #8
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	2109      	movs	r1, #9
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff fc8d 	bl	8003770 <lsm6dsv16x_write_reg>
 8003e56:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e58:	68fb      	ldr	r3, [r7, #12]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <lsm6dsv16x_fifo_gy_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     lsm6dsv16x_fifo_gy_batch_t val)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003e6e:	f107 0208 	add.w	r2, r7, #8
 8003e72:	2301      	movs	r3, #1
 8003e74:	2109      	movs	r1, #9
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff fc62 	bl	8003740 <lsm6dsv16x_read_reg>
 8003e7c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10f      	bne.n	8003ea4 <lsm6dsv16x_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val & 0x0Fu;
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	7a3b      	ldrb	r3, [r7, #8]
 8003e8e:	f362 1307 	bfi	r3, r2, #4, #4
 8003e92:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL3, (uint8_t *)&fifo_ctrl3, 1);
 8003e94:	f107 0208 	add.w	r2, r7, #8
 8003e98:	2301      	movs	r3, #1
 8003e9a:	2109      	movs	r1, #9
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff fc67 	bl	8003770 <lsm6dsv16x_write_reg>
 8003ea2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8003eba:	f107 0208 	add.w	r2, r7, #8
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	210a      	movs	r1, #10
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff fc3c 	bl	8003740 <lsm6dsv16x_read_reg>
 8003ec8:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10f      	bne.n	8003ef0 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	7a3b      	ldrb	r3, [r7, #8]
 8003eda:	f362 0302 	bfi	r3, r2, #0, #3
 8003ede:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8003ee0:	f107 0208 	add.w	r2, r7, #8
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	210a      	movs	r1, #10
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fc41 	bl	8003770 <lsm6dsv16x_write_reg>
 8003eee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <lsm6dsv16x_ui_i2c_i3c_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ui_i2c_i3c_mode_set(stmdev_ctx_t *ctx,
                                       lsm6dsv16x_ui_i2c_i3c_mode_t val)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	460b      	mov	r3, r1
 8003f04:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_if_cfg_t if_cfg;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8003f06:	f107 0208 	add.w	r2, r7, #8
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	2103      	movs	r1, #3
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fc16 	bl	8003740 <lsm6dsv16x_read_reg>
 8003f14:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10f      	bne.n	8003f3c <lsm6dsv16x_ui_i2c_i3c_mode_set+0x42>
  {
    if_cfg.i2c_i3c_disable = (uint8_t)val & 0x1U;
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	7a3b      	ldrb	r3, [r7, #8]
 8003f26:	f362 0300 	bfi	r3, r2, #0, #1
 8003f2a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_IF_CFG, (uint8_t *)&if_cfg, 1);
 8003f2c:	f107 0208 	add.w	r2, r7, #8
 8003f30:	2301      	movs	r3, #1
 8003f32:	2103      	movs	r1, #3
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff fc1b 	bl	8003770 <lsm6dsv16x_write_reg>
 8003f3a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <acc_write>:
#include "global_variables.h"
#include "peripherals.h"

/* -------------SCRITTURA ACCELEROMETRO-------------*/
int32_t acc_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	461a      	mov	r2, r3
 8003f52:	460b      	mov	r3, r1
 8003f54:	72fb      	strb	r3, [r7, #11]
 8003f56:	4613      	mov	r3, r2
 8003f58:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f64:	f00a f8b2 	bl	800e0cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8003f68:	f107 010b 	add.w	r1, r7, #11
 8003f6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f70:	2201      	movs	r2, #1
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f00d fb33 	bl	80115de <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8003f78:	893a      	ldrh	r2, [r7, #8]
 8003f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f00d fb2c 	bl	80115de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8003f86:	2201      	movs	r2, #1
 8003f88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f90:	f00a f89c 	bl	800e0cc <HAL_GPIO_WritePin>
	return 0;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <acc_read>:

/* -------------LETTURA ACCELEROMETRO-------------*/
int32_t acc_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	460b      	mov	r3, r1
 8003fac:	72fb      	strb	r3, [r7, #11]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 8003fb2:	7afb      	ldrb	r3, [r7, #11]
 8003fb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fc6:	f00a f881 	bl	800e0cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8003fca:	f107 010b 	add.w	r1, r7, #11
 8003fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f00d fb02 	bl	80115de <HAL_SPI_Transmit>
	HAL_SPI_Receive(handle, bufp, len, 1000);
 8003fda:	893a      	ldrh	r2, [r7, #8]
 8003fdc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f00d fc71 	bl	80118ca <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_SET);
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ff2:	f00a f86b 	bl	800e0cc <HAL_GPIO_WritePin>
	return 0;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004004:	f3bf 8f4f 	dsb	sy
}
 8004008:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800400a:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <__NVIC_SystemReset+0x24>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004012:	4904      	ldr	r1, [pc, #16]	@ (8004024 <__NVIC_SystemReset+0x24>)
 8004014:	4b04      	ldr	r3, [pc, #16]	@ (8004028 <__NVIC_SystemReset+0x28>)
 8004016:	4313      	orrs	r3, r2
 8004018:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800401a:	f3bf 8f4f 	dsb	sy
}
 800401e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004020:	bf00      	nop
 8004022:	e7fd      	b.n	8004020 <__NVIC_SystemReset+0x20>
 8004024:	e000ed00 	.word	0xe000ed00
 8004028:	05fa0004 	.word	0x05fa0004

0800402c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800402c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402e:	b093      	sub	sp, #76	@ 0x4c
 8004030:	af0c      	add	r7, sp, #48	@ 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004032:	f006 fe04 	bl	800ac3e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004036:	f000 fafd 	bl	8004634 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800403a:	f000 ffd1 	bl	8004fe0 <MX_GPIO_Init>
	MX_DMA_Init();
 800403e:	f000 ffa1 	bl	8004f84 <MX_DMA_Init>
	MX_QUADSPI_Init();
 8004042:	f000 fc23 	bl	800488c <MX_QUADSPI_Init>
	MX_SPI2_Init();
 8004046:	f000 fcd9 	bl	80049fc <MX_SPI2_Init>
	MX_USART1_UART_Init();
 800404a:	f000 ff6b 	bl	8004f24 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 800404e:	f000 fb43 	bl	80046d8 <MX_ADC1_Init>
	MX_I2C3_Init();
 8004052:	f000 fbdb 	bl	800480c <MX_I2C3_Init>
	MX_TIM2_Init();
 8004056:	f000 fdf5 	bl	8004c44 <MX_TIM2_Init>
	MX_UART4_Init();
 800405a:	f000 ff33 	bl	8004ec4 <MX_UART4_Init>
	MX_TIM1_Init();
 800405e:	f000 fd49 	bl	8004af4 <MX_TIM1_Init>
	MX_CRC_Init();
 8004062:	f000 fbb1 	bl	80047c8 <MX_CRC_Init>
	MX_TIM4_Init();
 8004066:	f000 feb9 	bl	8004ddc <MX_TIM4_Init>
	MX_RTC_Init();
 800406a:	f000 fc35 	bl	80048d8 <MX_RTC_Init>
	MX_SPI3_Init();
 800406e:	f000 fd03 	bl	8004a78 <MX_SPI3_Init>
	MX_TIM3_Init();
 8004072:	f000 fe3b 	bl	8004cec <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	System_Init();
 8004076:	f7fe ffe7 	bl	8003048 <System_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state)
 800407a:	4bb2      	ldr	r3, [pc, #712]	@ (8004344 <main+0x318>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b03      	cmp	r3, #3
 8004080:	f200 82ae 	bhi.w	80045e0 <main+0x5b4>
 8004084:	a201      	add	r2, pc, #4	@ (adr r2, 800408c <main+0x60>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	0800409d 	.word	0x0800409d
 8004090:	080041bf 	.word	0x080041bf
 8004094:	080041d5 	.word	0x080041d5
 8004098:	080044b7 	.word	0x080044b7
		{
		case IDLE:
			if(flags.MQTT_Message_Rx)
 800409c:	4baa      	ldr	r3, [pc, #680]	@ (8004348 <main+0x31c>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d068      	beq.n	800417c <main+0x150>
			{
				LED_Start(RED_LED, MEDIUM, HIGH);
 80040aa:	2205      	movs	r2, #5
 80040ac:	2101      	movs	r1, #1
 80040ae:	2004      	movs	r0, #4
 80040b0:	f7ff fa46 	bl	8003540 <LED_Start>
				SIM_Parse_Command();
 80040b4:	f7fd fd70 	bl	8001b98 <SIM_Parse_Command>
				flags.MQTT_Message_Rx = 0;
 80040b8:	4aa3      	ldr	r2, [pc, #652]	@ (8004348 <main+0x31c>)
 80040ba:	7813      	ldrb	r3, [r2, #0]
 80040bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040c0:	7013      	strb	r3, [r2, #0]
				if(flags.CMD.Start_Meas)
 80040c2:	4ba1      	ldr	r3, [pc, #644]	@ (8004348 <main+0x31c>)
 80040c4:	789b      	ldrb	r3, [r3, #2]
 80040c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <main+0xb6>
				{
					state = MEASURE_INIT_STATE;
 80040d0:	4b9c      	ldr	r3, [pc, #624]	@ (8004344 <main+0x318>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_Meas = 0;
 80040d6:	4a9c      	ldr	r2, [pc, #624]	@ (8004348 <main+0x31c>)
 80040d8:	7893      	ldrb	r3, [r2, #2]
 80040da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040de:	7093      	strb	r3, [r2, #2]
 80040e0:	e048      	b.n	8004174 <main+0x148>
				}
				else if(flags.CMD.Set_Config)
 80040e2:	4b99      	ldr	r3, [pc, #612]	@ (8004348 <main+0x31c>)
 80040e4:	789b      	ldrb	r3, [r3, #2]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d007      	beq.n	8004100 <main+0xd4>
				{
					Apply_Config();
 80040f0:	f002 fa6a 	bl	80065c8 <Apply_Config>
					flags.CMD.Set_Config = 0;
 80040f4:	4a94      	ldr	r2, [pc, #592]	@ (8004348 <main+0x31c>)
 80040f6:	7893      	ldrb	r3, [r2, #2]
 80040f8:	f023 0310 	bic.w	r3, r3, #16
 80040fc:	7093      	strb	r3, [r2, #2]
 80040fe:	e039      	b.n	8004174 <main+0x148>
				}
				else if(flags.CMD.Get_Config)
 8004100:	4b91      	ldr	r3, [pc, #580]	@ (8004348 <main+0x31c>)
 8004102:	789b      	ldrb	r3, [r3, #2]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d007      	beq.n	800411e <main+0xf2>
				{
					Get_Config();
 800410e:	f002 fbf7 	bl	8006900 <Get_Config>
					flags.CMD.Get_Config = 0;
 8004112:	4a8d      	ldr	r2, [pc, #564]	@ (8004348 <main+0x31c>)
 8004114:	7893      	ldrb	r3, [r2, #2]
 8004116:	f023 0320 	bic.w	r3, r3, #32
 800411a:	7093      	strb	r3, [r2, #2]
 800411c:	e02a      	b.n	8004174 <main+0x148>
				}
				else if(flags.CMD.Start_OTA)
 800411e:	4b8a      	ldr	r3, [pc, #552]	@ (8004348 <main+0x31c>)
 8004120:	789b      	ldrb	r3, [r3, #2]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d015      	beq.n	8004158 <main+0x12c>
				{
					LED_Stop(GRN_LED);
 800412c:	2008      	movs	r0, #8
 800412e:	f7ff faf9 	bl	8003724 <LED_Stop>
					LED_Start(ORG_LED, FAST, FULL);
 8004132:	2204      	movs	r2, #4
 8004134:	2100      	movs	r1, #0
 8004136:	2000      	movs	r0, #0
 8004138:	f7ff fa02 	bl	8003540 <LED_Start>
					LED_Start(RED_LED, FAST, HIGH);
 800413c:	2205      	movs	r2, #5
 800413e:	2100      	movs	r1, #0
 8004140:	2004      	movs	r0, #4
 8004142:	f7ff f9fd 	bl	8003540 <LED_Start>
					state = OTA_STATE;
 8004146:	4b7f      	ldr	r3, [pc, #508]	@ (8004344 <main+0x318>)
 8004148:	2203      	movs	r2, #3
 800414a:	701a      	strb	r2, [r3, #0]
					flags.CMD.Start_OTA = 0;
 800414c:	4a7e      	ldr	r2, [pc, #504]	@ (8004348 <main+0x31c>)
 800414e:	7893      	ldrb	r3, [r2, #2]
 8004150:	f023 0304 	bic.w	r3, r3, #4
 8004154:	7093      	strb	r3, [r2, #2]
 8004156:	e00d      	b.n	8004174 <main+0x148>
				}
				else if(flags.CMD.Ping)
 8004158:	4b7b      	ldr	r3, [pc, #492]	@ (8004348 <main+0x31c>)
 800415a:	789b      	ldrb	r3, [r3, #2]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d006      	beq.n	8004174 <main+0x148>
				{
					SIM_Send_Infos();
 8004166:	f7fd ffe3 	bl	8002130 <SIM_Send_Infos>
					flags.CMD.Ping = 0;
 800416a:	4a77      	ldr	r2, [pc, #476]	@ (8004348 <main+0x31c>)
 800416c:	7893      	ldrb	r3, [r2, #2]
 800416e:	f023 0308 	bic.w	r3, r3, #8
 8004172:	7093      	strb	r3, [r2, #2]
				}
				LED_Stop(RED_LED);
 8004174:	2004      	movs	r0, #4
 8004176:	f7ff fad5 	bl	8003724 <LED_Stop>
				LED_Start(ORG_LED, MEDIUM, HALF);
				SIM_Check_Connection();
				sys.SIM_Connection_Status = HAL_GetTick();
				LED_Stop(ORG_LED);
			}
			break;
 800417a:	e233      	b.n	80045e4 <main+0x5b8>
			else if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout)                  // Controllo connessione MQTT e TCP ogni 60 secondi
 800417c:	f006 fdc8 	bl	800ad10 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	4b72      	ldr	r3, [pc, #456]	@ (800434c <main+0x320>)
 8004184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004188:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800418c:	1ad2      	subs	r2, r2, r3
 800418e:	4b70      	ldr	r3, [pc, #448]	@ (8004350 <main+0x324>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	429a      	cmp	r2, r3
 8004194:	f240 8226 	bls.w	80045e4 <main+0x5b8>
				LED_Start(ORG_LED, MEDIUM, HALF);
 8004198:	2206      	movs	r2, #6
 800419a:	2101      	movs	r1, #1
 800419c:	2000      	movs	r0, #0
 800419e:	f7ff f9cf 	bl	8003540 <LED_Start>
				SIM_Check_Connection();
 80041a2:	f7fe f8d9 	bl	8002358 <SIM_Check_Connection>
				sys.SIM_Connection_Status = HAL_GetTick();
 80041a6:	f006 fdb3 	bl	800ad10 <HAL_GetTick>
 80041aa:	4603      	mov	r3, r0
 80041ac:	4a67      	ldr	r2, [pc, #412]	@ (800434c <main+0x320>)
 80041ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
				LED_Stop(ORG_LED);
 80041b6:	2000      	movs	r0, #0
 80041b8:	f7ff fab4 	bl	8003724 <LED_Stop>
			break;
 80041bc:	e212      	b.n	80045e4 <main+0x5b8>

		case MEASURE_INIT_STATE:
			Start_Measure();
 80041be:	f001 fd13 	bl	8005be8 <Start_Measure>
			LED_Start(GRN_LED, FAST, FULL);
 80041c2:	2204      	movs	r2, #4
 80041c4:	2100      	movs	r1, #0
 80041c6:	2008      	movs	r0, #8
 80041c8:	f7ff f9ba 	bl	8003540 <LED_Start>
			state = MEASURING_STATE;
 80041cc:	4b5d      	ldr	r3, [pc, #372]	@ (8004344 <main+0x318>)
 80041ce:	2202      	movs	r2, #2
 80041d0:	701a      	strb	r2, [r3, #0]
			break;
 80041d2:	e20a      	b.n	80045ea <main+0x5be>

		case MEASURING_STATE:
			if(flags.ADC_Complete && flags.ACC_Complete)
 80041d4:	4b5c      	ldr	r3, [pc, #368]	@ (8004348 <main+0x31c>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 8202 	beq.w	80045e8 <main+0x5bc>
 80041e4:	4b58      	ldr	r3, [pc, #352]	@ (8004348 <main+0x31c>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 81fa 	beq.w	80045e8 <main+0x5bc>
			{
				Save_Data();
 80041f4:	f001 fa4a 	bl	800568c <Save_Data>
				if(flags.BC_Interrupt)
 80041f8:	4b53      	ldr	r3, [pc, #332]	@ (8004348 <main+0x31c>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d010      	beq.n	8004228 <main+0x1fc>
				{
					BC_Read_Flags(&sys.BC_Flags);
 8004206:	4853      	ldr	r0, [pc, #332]	@ (8004354 <main+0x328>)
 8004208:	f7fe f9e4 	bl	80025d4 <BC_Read_Flags>
					BC_Manage_Interrupts(sys.BC_Flags);
 800420c:	4b4f      	ldr	r3, [pc, #316]	@ (800434c <main+0x320>)
 800420e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8004212:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004216:	4610      	mov	r0, r2
 8004218:	4619      	mov	r1, r3
 800421a:	f7fe fa89 	bl	8002730 <BC_Manage_Interrupts>
					flags.BC_Interrupt = 0;
 800421e:	4a4a      	ldr	r2, [pc, #296]	@ (8004348 <main+0x31c>)
 8004220:	7813      	ldrb	r3, [r2, #0]
 8004222:	f023 0320 	bic.w	r3, r3, #32
 8004226:	7013      	strb	r3, [r2, #0]
				}
				if(flags.MQTT_Message_Rx)
 8004228:	4b47      	ldr	r3, [pc, #284]	@ (8004348 <main+0x31c>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <main+0x222>
				{
					SIM_Parse_Command();
 8004236:	f7fd fcaf 	bl	8001b98 <SIM_Parse_Command>
					flags.SIM_isConnected = 1;
 800423a:	4a43      	ldr	r2, [pc, #268]	@ (8004348 <main+0x31c>)
 800423c:	7853      	ldrb	r3, [r2, #1]
 800423e:	f043 0308 	orr.w	r3, r3, #8
 8004242:	7053      	strb	r3, [r2, #1]
					flags.MQTT_Message_Rx = 0;
 8004244:	4a40      	ldr	r2, [pc, #256]	@ (8004348 <main+0x31c>)
 8004246:	7813      	ldrb	r3, [r2, #0]
 8004248:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800424c:	7013      	strb	r3, [r2, #0]
				}
				if(flags.CMD.Data_Request)
 800424e:	4b3e      	ldr	r3, [pc, #248]	@ (8004348 <main+0x31c>)
 8004250:	789b      	ldrb	r3, [r3, #2]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d056      	beq.n	800430a <main+0x2de>
				{
					LED_Start(ORG_LED, FAST, HIGH);
 800425c:	2205      	movs	r2, #5
 800425e:	2100      	movs	r1, #0
 8004260:	2000      	movs	r0, #0
 8004262:	f7ff f96d 	bl	8003540 <LED_Start>
					sprintf(MQTT_Logging, "%u:%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u", config.device_id, Last_Pressure, Last_Volume, Last_Acceleration.x, Last_Acceleration.y, Last_Acceleration.z, Vbatt, Supply.i1, Supply.i2, Supply.i3, Supply.v1, Supply.v2, Supply.v3, Temperature);
 8004266:	4b3a      	ldr	r3, [pc, #232]	@ (8004350 <main+0x324>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	469c      	mov	ip, r3
 800426c:	4b3a      	ldr	r3, [pc, #232]	@ (8004358 <main+0x32c>)
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	469e      	mov	lr, r3
 8004272:	4b3a      	ldr	r3, [pc, #232]	@ (800435c <main+0x330>)
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	4b39      	ldr	r3, [pc, #228]	@ (8004360 <main+0x334>)
 800427a:	885b      	ldrh	r3, [r3, #2]
 800427c:	4619      	mov	r1, r3
 800427e:	4b38      	ldr	r3, [pc, #224]	@ (8004360 <main+0x334>)
 8004280:	889b      	ldrh	r3, [r3, #4]
 8004282:	4618      	mov	r0, r3
 8004284:	4b36      	ldr	r3, [pc, #216]	@ (8004360 <main+0x334>)
 8004286:	88db      	ldrh	r3, [r3, #6]
 8004288:	461c      	mov	r4, r3
 800428a:	4b36      	ldr	r3, [pc, #216]	@ (8004364 <main+0x338>)
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	461d      	mov	r5, r3
 8004290:	4b35      	ldr	r3, [pc, #212]	@ (8004368 <main+0x33c>)
 8004292:	88db      	ldrh	r3, [r3, #6]
 8004294:	461e      	mov	r6, r3
 8004296:	4b34      	ldr	r3, [pc, #208]	@ (8004368 <main+0x33c>)
 8004298:	891b      	ldrh	r3, [r3, #8]
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	4b32      	ldr	r3, [pc, #200]	@ (8004368 <main+0x33c>)
 800429e:	895b      	ldrh	r3, [r3, #10]
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	4b31      	ldr	r3, [pc, #196]	@ (8004368 <main+0x33c>)
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	4b2f      	ldr	r3, [pc, #188]	@ (8004368 <main+0x33c>)
 80042aa:	885b      	ldrh	r3, [r3, #2]
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004368 <main+0x33c>)
 80042b0:	889b      	ldrh	r3, [r3, #4]
 80042b2:	607b      	str	r3, [r7, #4]
 80042b4:	4b2d      	ldr	r3, [pc, #180]	@ (800436c <main+0x340>)
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	9308      	str	r3, [sp, #32]
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	9307      	str	r3, [sp, #28]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	9306      	str	r3, [sp, #24]
 80042ce:	9605      	str	r6, [sp, #20]
 80042d0:	9504      	str	r5, [sp, #16]
 80042d2:	9403      	str	r4, [sp, #12]
 80042d4:	9002      	str	r0, [sp, #8]
 80042d6:	9101      	str	r1, [sp, #4]
 80042d8:	9200      	str	r2, [sp, #0]
 80042da:	4673      	mov	r3, lr
 80042dc:	4662      	mov	r2, ip
 80042de:	4924      	ldr	r1, [pc, #144]	@ (8004370 <main+0x344>)
 80042e0:	4824      	ldr	r0, [pc, #144]	@ (8004374 <main+0x348>)
 80042e2:	f011 fd65 	bl	8015db0 <siprintf>
					SIM_publish_MQTT_Message_DMA(NULL, MQTT_Logging);
 80042e6:	4923      	ldr	r1, [pc, #140]	@ (8004374 <main+0x348>)
 80042e8:	2000      	movs	r0, #0
 80042ea:	f7fd fe43 	bl	8001f74 <SIM_publish_MQTT_Message_DMA>
					sys.SIM_Prompt_Status = HAL_GetTick();
 80042ee:	f006 fd0f 	bl	800ad10 <HAL_GetTick>
 80042f2:	4603      	mov	r3, r0
 80042f4:	4a15      	ldr	r2, [pc, #84]	@ (800434c <main+0x320>)
 80042f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042fa:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
					flags.CMD.Data_Request = 0;
 80042fe:	4a12      	ldr	r2, [pc, #72]	@ (8004348 <main+0x31c>)
 8004300:	7893      	ldrb	r3, [r2, #2]
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	7093      	strb	r3, [r2, #2]
 8004308:	e07c      	b.n	8004404 <main+0x3d8>
				}
				else if(flags.CMD.Idle)
 800430a:	4b0f      	ldr	r3, [pc, #60]	@ (8004348 <main+0x31c>)
 800430c:	789b      	ldrb	r3, [r3, #2]
 800430e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d02f      	beq.n	8004378 <main+0x34c>
				{
					LED_Stop(ORG_LED);
 8004318:	2000      	movs	r0, #0
 800431a:	f7ff fa03 	bl	8003724 <LED_Stop>
					LED_Stop(RED_LED);
 800431e:	2004      	movs	r0, #4
 8004320:	f7ff fa00 	bl	8003724 <LED_Stop>
					LED_Start(GRN_LED, MEDIUM, HALF);
 8004324:	2206      	movs	r2, #6
 8004326:	2101      	movs	r1, #1
 8004328:	2008      	movs	r0, #8
 800432a:	f7ff f909 	bl	8003540 <LED_Start>
					state = IDLE;
 800432e:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <main+0x318>)
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]
					Stop_Measure();
 8004334:	f001 fd16 	bl	8005d64 <Stop_Measure>
					flags.CMD.Idle = 0;
 8004338:	4a03      	ldr	r2, [pc, #12]	@ (8004348 <main+0x31c>)
 800433a:	7893      	ldrb	r3, [r2, #2]
 800433c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004340:	7093      	strb	r3, [r2, #2]
 8004342:	e05f      	b.n	8004404 <main+0x3d8>
 8004344:	2000073c 	.word	0x2000073c
 8004348:	20001c68 	.word	0x20001c68
 800434c:	20000740 	.word	0x20000740
 8004350:	20001c6c 	.word	0x20001c6c
 8004354:	20001778 	.word	0x20001778
 8004358:	20004714 	.word	0x20004714
 800435c:	20004716 	.word	0x20004716
 8004360:	20004718 	.word	0x20004718
 8004364:	20004722 	.word	0x20004722
 8004368:	20003e44 	.word	0x20003e44
 800436c:	20004720 	.word	0x20004720
 8004370:	08017378 	.word	0x08017378
 8004374:	20004724 	.word	0x20004724
				}
				else if(flags.CMD.Measure_Request)
 8004378:	4b9c      	ldr	r3, [pc, #624]	@ (80045ec <main+0x5c0>)
 800437a:	789b      	ldrb	r3, [r3, #2]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d03e      	beq.n	8004404 <main+0x3d8>
				{
					if(!flags.TCP_isSending)
 8004386:	4b99      	ldr	r3, [pc, #612]	@ (80045ec <main+0x5c0>)
 8004388:	785b      	ldrb	r3, [r3, #1]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d137      	bne.n	8004404 <main+0x3d8>
					{
						Send_Measure_Addr = Send_Measure_Chunk(sys.RAM_Buffer_Base_tosend, sys.Inactive_RAM_Len, Send_Measure_Addr);
 8004394:	4b96      	ldr	r3, [pc, #600]	@ (80045f0 <main+0x5c4>)
 8004396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800439a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800439e:	4a94      	ldr	r2, [pc, #592]	@ (80045f0 <main+0x5c4>)
 80043a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043a4:	f8d2 10d0 	ldr.w	r1, [r2, #208]	@ 0xd0
 80043a8:	4a92      	ldr	r2, [pc, #584]	@ (80045f4 <main+0x5c8>)
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f001 fdbb 	bl	8005f28 <Send_Measure_Chunk>
 80043b2:	4603      	mov	r3, r0
 80043b4:	4a8f      	ldr	r2, [pc, #572]	@ (80045f4 <main+0x5c8>)
 80043b6:	6013      	str	r3, [r2, #0]
						if(flags.TCP_ReadytoSend)
 80043b8:	4b8c      	ldr	r3, [pc, #560]	@ (80045ec <main+0x5c0>)
 80043ba:	785b      	ldrb	r3, [r3, #1]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01e      	beq.n	8004404 <main+0x3d8>
						{
							SIM_Send_Command_DMA(MQTT_Logging);
 80043c6:	488c      	ldr	r0, [pc, #560]	@ (80045f8 <main+0x5cc>)
 80043c8:	f7fd fb48 	bl	8001a5c <SIM_Send_Command_DMA>
							flags.TCP_isSending = 1;
 80043cc:	4a87      	ldr	r2, [pc, #540]	@ (80045ec <main+0x5c0>)
 80043ce:	7853      	ldrb	r3, [r2, #1]
 80043d0:	f043 0304 	orr.w	r3, r3, #4
 80043d4:	7053      	strb	r3, [r2, #1]
							flags.TCP_ReadytoSend = 0;
 80043d6:	4a85      	ldr	r2, [pc, #532]	@ (80045ec <main+0x5c0>)
 80043d8:	7853      	ldrb	r3, [r2, #1]
 80043da:	f023 0302 	bic.w	r3, r3, #2
 80043de:	7053      	strb	r3, [r2, #1]
							if (Send_Measure_Addr == 0)
 80043e0:	4b84      	ldr	r3, [pc, #528]	@ (80045f4 <main+0x5c8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10d      	bne.n	8004404 <main+0x3d8>
							{
								memset(tcp_chunk, 0, 1460);
 80043e8:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80043ec:	2100      	movs	r1, #0
 80043ee:	4883      	ldr	r0, [pc, #524]	@ (80045fc <main+0x5d0>)
 80043f0:	f011 fd3e 	bl	8015e70 <memset>
								LED_Stop(RED_LED);
 80043f4:	2004      	movs	r0, #4
 80043f6:	f7ff f995 	bl	8003724 <LED_Stop>
								flags.CMD.Measure_Request = 0;
 80043fa:	4a7c      	ldr	r2, [pc, #496]	@ (80045ec <main+0x5c0>)
 80043fc:	7893      	ldrb	r3, [r2, #2]
 80043fe:	f023 0302 	bic.w	r3, r3, #2
 8004402:	7093      	strb	r3, [r2, #2]
							}
						}
					}
				}
				if(flags.MQTT_ReadytoSend)
 8004404:	4b79      	ldr	r3, [pc, #484]	@ (80045ec <main+0x5c0>)
 8004406:	785b      	ldrb	r3, [r3, #1]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <main+0x3fc>
				{
					SIM_Send_Command_DMA(MQTT_Logging);
 8004412:	4879      	ldr	r0, [pc, #484]	@ (80045f8 <main+0x5cc>)
 8004414:	f7fd fb22 	bl	8001a5c <SIM_Send_Command_DMA>
					LED_Stop(ORG_LED);
 8004418:	2000      	movs	r0, #0
 800441a:	f7ff f983 	bl	8003724 <LED_Stop>
					flags.MQTT_ReadytoSend = 0;
 800441e:	4a73      	ldr	r2, [pc, #460]	@ (80045ec <main+0x5c0>)
 8004420:	7853      	ldrb	r3, [r2, #1]
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	7053      	strb	r3, [r2, #1]
				}
				if(sys.SIM_Prompt_Status > 0 && (HAL_GetTick() - sys.SIM_Prompt_Status) > SIM_PROMPT_TIMEOUT_MS)
 8004428:	4b71      	ldr	r3, [pc, #452]	@ (80045f0 <main+0x5c4>)
 800442a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800442e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004432:	2b00      	cmp	r3, #0
 8004434:	d018      	beq.n	8004468 <main+0x43c>
 8004436:	f006 fc6b 	bl	800ad10 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	4b6c      	ldr	r3, [pc, #432]	@ (80045f0 <main+0x5c4>)
 800443e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004442:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800444c:	4293      	cmp	r3, r2
 800444e:	d90b      	bls.n	8004468 <main+0x43c>
				{
					flags.CMD.Data_Request = 1;
 8004450:	4a66      	ldr	r2, [pc, #408]	@ (80045ec <main+0x5c0>)
 8004452:	7893      	ldrb	r3, [r2, #2]
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	7093      	strb	r3, [r2, #2]
					sys.SIM_Prompt_Status = 0;
 800445a:	4b65      	ldr	r3, [pc, #404]	@ (80045f0 <main+0x5c4>)
 800445c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004460:	461a      	mov	r2, r3
 8004462:	2300      	movs	r3, #0
 8004464:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
				}
				if(HAL_GetTick() - sys.SIM_Connection_Status > config.connection_timeout)
 8004468:	f006 fc52 	bl	800ad10 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	4b60      	ldr	r3, [pc, #384]	@ (80045f0 <main+0x5c4>)
 8004470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004474:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004478:	1ad2      	subs	r2, r2, r3
 800447a:	4b61      	ldr	r3, [pc, #388]	@ (8004600 <main+0x5d4>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	429a      	cmp	r2, r3
 8004480:	f240 80b2 	bls.w	80045e8 <main+0x5bc>
				{
					sys.SIM_Connection_Status = HAL_GetTick();
 8004484:	f006 fc44 	bl	800ad10 <HAL_GetTick>
 8004488:	4603      	mov	r3, r0
 800448a:	4a59      	ldr	r2, [pc, #356]	@ (80045f0 <main+0x5c4>)
 800448c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004490:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
					if(flags.SIM_isConnected)
 8004494:	4b55      	ldr	r3, [pc, #340]	@ (80045ec <main+0x5c0>)
 8004496:	785b      	ldrb	r3, [r3, #1]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <main+0x482>
					{
						flags.SIM_isConnected = 0;
 80044a2:	4a52      	ldr	r2, [pc, #328]	@ (80045ec <main+0x5c0>)
 80044a4:	7853      	ldrb	r3, [r2, #1]
 80044a6:	f023 0308 	bic.w	r3, r3, #8
 80044aa:	7053      	strb	r3, [r2, #1]
					{
						state = IDLE;
					}
				}
			}
			break;
 80044ac:	e09c      	b.n	80045e8 <main+0x5bc>
						state = IDLE;
 80044ae:	4b55      	ldr	r3, [pc, #340]	@ (8004604 <main+0x5d8>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]
			break;
 80044b4:	e098      	b.n	80045e8 <main+0x5bc>

		case OTA_STATE:
			if(OTA_Init() == HAL_OK)
 80044b6:	f000 fe8f 	bl	80051d8 <OTA_Init>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d176      	bne.n	80045ae <main+0x582>
			{
				HAL_UART_DMAStop(SIM_UART);
 80044c0:	4851      	ldr	r0, [pc, #324]	@ (8004608 <main+0x5dc>)
 80044c2:	f010 fafb 	bl	8014abc <HAL_UART_DMAStop>
				HAL_Delay(100);
 80044c6:	2064      	movs	r0, #100	@ 0x64
 80044c8:	f006 fc2e 	bl	800ad28 <HAL_Delay>
				SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_READY");
 80044cc:	494f      	ldr	r1, [pc, #316]	@ (800460c <main+0x5e0>)
 80044ce:	4850      	ldr	r0, [pc, #320]	@ (8004610 <main+0x5e4>)
 80044d0:	f7fd fd9a 	bl	8002008 <SIM_publish_MQTT_Message>
				if(OTA_Receive() == HAL_OK)
 80044d4:	f000 feac 	bl	8005230 <OTA_Receive>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d14e      	bne.n	800457c <main+0x550>
				{
					SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_RECEIVED");
 80044de:	494d      	ldr	r1, [pc, #308]	@ (8004614 <main+0x5e8>)
 80044e0:	484b      	ldr	r0, [pc, #300]	@ (8004610 <main+0x5e4>)
 80044e2:	f7fd fd91 	bl	8002008 <SIM_publish_MQTT_Message>
					if(OTA_CRC_Check() == HAL_OK)
 80044e6:	f000 ff1f 	bl	8005328 <OTA_CRC_Check>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d109      	bne.n	8004504 <main+0x4d8>
					{
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_CRC_OK");
 80044f0:	4949      	ldr	r1, [pc, #292]	@ (8004618 <main+0x5ec>)
 80044f2:	4847      	ldr	r0, [pc, #284]	@ (8004610 <main+0x5e4>)
 80044f4:	f7fd fd88 	bl	8002008 <SIM_publish_MQTT_Message>
						LED_Start(GRN_LED, MEDIUM, HALF);
						state = IDLE;
						break;
					}

					if(OTA_Apply() == HAL_OK)
 80044f8:	f000 ffca 	bl	8005490 <OTA_Apply>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d123      	bne.n	800454a <main+0x51e>
 8004502:	e018      	b.n	8004536 <main+0x50a>
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_CRC_ERROR");
 8004504:	4945      	ldr	r1, [pc, #276]	@ (800461c <main+0x5f0>)
 8004506:	4842      	ldr	r0, [pc, #264]	@ (8004610 <main+0x5e4>)
 8004508:	f7fd fd7e 	bl	8002008 <SIM_publish_MQTT_Message>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 800450c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004510:	4943      	ldr	r1, [pc, #268]	@ (8004620 <main+0x5f4>)
 8004512:	483d      	ldr	r0, [pc, #244]	@ (8004608 <main+0x5dc>)
 8004514:	f011 fb6e 	bl	8015bf4 <HAL_UARTEx_ReceiveToIdle_DMA>
						LED_Stop(ORG_LED);
 8004518:	2000      	movs	r0, #0
 800451a:	f7ff f903 	bl	8003724 <LED_Stop>
						LED_Stop(RED_LED);
 800451e:	2004      	movs	r0, #4
 8004520:	f7ff f900 	bl	8003724 <LED_Stop>
						LED_Start(GRN_LED, MEDIUM, HALF);
 8004524:	2206      	movs	r2, #6
 8004526:	2101      	movs	r1, #1
 8004528:	2008      	movs	r0, #8
 800452a:	f7ff f809 	bl	8003540 <LED_Start>
						state = IDLE;
 800452e:	4b35      	ldr	r3, [pc, #212]	@ (8004604 <main+0x5d8>)
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
						break;
 8004534:	e059      	b.n	80045ea <main+0x5be>
					{
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_SUCCESS");
 8004536:	493b      	ldr	r1, [pc, #236]	@ (8004624 <main+0x5f8>)
 8004538:	4835      	ldr	r0, [pc, #212]	@ (8004610 <main+0x5e4>)
 800453a:	f7fd fd65 	bl	8002008 <SIM_publish_MQTT_Message>
						HAL_Delay(500);
 800453e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004542:	f006 fbf1 	bl	800ad28 <HAL_Delay>
						NVIC_SystemReset();
 8004546:	f7ff fd5b 	bl	8004000 <__NVIC_SystemReset>
					}
					else
					{
						SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_APPLY_ERROR");
 800454a:	4937      	ldr	r1, [pc, #220]	@ (8004628 <main+0x5fc>)
 800454c:	4830      	ldr	r0, [pc, #192]	@ (8004610 <main+0x5e4>)
 800454e:	f7fd fd5b 	bl	8002008 <SIM_publish_MQTT_Message>
						HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004552:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004556:	4932      	ldr	r1, [pc, #200]	@ (8004620 <main+0x5f4>)
 8004558:	482b      	ldr	r0, [pc, #172]	@ (8004608 <main+0x5dc>)
 800455a:	f011 fb4b 	bl	8015bf4 <HAL_UARTEx_ReceiveToIdle_DMA>
						LED_Stop(ORG_LED);
 800455e:	2000      	movs	r0, #0
 8004560:	f7ff f8e0 	bl	8003724 <LED_Stop>
						LED_Stop(RED_LED);
 8004564:	2004      	movs	r0, #4
 8004566:	f7ff f8dd 	bl	8003724 <LED_Stop>
						LED_Start(GRN_LED, MEDIUM, HALF);
 800456a:	2206      	movs	r2, #6
 800456c:	2101      	movs	r1, #1
 800456e:	2008      	movs	r0, #8
 8004570:	f7fe ffe6 	bl	8003540 <LED_Start>
						state = IDLE;
 8004574:	4b23      	ldr	r3, [pc, #140]	@ (8004604 <main+0x5d8>)
 8004576:	2200      	movs	r2, #0
 8004578:	701a      	strb	r2, [r3, #0]
				LED_Stop(ORG_LED);
				LED_Stop(RED_LED);
				LED_Start(GRN_LED, MEDIUM, HALF);
				state = IDLE;
			}
			break;
 800457a:	e036      	b.n	80045ea <main+0x5be>
					SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_RECEIVE_ERROR");
 800457c:	492b      	ldr	r1, [pc, #172]	@ (800462c <main+0x600>)
 800457e:	4824      	ldr	r0, [pc, #144]	@ (8004610 <main+0x5e4>)
 8004580:	f7fd fd42 	bl	8002008 <SIM_publish_MQTT_Message>
					HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 8004584:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004588:	4925      	ldr	r1, [pc, #148]	@ (8004620 <main+0x5f4>)
 800458a:	481f      	ldr	r0, [pc, #124]	@ (8004608 <main+0x5dc>)
 800458c:	f011 fb32 	bl	8015bf4 <HAL_UARTEx_ReceiveToIdle_DMA>
					LED_Stop(ORG_LED);
 8004590:	2000      	movs	r0, #0
 8004592:	f7ff f8c7 	bl	8003724 <LED_Stop>
					LED_Stop(RED_LED);
 8004596:	2004      	movs	r0, #4
 8004598:	f7ff f8c4 	bl	8003724 <LED_Stop>
					LED_Start(GRN_LED, MEDIUM, HALF);
 800459c:	2206      	movs	r2, #6
 800459e:	2101      	movs	r1, #1
 80045a0:	2008      	movs	r0, #8
 80045a2:	f7fe ffcd 	bl	8003540 <LED_Start>
					state = IDLE;
 80045a6:	4b17      	ldr	r3, [pc, #92]	@ (8004604 <main+0x5d8>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]
			break;
 80045ac:	e01d      	b.n	80045ea <main+0x5be>
				SIM_publish_MQTT_Message(sys.MQTT.Info_Topic, "OTA_INIT_ERROR");
 80045ae:	4920      	ldr	r1, [pc, #128]	@ (8004630 <main+0x604>)
 80045b0:	4817      	ldr	r0, [pc, #92]	@ (8004610 <main+0x5e4>)
 80045b2:	f7fd fd29 	bl	8002008 <SIM_publish_MQTT_Message>
				HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, (uint8_t *)sim_rx_buffer, SIM_RXBUFFER_SIZE);
 80045b6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80045ba:	4919      	ldr	r1, [pc, #100]	@ (8004620 <main+0x5f4>)
 80045bc:	4812      	ldr	r0, [pc, #72]	@ (8004608 <main+0x5dc>)
 80045be:	f011 fb19 	bl	8015bf4 <HAL_UARTEx_ReceiveToIdle_DMA>
				LED_Stop(ORG_LED);
 80045c2:	2000      	movs	r0, #0
 80045c4:	f7ff f8ae 	bl	8003724 <LED_Stop>
				LED_Stop(RED_LED);
 80045c8:	2004      	movs	r0, #4
 80045ca:	f7ff f8ab 	bl	8003724 <LED_Stop>
				LED_Start(GRN_LED, MEDIUM, HALF);
 80045ce:	2206      	movs	r2, #6
 80045d0:	2101      	movs	r1, #1
 80045d2:	2008      	movs	r0, #8
 80045d4:	f7fe ffb4 	bl	8003540 <LED_Start>
				state = IDLE;
 80045d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004604 <main+0x5d8>)
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
			break;
 80045de:	e004      	b.n	80045ea <main+0x5be>

		default:
			break;
 80045e0:	bf00      	nop
 80045e2:	e54a      	b.n	800407a <main+0x4e>
			break;
 80045e4:	bf00      	nop
 80045e6:	e548      	b.n	800407a <main+0x4e>
			break;
 80045e8:	bf00      	nop
		switch(state)
 80045ea:	e546      	b.n	800407a <main+0x4e>
 80045ec:	20001c68 	.word	0x20001c68
 80045f0:	20000740 	.word	0x20000740
 80045f4:	20004ec8 	.word	0x20004ec8
 80045f8:	20004724 	.word	0x20004724
 80045fc:	20004ecc 	.word	0x20004ecc
 8004600:	20001c6c 	.word	0x20001c6c
 8004604:	2000073c 	.word	0x2000073c
 8004608:	20000624 	.word	0x20000624
 800460c:	080173a4 	.word	0x080173a4
 8004610:	20001b3c 	.word	0x20001b3c
 8004614:	080173b0 	.word	0x080173b0
 8004618:	080173c0 	.word	0x080173c0
 800461c:	080173cc 	.word	0x080173cc
 8004620:	200054f4 	.word	0x200054f4
 8004624:	080173dc 	.word	0x080173dc
 8004628:	080173e8 	.word	0x080173e8
 800462c:	080173f8 	.word	0x080173f8
 8004630:	0801740c 	.word	0x0801740c

08004634 <SystemClock_Config>:
	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void)
	{
 8004634:	b580      	push	{r7, lr}
 8004636:	b096      	sub	sp, #88	@ 0x58
 8004638:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800463a:	f107 0314 	add.w	r3, r7, #20
 800463e:	2244      	movs	r2, #68	@ 0x44
 8004640:	2100      	movs	r1, #0
 8004642:	4618      	mov	r0, r3
 8004644:	f011 fc14 	bl	8015e70 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004648:	463b      	mov	r3, r7
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	605a      	str	r2, [r3, #4]
 8004650:	609a      	str	r2, [r3, #8]
 8004652:	60da      	str	r2, [r3, #12]
 8004654:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004656:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800465a:	f00a fb45 	bl	800ece8 <HAL_PWREx_ControlVoltageScaling>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <SystemClock_Config+0x34>
		{
			Error_Handler();
 8004664:	f000 fdb2 	bl	80051cc <Error_Handler>
		}

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004668:	2309      	movs	r3, #9
 800466a:	617b      	str	r3, [r7, #20]
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800466c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004670:	61bb      	str	r3, [r7, #24]
		RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004672:	2301      	movs	r3, #1
 8004674:	62bb      	str	r3, [r7, #40]	@ 0x28
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004676:	2302      	movs	r3, #2
 8004678:	63fb      	str	r3, [r7, #60]	@ 0x3c
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800467a:	2303      	movs	r3, #3
 800467c:	643b      	str	r3, [r7, #64]	@ 0x40
		RCC_OscInitStruct.PLL.PLLM = 1;
 800467e:	2301      	movs	r3, #1
 8004680:	647b      	str	r3, [r7, #68]	@ 0x44
		RCC_OscInitStruct.PLL.PLLN = 20;
 8004682:	2314      	movs	r3, #20
 8004684:	64bb      	str	r3, [r7, #72]	@ 0x48
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004686:	2307      	movs	r3, #7
 8004688:	64fb      	str	r3, [r7, #76]	@ 0x4c
		RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800468a:	2302      	movs	r3, #2
 800468c:	653b      	str	r3, [r7, #80]	@ 0x50
		RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800468e:	2302      	movs	r3, #2
 8004690:	657b      	str	r3, [r7, #84]	@ 0x54
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004692:	f107 0314 	add.w	r3, r7, #20
 8004696:	4618      	mov	r0, r3
 8004698:	f00a ffde 	bl	800f658 <HAL_RCC_OscConfig>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <SystemClock_Config+0x72>
		{
			Error_Handler();
 80046a2:	f000 fd93 	bl	80051cc <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046a6:	230f      	movs	r3, #15
 80046a8:	603b      	str	r3, [r7, #0]
				|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046aa:	2303      	movs	r3, #3
 80046ac:	607b      	str	r3, [r7, #4]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60bb      	str	r3, [r7, #8]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80046ba:	463b      	mov	r3, r7
 80046bc:	2104      	movs	r1, #4
 80046be:	4618      	mov	r0, r3
 80046c0:	f00b fba6 	bl	800fe10 <HAL_RCC_ClockConfig>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <SystemClock_Config+0x9a>
		{
			Error_Handler();
 80046ca:	f000 fd7f 	bl	80051cc <Error_Handler>
		}
	}
 80046ce:	bf00      	nop
 80046d0:	3758      	adds	r7, #88	@ 0x58
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <MX_ADC1_Init>:
	 * @brief ADC1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_ADC1_Init(void)
	{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08a      	sub	sp, #40	@ 0x28
 80046dc:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN ADC1_Init 0 */

		/* USER CODE END ADC1_Init 0 */

		ADC_MultiModeTypeDef multimode = {0};
 80046de:	f107 031c 	add.w	r3, r7, #28
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	609a      	str	r2, [r3, #8]
		ADC_ChannelConfTypeDef sConfig = {0};
 80046ea:	1d3b      	adds	r3, r7, #4
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	60da      	str	r2, [r3, #12]
 80046f6:	611a      	str	r2, [r3, #16]
 80046f8:	615a      	str	r2, [r3, #20]

		/* USER CODE END ADC1_Init 1 */

		/** Common config
		 */
		hadc1.Instance = ADC1;
 80046fa:	4b30      	ldr	r3, [pc, #192]	@ (80047bc <MX_ADC1_Init+0xe4>)
 80046fc:	4a30      	ldr	r2, [pc, #192]	@ (80047c0 <MX_ADC1_Init+0xe8>)
 80046fe:	601a      	str	r2, [r3, #0]
		hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004700:	4b2e      	ldr	r3, [pc, #184]	@ (80047bc <MX_ADC1_Init+0xe4>)
 8004702:	2200      	movs	r2, #0
 8004704:	605a      	str	r2, [r3, #4]
		hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004706:	4b2d      	ldr	r3, [pc, #180]	@ (80047bc <MX_ADC1_Init+0xe4>)
 8004708:	2200      	movs	r2, #0
 800470a:	609a      	str	r2, [r3, #8]
		hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800470c:	4b2b      	ldr	r3, [pc, #172]	@ (80047bc <MX_ADC1_Init+0xe4>)
 800470e:	2200      	movs	r2, #0
 8004710:	60da      	str	r2, [r3, #12]
		hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004712:	4b2a      	ldr	r3, [pc, #168]	@ (80047bc <MX_ADC1_Init+0xe4>)
 8004714:	2200      	movs	r2, #0
 8004716:	611a      	str	r2, [r3, #16]
		hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004718:	4b28      	ldr	r3, [pc, #160]	@ (80047bc <MX_ADC1_Init+0xe4>)
 800471a:	2208      	movs	r2, #8
 800471c:	615a      	str	r2, [r3, #20]
		hadc1.Init.LowPowerAutoWait = DISABLE;
 800471e:	4b27      	ldr	r3, [pc, #156]	@ (80047bc <MX_ADC1_Init+0xe4>)
 8004720:	2200      	movs	r2, #0
 8004722:	761a      	strb	r2, [r3, #24]
		hadc1.Init.ContinuousConvMode = DISABLE;
 8004724:	4b25      	ldr	r3, [pc, #148]	@ (80047bc <MX_ADC1_Init+0xe4>)
 8004726:	2200      	movs	r2, #0
 8004728:	765a      	strb	r2, [r3, #25]
		hadc1.Init.NbrOfConversion = 1;
 800472a:	4b24      	ldr	r3, [pc, #144]	@ (80047bc <MX_ADC1_Init+0xe4>)
 800472c:	2201      	movs	r2, #1
 800472e:	61da      	str	r2, [r3, #28]
		hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004730:	4b22      	ldr	r3, [pc, #136]	@ (80047bc <MX_ADC1_Init+0xe4>)
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2020 	strb.w	r2, [r3, #32]
		hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8004738:	4b20      	ldr	r3, [pc, #128]	@ (80047bc <MX_ADC1_Init+0xe4>)
 800473a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800473e:	629a      	str	r2, [r3, #40]	@ 0x28
		hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004740:	4b1e      	ldr	r3, [pc, #120]	@ (80047bc <MX_ADC1_Init+0xe4>)
 8004742:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004746:	62da      	str	r2, [r3, #44]	@ 0x2c
		hadc1.Init.DMAContinuousRequests = ENABLE;
 8004748:	4b1c      	ldr	r3, [pc, #112]	@ (80047bc <MX_ADC1_Init+0xe4>)
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004750:	4b1a      	ldr	r3, [pc, #104]	@ (80047bc <MX_ADC1_Init+0xe4>)
 8004752:	2200      	movs	r2, #0
 8004754:	635a      	str	r2, [r3, #52]	@ 0x34
		hadc1.Init.OversamplingMode = DISABLE;
 8004756:	4b19      	ldr	r3, [pc, #100]	@ (80047bc <MX_ADC1_Init+0xe4>)
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800475e:	4817      	ldr	r0, [pc, #92]	@ (80047bc <MX_ADC1_Init+0xe4>)
 8004760:	f006 fd2a 	bl	800b1b8 <HAL_ADC_Init>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <MX_ADC1_Init+0x96>
		{
			Error_Handler();
 800476a:	f000 fd2f 	bl	80051cc <Error_Handler>
		}

		/** Configure the ADC multi-mode
		 */
		multimode.Mode = ADC_MODE_INDEPENDENT;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
		if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004772:	f107 031c 	add.w	r3, r7, #28
 8004776:	4619      	mov	r1, r3
 8004778:	4810      	ldr	r0, [pc, #64]	@ (80047bc <MX_ADC1_Init+0xe4>)
 800477a:	f007 fde3 	bl	800c344 <HAL_ADCEx_MultiModeConfigChannel>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <MX_ADC1_Init+0xb0>
		{
			Error_Handler();
 8004784:	f000 fd22 	bl	80051cc <Error_Handler>
		}

		/** Configure Regular Channel
		 */
		sConfig.Channel = ADC_CHANNEL_9;
 8004788:	4b0e      	ldr	r3, [pc, #56]	@ (80047c4 <MX_ADC1_Init+0xec>)
 800478a:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 800478c:	2306      	movs	r3, #6
 800478e:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004794:	237f      	movs	r3, #127	@ 0x7f
 8004796:	613b      	str	r3, [r7, #16]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004798:	2304      	movs	r3, #4
 800479a:	617b      	str	r3, [r7, #20]
		sConfig.Offset = 0;
 800479c:	2300      	movs	r3, #0
 800479e:	61bb      	str	r3, [r7, #24]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047a0:	1d3b      	adds	r3, r7, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4805      	ldr	r0, [pc, #20]	@ (80047bc <MX_ADC1_Init+0xe4>)
 80047a6:	f006 ff7f 	bl	800b6a8 <HAL_ADC_ConfigChannel>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <MX_ADC1_Init+0xdc>
		{
			Error_Handler();
 80047b0:	f000 fd0c 	bl	80051cc <Error_Handler>
		}
		/* USER CODE BEGIN ADC1_Init 2 */

		/* USER CODE END ADC1_Init 2 */

	}
 80047b4:	bf00      	nop
 80047b6:	3728      	adds	r7, #40	@ 0x28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20000218 	.word	0x20000218
 80047c0:	50040000 	.word	0x50040000
 80047c4:	25b00200 	.word	0x25b00200

080047c8 <MX_CRC_Init>:
	 * @brief CRC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_CRC_Init(void)
	{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
		/* USER CODE END CRC_Init 0 */

		/* USER CODE BEGIN CRC_Init 1 */

		/* USER CODE END CRC_Init 1 */
		hcrc.Instance = CRC;
 80047cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004804 <MX_CRC_Init+0x3c>)
 80047ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004808 <MX_CRC_Init+0x40>)
 80047d0:	601a      	str	r2, [r3, #0]
		hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80047d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004804 <MX_CRC_Init+0x3c>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	711a      	strb	r2, [r3, #4]
		hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80047d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <MX_CRC_Init+0x3c>)
 80047da:	2200      	movs	r2, #0
 80047dc:	715a      	strb	r2, [r3, #5]
		hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80047de:	4b09      	ldr	r3, [pc, #36]	@ (8004804 <MX_CRC_Init+0x3c>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	615a      	str	r2, [r3, #20]
		hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80047e4:	4b07      	ldr	r3, [pc, #28]	@ (8004804 <MX_CRC_Init+0x3c>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	619a      	str	r2, [r3, #24]
		hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <MX_CRC_Init+0x3c>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	621a      	str	r2, [r3, #32]
		if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80047f0:	4804      	ldr	r0, [pc, #16]	@ (8004804 <MX_CRC_Init+0x3c>)
 80047f2:	f007 ff83 	bl	800c6fc <HAL_CRC_Init>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <MX_CRC_Init+0x38>
		{
			Error_Handler();
 80047fc:	f000 fce6 	bl	80051cc <Error_Handler>
		}
		/* USER CODE BEGIN CRC_Init 2 */

		/* USER CODE END CRC_Init 2 */

	}
 8004800:	bf00      	nop
 8004802:	bd80      	pop	{r7, pc}
 8004804:	200002c4 	.word	0x200002c4
 8004808:	40023000 	.word	0x40023000

0800480c <MX_I2C3_Init>:
	 * @brief I2C3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_I2C3_Init(void)
	{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
		/* USER CODE END I2C3_Init 0 */

		/* USER CODE BEGIN I2C3_Init 1 */

		/* USER CODE END I2C3_Init 1 */
		hi2c3.Instance = I2C3;
 8004810:	4b1b      	ldr	r3, [pc, #108]	@ (8004880 <MX_I2C3_Init+0x74>)
 8004812:	4a1c      	ldr	r2, [pc, #112]	@ (8004884 <MX_I2C3_Init+0x78>)
 8004814:	601a      	str	r2, [r3, #0]
		hi2c3.Init.Timing = 0x10909CEC;
 8004816:	4b1a      	ldr	r3, [pc, #104]	@ (8004880 <MX_I2C3_Init+0x74>)
 8004818:	4a1b      	ldr	r2, [pc, #108]	@ (8004888 <MX_I2C3_Init+0x7c>)
 800481a:	605a      	str	r2, [r3, #4]
		hi2c3.Init.OwnAddress1 = 0;
 800481c:	4b18      	ldr	r3, [pc, #96]	@ (8004880 <MX_I2C3_Init+0x74>)
 800481e:	2200      	movs	r2, #0
 8004820:	609a      	str	r2, [r3, #8]
		hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004822:	4b17      	ldr	r3, [pc, #92]	@ (8004880 <MX_I2C3_Init+0x74>)
 8004824:	2201      	movs	r2, #1
 8004826:	60da      	str	r2, [r3, #12]
		hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004828:	4b15      	ldr	r3, [pc, #84]	@ (8004880 <MX_I2C3_Init+0x74>)
 800482a:	2200      	movs	r2, #0
 800482c:	611a      	str	r2, [r3, #16]
		hi2c3.Init.OwnAddress2 = 0;
 800482e:	4b14      	ldr	r3, [pc, #80]	@ (8004880 <MX_I2C3_Init+0x74>)
 8004830:	2200      	movs	r2, #0
 8004832:	615a      	str	r2, [r3, #20]
		hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004834:	4b12      	ldr	r3, [pc, #72]	@ (8004880 <MX_I2C3_Init+0x74>)
 8004836:	2200      	movs	r2, #0
 8004838:	619a      	str	r2, [r3, #24]
		hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800483a:	4b11      	ldr	r3, [pc, #68]	@ (8004880 <MX_I2C3_Init+0x74>)
 800483c:	2200      	movs	r2, #0
 800483e:	61da      	str	r2, [r3, #28]
		hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004840:	4b0f      	ldr	r3, [pc, #60]	@ (8004880 <MX_I2C3_Init+0x74>)
 8004842:	2200      	movs	r2, #0
 8004844:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004846:	480e      	ldr	r0, [pc, #56]	@ (8004880 <MX_I2C3_Init+0x74>)
 8004848:	f009 fc58 	bl	800e0fc <HAL_I2C_Init>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <MX_I2C3_Init+0x4a>
		{
			Error_Handler();
 8004852:	f000 fcbb 	bl	80051cc <Error_Handler>
		}

		/** Configure Analogue filter
		 */
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004856:	2100      	movs	r1, #0
 8004858:	4809      	ldr	r0, [pc, #36]	@ (8004880 <MX_I2C3_Init+0x74>)
 800485a:	f00a f99f 	bl	800eb9c <HAL_I2CEx_ConfigAnalogFilter>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <MX_I2C3_Init+0x5c>
		{
			Error_Handler();
 8004864:	f000 fcb2 	bl	80051cc <Error_Handler>
		}

		/** Configure Digital filter
		 */
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004868:	2100      	movs	r1, #0
 800486a:	4805      	ldr	r0, [pc, #20]	@ (8004880 <MX_I2C3_Init+0x74>)
 800486c:	f00a f9e1 	bl	800ec32 <HAL_I2CEx_ConfigDigitalFilter>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <MX_I2C3_Init+0x6e>
		{
			Error_Handler();
 8004876:	f000 fca9 	bl	80051cc <Error_Handler>
		}
		/* USER CODE BEGIN I2C3_Init 2 */

		/* USER CODE END I2C3_Init 2 */

	}
 800487a:	bf00      	nop
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	200002e8 	.word	0x200002e8
 8004884:	40005c00 	.word	0x40005c00
 8004888:	10909cec 	.word	0x10909cec

0800488c <MX_QUADSPI_Init>:
	 * @brief QUADSPI Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_QUADSPI_Init(void)
	{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN QUADSPI_Init 1 */

		/* USER CODE END QUADSPI_Init 1 */
		/* QUADSPI parameter configuration*/
		hqspi.Instance = QUADSPI;
 8004890:	4b0f      	ldr	r3, [pc, #60]	@ (80048d0 <MX_QUADSPI_Init+0x44>)
 8004892:	4a10      	ldr	r2, [pc, #64]	@ (80048d4 <MX_QUADSPI_Init+0x48>)
 8004894:	601a      	str	r2, [r3, #0]
		hqspi.Init.ClockPrescaler = 1;
 8004896:	4b0e      	ldr	r3, [pc, #56]	@ (80048d0 <MX_QUADSPI_Init+0x44>)
 8004898:	2201      	movs	r2, #1
 800489a:	605a      	str	r2, [r3, #4]
		hqspi.Init.FifoThreshold = 1;
 800489c:	4b0c      	ldr	r3, [pc, #48]	@ (80048d0 <MX_QUADSPI_Init+0x44>)
 800489e:	2201      	movs	r2, #1
 80048a0:	609a      	str	r2, [r3, #8]
		hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80048a2:	4b0b      	ldr	r3, [pc, #44]	@ (80048d0 <MX_QUADSPI_Init+0x44>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	60da      	str	r2, [r3, #12]
		hqspi.Init.FlashSize = 1;
 80048a8:	4b09      	ldr	r3, [pc, #36]	@ (80048d0 <MX_QUADSPI_Init+0x44>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	611a      	str	r2, [r3, #16]
		hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80048ae:	4b08      	ldr	r3, [pc, #32]	@ (80048d0 <MX_QUADSPI_Init+0x44>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	615a      	str	r2, [r3, #20]
		hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80048b4:	4b06      	ldr	r3, [pc, #24]	@ (80048d0 <MX_QUADSPI_Init+0x44>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	619a      	str	r2, [r3, #24]
		if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80048ba:	4805      	ldr	r0, [pc, #20]	@ (80048d0 <MX_QUADSPI_Init+0x44>)
 80048bc:	f00a fa6a 	bl	800ed94 <HAL_QSPI_Init>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <MX_QUADSPI_Init+0x3e>
		{
			Error_Handler();
 80048c6:	f000 fc81 	bl	80051cc <Error_Handler>
		}
		/* USER CODE BEGIN QUADSPI_Init 2 */

		/* USER CODE END QUADSPI_Init 2 */

	}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	2000033c 	.word	0x2000033c
 80048d4:	a0001000 	.word	0xa0001000

080048d8 <MX_RTC_Init>:
	 * @brief RTC Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_RTC_Init(void)
	{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b092      	sub	sp, #72	@ 0x48
 80048dc:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN RTC_Init 0 */

		/* USER CODE END RTC_Init 0 */

		RTC_TimeTypeDef sTime = {0};
 80048de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	605a      	str	r2, [r3, #4]
 80048e8:	609a      	str	r2, [r3, #8]
 80048ea:	60da      	str	r2, [r3, #12]
 80048ec:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 80048ee:	2300      	movs	r3, #0
 80048f0:	633b      	str	r3, [r7, #48]	@ 0x30
		RTC_AlarmTypeDef sAlarm = {0};
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	222c      	movs	r2, #44	@ 0x2c
 80048f6:	2100      	movs	r1, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f011 fab9 	bl	8015e70 <memset>

		/* USER CODE END RTC_Init 1 */

		/** Initialize RTC Only
		 */
		hrtc.Instance = RTC;
 80048fe:	4b3c      	ldr	r3, [pc, #240]	@ (80049f0 <MX_RTC_Init+0x118>)
 8004900:	4a3c      	ldr	r2, [pc, #240]	@ (80049f4 <MX_RTC_Init+0x11c>)
 8004902:	601a      	str	r2, [r3, #0]
		hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004904:	4b3a      	ldr	r3, [pc, #232]	@ (80049f0 <MX_RTC_Init+0x118>)
 8004906:	2200      	movs	r2, #0
 8004908:	605a      	str	r2, [r3, #4]
		hrtc.Init.AsynchPrediv = 127;
 800490a:	4b39      	ldr	r3, [pc, #228]	@ (80049f0 <MX_RTC_Init+0x118>)
 800490c:	227f      	movs	r2, #127	@ 0x7f
 800490e:	609a      	str	r2, [r3, #8]
		hrtc.Init.SynchPrediv = 255;
 8004910:	4b37      	ldr	r3, [pc, #220]	@ (80049f0 <MX_RTC_Init+0x118>)
 8004912:	22ff      	movs	r2, #255	@ 0xff
 8004914:	60da      	str	r2, [r3, #12]
		hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004916:	4b36      	ldr	r3, [pc, #216]	@ (80049f0 <MX_RTC_Init+0x118>)
 8004918:	2200      	movs	r2, #0
 800491a:	611a      	str	r2, [r3, #16]
		hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800491c:	4b34      	ldr	r3, [pc, #208]	@ (80049f0 <MX_RTC_Init+0x118>)
 800491e:	2200      	movs	r2, #0
 8004920:	615a      	str	r2, [r3, #20]
		hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004922:	4b33      	ldr	r3, [pc, #204]	@ (80049f0 <MX_RTC_Init+0x118>)
 8004924:	2200      	movs	r2, #0
 8004926:	619a      	str	r2, [r3, #24]
		hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004928:	4b31      	ldr	r3, [pc, #196]	@ (80049f0 <MX_RTC_Init+0x118>)
 800492a:	2200      	movs	r2, #0
 800492c:	61da      	str	r2, [r3, #28]
		if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800492e:	4830      	ldr	r0, [pc, #192]	@ (80049f0 <MX_RTC_Init+0x118>)
 8004930:	f00c f94e 	bl	8010bd0 <HAL_RTC_Init>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <MX_RTC_Init+0x66>
		{
			Error_Handler();
 800493a:	f000 fc47 	bl	80051cc <Error_Handler>

		/* USER CODE END Check_RTC_BKUP */

		/** Initialize RTC and set the Time and Date
		 */
		sTime.Hours = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
		sTime.Minutes = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
		sTime.Seconds = 0;
 800494a:	2300      	movs	r3, #0
 800494c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004950:	2300      	movs	r3, #0
 8004952:	643b      	str	r3, [r7, #64]	@ 0x40
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004954:	2300      	movs	r3, #0
 8004956:	647b      	str	r3, [r7, #68]	@ 0x44
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004958:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800495c:	2200      	movs	r2, #0
 800495e:	4619      	mov	r1, r3
 8004960:	4823      	ldr	r0, [pc, #140]	@ (80049f0 <MX_RTC_Init+0x118>)
 8004962:	f00c f9bd 	bl	8010ce0 <HAL_RTC_SetTime>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <MX_RTC_Init+0x98>
		{
			Error_Handler();
 800496c:	f000 fc2e 	bl	80051cc <Error_Handler>
		}
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004970:	2301      	movs	r3, #1
 8004972:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		sDate.Month = RTC_MONTH_JANUARY;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		sDate.Date = 1;
 800497c:	2301      	movs	r3, #1
 800497e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
		sDate.Year = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004988:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800498c:	2200      	movs	r2, #0
 800498e:	4619      	mov	r1, r3
 8004990:	4817      	ldr	r0, [pc, #92]	@ (80049f0 <MX_RTC_Init+0x118>)
 8004992:	f00c fa9e 	bl	8010ed2 <HAL_RTC_SetDate>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <MX_RTC_Init+0xc8>
		{
			Error_Handler();
 800499c:	f000 fc16 	bl	80051cc <Error_Handler>
		}

		/** Enable the Alarm A
		 */
		sAlarm.AlarmTime.Hours = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	713b      	strb	r3, [r7, #4]
		sAlarm.AlarmTime.Minutes = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	717b      	strb	r3, [r7, #5]
		sAlarm.AlarmTime.Seconds = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	71bb      	strb	r3, [r7, #6]
		sAlarm.AlarmTime.SubSeconds = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60bb      	str	r3, [r7, #8]
		sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	613b      	str	r3, [r7, #16]
		sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
		sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 80049b8:	4b0f      	ldr	r3, [pc, #60]	@ (80049f8 <MX_RTC_Init+0x120>)
 80049ba:	61bb      	str	r3, [r7, #24]
				|RTC_ALARMMASK_SECONDS;
		sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80049bc:	2300      	movs	r3, #0
 80049be:	623b      	str	r3, [r7, #32]
		sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80049c0:	2300      	movs	r3, #0
 80049c2:	627b      	str	r3, [r7, #36]	@ 0x24
		sAlarm.AlarmDateWeekDay = 1;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		sAlarm.Alarm = RTC_ALARM_A;
 80049ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80049d0:	1d3b      	adds	r3, r7, #4
 80049d2:	2200      	movs	r2, #0
 80049d4:	4619      	mov	r1, r3
 80049d6:	4806      	ldr	r0, [pc, #24]	@ (80049f0 <MX_RTC_Init+0x118>)
 80049d8:	f00c fb02 	bl	8010fe0 <HAL_RTC_SetAlarm_IT>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <MX_RTC_Init+0x10e>
		{
			Error_Handler();
 80049e2:	f000 fbf3 	bl	80051cc <Error_Handler>
		}
		/* USER CODE BEGIN RTC_Init 2 */

		/* USER CODE END RTC_Init 2 */

	}
 80049e6:	bf00      	nop
 80049e8:	3748      	adds	r7, #72	@ 0x48
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000380 	.word	0x20000380
 80049f4:	40002800 	.word	0x40002800
 80049f8:	80800080 	.word	0x80800080

080049fc <MX_SPI2_Init>:
	 * @brief SPI2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI2_Init(void)
	{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI2_Init 1 */

		/* USER CODE END SPI2_Init 1 */
		/* SPI2 parameter configuration*/
		hspi2.Instance = SPI2;
 8004a00:	4b1b      	ldr	r3, [pc, #108]	@ (8004a70 <MX_SPI2_Init+0x74>)
 8004a02:	4a1c      	ldr	r2, [pc, #112]	@ (8004a74 <MX_SPI2_Init+0x78>)
 8004a04:	601a      	str	r2, [r3, #0]
		hspi2.Init.Mode = SPI_MODE_MASTER;
 8004a06:	4b1a      	ldr	r3, [pc, #104]	@ (8004a70 <MX_SPI2_Init+0x74>)
 8004a08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004a0c:	605a      	str	r2, [r3, #4]
		hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004a0e:	4b18      	ldr	r3, [pc, #96]	@ (8004a70 <MX_SPI2_Init+0x74>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	609a      	str	r2, [r3, #8]
		hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a14:	4b16      	ldr	r3, [pc, #88]	@ (8004a70 <MX_SPI2_Init+0x74>)
 8004a16:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004a1a:	60da      	str	r2, [r3, #12]
		hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a1c:	4b14      	ldr	r3, [pc, #80]	@ (8004a70 <MX_SPI2_Init+0x74>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	611a      	str	r2, [r3, #16]
		hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a22:	4b13      	ldr	r3, [pc, #76]	@ (8004a70 <MX_SPI2_Init+0x74>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	615a      	str	r2, [r3, #20]
		hspi2.Init.NSS = SPI_NSS_SOFT;
 8004a28:	4b11      	ldr	r3, [pc, #68]	@ (8004a70 <MX_SPI2_Init+0x74>)
 8004a2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a2e:	619a      	str	r2, [r3, #24]
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a30:	4b0f      	ldr	r3, [pc, #60]	@ (8004a70 <MX_SPI2_Init+0x74>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	61da      	str	r2, [r3, #28]
		hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a36:	4b0e      	ldr	r3, [pc, #56]	@ (8004a70 <MX_SPI2_Init+0x74>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	621a      	str	r2, [r3, #32]
		hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a70 <MX_SPI2_Init+0x74>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	625a      	str	r2, [r3, #36]	@ 0x24
		hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a42:	4b0b      	ldr	r3, [pc, #44]	@ (8004a70 <MX_SPI2_Init+0x74>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	629a      	str	r2, [r3, #40]	@ 0x28
		hspi2.Init.CRCPolynomial = 7;
 8004a48:	4b09      	ldr	r3, [pc, #36]	@ (8004a70 <MX_SPI2_Init+0x74>)
 8004a4a:	2207      	movs	r2, #7
 8004a4c:	62da      	str	r2, [r3, #44]	@ 0x2c
		hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004a4e:	4b08      	ldr	r3, [pc, #32]	@ (8004a70 <MX_SPI2_Init+0x74>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	@ 0x30
		hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004a54:	4b06      	ldr	r3, [pc, #24]	@ (8004a70 <MX_SPI2_Init+0x74>)
 8004a56:	2208      	movs	r2, #8
 8004a58:	635a      	str	r2, [r3, #52]	@ 0x34
		if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004a5a:	4805      	ldr	r0, [pc, #20]	@ (8004a70 <MX_SPI2_Init+0x74>)
 8004a5c:	f00c fd1c 	bl	8011498 <HAL_SPI_Init>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <MX_SPI2_Init+0x6e>
		{
			Error_Handler();
 8004a66:	f000 fbb1 	bl	80051cc <Error_Handler>
		}
		/* USER CODE BEGIN SPI2_Init 2 */

		/* USER CODE END SPI2_Init 2 */

	}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	200003a4 	.word	0x200003a4
 8004a74:	40003800 	.word	0x40003800

08004a78 <MX_SPI3_Init>:
	 * @brief SPI3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI3_Init(void)
	{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI3_Init 1 */

		/* USER CODE END SPI3_Init 1 */
		/* SPI3 parameter configuration*/
		hspi3.Instance = SPI3;
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004aec <MX_SPI3_Init+0x74>)
 8004a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8004af0 <MX_SPI3_Init+0x78>)
 8004a80:	601a      	str	r2, [r3, #0]
		hspi3.Init.Mode = SPI_MODE_MASTER;
 8004a82:	4b1a      	ldr	r3, [pc, #104]	@ (8004aec <MX_SPI3_Init+0x74>)
 8004a84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004a88:	605a      	str	r2, [r3, #4]
		hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004a8a:	4b18      	ldr	r3, [pc, #96]	@ (8004aec <MX_SPI3_Init+0x74>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	609a      	str	r2, [r3, #8]
		hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8004a90:	4b16      	ldr	r3, [pc, #88]	@ (8004aec <MX_SPI3_Init+0x74>)
 8004a92:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004a96:	60da      	str	r2, [r3, #12]
		hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a98:	4b14      	ldr	r3, [pc, #80]	@ (8004aec <MX_SPI3_Init+0x74>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	611a      	str	r2, [r3, #16]
		hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a9e:	4b13      	ldr	r3, [pc, #76]	@ (8004aec <MX_SPI3_Init+0x74>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	615a      	str	r2, [r3, #20]
		hspi3.Init.NSS = SPI_NSS_SOFT;
 8004aa4:	4b11      	ldr	r3, [pc, #68]	@ (8004aec <MX_SPI3_Init+0x74>)
 8004aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004aaa:	619a      	str	r2, [r3, #24]
		hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004aac:	4b0f      	ldr	r3, [pc, #60]	@ (8004aec <MX_SPI3_Init+0x74>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	61da      	str	r2, [r3, #28]
		hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8004aec <MX_SPI3_Init+0x74>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	621a      	str	r2, [r3, #32]
		hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <MX_SPI3_Init+0x74>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	625a      	str	r2, [r3, #36]	@ 0x24
		hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004abe:	4b0b      	ldr	r3, [pc, #44]	@ (8004aec <MX_SPI3_Init+0x74>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	629a      	str	r2, [r3, #40]	@ 0x28
		hspi3.Init.CRCPolynomial = 7;
 8004ac4:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <MX_SPI3_Init+0x74>)
 8004ac6:	2207      	movs	r2, #7
 8004ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
		hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004aca:	4b08      	ldr	r3, [pc, #32]	@ (8004aec <MX_SPI3_Init+0x74>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	631a      	str	r2, [r3, #48]	@ 0x30
		hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004ad0:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <MX_SPI3_Init+0x74>)
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	635a      	str	r2, [r3, #52]	@ 0x34
		if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004ad6:	4805      	ldr	r0, [pc, #20]	@ (8004aec <MX_SPI3_Init+0x74>)
 8004ad8:	f00c fcde 	bl	8011498 <HAL_SPI_Init>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <MX_SPI3_Init+0x6e>
		{
			Error_Handler();
 8004ae2:	f000 fb73 	bl	80051cc <Error_Handler>
		}
		/* USER CODE BEGIN SPI3_Init 2 */

		/* USER CODE END SPI3_Init 2 */

	}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000408 	.word	0x20000408
 8004af0:	40003c00 	.word	0x40003c00

08004af4 <MX_TIM1_Init>:
	 * @brief TIM1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM1_Init(void)
	{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b096      	sub	sp, #88	@ 0x58
 8004af8:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM1_Init 0 */

		/* USER CODE END TIM1_Init 0 */

		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004afa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = {0};
 8004b06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	605a      	str	r2, [r3, #4]
 8004b10:	609a      	str	r2, [r3, #8]
 8004b12:	60da      	str	r2, [r3, #12]
 8004b14:	611a      	str	r2, [r3, #16]
 8004b16:	615a      	str	r2, [r3, #20]
 8004b18:	619a      	str	r2, [r3, #24]
		TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004b1a:	1d3b      	adds	r3, r7, #4
 8004b1c:	222c      	movs	r2, #44	@ 0x2c
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f011 f9a5 	bl	8015e70 <memset>

		/* USER CODE BEGIN TIM1_Init 1 */

		/* USER CODE END TIM1_Init 1 */
		htim1.Instance = TIM1;
 8004b26:	4b45      	ldr	r3, [pc, #276]	@ (8004c3c <MX_TIM1_Init+0x148>)
 8004b28:	4a45      	ldr	r2, [pc, #276]	@ (8004c40 <MX_TIM1_Init+0x14c>)
 8004b2a:	601a      	str	r2, [r3, #0]
		htim1.Init.Prescaler = 1599;
 8004b2c:	4b43      	ldr	r3, [pc, #268]	@ (8004c3c <MX_TIM1_Init+0x148>)
 8004b2e:	f240 623f 	movw	r2, #1599	@ 0x63f
 8004b32:	605a      	str	r2, [r3, #4]
		htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b34:	4b41      	ldr	r3, [pc, #260]	@ (8004c3c <MX_TIM1_Init+0x148>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	609a      	str	r2, [r3, #8]
		htim1.Init.Period = 49999;
 8004b3a:	4b40      	ldr	r3, [pc, #256]	@ (8004c3c <MX_TIM1_Init+0x148>)
 8004b3c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8004b40:	60da      	str	r2, [r3, #12]
		htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b42:	4b3e      	ldr	r3, [pc, #248]	@ (8004c3c <MX_TIM1_Init+0x148>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	611a      	str	r2, [r3, #16]
		htim1.Init.RepetitionCounter = 0;
 8004b48:	4b3c      	ldr	r3, [pc, #240]	@ (8004c3c <MX_TIM1_Init+0x148>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	615a      	str	r2, [r3, #20]
		htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c3c <MX_TIM1_Init+0x148>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8004b54:	4839      	ldr	r0, [pc, #228]	@ (8004c3c <MX_TIM1_Init+0x148>)
 8004b56:	f00d fc22 	bl	801239e <HAL_TIM_OC_Init>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <MX_TIM1_Init+0x70>
		{
			Error_Handler();
 8004b60:	f000 fb34 	bl	80051cc <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b64:	2300      	movs	r3, #0
 8004b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
		sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	653b      	str	r3, [r7, #80]	@ 0x50
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	657b      	str	r3, [r7, #84]	@ 0x54
		if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b70:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004b74:	4619      	mov	r1, r3
 8004b76:	4831      	ldr	r0, [pc, #196]	@ (8004c3c <MX_TIM1_Init+0x148>)
 8004b78:	f00f fc28 	bl	80143cc <HAL_TIMEx_MasterConfigSynchronization>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <MX_TIM1_Init+0x92>
		{
			Error_Handler();
 8004b82:	f000 fb23 	bl	80051cc <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004b86:	2300      	movs	r3, #0
 8004b88:	633b      	str	r3, [r7, #48]	@ 0x30
		sConfigOC.Pulse = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	637b      	str	r3, [r7, #52]	@ 0x34
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	63bb      	str	r3, [r7, #56]	@ 0x38
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004b92:	2300      	movs	r3, #0
 8004b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	643b      	str	r3, [r7, #64]	@ 0x40
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	647b      	str	r3, [r7, #68]	@ 0x44
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ba2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4824      	ldr	r0, [pc, #144]	@ (8004c3c <MX_TIM1_Init+0x148>)
 8004bac:	f00e fae4 	bl	8013178 <HAL_TIM_OC_ConfigChannel>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <MX_TIM1_Init+0xc6>
		{
			Error_Handler();
 8004bb6:	f000 fb09 	bl	80051cc <Error_Handler>
		}
		if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004bba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	481e      	ldr	r0, [pc, #120]	@ (8004c3c <MX_TIM1_Init+0x148>)
 8004bc4:	f00e fad8 	bl	8013178 <HAL_TIM_OC_ConfigChannel>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <MX_TIM1_Init+0xde>
		{
			Error_Handler();
 8004bce:	f000 fafd 	bl	80051cc <Error_Handler>
		}
		if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004bd2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004bd6:	2208      	movs	r2, #8
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4818      	ldr	r0, [pc, #96]	@ (8004c3c <MX_TIM1_Init+0x148>)
 8004bdc:	f00e facc 	bl	8013178 <HAL_TIM_OC_ConfigChannel>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <MX_TIM1_Init+0xf6>
		{
			Error_Handler();
 8004be6:	f000 faf1 	bl	80051cc <Error_Handler>
		}
		sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	607b      	str	r3, [r7, #4]
		sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60bb      	str	r3, [r7, #8]
		sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
		sBreakDeadTimeConfig.DeadTime = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	613b      	str	r3, [r7, #16]
		sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
		sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004bfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c02:	61bb      	str	r3, [r7, #24]
		sBreakDeadTimeConfig.BreakFilter = 0;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61fb      	str	r3, [r7, #28]
		sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	623b      	str	r3, [r7, #32]
		sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004c0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c10:	627b      	str	r3, [r7, #36]	@ 0x24
		sBreakDeadTimeConfig.Break2Filter = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	62bb      	str	r3, [r7, #40]	@ 0x28
		sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004c16:	2300      	movs	r3, #0
 8004c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004c1a:	1d3b      	adds	r3, r7, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4807      	ldr	r0, [pc, #28]	@ (8004c3c <MX_TIM1_Init+0x148>)
 8004c20:	f00f fc5c 	bl	80144dc <HAL_TIMEx_ConfigBreakDeadTime>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <MX_TIM1_Init+0x13a>
		{
			Error_Handler();
 8004c2a:	f000 facf 	bl	80051cc <Error_Handler>
		}
		/* USER CODE BEGIN TIM1_Init 2 */

		/* USER CODE END TIM1_Init 2 */
		HAL_TIM_MspPostInit(&htim1);
 8004c2e:	4803      	ldr	r0, [pc, #12]	@ (8004c3c <MX_TIM1_Init+0x148>)
 8004c30:	f002 fd50 	bl	80076d4 <HAL_TIM_MspPostInit>

	}
 8004c34:	bf00      	nop
 8004c36:	3758      	adds	r7, #88	@ 0x58
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	2000046c 	.word	0x2000046c
 8004c40:	40012c00 	.word	0x40012c00

08004c44 <MX_TIM2_Init>:
	 * @brief TIM2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM2_Init(void)
	{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM2_Init 0 */

		/* USER CODE END TIM2_Init 0 */

		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c4a:	f107 0314 	add.w	r3, r7, #20
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	605a      	str	r2, [r3, #4]
 8004c54:	609a      	str	r2, [r3, #8]
		TIM_IC_InitTypeDef sConfigIC = {0};
 8004c56:	1d3b      	adds	r3, r7, #4
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	60da      	str	r2, [r3, #12]

		/* USER CODE BEGIN TIM2_Init 1 */

		/* USER CODE END TIM2_Init 1 */
		htim2.Instance = TIM2;
 8004c62:	4b21      	ldr	r3, [pc, #132]	@ (8004ce8 <MX_TIM2_Init+0xa4>)
 8004c64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004c68:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 0;
 8004c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce8 <MX_TIM2_Init+0xa4>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c70:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce8 <MX_TIM2_Init+0xa4>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 4294967295;
 8004c76:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce8 <MX_TIM2_Init+0xa4>)
 8004c78:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7c:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce8 <MX_TIM2_Init+0xa4>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c84:	4b18      	ldr	r3, [pc, #96]	@ (8004ce8 <MX_TIM2_Init+0xa4>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004c8a:	4817      	ldr	r0, [pc, #92]	@ (8004ce8 <MX_TIM2_Init+0xa4>)
 8004c8c:	f00e f814 	bl	8012cb8 <HAL_TIM_IC_Init>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <MX_TIM2_Init+0x56>
		{
			Error_Handler();
 8004c96:	f000 fa99 	bl	80051cc <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ca2:	f107 0314 	add.w	r3, r7, #20
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	480f      	ldr	r0, [pc, #60]	@ (8004ce8 <MX_TIM2_Init+0xa4>)
 8004caa:	f00f fb8f 	bl	80143cc <HAL_TIMEx_MasterConfigSynchronization>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <MX_TIM2_Init+0x74>
		{
			Error_Handler();
 8004cb4:	f000 fa8a 	bl	80051cc <Error_Handler>
		}
		sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	607b      	str	r3, [r7, #4]
		sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	60bb      	str	r3, [r7, #8]
		sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
		sConfigIC.ICFilter = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004cc8:	1d3b      	adds	r3, r7, #4
 8004cca:	2200      	movs	r2, #0
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4806      	ldr	r0, [pc, #24]	@ (8004ce8 <MX_TIM2_Init+0xa4>)
 8004cd0:	f00e facc 	bl	801326c <HAL_TIM_IC_ConfigChannel>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <MX_TIM2_Init+0x9a>
		{
			Error_Handler();
 8004cda:	f000 fa77 	bl	80051cc <Error_Handler>
		}
		/* USER CODE BEGIN TIM2_Init 2 */

		/* USER CODE END TIM2_Init 2 */

	}
 8004cde:	bf00      	nop
 8004ce0:	3720      	adds	r7, #32
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	200004b8 	.word	0x200004b8

08004cec <MX_TIM3_Init>:
	 * @brief TIM3 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM3_Init(void)
	{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b090      	sub	sp, #64	@ 0x40
 8004cf0:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM3_Init 0 */

		/* USER CODE END TIM3_Init 0 */

		TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004cf2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	605a      	str	r2, [r3, #4]
 8004cfc:	609a      	str	r2, [r3, #8]
 8004cfe:	60da      	str	r2, [r3, #12]
 8004d00:	611a      	str	r2, [r3, #16]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d02:	f107 0320 	add.w	r3, r7, #32
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	605a      	str	r2, [r3, #4]
 8004d0c:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = {0};
 8004d0e:	1d3b      	adds	r3, r7, #4
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	605a      	str	r2, [r3, #4]
 8004d16:	609a      	str	r2, [r3, #8]
 8004d18:	60da      	str	r2, [r3, #12]
 8004d1a:	611a      	str	r2, [r3, #16]
 8004d1c:	615a      	str	r2, [r3, #20]
 8004d1e:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM3_Init 1 */

		/* USER CODE END TIM3_Init 1 */
		htim3.Instance = TIM3;
 8004d20:	4b2c      	ldr	r3, [pc, #176]	@ (8004dd4 <MX_TIM3_Init+0xe8>)
 8004d22:	4a2d      	ldr	r2, [pc, #180]	@ (8004dd8 <MX_TIM3_Init+0xec>)
 8004d24:	601a      	str	r2, [r3, #0]
		htim3.Init.Prescaler = 0;
 8004d26:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd4 <MX_TIM3_Init+0xe8>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	605a      	str	r2, [r3, #4]
		htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d2c:	4b29      	ldr	r3, [pc, #164]	@ (8004dd4 <MX_TIM3_Init+0xe8>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	609a      	str	r2, [r3, #8]
		htim3.Init.Period = 31;
 8004d32:	4b28      	ldr	r3, [pc, #160]	@ (8004dd4 <MX_TIM3_Init+0xe8>)
 8004d34:	221f      	movs	r2, #31
 8004d36:	60da      	str	r2, [r3, #12]
		htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d38:	4b26      	ldr	r3, [pc, #152]	@ (8004dd4 <MX_TIM3_Init+0xe8>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	611a      	str	r2, [r3, #16]
		htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d3e:	4b25      	ldr	r3, [pc, #148]	@ (8004dd4 <MX_TIM3_Init+0xe8>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004d44:	4823      	ldr	r0, [pc, #140]	@ (8004dd4 <MX_TIM3_Init+0xe8>)
 8004d46:	f00d fad3 	bl	80122f0 <HAL_TIM_Base_Init>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <MX_TIM3_Init+0x68>
		{
			Error_Handler();
 8004d50:	f000 fa3c 	bl	80051cc <Error_Handler>
		}
		if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004d54:	481f      	ldr	r0, [pc, #124]	@ (8004dd4 <MX_TIM3_Init+0xe8>)
 8004d56:	f00d fdb1 	bl	80128bc <HAL_TIM_PWM_Init>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <MX_TIM3_Init+0x78>
		{
			Error_Handler();
 8004d60:	f000 fa34 	bl	80051cc <Error_Handler>
		}
		sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8004d64:	2307      	movs	r3, #7
 8004d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8004d68:	2330      	movs	r3, #48	@ 0x30
 8004d6a:	633b      	str	r3, [r7, #48]	@ 0x30
		if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004d6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d70:	4619      	mov	r1, r3
 8004d72:	4818      	ldr	r0, [pc, #96]	@ (8004dd4 <MX_TIM3_Init+0xe8>)
 8004d74:	f00e fcf3 	bl	801375e <HAL_TIM_SlaveConfigSynchro>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <MX_TIM3_Init+0x96>
		{
			Error_Handler();
 8004d7e:	f000 fa25 	bl	80051cc <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d82:	2300      	movs	r3, #0
 8004d84:	623b      	str	r3, [r7, #32]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d86:	2300      	movs	r3, #0
 8004d88:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d8a:	f107 0320 	add.w	r3, r7, #32
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4810      	ldr	r0, [pc, #64]	@ (8004dd4 <MX_TIM3_Init+0xe8>)
 8004d92:	f00f fb1b 	bl	80143cc <HAL_TIMEx_MasterConfigSynchronization>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <MX_TIM3_Init+0xb4>
		{
			Error_Handler();
 8004d9c:	f000 fa16 	bl	80051cc <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004da0:	2360      	movs	r3, #96	@ 0x60
 8004da2:	607b      	str	r3, [r7, #4]
		sConfigOC.Pulse = 15;
 8004da4:	230f      	movs	r3, #15
 8004da6:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
		if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004db0:	1d3b      	adds	r3, r7, #4
 8004db2:	2208      	movs	r2, #8
 8004db4:	4619      	mov	r1, r3
 8004db6:	4807      	ldr	r0, [pc, #28]	@ (8004dd4 <MX_TIM3_Init+0xe8>)
 8004db8:	f00e faf4 	bl	80133a4 <HAL_TIM_PWM_ConfigChannel>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <MX_TIM3_Init+0xda>
		{
			Error_Handler();
 8004dc2:	f000 fa03 	bl	80051cc <Error_Handler>
		}
		/* USER CODE BEGIN TIM3_Init 2 */

		/* USER CODE END TIM3_Init 2 */
		HAL_TIM_MspPostInit(&htim3);
 8004dc6:	4803      	ldr	r0, [pc, #12]	@ (8004dd4 <MX_TIM3_Init+0xe8>)
 8004dc8:	f002 fc84 	bl	80076d4 <HAL_TIM_MspPostInit>

	}
 8004dcc:	bf00      	nop
 8004dce:	3740      	adds	r7, #64	@ 0x40
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000504 	.word	0x20000504
 8004dd8:	40000400 	.word	0x40000400

08004ddc <MX_TIM4_Init>:
	 * @brief TIM4 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM4_Init(void)
	{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08e      	sub	sp, #56	@ 0x38
 8004de0:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM4_Init 0 */

		/* USER CODE END TIM4_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004de2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	605a      	str	r2, [r3, #4]
 8004dec:	609a      	str	r2, [r3, #8]
 8004dee:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004df0:	f107 031c 	add.w	r3, r7, #28
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = {0};
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	605a      	str	r2, [r3, #4]
 8004e04:	609a      	str	r2, [r3, #8]
 8004e06:	60da      	str	r2, [r3, #12]
 8004e08:	611a      	str	r2, [r3, #16]
 8004e0a:	615a      	str	r2, [r3, #20]
 8004e0c:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM4_Init 1 */

		/* USER CODE END TIM4_Init 1 */
		htim4.Instance = TIM4;
 8004e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8004ebc <MX_TIM4_Init+0xe0>)
 8004e10:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec0 <MX_TIM4_Init+0xe4>)
 8004e12:	601a      	str	r2, [r3, #0]
		htim4.Init.Prescaler = 99;
 8004e14:	4b29      	ldr	r3, [pc, #164]	@ (8004ebc <MX_TIM4_Init+0xe0>)
 8004e16:	2263      	movs	r2, #99	@ 0x63
 8004e18:	605a      	str	r2, [r3, #4]
		htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e1a:	4b28      	ldr	r3, [pc, #160]	@ (8004ebc <MX_TIM4_Init+0xe0>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	609a      	str	r2, [r3, #8]
		htim4.Init.Period = 999;
 8004e20:	4b26      	ldr	r3, [pc, #152]	@ (8004ebc <MX_TIM4_Init+0xe0>)
 8004e22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004e26:	60da      	str	r2, [r3, #12]
		htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e28:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <MX_TIM4_Init+0xe0>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	611a      	str	r2, [r3, #16]
		htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e2e:	4b23      	ldr	r3, [pc, #140]	@ (8004ebc <MX_TIM4_Init+0xe0>)
 8004e30:	2280      	movs	r2, #128	@ 0x80
 8004e32:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004e34:	4821      	ldr	r0, [pc, #132]	@ (8004ebc <MX_TIM4_Init+0xe0>)
 8004e36:	f00d fa5b 	bl	80122f0 <HAL_TIM_Base_Init>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <MX_TIM4_Init+0x68>
		{
			Error_Handler();
 8004e40:	f000 f9c4 	bl	80051cc <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e48:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004e4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004e4e:	4619      	mov	r1, r3
 8004e50:	481a      	ldr	r0, [pc, #104]	@ (8004ebc <MX_TIM4_Init+0xe0>)
 8004e52:	f00e fbbb 	bl	80135cc <HAL_TIM_ConfigClockSource>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <MX_TIM4_Init+0x84>
		{
			Error_Handler();
 8004e5c:	f000 f9b6 	bl	80051cc <Error_Handler>
		}
		if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8004e60:	4816      	ldr	r0, [pc, #88]	@ (8004ebc <MX_TIM4_Init+0xe0>)
 8004e62:	f00d fa9c 	bl	801239e <HAL_TIM_OC_Init>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <MX_TIM4_Init+0x94>
		{
			Error_Handler();
 8004e6c:	f000 f9ae 	bl	80051cc <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e70:	2320      	movs	r3, #32
 8004e72:	61fb      	str	r3, [r7, #28]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e74:	2300      	movs	r3, #0
 8004e76:	627b      	str	r3, [r7, #36]	@ 0x24
		if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004e78:	f107 031c 	add.w	r3, r7, #28
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	480f      	ldr	r0, [pc, #60]	@ (8004ebc <MX_TIM4_Init+0xe0>)
 8004e80:	f00f faa4 	bl	80143cc <HAL_TIMEx_MasterConfigSynchronization>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <MX_TIM4_Init+0xb2>
		{
			Error_Handler();
 8004e8a:	f000 f99f 	bl	80051cc <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	603b      	str	r3, [r7, #0]
		sConfigOC.Pulse = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	607b      	str	r3, [r7, #4]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004e9e:	463b      	mov	r3, r7
 8004ea0:	2208      	movs	r2, #8
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4805      	ldr	r0, [pc, #20]	@ (8004ebc <MX_TIM4_Init+0xe0>)
 8004ea6:	f00e f967 	bl	8013178 <HAL_TIM_OC_ConfigChannel>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <MX_TIM4_Init+0xd8>
		{
			Error_Handler();
 8004eb0:	f000 f98c 	bl	80051cc <Error_Handler>
		}
		/* USER CODE BEGIN TIM4_Init 2 */

		/* USER CODE END TIM4_Init 2 */

	}
 8004eb4:	bf00      	nop
 8004eb6:	3738      	adds	r7, #56	@ 0x38
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000550 	.word	0x20000550
 8004ec0:	40000800 	.word	0x40000800

08004ec4 <MX_UART4_Init>:
	 * @brief UART4 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_UART4_Init(void)
	{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
		/* USER CODE END UART4_Init 0 */

		/* USER CODE BEGIN UART4_Init 1 */

		/* USER CODE END UART4_Init 1 */
		huart4.Instance = UART4;
 8004ec8:	4b14      	ldr	r3, [pc, #80]	@ (8004f1c <MX_UART4_Init+0x58>)
 8004eca:	4a15      	ldr	r2, [pc, #84]	@ (8004f20 <MX_UART4_Init+0x5c>)
 8004ecc:	601a      	str	r2, [r3, #0]
		huart4.Init.BaudRate = 115200;
 8004ece:	4b13      	ldr	r3, [pc, #76]	@ (8004f1c <MX_UART4_Init+0x58>)
 8004ed0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004ed4:	605a      	str	r2, [r3, #4]
		huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004ed6:	4b11      	ldr	r3, [pc, #68]	@ (8004f1c <MX_UART4_Init+0x58>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	609a      	str	r2, [r3, #8]
		huart4.Init.StopBits = UART_STOPBITS_1;
 8004edc:	4b0f      	ldr	r3, [pc, #60]	@ (8004f1c <MX_UART4_Init+0x58>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	60da      	str	r2, [r3, #12]
		huart4.Init.Parity = UART_PARITY_NONE;
 8004ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8004f1c <MX_UART4_Init+0x58>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	611a      	str	r2, [r3, #16]
		huart4.Init.Mode = UART_MODE_TX_RX;
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f1c <MX_UART4_Init+0x58>)
 8004eea:	220c      	movs	r2, #12
 8004eec:	615a      	str	r2, [r3, #20]
		huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004eee:	4b0b      	ldr	r3, [pc, #44]	@ (8004f1c <MX_UART4_Init+0x58>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	619a      	str	r2, [r3, #24]
		huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ef4:	4b09      	ldr	r3, [pc, #36]	@ (8004f1c <MX_UART4_Init+0x58>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	61da      	str	r2, [r3, #28]
		huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004efa:	4b08      	ldr	r3, [pc, #32]	@ (8004f1c <MX_UART4_Init+0x58>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	621a      	str	r2, [r3, #32]
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f00:	4b06      	ldr	r3, [pc, #24]	@ (8004f1c <MX_UART4_Init+0x58>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	625a      	str	r2, [r3, #36]	@ 0x24
		if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8004f06:	4805      	ldr	r0, [pc, #20]	@ (8004f1c <MX_UART4_Init+0x58>)
 8004f08:	f00f fbb4 	bl	8014674 <HAL_HalfDuplex_Init>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <MX_UART4_Init+0x52>
		{
			Error_Handler();
 8004f12:	f000 f95b 	bl	80051cc <Error_Handler>
		}
		/* USER CODE BEGIN UART4_Init 2 */

		/* USER CODE END UART4_Init 2 */

	}
 8004f16:	bf00      	nop
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	2000059c 	.word	0x2000059c
 8004f20:	40004c00 	.word	0x40004c00

08004f24 <MX_USART1_UART_Init>:
	 * @brief USART1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_USART1_UART_Init(void)
	{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
		/* USER CODE END USART1_Init 0 */

		/* USER CODE BEGIN USART1_Init 1 */

		/* USER CODE END USART1_Init 1 */
		huart1.Instance = USART1;
 8004f28:	4b14      	ldr	r3, [pc, #80]	@ (8004f7c <MX_USART1_UART_Init+0x58>)
 8004f2a:	4a15      	ldr	r2, [pc, #84]	@ (8004f80 <MX_USART1_UART_Init+0x5c>)
 8004f2c:	601a      	str	r2, [r3, #0]
		huart1.Init.BaudRate = 115200;
 8004f2e:	4b13      	ldr	r3, [pc, #76]	@ (8004f7c <MX_USART1_UART_Init+0x58>)
 8004f30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f34:	605a      	str	r2, [r3, #4]
		huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f36:	4b11      	ldr	r3, [pc, #68]	@ (8004f7c <MX_USART1_UART_Init+0x58>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	609a      	str	r2, [r3, #8]
		huart1.Init.StopBits = UART_STOPBITS_1;
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f7c <MX_USART1_UART_Init+0x58>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	60da      	str	r2, [r3, #12]
		huart1.Init.Parity = UART_PARITY_NONE;
 8004f42:	4b0e      	ldr	r3, [pc, #56]	@ (8004f7c <MX_USART1_UART_Init+0x58>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	611a      	str	r2, [r3, #16]
		huart1.Init.Mode = UART_MODE_TX_RX;
 8004f48:	4b0c      	ldr	r3, [pc, #48]	@ (8004f7c <MX_USART1_UART_Init+0x58>)
 8004f4a:	220c      	movs	r2, #12
 8004f4c:	615a      	str	r2, [r3, #20]
		huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8004f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f7c <MX_USART1_UART_Init+0x58>)
 8004f50:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004f54:	619a      	str	r2, [r3, #24]
		huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f56:	4b09      	ldr	r3, [pc, #36]	@ (8004f7c <MX_USART1_UART_Init+0x58>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	61da      	str	r2, [r3, #28]
		huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f5c:	4b07      	ldr	r3, [pc, #28]	@ (8004f7c <MX_USART1_UART_Init+0x58>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	621a      	str	r2, [r3, #32]
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f62:	4b06      	ldr	r3, [pc, #24]	@ (8004f7c <MX_USART1_UART_Init+0x58>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	625a      	str	r2, [r3, #36]	@ 0x24
		if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f68:	4804      	ldr	r0, [pc, #16]	@ (8004f7c <MX_USART1_UART_Init+0x58>)
 8004f6a:	f00f fb35 	bl	80145d8 <HAL_UART_Init>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <MX_USART1_UART_Init+0x54>
		{
			Error_Handler();
 8004f74:	f000 f92a 	bl	80051cc <Error_Handler>
		}
		/* USER CODE BEGIN USART1_Init 2 */

		/* USER CODE END USART1_Init 2 */

	}
 8004f78:	bf00      	nop
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000624 	.word	0x20000624
 8004f80:	40013800 	.word	0x40013800

08004f84 <MX_DMA_Init>:

	/**
	 * Enable DMA controller clock
	 */
	static void MX_DMA_Init(void)
	{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0

		/* DMA controller clock enable */
		__HAL_RCC_DMA1_CLK_ENABLE();
 8004f8a:	4b14      	ldr	r3, [pc, #80]	@ (8004fdc <MX_DMA_Init+0x58>)
 8004f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f8e:	4a13      	ldr	r2, [pc, #76]	@ (8004fdc <MX_DMA_Init+0x58>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	6493      	str	r3, [r2, #72]	@ 0x48
 8004f96:	4b11      	ldr	r3, [pc, #68]	@ (8004fdc <MX_DMA_Init+0x58>)
 8004f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	607b      	str	r3, [r7, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]

		/* DMA interrupt init */
		/* DMA1_Channel1_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	200b      	movs	r0, #11
 8004fa8:	f007 fb6d 	bl	800c686 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004fac:	200b      	movs	r0, #11
 8004fae:	f007 fb86 	bl	800c6be <HAL_NVIC_EnableIRQ>
		/* DMA1_Channel4_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	200e      	movs	r0, #14
 8004fb8:	f007 fb65 	bl	800c686 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004fbc:	200e      	movs	r0, #14
 8004fbe:	f007 fb7e 	bl	800c6be <HAL_NVIC_EnableIRQ>
		/* DMA1_Channel5_IRQn interrupt configuration */
		HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	200f      	movs	r0, #15
 8004fc8:	f007 fb5d 	bl	800c686 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004fcc:	200f      	movs	r0, #15
 8004fce:	f007 fb76 	bl	800c6be <HAL_NVIC_EnableIRQ>

	}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40021000 	.word	0x40021000

08004fe0 <MX_GPIO_Init>:
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void)
	{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08a      	sub	sp, #40	@ 0x28
 8004fe4:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fe6:	f107 0314 	add.w	r3, r7, #20
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	605a      	str	r2, [r3, #4]
 8004ff0:	609a      	str	r2, [r3, #8]
 8004ff2:	60da      	str	r2, [r3, #12]
 8004ff4:	611a      	str	r2, [r3, #16]
		/* USER CODE BEGIN MX_GPIO_Init_1 */
		/* USER CODE END MX_GPIO_Init_1 */

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8004ff6:	4b71      	ldr	r3, [pc, #452]	@ (80051bc <MX_GPIO_Init+0x1dc>)
 8004ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ffa:	4a70      	ldr	r2, [pc, #448]	@ (80051bc <MX_GPIO_Init+0x1dc>)
 8004ffc:	f043 0304 	orr.w	r3, r3, #4
 8005000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005002:	4b6e      	ldr	r3, [pc, #440]	@ (80051bc <MX_GPIO_Init+0x1dc>)
 8005004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOH_CLK_ENABLE();
 800500e:	4b6b      	ldr	r3, [pc, #428]	@ (80051bc <MX_GPIO_Init+0x1dc>)
 8005010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005012:	4a6a      	ldr	r2, [pc, #424]	@ (80051bc <MX_GPIO_Init+0x1dc>)
 8005014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800501a:	4b68      	ldr	r3, [pc, #416]	@ (80051bc <MX_GPIO_Init+0x1dc>)
 800501c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800501e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8005026:	4b65      	ldr	r3, [pc, #404]	@ (80051bc <MX_GPIO_Init+0x1dc>)
 8005028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800502a:	4a64      	ldr	r2, [pc, #400]	@ (80051bc <MX_GPIO_Init+0x1dc>)
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005032:	4b62      	ldr	r3, [pc, #392]	@ (80051bc <MX_GPIO_Init+0x1dc>)
 8005034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800503e:	4b5f      	ldr	r3, [pc, #380]	@ (80051bc <MX_GPIO_Init+0x1dc>)
 8005040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005042:	4a5e      	ldr	r2, [pc, #376]	@ (80051bc <MX_GPIO_Init+0x1dc>)
 8005044:	f043 0302 	orr.w	r3, r3, #2
 8005048:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800504a:	4b5c      	ldr	r3, [pc, #368]	@ (80051bc <MX_GPIO_Init+0x1dc>)
 800504c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	607b      	str	r3, [r7, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8005056:	4b59      	ldr	r3, [pc, #356]	@ (80051bc <MX_GPIO_Init+0x1dc>)
 8005058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800505a:	4a58      	ldr	r2, [pc, #352]	@ (80051bc <MX_GPIO_Init+0x1dc>)
 800505c:	f043 0308 	orr.w	r3, r3, #8
 8005060:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005062:	4b56      	ldr	r3, [pc, #344]	@ (80051bc <MX_GPIO_Init+0x1dc>)
 8005064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	683b      	ldr	r3, [r7, #0]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 800506e:	2200      	movs	r2, #0
 8005070:	2108      	movs	r1, #8
 8005072:	4853      	ldr	r0, [pc, #332]	@ (80051c0 <MX_GPIO_Init+0x1e0>)
 8005074:	f009 f82a 	bl	800e0cc <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
 8005078:	2201      	movs	r2, #1
 800507a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800507e:	4851      	ldr	r0, [pc, #324]	@ (80051c4 <MX_GPIO_Init+0x1e4>)
 8005080:	f009 f824 	bl	800e0cc <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOC, FLASH_nWP_Pin|FLASH_nRESET_Pin, GPIO_PIN_SET);
 8005084:	2201      	movs	r2, #1
 8005086:	21c0      	movs	r1, #192	@ 0xc0
 8005088:	484d      	ldr	r0, [pc, #308]	@ (80051c0 <MX_GPIO_Init+0x1e0>)
 800508a:	f009 f81f 	bl	800e0cc <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOA, LTE_POWER_ON_Pin|LTE_RESET_Pin, GPIO_PIN_SET);
 800508e:	2201      	movs	r2, #1
 8005090:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005094:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005098:	f009 f818 	bl	800e0cc <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(ACC_nCS_GPIO_Port, ACC_nCS_Pin, GPIO_PIN_RESET);
 800509c:	2200      	movs	r2, #0
 800509e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80050a6:	f009 f811 	bl	800e0cc <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 80050aa:	2200      	movs	r2, #0
 80050ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80050b0:	4844      	ldr	r0, [pc, #272]	@ (80051c4 <MX_GPIO_Init+0x1e4>)
 80050b2:	f009 f80b 	bl	800e0cc <HAL_GPIO_WritePin>

		/*Configure GPIO pins : USR_BTN_Pin PC4 */
		GPIO_InitStruct.Pin = USR_BTN_Pin|GPIO_PIN_4;
 80050b6:	f242 0310 	movw	r3, #8208	@ 0x2010
 80050ba:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80050bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80050c0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050c6:	f107 0314 	add.w	r3, r7, #20
 80050ca:	4619      	mov	r1, r3
 80050cc:	483c      	ldr	r0, [pc, #240]	@ (80051c0 <MX_GPIO_Init+0x1e0>)
 80050ce:	f008 fe53 	bl	800dd78 <HAL_GPIO_Init>

		/*Configure GPIO pins : DBG_Pin FLASH_nWP_Pin FLASH_nRESET_Pin */
		GPIO_InitStruct.Pin = DBG_Pin|FLASH_nWP_Pin|FLASH_nRESET_Pin;
 80050d2:	23c8      	movs	r3, #200	@ 0xc8
 80050d4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050d6:	2301      	movs	r3, #1
 80050d8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050de:	2300      	movs	r3, #0
 80050e0:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050e2:	f107 0314 	add.w	r3, r7, #20
 80050e6:	4619      	mov	r1, r3
 80050e8:	4835      	ldr	r0, [pc, #212]	@ (80051c0 <MX_GPIO_Init+0x1e0>)
 80050ea:	f008 fe45 	bl	800dd78 <HAL_GPIO_Init>

		/*Configure GPIO pin : PA3 */
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 80050ee:	2308      	movs	r3, #8
 80050f0:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050fa:	f107 0314 	add.w	r3, r7, #20
 80050fe:	4619      	mov	r1, r3
 8005100:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005104:	f008 fe38 	bl	800dd78 <HAL_GPIO_Init>

		/*Configure GPIO pins : FLASH_nCS_Pin DTR_Pin */
		GPIO_InitStruct.Pin = FLASH_nCS_Pin|DTR_Pin;
 8005108:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800510c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800510e:	2301      	movs	r3, #1
 8005110:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005116:	2300      	movs	r3, #0
 8005118:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800511a:	f107 0314 	add.w	r3, r7, #20
 800511e:	4619      	mov	r1, r3
 8005120:	4828      	ldr	r0, [pc, #160]	@ (80051c4 <MX_GPIO_Init+0x1e4>)
 8005122:	f008 fe29 	bl	800dd78 <HAL_GPIO_Init>

		/*Configure GPIO pins : LTE_POWER_ON_Pin LTE_RESET_Pin */
		GPIO_InitStruct.Pin = LTE_POWER_ON_Pin|LTE_RESET_Pin;
 8005126:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800512a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800512c:	2311      	movs	r3, #17
 800512e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005130:	2300      	movs	r3, #0
 8005132:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005134:	2300      	movs	r3, #0
 8005136:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005138:	f107 0314 	add.w	r3, r7, #20
 800513c:	4619      	mov	r1, r3
 800513e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005142:	f008 fe19 	bl	800dd78 <HAL_GPIO_Init>

		/*Configure GPIO pin : ACC_nCS_Pin */
		GPIO_InitStruct.Pin = ACC_nCS_Pin;
 8005146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800514a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800514c:	2301      	movs	r3, #1
 800514e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005154:	2300      	movs	r3, #0
 8005156:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(ACC_nCS_GPIO_Port, &GPIO_InitStruct);
 8005158:	f107 0314 	add.w	r3, r7, #20
 800515c:	4619      	mov	r1, r3
 800515e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005162:	f008 fe09 	bl	800dd78 <HAL_GPIO_Init>

		/*Configure GPIO pin : PD2 */
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005166:	2304      	movs	r3, #4
 8005168:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800516a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800516e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005174:	f107 0314 	add.w	r3, r7, #20
 8005178:	4619      	mov	r1, r3
 800517a:	4813      	ldr	r0, [pc, #76]	@ (80051c8 <MX_GPIO_Init+0x1e8>)
 800517c:	f008 fdfc 	bl	800dd78 <HAL_GPIO_Init>

		/*Configure GPIO pin : DCD_Pin */
		GPIO_InitStruct.Pin = DCD_Pin;
 8005180:	2320      	movs	r3, #32
 8005182:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005184:	2300      	movs	r3, #0
 8005186:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005188:	2300      	movs	r3, #0
 800518a:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(DCD_GPIO_Port, &GPIO_InitStruct);
 800518c:	f107 0314 	add.w	r3, r7, #20
 8005190:	4619      	mov	r1, r3
 8005192:	480c      	ldr	r0, [pc, #48]	@ (80051c4 <MX_GPIO_Init+0x1e4>)
 8005194:	f008 fdf0 	bl	800dd78 <HAL_GPIO_Init>

		/*Configure GPIO pin : PB8 */
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005198:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800519c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800519e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80051a2:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a8:	f107 0314 	add.w	r3, r7, #20
 80051ac:	4619      	mov	r1, r3
 80051ae:	4805      	ldr	r0, [pc, #20]	@ (80051c4 <MX_GPIO_Init+0x1e4>)
 80051b0:	f008 fde2 	bl	800dd78 <HAL_GPIO_Init>

		/* USER CODE BEGIN MX_GPIO_Init_2 */
		/* USER CODE END MX_GPIO_Init_2 */
	}
 80051b4:	bf00      	nop
 80051b6:	3728      	adds	r7, #40	@ 0x28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40021000 	.word	0x40021000
 80051c0:	48000800 	.word	0x48000800
 80051c4:	48000400 	.word	0x48000400
 80051c8:	48000c00 	.word	0x48000c00

080051cc <Error_Handler>:
	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void)
	{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80051d0:	b672      	cpsid	i
}
 80051d2:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 80051d4:	bf00      	nop
 80051d6:	e7fd      	b.n	80051d4 <Error_Handler+0x8>

080051d8 <OTA_Init>:
#include "string.h"


/*-----INIZIALIZZAZIONE OTA-----*/
int OTA_Init(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	71fb      	strb	r3, [r7, #7]

	if (sys.OTA_File_isOpen)
 80051e2:	4b10      	ldr	r3, [pc, #64]	@ (8005224 <OTA_Init+0x4c>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <OTA_Init+0x1e>
	{
		f_close(&sys.OTA_File);
 80051f0:	480d      	ldr	r0, [pc, #52]	@ (8005228 <OTA_Init+0x50>)
 80051f2:	f004 ff67 	bl	800a0c4 <f_close>
	}

	sys.OTA_File_isOpen = 0;
 80051f6:	4a0b      	ldr	r2, [pc, #44]	@ (8005224 <OTA_Init+0x4c>)
 80051f8:	7813      	ldrb	r3, [r2, #0]
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	7013      	strb	r3, [r2, #0]

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ | FA_WRITE | FA_CREATE_ALWAYS);
 8005200:	220b      	movs	r2, #11
 8005202:	490a      	ldr	r1, [pc, #40]	@ (800522c <OTA_Init+0x54>)
 8005204:	4808      	ldr	r0, [pc, #32]	@ (8005228 <OTA_Init+0x50>)
 8005206:	f004 fa69 	bl	80096dc <f_open>
 800520a:	4603      	mov	r3, r0
 800520c:	71fb      	strb	r3, [r7, #7]

	if (fRes != FR_OK)
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <OTA_Init+0x42>
	{
		return -1;
 8005214:	f04f 33ff 	mov.w	r3, #4294967295
 8005218:	e000      	b.n	800521c <OTA_Init+0x44>
	}

	return 0;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20000740 	.word	0x20000740
 8005228:	20000744 	.word	0x20000744
 800522c:	0801741c 	.word	0x0801741c

08005230 <OTA_Receive>:

/*-----RICEZIONE FILE OTA-----*/
int OTA_Receive(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	f5ad 6d98 	sub.w	sp, sp, #1216	@ 0x4c0
 8005236:	af00      	add	r7, sp, #0
	uint8_t rx_buffer[1200];
	UINT bytes_written = 0;
 8005238:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 800523c:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
	
	SIM_Wait_Response("+CIPRXGET: 1");
 8005244:	4831      	ldr	r0, [pc, #196]	@ (800530c <OTA_Receive+0xdc>)
 8005246:	f7fd f837 	bl	80022b8 <SIM_Wait_Response>

	while(1)
	{
		SIM_Send_Command("AT+CIPRXGET=2,1024\r");
 800524a:	4831      	ldr	r0, [pc, #196]	@ (8005310 <OTA_Receive+0xe0>)
 800524c:	f7fc fbf0 	bl	8001a30 <SIM_Send_Command>
		SIM_Receive_Response((char*)rx_buffer);
 8005250:	1d3b      	adds	r3, r7, #4
 8005252:	4618      	mov	r0, r3
 8005254:	f7fc fc18 	bl	8001a88 <SIM_Receive_Response>

		char *info = strstr((char*)rx_buffer, "+CIPRXGET: 2,");
 8005258:	1d3b      	adds	r3, r7, #4
 800525a:	492e      	ldr	r1, [pc, #184]	@ (8005314 <OTA_Receive+0xe4>)
 800525c:	4618      	mov	r0, r3
 800525e:	f010 fe41 	bl	8015ee4 <strstr>
 8005262:	f8c7 04bc 	str.w	r0, [r7, #1212]	@ 0x4bc
		if (info) 
 8005266:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0ed      	beq.n	800524a <OTA_Receive+0x1a>
		{
			int actual_len = atoi(info + strlen("+CIPRXGET: 2,"));
 800526e:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8005272:	330d      	adds	r3, #13
 8005274:	4618      	mov	r0, r3
 8005276:	f010 fd11 	bl	8015c9c <atoi>
 800527a:	f8c7 04b8 	str.w	r0, [r7, #1208]	@ 0x4b8
			char *data_start = strstr(info, "\r\n");
 800527e:	4926      	ldr	r1, [pc, #152]	@ (8005318 <OTA_Receive+0xe8>)
 8005280:	f8d7 04bc 	ldr.w	r0, [r7, #1212]	@ 0x4bc
 8005284:	f010 fe2e 	bl	8015ee4 <strstr>
 8005288:	f8c7 04b4 	str.w	r0, [r7, #1204]	@ 0x4b4
			if (actual_len == 0)
 800528c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8005290:	2b00      	cmp	r3, #0
 8005292:	d02b      	beq.n	80052ec <OTA_Receive+0xbc>
            {
                break;           // Fine file
            }
			if (data_start) 
 8005294:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d021      	beq.n	80052e0 <OTA_Receive+0xb0>
			{
				data_start += 2; // Salta "\r\n"
 800529c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 80052a0:	3302      	adds	r3, #2
 80052a2:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
				SIM_Wait_Response("OK");
 80052a6:	481d      	ldr	r0, [pc, #116]	@ (800531c <OTA_Receive+0xec>)
 80052a8:	f7fd f806 	bl	80022b8 <SIM_Wait_Response>
				SIM_Wait_Response("+CIPRXGET: 1");
 80052ac:	4817      	ldr	r0, [pc, #92]	@ (800530c <OTA_Receive+0xdc>)
 80052ae:	f7fd f803 	bl	80022b8 <SIM_Wait_Response>
				f_write(&sys.OTA_File, data_start, actual_len, &bytes_written);
 80052b2:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	@ 0x4b8
 80052b6:	463b      	mov	r3, r7
 80052b8:	f8d7 14b4 	ldr.w	r1, [r7, #1204]	@ 0x4b4
 80052bc:	4818      	ldr	r0, [pc, #96]	@ (8005320 <OTA_Receive+0xf0>)
 80052be:	f004 fcf8 	bl	8009cb2 <f_write>
				if(bytes_written != actual_len)
 80052c2:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 80052c6:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d0ba      	beq.n	800524a <OTA_Receive+0x1a>
				{
					f_close(&sys.OTA_File);
 80052d4:	4812      	ldr	r0, [pc, #72]	@ (8005320 <OTA_Receive+0xf0>)
 80052d6:	f004 fef5 	bl	800a0c4 <f_close>
					return -1; 
 80052da:	f04f 33ff 	mov.w	r3, #4294967295
 80052de:	e00f      	b.n	8005300 <OTA_Receive+0xd0>
				}
			}
			else
			{
				f_close(&sys.OTA_File);
 80052e0:	480f      	ldr	r0, [pc, #60]	@ (8005320 <OTA_Receive+0xf0>)
 80052e2:	f004 feef 	bl	800a0c4 <f_close>
				return -1; 
 80052e6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ea:	e009      	b.n	8005300 <OTA_Receive+0xd0>
                break;           // Fine file
 80052ec:	bf00      	nop
			}
		}
	}

	f_close(&sys.OTA_File);
 80052ee:	480c      	ldr	r0, [pc, #48]	@ (8005320 <OTA_Receive+0xf0>)
 80052f0:	f004 fee8 	bl	800a0c4 <f_close>
    sys.OTA_File_isOpen = 0;
 80052f4:	4a0b      	ldr	r2, [pc, #44]	@ (8005324 <OTA_Receive+0xf4>)
 80052f6:	7813      	ldrb	r3, [r2, #0]
 80052f8:	f023 0301 	bic.w	r3, r3, #1
 80052fc:	7013      	strb	r3, [r2, #0]
	return 0;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	f507 6798 	add.w	r7, r7, #1216	@ 0x4c0
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	0801742c 	.word	0x0801742c
 8005310:	0801743c 	.word	0x0801743c
 8005314:	08017450 	.word	0x08017450
 8005318:	08017460 	.word	0x08017460
 800531c:	08017464 	.word	0x08017464
 8005320:	20000744 	.word	0x20000744
 8005324:	20000740 	.word	0x20000740

08005328 <OTA_CRC_Check>:

int OTA_CRC_Check(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	f5ad 6d86 	sub.w	sp, sp, #1072	@ 0x430
 800532e:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	f887 3423 	strb.w	r3, [r7, #1059]	@ 0x423
	UINT read = 0;
 8005336:	2300      	movs	r3, #0
 8005338:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
	uint16_t ota_crc = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	f8a7 342e 	strh.w	r3, [r7, #1070]	@ 0x42e
	uint8_t rx_buffer[20];
	uint32_t calc_crc = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428

	SIM_Wait_Response("+CIPRXGET: 1");
 8005348:	484a      	ldr	r0, [pc, #296]	@ (8005474 <OTA_CRC_Check+0x14c>)
 800534a:	f7fc ffb5 	bl	80022b8 <SIM_Wait_Response>
	SIM_Send_Command("AT+CIPRXGET=2,2\r");
 800534e:	484a      	ldr	r0, [pc, #296]	@ (8005478 <OTA_CRC_Check+0x150>)
 8005350:	f7fc fb6e 	bl	8001a30 <SIM_Send_Command>
	SIM_Receive_Response((char*)rx_buffer);
 8005354:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8005358:	4618      	mov	r0, r3
 800535a:	f7fc fb95 	bl	8001a88 <SIM_Receive_Response>
	char *info = strstr((char*)rx_buffer, "+CIPRXGET: 2,");
 800535e:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8005362:	4946      	ldr	r1, [pc, #280]	@ (800547c <OTA_CRC_Check+0x154>)
 8005364:	4618      	mov	r0, r3
 8005366:	f010 fdbd 	bl	8015ee4 <strstr>
 800536a:	f8c7 041c 	str.w	r0, [r7, #1052]	@ 0x41c

	if (info)
 800536e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d008      	beq.n	8005388 <OTA_CRC_Check+0x60>
	{
		ota_crc = atoi(info + strlen("+CIPRXGET: 2,"));
 8005376:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800537a:	330d      	adds	r3, #13
 800537c:	4618      	mov	r0, r3
 800537e:	f010 fc8d 	bl	8015c9c <atoi>
 8005382:	4603      	mov	r3, r0
 8005384:	f8a7 342e 	strh.w	r3, [r7, #1070]	@ 0x42e
	}

	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 8005388:	2201      	movs	r2, #1
 800538a:	493d      	ldr	r1, [pc, #244]	@ (8005480 <OTA_CRC_Check+0x158>)
 800538c:	483d      	ldr	r0, [pc, #244]	@ (8005484 <OTA_CRC_Check+0x15c>)
 800538e:	f004 f9a5 	bl	80096dc <f_open>
 8005392:	4603      	mov	r3, r0
 8005394:	f887 3423 	strb.w	r3, [r7, #1059]	@ 0x423
	if (fRes != FR_OK)
 8005398:	f897 3423 	ldrb.w	r3, [r7, #1059]	@ 0x423
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <OTA_CRC_Check+0x7e>
	{
		return -1;
 80053a0:	f04f 33ff 	mov.w	r3, #4294967295
 80053a4:	e061      	b.n	800546a <OTA_CRC_Check+0x142>
	}

	uint32_t size = f_size(&sys.OTA_File);
 80053a6:	4b38      	ldr	r3, [pc, #224]	@ (8005488 <OTA_CRC_Check+0x160>)
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
    HAL_CRCEx_Input_Data_Reverse(HCRC, CRC_INPUTDATA_INVERSION_BYTE);
 80053ae:	2120      	movs	r1, #32
 80053b0:	4836      	ldr	r0, [pc, #216]	@ (800548c <OTA_CRC_Check+0x164>)
 80053b2:	f007 fba3 	bl	800cafc <HAL_CRCEx_Input_Data_Reverse>
    HAL_CRCEx_Output_Data_Reverse(HCRC, CRC_OUTPUTDATA_INVERSION_ENABLE);
 80053b6:	2180      	movs	r1, #128	@ 0x80
 80053b8:	4834      	ldr	r0, [pc, #208]	@ (800548c <OTA_CRC_Check+0x164>)
 80053ba:	f007 fbbb 	bl	800cb34 <HAL_CRCEx_Output_Data_Reverse>
    HCRC->Instance->INIT = 0xFFFFFFFF;
 80053be:	4b33      	ldr	r3, [pc, #204]	@ (800548c <OTA_CRC_Check+0x164>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f04f 32ff 	mov.w	r2, #4294967295
 80053c6:	611a      	str	r2, [r3, #16]
    HAL_CRCEx_Polynomial_Set(HCRC, 0x8005, CRC_POLYLENGTH_32B);
 80053c8:	2200      	movs	r2, #0
 80053ca:	f248 0105 	movw	r1, #32773	@ 0x8005
 80053ce:	482f      	ldr	r0, [pc, #188]	@ (800548c <OTA_CRC_Check+0x164>)
 80053d0:	f007 fb06 	bl	800c9e0 <HAL_CRCEx_Polynomial_Set>

	while (size > 0)
 80053d4:	e038      	b.n	8005448 <OTA_CRC_Check+0x120>
	{
		uint8_t buffer[1024];
		UINT to_read = (size > sizeof(buffer)) ? sizeof(buffer) : size;
 80053d6:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 80053da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053de:	bf28      	it	cs
 80053e0:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80053e4:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
		if (f_read(&sys.OTA_File, buffer, to_read, &read) != FR_OK || read == 0)
 80053e8:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 80053ec:	4639      	mov	r1, r7
 80053ee:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 80053f2:	4824      	ldr	r0, [pc, #144]	@ (8005484 <OTA_CRC_Check+0x15c>)
 80053f4:	f004 fb0a 	bl	8009a0c <f_read>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <OTA_CRC_Check+0xde>
 80053fe:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8005402:	2b00      	cmp	r3, #0
 8005404:	d105      	bne.n	8005412 <OTA_CRC_Check+0xea>
		{
			f_close(&sys.OTA_File);
 8005406:	481f      	ldr	r0, [pc, #124]	@ (8005484 <OTA_CRC_Check+0x15c>)
 8005408:	f004 fe5c 	bl	800a0c4 <f_close>
			return -1;
 800540c:	f04f 33ff 	mov.w	r3, #4294967295
 8005410:	e02b      	b.n	800546a <OTA_CRC_Check+0x142>
		}
		calc_crc = HAL_CRC_Accumulate(HCRC, (uint32_t *)buffer, read / 4 + (read % 4 != 0));
 8005412:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8005416:	089b      	lsrs	r3, r3, #2
 8005418:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 800541c:	f002 0203 	and.w	r2, r2, #3
 8005420:	2a00      	cmp	r2, #0
 8005422:	bf14      	ite	ne
 8005424:	2201      	movne	r2, #1
 8005426:	2200      	moveq	r2, #0
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	441a      	add	r2, r3
 800542c:	463b      	mov	r3, r7
 800542e:	4619      	mov	r1, r3
 8005430:	4816      	ldr	r0, [pc, #88]	@ (800548c <OTA_CRC_Check+0x164>)
 8005432:	f007 f9c7 	bl	800c7c4 <HAL_CRC_Accumulate>
 8005436:	f8c7 0428 	str.w	r0, [r7, #1064]	@ 0x428
		size -= read;
 800543a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800543e:	f8d7 2424 	ldr.w	r2, [r7, #1060]	@ 0x424
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
	while (size > 0)
 8005448:	f8d7 3424 	ldr.w	r3, [r7, #1060]	@ 0x424
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1c2      	bne.n	80053d6 <OTA_CRC_Check+0xae>
	}

	f_close(&sys.OTA_File);
 8005450:	480c      	ldr	r0, [pc, #48]	@ (8005484 <OTA_CRC_Check+0x15c>)
 8005452:	f004 fe37 	bl	800a0c4 <f_close>

	if (calc_crc != ota_crc)
 8005456:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	@ 0x42e
 800545a:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 800545e:	429a      	cmp	r2, r3
 8005460:	d002      	beq.n	8005468 <OTA_CRC_Check+0x140>
	{
		return -1; // CRC non corrisponde
 8005462:	f04f 33ff 	mov.w	r3, #4294967295
 8005466:	e000      	b.n	800546a <OTA_CRC_Check+0x142>
	}
	
	return 0; // CRC OK
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	f507 6786 	add.w	r7, r7, #1072	@ 0x430
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	0801742c 	.word	0x0801742c
 8005478:	08017468 	.word	0x08017468
 800547c:	08017450 	.word	0x08017450
 8005480:	0801741c 	.word	0x0801741c
 8005484:	20000744 	.word	0x20000744
 8005488:	20000740 	.word	0x20000740
 800548c:	200002c4 	.word	0x200002c4

08005490 <OTA_Apply>:


/*-----APPLICAZIONE UPDATE-----*/
int OTA_Apply(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b098      	sub	sp, #96	@ 0x60
 8005494:	af00      	add	r7, sp, #0
	FRESULT fRes = 0;
 8005496:	2300      	movs	r3, #0
 8005498:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	int32_t result = 0;
 800549c:	2300      	movs	r3, #0
 800549e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint8_t ota_bank = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
	uint32_t faddr = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t size = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	65bb      	str	r3, [r7, #88]	@ 0x58
	uint64_t pword = 0;
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	uint32_t faddr_off = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	657b      	str	r3, [r7, #84]	@ 0x54
	UINT read = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t PageError = 0;
 80054c2:	2300      	movs	r3, #0
 80054c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	FLASH_EraseInitTypeDef erase_cfg = {0};
 80054c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	605a      	str	r2, [r3, #4]
 80054d0:	609a      	str	r2, [r3, #8]
 80054d2:	60da      	str	r2, [r3, #12]

	const uint32_t BANKSIZE = FLASH_SIZE >> 1;
 80054d4:	4b68      	ldr	r3, [pc, #416]	@ (8005678 <OTA_Apply+0x1e8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054de:	4293      	cmp	r3, r2
 80054e0:	d006      	beq.n	80054f0 <OTA_Apply+0x60>
 80054e2:	4b65      	ldr	r3, [pc, #404]	@ (8005678 <OTA_Apply+0x1e8>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	029b      	lsls	r3, r3, #10
 80054e8:	085a      	lsrs	r2, r3, #1
 80054ea:	4b64      	ldr	r3, [pc, #400]	@ (800567c <OTA_Apply+0x1ec>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	e001      	b.n	80054f4 <OTA_Apply+0x64>
 80054f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80054f4:	64bb      	str	r3, [r7, #72]	@ 0x48

	FLASH_OBProgramInitTypeDef ob = {0};
 80054f6:	463b      	mov	r3, r7
 80054f8:	2228      	movs	r2, #40	@ 0x28
 80054fa:	2100      	movs	r1, #0
 80054fc:	4618      	mov	r0, r3
 80054fe:	f010 fcb7 	bl	8015e70 <memset>

	HAL_FLASHEx_OBGetConfig(&ob);
 8005502:	463b      	mov	r3, r7
 8005504:	4618      	mov	r0, r3
 8005506:	f008 f80b 	bl	800d520 <HAL_FLASHEx_OBGetConfig>

	if ((ob.USERConfig & FLASH_OPTR_DUALBANK) == 0)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <OTA_Apply+0x8a>
	{
		return -1;
 8005514:	f04f 33ff 	mov.w	r3, #4294967295
 8005518:	e0aa      	b.n	8005670 <OTA_Apply+0x1e0>
	}

	ota_bank = (ob.USERConfig & FLASH_OPTR_BFB2) ? FLASH_BANK_1 : FLASH_BANK_2;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <OTA_Apply+0x98>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <OTA_Apply+0x9a>
 8005528:	2302      	movs	r3, #2
 800552a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

	// L'indirizzo deve essere sempre quello del banco 2 (se fa il boot da BANK2 il BANK1 viene rimappato)
	faddr = FLASH_BASE + BANKSIZE;
 800552e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005530:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8005534:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_FLASH_Unlock() != HAL_OK)
 8005536:	f007 fdc7 	bl	800d0c8 <HAL_FLASH_Unlock>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <OTA_Apply+0xb6>
	{
		return -1;
 8005540:	f04f 33ff 	mov.w	r3, #4294967295
 8005544:	e094      	b.n	8005670 <OTA_Apply+0x1e0>
	}

	f_close(&sys.OTA_File);
 8005546:	484e      	ldr	r0, [pc, #312]	@ (8005680 <OTA_Apply+0x1f0>)
 8005548:	f004 fdbc 	bl	800a0c4 <f_close>
	fRes = f_open(&sys.OTA_File, OTA_FILE_NAME, FA_READ);
 800554c:	2201      	movs	r2, #1
 800554e:	494d      	ldr	r1, [pc, #308]	@ (8005684 <OTA_Apply+0x1f4>)
 8005550:	484b      	ldr	r0, [pc, #300]	@ (8005680 <OTA_Apply+0x1f0>)
 8005552:	f004 f8c3 	bl	80096dc <f_open>
 8005556:	4603      	mov	r3, r0
 8005558:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	if (fRes != FR_OK)
 800555c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <OTA_Apply+0xdc>
	{
		result = -1;
 8005564:	f04f 33ff 	mov.w	r3, #4294967295
 8005568:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 800556a:	e07b      	b.n	8005664 <OTA_Apply+0x1d4>
	}

	if ((size = f_size(&sys.OTA_File)) > BANKSIZE)
 800556c:	4b46      	ldr	r3, [pc, #280]	@ (8005688 <OTA_Apply+0x1f8>)
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005572:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005574:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005576:	429a      	cmp	r2, r3
 8005578:	d903      	bls.n	8005582 <OTA_Apply+0xf2>
	{
		result = -1;
 800557a:	f04f 33ff 	mov.w	r3, #4294967295
 800557e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 8005580:	e070      	b.n	8005664 <OTA_Apply+0x1d4>
	}

	erase_cfg.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8005582:	2301      	movs	r3, #1
 8005584:	62bb      	str	r3, [r7, #40]	@ 0x28
	erase_cfg.Banks = ota_bank;
 8005586:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800558a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_FLASHEx_Erase(&erase_cfg, &PageError) != HAL_OK)
 800558c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8005590:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005594:	4611      	mov	r1, r2
 8005596:	4618      	mov	r0, r3
 8005598:	f007 feb8 	bl	800d30c <HAL_FLASHEx_Erase>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d026      	beq.n	80055f0 <OTA_Apply+0x160>
	{
		result = -1;
 80055a2:	f04f 33ff 	mov.w	r3, #4294967295
 80055a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 80055a8:	e05c      	b.n	8005664 <OTA_Apply+0x1d4>
	}

	while (size > 0)
	{
		pword = 0;
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		if (f_read(&sys.OTA_File, (uint8_t *)&pword, sizeof(pword), &read) < 0)
 80055b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80055ba:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80055be:	2208      	movs	r2, #8
 80055c0:	482f      	ldr	r0, [pc, #188]	@ (8005680 <OTA_Apply+0x1f0>)
 80055c2:	f004 fa23 	bl	8009a0c <f_read>
			break;
		if (read == 0)
 80055c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d015      	beq.n	80055f8 <OTA_Apply+0x168>
			break;
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, faddr + faddr_off, pword) != HAL_OK)
 80055cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055d0:	18d1      	adds	r1, r2, r3
 80055d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80055d6:	2000      	movs	r0, #0
 80055d8:	f007 fd0a 	bl	800cff0 <HAL_FLASH_Program>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10c      	bne.n	80055fc <OTA_Apply+0x16c>
			break;
		faddr_off += sizeof(pword);
 80055e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e4:	3308      	adds	r3, #8
 80055e6:	657b      	str	r3, [r7, #84]	@ 0x54
		size -= read;
 80055e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	65bb      	str	r3, [r7, #88]	@ 0x58
	while (size > 0)
 80055f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1d9      	bne.n	80055aa <OTA_Apply+0x11a>
 80055f6:	e002      	b.n	80055fe <OTA_Apply+0x16e>
			break;
 80055f8:	bf00      	nop
 80055fa:	e000      	b.n	80055fe <OTA_Apply+0x16e>
			break;
 80055fc:	bf00      	nop
	}

	if (size > 0)
 80055fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <OTA_Apply+0x17c>
	{
		result = -1;
 8005604:	f04f 33ff 	mov.w	r3, #4294967295
 8005608:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 800560a:	e02b      	b.n	8005664 <OTA_Apply+0x1d4>
	}

	HAL_FLASH_Lock();
 800560c:	f007 fd7e 	bl	800d10c <HAL_FLASH_Lock>

	HAL_FLASHEx_OBGetConfig(&ob);
 8005610:	463b      	mov	r3, r7
 8005612:	4618      	mov	r0, r3
 8005614:	f007 ff84 	bl	800d520 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_Unlock();
 8005618:	f007 fd56 	bl	800d0c8 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 800561c:	f007 fd86 	bl	800d12c <HAL_FLASH_OB_Unlock>

	ob.OptionType = OPTIONBYTE_USER;
 8005620:	2304      	movs	r3, #4
 8005622:	603b      	str	r3, [r7, #0]
	ob.USERType = OB_USER_BFB2;
 8005624:	2380      	movs	r3, #128	@ 0x80
 8005626:	617b      	str	r3, [r7, #20]
	ob.USERConfig = (ota_bank == FLASH_BANK_2) ? FLASH_OPTR_BFB2 : 0;
 8005628:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800562c:	2b02      	cmp	r3, #2
 800562e:	d102      	bne.n	8005636 <OTA_Apply+0x1a6>
 8005630:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005634:	e000      	b.n	8005638 <OTA_Apply+0x1a8>
 8005636:	2300      	movs	r3, #0
 8005638:	61bb      	str	r3, [r7, #24]

	if (HAL_FLASHEx_OBProgram(&ob) != HAL_OK)
 800563a:	463b      	mov	r3, r7
 800563c:	4618      	mov	r0, r3
 800563e:	f007 ff01 	bl	800d444 <HAL_FLASHEx_OBProgram>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d007      	beq.n	8005658 <OTA_Apply+0x1c8>
	{
		HAL_FLASH_OB_Lock();
 8005648:	f007 fd8c 	bl	800d164 <HAL_FLASH_OB_Lock>
		HAL_FLASH_Lock();
 800564c:	f007 fd5e 	bl	800d10c <HAL_FLASH_Lock>
		result = -1;
 8005650:	f04f 33ff 	mov.w	r3, #4294967295
 8005654:	65fb      	str	r3, [r7, #92]	@ 0x5c
		goto DONE;
 8005656:	e005      	b.n	8005664 <OTA_Apply+0x1d4>
	}

	HAL_FLASH_OB_Launch();
 8005658:	f007 fd94 	bl	800d184 <HAL_FLASH_OB_Launch>
	HAL_FLASH_OB_Lock();
 800565c:	f007 fd82 	bl	800d164 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8005660:	f007 fd54 	bl	800d10c <HAL_FLASH_Lock>

	DONE:

	f_close(&sys.OTA_File);
 8005664:	4806      	ldr	r0, [pc, #24]	@ (8005680 <OTA_Apply+0x1f0>)
 8005666:	f004 fd2d 	bl	800a0c4 <f_close>

	HAL_FLASH_Lock();
 800566a:	f007 fd4f 	bl	800d10c <HAL_FLASH_Lock>

	return result;
 800566e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8005670:	4618      	mov	r0, r3
 8005672:	3760      	adds	r7, #96	@ 0x60
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	1fff75e0 	.word	0x1fff75e0
 800567c:	01fffe00 	.word	0x01fffe00
 8005680:	20000744 	.word	0x20000744
 8005684:	0801741c 	.word	0x0801741c
 8005688:	20000740 	.word	0x20000740

0800568c <Save_Data>:
#include "leds.h"


/*-----ACQUISIZIONE MISURE E LOG DEI DATI-----*/
void Save_Data(void)
{
 800568c:	b590      	push	{r4, r7, lr}
 800568e:	f2ad 4ddc 	subw	sp, sp, #1244	@ 0x4dc
 8005692:	af00      	add	r7, sp, #0
	if(flags.ADC_Half_Buffer)
 8005694:	4b78      	ldr	r3, [pc, #480]	@ (8005878 <Save_Data+0x1ec>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d037      	beq.n	8005712 <Save_Data+0x86>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[0], PRESS_HALF_LEN);
 80056a2:	4b76      	ldr	r3, [pc, #472]	@ (800587c <Save_Data+0x1f0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	4b75      	ldr	r3, [pc, #468]	@ (8005880 <Save_Data+0x1f4>)
 80056aa:	4413      	add	r3, r2
 80056ac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80056b0:	4974      	ldr	r1, [pc, #464]	@ (8005884 <Save_Data+0x1f8>)
 80056b2:	4618      	mov	r0, r3
 80056b4:	f010 fc60 	bl	8015f78 <memcpy>
		Last_Pressure = 0;
 80056b8:	4b73      	ldr	r3, [pc, #460]	@ (8005888 <Save_Data+0x1fc>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 80056be:	2300      	movs	r3, #0
 80056c0:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 80056c4:	e00f      	b.n	80056e6 <Save_Data+0x5a>
		{
			Last_Pressure += Pressure[i];
 80056c6:	4a6f      	ldr	r2, [pc, #444]	@ (8005884 <Save_Data+0x1f8>)
 80056c8:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 80056cc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80056d0:	4b6d      	ldr	r3, [pc, #436]	@ (8005888 <Save_Data+0x1fc>)
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	4413      	add	r3, r2
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	4b6b      	ldr	r3, [pc, #428]	@ (8005888 <Save_Data+0x1fc>)
 80056da:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < PRESS_HALF_SAMPLES; i++)
 80056dc:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 80056e0:	3301      	adds	r3, #1
 80056e2:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 80056e6:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 80056ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80056ec:	ddeb      	ble.n	80056c6 <Save_Data+0x3a>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 80056ee:	4b66      	ldr	r3, [pc, #408]	@ (8005888 <Save_Data+0x1fc>)
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	4a66      	ldr	r2, [pc, #408]	@ (800588c <Save_Data+0x200>)
 80056f4:	fba2 2303 	umull	r2, r3, r2, r3
 80056f8:	099b      	lsrs	r3, r3, #6
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	4b62      	ldr	r3, [pc, #392]	@ (8005888 <Save_Data+0x1fc>)
 80056fe:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[0]);
 8005700:	4860      	ldr	r0, [pc, #384]	@ (8005884 <Save_Data+0x1f8>)
 8005702:	f000 fb4b 	bl	8005d9c <Warning_Detection>
		flags.ADC_Half_Buffer = 0;
 8005706:	4a5c      	ldr	r2, [pc, #368]	@ (8005878 <Save_Data+0x1ec>)
 8005708:	7813      	ldrb	r3, [r2, #0]
 800570a:	f023 0302 	bic.w	r3, r3, #2
 800570e:	7013      	strb	r3, [r2, #0]
 8005710:	e03e      	b.n	8005790 <Save_Data+0x104>
	}
	else if(flags.ADC_Full_Buffer)
 8005712:	4b59      	ldr	r3, [pc, #356]	@ (8005878 <Save_Data+0x1ec>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d037      	beq.n	8005790 <Save_Data+0x104>
	{
		memcpy(Saving_Buffer + Address_Offset, &Pressure[PRESS_HALF_SAMPLES], PRESS_HALF_LEN);
 8005720:	4b56      	ldr	r3, [pc, #344]	@ (800587c <Save_Data+0x1f0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	461a      	mov	r2, r3
 8005726:	4b56      	ldr	r3, [pc, #344]	@ (8005880 <Save_Data+0x1f4>)
 8005728:	4413      	add	r3, r2
 800572a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800572e:	4958      	ldr	r1, [pc, #352]	@ (8005890 <Save_Data+0x204>)
 8005730:	4618      	mov	r0, r3
 8005732:	f010 fc21 	bl	8015f78 <memcpy>
		Last_Pressure = 0;
 8005736:	4b54      	ldr	r3, [pc, #336]	@ (8005888 <Save_Data+0x1fc>)
 8005738:	2200      	movs	r2, #0
 800573a:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 800573c:	23c8      	movs	r3, #200	@ 0xc8
 800573e:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8005742:	e00f      	b.n	8005764 <Save_Data+0xd8>
		{
			Last_Pressure += Pressure[i];
 8005744:	4a4f      	ldr	r2, [pc, #316]	@ (8005884 <Save_Data+0x1f8>)
 8005746:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 800574a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800574e:	4b4e      	ldr	r3, [pc, #312]	@ (8005888 <Save_Data+0x1fc>)
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	4413      	add	r3, r2
 8005754:	b29a      	uxth	r2, r3
 8005756:	4b4c      	ldr	r3, [pc, #304]	@ (8005888 <Save_Data+0x1fc>)
 8005758:	801a      	strh	r2, [r3, #0]
		for(int i = PRESS_HALF_SAMPLES; i < PRESS_FULL_SAMPLES; i++)
 800575a:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 800575e:	3301      	adds	r3, #1
 8005760:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
 8005764:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8005768:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800576c:	dbea      	blt.n	8005744 <Save_Data+0xb8>
		}
		Last_Pressure = (uint16_t)(Last_Pressure / PRESS_HALF_SAMPLES);
 800576e:	4b46      	ldr	r3, [pc, #280]	@ (8005888 <Save_Data+0x1fc>)
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	4a46      	ldr	r2, [pc, #280]	@ (800588c <Save_Data+0x200>)
 8005774:	fba2 2303 	umull	r2, r3, r2, r3
 8005778:	099b      	lsrs	r3, r3, #6
 800577a:	b29a      	uxth	r2, r3
 800577c:	4b42      	ldr	r3, [pc, #264]	@ (8005888 <Save_Data+0x1fc>)
 800577e:	801a      	strh	r2, [r3, #0]
		Warning_Detection(&Pressure[PRESS_HALF_SAMPLES]);
 8005780:	4843      	ldr	r0, [pc, #268]	@ (8005890 <Save_Data+0x204>)
 8005782:	f000 fb0b 	bl	8005d9c <Warning_Detection>
		flags.ADC_Full_Buffer = 0;
 8005786:	4a3c      	ldr	r2, [pc, #240]	@ (8005878 <Save_Data+0x1ec>)
 8005788:	7813      	ldrb	r3, [r2, #0]
 800578a:	f023 0304 	bic.w	r3, r3, #4
 800578e:	7013      	strb	r3, [r2, #0]
	}
	flags.ADC_Complete = 0;
 8005790:	4a39      	ldr	r2, [pc, #228]	@ (8005878 <Save_Data+0x1ec>)
 8005792:	7813      	ldrb	r3, [r2, #0]
 8005794:	f023 0301 	bic.w	r3, r3, #1
 8005798:	7013      	strb	r3, [r2, #0]
	Address_Offset += PRESS_HALF_LEN;
 800579a:	4b38      	ldr	r3, [pc, #224]	@ (800587c <Save_Data+0x1f0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80057a2:	4a36      	ldr	r2, [pc, #216]	@ (800587c <Save_Data+0x1f0>)
 80057a4:	6013      	str	r3, [r2, #0]

	memcpy(Saving_Buffer + Address_Offset, Volume_Period, MAX_VOLUME_LEN);
 80057a6:	4b35      	ldr	r3, [pc, #212]	@ (800587c <Save_Data+0x1f0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	4b34      	ldr	r3, [pc, #208]	@ (8005880 <Save_Data+0x1f4>)
 80057ae:	4413      	add	r3, r2
 80057b0:	2228      	movs	r2, #40	@ 0x28
 80057b2:	4938      	ldr	r1, [pc, #224]	@ (8005894 <Save_Data+0x208>)
 80057b4:	4618      	mov	r0, r3
 80057b6:	f010 fbdf 	bl	8015f78 <memcpy>
	uint8_t current_period_cnt = Period_cnt;
 80057ba:	4b37      	ldr	r3, [pc, #220]	@ (8005898 <Save_Data+0x20c>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	Last_Volume = 0;
 80057c2:	4b36      	ldr	r3, [pc, #216]	@ (800589c <Save_Data+0x210>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 80057c8:	2300      	movs	r3, #0
 80057ca:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 80057ce:	e010      	b.n	80057f2 <Save_Data+0x166>
	{
		Last_Volume += Volume_Period[i];
 80057d0:	4a30      	ldr	r2, [pc, #192]	@ (8005894 <Save_Data+0x208>)
 80057d2:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 80057d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057da:	b29a      	uxth	r2, r3
 80057dc:	4b2f      	ldr	r3, [pc, #188]	@ (800589c <Save_Data+0x210>)
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	4413      	add	r3, r2
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	4b2d      	ldr	r3, [pc, #180]	@ (800589c <Save_Data+0x210>)
 80057e6:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < current_period_cnt; i++)
 80057e8:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 80057ec:	3301      	adds	r3, #1
 80057ee:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 80057f2:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 80057f6:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 80057fa:	429a      	cmp	r2, r3
 80057fc:	dbe8      	blt.n	80057d0 <Save_Data+0x144>
	}
	Last_Volume = (uint16_t)(Last_Volume / current_period_cnt);
 80057fe:	4b27      	ldr	r3, [pc, #156]	@ (800589c <Save_Data+0x210>)
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 8005808:	fb92 f3f3 	sdiv	r3, r2, r3
 800580c:	b29a      	uxth	r2, r3
 800580e:	4b23      	ldr	r3, [pc, #140]	@ (800589c <Save_Data+0x210>)
 8005810:	801a      	strh	r2, [r3, #0]
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8005812:	2228      	movs	r2, #40	@ 0x28
 8005814:	2100      	movs	r1, #0
 8005816:	481f      	ldr	r0, [pc, #124]	@ (8005894 <Save_Data+0x208>)
 8005818:	f010 fb2a 	bl	8015e70 <memset>
	Period_cnt = 0;
 800581c:	4b1e      	ldr	r3, [pc, #120]	@ (8005898 <Save_Data+0x20c>)
 800581e:	2200      	movs	r2, #0
 8005820:	701a      	strb	r2, [r3, #0]
	Address_Offset += MAX_VOLUME_LEN;
 8005822:	4b16      	ldr	r3, [pc, #88]	@ (800587c <Save_Data+0x1f0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3328      	adds	r3, #40	@ 0x28
 8005828:	4a14      	ldr	r2, [pc, #80]	@ (800587c <Save_Data+0x1f0>)
 800582a:	6013      	str	r3, [r2, #0]

	if(sys.ACC_Present)
 800582c:	4b1c      	ldr	r3, [pc, #112]	@ (80058a0 <Save_Data+0x214>)
 800582e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005832:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80a4 	beq.w	800598a <Save_Data+0x2fe>
	{
		memcpy(Saving_Buffer + Address_Offset, Acceleration, ACCELERATION_LEN);
 8005842:	4b0e      	ldr	r3, [pc, #56]	@ (800587c <Save_Data+0x1f0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	4b0d      	ldr	r3, [pc, #52]	@ (8005880 <Save_Data+0x1f4>)
 800584a:	4413      	add	r3, r2
 800584c:	4a15      	ldr	r2, [pc, #84]	@ (80058a4 <Save_Data+0x218>)
 800584e:	4618      	mov	r0, r3
 8005850:	4611      	mov	r1, r2
 8005852:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 8005856:	461a      	mov	r2, r3
 8005858:	f010 fb8e 	bl	8015f78 <memcpy>
		Last_Acceleration.x = 0;
 800585c:	4b12      	ldr	r3, [pc, #72]	@ (80058a8 <Save_Data+0x21c>)
 800585e:	2200      	movs	r2, #0
 8005860:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = 0;
 8005862:	4b11      	ldr	r3, [pc, #68]	@ (80058a8 <Save_Data+0x21c>)
 8005864:	2200      	movs	r2, #0
 8005866:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = 0;
 8005868:	4b0f      	ldr	r3, [pc, #60]	@ (80058a8 <Save_Data+0x21c>)
 800586a:	2200      	movs	r2, #0
 800586c:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 800586e:	2300      	movs	r3, #0
 8005870:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8005874:	e064      	b.n	8005940 <Save_Data+0x2b4>
 8005876:	bf00      	nop
 8005878:	20001c68 	.word	0x20001c68
 800587c:	20004eb8 	.word	0x20004eb8
 8005880:	20004788 	.word	0x20004788
 8005884:	20003e54 	.word	0x20003e54
 8005888:	20004714 	.word	0x20004714
 800588c:	51eb851f 	.word	0x51eb851f
 8005890:	20003fe4 	.word	0x20003fe4
 8005894:	20004174 	.word	0x20004174
 8005898:	20003e50 	.word	0x20003e50
 800589c:	20004716 	.word	0x20004716
 80058a0:	20000740 	.word	0x20000740
 80058a4:	2000419c 	.word	0x2000419c
 80058a8:	20004718 	.word	0x20004718
		{
			Last_Acceleration.x += Acceleration[i+1] | (Acceleration[i+2] << 8); 
 80058ac:	4b85      	ldr	r3, [pc, #532]	@ (8005ac4 <Save_Data+0x438>)
 80058ae:	885a      	ldrh	r2, [r3, #2]
 80058b0:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80058b4:	3301      	adds	r3, #1
 80058b6:	4984      	ldr	r1, [pc, #528]	@ (8005ac8 <Save_Data+0x43c>)
 80058b8:	5ccb      	ldrb	r3, [r1, r3]
 80058ba:	b219      	sxth	r1, r3
 80058bc:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80058c0:	3302      	adds	r3, #2
 80058c2:	4881      	ldr	r0, [pc, #516]	@ (8005ac8 <Save_Data+0x43c>)
 80058c4:	5cc3      	ldrb	r3, [r0, r3]
 80058c6:	b21b      	sxth	r3, r3
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	b21b      	sxth	r3, r3
 80058cc:	430b      	orrs	r3, r1
 80058ce:	b21b      	sxth	r3, r3
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	4413      	add	r3, r2
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	4b7b      	ldr	r3, [pc, #492]	@ (8005ac4 <Save_Data+0x438>)
 80058d8:	805a      	strh	r2, [r3, #2]
			Last_Acceleration.y += Acceleration[i+3] | (Acceleration[i+4] << 8); 
 80058da:	4b7a      	ldr	r3, [pc, #488]	@ (8005ac4 <Save_Data+0x438>)
 80058dc:	889a      	ldrh	r2, [r3, #4]
 80058de:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80058e2:	3303      	adds	r3, #3
 80058e4:	4978      	ldr	r1, [pc, #480]	@ (8005ac8 <Save_Data+0x43c>)
 80058e6:	5ccb      	ldrb	r3, [r1, r3]
 80058e8:	b219      	sxth	r1, r3
 80058ea:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80058ee:	3304      	adds	r3, #4
 80058f0:	4875      	ldr	r0, [pc, #468]	@ (8005ac8 <Save_Data+0x43c>)
 80058f2:	5cc3      	ldrb	r3, [r0, r3]
 80058f4:	b21b      	sxth	r3, r3
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	b21b      	sxth	r3, r3
 80058fa:	430b      	orrs	r3, r1
 80058fc:	b21b      	sxth	r3, r3
 80058fe:	b29b      	uxth	r3, r3
 8005900:	4413      	add	r3, r2
 8005902:	b29a      	uxth	r2, r3
 8005904:	4b6f      	ldr	r3, [pc, #444]	@ (8005ac4 <Save_Data+0x438>)
 8005906:	809a      	strh	r2, [r3, #4]
			Last_Acceleration.z += Acceleration[i+5] | (Acceleration[i+6] << 8); 
 8005908:	4b6e      	ldr	r3, [pc, #440]	@ (8005ac4 <Save_Data+0x438>)
 800590a:	88da      	ldrh	r2, [r3, #6]
 800590c:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005910:	3305      	adds	r3, #5
 8005912:	496d      	ldr	r1, [pc, #436]	@ (8005ac8 <Save_Data+0x43c>)
 8005914:	5ccb      	ldrb	r3, [r1, r3]
 8005916:	b219      	sxth	r1, r3
 8005918:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 800591c:	3306      	adds	r3, #6
 800591e:	486a      	ldr	r0, [pc, #424]	@ (8005ac8 <Save_Data+0x43c>)
 8005920:	5cc3      	ldrb	r3, [r0, r3]
 8005922:	b21b      	sxth	r3, r3
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	b21b      	sxth	r3, r3
 8005928:	430b      	orrs	r3, r1
 800592a:	b21b      	sxth	r3, r3
 800592c:	b29b      	uxth	r3, r3
 800592e:	4413      	add	r3, r2
 8005930:	b29a      	uxth	r2, r3
 8005932:	4b64      	ldr	r3, [pc, #400]	@ (8005ac4 <Save_Data+0x438>)
 8005934:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < ACCELERATION_LEN; i += 7)
 8005936:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 800593a:	3307      	adds	r3, #7
 800593c:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8005940:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8005944:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8005948:	dbb0      	blt.n	80058ac <Save_Data+0x220>
		}
		Last_Acceleration.x = (uint16_t)(Last_Acceleration.x / (ACCELERATION_LEN / 7));
 800594a:	4b5e      	ldr	r3, [pc, #376]	@ (8005ac4 <Save_Data+0x438>)
 800594c:	885b      	ldrh	r3, [r3, #2]
 800594e:	4a5f      	ldr	r2, [pc, #380]	@ (8005acc <Save_Data+0x440>)
 8005950:	fba2 2303 	umull	r2, r3, r2, r3
 8005954:	099b      	lsrs	r3, r3, #6
 8005956:	b29a      	uxth	r2, r3
 8005958:	4b5a      	ldr	r3, [pc, #360]	@ (8005ac4 <Save_Data+0x438>)
 800595a:	805a      	strh	r2, [r3, #2]
		Last_Acceleration.y = (uint16_t)(Last_Acceleration.y / (ACCELERATION_LEN / 7));
 800595c:	4b59      	ldr	r3, [pc, #356]	@ (8005ac4 <Save_Data+0x438>)
 800595e:	889b      	ldrh	r3, [r3, #4]
 8005960:	4a5a      	ldr	r2, [pc, #360]	@ (8005acc <Save_Data+0x440>)
 8005962:	fba2 2303 	umull	r2, r3, r2, r3
 8005966:	099b      	lsrs	r3, r3, #6
 8005968:	b29a      	uxth	r2, r3
 800596a:	4b56      	ldr	r3, [pc, #344]	@ (8005ac4 <Save_Data+0x438>)
 800596c:	809a      	strh	r2, [r3, #4]
		Last_Acceleration.z = (uint16_t)(Last_Acceleration.z / (ACCELERATION_LEN / 7));
 800596e:	4b55      	ldr	r3, [pc, #340]	@ (8005ac4 <Save_Data+0x438>)
 8005970:	88db      	ldrh	r3, [r3, #6]
 8005972:	4a56      	ldr	r2, [pc, #344]	@ (8005acc <Save_Data+0x440>)
 8005974:	fba2 2303 	umull	r2, r3, r2, r3
 8005978:	099b      	lsrs	r3, r3, #6
 800597a:	b29a      	uxth	r2, r3
 800597c:	4b51      	ldr	r3, [pc, #324]	@ (8005ac4 <Save_Data+0x438>)
 800597e:	80da      	strh	r2, [r3, #6]
		flags.ACC_Complete = 0;
 8005980:	4a53      	ldr	r2, [pc, #332]	@ (8005ad0 <Save_Data+0x444>)
 8005982:	7813      	ldrb	r3, [r2, #0]
 8005984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005988:	7013      	strb	r3, [r2, #0]
	}
	Address_Offset += ACCELERATION_LEN;
 800598a:	4b52      	ldr	r3, [pc, #328]	@ (8005ad4 <Save_Data+0x448>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8005992:	4a50      	ldr	r2, [pc, #320]	@ (8005ad4 <Save_Data+0x448>)
 8005994:	6013      	str	r3, [r2, #0]

	INA3221_Read_Measure(&Supply);
 8005996:	4850      	ldr	r0, [pc, #320]	@ (8005ad8 <Save_Data+0x44c>)
 8005998:	f7fb fb40 	bl	800101c <INA3221_Read_Measure>
	uint16_t new_temp = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
	if((new_temp = Read_Temperature()) != 0)
 80059a2:	f7fb fae1 	bl	8000f68 <Read_Temperature>
 80059a6:	4603      	mov	r3, r0
 80059a8:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
 80059ac:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <Save_Data+0x330>
	{
		Temperature = new_temp;
 80059b4:	4a49      	ldr	r2, [pc, #292]	@ (8005adc <Save_Data+0x450>)
 80059b6:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 80059ba:	8013      	strh	r3, [r2, #0]
	}
	BC_MultiRead_Reg(REG3B_VBAT_ADC, &Vbatt);
 80059bc:	4948      	ldr	r1, [pc, #288]	@ (8005ae0 <Save_Data+0x454>)
 80059be:	203b      	movs	r0, #59	@ 0x3b
 80059c0:	f7fc fdd2 	bl	8002568 <BC_MultiRead_Reg>

	uint8_t compressed_data[MAX_COMPRESSED_SIZE];
	Compressed_Sample_Typedef sample;
    sample.compressed_size = Compress_Sample(Saving_Buffer, SAVING_BUFFER_LEN, compressed_data);
 80059c4:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80059c8:	f2a3 44cc 	subw	r4, r3, #1228	@ 0x4cc
 80059cc:	4638      	mov	r0, r7
 80059ce:	f107 0314 	add.w	r3, r7, #20
 80059d2:	f44f 62e6 	mov.w	r2, #1840	@ 0x730
 80059d6:	4943      	ldr	r1, [pc, #268]	@ (8005ae4 <Save_Data+0x458>)
 80059d8:	f000 fb44 	bl	8006064 <Compress_Sample>
 80059dc:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80059e0:	f5a3 629b 	sub.w	r2, r3, #1240	@ 0x4d8
 80059e4:	4623      	mov	r3, r4
 80059e6:	6810      	ldr	r0, [r2, #0]
 80059e8:	6018      	str	r0, [r3, #0]
 80059ea:	8892      	ldrh	r2, [r2, #4]
 80059ec:	809a      	strh	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80059ee:	b672      	cpsid	i
}
 80059f0:	bf00      	nop

	__disable_irq();
	RAM_Save_Measure(&sample, compressed_data);
 80059f2:	f107 0214 	add.w	r2, r7, #20
 80059f6:	f107 030c 	add.w	r3, r7, #12
 80059fa:	4611      	mov	r1, r2
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 fa31 	bl	8005e64 <RAM_Save_Measure>
  __ASM volatile ("cpsie i" : : : "memory");
 8005a02:	b662      	cpsie	i
}
 8005a04:	bf00      	nop
	__enable_irq();

	Address_Offset = 0;
 8005a06:	4b33      	ldr	r3, [pc, #204]	@ (8005ad4 <Save_Data+0x448>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]

	if(flags.Hammer_Detected || flags.Threshold_Detected)
 8005a0c:	4b30      	ldr	r3, [pc, #192]	@ (8005ad0 <Save_Data+0x444>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <Save_Data+0x39c>
 8005a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8005ad0 <Save_Data+0x444>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	f003 0310 	and.w	r3, r3, #16
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d048      	beq.n	8005aba <Save_Data+0x42e>
	{
		Cycles_After_Warning++;
 8005a28:	4b2f      	ldr	r3, [pc, #188]	@ (8005ae8 <Save_Data+0x45c>)
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	4b2d      	ldr	r3, [pc, #180]	@ (8005ae8 <Save_Data+0x45c>)
 8005a32:	801a      	strh	r2, [r3, #0]
		if(Cycles_After_Warning >= config.buffering_secs * (config.samp_freq / ACC_FIFO_WATERMARK))
 8005a34:	4b2c      	ldr	r3, [pc, #176]	@ (8005ae8 <Save_Data+0x45c>)
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8005aec <Save_Data+0x460>)
 8005a3c:	791b      	ldrb	r3, [r3, #4]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	4b2a      	ldr	r3, [pc, #168]	@ (8005aec <Save_Data+0x460>)
 8005a42:	885b      	ldrh	r3, [r3, #2]
 8005a44:	4a21      	ldr	r2, [pc, #132]	@ (8005acc <Save_Data+0x440>)
 8005a46:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4a:	099b      	lsrs	r3, r3, #6
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	fb00 f303 	mul.w	r3, r0, r3
 8005a52:	4299      	cmp	r1, r3
 8005a54:	db31      	blt.n	8005aba <Save_Data+0x42e>
		{
			if(!flags.CMD.Measure_Request)
 8005a56:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad0 <Save_Data+0x444>)
 8005a58:	789b      	ldrb	r3, [r3, #2]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d12a      	bne.n	8005aba <Save_Data+0x42e>
			{
				LED_Start(RED_LED, FAST, LOW);
 8005a64:	2207      	movs	r2, #7
 8005a66:	2100      	movs	r1, #0
 8005a68:	2004      	movs	r0, #4
 8005a6a:	f7fd fd69 	bl	8003540 <LED_Start>
				Switch_Buffer();
 8005a6e:	f000 f843 	bl	8005af8 <Switch_Buffer>
				flags.CMD.Measure_Request = 1;
 8005a72:	4a17      	ldr	r2, [pc, #92]	@ (8005ad0 <Save_Data+0x444>)
 8005a74:	7893      	ldrb	r3, [r2, #2]
 8005a76:	f043 0302 	orr.w	r3, r3, #2
 8005a7a:	7093      	strb	r3, [r2, #2]
				Send_Measure_Addr = Saved_Bytes;
 8005a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8005af0 <Save_Data+0x464>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1c      	ldr	r2, [pc, #112]	@ (8005af4 <Save_Data+0x468>)
 8005a82:	6013      	str	r3, [r2, #0]
				Cycles_After_Warning = 0;
 8005a84:	4b18      	ldr	r3, [pc, #96]	@ (8005ae8 <Save_Data+0x45c>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	801a      	strh	r2, [r3, #0]
				if(flags.Hammer_Detected)
 8005a8a:	4b11      	ldr	r3, [pc, #68]	@ (8005ad0 <Save_Data+0x444>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <Save_Data+0x416>
				{
					flags.Hammer_Detected = 0;
 8005a98:	4a0d      	ldr	r2, [pc, #52]	@ (8005ad0 <Save_Data+0x444>)
 8005a9a:	7813      	ldrb	r3, [r2, #0]
 8005a9c:	f023 0308 	bic.w	r3, r3, #8
 8005aa0:	7013      	strb	r3, [r2, #0]
				}
				if(flags.Threshold_Detected)
 8005aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad0 <Save_Data+0x444>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	f003 0310 	and.w	r3, r3, #16
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d004      	beq.n	8005aba <Save_Data+0x42e>
				{
					flags.Threshold_Detected = 0;
 8005ab0:	4a07      	ldr	r2, [pc, #28]	@ (8005ad0 <Save_Data+0x444>)
 8005ab2:	7813      	ldrb	r3, [r2, #0]
 8005ab4:	f023 0310 	bic.w	r3, r3, #16
 8005ab8:	7013      	strb	r3, [r2, #0]
				}
			}
		}
	}

}
 8005aba:	bf00      	nop
 8005abc:	f207 47dc 	addw	r7, r7, #1244	@ 0x4dc
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd90      	pop	{r4, r7, pc}
 8005ac4:	20004718 	.word	0x20004718
 8005ac8:	2000419c 	.word	0x2000419c
 8005acc:	51eb851f 	.word	0x51eb851f
 8005ad0:	20001c68 	.word	0x20001c68
 8005ad4:	20004eb8 	.word	0x20004eb8
 8005ad8:	20003e44 	.word	0x20003e44
 8005adc:	20004720 	.word	0x20004720
 8005ae0:	20004722 	.word	0x20004722
 8005ae4:	20004788 	.word	0x20004788
 8005ae8:	20004ebc 	.word	0x20004ebc
 8005aec:	20001c6c 	.word	0x20001c6c
 8005af0:	20004ec0 	.word	0x20004ec0
 8005af4:	20004ec8 	.word	0x20004ec8

08005af8 <Switch_Buffer>:

/*-----CAMBIO BUFFER-----*/
void Switch_Buffer(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
    sys.Inactive_RAM_Len = sys.Current_RAM_Len;
 8005afc:	4b23      	ldr	r3, [pc, #140]	@ (8005b8c <Switch_Buffer+0x94>)
 8005afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b02:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005b06:	4a21      	ldr	r2, [pc, #132]	@ (8005b8c <Switch_Buffer+0x94>)
 8005b08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b0c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

    if (sys.Active_RAM_Buffer == 0) 
 8005b10:	4b1e      	ldr	r3, [pc, #120]	@ (8005b8c <Switch_Buffer+0x94>)
 8005b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b16:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d116      	bne.n	8005b4c <Switch_Buffer+0x54>
	{
		sys.RAM_Buffer_Base_tosend = RAM_SECOND_BUFFER_ADD;
 8005b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8005b8c <Switch_Buffer+0x94>)
 8005b20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b24:	461a      	mov	r2, r3
 8005b26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005b2a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 1;
 8005b2e:	4b17      	ldr	r3, [pc, #92]	@ (8005b8c <Switch_Buffer+0x94>)
 8005b30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_SECOND_BUFFER_ADD;
 8005b3a:	4b14      	ldr	r3, [pc, #80]	@ (8005b8c <Switch_Buffer+0x94>)
 8005b3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b40:	461a      	mov	r2, r3
 8005b42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005b46:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
 8005b4a:	e013      	b.n	8005b74 <Switch_Buffer+0x7c>
    } 
	else 
	{
		sys.RAM_Buffer_Base_tosend = RAM_FIRST_BUFFER_ADD;
 8005b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b8c <Switch_Buffer+0x94>)
 8005b4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b52:	461a      	mov	r2, r3
 8005b54:	2300      	movs	r3, #0
 8005b56:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
        sys.Active_RAM_Buffer = 0;
 8005b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b8c <Switch_Buffer+0x94>)
 8005b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
        sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8005b66:	4b09      	ldr	r3, [pc, #36]	@ (8005b8c <Switch_Buffer+0x94>)
 8005b68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
    }

    sys.Current_RAM_Len = 0;
 8005b74:	4b05      	ldr	r3, [pc, #20]	@ (8005b8c <Switch_Buffer+0x94>)
 8005b76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8005b82:	bf00      	nop
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	20000740 	.word	0x20000740

08005b90 <Erase_RAM_Data>:

/*-----CANCELLAZIONE DATI RAM-----*/
void Erase_RAM_Data(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8005b96:	af00      	add	r7, sp, #0
	uint8_t zero_buffer[1024] = {0};
 8005b98:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8005b9c:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	2100      	movs	r1, #0
 8005baa:	f010 f961 	bl	8015e70 <memset>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005bb4:	e00d      	b.n	8005bd2 <Erase_RAM_Data+0x42>
	{
		RAM_Write(addr, sizeof(zero_buffer), zero_buffer);
 8005bb6:	1d3b      	adds	r3, r7, #4
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005bbe:	f8d7 0404 	ldr.w	r0, [r7, #1028]	@ 0x404
 8005bc2:	f001 fa07 	bl	8006fd4 <RAM_Write>
	for (uint32_t addr = 0; addr < 0x800000; addr += sizeof(zero_buffer)) 
 8005bc6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8005bca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bce:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8005bd2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8005bd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bda:	d3ec      	bcc.n	8005bb6 <Erase_RAM_Data+0x26>
	}
}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <Start_Measure>:


/*-----AVVIO MISURA-----*/
void Start_Measure(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
	Erase_RAM_Data();
 8005bec:	f7ff ffd0 	bl	8005b90 <Erase_RAM_Data>
	sys.RAM_Samples_Number = (config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * 2;
 8005bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8005d1c <Start_Measure+0x134>)
 8005bf2:	885b      	ldrh	r3, [r3, #2]
 8005bf4:	4a4a      	ldr	r2, [pc, #296]	@ (8005d20 <Start_Measure+0x138>)
 8005bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfa:	099b      	lsrs	r3, r3, #6
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	461a      	mov	r2, r3
 8005c00:	4b46      	ldr	r3, [pc, #280]	@ (8005d1c <Start_Measure+0x134>)
 8005c02:	791b      	ldrb	r3, [r3, #4]
 8005c04:	fb02 f303 	mul.w	r3, r2, r3
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	4b45      	ldr	r3, [pc, #276]	@ (8005d24 <Start_Measure+0x13c>)
 8005c0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c12:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
	sys.Active_RAM_Buffer = 0;
 8005c16:	4b43      	ldr	r3, [pc, #268]	@ (8005d24 <Start_Measure+0x13c>)
 8005c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
	sys.Inactive_RAM_Len = 0;
 8005c22:	4b40      	ldr	r3, [pc, #256]	@ (8005d24 <Start_Measure+0x13c>)
 8005c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c28:	461a      	mov	r2, r3
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
	sys.Current_RAM_Base = RAM_FIRST_BUFFER_ADD;
 8005c30:	4b3c      	ldr	r3, [pc, #240]	@ (8005d24 <Start_Measure+0x13c>)
 8005c32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c36:	461a      	mov	r2, r3
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
	sys.Current_RAM_Len = 0;
 8005c3e:	4b39      	ldr	r3, [pc, #228]	@ (8005d24 <Start_Measure+0x13c>)
 8005c40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c44:	461a      	mov	r2, r3
 8005c46:	2300      	movs	r3, #0
 8005c48:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
	flags.SIM_isConnected = 1;
 8005c4c:	4a36      	ldr	r2, [pc, #216]	@ (8005d28 <Start_Measure+0x140>)
 8005c4e:	7853      	ldrb	r3, [r2, #1]
 8005c50:	f043 0308 	orr.w	r3, r3, #8
 8005c54:	7053      	strb	r3, [r2, #1]
	memset(Pressure, 0, sizeof(Pressure));
 8005c56:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	4833      	ldr	r0, [pc, #204]	@ (8005d2c <Start_Measure+0x144>)
 8005c5e:	f010 f907 	bl	8015e70 <memset>
	memset(Volume_Period, 0, sizeof(Volume_Period));
 8005c62:	2228      	movs	r2, #40	@ 0x28
 8005c64:	2100      	movs	r1, #0
 8005c66:	4832      	ldr	r0, [pc, #200]	@ (8005d30 <Start_Measure+0x148>)
 8005c68:	f010 f902 	bl	8015e70 <memset>
	memset(Acceleration, 0, sizeof(Acceleration));
 8005c6c:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8005c70:	2100      	movs	r1, #0
 8005c72:	4830      	ldr	r0, [pc, #192]	@ (8005d34 <Start_Measure+0x14c>)
 8005c74:	f010 f8fc 	bl	8015e70 <memset>
	memset(&Supply, 0, sizeof(Supply));
 8005c78:	220c      	movs	r2, #12
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	482e      	ldr	r0, [pc, #184]	@ (8005d38 <Start_Measure+0x150>)
 8005c7e:	f010 f8f7 	bl	8015e70 <memset>
	Temperature = 0;
 8005c82:	4b2e      	ldr	r3, [pc, #184]	@ (8005d3c <Start_Measure+0x154>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	801a      	strh	r2, [r3, #0]
	Saved_Bytes = 0;
 8005c88:	4b2d      	ldr	r3, [pc, #180]	@ (8005d40 <Start_Measure+0x158>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
	Saved_Samples = 0;
 8005c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8005d44 <Start_Measure+0x15c>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	801a      	strh	r2, [r3, #0]
	Address_Offset = 0;
 8005c94:	4b2c      	ldr	r3, [pc, #176]	@ (8005d48 <Start_Measure+0x160>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]
	Cycles_After_Warning = 0;
 8005c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8005d4c <Start_Measure+0x164>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	801a      	strh	r2, [r3, #0]
	Clear_Flags();
 8005ca0:	f000 ff46 	bl	8006b30 <Clear_Flags>

	ADC_TIMER->Instance->PSC = 100 - 1;
 8005ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8005d50 <Start_Measure+0x168>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2263      	movs	r2, #99	@ 0x63
 8005caa:	629a      	str	r2, [r3, #40]	@ 0x28
	ADC_TIMER->Instance->ARR = (uint32_t)(SystemCoreClock / (ADC_TIMER->Instance->PSC * config.samp_freq)) - 1;
 8005cac:	4b29      	ldr	r3, [pc, #164]	@ (8005d54 <Start_Measure+0x16c>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	4b27      	ldr	r3, [pc, #156]	@ (8005d50 <Start_Measure+0x168>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb6:	4919      	ldr	r1, [pc, #100]	@ (8005d1c <Start_Measure+0x134>)
 8005cb8:	8849      	ldrh	r1, [r1, #2]
 8005cba:	fb01 f303 	mul.w	r3, r1, r3
 8005cbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cc2:	4b23      	ldr	r3, [pc, #140]	@ (8005d50 <Start_Measure+0x168>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3a01      	subs	r2, #1
 8005cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->ARR = (uint32_t)(config.samp_freq / 25) - 1;
 8005cca:	4b14      	ldr	r3, [pc, #80]	@ (8005d1c <Start_Measure+0x134>)
 8005ccc:	885b      	ldrh	r3, [r3, #2]
 8005cce:	4a14      	ldr	r2, [pc, #80]	@ (8005d20 <Start_Measure+0x138>)
 8005cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd4:	08db      	lsrs	r3, r3, #3
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4b1f      	ldr	r3, [pc, #124]	@ (8005d58 <Start_Measure+0x170>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3a01      	subs	r2, #1
 8005ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
	ACC_TIMER->Instance->CCR3 = (uint32_t)((ACC_TIMER->Instance->ARR + 1) / 2);
 8005ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8005d58 <Start_Measure+0x170>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	4b1b      	ldr	r3, [pc, #108]	@ (8005d58 <Start_Measure+0x170>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	0852      	lsrs	r2, r2, #1
 8005cf0:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_IC_Start_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	4819      	ldr	r0, [pc, #100]	@ (8005d5c <Start_Measure+0x174>)
 8005cf6:	f00d f837 	bl	8012d68 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(ACC_TIMER, TIM_CHANNEL_3);
 8005cfa:	2108      	movs	r1, #8
 8005cfc:	4816      	ldr	r0, [pc, #88]	@ (8005d58 <Start_Measure+0x170>)
 8005cfe:	f00c fe3f 	bl	8012980 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(PRESSURE_ADC, (uint32_t*)&Pressure, PRESS_FULL_SAMPLES);
 8005d02:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8005d06:	4909      	ldr	r1, [pc, #36]	@ (8005d2c <Start_Measure+0x144>)
 8005d08:	4815      	ldr	r0, [pc, #84]	@ (8005d60 <Start_Measure+0x178>)
 8005d0a:	f005 fba5 	bl	800b458 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start_IT(ADC_TIMER, TIM_CHANNEL_3);
 8005d0e:	2108      	movs	r1, #8
 8005d10:	480f      	ldr	r0, [pc, #60]	@ (8005d50 <Start_Measure+0x168>)
 8005d12:	f00c fb9b 	bl	801244c <HAL_TIM_OC_Start_IT>
}
 8005d16:	bf00      	nop
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20001c6c 	.word	0x20001c6c
 8005d20:	51eb851f 	.word	0x51eb851f
 8005d24:	20000740 	.word	0x20000740
 8005d28:	20001c68 	.word	0x20001c68
 8005d2c:	20003e54 	.word	0x20003e54
 8005d30:	20004174 	.word	0x20004174
 8005d34:	2000419c 	.word	0x2000419c
 8005d38:	20003e44 	.word	0x20003e44
 8005d3c:	20004720 	.word	0x20004720
 8005d40:	20004ec0 	.word	0x20004ec0
 8005d44:	20004ec4 	.word	0x20004ec4
 8005d48:	20004eb8 	.word	0x20004eb8
 8005d4c:	20004ebc 	.word	0x20004ebc
 8005d50:	20000550 	.word	0x20000550
 8005d54:	20000168 	.word	0x20000168
 8005d58:	20000504 	.word	0x20000504
 8005d5c:	200004b8 	.word	0x200004b8
 8005d60:	20000218 	.word	0x20000218

08005d64 <Stop_Measure>:

/*-----FINE MISURA-----*/
void Stop_Measure(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(PRESSURE_ADC);
 8005d68:	4808      	ldr	r0, [pc, #32]	@ (8005d8c <Stop_Measure+0x28>)
 8005d6a:	f005 fc31 	bl	800b5d0 <HAL_ADC_Stop_DMA>
	HAL_TIM_OC_Stop_IT(ADC_TIMER, TIM_CHANNEL_3);
 8005d6e:	2108      	movs	r1, #8
 8005d70:	4807      	ldr	r0, [pc, #28]	@ (8005d90 <Stop_Measure+0x2c>)
 8005d72:	f00c fcbf 	bl	80126f4 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_PWM_Stop(ACC_TIMER, TIM_CHANNEL_3);
 8005d76:	2108      	movs	r1, #8
 8005d78:	4806      	ldr	r0, [pc, #24]	@ (8005d94 <Stop_Measure+0x30>)
 8005d7a:	f00c ff07 	bl	8012b8c <HAL_TIM_PWM_Stop>
	HAL_TIM_IC_Stop_IT(VOLUME_TIMER, TIM_CHANNEL_1);
 8005d7e:	2100      	movs	r1, #0
 8005d80:	4805      	ldr	r0, [pc, #20]	@ (8005d98 <Stop_Measure+0x34>)
 8005d82:	f00d f93b 	bl	8012ffc <HAL_TIM_IC_Stop_IT>
}
 8005d86:	bf00      	nop
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000218 	.word	0x20000218
 8005d90:	20000550 	.word	0x20000550
 8005d94:	20000504 	.word	0x20000504
 8005d98:	200004b8 	.word	0x200004b8

08005d9c <Warning_Detection>:

/*-----DETECTION COLPO D'ARIETE-----*/
void Warning_Detection(uint16_t* Data)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
	uint16_t max = Data[0];
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	81fb      	strh	r3, [r7, #14]
	uint16_t min = Data[0];
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	81bb      	strh	r3, [r7, #12]

	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8005db0:	2301      	movs	r3, #1
 8005db2:	60bb      	str	r3, [r7, #8]
 8005db4:	e03a      	b.n	8005e2c <Warning_Detection+0x90>
	{
		if(Data[i] > max)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	89fa      	ldrh	r2, [r7, #14]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d206      	bcs.n	8005dd4 <Warning_Detection+0x38>
		{
			max = Data[i];
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	4413      	add	r3, r2
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	81fb      	strh	r3, [r7, #14]
 8005dd2:	e00d      	b.n	8005df0 <Warning_Detection+0x54>
		}
		else if(Data[i] < min)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	4413      	add	r3, r2
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	89ba      	ldrh	r2, [r7, #12]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d905      	bls.n	8005df0 <Warning_Detection+0x54>
		{
			min = Data[i];
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	4413      	add	r3, r2
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	81bb      	strh	r3, [r7, #12]
		}

		if(Data[i] < sys.Low_th || Data[i] > sys.High_th)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	4413      	add	r3, r2
 8005df8:	881a      	ldrh	r2, [r3, #0]
 8005dfa:	4b17      	ldr	r3, [pc, #92]	@ (8005e58 <Warning_Detection+0xbc>)
 8005dfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e00:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d30a      	bcc.n	8005e1c <Warning_Detection+0x80>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	881a      	ldrh	r2, [r3, #0]
 8005e10:	4b11      	ldr	r3, [pc, #68]	@ (8005e58 <Warning_Detection+0xbc>)
 8005e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e16:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d904      	bls.n	8005e26 <Warning_Detection+0x8a>
		{
			flags.Threshold_Detected= 1;
 8005e1c:	4a0f      	ldr	r2, [pc, #60]	@ (8005e5c <Warning_Detection+0xc0>)
 8005e1e:	7813      	ldrb	r3, [r2, #0]
 8005e20:	f043 0310 	orr.w	r3, r3, #16
 8005e24:	7013      	strb	r3, [r2, #0]
	for(int i = 1; i < PRESS_HALF_SAMPLES; i++)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	60bb      	str	r3, [r7, #8]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e30:	ddc1      	ble.n	8005db6 <Warning_Detection+0x1a>
		}
	}

	if(max - min >= Hammer_Th)
 8005e32:	89fa      	ldrh	r2, [r7, #14]
 8005e34:	89bb      	ldrh	r3, [r7, #12]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	4a09      	ldr	r2, [pc, #36]	@ (8005e60 <Warning_Detection+0xc4>)
 8005e3a:	8812      	ldrh	r2, [r2, #0]
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	db04      	blt.n	8005e4a <Warning_Detection+0xae>
	{
		flags.Hammer_Detected = 1;
 8005e40:	4a06      	ldr	r2, [pc, #24]	@ (8005e5c <Warning_Detection+0xc0>)
 8005e42:	7813      	ldrb	r3, [r2, #0]
 8005e44:	f043 0308 	orr.w	r3, r3, #8
 8005e48:	7013      	strb	r3, [r2, #0]
	}

}
 8005e4a:	bf00      	nop
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	20000740 	.word	0x20000740
 8005e5c:	20001c68 	.word	0x20001c68
 8005e60:	20005480 	.word	0x20005480

08005e64 <RAM_Save_Measure>:

/*-----SALVATAGGIO MISURA IN RAM-----*/
void RAM_Save_Measure(Compressed_Sample_Typedef* sample, uint8_t* compressed_data)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	461a      	mov	r2, r3
                            sample->compressed_size.volume_size +
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	885b      	ldrh	r3, [r3, #2]
 8005e7a:	b29b      	uxth	r3, r3
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8005e7c:	4413      	add	r3, r2
                            sample->compressed_size.acceleration_size;
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	8892      	ldrh	r2, [r2, #4]
 8005e82:	b292      	uxth	r2, r2
                            sample->compressed_size.volume_size +
 8005e84:	4413      	add	r3, r2
    uint32_t samples_size = sample->compressed_size.pressure_size +
 8005e86:	613b      	str	r3, [r7, #16]
    uint32_t total_size = METADATA_SIZE + samples_size;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	3306      	adds	r3, #6
 8005e8c:	60fb      	str	r3, [r7, #12]
    uint32_t address = sys.Current_RAM_Base + sys.Current_RAM_Len;
 8005e8e:	4b23      	ldr	r3, [pc, #140]	@ (8005f1c <RAM_Save_Measure+0xb8>)
 8005e90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e94:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8005e98:	4b20      	ldr	r3, [pc, #128]	@ (8005f1c <RAM_Save_Measure+0xb8>)
 8005e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005ea2:	4413      	add	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]

	if(Saved_Samples >= sys.RAM_Samples_Number) 
 8005ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8005f20 <RAM_Save_Measure+0xbc>)
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	4b1b      	ldr	r3, [pc, #108]	@ (8005f1c <RAM_Save_Measure+0xb8>)
 8005eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d312      	bcc.n	8005ee0 <RAM_Save_Measure+0x7c>
	{
		sys.Current_RAM_Len = Saved_Bytes;
 8005eba:	4b1a      	ldr	r3, [pc, #104]	@ (8005f24 <RAM_Save_Measure+0xc0>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a17      	ldr	r2, [pc, #92]	@ (8005f1c <RAM_Save_Measure+0xb8>)
 8005ec0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ec4:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
		Saved_Bytes = 0;
 8005ec8:	4b16      	ldr	r3, [pc, #88]	@ (8005f24 <RAM_Save_Measure+0xc0>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]
		Saved_Samples = 0;
 8005ece:	4b14      	ldr	r3, [pc, #80]	@ (8005f20 <RAM_Save_Measure+0xbc>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	801a      	strh	r2, [r3, #0]
		address = sys.Current_RAM_Base;
 8005ed4:	4b11      	ldr	r3, [pc, #68]	@ (8005f1c <RAM_Save_Measure+0xb8>)
 8005ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eda:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005ede:	617b      	str	r3, [r7, #20]
    }

	RAM_Write(address, METADATA_SIZE, (uint8_t*)sample);
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	2106      	movs	r1, #6
 8005ee4:	6978      	ldr	r0, [r7, #20]
 8005ee6:	f001 f875 	bl	8006fd4 <RAM_Write>
    address += METADATA_SIZE;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	3306      	adds	r3, #6
 8005eee:	617b      	str	r3, [r7, #20]

	RAM_Write(address, samples_size, compressed_data);
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	6939      	ldr	r1, [r7, #16]
 8005ef4:	6978      	ldr	r0, [r7, #20]
 8005ef6:	f001 f86d 	bl	8006fd4 <RAM_Write>
    
    Saved_Bytes += total_size;
 8005efa:	4b0a      	ldr	r3, [pc, #40]	@ (8005f24 <RAM_Save_Measure+0xc0>)
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4413      	add	r3, r2
 8005f02:	4a08      	ldr	r2, [pc, #32]	@ (8005f24 <RAM_Save_Measure+0xc0>)
 8005f04:	6013      	str	r3, [r2, #0]
	Saved_Samples++;
 8005f06:	4b06      	ldr	r3, [pc, #24]	@ (8005f20 <RAM_Save_Measure+0xbc>)
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	4b04      	ldr	r3, [pc, #16]	@ (8005f20 <RAM_Save_Measure+0xbc>)
 8005f10:	801a      	strh	r2, [r3, #0]
}
 8005f12:	bf00      	nop
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000740 	.word	0x20000740
 8005f20:	20004ec4 	.word	0x20004ec4
 8005f24:	20004ec0 	.word	0x20004ec0

08005f28 <Send_Measure_Chunk>:

/*-----INVIO CHUNK MISURA-----*/
uint32_t Send_Measure_Chunk(uint32_t buffer_base, uint32_t buffer_len, uint32_t start_address)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08c      	sub	sp, #48	@ 0x30
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
    uint32_t chunk_fill = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t address = start_address;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t end_address = start_address; // Per fermarsi quando si torna al punto di partenza
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	623b      	str	r3, [r7, #32]
    uint8_t first_loop = 1;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (buffer_len == 0) 
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <Send_Measure_Chunk+0x28>
	{
        return 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e083      	b.n	8006058 <Send_Measure_Chunk+0x130>
    }

    do {
        // Gestione wrap-around circolare
        if (address >= buffer_base + buffer_len) 
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	4413      	add	r3, r2
 8005f56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d301      	bcc.n	8005f60 <Send_Measure_Chunk+0x38>
		{
            address = buffer_base;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        // Controlla se c'è spazio per i metadata
        if ((buffer_base + buffer_len - address) < METADATA_SIZE && address < buffer_base + buffer_len) 
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	441a      	add	r2, r3
 8005f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b05      	cmp	r3, #5
 8005f6c:	d805      	bhi.n	8005f7a <Send_Measure_Chunk+0x52>
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4413      	add	r3, r2
 8005f74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d357      	bcc.n	800602a <Send_Measure_Chunk+0x102>
		{
            break;
        }
        if ((chunk_fill + METADATA_SIZE) > sizeof(tcp_chunk)) 
 8005f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7c:	3306      	adds	r3, #6
 8005f7e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d853      	bhi.n	800602e <Send_Measure_Chunk+0x106>
            break;
        }

        // Leggi header sample
        Compressed_Sample_Typedef sample_header;
        RAM_Read(address, METADATA_SIZE, (uint8_t*)&sample_header);
 8005f86:	f107 0310 	add.w	r3, r7, #16
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	2106      	movs	r1, #6
 8005f8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f90:	f001 f831 	bl	8006ff6 <RAM_Read>

        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8005f94:	8a3b      	ldrh	r3, [r7, #16]
 8005f96:	461a      	mov	r2, r3
                               sample_header.compressed_size.volume_size +
 8005f98:	8a7b      	ldrh	r3, [r7, #18]
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8005f9a:	4413      	add	r3, r2
                               sample_header.compressed_size.acceleration_size;
 8005f9c:	8aba      	ldrh	r2, [r7, #20]
                               sample_header.compressed_size.volume_size +
 8005f9e:	4413      	add	r3, r2
        uint32_t sample_size = sample_header.compressed_size.pressure_size +
 8005fa0:	61fb      	str	r3, [r7, #28]
        uint32_t sample_total_size = METADATA_SIZE + sample_size;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	3306      	adds	r3, #6
 8005fa6:	61bb      	str	r3, [r7, #24]

        if ((chunk_fill + sample_total_size) > sizeof(tcp_chunk)) 
 8005fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	4413      	add	r3, r2
 8005fae:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d83d      	bhi.n	8006032 <Send_Measure_Chunk+0x10a>
		{
            break;
        }

        RAM_Read(address, METADATA_SIZE, tcp_chunk + chunk_fill);
 8005fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb8:	4a29      	ldr	r2, [pc, #164]	@ (8006060 <Send_Measure_Chunk+0x138>)
 8005fba:	4413      	add	r3, r2
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	2106      	movs	r1, #6
 8005fc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fc2:	f001 f818 	bl	8006ff6 <RAM_Read>
        chunk_fill += METADATA_SIZE;
 8005fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc8:	3306      	adds	r3, #6
 8005fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        address += METADATA_SIZE;
 8005fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fce:	3306      	adds	r3, #6
 8005fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (address >= buffer_base + buffer_len) address = buffer_base;
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d301      	bcc.n	8005fe2 <Send_Measure_Chunk+0xba>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	62bb      	str	r3, [r7, #40]	@ 0x28

        RAM_Read(address, sample_size, tcp_chunk + chunk_fill);
 8005fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8006060 <Send_Measure_Chunk+0x138>)
 8005fe6:	4413      	add	r3, r2
 8005fe8:	461a      	mov	r2, r3
 8005fea:	69f9      	ldr	r1, [r7, #28]
 8005fec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fee:	f001 f802 	bl	8006ff6 <RAM_Read>
        chunk_fill += sample_size;
 8005ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        address += sample_size;
 8005ffa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	4413      	add	r3, r2
 8006000:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (address >= buffer_base + buffer_len) address = buffer_base;
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4413      	add	r3, r2
 8006008:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800600a:	429a      	cmp	r2, r3
 800600c:	d301      	bcc.n	8006012 <Send_Measure_Chunk+0xea>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	62bb      	str	r3, [r7, #40]	@ 0x28

        // Fermati se hai completato il giro
        if (address == end_address && !first_loop) 
 8006012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	429a      	cmp	r2, r3
 8006018:	d103      	bne.n	8006022 <Send_Measure_Chunk+0xfa>
 800601a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800601e:	2b00      	cmp	r3, #0
 8006020:	d009      	beq.n	8006036 <Send_Measure_Chunk+0x10e>
		{
            break;
        }
        first_loop = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    do {
 8006028:	e792      	b.n	8005f50 <Send_Measure_Chunk+0x28>
            break;
 800602a:	bf00      	nop
 800602c:	e004      	b.n	8006038 <Send_Measure_Chunk+0x110>
            break;
 800602e:	bf00      	nop
 8006030:	e002      	b.n	8006038 <Send_Measure_Chunk+0x110>
            break;
 8006032:	bf00      	nop
 8006034:	e000      	b.n	8006038 <Send_Measure_Chunk+0x110>
            break;
 8006036:	bf00      	nop
    } while (1);

    if (chunk_fill > 0) 
 8006038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <Send_Measure_Chunk+0x122>
	{
        SIM_Send_TCP_Chunk_DMA(tcp_chunk, chunk_fill);
 800603e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006040:	b29b      	uxth	r3, r3
 8006042:	4619      	mov	r1, r3
 8006044:	4806      	ldr	r0, [pc, #24]	@ (8006060 <Send_Measure_Chunk+0x138>)
 8006046:	f7fc f847 	bl	80020d8 <SIM_Send_TCP_Chunk_DMA>
    }

    // Se hai completato il giro, ritorna 0
    if (address == end_address) 
 800604a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	429a      	cmp	r2, r3
 8006050:	d101      	bne.n	8006056 <Send_Measure_Chunk+0x12e>
	{
        return 0;
 8006052:	2300      	movs	r3, #0
 8006054:	e000      	b.n	8006058 <Send_Measure_Chunk+0x130>
    }
    return address;
 8006056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8006058:	4618      	mov	r0, r3
 800605a:	3730      	adds	r7, #48	@ 0x30
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	20004ecc 	.word	0x20004ecc

08006064 <Compress_Sample>:

/*-----COMPRESSIONE DATI-----*/
Compressed_Sizes_Typedef Compress_Sample(uint8_t *input, uint16_t input_len, uint8_t *output)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b09a      	sub	sp, #104	@ 0x68
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	4613      	mov	r3, r2
 8006072:	80fb      	strh	r3, [r7, #6]
	uint16_t out_idx = 0;
 8006074:	2300      	movs	r3, #0
 8006076:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	uint8_t packed_byte = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	Compressed_Sizes_Typedef sizes = {0, 0, 0};
 8006080:	2300      	movs	r3, #0
 8006082:	843b      	strh	r3, [r7, #32]
 8006084:	2300      	movs	r3, #0
 8006086:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006088:	2300      	movs	r3, #0
 800608a:	84bb      	strh	r3, [r7, #36]	@ 0x24

    AdpcmState_Typedef press_state = {0, 0};
 800608c:	2300      	movs	r3, #0
 800608e:	83bb      	strh	r3, [r7, #28]
 8006090:	2300      	movs	r3, #0
 8006092:	77bb      	strb	r3, [r7, #30]
    AdpcmState_Typedef acc_x_state = {0, 0}, acc_y_state = {0, 0}, acc_z_state = {0, 0};
 8006094:	2300      	movs	r3, #0
 8006096:	833b      	strh	r3, [r7, #24]
 8006098:	2300      	movs	r3, #0
 800609a:	76bb      	strb	r3, [r7, #26]
 800609c:	2300      	movs	r3, #0
 800609e:	82bb      	strh	r3, [r7, #20]
 80060a0:	2300      	movs	r3, #0
 80060a2:	75bb      	strb	r3, [r7, #22]
 80060a4:	2300      	movs	r3, #0
 80060a6:	823b      	strh	r3, [r7, #16]
 80060a8:	2300      	movs	r3, #0
 80060aa:	74bb      	strb	r3, [r7, #18]

	// --- 1. Pressione ---
	uint16_t *adc = (uint16_t*)input;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint16_t pressure_start = out_idx;
 80060b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80060b4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	output[out_idx++] = adc[0] & 0xFF;
 80060b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060ba:	881a      	ldrh	r2, [r3, #0]
 80060bc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80060c0:	1c59      	adds	r1, r3, #1
 80060c2:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80060c6:	4619      	mov	r1, r3
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	440b      	add	r3, r1
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = adc[0] >> 8;
 80060d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	0a1b      	lsrs	r3, r3, #8
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80060dc:	1c59      	adds	r1, r3, #1
 80060de:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80060e2:	4619      	mov	r1, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	440b      	add	r3, r1
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
	press_state.previous_value = adc[0];
 80060ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b21b      	sxth	r3, r3
 80060f2:	83bb      	strh	r3, [r7, #28]
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 80060f4:	2301      	movs	r3, #1
 80060f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80060f8:	e033      	b.n	8006162 <Compress_Sample+0xfe>
	{
		uint8_t nibble = ADPCM_Compression(adc[i], &press_state, step_size_table_12bit);
 80060fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006100:	4413      	add	r3, r2
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b21b      	sxth	r3, r3
 8006106:	f107 011c 	add.w	r1, r7, #28
 800610a:	4a99      	ldr	r2, [pc, #612]	@ (8006370 <Compress_Sample+0x30c>)
 800610c:	4618      	mov	r0, r3
 800610e:	f000 f9cf 	bl	80064b0 <ADPCM_Compression>
 8006112:	4603      	mov	r3, r0
 8006114:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (i % 2 != 0) 
 8006118:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d004      	beq.n	800612c <Compress_Sample+0xc8>
		{
			packed_byte = nibble;
 8006122:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006126:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 800612a:	e017      	b.n	800615c <Compress_Sample+0xf8>
		} else 
		{
			packed_byte |= (nibble << 4);
 800612c:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	b25a      	sxtb	r2, r3
 8006134:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8006138:	4313      	orrs	r3, r2
 800613a:	b25b      	sxtb	r3, r3
 800613c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			output[out_idx++] = packed_byte;
 8006140:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 800614a:	461a      	mov	r2, r3
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	4413      	add	r3, r2
 8006150:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8006154:	701a      	strb	r2, [r3, #0]
			packed_byte = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	for (int i = 1; i < PRESS_HALF_SAMPLES; i++) 
 800615c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800615e:	3301      	adds	r3, #1
 8006160:	663b      	str	r3, [r7, #96]	@ 0x60
 8006162:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006164:	2bc7      	cmp	r3, #199	@ 0xc7
 8006166:	ddc8      	ble.n	80060fa <Compress_Sample+0x96>
	if (PRESS_HALF_SAMPLES % 2 != 0) 
	{
		output[out_idx++] = packed_byte;
		packed_byte = 0;
	}
	sizes.pressure_size = out_idx - pressure_start;
 8006168:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800616c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	b29b      	uxth	r3, r3
 8006174:	843b      	strh	r3, [r7, #32]

	// --- 2. Flusso (RLE) ---
	uint32_t *counter = (uint32_t*)(input + PRESS_HALF_LEN);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800617c:	643b      	str	r3, [r7, #64]	@ 0x40
	uint16_t volume_start = out_idx;
 800617e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006182:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	uint32_t prev = counter[0];
 8006184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	65fb      	str	r3, [r7, #92]	@ 0x5c
	uint16_t run_len = 1;
 800618a:	2301      	movs	r3, #1
 800618c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 8006190:	2301      	movs	r3, #1
 8006192:	657b      	str	r3, [r7, #84]	@ 0x54
 8006194:	e058      	b.n	8006248 <Compress_Sample+0x1e4>
		if (counter[i] == prev && run_len < 255) {
 8006196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800619c:	4413      	add	r3, r2
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d109      	bne.n	80061ba <Compress_Sample+0x156>
 80061a6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80061aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80061ac:	d805      	bhi.n	80061ba <Compress_Sample+0x156>
			run_len++;
 80061ae:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80061b2:	3301      	adds	r3, #1
 80061b4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80061b8:	e043      	b.n	8006242 <Compress_Sample+0x1de>
		} else {
			// Scrivi valore e run_len (4 byte valore + 1 byte run_len)
			output[out_idx++] = prev & 0xFF;
 80061ba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80061c4:	461a      	mov	r2, r3
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	4413      	add	r3, r2
 80061ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 8) & 0xFF;
 80061d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061d2:	0a1a      	lsrs	r2, r3, #8
 80061d4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80061d8:	1c59      	adds	r1, r3, #1
 80061da:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80061de:	4619      	mov	r1, r3
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	440b      	add	r3, r1
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 16) & 0xFF;
 80061e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061ea:	0c1a      	lsrs	r2, r3, #16
 80061ec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80061f0:	1c59      	adds	r1, r3, #1
 80061f2:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80061f6:	4619      	mov	r1, r3
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	440b      	add	r3, r1
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = (prev >> 24) & 0xFF;
 8006200:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006202:	0e1a      	lsrs	r2, r3, #24
 8006204:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006208:	1c59      	adds	r1, r3, #1
 800620a:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800620e:	4619      	mov	r1, r3
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	440b      	add	r3, r1
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]
			output[out_idx++] = run_len;
 8006218:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006222:	461a      	mov	r2, r3
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	4413      	add	r3, r2
 8006228:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]
			prev = counter[i];
 8006230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006236:	4413      	add	r3, r2
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			run_len = 1;
 800623c:	2301      	movs	r3, #1
 800623e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	for (int i = 1; i < MAX_VOLUME_SAMPLES; i++) {
 8006242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006244:	3301      	adds	r3, #1
 8006246:	657b      	str	r3, [r7, #84]	@ 0x54
 8006248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800624a:	2b09      	cmp	r3, #9
 800624c:	dda3      	ble.n	8006196 <Compress_Sample+0x132>
		}
	}
	// Scrivi l'ultimo run
	output[out_idx++] = prev & 0xFF;
 800624e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 8006258:	461a      	mov	r2, r3
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	4413      	add	r3, r2
 800625e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 8) & 0xFF;
 8006264:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006266:	0a1a      	lsrs	r2, r3, #8
 8006268:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800626c:	1c59      	adds	r1, r3, #1
 800626e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006272:	4619      	mov	r1, r3
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	440b      	add	r3, r1
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 16) & 0xFF;
 800627c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800627e:	0c1a      	lsrs	r2, r3, #16
 8006280:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006284:	1c59      	adds	r1, r3, #1
 8006286:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800628a:	4619      	mov	r1, r3
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	440b      	add	r3, r1
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = (prev >> 24) & 0xFF;
 8006294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006296:	0e1a      	lsrs	r2, r3, #24
 8006298:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800629c:	1c59      	adds	r1, r3, #1
 800629e:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 80062a2:	4619      	mov	r1, r3
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	440b      	add	r3, r1
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
	output[out_idx++] = run_len;
 80062ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 80062b6:	461a      	mov	r2, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	4413      	add	r3, r2
 80062bc:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]

	sizes.volume_size = out_idx - volume_start;
 80062c4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80062c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	847b      	strh	r3, [r7, #34]	@ 0x22

	// --- 3. Accelerometro (3 canali separati) ---
	uint8_t *accel = input + PRESS_HALF_LEN + MAX_VOLUME_LEN;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80062d6:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint16_t accel_start = out_idx;
 80062d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80062dc:	86fb      	strh	r3, [r7, #54]	@ 0x36

	uint16_t x0 = accel[1] | (accel[2] << 8);
 80062de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e0:	3301      	adds	r3, #1
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	b21a      	sxth	r2, r3
 80062e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e8:	3302      	adds	r3, #2
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	b21b      	sxth	r3, r3
 80062ee:	021b      	lsls	r3, r3, #8
 80062f0:	b21b      	sxth	r3, r3
 80062f2:	4313      	orrs	r3, r2
 80062f4:	b21b      	sxth	r3, r3
 80062f6:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint16_t y0 = accel[3] | (accel[4] << 8);
 80062f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fa:	3303      	adds	r3, #3
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	b21a      	sxth	r2, r3
 8006300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006302:	3304      	adds	r3, #4
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	b21b      	sxth	r3, r3
 8006308:	021b      	lsls	r3, r3, #8
 800630a:	b21b      	sxth	r3, r3
 800630c:	4313      	orrs	r3, r2
 800630e:	b21b      	sxth	r3, r3
 8006310:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t z0 = accel[5] | (accel[6] << 8);
 8006312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006314:	3305      	adds	r3, #5
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	b21a      	sxth	r2, r3
 800631a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631c:	3306      	adds	r3, #6
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	b21b      	sxth	r3, r3
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	b21b      	sxth	r3, r3
 8006326:	4313      	orrs	r3, r2
 8006328:	b21b      	sxth	r3, r3
 800632a:	863b      	strh	r3, [r7, #48]	@ 0x30
	acc_x_state.previous_value = x0;
 800632c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8006330:	833b      	strh	r3, [r7, #24]
	acc_y_state.previous_value = y0;
 8006332:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8006336:	82bb      	strh	r3, [r7, #20]
	acc_z_state.previous_value = z0;
 8006338:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800633c:	823b      	strh	r3, [r7, #16]
	for(int k=0; k<7; ++k) output[out_idx++] = accel[k];
 800633e:	2300      	movs	r3, #0
 8006340:	653b      	str	r3, [r7, #80]	@ 0x50
 8006342:	e00f      	b.n	8006364 <Compress_Sample+0x300>
 8006344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006346:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006348:	441a      	add	r2, r3
 800634a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800634e:	1c59      	adds	r1, r3, #1
 8006350:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 8006354:	4619      	mov	r1, r3
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	440b      	add	r3, r1
 800635a:	7812      	ldrb	r2, [r2, #0]
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006360:	3301      	adds	r3, #1
 8006362:	653b      	str	r3, [r7, #80]	@ 0x50
 8006364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006366:	2b06      	cmp	r3, #6
 8006368:	ddec      	ble.n	8006344 <Compress_Sample+0x2e0>
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 800636a:	2301      	movs	r3, #1
 800636c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800636e:	e087      	b.n	8006480 <Compress_Sample+0x41c>
 8006370:	200000b0 	.word	0x200000b0
	{
		uint16_t x = accel[i*7+1] | (accel[i*7+2] << 8);
 8006374:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006376:	4613      	mov	r3, r2
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	1a9b      	subs	r3, r3, r2
 800637c:	3301      	adds	r3, #1
 800637e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006380:	4413      	add	r3, r2
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	b219      	sxth	r1, r3
 8006386:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	1a9b      	subs	r3, r3, r2
 800638e:	3302      	adds	r3, #2
 8006390:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006392:	4413      	add	r3, r2
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	b21b      	sxth	r3, r3
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	b21b      	sxth	r3, r3
 800639c:	430b      	orrs	r3, r1
 800639e:	b21b      	sxth	r3, r3
 80063a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		uint16_t y = accel[i*7+3] | (accel[i*7+4] << 8);
 80063a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063a4:	4613      	mov	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	1a9b      	subs	r3, r3, r2
 80063aa:	3303      	adds	r3, #3
 80063ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063ae:	4413      	add	r3, r2
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	b219      	sxth	r1, r3
 80063b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063b6:	4613      	mov	r3, r2
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	1a9b      	subs	r3, r3, r2
 80063bc:	3304      	adds	r3, #4
 80063be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063c0:	4413      	add	r3, r2
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	b21b      	sxth	r3, r3
 80063c6:	021b      	lsls	r3, r3, #8
 80063c8:	b21b      	sxth	r3, r3
 80063ca:	430b      	orrs	r3, r1
 80063cc:	b21b      	sxth	r3, r3
 80063ce:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		uint16_t z = accel[i*7+5] | (accel[i*7+6] << 8);
 80063d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063d2:	4613      	mov	r3, r2
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	1a9b      	subs	r3, r3, r2
 80063d8:	3305      	adds	r3, #5
 80063da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063dc:	4413      	add	r3, r2
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	b219      	sxth	r1, r3
 80063e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063e4:	4613      	mov	r3, r2
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	3306      	adds	r3, #6
 80063ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063ee:	4413      	add	r3, r2
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	b21b      	sxth	r3, r3
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	b21b      	sxth	r3, r3
 80063f8:	430b      	orrs	r3, r1
 80063fa:	b21b      	sxth	r3, r3
 80063fc:	857b      	strh	r3, [r7, #42]	@ 0x2a
		uint8_t nibble_x = ADPCM_Compression(x, &acc_x_state, step_size_table_16bit);
 80063fe:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8006402:	f107 0118 	add.w	r1, r7, #24
 8006406:	4a29      	ldr	r2, [pc, #164]	@ (80064ac <Compress_Sample+0x448>)
 8006408:	4618      	mov	r0, r3
 800640a:	f000 f851 	bl	80064b0 <ADPCM_Compression>
 800640e:	4603      	mov	r3, r0
 8006410:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		uint8_t nibble_y = ADPCM_Compression(y, &acc_y_state, step_size_table_16bit);
 8006414:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8006418:	f107 0114 	add.w	r1, r7, #20
 800641c:	4a23      	ldr	r2, [pc, #140]	@ (80064ac <Compress_Sample+0x448>)
 800641e:	4618      	mov	r0, r3
 8006420:	f000 f846 	bl	80064b0 <ADPCM_Compression>
 8006424:	4603      	mov	r3, r0
 8006426:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		uint8_t nibble_z = ADPCM_Compression(z, &acc_z_state, step_size_table_16bit);
 800642a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800642e:	f107 0110 	add.w	r1, r7, #16
 8006432:	4a1e      	ldr	r2, [pc, #120]	@ (80064ac <Compress_Sample+0x448>)
 8006434:	4618      	mov	r0, r3
 8006436:	f000 f83b 	bl	80064b0 <ADPCM_Compression>
 800643a:	4603      	mov	r3, r0
 800643c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		output[out_idx++] = nibble_x | (nibble_y << 4);
 8006440:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	b25a      	sxtb	r2, r3
 8006448:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 800644c:	4313      	orrs	r3, r2
 800644e:	b25a      	sxtb	r2, r3
 8006450:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006454:	1c59      	adds	r1, r3, #1
 8006456:	f8a7 1066 	strh.w	r1, [r7, #102]	@ 0x66
 800645a:	4619      	mov	r1, r3
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	440b      	add	r3, r1
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	701a      	strb	r2, [r3, #0]
		output[out_idx++] = nibble_z;
 8006464:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	f8a7 2066 	strh.w	r2, [r7, #102]	@ 0x66
 800646e:	461a      	mov	r2, r3
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	4413      	add	r3, r2
 8006474:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006478:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < ACC_FIFO_WATERMARK; i++) 
 800647a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800647c:	3301      	adds	r3, #1
 800647e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006482:	2bc7      	cmp	r3, #199	@ 0xc7
 8006484:	f77f af76 	ble.w	8006374 <Compress_Sample+0x310>
	}
	sizes.acceleration_size = out_idx - accel_start;
 8006488:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800648c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	b29b      	uxth	r3, r3
 8006492:	84bb      	strh	r3, [r7, #36]	@ 0x24

	return sizes;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	461a      	mov	r2, r3
 8006498:	f107 0320 	add.w	r3, r7, #32
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	6010      	str	r0, [r2, #0]
 80064a0:	889b      	ldrh	r3, [r3, #4]
 80064a2:	8093      	strh	r3, [r2, #4]
}
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	3768      	adds	r7, #104	@ 0x68
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	20000000 	.word	0x20000000

080064b0 <ADPCM_Compression>:

/*-----FUNZIONE DI COMPRESSIONE ADPCM-----*/
uint8_t ADPCM_Compression(int16_t sample, AdpcmState_Typedef* state, uint16_t* step_size_table) 
{
 80064b0:	b480      	push	{r7}
 80064b2:	b08b      	sub	sp, #44	@ 0x2c
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	4603      	mov	r3, r0
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	81fb      	strh	r3, [r7, #14]
    int32_t diff = (int32_t)sample - state->previous_value;
 80064be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80064c8:	1a9b      	subs	r3, r3, r2
 80064ca:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t step = step_size_table[state->step_index];
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	4413      	add	r3, r2
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	837b      	strh	r3, [r7, #26]
    uint8_t nibble = 0;
 80064dc:	2300      	movs	r3, #0
 80064de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if (diff < 0) 
 80064e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	da05      	bge.n	80064f4 <ADPCM_Compression+0x44>
	{
        nibble = 8; // Bit di segno
 80064e8:	2308      	movs	r3, #8
 80064ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        diff = -diff;
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	425b      	negs	r3, r3
 80064f2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calcola il nibble quantizzato
    uint32_t temp = (uint32_t)diff * 4;
 80064f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	617b      	str	r3, [r7, #20]
    if (temp < step) 
 80064fa:	8b7b      	ldrh	r3, [r7, #26]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d312      	bcc.n	8006528 <ADPCM_Compression+0x78>
	{
        nibble |= 0;
    } 
	else 
	{
        nibble |= (uint8_t)((temp / step > 7) ? 7 : (temp / step));
 8006502:	8b7b      	ldrh	r3, [r7, #26]
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	fbb2 f3f3 	udiv	r3, r2, r3
 800650a:	2b07      	cmp	r3, #7
 800650c:	d805      	bhi.n	800651a <ADPCM_Compression+0x6a>
 800650e:	8b7b      	ldrh	r3, [r7, #26]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	fbb2 f3f3 	udiv	r3, r2, r3
 8006516:	b25b      	sxtb	r3, r3
 8006518:	e000      	b.n	800651c <ADPCM_Compression+0x6c>
 800651a:	2307      	movs	r3, #7
 800651c:	f997 2023 	ldrsb.w	r2, [r7, #35]	@ 0x23
 8006520:	4313      	orrs	r3, r2
 8006522:	b25b      	sxtb	r3, r3
 8006524:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }

    // Ricostruisci il valore per la predizione successiva (usando solo il nibble)
    int32_t reconstructed_diff = (step * (nibble & 7)) / 4 + step / 8;
 8006528:	8b7b      	ldrh	r3, [r7, #26]
 800652a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800652e:	f002 0207 	and.w	r2, r2, #7
 8006532:	fb02 f303 	mul.w	r3, r2, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	da00      	bge.n	800653c <ADPCM_Compression+0x8c>
 800653a:	3303      	adds	r3, #3
 800653c:	109b      	asrs	r3, r3, #2
 800653e:	461a      	mov	r2, r3
 8006540:	8b7b      	ldrh	r3, [r7, #26]
 8006542:	08db      	lsrs	r3, r3, #3
 8006544:	b29b      	uxth	r3, r3
 8006546:	4413      	add	r3, r2
 8006548:	61fb      	str	r3, [r7, #28]
    if (nibble & 8) {
 800654a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <ADPCM_Compression+0xac>
        reconstructed_diff = -reconstructed_diff;
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	425b      	negs	r3, r3
 800655a:	61fb      	str	r3, [r7, #28]
    }
    
    state->previous_value += reconstructed_diff;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006562:	b29a      	uxth	r2, r3
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	b29b      	uxth	r3, r3
 8006568:	4413      	add	r3, r2
 800656a:	b29b      	uxth	r3, r3
 800656c:	b21a      	sxth	r2, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	801a      	strh	r2, [r3, #0]
    // Clamp del valore predetto
    if (state->previous_value > 32767) state->previous_value = 32767;
    if (state->previous_value < -32768) state->previous_value = -32768;

    // Aggiorna l'indice dello step
    state->step_index += index_adjustment_table[nibble & 7];
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006578:	b2da      	uxtb	r2, r3
 800657a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	4910      	ldr	r1, [pc, #64]	@ (80065c4 <ADPCM_Compression+0x114>)
 8006584:	56cb      	ldrsb	r3, [r1, r3]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	4413      	add	r3, r2
 800658a:	b2db      	uxtb	r3, r3
 800658c:	b25a      	sxtb	r2, r3
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	709a      	strb	r2, [r3, #2]
    if (state->step_index < 0) state->step_index = 0;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006598:	2b00      	cmp	r3, #0
 800659a:	da02      	bge.n	80065a2 <ADPCM_Compression+0xf2>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2200      	movs	r2, #0
 80065a0:	709a      	strb	r2, [r3, #2]
    if (state->step_index > 87) state->step_index = 87;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80065a8:	2b57      	cmp	r3, #87	@ 0x57
 80065aa:	dd02      	ble.n	80065b2 <ADPCM_Compression+0x102>
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2257      	movs	r2, #87	@ 0x57
 80065b0:	709a      	strb	r2, [r3, #2]

    return nibble;
 80065b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	372c      	adds	r7, #44	@ 0x2c
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	20000160 	.word	0x20000160

080065c8 <Apply_Config>:


/*-----APPLICA VALORI CONFIGURAZIONE-----*/
void Apply_Config(void)
{
 80065c8:	b590      	push	{r4, r7, lr}
 80065ca:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
	FIL config_file;
	UINT bytes_written;
	
	if(strcmp(cfg_var, "DEVICE_ID") == 0) 
 80065d2:	49af      	ldr	r1, [pc, #700]	@ (8006890 <Apply_Config+0x2c8>)
 80065d4:	48af      	ldr	r0, [pc, #700]	@ (8006894 <Apply_Config+0x2cc>)
 80065d6:	f7f9 fdfb 	bl	80001d0 <strcmp>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d107      	bne.n	80065f0 <Apply_Config+0x28>
	{
		config.device_id = (uint8_t)atoi(new_cfg_val);
 80065e0:	48ad      	ldr	r0, [pc, #692]	@ (8006898 <Apply_Config+0x2d0>)
 80065e2:	f00f fb5b 	bl	8015c9c <atoi>
 80065e6:	4603      	mov	r3, r0
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	4bac      	ldr	r3, [pc, #688]	@ (800689c <Apply_Config+0x2d4>)
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	e11e      	b.n	800682e <Apply_Config+0x266>
    }
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 80065f0:	49ab      	ldr	r1, [pc, #684]	@ (80068a0 <Apply_Config+0x2d8>)
 80065f2:	48a8      	ldr	r0, [pc, #672]	@ (8006894 <Apply_Config+0x2cc>)
 80065f4:	f7f9 fdec 	bl	80001d0 <strcmp>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d132      	bne.n	8006664 <Apply_Config+0x9c>
	{
		if((uint16_t)atoi(new_cfg_val) != 800 && (uint16_t)atoi(new_cfg_val) != 1600)
 80065fe:	48a6      	ldr	r0, [pc, #664]	@ (8006898 <Apply_Config+0x2d0>)
 8006600:	f00f fb4c 	bl	8015c9c <atoi>
 8006604:	4603      	mov	r3, r0
 8006606:	b29b      	uxth	r3, r3
 8006608:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800660c:	d008      	beq.n	8006620 <Apply_Config+0x58>
 800660e:	48a2      	ldr	r0, [pc, #648]	@ (8006898 <Apply_Config+0x2d0>)
 8006610:	f00f fb44 	bl	8015c9c <atoi>
 8006614:	4603      	mov	r3, r0
 8006616:	b29b      	uxth	r3, r3
 8006618:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800661c:	f040 8131 	bne.w	8006882 <Apply_Config+0x2ba>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 8006620:	4b9e      	ldr	r3, [pc, #632]	@ (800689c <Apply_Config+0x2d4>)
 8006622:	885b      	ldrh	r3, [r3, #2]
 8006624:	4a9f      	ldr	r2, [pc, #636]	@ (80068a4 <Apply_Config+0x2dc>)
 8006626:	fba2 2303 	umull	r2, r3, r2, r3
 800662a:	099b      	lsrs	r3, r3, #6
 800662c:	b29b      	uxth	r3, r3
 800662e:	461a      	mov	r2, r3
 8006630:	4b9a      	ldr	r3, [pc, #616]	@ (800689c <Apply_Config+0x2d4>)
 8006632:	791b      	ldrb	r3, [r3, #4]
 8006634:	fb02 f303 	mul.w	r3, r2, r3
 8006638:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800663c:	fb02 f303 	mul.w	r3, r2, r3
 8006640:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	461c      	mov	r4, r3
 8006648:	f000 fd08 	bl	800705c <psram_get_size>
 800664c:	4603      	mov	r3, r0
 800664e:	429c      	cmp	r4, r3
 8006650:	f240 80ed 	bls.w	800682e <Apply_Config+0x266>
			{
				config.samp_freq = (uint16_t)atoi(new_cfg_val);
 8006654:	4890      	ldr	r0, [pc, #576]	@ (8006898 <Apply_Config+0x2d0>)
 8006656:	f00f fb21 	bl	8015c9c <atoi>
 800665a:	4603      	mov	r3, r0
 800665c:	b29a      	uxth	r2, r3
 800665e:	4b8f      	ldr	r3, [pc, #572]	@ (800689c <Apply_Config+0x2d4>)
 8006660:	805a      	strh	r2, [r3, #2]
 8006662:	e0e4      	b.n	800682e <Apply_Config+0x266>
			}
		}
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8006664:	4990      	ldr	r1, [pc, #576]	@ (80068a8 <Apply_Config+0x2e0>)
 8006666:	488b      	ldr	r0, [pc, #556]	@ (8006894 <Apply_Config+0x2cc>)
 8006668:	f7f9 fdb2 	bl	80001d0 <strcmp>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d131      	bne.n	80066d6 <Apply_Config+0x10e>
	{
		if((uint8_t)atoi(new_cfg_val) < 5 || (uint8_t)atoi(new_cfg_val) > 30)
 8006672:	4889      	ldr	r0, [pc, #548]	@ (8006898 <Apply_Config+0x2d0>)
 8006674:	f00f fb12 	bl	8015c9c <atoi>
 8006678:	4603      	mov	r3, r0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b04      	cmp	r3, #4
 800667e:	f240 8102 	bls.w	8006886 <Apply_Config+0x2be>
 8006682:	4885      	ldr	r0, [pc, #532]	@ (8006898 <Apply_Config+0x2d0>)
 8006684:	f00f fb0a 	bl	8015c9c <atoi>
 8006688:	4603      	mov	r3, r0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b1e      	cmp	r3, #30
 800668e:	f200 80fa 	bhi.w	8006886 <Apply_Config+0x2be>
		{
			return;
		}
		else
		{
			if(((config.samp_freq / ACC_FIFO_WATERMARK) * config.buffering_secs * SAVING_BUFFER_LEN) * 2 > psram_get_size()) 
 8006692:	4b82      	ldr	r3, [pc, #520]	@ (800689c <Apply_Config+0x2d4>)
 8006694:	885b      	ldrh	r3, [r3, #2]
 8006696:	4a83      	ldr	r2, [pc, #524]	@ (80068a4 <Apply_Config+0x2dc>)
 8006698:	fba2 2303 	umull	r2, r3, r2, r3
 800669c:	099b      	lsrs	r3, r3, #6
 800669e:	b29b      	uxth	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	4b7e      	ldr	r3, [pc, #504]	@ (800689c <Apply_Config+0x2d4>)
 80066a4:	791b      	ldrb	r3, [r3, #4]
 80066a6:	fb02 f303 	mul.w	r3, r2, r3
 80066aa:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80066ae:	fb02 f303 	mul.w	r3, r2, r3
 80066b2:	f503 63b4 	add.w	r3, r3, #1440	@ 0x5a0
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	461c      	mov	r4, r3
 80066ba:	f000 fccf 	bl	800705c <psram_get_size>
 80066be:	4603      	mov	r3, r0
 80066c0:	429c      	cmp	r4, r3
 80066c2:	f240 80b4 	bls.w	800682e <Apply_Config+0x266>
			{
				config.buffering_secs = (uint8_t)atoi(new_cfg_val);
 80066c6:	4874      	ldr	r0, [pc, #464]	@ (8006898 <Apply_Config+0x2d0>)
 80066c8:	f00f fae8 	bl	8015c9c <atoi>
 80066cc:	4603      	mov	r3, r0
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	4b72      	ldr	r3, [pc, #456]	@ (800689c <Apply_Config+0x2d4>)
 80066d2:	711a      	strb	r2, [r3, #4]
 80066d4:	e0ab      	b.n	800682e <Apply_Config+0x266>
			}
		}
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 80066d6:	4975      	ldr	r1, [pc, #468]	@ (80068ac <Apply_Config+0x2e4>)
 80066d8:	486e      	ldr	r0, [pc, #440]	@ (8006894 <Apply_Config+0x2cc>)
 80066da:	f7f9 fd79 	bl	80001d0 <strcmp>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d107      	bne.n	80066f4 <Apply_Config+0x12c>
	{
		config.connection_timeout = (uint32_t)atoi(new_cfg_val);
 80066e4:	486c      	ldr	r0, [pc, #432]	@ (8006898 <Apply_Config+0x2d0>)
 80066e6:	f00f fad9 	bl	8015c9c <atoi>
 80066ea:	4603      	mov	r3, r0
 80066ec:	461a      	mov	r2, r3
 80066ee:	4b6b      	ldr	r3, [pc, #428]	@ (800689c <Apply_Config+0x2d4>)
 80066f0:	609a      	str	r2, [r3, #8]
 80066f2:	e09c      	b.n	800682e <Apply_Config+0x266>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 80066f4:	496e      	ldr	r1, [pc, #440]	@ (80068b0 <Apply_Config+0x2e8>)
 80066f6:	4867      	ldr	r0, [pc, #412]	@ (8006894 <Apply_Config+0x2cc>)
 80066f8:	f7f9 fd6a 	bl	80001d0 <strcmp>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d107      	bne.n	8006712 <Apply_Config+0x14a>
	{
		config.hammer_th = (uint16_t)atoi(new_cfg_val);
 8006702:	4865      	ldr	r0, [pc, #404]	@ (8006898 <Apply_Config+0x2d0>)
 8006704:	f00f faca 	bl	8015c9c <atoi>
 8006708:	4603      	mov	r3, r0
 800670a:	b29a      	uxth	r2, r3
 800670c:	4b63      	ldr	r3, [pc, #396]	@ (800689c <Apply_Config+0x2d4>)
 800670e:	819a      	strh	r2, [r3, #12]
 8006710:	e08d      	b.n	800682e <Apply_Config+0x266>
	}
    else if(strcmp(cfg_var, "HIGH_TH") == 0) 
 8006712:	4968      	ldr	r1, [pc, #416]	@ (80068b4 <Apply_Config+0x2ec>)
 8006714:	485f      	ldr	r0, [pc, #380]	@ (8006894 <Apply_Config+0x2cc>)
 8006716:	f7f9 fd5b 	bl	80001d0 <strcmp>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d116      	bne.n	800674e <Apply_Config+0x186>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 8006720:	4b65      	ldr	r3, [pc, #404]	@ (80068b8 <Apply_Config+0x2f0>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	f2c0 8082 	blt.w	800682e <Apply_Config+0x266>
 800672a:	4b63      	ldr	r3, [pc, #396]	@ (80068b8 <Apply_Config+0x2f0>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b17      	cmp	r3, #23
 8006730:	dc7d      	bgt.n	800682e <Apply_Config+0x266>
		{
            config.high_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 8006732:	4859      	ldr	r0, [pc, #356]	@ (8006898 <Apply_Config+0x2d0>)
 8006734:	f00f fab2 	bl	8015c9c <atoi>
 8006738:	4602      	mov	r2, r0
 800673a:	4b5f      	ldr	r3, [pc, #380]	@ (80068b8 <Apply_Config+0x2f0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	b291      	uxth	r1, r2
 8006740:	4a56      	ldr	r2, [pc, #344]	@ (800689c <Apply_Config+0x2d4>)
 8006742:	331c      	adds	r3, #28
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	4413      	add	r3, r2
 8006748:	460a      	mov	r2, r1
 800674a:	80da      	strh	r2, [r3, #6]
 800674c:	e06f      	b.n	800682e <Apply_Config+0x266>
        }
    }
    else if(strcmp(cfg_var, "LOW_TH") == 0) 
 800674e:	495b      	ldr	r1, [pc, #364]	@ (80068bc <Apply_Config+0x2f4>)
 8006750:	4850      	ldr	r0, [pc, #320]	@ (8006894 <Apply_Config+0x2cc>)
 8006752:	f7f9 fd3d 	bl	80001d0 <strcmp>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d115      	bne.n	8006788 <Apply_Config+0x1c0>
	{
        if(cfg_idx >= 0 && cfg_idx < 24) 
 800675c:	4b56      	ldr	r3, [pc, #344]	@ (80068b8 <Apply_Config+0x2f0>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	db64      	blt.n	800682e <Apply_Config+0x266>
 8006764:	4b54      	ldr	r3, [pc, #336]	@ (80068b8 <Apply_Config+0x2f0>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b17      	cmp	r3, #23
 800676a:	dc60      	bgt.n	800682e <Apply_Config+0x266>
		{
            config.low_th[cfg_idx] = (uint16_t)atoi(new_cfg_val);
 800676c:	484a      	ldr	r0, [pc, #296]	@ (8006898 <Apply_Config+0x2d0>)
 800676e:	f00f fa95 	bl	8015c9c <atoi>
 8006772:	4602      	mov	r2, r0
 8006774:	4b50      	ldr	r3, [pc, #320]	@ (80068b8 <Apply_Config+0x2f0>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	b291      	uxth	r1, r2
 800677a:	4a48      	ldr	r2, [pc, #288]	@ (800689c <Apply_Config+0x2d4>)
 800677c:	3304      	adds	r3, #4
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	4413      	add	r3, r2
 8006782:	460a      	mov	r2, r1
 8006784:	80da      	strh	r2, [r3, #6]
 8006786:	e052      	b.n	800682e <Apply_Config+0x266>
        }
    }
    else if(strcmp(cfg_var, "DATA_TOPIC") == 0) 
 8006788:	494d      	ldr	r1, [pc, #308]	@ (80068c0 <Apply_Config+0x2f8>)
 800678a:	4842      	ldr	r0, [pc, #264]	@ (8006894 <Apply_Config+0x2cc>)
 800678c:	f7f9 fd20 	bl	80001d0 <strcmp>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10d      	bne.n	80067b2 <Apply_Config+0x1ea>
	{
        strncpy(config.data_topic, new_cfg_val, sizeof(config.data_topic) - 1);
 8006796:	223f      	movs	r2, #63	@ 0x3f
 8006798:	493f      	ldr	r1, [pc, #252]	@ (8006898 <Apply_Config+0x2d0>)
 800679a:	484a      	ldr	r0, [pc, #296]	@ (80068c4 <Apply_Config+0x2fc>)
 800679c:	f00f fb8f 	bl	8015ebe <strncpy>
        config.data_topic[sizeof(config.data_topic) - 1] = '\0';
 80067a0:	4b3e      	ldr	r3, [pc, #248]	@ (800689c <Apply_Config+0x2d4>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
		strcpy(sys.MQTT.Data_Topic, config.data_topic);
 80067a8:	4946      	ldr	r1, [pc, #280]	@ (80068c4 <Apply_Config+0x2fc>)
 80067aa:	4847      	ldr	r0, [pc, #284]	@ (80068c8 <Apply_Config+0x300>)
 80067ac:	f00f fbdc 	bl	8015f68 <strcpy>
 80067b0:	e03d      	b.n	800682e <Apply_Config+0x266>
    }
    else if(strcmp(cfg_var, "CMD_TOPIC") == 0) 
 80067b2:	4946      	ldr	r1, [pc, #280]	@ (80068cc <Apply_Config+0x304>)
 80067b4:	4837      	ldr	r0, [pc, #220]	@ (8006894 <Apply_Config+0x2cc>)
 80067b6:	f7f9 fd0b 	bl	80001d0 <strcmp>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10d      	bne.n	80067dc <Apply_Config+0x214>
	{
        strncpy(config.command_topic, new_cfg_val, sizeof(config.command_topic) - 1);
 80067c0:	223f      	movs	r2, #63	@ 0x3f
 80067c2:	4935      	ldr	r1, [pc, #212]	@ (8006898 <Apply_Config+0x2d0>)
 80067c4:	4842      	ldr	r0, [pc, #264]	@ (80068d0 <Apply_Config+0x308>)
 80067c6:	f00f fb7a 	bl	8015ebe <strncpy>
        config.command_topic[sizeof(config.command_topic) - 1] = '\0';
 80067ca:	4b34      	ldr	r3, [pc, #208]	@ (800689c <Apply_Config+0x2d4>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
		strcpy(sys.MQTT.Command_Topic, config.command_topic);
 80067d2:	493f      	ldr	r1, [pc, #252]	@ (80068d0 <Apply_Config+0x308>)
 80067d4:	483f      	ldr	r0, [pc, #252]	@ (80068d4 <Apply_Config+0x30c>)
 80067d6:	f00f fbc7 	bl	8015f68 <strcpy>
 80067da:	e028      	b.n	800682e <Apply_Config+0x266>
    }
	else if(strcmp(cfg_var, "INFO_TOPIC") == 0)
 80067dc:	493e      	ldr	r1, [pc, #248]	@ (80068d8 <Apply_Config+0x310>)
 80067de:	482d      	ldr	r0, [pc, #180]	@ (8006894 <Apply_Config+0x2cc>)
 80067e0:	f7f9 fcf6 	bl	80001d0 <strcmp>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10d      	bne.n	8006806 <Apply_Config+0x23e>
	{
		strncpy(config.info_topic, new_cfg_val, sizeof(config.info_topic) - 1);
 80067ea:	223f      	movs	r2, #63	@ 0x3f
 80067ec:	492a      	ldr	r1, [pc, #168]	@ (8006898 <Apply_Config+0x2d0>)
 80067ee:	483b      	ldr	r0, [pc, #236]	@ (80068dc <Apply_Config+0x314>)
 80067f0:	f00f fb65 	bl	8015ebe <strncpy>
		config.info_topic[sizeof(config.info_topic) - 1] = '\0';
 80067f4:	4b29      	ldr	r3, [pc, #164]	@ (800689c <Apply_Config+0x2d4>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 216d 	strb.w	r2, [r3, #365]	@ 0x16d
		strcpy(sys.MQTT.Info_Topic, config.info_topic);
 80067fc:	4937      	ldr	r1, [pc, #220]	@ (80068dc <Apply_Config+0x314>)
 80067fe:	4838      	ldr	r0, [pc, #224]	@ (80068e0 <Apply_Config+0x318>)
 8006800:	f00f fbb2 	bl	8015f68 <strcpy>
 8006804:	e013      	b.n	800682e <Apply_Config+0x266>
	}
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 8006806:	4937      	ldr	r1, [pc, #220]	@ (80068e4 <Apply_Config+0x31c>)
 8006808:	4822      	ldr	r0, [pc, #136]	@ (8006894 <Apply_Config+0x2cc>)
 800680a:	f7f9 fce1 	bl	80001d0 <strcmp>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d13a      	bne.n	800688a <Apply_Config+0x2c2>
	{
		strncpy(config.ota_topic, new_cfg_val, sizeof(config.ota_topic) - 1);
 8006814:	223f      	movs	r2, #63	@ 0x3f
 8006816:	4920      	ldr	r1, [pc, #128]	@ (8006898 <Apply_Config+0x2d0>)
 8006818:	4833      	ldr	r0, [pc, #204]	@ (80068e8 <Apply_Config+0x320>)
 800681a:	f00f fb50 	bl	8015ebe <strncpy>
		config.ota_topic[sizeof(config.ota_topic) - 1] = '\0';
 800681e:	4b1f      	ldr	r3, [pc, #124]	@ (800689c <Apply_Config+0x2d4>)
 8006820:	2200      	movs	r2, #0
 8006822:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
		strcpy(sys.MQTT.OTA_Topic, config.ota_topic);
 8006826:	4930      	ldr	r1, [pc, #192]	@ (80068e8 <Apply_Config+0x320>)
 8006828:	4830      	ldr	r0, [pc, #192]	@ (80068ec <Apply_Config+0x324>)
 800682a:	f00f fb9d 	bl	8015f68 <strcpy>
	else
	{
		return;
	}

	if (f_open(&config_file, CONFIG_FILE, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK)
 800682e:	f107 0310 	add.w	r3, r7, #16
 8006832:	3b08      	subs	r3, #8
 8006834:	220a      	movs	r2, #10
 8006836:	492e      	ldr	r1, [pc, #184]	@ (80068f0 <Apply_Config+0x328>)
 8006838:	4618      	mov	r0, r3
 800683a:	f002 ff4f 	bl	80096dc <f_open>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d157      	bne.n	80068f4 <Apply_Config+0x32c>
	{
		f_write(&config_file, &config, sizeof(config), &bytes_written);
 8006844:	f107 0310 	add.w	r3, r7, #16
 8006848:	3b0c      	subs	r3, #12
 800684a:	f107 0010 	add.w	r0, r7, #16
 800684e:	3808      	subs	r0, #8
 8006850:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8006854:	4911      	ldr	r1, [pc, #68]	@ (800689c <Apply_Config+0x2d4>)
 8006856:	f003 fa2c 	bl	8009cb2 <f_write>
		f_close(&config_file);
 800685a:	f107 0310 	add.w	r3, r7, #16
 800685e:	3b08      	subs	r3, #8
 8006860:	4618      	mov	r0, r3
 8006862:	f003 fc2f 	bl	800a0c4 <f_close>
	else
	{
		return;
	}
	
	memset(cfg_var, 0, sizeof(cfg_var));
 8006866:	2214      	movs	r2, #20
 8006868:	2100      	movs	r1, #0
 800686a:	480a      	ldr	r0, [pc, #40]	@ (8006894 <Apply_Config+0x2cc>)
 800686c:	f00f fb00 	bl	8015e70 <memset>
	cfg_idx = 0;
 8006870:	4b11      	ldr	r3, [pc, #68]	@ (80068b8 <Apply_Config+0x2f0>)
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8006876:	220a      	movs	r2, #10
 8006878:	2100      	movs	r1, #0
 800687a:	4807      	ldr	r0, [pc, #28]	@ (8006898 <Apply_Config+0x2d0>)
 800687c:	f00f faf8 	bl	8015e70 <memset>
 8006880:	e039      	b.n	80068f6 <Apply_Config+0x32e>
			return;
 8006882:	bf00      	nop
 8006884:	e037      	b.n	80068f6 <Apply_Config+0x32e>
			return;
 8006886:	bf00      	nop
 8006888:	e035      	b.n	80068f6 <Apply_Config+0x32e>
		return;
 800688a:	bf00      	nop
 800688c:	e033      	b.n	80068f6 <Apply_Config+0x32e>
 800688e:	bf00      	nop
 8006890:	0801747c 	.word	0x0801747c
 8006894:	20005cc4 	.word	0x20005cc4
 8006898:	20005cdc 	.word	0x20005cdc
 800689c:	20001c6c 	.word	0x20001c6c
 80068a0:	08017488 	.word	0x08017488
 80068a4:	51eb851f 	.word	0x51eb851f
 80068a8:	08017494 	.word	0x08017494
 80068ac:	080174a0 	.word	0x080174a0
 80068b0:	080174b0 	.word	0x080174b0
 80068b4:	080174bc 	.word	0x080174bc
 80068b8:	20005cd8 	.word	0x20005cd8
 80068bc:	080174c4 	.word	0x080174c4
 80068c0:	080174cc 	.word	0x080174cc
 80068c4:	20001cda 	.word	0x20001cda
 80068c8:	20001a10 	.word	0x20001a10
 80068cc:	080174d8 	.word	0x080174d8
 80068d0:	20001d1a 	.word	0x20001d1a
 80068d4:	20001a74 	.word	0x20001a74
 80068d8:	080174e4 	.word	0x080174e4
 80068dc:	20001d9a 	.word	0x20001d9a
 80068e0:	20001b3c 	.word	0x20001b3c
 80068e4:	080174f0 	.word	0x080174f0
 80068e8:	20001d5a 	.word	0x20001d5a
 80068ec:	20001ad8 	.word	0x20001ad8
 80068f0:	080174fc 	.word	0x080174fc
		return;
 80068f4:	bf00      	nop
}
 80068f6:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd90      	pop	{r4, r7, pc}

08006900 <Get_Config>:

/*-----RECUPERO E INVIO VALORE DI CONFIGURAZIONE-----*/
void Get_Config(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b0a2      	sub	sp, #136	@ 0x88
 8006904:	af00      	add	r7, sp, #0
	char value_str[128] = {0};
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	2280      	movs	r2, #128	@ 0x80
 800690a:	2100      	movs	r1, #0
 800690c:	4618      	mov	r0, r3
 800690e:	f00f faaf 	bl	8015e70 <memset>
	const char* topic = sys.MQTT.Info_Topic;
 8006912:	4b70      	ldr	r3, [pc, #448]	@ (8006ad4 <Get_Config+0x1d4>)
 8006914:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	if(strcmp(cfg_var, "DEVICE_ID") == 0)
 8006918:	496f      	ldr	r1, [pc, #444]	@ (8006ad8 <Get_Config+0x1d8>)
 800691a:	4870      	ldr	r0, [pc, #448]	@ (8006adc <Get_Config+0x1dc>)
 800691c:	f7f9 fc58 	bl	80001d0 <strcmp>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d108      	bne.n	8006938 <Get_Config+0x38>
	{
		sprintf(value_str, "%u", config.device_id);
 8006926:	4b6e      	ldr	r3, [pc, #440]	@ (8006ae0 <Get_Config+0x1e0>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	1d3b      	adds	r3, r7, #4
 800692e:	496d      	ldr	r1, [pc, #436]	@ (8006ae4 <Get_Config+0x1e4>)
 8006930:	4618      	mov	r0, r3
 8006932:	f00f fa3d 	bl	8015db0 <siprintf>
 8006936:	e0b6      	b.n	8006aa6 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "SAMP_FREQ") == 0)
 8006938:	496b      	ldr	r1, [pc, #428]	@ (8006ae8 <Get_Config+0x1e8>)
 800693a:	4868      	ldr	r0, [pc, #416]	@ (8006adc <Get_Config+0x1dc>)
 800693c:	f7f9 fc48 	bl	80001d0 <strcmp>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d108      	bne.n	8006958 <Get_Config+0x58>
	{
		sprintf(value_str, "%u", config.samp_freq);
 8006946:	4b66      	ldr	r3, [pc, #408]	@ (8006ae0 <Get_Config+0x1e0>)
 8006948:	885b      	ldrh	r3, [r3, #2]
 800694a:	461a      	mov	r2, r3
 800694c:	1d3b      	adds	r3, r7, #4
 800694e:	4965      	ldr	r1, [pc, #404]	@ (8006ae4 <Get_Config+0x1e4>)
 8006950:	4618      	mov	r0, r3
 8006952:	f00f fa2d 	bl	8015db0 <siprintf>
 8006956:	e0a6      	b.n	8006aa6 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "BUFFER_SECS") == 0)
 8006958:	4964      	ldr	r1, [pc, #400]	@ (8006aec <Get_Config+0x1ec>)
 800695a:	4860      	ldr	r0, [pc, #384]	@ (8006adc <Get_Config+0x1dc>)
 800695c:	f7f9 fc38 	bl	80001d0 <strcmp>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d108      	bne.n	8006978 <Get_Config+0x78>
	{
		sprintf(value_str, "%u", config.buffering_secs);
 8006966:	4b5e      	ldr	r3, [pc, #376]	@ (8006ae0 <Get_Config+0x1e0>)
 8006968:	791b      	ldrb	r3, [r3, #4]
 800696a:	461a      	mov	r2, r3
 800696c:	1d3b      	adds	r3, r7, #4
 800696e:	495d      	ldr	r1, [pc, #372]	@ (8006ae4 <Get_Config+0x1e4>)
 8006970:	4618      	mov	r0, r3
 8006972:	f00f fa1d 	bl	8015db0 <siprintf>
 8006976:	e096      	b.n	8006aa6 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "CONN_TIMEOUT") == 0)
 8006978:	495d      	ldr	r1, [pc, #372]	@ (8006af0 <Get_Config+0x1f0>)
 800697a:	4858      	ldr	r0, [pc, #352]	@ (8006adc <Get_Config+0x1dc>)
 800697c:	f7f9 fc28 	bl	80001d0 <strcmp>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d107      	bne.n	8006996 <Get_Config+0x96>
	{
		sprintf(value_str, "%lu", config.connection_timeout);
 8006986:	4b56      	ldr	r3, [pc, #344]	@ (8006ae0 <Get_Config+0x1e0>)
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	1d3b      	adds	r3, r7, #4
 800698c:	4959      	ldr	r1, [pc, #356]	@ (8006af4 <Get_Config+0x1f4>)
 800698e:	4618      	mov	r0, r3
 8006990:	f00f fa0e 	bl	8015db0 <siprintf>
 8006994:	e087      	b.n	8006aa6 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "HAMMER_TH") == 0)
 8006996:	4958      	ldr	r1, [pc, #352]	@ (8006af8 <Get_Config+0x1f8>)
 8006998:	4850      	ldr	r0, [pc, #320]	@ (8006adc <Get_Config+0x1dc>)
 800699a:	f7f9 fc19 	bl	80001d0 <strcmp>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d108      	bne.n	80069b6 <Get_Config+0xb6>
	{
		sprintf(value_str, "%u", config.hammer_th);
 80069a4:	4b4e      	ldr	r3, [pc, #312]	@ (8006ae0 <Get_Config+0x1e0>)
 80069a6:	899b      	ldrh	r3, [r3, #12]
 80069a8:	461a      	mov	r2, r3
 80069aa:	1d3b      	adds	r3, r7, #4
 80069ac:	494d      	ldr	r1, [pc, #308]	@ (8006ae4 <Get_Config+0x1e4>)
 80069ae:	4618      	mov	r0, r3
 80069b0:	f00f f9fe 	bl	8015db0 <siprintf>
 80069b4:	e077      	b.n	8006aa6 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "HIGH_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 80069b6:	4951      	ldr	r1, [pc, #324]	@ (8006afc <Get_Config+0x1fc>)
 80069b8:	4848      	ldr	r0, [pc, #288]	@ (8006adc <Get_Config+0x1dc>)
 80069ba:	f7f9 fc09 	bl	80001d0 <strcmp>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d115      	bne.n	80069f0 <Get_Config+0xf0>
 80069c4:	4b4e      	ldr	r3, [pc, #312]	@ (8006b00 <Get_Config+0x200>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	db11      	blt.n	80069f0 <Get_Config+0xf0>
 80069cc:	4b4c      	ldr	r3, [pc, #304]	@ (8006b00 <Get_Config+0x200>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b17      	cmp	r3, #23
 80069d2:	dc0d      	bgt.n	80069f0 <Get_Config+0xf0>
	{
		sprintf(value_str, "%u", config.high_th[cfg_idx]);
 80069d4:	4b4a      	ldr	r3, [pc, #296]	@ (8006b00 <Get_Config+0x200>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a41      	ldr	r2, [pc, #260]	@ (8006ae0 <Get_Config+0x1e0>)
 80069da:	331c      	adds	r3, #28
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	4413      	add	r3, r2
 80069e0:	88db      	ldrh	r3, [r3, #6]
 80069e2:	461a      	mov	r2, r3
 80069e4:	1d3b      	adds	r3, r7, #4
 80069e6:	493f      	ldr	r1, [pc, #252]	@ (8006ae4 <Get_Config+0x1e4>)
 80069e8:	4618      	mov	r0, r3
 80069ea:	f00f f9e1 	bl	8015db0 <siprintf>
 80069ee:	e05a      	b.n	8006aa6 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "LOW_TH") == 0 && cfg_idx >= 0 && cfg_idx < 24)
 80069f0:	4944      	ldr	r1, [pc, #272]	@ (8006b04 <Get_Config+0x204>)
 80069f2:	483a      	ldr	r0, [pc, #232]	@ (8006adc <Get_Config+0x1dc>)
 80069f4:	f7f9 fbec 	bl	80001d0 <strcmp>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d115      	bne.n	8006a2a <Get_Config+0x12a>
 80069fe:	4b40      	ldr	r3, [pc, #256]	@ (8006b00 <Get_Config+0x200>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	db11      	blt.n	8006a2a <Get_Config+0x12a>
 8006a06:	4b3e      	ldr	r3, [pc, #248]	@ (8006b00 <Get_Config+0x200>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b17      	cmp	r3, #23
 8006a0c:	dc0d      	bgt.n	8006a2a <Get_Config+0x12a>
	{
		sprintf(value_str, "%u", config.low_th[cfg_idx]);
 8006a0e:	4b3c      	ldr	r3, [pc, #240]	@ (8006b00 <Get_Config+0x200>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a33      	ldr	r2, [pc, #204]	@ (8006ae0 <Get_Config+0x1e0>)
 8006a14:	3304      	adds	r3, #4
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	4413      	add	r3, r2
 8006a1a:	88db      	ldrh	r3, [r3, #6]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	1d3b      	adds	r3, r7, #4
 8006a20:	4930      	ldr	r1, [pc, #192]	@ (8006ae4 <Get_Config+0x1e4>)
 8006a22:	4618      	mov	r0, r3
 8006a24:	f00f f9c4 	bl	8015db0 <siprintf>
 8006a28:	e03d      	b.n	8006aa6 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "DATA_TOPIC") == 0)
 8006a2a:	4937      	ldr	r1, [pc, #220]	@ (8006b08 <Get_Config+0x208>)
 8006a2c:	482b      	ldr	r0, [pc, #172]	@ (8006adc <Get_Config+0x1dc>)
 8006a2e:	f7f9 fbcf 	bl	80001d0 <strcmp>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d106      	bne.n	8006a46 <Get_Config+0x146>
	{
		strncpy(value_str, config.data_topic, sizeof(value_str)-1);
 8006a38:	1d3b      	adds	r3, r7, #4
 8006a3a:	227f      	movs	r2, #127	@ 0x7f
 8006a3c:	4933      	ldr	r1, [pc, #204]	@ (8006b0c <Get_Config+0x20c>)
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f00f fa3d 	bl	8015ebe <strncpy>
 8006a44:	e02f      	b.n	8006aa6 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "CMD_TOPIC") == 0)
 8006a46:	4932      	ldr	r1, [pc, #200]	@ (8006b10 <Get_Config+0x210>)
 8006a48:	4824      	ldr	r0, [pc, #144]	@ (8006adc <Get_Config+0x1dc>)
 8006a4a:	f7f9 fbc1 	bl	80001d0 <strcmp>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d106      	bne.n	8006a62 <Get_Config+0x162>
	{
		strncpy(value_str, config.command_topic, sizeof(value_str)-1);
 8006a54:	1d3b      	adds	r3, r7, #4
 8006a56:	227f      	movs	r2, #127	@ 0x7f
 8006a58:	492e      	ldr	r1, [pc, #184]	@ (8006b14 <Get_Config+0x214>)
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f00f fa2f 	bl	8015ebe <strncpy>
 8006a60:	e021      	b.n	8006aa6 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "INFO_TOPIC") == 0)
 8006a62:	492d      	ldr	r1, [pc, #180]	@ (8006b18 <Get_Config+0x218>)
 8006a64:	481d      	ldr	r0, [pc, #116]	@ (8006adc <Get_Config+0x1dc>)
 8006a66:	f7f9 fbb3 	bl	80001d0 <strcmp>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d106      	bne.n	8006a7e <Get_Config+0x17e>
	{
		strncpy(value_str, config.info_topic, sizeof(value_str)-1);
 8006a70:	1d3b      	adds	r3, r7, #4
 8006a72:	227f      	movs	r2, #127	@ 0x7f
 8006a74:	4929      	ldr	r1, [pc, #164]	@ (8006b1c <Get_Config+0x21c>)
 8006a76:	4618      	mov	r0, r3
 8006a78:	f00f fa21 	bl	8015ebe <strncpy>
 8006a7c:	e013      	b.n	8006aa6 <Get_Config+0x1a6>
	}
	else if(strcmp(cfg_var, "OTA_TOPIC") == 0)
 8006a7e:	4928      	ldr	r1, [pc, #160]	@ (8006b20 <Get_Config+0x220>)
 8006a80:	4816      	ldr	r0, [pc, #88]	@ (8006adc <Get_Config+0x1dc>)
 8006a82:	f7f9 fba5 	bl	80001d0 <strcmp>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d106      	bne.n	8006a9a <Get_Config+0x19a>
	{
		strncpy(value_str, config.ota_topic, sizeof(value_str)-1);
 8006a8c:	1d3b      	adds	r3, r7, #4
 8006a8e:	227f      	movs	r2, #127	@ 0x7f
 8006a90:	4924      	ldr	r1, [pc, #144]	@ (8006b24 <Get_Config+0x224>)
 8006a92:	4618      	mov	r0, r3
 8006a94:	f00f fa13 	bl	8015ebe <strncpy>
 8006a98:	e005      	b.n	8006aa6 <Get_Config+0x1a6>
	}
	else
	{
		strncpy(value_str, "UNKNOWN", sizeof(value_str)-1);
 8006a9a:	1d3b      	adds	r3, r7, #4
 8006a9c:	227f      	movs	r2, #127	@ 0x7f
 8006a9e:	4922      	ldr	r1, [pc, #136]	@ (8006b28 <Get_Config+0x228>)
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f00f fa0c 	bl	8015ebe <strncpy>
	}

	memset(cfg_var, 0, sizeof(cfg_var));
 8006aa6:	2214      	movs	r2, #20
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	480c      	ldr	r0, [pc, #48]	@ (8006adc <Get_Config+0x1dc>)
 8006aac:	f00f f9e0 	bl	8015e70 <memset>
	cfg_idx = 0;
 8006ab0:	4b13      	ldr	r3, [pc, #76]	@ (8006b00 <Get_Config+0x200>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
	memset(new_cfg_val, 0, sizeof(new_cfg_val));	
 8006ab6:	220a      	movs	r2, #10
 8006ab8:	2100      	movs	r1, #0
 8006aba:	481c      	ldr	r0, [pc, #112]	@ (8006b2c <Get_Config+0x22c>)
 8006abc:	f00f f9d8 	bl	8015e70 <memset>

	SIM_publish_MQTT_Message(topic, value_str);
 8006ac0:	1d3b      	adds	r3, r7, #4
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8006ac8:	f7fb fa9e 	bl	8002008 <SIM_publish_MQTT_Message>
}
 8006acc:	bf00      	nop
 8006ace:	3788      	adds	r7, #136	@ 0x88
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20001b3c 	.word	0x20001b3c
 8006ad8:	0801747c 	.word	0x0801747c
 8006adc:	20005cc4 	.word	0x20005cc4
 8006ae0:	20001c6c 	.word	0x20001c6c
 8006ae4:	08017510 	.word	0x08017510
 8006ae8:	08017488 	.word	0x08017488
 8006aec:	08017494 	.word	0x08017494
 8006af0:	080174a0 	.word	0x080174a0
 8006af4:	08017514 	.word	0x08017514
 8006af8:	080174b0 	.word	0x080174b0
 8006afc:	080174bc 	.word	0x080174bc
 8006b00:	20005cd8 	.word	0x20005cd8
 8006b04:	080174c4 	.word	0x080174c4
 8006b08:	080174cc 	.word	0x080174cc
 8006b0c:	20001cda 	.word	0x20001cda
 8006b10:	080174d8 	.word	0x080174d8
 8006b14:	20001d1a 	.word	0x20001d1a
 8006b18:	080174e4 	.word	0x080174e4
 8006b1c:	20001d9a 	.word	0x20001d9a
 8006b20:	080174f0 	.word	0x080174f0
 8006b24:	20001d5a 	.word	0x20001d5a
 8006b28:	08017518 	.word	0x08017518
 8006b2c:	20005cdc 	.word	0x20005cdc

08006b30 <Clear_Flags>:

/*-----AZZERAMENTO FLAG-----*/
void Clear_Flags(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
	memset(&sys, 0, sizeof(sys));
 8006b34:	f241 5228 	movw	r2, #5416	@ 0x1528
 8006b38:	2100      	movs	r1, #0
 8006b3a:	480c      	ldr	r0, [pc, #48]	@ (8006b6c <Clear_Flags+0x3c>)
 8006b3c:	f00f f998 	bl	8015e70 <memset>
	if(!sys.ACC_Present)
 8006b40:	4b0a      	ldr	r3, [pc, #40]	@ (8006b6c <Clear_Flags+0x3c>)
 8006b42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b46:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d109      	bne.n	8006b68 <Clear_Flags+0x38>
	{
		sys.ACC_Present = 1;
 8006b54:	4b05      	ldr	r3, [pc, #20]	@ (8006b6c <Clear_Flags+0x3c>)
 8006b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8006b60:	f043 0301 	orr.w	r3, r3, #1
 8006b64:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
	}
}
 8006b68:	bf00      	nop
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	20000740 	.word	0x20000740

08006b70 <psram_reset>:
uint32_t	psramSize = 0;
uint32_t	psramNumPages = 0;


int psram_reset()
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08e      	sub	sp, #56	@ 0x38
 8006b74:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = {0};
 8006b76:	463b      	mov	r3, r7
 8006b78:	2238      	movs	r2, #56	@ 0x38
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f00f f977 	bl	8015e70 <memset>

	sCommand.Instruction = 0x66;
 8006b82:	2366      	movs	r3, #102	@ 0x66
 8006b84:	603b      	str	r3, [r7, #0]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006b86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b8a:	61bb      	str	r3, [r7, #24]
	sCommand.AddressSize = QSPI_ADDRESS_NONE;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60fb      	str	r3, [r7, #12]
	sCommand.NbData = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006b94:	463b      	mov	r3, r7
 8006b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	480e      	ldr	r0, [pc, #56]	@ (8006bd8 <psram_reset+0x68>)
 8006b9e:	f008 f96f 	bl	800ee80 <HAL_QSPI_Command>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <psram_reset+0x3e>
	{
		return -1;
 8006ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bac:	e00f      	b.n	8006bce <psram_reset+0x5e>
	}

	sCommand.Instruction = 0x99;
 8006bae:	2399      	movs	r3, #153	@ 0x99
 8006bb0:	603b      	str	r3, [r7, #0]

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006bb2:	463b      	mov	r3, r7
 8006bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4807      	ldr	r0, [pc, #28]	@ (8006bd8 <psram_reset+0x68>)
 8006bbc:	f008 f960 	bl	800ee80 <HAL_QSPI_Command>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <psram_reset+0x5c>
	{
		return -1;
 8006bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bca:	e000      	b.n	8006bce <psram_reset+0x5e>
	}

	return 0;
 8006bcc:	2300      	movs	r3, #0

}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3738      	adds	r7, #56	@ 0x38
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	2000033c 	.word	0x2000033c

08006bdc <psram_qpi_mode>:
{
	return psramQSPI;
}

int psram_qpi_mode(uint8_t enable)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b090      	sub	sp, #64	@ 0x40
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	71fb      	strb	r3, [r7, #7]

	QSPI_CommandTypeDef sCommand = {0};
 8006be6:	f107 0308 	add.w	r3, r7, #8
 8006bea:	2238      	movs	r2, #56	@ 0x38
 8006bec:	2100      	movs	r1, #0
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f00f f93e 	bl	8015e70 <memset>

	if(!psramInitDone)return -1;
 8006bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c68 <psram_qpi_mode+0x8c>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d102      	bne.n	8006c02 <psram_qpi_mode+0x26>
 8006bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006c00:	e02d      	b.n	8006c5e <psram_qpi_mode+0x82>

	if(psramQSPI==1 && enable == 0)
 8006c02:	4b1a      	ldr	r3, [pc, #104]	@ (8006c6c <psram_qpi_mode+0x90>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d108      	bne.n	8006c1c <psram_qpi_mode+0x40>
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d105      	bne.n	8006c1c <psram_qpi_mode+0x40>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_DISABLE;
 8006c10:	23f5      	movs	r3, #245	@ 0xf5
 8006c12:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8006c14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006c18:	623b      	str	r3, [r7, #32]
 8006c1a:	e00e      	b.n	8006c3a <psram_qpi_mode+0x5e>

	}else if(psramQSPI==0 && enable == 1)
 8006c1c:	4b13      	ldr	r3, [pc, #76]	@ (8006c6c <psram_qpi_mode+0x90>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d108      	bne.n	8006c36 <psram_qpi_mode+0x5a>
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d105      	bne.n	8006c36 <psram_qpi_mode+0x5a>
	{
		sCommand.Instruction = PSRAM_CMD_QPI_ENABLE;
 8006c2a:	2335      	movs	r3, #53	@ 0x35
 8006c2c:	60bb      	str	r3, [r7, #8]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006c2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c32:	623b      	str	r3, [r7, #32]
 8006c34:	e001      	b.n	8006c3a <psram_qpi_mode+0x5e>

	}else{

		return 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	e011      	b.n	8006c5e <psram_qpi_mode+0x82>

	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006c3a:	f107 0308 	add.w	r3, r7, #8
 8006c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c42:	4619      	mov	r1, r3
 8006c44:	480a      	ldr	r0, [pc, #40]	@ (8006c70 <psram_qpi_mode+0x94>)
 8006c46:	f008 f91b 	bl	800ee80 <HAL_QSPI_Command>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d002      	beq.n	8006c56 <psram_qpi_mode+0x7a>
	{
		return -1;
 8006c50:	f04f 33ff 	mov.w	r3, #4294967295
 8006c54:	e003      	b.n	8006c5e <psram_qpi_mode+0x82>
	}

	psramQSPI = enable;
 8006c56:	4a05      	ldr	r2, [pc, #20]	@ (8006c6c <psram_qpi_mode+0x90>)
 8006c58:	79fb      	ldrb	r3, [r7, #7]
 8006c5a:	7013      	strb	r3, [r2, #0]

	return 0;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3740      	adds	r7, #64	@ 0x40
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20005ce6 	.word	0x20005ce6
 8006c6c:	20005ce7 	.word	0x20005ce7
 8006c70:	2000033c 	.word	0x2000033c

08006c74 <psram_read_id>:

int psram_read_id(uint8_t *id_data, int id_data_size)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b090      	sub	sp, #64	@ 0x40
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef sCommand = {0};
 8006c7e:	f107 0308 	add.w	r3, r7, #8
 8006c82:	2238      	movs	r2, #56	@ 0x38
 8006c84:	2100      	movs	r1, #0
 8006c86:	4618      	mov	r0, r3
 8006c88:	f00f f8f2 	bl	8015e70 <memset>

	if(id_data == NULL || id_data_size < 8)return -2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <psram_read_id+0x24>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b07      	cmp	r3, #7
 8006c96:	dc02      	bgt.n	8006c9e <psram_read_id+0x2a>
 8006c98:	f06f 0301 	mvn.w	r3, #1
 8006c9c:	e034      	b.n	8006d08 <psram_read_id+0x94>

	sCommand.Instruction = 0x9F;
 8006c9e:	239f      	movs	r3, #159	@ 0x9f
 8006ca0:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006ca2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006ca6:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006cac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006cb0:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8006cb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cb6:	627b      	str	r3, [r7, #36]	@ 0x24
	sCommand.DataMode    = QSPI_DATA_1_LINE;
 8006cb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sCommand.NbData = 8;
 8006cbe:	2308      	movs	r3, #8
 8006cc0:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	637b      	str	r3, [r7, #52]	@ 0x34
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006cd2:	f107 0308 	add.w	r3, r7, #8
 8006cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cda:	4619      	mov	r1, r3
 8006cdc:	480c      	ldr	r0, [pc, #48]	@ (8006d10 <psram_read_id+0x9c>)
 8006cde:	f008 f8cf 	bl	800ee80 <HAL_QSPI_Command>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <psram_read_id+0x7a>
	{
		return -1;
 8006ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cec:	e00c      	b.n	8006d08 <psram_read_id+0x94>
	}

	if (HAL_QSPI_Receive(PSRAM_SPI, id_data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cf2:	6879      	ldr	r1, [r7, #4]
 8006cf4:	4806      	ldr	r0, [pc, #24]	@ (8006d10 <psram_read_id+0x9c>)
 8006cf6:	f008 f9b8 	bl	800f06a <HAL_QSPI_Receive>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <psram_read_id+0x92>
	{
		return -1;
 8006d00:	f04f 33ff 	mov.w	r3, #4294967295
 8006d04:	e000      	b.n	8006d08 <psram_read_id+0x94>
	}


	return 0;
 8006d06:	2300      	movs	r3, #0

}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3740      	adds	r7, #64	@ 0x40
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	2000033c 	.word	0x2000033c

08006d14 <psram_internal_read_write>:

int psram_internal_read_write(uint8_t write, uint32_t address, uint16_t nbytes, uint8_t *pBuffer)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b092      	sub	sp, #72	@ 0x48
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	607b      	str	r3, [r7, #4]
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73fb      	strb	r3, [r7, #15]
 8006d22:	4613      	mov	r3, r2
 8006d24:	81bb      	strh	r3, [r7, #12]

	QSPI_CommandTypeDef sCommand = {0};
 8006d26:	f107 0310 	add.w	r3, r7, #16
 8006d2a:	2238      	movs	r2, #56	@ 0x38
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f00f f89e 	bl	8015e70 <memset>

	sCommand.Address = address;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	617b      	str	r3, [r7, #20]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	633b      	str	r3, [r7, #48]	@ 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006d40:	2300      	movs	r3, #0
 8006d42:	643b      	str	r3, [r7, #64]	@ 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006d44:	2300      	movs	r3, #0
 8006d46:	647b      	str	r3, [r7, #68]	@ 0x44
	sCommand.NbData = nbytes;
 8006d48:	89bb      	ldrh	r3, [r7, #12]
 8006d4a:	63bb      	str	r3, [r7, #56]	@ 0x38

	if(psramQSPI)
 8006d4c:	4b33      	ldr	r3, [pc, #204]	@ (8006e1c <psram_internal_read_write+0x108>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d01a      	beq.n	8006d8a <psram_internal_read_write+0x76>
	{
		//QSPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE_QUAD : PSRAM_CMD_READ_FAST_QIO;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <psram_internal_read_write+0x4a>
 8006d5a:	2338      	movs	r3, #56	@ 0x38
 8006d5c:	e000      	b.n	8006d60 <psram_internal_read_write+0x4c>
 8006d5e:	23eb      	movs	r3, #235	@ 0xeb
 8006d60:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8006d62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006d66:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006d68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006d6c:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_4_LINES;
 8006d6e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_4_LINES;
 8006d74:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8006d78:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_QPI_READ_FAST_QIO_WAIT;
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <psram_internal_read_write+0x70>
 8006d80:	2300      	movs	r3, #0
 8006d82:	e000      	b.n	8006d86 <psram_internal_read_write+0x72>
 8006d84:	2306      	movs	r3, #6
 8006d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d88:	e019      	b.n	8006dbe <psram_internal_read_write+0xaa>
	}else{
		//SPI mode
		sCommand.Instruction = write ? PSRAM_CMD_WRITE : PSRAM_CMD_READ_FAST;
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <psram_internal_read_write+0x80>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e000      	b.n	8006d96 <psram_internal_read_write+0x82>
 8006d94:	230b      	movs	r3, #11
 8006d96:	613b      	str	r3, [r7, #16]
		sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8006d98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8006d9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006da2:	61fb      	str	r3, [r7, #28]
		sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8006da4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.DataMode    = QSPI_DATA_1_LINE;
 8006daa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006dae:	637b      	str	r3, [r7, #52]	@ 0x34
		sCommand.DummyCycles = write ? 0 : PSRAM_CMD_READ_FAST_WAIT;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <psram_internal_read_write+0xa6>
 8006db6:	2300      	movs	r3, #0
 8006db8:	e000      	b.n	8006dbc <psram_internal_read_write+0xa8>
 8006dba:	2308      	movs	r3, #8
 8006dbc:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if(HAL_QSPI_Command(PSRAM_SPI, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006dbe:	f107 0310 	add.w	r3, r7, #16
 8006dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4815      	ldr	r0, [pc, #84]	@ (8006e20 <psram_internal_read_write+0x10c>)
 8006dca:	f008 f859 	bl	800ee80 <HAL_QSPI_Command>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <psram_internal_read_write+0xc6>
	{
		return -1;
 8006dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd8:	e01b      	b.n	8006e12 <psram_internal_read_write+0xfe>
	}

	if(write)
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <psram_internal_read_write+0xe4>
	{
		if (HAL_QSPI_Transmit(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	480e      	ldr	r0, [pc, #56]	@ (8006e20 <psram_internal_read_write+0x10c>)
 8006de8:	f008 f8a8 	bl	800ef3c <HAL_QSPI_Transmit>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00e      	beq.n	8006e10 <psram_internal_read_write+0xfc>
		{
			return -1;
 8006df2:	f04f 33ff 	mov.w	r3, #4294967295
 8006df6:	e00c      	b.n	8006e12 <psram_internal_read_write+0xfe>
		}

	}else{

		if (HAL_QSPI_Receive(PSRAM_SPI, pBuffer, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	4808      	ldr	r0, [pc, #32]	@ (8006e20 <psram_internal_read_write+0x10c>)
 8006e00:	f008 f933 	bl	800f06a <HAL_QSPI_Receive>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <psram_internal_read_write+0xfc>
		{
			return -1;
 8006e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0e:	e000      	b.n	8006e12 <psram_internal_read_write+0xfe>
		}

	}

	return 0;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3748      	adds	r7, #72	@ 0x48
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20005ce7 	.word	0x20005ce7
 8006e20:	2000033c 	.word	0x2000033c

08006e24 <psram_sector_read_write>:


//Funzione usata da FatFs
int psram_sector_read_write(uint8_t write, uint32_t sector, uint32_t nsectors, uint8_t *pBuffer)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b088      	sub	sp, #32
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	603b      	str	r3, [r7, #0]
 8006e30:	4603      	mov	r3, r0
 8006e32:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	61fb      	str	r3, [r7, #28]
	uint32_t address = sector * PSRAM_PAGE_SIZE;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	029b      	lsls	r3, r3, #10
 8006e40:	61bb      	str	r3, [r7, #24]

	while(nsectors > 0)
 8006e42:	e018      	b.n	8006e76 <psram_sector_read_write+0x52>
	{
		result = psram_internal_read_write(write, address, PSRAM_PAGE_SIZE, wPtr);
 8006e44:	7bf8      	ldrb	r0, [r7, #15]
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006e4c:	69b9      	ldr	r1, [r7, #24]
 8006e4e:	f7ff ff61 	bl	8006d14 <psram_internal_read_write>
 8006e52:	6178      	str	r0, [r7, #20]
		if(result < 0)return -1;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	da02      	bge.n	8006e60 <psram_sector_read_write+0x3c>
 8006e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5e:	e00e      	b.n	8006e7e <psram_sector_read_write+0x5a>
		address += PSRAM_PAGE_SIZE;
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e66:	61bb      	str	r3, [r7, #24]
		wPtr += PSRAM_PAGE_SIZE;
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e6e:	61fb      	str	r3, [r7, #28]
		nsectors--;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	607b      	str	r3, [r7, #4]
	while(nsectors > 0)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e3      	bne.n	8006e44 <psram_sector_read_write+0x20>
	}

	return 0;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <psram_read_write>:



int psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	607a      	str	r2, [r7, #4]
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	4603      	mov	r3, r0
 8006e96:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61bb      	str	r3, [r7, #24]
	uint32_t trBytes = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	617b      	str	r3, [r7, #20]
	uint8_t *wPtr = pBuffer;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	61fb      	str	r3, [r7, #28]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8006ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8006f20 <psram_read_write+0x98>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <psram_read_write+0x2a>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d102      	bne.n	8006eb8 <psram_read_write+0x30>
 8006eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb6:	e02e      	b.n	8006f16 <psram_read_write+0x8e>
	if(address + nbytes >= psramSize)return -2;
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	441a      	add	r2, r3
 8006ebe:	4b19      	ldr	r3, [pc, #100]	@ (8006f24 <psram_read_write+0x9c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d323      	bcc.n	8006f0e <psram_read_write+0x86>
 8006ec6:	f06f 0301 	mvn.w	r3, #1
 8006eca:	e024      	b.n	8006f16 <psram_read_write+0x8e>

	while(nbytes > 0)
	{
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ed2:	bf28      	it	cs
 8006ed4:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8006ed8:	617b      	str	r3, [r7, #20]
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	7bf8      	ldrb	r0, [r7, #15]
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	68b9      	ldr	r1, [r7, #8]
 8006ee4:	f7ff ff16 	bl	8006d14 <psram_internal_read_write>
 8006ee8:	61b8      	str	r0, [r7, #24]

		if(result < 0)return -1;
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	da02      	bge.n	8006ef6 <psram_read_write+0x6e>
 8006ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ef4:	e00f      	b.n	8006f16 <psram_read_write+0x8e>

		address += trBytes;
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	4413      	add	r3, r2
 8006efc:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	4413      	add	r3, r2
 8006f04:	61fb      	str	r3, [r7, #28]
		nbytes -= trBytes;
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	607b      	str	r3, [r7, #4]
	while(nbytes > 0)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1db      	bne.n	8006ecc <psram_read_write+0x44>
	}

	return 0;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3720      	adds	r7, #32
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20005ce6 	.word	0x20005ce6
 8006f24:	20005cf0 	.word	0x20005cf0

08006f28 <raw_psram_read_write>:

int raw_psram_read_write(uint8_t write, uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	607a      	str	r2, [r7, #4]
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	4603      	mov	r3, r0
 8006f36:	73fb      	strb	r3, [r7, #15]
	int result = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	617b      	str	r3, [r7, #20]
	uint32_t trBytes = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61fb      	str	r3, [r7, #28]
	uint8_t *wPtr = pBuffer;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	61bb      	str	r3, [r7, #24]

	//Check indirizzo
	if(!psramInitDone || pBuffer==NULL)return -1;
 8006f44:	4b21      	ldr	r3, [pc, #132]	@ (8006fcc <raw_psram_read_write+0xa4>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <raw_psram_read_write+0x2a>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d102      	bne.n	8006f58 <raw_psram_read_write+0x30>
 8006f52:	f04f 33ff 	mov.w	r3, #4294967295
 8006f56:	e035      	b.n	8006fc4 <raw_psram_read_write+0x9c>
	if(address + nbytes >= psramSize)return -2;
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	441a      	add	r2, r3
 8006f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8006fd0 <raw_psram_read_write+0xa8>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d302      	bcc.n	8006f6c <raw_psram_read_write+0x44>
 8006f66:	f06f 0301 	mvn.w	r3, #1
 8006f6a:	e02b      	b.n	8006fc4 <raw_psram_read_write+0x9c>

	trBytes = 1024 - address % 1024;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f72:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8006f76:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8006f78:	e020      	b.n	8006fbc <raw_psram_read_write+0x94>
	{
		result = psram_internal_read_write(write, address, trBytes, wPtr);
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	7bf8      	ldrb	r0, [r7, #15]
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	68b9      	ldr	r1, [r7, #8]
 8006f84:	f7ff fec6 	bl	8006d14 <psram_internal_read_write>
 8006f88:	6178      	str	r0, [r7, #20]

		if(result < 0)return -1;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	da02      	bge.n	8006f96 <raw_psram_read_write+0x6e>
 8006f90:	f04f 33ff 	mov.w	r3, #4294967295
 8006f94:	e016      	b.n	8006fc4 <raw_psram_read_write+0x9c>

		address += trBytes;
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	60bb      	str	r3, [r7, #8]
		wPtr += trBytes;
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	61bb      	str	r3, [r7, #24]
		nbytes -= trBytes;
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	607b      	str	r3, [r7, #4]
		trBytes = nbytes > PSRAM_PAGE_SIZE ? PSRAM_PAGE_SIZE : nbytes;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fb4:	bf28      	it	cs
 8006fb6:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8006fba:	61fb      	str	r3, [r7, #28]
	while(nbytes > 0)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1db      	bne.n	8006f7a <raw_psram_read_write+0x52>
	}

	return 0;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3720      	adds	r7, #32
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20005ce6 	.word	0x20005ce6
 8006fd0:	20005cf0 	.word	0x20005cf0

08006fd4 <RAM_Write>:
{
	return psram_read_write(1, address, nbytes, pBuffer);
}

int RAM_Write(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
	return raw_psram_read_write(1, address, nbytes, pBuffer);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	68f9      	ldr	r1, [r7, #12]
 8006fe6:	2001      	movs	r0, #1
 8006fe8:	f7ff ff9e 	bl	8006f28 <raw_psram_read_write>
 8006fec:	4603      	mov	r3, r0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <RAM_Read>:

int RAM_Read(uint32_t address, uint32_t nbytes, uint8_t *pBuffer)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	60f8      	str	r0, [r7, #12]
 8006ffe:	60b9      	str	r1, [r7, #8]
 8007000:	607a      	str	r2, [r7, #4]
	return psram_read_write(0, address, nbytes, pBuffer);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	68f9      	ldr	r1, [r7, #12]
 8007008:	2000      	movs	r0, #0
 800700a:	f7ff ff3d 	bl	8006e88 <psram_read_write>
 800700e:	4603      	mov	r3, r0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <psram_is_initialized>:


int psram_is_initialized()
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
	return psramInitDone;
 800701c:	4b03      	ldr	r3, [pc, #12]	@ (800702c <psram_is_initialized+0x14>)
 800701e:	781b      	ldrb	r3, [r3, #0]
}
 8007020:	4618      	mov	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20005ce6 	.word	0x20005ce6

08007030 <psram_get_sector_size>:

unsigned int psram_get_sector_size()
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
	return PSRAM_PAGE_SIZE;
 8007034:	f44f 6380 	mov.w	r3, #1024	@ 0x400
}
 8007038:	4618      	mov	r0, r3
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
	...

08007044 <psram_get_sector_count>:

unsigned int psram_get_sector_count()
{
 8007044:	b480      	push	{r7}
 8007046:	af00      	add	r7, sp, #0
	return psramNumPages;
 8007048:	4b03      	ldr	r3, [pc, #12]	@ (8007058 <psram_get_sector_count+0x14>)
 800704a:	681b      	ldr	r3, [r3, #0]
}
 800704c:	4618      	mov	r0, r3
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	20005cf4 	.word	0x20005cf4

0800705c <psram_get_size>:

unsigned int psram_get_size()
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
	return psramSize;
 8007060:	4b03      	ldr	r3, [pc, #12]	@ (8007070 <psram_get_size+0x14>)
 8007062:	681b      	ldr	r3, [r3, #0]
}
 8007064:	4618      	mov	r0, r3
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	20005cf0 	.word	0x20005cf0

08007074 <psram_init>:

int psram_init()
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0

	uint8_t density = 0xFF;
 800707a:	23ff      	movs	r3, #255	@ 0xff
 800707c:	71fb      	strb	r3, [r7, #7]

	psramInitDone = 0;
 800707e:	4b20      	ldr	r3, [pc, #128]	@ (8007100 <psram_init+0x8c>)
 8007080:	2200      	movs	r2, #0
 8007082:	701a      	strb	r2, [r3, #0]

	if(psram_reset() < 0)return -1;
 8007084:	f7ff fd74 	bl	8006b70 <psram_reset>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	da02      	bge.n	8007094 <psram_init+0x20>
 800708e:	f04f 33ff 	mov.w	r3, #4294967295
 8007092:	e030      	b.n	80070f6 <psram_init+0x82>

	memset(psramId, 0xFF, sizeof(psramId));
 8007094:	2208      	movs	r2, #8
 8007096:	21ff      	movs	r1, #255	@ 0xff
 8007098:	481a      	ldr	r0, [pc, #104]	@ (8007104 <psram_init+0x90>)
 800709a:	f00e fee9 	bl	8015e70 <memset>

	if(psram_read_id(psramId, sizeof(psramId)) < 0)return -1;
 800709e:	2108      	movs	r1, #8
 80070a0:	4818      	ldr	r0, [pc, #96]	@ (8007104 <psram_init+0x90>)
 80070a2:	f7ff fde7 	bl	8006c74 <psram_read_id>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	da02      	bge.n	80070b2 <psram_init+0x3e>
 80070ac:	f04f 33ff 	mov.w	r3, #4294967295
 80070b0:	e021      	b.n	80070f6 <psram_init+0x82>

	density = psramId[2] >> 5;
 80070b2:	4b14      	ldr	r3, [pc, #80]	@ (8007104 <psram_init+0x90>)
 80070b4:	789b      	ldrb	r3, [r3, #2]
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	71fb      	strb	r3, [r7, #7]

	if(psramId[0] == PSRAM_MANUFACTURER && psramId[1] == PSRAM_KGD && density <= PSRAM_DENSITY_64MB)
 80070ba:	4b12      	ldr	r3, [pc, #72]	@ (8007104 <psram_init+0x90>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b0d      	cmp	r3, #13
 80070c0:	d117      	bne.n	80070f2 <psram_init+0x7e>
 80070c2:	4b10      	ldr	r3, [pc, #64]	@ (8007104 <psram_init+0x90>)
 80070c4:	785b      	ldrb	r3, [r3, #1]
 80070c6:	2b5d      	cmp	r3, #93	@ 0x5d
 80070c8:	d113      	bne.n	80070f2 <psram_init+0x7e>
 80070ca:	79fb      	ldrb	r3, [r7, #7]
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d810      	bhi.n	80070f2 <psram_init+0x7e>
	{
		psramSize = PSRAM_DENSITY_64MB_EADDR;
 80070d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007108 <psram_init+0x94>)
 80070d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80070d6:	601a      	str	r2, [r3, #0]
		psramNumPages = psramSize / PSRAM_PAGE_SIZE;
 80070d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007108 <psram_init+0x94>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	0a9b      	lsrs	r3, r3, #10
 80070de:	4a0b      	ldr	r2, [pc, #44]	@ (800710c <psram_init+0x98>)
 80070e0:	6013      	str	r3, [r2, #0]

		psram_qpi_mode(1);
 80070e2:	2001      	movs	r0, #1
 80070e4:	f7ff fd7a 	bl	8006bdc <psram_qpi_mode>

		psramInitDone = 1;
 80070e8:	4b05      	ldr	r3, [pc, #20]	@ (8007100 <psram_init+0x8c>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	701a      	strb	r2, [r3, #0]
		return 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	e001      	b.n	80070f6 <psram_init+0x82>
	}else{
		return -1;
 80070f2:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	20005ce6 	.word	0x20005ce6
 8007104:	20005ce8 	.word	0x20005ce8
 8007108:	20005cf0 	.word	0x20005cf0
 800710c:	20005cf4 	.word	0x20005cf4

08007110 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007116:	4b0f      	ldr	r3, [pc, #60]	@ (8007154 <HAL_MspInit+0x44>)
 8007118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800711a:	4a0e      	ldr	r2, [pc, #56]	@ (8007154 <HAL_MspInit+0x44>)
 800711c:	f043 0301 	orr.w	r3, r3, #1
 8007120:	6613      	str	r3, [r2, #96]	@ 0x60
 8007122:	4b0c      	ldr	r3, [pc, #48]	@ (8007154 <HAL_MspInit+0x44>)
 8007124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	607b      	str	r3, [r7, #4]
 800712c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800712e:	4b09      	ldr	r3, [pc, #36]	@ (8007154 <HAL_MspInit+0x44>)
 8007130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007132:	4a08      	ldr	r2, [pc, #32]	@ (8007154 <HAL_MspInit+0x44>)
 8007134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007138:	6593      	str	r3, [r2, #88]	@ 0x58
 800713a:	4b06      	ldr	r3, [pc, #24]	@ (8007154 <HAL_MspInit+0x44>)
 800713c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800713e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	40021000 	.word	0x40021000

08007158 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b0ac      	sub	sp, #176	@ 0xb0
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007160:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	605a      	str	r2, [r3, #4]
 800716a:	609a      	str	r2, [r3, #8]
 800716c:	60da      	str	r2, [r3, #12]
 800716e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007170:	f107 0314 	add.w	r3, r7, #20
 8007174:	2288      	movs	r2, #136	@ 0x88
 8007176:	2100      	movs	r1, #0
 8007178:	4618      	mov	r0, r3
 800717a:	f00e fe79 	bl	8015e70 <memset>
  if(hadc->Instance==ADC1)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a3d      	ldr	r2, [pc, #244]	@ (8007278 <HAL_ADC_MspInit+0x120>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d172      	bne.n	800726e <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007188:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800718c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800718e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007192:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8007196:	2303      	movs	r3, #3
 8007198:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800719a:	2301      	movs	r3, #1
 800719c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800719e:	2308      	movs	r3, #8
 80071a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80071a2:	2307      	movs	r3, #7
 80071a4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80071a6:	2302      	movs	r3, #2
 80071a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80071aa:	2302      	movs	r3, #2
 80071ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80071ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071b2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80071b4:	f107 0314 	add.w	r3, r7, #20
 80071b8:	4618      	mov	r0, r3
 80071ba:	f009 f84d 	bl	8010258 <HAL_RCCEx_PeriphCLKConfig>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80071c4:	f7fe f802 	bl	80051cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80071c8:	4b2c      	ldr	r3, [pc, #176]	@ (800727c <HAL_ADC_MspInit+0x124>)
 80071ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071cc:	4a2b      	ldr	r2, [pc, #172]	@ (800727c <HAL_ADC_MspInit+0x124>)
 80071ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80071d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071d4:	4b29      	ldr	r3, [pc, #164]	@ (800727c <HAL_ADC_MspInit+0x124>)
 80071d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071dc:	613b      	str	r3, [r7, #16]
 80071de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071e0:	4b26      	ldr	r3, [pc, #152]	@ (800727c <HAL_ADC_MspInit+0x124>)
 80071e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071e4:	4a25      	ldr	r2, [pc, #148]	@ (800727c <HAL_ADC_MspInit+0x124>)
 80071e6:	f043 0301 	orr.w	r3, r3, #1
 80071ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071ec:	4b23      	ldr	r3, [pc, #140]	@ (800727c <HAL_ADC_MspInit+0x124>)
 80071ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80071f8:	2310      	movs	r3, #16
 80071fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80071fe:	230b      	movs	r3, #11
 8007200:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007204:	2300      	movs	r3, #0
 8007206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800720a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800720e:	4619      	mov	r1, r3
 8007210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007214:	f006 fdb0 	bl	800dd78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007218:	4b19      	ldr	r3, [pc, #100]	@ (8007280 <HAL_ADC_MspInit+0x128>)
 800721a:	4a1a      	ldr	r2, [pc, #104]	@ (8007284 <HAL_ADC_MspInit+0x12c>)
 800721c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800721e:	4b18      	ldr	r3, [pc, #96]	@ (8007280 <HAL_ADC_MspInit+0x128>)
 8007220:	2200      	movs	r2, #0
 8007222:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007224:	4b16      	ldr	r3, [pc, #88]	@ (8007280 <HAL_ADC_MspInit+0x128>)
 8007226:	2200      	movs	r2, #0
 8007228:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800722a:	4b15      	ldr	r3, [pc, #84]	@ (8007280 <HAL_ADC_MspInit+0x128>)
 800722c:	2200      	movs	r2, #0
 800722e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007230:	4b13      	ldr	r3, [pc, #76]	@ (8007280 <HAL_ADC_MspInit+0x128>)
 8007232:	2280      	movs	r2, #128	@ 0x80
 8007234:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007236:	4b12      	ldr	r3, [pc, #72]	@ (8007280 <HAL_ADC_MspInit+0x128>)
 8007238:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800723c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800723e:	4b10      	ldr	r3, [pc, #64]	@ (8007280 <HAL_ADC_MspInit+0x128>)
 8007240:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007244:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007246:	4b0e      	ldr	r3, [pc, #56]	@ (8007280 <HAL_ADC_MspInit+0x128>)
 8007248:	2220      	movs	r2, #32
 800724a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800724c:	4b0c      	ldr	r3, [pc, #48]	@ (8007280 <HAL_ADC_MspInit+0x128>)
 800724e:	2200      	movs	r2, #0
 8007250:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007252:	480b      	ldr	r0, [pc, #44]	@ (8007280 <HAL_ADC_MspInit+0x128>)
 8007254:	f005 fc8a 	bl	800cb6c <HAL_DMA_Init>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 800725e:	f7fd ffb5 	bl	80051cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a06      	ldr	r2, [pc, #24]	@ (8007280 <HAL_ADC_MspInit+0x128>)
 8007266:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007268:	4a05      	ldr	r2, [pc, #20]	@ (8007280 <HAL_ADC_MspInit+0x128>)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800726e:	bf00      	nop
 8007270:	37b0      	adds	r7, #176	@ 0xb0
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	50040000 	.word	0x50040000
 800727c:	40021000 	.word	0x40021000
 8007280:	2000027c 	.word	0x2000027c
 8007284:	40020008 	.word	0x40020008

08007288 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a0a      	ldr	r2, [pc, #40]	@ (80072c0 <HAL_CRC_MspInit+0x38>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d10b      	bne.n	80072b2 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800729a:	4b0a      	ldr	r3, [pc, #40]	@ (80072c4 <HAL_CRC_MspInit+0x3c>)
 800729c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800729e:	4a09      	ldr	r2, [pc, #36]	@ (80072c4 <HAL_CRC_MspInit+0x3c>)
 80072a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80072a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80072a6:	4b07      	ldr	r3, [pc, #28]	@ (80072c4 <HAL_CRC_MspInit+0x3c>)
 80072a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80072b2:	bf00      	nop
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	40023000 	.word	0x40023000
 80072c4:	40021000 	.word	0x40021000

080072c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b0ac      	sub	sp, #176	@ 0xb0
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80072d4:	2200      	movs	r2, #0
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	605a      	str	r2, [r3, #4]
 80072da:	609a      	str	r2, [r3, #8]
 80072dc:	60da      	str	r2, [r3, #12]
 80072de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80072e0:	f107 0314 	add.w	r3, r7, #20
 80072e4:	2288      	movs	r2, #136	@ 0x88
 80072e6:	2100      	movs	r1, #0
 80072e8:	4618      	mov	r0, r3
 80072ea:	f00e fdc1 	bl	8015e70 <memset>
  if(hi2c->Instance==I2C3)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a21      	ldr	r2, [pc, #132]	@ (8007378 <HAL_I2C_MspInit+0xb0>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d13b      	bne.n	8007370 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80072f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80072fc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80072fe:	2300      	movs	r3, #0
 8007300:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007302:	f107 0314 	add.w	r3, r7, #20
 8007306:	4618      	mov	r0, r3
 8007308:	f008 ffa6 	bl	8010258 <HAL_RCCEx_PeriphCLKConfig>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007312:	f7fd ff5b 	bl	80051cc <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007316:	4b19      	ldr	r3, [pc, #100]	@ (800737c <HAL_I2C_MspInit+0xb4>)
 8007318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800731a:	4a18      	ldr	r2, [pc, #96]	@ (800737c <HAL_I2C_MspInit+0xb4>)
 800731c:	f043 0304 	orr.w	r3, r3, #4
 8007320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007322:	4b16      	ldr	r3, [pc, #88]	@ (800737c <HAL_I2C_MspInit+0xb4>)
 8007324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007326:	f003 0304 	and.w	r3, r3, #4
 800732a:	613b      	str	r3, [r7, #16]
 800732c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800732e:	2303      	movs	r3, #3
 8007330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007334:	2312      	movs	r3, #18
 8007336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800733a:	2300      	movs	r3, #0
 800733c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007340:	2303      	movs	r3, #3
 8007342:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007346:	2304      	movs	r3, #4
 8007348:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800734c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007350:	4619      	mov	r1, r3
 8007352:	480b      	ldr	r0, [pc, #44]	@ (8007380 <HAL_I2C_MspInit+0xb8>)
 8007354:	f006 fd10 	bl	800dd78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007358:	4b08      	ldr	r3, [pc, #32]	@ (800737c <HAL_I2C_MspInit+0xb4>)
 800735a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800735c:	4a07      	ldr	r2, [pc, #28]	@ (800737c <HAL_I2C_MspInit+0xb4>)
 800735e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007362:	6593      	str	r3, [r2, #88]	@ 0x58
 8007364:	4b05      	ldr	r3, [pc, #20]	@ (800737c <HAL_I2C_MspInit+0xb4>)
 8007366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007368:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8007370:	bf00      	nop
 8007372:	37b0      	adds	r7, #176	@ 0xb0
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	40005c00 	.word	0x40005c00
 800737c:	40021000 	.word	0x40021000
 8007380:	48000800 	.word	0x48000800

08007384 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08a      	sub	sp, #40	@ 0x28
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800738c:	f107 0314 	add.w	r3, r7, #20
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	605a      	str	r2, [r3, #4]
 8007396:	609a      	str	r2, [r3, #8]
 8007398:	60da      	str	r2, [r3, #12]
 800739a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a26      	ldr	r2, [pc, #152]	@ (800743c <HAL_QSPI_MspInit+0xb8>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d145      	bne.n	8007432 <HAL_QSPI_MspInit+0xae>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80073a6:	4b26      	ldr	r3, [pc, #152]	@ (8007440 <HAL_QSPI_MspInit+0xbc>)
 80073a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073aa:	4a25      	ldr	r2, [pc, #148]	@ (8007440 <HAL_QSPI_MspInit+0xbc>)
 80073ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80073b2:	4b23      	ldr	r3, [pc, #140]	@ (8007440 <HAL_QSPI_MspInit+0xbc>)
 80073b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ba:	613b      	str	r3, [r7, #16]
 80073bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073be:	4b20      	ldr	r3, [pc, #128]	@ (8007440 <HAL_QSPI_MspInit+0xbc>)
 80073c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007440 <HAL_QSPI_MspInit+0xbc>)
 80073c4:	f043 0301 	orr.w	r3, r3, #1
 80073c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007440 <HAL_QSPI_MspInit+0xbc>)
 80073cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007440 <HAL_QSPI_MspInit+0xbc>)
 80073d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073da:	4a19      	ldr	r2, [pc, #100]	@ (8007440 <HAL_QSPI_MspInit+0xbc>)
 80073dc:	f043 0302 	orr.w	r3, r3, #2
 80073e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073e2:	4b17      	ldr	r3, [pc, #92]	@ (8007440 <HAL_QSPI_MspInit+0xbc>)
 80073e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	60bb      	str	r3, [r7, #8]
 80073ec:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80073ee:	23c0      	movs	r3, #192	@ 0xc0
 80073f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073f2:	2302      	movs	r3, #2
 80073f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073fa:	2303      	movs	r3, #3
 80073fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80073fe:	230a      	movs	r3, #10
 8007400:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007402:	f107 0314 	add.w	r3, r7, #20
 8007406:	4619      	mov	r1, r3
 8007408:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800740c:	f006 fcb4 	bl	800dd78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8007410:	f640 4303 	movw	r3, #3075	@ 0xc03
 8007414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007416:	2302      	movs	r3, #2
 8007418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800741a:	2300      	movs	r3, #0
 800741c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800741e:	2303      	movs	r3, #3
 8007420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8007422:	230a      	movs	r3, #10
 8007424:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007426:	f107 0314 	add.w	r3, r7, #20
 800742a:	4619      	mov	r1, r3
 800742c:	4805      	ldr	r0, [pc, #20]	@ (8007444 <HAL_QSPI_MspInit+0xc0>)
 800742e:	f006 fca3 	bl	800dd78 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8007432:	bf00      	nop
 8007434:	3728      	adds	r7, #40	@ 0x28
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	a0001000 	.word	0xa0001000
 8007440:	40021000 	.word	0x40021000
 8007444:	48000400 	.word	0x48000400

08007448 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b0a4      	sub	sp, #144	@ 0x90
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007450:	f107 0308 	add.w	r3, r7, #8
 8007454:	2288      	movs	r2, #136	@ 0x88
 8007456:	2100      	movs	r1, #0
 8007458:	4618      	mov	r0, r3
 800745a:	f00e fd09 	bl	8015e70 <memset>
  if(hrtc->Instance==RTC)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a14      	ldr	r2, [pc, #80]	@ (80074b4 <HAL_RTC_MspInit+0x6c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d120      	bne.n	80074aa <HAL_RTC_MspInit+0x62>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007468:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800746c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800746e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007476:	f107 0308 	add.w	r3, r7, #8
 800747a:	4618      	mov	r0, r3
 800747c:	f008 feec 	bl	8010258 <HAL_RCCEx_PeriphCLKConfig>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8007486:	f7fd fea1 	bl	80051cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800748a:	4b0b      	ldr	r3, [pc, #44]	@ (80074b8 <HAL_RTC_MspInit+0x70>)
 800748c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007490:	4a09      	ldr	r2, [pc, #36]	@ (80074b8 <HAL_RTC_MspInit+0x70>)
 8007492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007496:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800749a:	2200      	movs	r2, #0
 800749c:	2100      	movs	r1, #0
 800749e:	2029      	movs	r0, #41	@ 0x29
 80074a0:	f005 f8f1 	bl	800c686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80074a4:	2029      	movs	r0, #41	@ 0x29
 80074a6:	f005 f90a 	bl	800c6be <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80074aa:	bf00      	nop
 80074ac:	3790      	adds	r7, #144	@ 0x90
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	40002800 	.word	0x40002800
 80074b8:	40021000 	.word	0x40021000

080074bc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08c      	sub	sp, #48	@ 0x30
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074c4:	f107 031c 	add.w	r3, r7, #28
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	605a      	str	r2, [r3, #4]
 80074ce:	609a      	str	r2, [r3, #8]
 80074d0:	60da      	str	r2, [r3, #12]
 80074d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a2f      	ldr	r2, [pc, #188]	@ (8007598 <HAL_SPI_MspInit+0xdc>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d129      	bne.n	8007532 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80074de:	4b2f      	ldr	r3, [pc, #188]	@ (800759c <HAL_SPI_MspInit+0xe0>)
 80074e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e2:	4a2e      	ldr	r2, [pc, #184]	@ (800759c <HAL_SPI_MspInit+0xe0>)
 80074e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80074e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80074ea:	4b2c      	ldr	r3, [pc, #176]	@ (800759c <HAL_SPI_MspInit+0xe0>)
 80074ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074f2:	61bb      	str	r3, [r7, #24]
 80074f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074f6:	4b29      	ldr	r3, [pc, #164]	@ (800759c <HAL_SPI_MspInit+0xe0>)
 80074f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074fa:	4a28      	ldr	r2, [pc, #160]	@ (800759c <HAL_SPI_MspInit+0xe0>)
 80074fc:	f043 0302 	orr.w	r3, r3, #2
 8007500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007502:	4b26      	ldr	r3, [pc, #152]	@ (800759c <HAL_SPI_MspInit+0xe0>)
 8007504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800750e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8007512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007514:	2302      	movs	r3, #2
 8007516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007518:	2300      	movs	r3, #0
 800751a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800751c:	2303      	movs	r3, #3
 800751e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007520:	2305      	movs	r3, #5
 8007522:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007524:	f107 031c 	add.w	r3, r7, #28
 8007528:	4619      	mov	r1, r3
 800752a:	481d      	ldr	r0, [pc, #116]	@ (80075a0 <HAL_SPI_MspInit+0xe4>)
 800752c:	f006 fc24 	bl	800dd78 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007530:	e02d      	b.n	800758e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1b      	ldr	r2, [pc, #108]	@ (80075a4 <HAL_SPI_MspInit+0xe8>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d128      	bne.n	800758e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800753c:	4b17      	ldr	r3, [pc, #92]	@ (800759c <HAL_SPI_MspInit+0xe0>)
 800753e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007540:	4a16      	ldr	r2, [pc, #88]	@ (800759c <HAL_SPI_MspInit+0xe0>)
 8007542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007546:	6593      	str	r3, [r2, #88]	@ 0x58
 8007548:	4b14      	ldr	r3, [pc, #80]	@ (800759c <HAL_SPI_MspInit+0xe0>)
 800754a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800754c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007550:	613b      	str	r3, [r7, #16]
 8007552:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007554:	4b11      	ldr	r3, [pc, #68]	@ (800759c <HAL_SPI_MspInit+0xe0>)
 8007556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007558:	4a10      	ldr	r2, [pc, #64]	@ (800759c <HAL_SPI_MspInit+0xe0>)
 800755a:	f043 0304 	orr.w	r3, r3, #4
 800755e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007560:	4b0e      	ldr	r3, [pc, #56]	@ (800759c <HAL_SPI_MspInit+0xe0>)
 8007562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007564:	f003 0304 	and.w	r3, r3, #4
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800756c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007572:	2302      	movs	r3, #2
 8007574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007576:	2300      	movs	r3, #0
 8007578:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800757a:	2303      	movs	r3, #3
 800757c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800757e:	2306      	movs	r3, #6
 8007580:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007582:	f107 031c 	add.w	r3, r7, #28
 8007586:	4619      	mov	r1, r3
 8007588:	4807      	ldr	r0, [pc, #28]	@ (80075a8 <HAL_SPI_MspInit+0xec>)
 800758a:	f006 fbf5 	bl	800dd78 <HAL_GPIO_Init>
}
 800758e:	bf00      	nop
 8007590:	3730      	adds	r7, #48	@ 0x30
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	40003800 	.word	0x40003800
 800759c:	40021000 	.word	0x40021000
 80075a0:	48000400 	.word	0x48000400
 80075a4:	40003c00 	.word	0x40003c00
 80075a8:	48000800 	.word	0x48000800

080075ac <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a0a      	ldr	r2, [pc, #40]	@ (80075e4 <HAL_TIM_OC_MspInit+0x38>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d10b      	bne.n	80075d6 <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80075be:	4b0a      	ldr	r3, [pc, #40]	@ (80075e8 <HAL_TIM_OC_MspInit+0x3c>)
 80075c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075c2:	4a09      	ldr	r2, [pc, #36]	@ (80075e8 <HAL_TIM_OC_MspInit+0x3c>)
 80075c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80075c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80075ca:	4b07      	ldr	r3, [pc, #28]	@ (80075e8 <HAL_TIM_OC_MspInit+0x3c>)
 80075cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	40012c00 	.word	0x40012c00
 80075e8:	40021000 	.word	0x40021000

080075ec <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08a      	sub	sp, #40	@ 0x28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075f4:	f107 0314 	add.w	r3, r7, #20
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	605a      	str	r2, [r3, #4]
 80075fe:	609a      	str	r2, [r3, #8]
 8007600:	60da      	str	r2, [r3, #12]
 8007602:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800760c:	d128      	bne.n	8007660 <HAL_TIM_IC_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800760e:	4b16      	ldr	r3, [pc, #88]	@ (8007668 <HAL_TIM_IC_MspInit+0x7c>)
 8007610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007612:	4a15      	ldr	r2, [pc, #84]	@ (8007668 <HAL_TIM_IC_MspInit+0x7c>)
 8007614:	f043 0301 	orr.w	r3, r3, #1
 8007618:	6593      	str	r3, [r2, #88]	@ 0x58
 800761a:	4b13      	ldr	r3, [pc, #76]	@ (8007668 <HAL_TIM_IC_MspInit+0x7c>)
 800761c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007626:	4b10      	ldr	r3, [pc, #64]	@ (8007668 <HAL_TIM_IC_MspInit+0x7c>)
 8007628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800762a:	4a0f      	ldr	r2, [pc, #60]	@ (8007668 <HAL_TIM_IC_MspInit+0x7c>)
 800762c:	f043 0301 	orr.w	r3, r3, #1
 8007630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007632:	4b0d      	ldr	r3, [pc, #52]	@ (8007668 <HAL_TIM_IC_MspInit+0x7c>)
 8007634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800763e:	2320      	movs	r3, #32
 8007640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007642:	2302      	movs	r3, #2
 8007644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007646:	2301      	movs	r3, #1
 8007648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800764a:	2300      	movs	r3, #0
 800764c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800764e:	2301      	movs	r3, #1
 8007650:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007652:	f107 0314 	add.w	r3, r7, #20
 8007656:	4619      	mov	r1, r3
 8007658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800765c:	f006 fb8c 	bl	800dd78 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8007660:	bf00      	nop
 8007662:	3728      	adds	r7, #40	@ 0x28
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	40021000 	.word	0x40021000

0800766c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a13      	ldr	r2, [pc, #76]	@ (80076c8 <HAL_TIM_Base_MspInit+0x5c>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d10c      	bne.n	8007698 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800767e:	4b13      	ldr	r3, [pc, #76]	@ (80076cc <HAL_TIM_Base_MspInit+0x60>)
 8007680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007682:	4a12      	ldr	r2, [pc, #72]	@ (80076cc <HAL_TIM_Base_MspInit+0x60>)
 8007684:	f043 0302 	orr.w	r3, r3, #2
 8007688:	6593      	str	r3, [r2, #88]	@ 0x58
 800768a:	4b10      	ldr	r3, [pc, #64]	@ (80076cc <HAL_TIM_Base_MspInit+0x60>)
 800768c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007696:	e010      	b.n	80076ba <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a0c      	ldr	r2, [pc, #48]	@ (80076d0 <HAL_TIM_Base_MspInit+0x64>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d10b      	bne.n	80076ba <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80076a2:	4b0a      	ldr	r3, [pc, #40]	@ (80076cc <HAL_TIM_Base_MspInit+0x60>)
 80076a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076a6:	4a09      	ldr	r2, [pc, #36]	@ (80076cc <HAL_TIM_Base_MspInit+0x60>)
 80076a8:	f043 0304 	orr.w	r3, r3, #4
 80076ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80076ae:	4b07      	ldr	r3, [pc, #28]	@ (80076cc <HAL_TIM_Base_MspInit+0x60>)
 80076b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b2:	f003 0304 	and.w	r3, r3, #4
 80076b6:	60bb      	str	r3, [r7, #8]
 80076b8:	68bb      	ldr	r3, [r7, #8]
}
 80076ba:	bf00      	nop
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	40000400 	.word	0x40000400
 80076cc:	40021000 	.word	0x40021000
 80076d0:	40000800 	.word	0x40000800

080076d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08a      	sub	sp, #40	@ 0x28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076dc:	f107 0314 	add.w	r3, r7, #20
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	605a      	str	r2, [r3, #4]
 80076e6:	609a      	str	r2, [r3, #8]
 80076e8:	60da      	str	r2, [r3, #12]
 80076ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a23      	ldr	r2, [pc, #140]	@ (8007780 <HAL_TIM_MspPostInit+0xac>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d11e      	bne.n	8007734 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076f6:	4b23      	ldr	r3, [pc, #140]	@ (8007784 <HAL_TIM_MspPostInit+0xb0>)
 80076f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076fa:	4a22      	ldr	r2, [pc, #136]	@ (8007784 <HAL_TIM_MspPostInit+0xb0>)
 80076fc:	f043 0301 	orr.w	r3, r3, #1
 8007700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007702:	4b20      	ldr	r3, [pc, #128]	@ (8007784 <HAL_TIM_MspPostInit+0xb0>)
 8007704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800770e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8007712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007714:	2302      	movs	r3, #2
 8007716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007718:	2300      	movs	r3, #0
 800771a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800771c:	2300      	movs	r3, #0
 800771e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007720:	2301      	movs	r3, #1
 8007722:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007724:	f107 0314 	add.w	r3, r7, #20
 8007728:	4619      	mov	r1, r3
 800772a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800772e:	f006 fb23 	bl	800dd78 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007732:	e021      	b.n	8007778 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a13      	ldr	r2, [pc, #76]	@ (8007788 <HAL_TIM_MspPostInit+0xb4>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d11c      	bne.n	8007778 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800773e:	4b11      	ldr	r3, [pc, #68]	@ (8007784 <HAL_TIM_MspPostInit+0xb0>)
 8007740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007742:	4a10      	ldr	r2, [pc, #64]	@ (8007784 <HAL_TIM_MspPostInit+0xb0>)
 8007744:	f043 0304 	orr.w	r3, r3, #4
 8007748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800774a:	4b0e      	ldr	r3, [pc, #56]	@ (8007784 <HAL_TIM_MspPostInit+0xb0>)
 800774c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800774e:	f003 0304 	and.w	r3, r3, #4
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007756:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800775a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800775c:	2302      	movs	r3, #2
 800775e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007760:	2300      	movs	r3, #0
 8007762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007764:	2300      	movs	r3, #0
 8007766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007768:	2302      	movs	r3, #2
 800776a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800776c:	f107 0314 	add.w	r3, r7, #20
 8007770:	4619      	mov	r1, r3
 8007772:	4806      	ldr	r0, [pc, #24]	@ (800778c <HAL_TIM_MspPostInit+0xb8>)
 8007774:	f006 fb00 	bl	800dd78 <HAL_GPIO_Init>
}
 8007778:	bf00      	nop
 800777a:	3728      	adds	r7, #40	@ 0x28
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	40012c00 	.word	0x40012c00
 8007784:	40021000 	.word	0x40021000
 8007788:	40000400 	.word	0x40000400
 800778c:	48000800 	.word	0x48000800

08007790 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b0ae      	sub	sp, #184	@ 0xb8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007798:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	605a      	str	r2, [r3, #4]
 80077a2:	609a      	str	r2, [r3, #8]
 80077a4:	60da      	str	r2, [r3, #12]
 80077a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80077a8:	f107 031c 	add.w	r3, r7, #28
 80077ac:	2288      	movs	r2, #136	@ 0x88
 80077ae:	2100      	movs	r1, #0
 80077b0:	4618      	mov	r0, r3
 80077b2:	f00e fb5d 	bl	8015e70 <memset>
  if(huart->Instance==UART4)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a6b      	ldr	r2, [pc, #428]	@ (8007968 <HAL_UART_MspInit+0x1d8>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d13c      	bne.n	800783a <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80077c0:	2308      	movs	r3, #8
 80077c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80077c4:	2300      	movs	r3, #0
 80077c6:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80077c8:	f107 031c 	add.w	r3, r7, #28
 80077cc:	4618      	mov	r0, r3
 80077ce:	f008 fd43 	bl	8010258 <HAL_RCCEx_PeriphCLKConfig>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80077d8:	f7fd fcf8 	bl	80051cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80077dc:	4b63      	ldr	r3, [pc, #396]	@ (800796c <HAL_UART_MspInit+0x1dc>)
 80077de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077e0:	4a62      	ldr	r2, [pc, #392]	@ (800796c <HAL_UART_MspInit+0x1dc>)
 80077e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80077e8:	4b60      	ldr	r3, [pc, #384]	@ (800796c <HAL_UART_MspInit+0x1dc>)
 80077ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077f0:	61bb      	str	r3, [r7, #24]
 80077f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077f4:	4b5d      	ldr	r3, [pc, #372]	@ (800796c <HAL_UART_MspInit+0x1dc>)
 80077f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077f8:	4a5c      	ldr	r2, [pc, #368]	@ (800796c <HAL_UART_MspInit+0x1dc>)
 80077fa:	f043 0301 	orr.w	r3, r3, #1
 80077fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007800:	4b5a      	ldr	r3, [pc, #360]	@ (800796c <HAL_UART_MspInit+0x1dc>)
 8007802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	617b      	str	r3, [r7, #20]
 800780a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800780c:	2301      	movs	r3, #1
 800780e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007812:	2312      	movs	r3, #18
 8007814:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007818:	2301      	movs	r3, #1
 800781a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800781e:	2303      	movs	r3, #3
 8007820:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007824:	2308      	movs	r3, #8
 8007826:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800782a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800782e:	4619      	mov	r1, r3
 8007830:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007834:	f006 faa0 	bl	800dd78 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8007838:	e092      	b.n	8007960 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART1)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a4c      	ldr	r2, [pc, #304]	@ (8007970 <HAL_UART_MspInit+0x1e0>)
 8007840:	4293      	cmp	r3, r2
 8007842:	f040 808d 	bne.w	8007960 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007846:	2301      	movs	r3, #1
 8007848:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800784a:	2300      	movs	r3, #0
 800784c:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800784e:	f107 031c 	add.w	r3, r7, #28
 8007852:	4618      	mov	r0, r3
 8007854:	f008 fd00 	bl	8010258 <HAL_RCCEx_PeriphCLKConfig>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800785e:	f7fd fcb5 	bl	80051cc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007862:	4b42      	ldr	r3, [pc, #264]	@ (800796c <HAL_UART_MspInit+0x1dc>)
 8007864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007866:	4a41      	ldr	r2, [pc, #260]	@ (800796c <HAL_UART_MspInit+0x1dc>)
 8007868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800786c:	6613      	str	r3, [r2, #96]	@ 0x60
 800786e:	4b3f      	ldr	r3, [pc, #252]	@ (800796c <HAL_UART_MspInit+0x1dc>)
 8007870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800787a:	4b3c      	ldr	r3, [pc, #240]	@ (800796c <HAL_UART_MspInit+0x1dc>)
 800787c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800787e:	4a3b      	ldr	r2, [pc, #236]	@ (800796c <HAL_UART_MspInit+0x1dc>)
 8007880:	f043 0302 	orr.w	r3, r3, #2
 8007884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007886:	4b39      	ldr	r3, [pc, #228]	@ (800796c <HAL_UART_MspInit+0x1dc>)
 8007888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8007892:	23d8      	movs	r3, #216	@ 0xd8
 8007894:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007898:	2302      	movs	r3, #2
 800789a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800789e:	2300      	movs	r3, #0
 80078a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078a4:	2303      	movs	r3, #3
 80078a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80078aa:	2307      	movs	r3, #7
 80078ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80078b4:	4619      	mov	r1, r3
 80078b6:	482f      	ldr	r0, [pc, #188]	@ (8007974 <HAL_UART_MspInit+0x1e4>)
 80078b8:	f006 fa5e 	bl	800dd78 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80078bc:	4b2e      	ldr	r3, [pc, #184]	@ (8007978 <HAL_UART_MspInit+0x1e8>)
 80078be:	4a2f      	ldr	r2, [pc, #188]	@ (800797c <HAL_UART_MspInit+0x1ec>)
 80078c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80078c2:	4b2d      	ldr	r3, [pc, #180]	@ (8007978 <HAL_UART_MspInit+0x1e8>)
 80078c4:	2202      	movs	r2, #2
 80078c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007978 <HAL_UART_MspInit+0x1e8>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078ce:	4b2a      	ldr	r3, [pc, #168]	@ (8007978 <HAL_UART_MspInit+0x1e8>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80078d4:	4b28      	ldr	r3, [pc, #160]	@ (8007978 <HAL_UART_MspInit+0x1e8>)
 80078d6:	2280      	movs	r2, #128	@ 0x80
 80078d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80078da:	4b27      	ldr	r3, [pc, #156]	@ (8007978 <HAL_UART_MspInit+0x1e8>)
 80078dc:	2200      	movs	r2, #0
 80078de:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078e0:	4b25      	ldr	r3, [pc, #148]	@ (8007978 <HAL_UART_MspInit+0x1e8>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80078e6:	4b24      	ldr	r3, [pc, #144]	@ (8007978 <HAL_UART_MspInit+0x1e8>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80078ec:	4b22      	ldr	r3, [pc, #136]	@ (8007978 <HAL_UART_MspInit+0x1e8>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80078f2:	4821      	ldr	r0, [pc, #132]	@ (8007978 <HAL_UART_MspInit+0x1e8>)
 80078f4:	f005 f93a 	bl	800cb6c <HAL_DMA_Init>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <HAL_UART_MspInit+0x172>
      Error_Handler();
 80078fe:	f7fd fc65 	bl	80051cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a1c      	ldr	r2, [pc, #112]	@ (8007978 <HAL_UART_MspInit+0x1e8>)
 8007906:	675a      	str	r2, [r3, #116]	@ 0x74
 8007908:	4a1b      	ldr	r2, [pc, #108]	@ (8007978 <HAL_UART_MspInit+0x1e8>)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800790e:	4b1c      	ldr	r3, [pc, #112]	@ (8007980 <HAL_UART_MspInit+0x1f0>)
 8007910:	4a1c      	ldr	r2, [pc, #112]	@ (8007984 <HAL_UART_MspInit+0x1f4>)
 8007912:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8007914:	4b1a      	ldr	r3, [pc, #104]	@ (8007980 <HAL_UART_MspInit+0x1f0>)
 8007916:	2202      	movs	r2, #2
 8007918:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800791a:	4b19      	ldr	r3, [pc, #100]	@ (8007980 <HAL_UART_MspInit+0x1f0>)
 800791c:	2210      	movs	r2, #16
 800791e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007920:	4b17      	ldr	r3, [pc, #92]	@ (8007980 <HAL_UART_MspInit+0x1f0>)
 8007922:	2200      	movs	r2, #0
 8007924:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007926:	4b16      	ldr	r3, [pc, #88]	@ (8007980 <HAL_UART_MspInit+0x1f0>)
 8007928:	2280      	movs	r2, #128	@ 0x80
 800792a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800792c:	4b14      	ldr	r3, [pc, #80]	@ (8007980 <HAL_UART_MspInit+0x1f0>)
 800792e:	2200      	movs	r2, #0
 8007930:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007932:	4b13      	ldr	r3, [pc, #76]	@ (8007980 <HAL_UART_MspInit+0x1f0>)
 8007934:	2200      	movs	r2, #0
 8007936:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007938:	4b11      	ldr	r3, [pc, #68]	@ (8007980 <HAL_UART_MspInit+0x1f0>)
 800793a:	2200      	movs	r2, #0
 800793c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800793e:	4b10      	ldr	r3, [pc, #64]	@ (8007980 <HAL_UART_MspInit+0x1f0>)
 8007940:	2200      	movs	r2, #0
 8007942:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007944:	480e      	ldr	r0, [pc, #56]	@ (8007980 <HAL_UART_MspInit+0x1f0>)
 8007946:	f005 f911 	bl	800cb6c <HAL_DMA_Init>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8007950:	f7fd fc3c 	bl	80051cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a0a      	ldr	r2, [pc, #40]	@ (8007980 <HAL_UART_MspInit+0x1f0>)
 8007958:	671a      	str	r2, [r3, #112]	@ 0x70
 800795a:	4a09      	ldr	r2, [pc, #36]	@ (8007980 <HAL_UART_MspInit+0x1f0>)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8007960:	bf00      	nop
 8007962:	37b8      	adds	r7, #184	@ 0xb8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	40004c00 	.word	0x40004c00
 800796c:	40021000 	.word	0x40021000
 8007970:	40013800 	.word	0x40013800
 8007974:	48000400 	.word	0x48000400
 8007978:	200006ac 	.word	0x200006ac
 800797c:	40020058 	.word	0x40020058
 8007980:	200006f4 	.word	0x200006f4
 8007984:	40020044 	.word	0x40020044

08007988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800798c:	bf00      	nop
 800798e:	e7fd      	b.n	800798c <NMI_Handler+0x4>

08007990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007990:	b480      	push	{r7}
 8007992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007994:	bf00      	nop
 8007996:	e7fd      	b.n	8007994 <HardFault_Handler+0x4>

08007998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800799c:	bf00      	nop
 800799e:	e7fd      	b.n	800799c <MemManage_Handler+0x4>

080079a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079a4:	bf00      	nop
 80079a6:	e7fd      	b.n	80079a4 <BusFault_Handler+0x4>

080079a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079ac:	bf00      	nop
 80079ae:	e7fd      	b.n	80079ac <UsageFault_Handler+0x4>

080079b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079b4:	bf00      	nop
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079be:	b480      	push	{r7}
 80079c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079c2:	bf00      	nop
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079cc:	b480      	push	{r7}
 80079ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079d0:	bf00      	nop
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079de:	f003 f983 	bl	800ace8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079e2:	bf00      	nop
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80079ec:	4802      	ldr	r0, [pc, #8]	@ (80079f8 <DMA1_Channel1_IRQHandler+0x10>)
 80079ee:	f005 fa13 	bl	800ce18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80079f2:	bf00      	nop
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	2000027c 	.word	0x2000027c

080079fc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007a00:	4802      	ldr	r0, [pc, #8]	@ (8007a0c <DMA1_Channel4_IRQHandler+0x10>)
 8007a02:	f005 fa09 	bl	800ce18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007a06:	bf00      	nop
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	200006f4 	.word	0x200006f4

08007a10 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007a14:	4802      	ldr	r0, [pc, #8]	@ (8007a20 <DMA1_Channel5_IRQHandler+0x10>)
 8007a16:	f005 f9ff 	bl	800ce18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8007a1a:	bf00      	nop
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	200006ac 	.word	0x200006ac

08007a24 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8007a28:	4802      	ldr	r0, [pc, #8]	@ (8007a34 <RTC_Alarm_IRQHandler+0x10>)
 8007a2a:	f009 fc15 	bl	8011258 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8007a2e:	bf00      	nop
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20000380 	.word	0x20000380

08007a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007a40:	4a14      	ldr	r2, [pc, #80]	@ (8007a94 <_sbrk+0x5c>)
 8007a42:	4b15      	ldr	r3, [pc, #84]	@ (8007a98 <_sbrk+0x60>)
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a4c:	4b13      	ldr	r3, [pc, #76]	@ (8007a9c <_sbrk+0x64>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d102      	bne.n	8007a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007a54:	4b11      	ldr	r3, [pc, #68]	@ (8007a9c <_sbrk+0x64>)
 8007a56:	4a12      	ldr	r2, [pc, #72]	@ (8007aa0 <_sbrk+0x68>)
 8007a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007a5a:	4b10      	ldr	r3, [pc, #64]	@ (8007a9c <_sbrk+0x64>)
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4413      	add	r3, r2
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d207      	bcs.n	8007a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a68:	f00e fa52 	bl	8015f10 <__errno>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	220c      	movs	r2, #12
 8007a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007a72:	f04f 33ff 	mov.w	r3, #4294967295
 8007a76:	e009      	b.n	8007a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a78:	4b08      	ldr	r3, [pc, #32]	@ (8007a9c <_sbrk+0x64>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a7e:	4b07      	ldr	r3, [pc, #28]	@ (8007a9c <_sbrk+0x64>)
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4413      	add	r3, r2
 8007a86:	4a05      	ldr	r2, [pc, #20]	@ (8007a9c <_sbrk+0x64>)
 8007a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20018000 	.word	0x20018000
 8007a98:	00000400 	.word	0x00000400
 8007a9c:	20005cf8 	.word	0x20005cf8
 8007aa0:	20005e58 	.word	0x20005e58

08007aa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007aa8:	4b06      	ldr	r3, [pc, #24]	@ (8007ac4 <SystemInit+0x20>)
 8007aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aae:	4a05      	ldr	r2, [pc, #20]	@ (8007ac4 <SystemInit+0x20>)
 8007ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8007ab8:	bf00      	nop
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	e000ed00 	.word	0xe000ed00

08007ac8 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	switch (pdrv) {
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <disk_status+0x16>
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d00c      	beq.n	8007af6 <disk_status+0x2e>
 8007adc:	e017      	b.n	8007b0e <disk_status+0x46>
	case DEV_RAM :

		if(!psram_is_initialized())
 8007ade:	f7ff fa9b 	bl	8007018 <psram_is_initialized>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <disk_status+0x26>
		{
			stat = STA_NOINIT;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	73fb      	strb	r3, [r7, #15]
 8007aec:	e001      	b.n	8007af2 <disk_status+0x2a>
		}else{
			stat = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
 8007af4:	e00c      	b.n	8007b10 <disk_status+0x48>

	case DEV_MMC :

		if(!extflash_is_initialized())
 8007af6:	f7fb fa39 	bl	8002f6c <extflash_is_initialized>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <disk_status+0x3e>
		{
			stat = STA_NOINIT;
 8007b00:	2301      	movs	r3, #1
 8007b02:	73fb      	strb	r3, [r7, #15]
 8007b04:	e001      	b.n	8007b0a <disk_status+0x42>
		}else{
			stat = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	e000      	b.n	8007b10 <disk_status+0x48>

	}
	return STA_NOINIT;
 8007b0e:	2301      	movs	r3, #1
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	switch (pdrv) {
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <disk_initialize+0x16>
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d00c      	beq.n	8007b46 <disk_initialize+0x2e>
 8007b2c:	e017      	b.n	8007b5e <disk_initialize+0x46>
	case DEV_RAM :

		if(psram_init() < 0)
 8007b2e:	f7ff faa1 	bl	8007074 <psram_init>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	da02      	bge.n	8007b3e <disk_initialize+0x26>
		{
			stat = STA_NODISK;
 8007b38:	2302      	movs	r3, #2
 8007b3a:	73fb      	strb	r3, [r7, #15]
 8007b3c:	e001      	b.n	8007b42 <disk_initialize+0x2a>
		}else{
			stat = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
 8007b44:	e00c      	b.n	8007b60 <disk_initialize+0x48>

	case DEV_MMC :

		if(extflash_init() < 0)
 8007b46:	f7fb fa1d 	bl	8002f84 <extflash_init>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	da02      	bge.n	8007b56 <disk_initialize+0x3e>
		{
			stat = STA_NODISK;
 8007b50:	2302      	movs	r3, #2
 8007b52:	73fb      	strb	r3, [r7, #15]
 8007b54:	e001      	b.n	8007b5a <disk_initialize+0x42>
		}else{
			stat = 0;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73fb      	strb	r3, [r7, #15]
		}

		return stat;
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
 8007b5c:	e000      	b.n	8007b60 <disk_initialize+0x48>

	}
	return STA_NOINIT;
 8007b5e:	2301      	movs	r3, #1
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60b9      	str	r1, [r7, #8]
 8007b70:	607a      	str	r2, [r7, #4]
 8007b72:	603b      	str	r3, [r7, #0]
 8007b74:	4603      	mov	r3, r0
 8007b76:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	int result;

	switch (pdrv) {
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <disk_read+0x1c>
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d010      	beq.n	8007ba4 <disk_read+0x3c>
 8007b82:	e01e      	b.n	8007bc2 <disk_read+0x5a>
	case DEV_RAM :

		if(psram_sector_read_write(0, sector, count, buff) < 0)
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	6879      	ldr	r1, [r7, #4]
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	f7ff f94a 	bl	8006e24 <psram_sector_read_write>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	da02      	bge.n	8007b9c <disk_read+0x34>
		{
			res = RES_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	75fb      	strb	r3, [r7, #23]
 8007b9a:	e001      	b.n	8007ba0 <disk_read+0x38>
		}else{

			res = 0;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	e00f      	b.n	8007bc4 <disk_read+0x5c>

	case DEV_MMC :

		if(extflash_sector_read(sector, count, buff) < 0)
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7fb f8c3 	bl	8002d34 <extflash_sector_read>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	da02      	bge.n	8007bba <disk_read+0x52>
		{
			res = RES_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	75fb      	strb	r3, [r7, #23]
 8007bb8:	e001      	b.n	8007bbe <disk_read+0x56>
		}else{

			res = 0;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	e000      	b.n	8007bc4 <disk_read+0x5c>

	}

	return RES_PARERR;
 8007bc2:	2304      	movs	r3, #4
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	607a      	str	r2, [r7, #4]
 8007bd6:	603b      	str	r3, [r7, #0]
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73fb      	strb	r3, [r7, #15]
	DRESULT res = RES_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	75fb      	strb	r3, [r7, #23]

	switch (pdrv) {
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <disk_write+0x20>
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d010      	beq.n	8007c0c <disk_write+0x40>
 8007bea:	e01e      	b.n	8007c2a <disk_write+0x5e>
	case DEV_RAM :

		if(psram_sector_read_write(1, sector, count, (const uint8_t *)buff) < 0)
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	6879      	ldr	r1, [r7, #4]
 8007bf2:	2001      	movs	r0, #1
 8007bf4:	f7ff f916 	bl	8006e24 <psram_sector_read_write>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	da02      	bge.n	8007c04 <disk_write+0x38>
		{
			res = RES_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	75fb      	strb	r3, [r7, #23]
 8007c02:	e001      	b.n	8007c08 <disk_write+0x3c>
		}else{

			res = 0;
 8007c04:	2300      	movs	r3, #0
 8007c06:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	e00f      	b.n	8007c2c <disk_write+0x60>

	case DEV_MMC :

		if(extflash_sector_write(sector, count, buff) < 0)
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7fb f924 	bl	8002e5e <extflash_sector_write>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	da02      	bge.n	8007c22 <disk_write+0x56>
		{
			res = RES_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	75fb      	strb	r3, [r7, #23]
 8007c20:	e001      	b.n	8007c26 <disk_write+0x5a>
		}else{

			res = 0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	75fb      	strb	r3, [r7, #23]
		}

		return res;
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	e000      	b.n	8007c2c <disk_write+0x60>

	}

	return RES_PARERR;
 8007c2a:	2304      	movs	r3, #4
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	603a      	str	r2, [r7, #0]
 8007c3e:	71fb      	strb	r3, [r7, #7]
 8007c40:	460b      	mov	r3, r1
 8007c42:	71bb      	strb	r3, [r7, #6]
	DRESULT res = RES_PARERR;
 8007c44:	2304      	movs	r3, #4
 8007c46:	73fb      	strb	r3, [r7, #15]

	switch (pdrv) {
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <disk_ioctl+0x20>
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d036      	beq.n	8007cc0 <disk_ioctl+0x8c>
 8007c52:	e06b      	b.n	8007d2c <disk_ioctl+0xf8>
	case DEV_RAM :

		if(!psram_is_initialized())return RES_NOTRDY;
 8007c54:	f7ff f9e0 	bl	8007018 <psram_is_initialized>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <disk_ioctl+0x2e>
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e065      	b.n	8007d2e <disk_ioctl+0xfa>

		switch(cmd)
 8007c62:	79bb      	ldrb	r3, [r7, #6]
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	d826      	bhi.n	8007cb6 <disk_ioctl+0x82>
 8007c68:	a201      	add	r2, pc, #4	@ (adr r2, 8007c70 <disk_ioctl+0x3c>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007cb1 	.word	0x08007cb1
 8007c74:	08007c85 	.word	0x08007c85
 8007c78:	08007c95 	.word	0x08007c95
 8007c7c:	08007ca5 	.word	0x08007ca5
 8007c80:	08007cb1 	.word	0x08007cb1
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = psram_get_sector_count();
 8007c84:	f7ff f9de 	bl	8007044 <psram_get_sector_count>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	601a      	str	r2, [r3, #0]
				res = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73fb      	strb	r3, [r7, #15]
				break;
 8007c92:	e013      	b.n	8007cbc <disk_ioctl+0x88>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = psram_get_sector_size();
 8007c94:	f7ff f9cc 	bl	8007030 <psram_get_sector_size>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	601a      	str	r2, [r3, #0]
				res = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]
				break;
 8007ca2:	e00b      	b.n	8007cbc <disk_ioctl+0x88>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]
				res = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	73fb      	strb	r3, [r7, #15]
				break;
 8007cae:	e005      	b.n	8007cbc <disk_ioctl+0x88>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	73fb      	strb	r3, [r7, #15]
				break;
 8007cb4:	e002      	b.n	8007cbc <disk_ioctl+0x88>

			default:
				res = RES_PARERR;
 8007cb6:	2304      	movs	r3, #4
 8007cb8:	73fb      	strb	r3, [r7, #15]
				break;
 8007cba:	bf00      	nop
		}

		return res;
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	e036      	b.n	8007d2e <disk_ioctl+0xfa>

	case DEV_MMC :

		if(!extflash_is_initialized())return RES_NOTRDY;
 8007cc0:	f7fb f954 	bl	8002f6c <extflash_is_initialized>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <disk_ioctl+0x9a>
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e02f      	b.n	8007d2e <disk_ioctl+0xfa>

		switch(cmd)
 8007cce:	79bb      	ldrb	r3, [r7, #6]
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d826      	bhi.n	8007d22 <disk_ioctl+0xee>
 8007cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cdc <disk_ioctl+0xa8>)
 8007cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cda:	bf00      	nop
 8007cdc:	08007d1d 	.word	0x08007d1d
 8007ce0:	08007cf1 	.word	0x08007cf1
 8007ce4:	08007d01 	.word	0x08007d01
 8007ce8:	08007d11 	.word	0x08007d11
 8007cec:	08007d1d 	.word	0x08007d1d
		{
			case GET_SECTOR_COUNT:

				*((uint32_t *)buff) = extflash_get_sector_count();
 8007cf0:	f7fb f930 	bl	8002f54 <extflash_get_sector_count>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	601a      	str	r2, [r3, #0]
				res = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73fb      	strb	r3, [r7, #15]
				break;
 8007cfe:	e013      	b.n	8007d28 <disk_ioctl+0xf4>

			case GET_SECTOR_SIZE:

				*((uint32_t *)buff) = extflash_get_sector_size();
 8007d00:	f7fb f91f 	bl	8002f42 <extflash_get_sector_size>
 8007d04:	4602      	mov	r2, r0
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	601a      	str	r2, [r3, #0]
				res = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]
				break;
 8007d0e:	e00b      	b.n	8007d28 <disk_ioctl+0xf4>

			case GET_BLOCK_SIZE:

				*((uint32_t *)buff) = 1; //Default
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2201      	movs	r2, #1
 8007d14:	601a      	str	r2, [r3, #0]
				res = 0;
 8007d16:	2300      	movs	r3, #0
 8007d18:	73fb      	strb	r3, [r7, #15]
				break;
 8007d1a:	e005      	b.n	8007d28 <disk_ioctl+0xf4>

			case CTRL_TRIM:
			case CTRL_SYNC:

				res = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
				break;
 8007d20:	e002      	b.n	8007d28 <disk_ioctl+0xf4>

			default:
				res = RES_PARERR;
 8007d22:	2304      	movs	r3, #4
 8007d24:	73fb      	strb	r3, [r7, #15]
				break;
 8007d26:	bf00      	nop
		}

		return res;
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	e000      	b.n	8007d2e <disk_ioctl+0xfa>

	}

	return RES_PARERR;
 8007d2c:	2304      	movs	r3, #4
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop

08007d38 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3301      	adds	r3, #1
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007d48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	b21a      	sxth	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	b21b      	sxth	r3, r3
 8007d56:	4313      	orrs	r3, r2
 8007d58:	b21b      	sxth	r3, r3
 8007d5a:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007d5c:	89fb      	ldrh	r3, [r7, #14]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b085      	sub	sp, #20
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	3303      	adds	r3, #3
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	021b      	lsls	r3, r3, #8
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	3202      	adds	r2, #2
 8007d82:	7812      	ldrb	r2, [r2, #0]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	021b      	lsls	r3, r3, #8
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	3201      	adds	r2, #1
 8007d90:	7812      	ldrb	r2, [r2, #0]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	7812      	ldrb	r2, [r2, #0]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60fb      	str	r3, [r7, #12]
	return rv;
 8007da2:	68fb      	ldr	r3, [r7, #12]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	1c5a      	adds	r2, r3, #1
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	887a      	ldrh	r2, [r7, #2]
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	701a      	strb	r2, [r3, #0]
 8007dc8:	887b      	ldrh	r3, [r7, #2]
 8007dca:	0a1b      	lsrs	r3, r3, #8
 8007dcc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	887a      	ldrh	r2, [r7, #2]
 8007dd6:	b2d2      	uxtb	r2, r2
 8007dd8:	701a      	strb	r2, [r3, #0]
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	1c5a      	adds	r2, r3, #1
 8007df4:	607a      	str	r2, [r7, #4]
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	b2d2      	uxtb	r2, r2
 8007dfa:	701a      	strb	r2, [r3, #0]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	0a1b      	lsrs	r3, r3, #8
 8007e00:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	1c5a      	adds	r2, r3, #1
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	b2d2      	uxtb	r2, r2
 8007e0c:	701a      	strb	r2, [r3, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	0a1b      	lsrs	r3, r3, #8
 8007e12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	607a      	str	r2, [r7, #4]
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	b2d2      	uxtb	r2, r2
 8007e1e:	701a      	strb	r2, [r3, #0]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	0a1b      	lsrs	r3, r3, #8
 8007e24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	607a      	str	r2, [r7, #4]
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	b2d2      	uxtb	r2, r2
 8007e30:	701a      	strb	r2, [r3, #0]
}
 8007e32:	bf00      	nop
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b083      	sub	sp, #12
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	4603      	mov	r3, r0
 8007e46:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <dbc_1st+0x14>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e000      	b.n	8007e54 <dbc_1st+0x16>
#endif
	return 0;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8007e6a:	79fb      	ldrb	r3, [r7, #7]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <dbc_2nd+0x14>
 8007e70:	2300      	movs	r3, #0
 8007e72:	e000      	b.n	8007e76 <dbc_2nd+0x16>
#endif
	return 0;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	791b      	ldrb	r3, [r3, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d02c      	beq.n	8007ef0 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	7858      	ldrb	r0, [r3, #1]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f7ff fe91 	bl	8007bcc <disk_write>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d11d      	bne.n	8007eec <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d213      	bcs.n	8007ef0 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	78db      	ldrb	r3, [r3, #3]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d10f      	bne.n	8007ef0 <sync_window+0x6e>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	7858      	ldrb	r0, [r3, #1]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	441a      	add	r2, r3
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f7ff fe71 	bl	8007bcc <disk_write>
 8007eea:	e001      	b.n	8007ef0 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d01b      	beq.n	8007f4a <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7ff ffb5 	bl	8007e82 <sync_window>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d113      	bne.n	8007f4a <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	7858      	ldrb	r0, [r3, #1]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	f7ff fe1a 	bl	8007b68 <disk_read>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d004      	beq.n	8007f44 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8007f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff ff90 	bl	8007e82 <sync_window>
 8007f62:	4603      	mov	r3, r0
 8007f64:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d158      	bne.n	800801e <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d148      	bne.n	8008006 <sync_fs+0xb2>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	795b      	ldrb	r3, [r3, #5]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d144      	bne.n	8008006 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3334      	adds	r3, #52	@ 0x34
 8007f80:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007f84:	2100      	movs	r1, #0
 8007f86:	4618      	mov	r0, r3
 8007f88:	f00d ff72 	bl	8015e70 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3334      	adds	r3, #52	@ 0x34
 8007f90:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007f94:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff ff09 	bl	8007db0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3334      	adds	r3, #52	@ 0x34
 8007fa2:	4921      	ldr	r1, [pc, #132]	@ (8008028 <sync_fs+0xd4>)
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7ff ff1e 	bl	8007de6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	3334      	adds	r3, #52	@ 0x34
 8007fae:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007fb2:	491e      	ldr	r1, [pc, #120]	@ (800802c <sync_fs+0xd8>)
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff ff16 	bl	8007de6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3334      	adds	r3, #52	@ 0x34
 8007fbe:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4610      	mov	r0, r2
 8007fca:	f7ff ff0c 	bl	8007de6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3334      	adds	r3, #52	@ 0x34
 8007fd2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	4610      	mov	r0, r2
 8007fde:	f7ff ff02 	bl	8007de6 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	1c5a      	adds	r2, r3, #1
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	7858      	ldrb	r0, [r3, #1]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	f7ff fde6 	bl	8007bcc <disk_write>
			fs->fsi_flag = 0;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	2200      	movs	r2, #0
 800800c:	2100      	movs	r1, #0
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff fe10 	bl	8007c34 <disk_ioctl>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <sync_fs+0xca>
 800801a:	2301      	movs	r3, #1
 800801c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800801e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	41615252 	.word	0x41615252
 800802c:	61417272 	.word	0x61417272

08008030 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	3b02      	subs	r3, #2
 800803e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	3b02      	subs	r3, #2
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	429a      	cmp	r2, r3
 800804a:	d301      	bcc.n	8008050 <clst2sect+0x20>
 800804c:	2300      	movs	r3, #0
 800804e:	e008      	b.n	8008062 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	895b      	ldrh	r3, [r3, #10]
 8008058:	4619      	mov	r1, r3
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	fb01 f303 	mul.w	r3, r1, r3
 8008060:	4413      	add	r3, r2
}
 8008062:	4618      	mov	r0, r3
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b086      	sub	sp, #24
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d904      	bls.n	800808e <get_fat+0x20>
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	429a      	cmp	r2, r3
 800808c:	d302      	bcc.n	8008094 <get_fat+0x26>
		val = 1;	/* Internal error */
 800808e:	2301      	movs	r3, #1
 8008090:	617b      	str	r3, [r7, #20]
 8008092:	e0ba      	b.n	800820a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008094:	f04f 33ff 	mov.w	r3, #4294967295
 8008098:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b03      	cmp	r3, #3
 80080a0:	f000 8082 	beq.w	80081a8 <get_fat+0x13a>
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	f300 80a6 	bgt.w	80081f6 <get_fat+0x188>
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d002      	beq.n	80080b4 <get_fat+0x46>
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d055      	beq.n	800815e <get_fat+0xf0>
 80080b2:	e0a0      	b.n	80081f6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	085b      	lsrs	r3, r3, #1
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	4413      	add	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	899b      	ldrh	r3, [r3, #12]
 80080ca:	4619      	mov	r1, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80080d2:	4413      	add	r3, r2
 80080d4:	4619      	mov	r1, r3
 80080d6:	6938      	ldr	r0, [r7, #16]
 80080d8:	f7ff ff0f 	bl	8007efa <move_window>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f040 808c 	bne.w	80081fc <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	60fa      	str	r2, [r7, #12]
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	8992      	ldrh	r2, [r2, #12]
 80080ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80080f2:	fb01 f202 	mul.w	r2, r1, r2
 80080f6:	1a9b      	subs	r3, r3, r2
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	4413      	add	r3, r2
 80080fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008100:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	899b      	ldrh	r3, [r3, #12]
 800810a:	4619      	mov	r1, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008112:	4413      	add	r3, r2
 8008114:	4619      	mov	r1, r3
 8008116:	6938      	ldr	r0, [r7, #16]
 8008118:	f7ff feef 	bl	8007efa <move_window>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d16e      	bne.n	8008200 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	899b      	ldrh	r3, [r3, #12]
 8008126:	461a      	mov	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	fbb3 f1f2 	udiv	r1, r3, r2
 800812e:	fb01 f202 	mul.w	r2, r1, r2
 8008132:	1a9b      	subs	r3, r3, r2
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	4413      	add	r3, r2
 8008138:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800813c:	021b      	lsls	r3, r3, #8
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	4313      	orrs	r3, r2
 8008142:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <get_fat+0xe6>
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	091b      	lsrs	r3, r3, #4
 8008152:	e002      	b.n	800815a <get_fat+0xec>
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800815a:	617b      	str	r3, [r7, #20]
			break;
 800815c:	e055      	b.n	800820a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	899b      	ldrh	r3, [r3, #12]
 8008166:	085b      	lsrs	r3, r3, #1
 8008168:	b29b      	uxth	r3, r3
 800816a:	4619      	mov	r1, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008172:	4413      	add	r3, r2
 8008174:	4619      	mov	r1, r3
 8008176:	6938      	ldr	r0, [r7, #16]
 8008178:	f7ff febf 	bl	8007efa <move_window>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d140      	bne.n	8008204 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	8992      	ldrh	r2, [r2, #12]
 8008190:	fbb3 f0f2 	udiv	r0, r3, r2
 8008194:	fb00 f202 	mul.w	r2, r0, r2
 8008198:	1a9b      	subs	r3, r3, r2
 800819a:	440b      	add	r3, r1
 800819c:	4618      	mov	r0, r3
 800819e:	f7ff fdcb 	bl	8007d38 <ld_word>
 80081a2:	4603      	mov	r3, r0
 80081a4:	617b      	str	r3, [r7, #20]
			break;
 80081a6:	e030      	b.n	800820a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	899b      	ldrh	r3, [r3, #12]
 80081b0:	089b      	lsrs	r3, r3, #2
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	4619      	mov	r1, r3
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80081bc:	4413      	add	r3, r2
 80081be:	4619      	mov	r1, r3
 80081c0:	6938      	ldr	r0, [r7, #16]
 80081c2:	f7ff fe9a 	bl	8007efa <move_window>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d11d      	bne.n	8008208 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	8992      	ldrh	r2, [r2, #12]
 80081da:	fbb3 f0f2 	udiv	r0, r3, r2
 80081de:	fb00 f202 	mul.w	r2, r0, r2
 80081e2:	1a9b      	subs	r3, r3, r2
 80081e4:	440b      	add	r3, r1
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff fdbf 	bl	8007d6a <ld_dword>
 80081ec:	4603      	mov	r3, r0
 80081ee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80081f2:	617b      	str	r3, [r7, #20]
			break;
 80081f4:	e009      	b.n	800820a <get_fat+0x19c>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 80081f6:	2301      	movs	r3, #1
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	e006      	b.n	800820a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80081fc:	bf00      	nop
 80081fe:	e004      	b.n	800820a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008200:	bf00      	nop
 8008202:	e002      	b.n	800820a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008204:	bf00      	nop
 8008206:	e000      	b.n	800820a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008208:	bf00      	nop
		}
	}

	return val;
 800820a:	697b      	ldr	r3, [r7, #20]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008214:	b590      	push	{r4, r7, lr}
 8008216:	b089      	sub	sp, #36	@ 0x24
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008220:	2302      	movs	r3, #2
 8008222:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b01      	cmp	r3, #1
 8008228:	f240 8109 	bls.w	800843e <put_fat+0x22a>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	429a      	cmp	r2, r3
 8008234:	f080 8103 	bcs.w	800843e <put_fat+0x22a>
		switch (fs->fs_type) {
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	2b03      	cmp	r3, #3
 800823e:	f000 80b6 	beq.w	80083ae <put_fat+0x19a>
 8008242:	2b03      	cmp	r3, #3
 8008244:	f300 80fb 	bgt.w	800843e <put_fat+0x22a>
 8008248:	2b01      	cmp	r3, #1
 800824a:	d003      	beq.n	8008254 <put_fat+0x40>
 800824c:	2b02      	cmp	r3, #2
 800824e:	f000 8083 	beq.w	8008358 <put_fat+0x144>
 8008252:	e0f4      	b.n	800843e <put_fat+0x22a>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	61bb      	str	r3, [r7, #24]
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	085b      	lsrs	r3, r3, #1
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	4413      	add	r3, r2
 8008260:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	899b      	ldrh	r3, [r3, #12]
 800826a:	4619      	mov	r1, r3
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008272:	4413      	add	r3, r2
 8008274:	4619      	mov	r1, r3
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f7ff fe3f 	bl	8007efa <move_window>
 800827c:	4603      	mov	r3, r0
 800827e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008280:	7ffb      	ldrb	r3, [r7, #31]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f040 80d4 	bne.w	8008430 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	61ba      	str	r2, [r7, #24]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	8992      	ldrh	r2, [r2, #12]
 8008298:	fbb3 f0f2 	udiv	r0, r3, r2
 800829c:	fb00 f202 	mul.w	r2, r0, r2
 80082a0:	1a9b      	subs	r3, r3, r2
 80082a2:	440b      	add	r3, r1
 80082a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00d      	beq.n	80082cc <put_fat+0xb8>
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	b25b      	sxtb	r3, r3
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	b25a      	sxtb	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	b25b      	sxtb	r3, r3
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	b25b      	sxtb	r3, r3
 80082c4:	4313      	orrs	r3, r2
 80082c6:	b25b      	sxtb	r3, r3
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	e001      	b.n	80082d0 <put_fat+0xbc>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2201      	movs	r2, #1
 80082d8:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	899b      	ldrh	r3, [r3, #12]
 80082e2:	4619      	mov	r1, r3
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80082ea:	4413      	add	r3, r2
 80082ec:	4619      	mov	r1, r3
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f7ff fe03 	bl	8007efa <move_window>
 80082f4:	4603      	mov	r3, r0
 80082f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80082f8:	7ffb      	ldrb	r3, [r7, #31]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f040 809a 	bne.w	8008434 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	899b      	ldrh	r3, [r3, #12]
 800830a:	461a      	mov	r2, r3
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008312:	fb00 f202 	mul.w	r2, r0, r2
 8008316:	1a9b      	subs	r3, r3, r2
 8008318:	440b      	add	r3, r1
 800831a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <put_fat+0x11a>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	091b      	lsrs	r3, r3, #4
 800832a:	b2db      	uxtb	r3, r3
 800832c:	e00e      	b.n	800834c <put_fat+0x138>
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	b25b      	sxtb	r3, r3
 8008334:	f023 030f 	bic.w	r3, r3, #15
 8008338:	b25a      	sxtb	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	0a1b      	lsrs	r3, r3, #8
 800833e:	b25b      	sxtb	r3, r3
 8008340:	f003 030f 	and.w	r3, r3, #15
 8008344:	b25b      	sxtb	r3, r3
 8008346:	4313      	orrs	r3, r2
 8008348:	b25b      	sxtb	r3, r3
 800834a:	b2db      	uxtb	r3, r3
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2201      	movs	r2, #1
 8008354:	711a      	strb	r2, [r3, #4]
			break;
 8008356:	e072      	b.n	800843e <put_fat+0x22a>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	899b      	ldrh	r3, [r3, #12]
 8008360:	085b      	lsrs	r3, r3, #1
 8008362:	b29b      	uxth	r3, r3
 8008364:	4619      	mov	r1, r3
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	fbb3 f3f1 	udiv	r3, r3, r1
 800836c:	4413      	add	r3, r2
 800836e:	4619      	mov	r1, r3
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f7ff fdc2 	bl	8007efa <move_window>
 8008376:	4603      	mov	r3, r0
 8008378:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800837a:	7ffb      	ldrb	r3, [r7, #31]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d15b      	bne.n	8008438 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	005b      	lsls	r3, r3, #1
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	8992      	ldrh	r2, [r2, #12]
 800838e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008392:	fb00 f202 	mul.w	r2, r0, r2
 8008396:	1a9b      	subs	r3, r3, r2
 8008398:	440b      	add	r3, r1
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	b292      	uxth	r2, r2
 800839e:	4611      	mov	r1, r2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff fd05 	bl	8007db0 <st_word>
			fs->wflag = 1;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2201      	movs	r2, #1
 80083aa:	711a      	strb	r2, [r3, #4]
			break;
 80083ac:	e047      	b.n	800843e <put_fat+0x22a>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	899b      	ldrh	r3, [r3, #12]
 80083b6:	089b      	lsrs	r3, r3, #2
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	4619      	mov	r1, r3
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	fbb3 f3f1 	udiv	r3, r3, r1
 80083c2:	4413      	add	r3, r2
 80083c4:	4619      	mov	r1, r3
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f7ff fd97 	bl	8007efa <move_window>
 80083cc:	4603      	mov	r3, r0
 80083ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083d0:	7ffb      	ldrb	r3, [r7, #31]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d132      	bne.n	800843c <put_fat+0x228>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	8992      	ldrh	r2, [r2, #12]
 80083ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80083ee:	fb00 f202 	mul.w	r2, r0, r2
 80083f2:	1a9b      	subs	r3, r3, r2
 80083f4:	440b      	add	r3, r1
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff fcb7 	bl	8007d6a <ld_dword>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008402:	4323      	orrs	r3, r4
 8008404:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	8992      	ldrh	r2, [r2, #12]
 8008414:	fbb3 f0f2 	udiv	r0, r3, r2
 8008418:	fb00 f202 	mul.w	r2, r0, r2
 800841c:	1a9b      	subs	r3, r3, r2
 800841e:	440b      	add	r3, r1
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff fcdf 	bl	8007de6 <st_dword>
			fs->wflag = 1;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2201      	movs	r2, #1
 800842c:	711a      	strb	r2, [r3, #4]
			break;
 800842e:	e006      	b.n	800843e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008430:	bf00      	nop
 8008432:	e004      	b.n	800843e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008434:	bf00      	nop
 8008436:	e002      	b.n	800843e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008438:	bf00      	nop
 800843a:	e000      	b.n	800843e <put_fat+0x22a>
			if (res != FR_OK) break;
 800843c:	bf00      	nop
		}
	}
	return res;
 800843e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3724      	adds	r7, #36	@ 0x24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd90      	pop	{r4, r7, pc}

08008448 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d904      	bls.n	800846e <remove_chain+0x26>
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	429a      	cmp	r2, r3
 800846c:	d301      	bcc.n	8008472 <remove_chain+0x2a>
 800846e:	2302      	movs	r3, #2
 8008470:	e04b      	b.n	800850a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00c      	beq.n	8008492 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008478:	f04f 32ff 	mov.w	r2, #4294967295
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	69b8      	ldr	r0, [r7, #24]
 8008480:	f7ff fec8 	bl	8008214 <put_fat>
 8008484:	4603      	mov	r3, r0
 8008486:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008488:	7ffb      	ldrb	r3, [r7, #31]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <remove_chain+0x4a>
 800848e:	7ffb      	ldrb	r3, [r7, #31]
 8008490:	e03b      	b.n	800850a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008492:	68b9      	ldr	r1, [r7, #8]
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f7ff fdea 	bl	800806e <get_fat>
 800849a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d031      	beq.n	8008506 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d101      	bne.n	80084ac <remove_chain+0x64>
 80084a8:	2302      	movs	r3, #2
 80084aa:	e02e      	b.n	800850a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b2:	d101      	bne.n	80084b8 <remove_chain+0x70>
 80084b4:	2301      	movs	r3, #1
 80084b6:	e028      	b.n	800850a <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80084b8:	2200      	movs	r2, #0
 80084ba:	68b9      	ldr	r1, [r7, #8]
 80084bc:	69b8      	ldr	r0, [r7, #24]
 80084be:	f7ff fea9 	bl	8008214 <put_fat>
 80084c2:	4603      	mov	r3, r0
 80084c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80084c6:	7ffb      	ldrb	r3, [r7, #31]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <remove_chain+0x88>
 80084cc:	7ffb      	ldrb	r3, [r7, #31]
 80084ce:	e01c      	b.n	800850a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	695a      	ldr	r2, [r3, #20]
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	3b02      	subs	r3, #2
 80084da:	429a      	cmp	r2, r3
 80084dc:	d20b      	bcs.n	80084f6 <remove_chain+0xae>
			fs->free_clst++;
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	795b      	ldrb	r3, [r3, #5]
 80084ec:	f043 0301 	orr.w	r3, r3, #1
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	429a      	cmp	r2, r3
 8008502:	d3c6      	bcc.n	8008492 <remove_chain+0x4a>
 8008504:	e000      	b.n	8008508 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008506:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3720      	adds	r7, #32
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b088      	sub	sp, #32
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d10d      	bne.n	8008544 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d004      	beq.n	800853e <create_chain+0x2c>
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	429a      	cmp	r2, r3
 800853c:	d31b      	bcc.n	8008576 <create_chain+0x64>
 800853e:	2301      	movs	r3, #1
 8008540:	61bb      	str	r3, [r7, #24]
 8008542:	e018      	b.n	8008576 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7ff fd91 	bl	800806e <get_fat>
 800854c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d801      	bhi.n	8008558 <create_chain+0x46>
 8008554:	2301      	movs	r3, #1
 8008556:	e0a9      	b.n	80086ac <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855e:	d101      	bne.n	8008564 <create_chain+0x52>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	e0a3      	b.n	80086ac <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	429a      	cmp	r2, r3
 800856c:	d201      	bcs.n	8008572 <create_chain+0x60>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	e09c      	b.n	80086ac <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <create_chain+0x70>
 800857e:	2300      	movs	r3, #0
 8008580:	e094      	b.n	80086ac <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	429a      	cmp	r2, r3
 800858c:	d129      	bne.n	80085e2 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	3301      	adds	r3, #1
 8008592:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	69fa      	ldr	r2, [r7, #28]
 800859a:	429a      	cmp	r2, r3
 800859c:	d301      	bcc.n	80085a2 <create_chain+0x90>
 800859e:	2302      	movs	r3, #2
 80085a0:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 80085a2:	69f9      	ldr	r1, [r7, #28]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7ff fd62 	bl	800806e <get_fat>
 80085aa:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d003      	beq.n	80085ba <create_chain+0xa8>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b8:	d101      	bne.n	80085be <create_chain+0xac>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	e076      	b.n	80086ac <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00e      	beq.n	80085e2 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d906      	bls.n	80085de <create_chain+0xcc>
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d201      	bcs.n	80085de <create_chain+0xcc>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d129      	bne.n	800863c <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	3301      	adds	r3, #1
 80085f0:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	69fa      	ldr	r2, [r7, #28]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d307      	bcc.n	800860c <create_chain+0xfa>
					ncl = 2;
 80085fc:	2302      	movs	r3, #2
 80085fe:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8008600:	69fa      	ldr	r2, [r7, #28]
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	429a      	cmp	r2, r3
 8008606:	d901      	bls.n	800860c <create_chain+0xfa>
 8008608:	2300      	movs	r3, #0
 800860a:	e04f      	b.n	80086ac <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800860c:	69f9      	ldr	r1, [r7, #28]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7ff fd2d 	bl	800806e <get_fat>
 8008614:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00e      	beq.n	800863a <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d003      	beq.n	800862a <create_chain+0x118>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008628:	d101      	bne.n	800862e <create_chain+0x11c>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	e03e      	b.n	80086ac <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800862e:	69fa      	ldr	r2, [r7, #28]
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	429a      	cmp	r2, r3
 8008634:	d1da      	bne.n	80085ec <create_chain+0xda>
 8008636:	2300      	movs	r3, #0
 8008638:	e038      	b.n	80086ac <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 800863a:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800863c:	f04f 32ff 	mov.w	r2, #4294967295
 8008640:	69f9      	ldr	r1, [r7, #28]
 8008642:	6938      	ldr	r0, [r7, #16]
 8008644:	f7ff fde6 	bl	8008214 <put_fat>
 8008648:	4603      	mov	r3, r0
 800864a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d109      	bne.n	8008666 <create_chain+0x154>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d006      	beq.n	8008666 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8008658:	69fa      	ldr	r2, [r7, #28]
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6938      	ldr	r0, [r7, #16]
 800865e:	f7ff fdd9 	bl	8008214 <put_fat>
 8008662:	4603      	mov	r3, r0
 8008664:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008666:	7dfb      	ldrb	r3, [r7, #23]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d116      	bne.n	800869a <create_chain+0x188>
		fs->last_clst = ncl;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	69fa      	ldr	r2, [r7, #28]
 8008670:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	695a      	ldr	r2, [r3, #20]
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	3b02      	subs	r3, #2
 800867c:	429a      	cmp	r2, r3
 800867e:	d804      	bhi.n	800868a <create_chain+0x178>
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	1e5a      	subs	r2, r3, #1
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	795b      	ldrb	r3, [r3, #5]
 800868e:	f043 0301 	orr.w	r3, r3, #1
 8008692:	b2da      	uxtb	r2, r3
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	715a      	strb	r2, [r3, #5]
 8008698:	e007      	b.n	80086aa <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d102      	bne.n	80086a6 <create_chain+0x194>
 80086a0:	f04f 33ff 	mov.w	r3, #4294967295
 80086a4:	e000      	b.n	80086a8 <create_chain+0x196>
 80086a6:	2301      	movs	r3, #1
 80086a8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80086aa:	69fb      	ldr	r3, [r7, #28]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3720      	adds	r7, #32
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7ff fbdf 	bl	8007e82 <sync_window>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <dir_clear+0x1a>
 80086ca:	2301      	movs	r3, #1
 80086cc:	e036      	b.n	800873c <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff fcad 	bl	8008030 <clst2sect>
 80086d6:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	631a      	str	r2, [r3, #48]	@ 0x30
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	3334      	adds	r3, #52	@ 0x34
 80086e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80086e6:	2100      	movs	r1, #0
 80086e8:	4618      	mov	r0, r3
 80086ea:	f00d fbc1 	bl	8015e70 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3334      	adds	r3, #52	@ 0x34
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	2301      	movs	r3, #1
 80086f6:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80086f8:	2300      	movs	r3, #0
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	e003      	b.n	8008706 <dir_clear+0x52>
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	4413      	add	r3, r2
 8008704:	617b      	str	r3, [r7, #20]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	895b      	ldrh	r3, [r3, #10]
 800870a:	461a      	mov	r2, r3
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	4293      	cmp	r3, r2
 8008710:	d20b      	bcs.n	800872a <dir_clear+0x76>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	7858      	ldrb	r0, [r3, #1]
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	441a      	add	r2, r3
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	68f9      	ldr	r1, [r7, #12]
 8008720:	f7ff fa54 	bl	8007bcc <disk_write>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d0e9      	beq.n	80086fe <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	895b      	ldrh	r3, [r3, #10]
 800872e:	461a      	mov	r2, r3
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	4293      	cmp	r3, r2
 8008734:	bf14      	ite	ne
 8008736:	2301      	movne	r3, #1
 8008738:	2300      	moveq	r3, #0
 800873a:	b2db      	uxtb	r3, r3
}
 800873c:	4618      	mov	r0, r3
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b086      	sub	sp, #24
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800875a:	d204      	bcs.n	8008766 <dir_sdi+0x22>
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	f003 031f 	and.w	r3, r3, #31
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008766:	2302      	movs	r3, #2
 8008768:	e071      	b.n	800884e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d106      	bne.n	800878a <dir_sdi+0x46>
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	2b02      	cmp	r3, #2
 8008782:	d902      	bls.n	800878a <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008788:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10c      	bne.n	80087aa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	095b      	lsrs	r3, r3, #5
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	8912      	ldrh	r2, [r2, #8]
 8008798:	4293      	cmp	r3, r2
 800879a:	d301      	bcc.n	80087a0 <dir_sdi+0x5c>
 800879c:	2302      	movs	r3, #2
 800879e:	e056      	b.n	800884e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	619a      	str	r2, [r3, #24]
 80087a8:	e02d      	b.n	8008806 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	895b      	ldrh	r3, [r3, #10]
 80087ae:	461a      	mov	r2, r3
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	899b      	ldrh	r3, [r3, #12]
 80087b4:	fb02 f303 	mul.w	r3, r2, r3
 80087b8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80087ba:	e019      	b.n	80087f0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6979      	ldr	r1, [r7, #20]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7ff fc54 	bl	800806e <get_fat>
 80087c6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ce:	d101      	bne.n	80087d4 <dir_sdi+0x90>
 80087d0:	2301      	movs	r3, #1
 80087d2:	e03c      	b.n	800884e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d904      	bls.n	80087e4 <dir_sdi+0xa0>
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d301      	bcc.n	80087e8 <dir_sdi+0xa4>
 80087e4:	2302      	movs	r3, #2
 80087e6:	e032      	b.n	800884e <dir_sdi+0x10a>
			ofs -= csz;
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d2e1      	bcs.n	80087bc <dir_sdi+0x78>
		}
		dp->sect = clst2sect(fs, clst);
 80087f8:	6979      	ldr	r1, [r7, #20]
 80087fa:	6938      	ldr	r0, [r7, #16]
 80087fc:	f7ff fc18 	bl	8008030 <clst2sect>
 8008800:	4602      	mov	r2, r0
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <dir_sdi+0xd4>
 8008814:	2302      	movs	r3, #2
 8008816:	e01a      	b.n	800884e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	699a      	ldr	r2, [r3, #24]
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	899b      	ldrh	r3, [r3, #12]
 8008820:	4619      	mov	r1, r3
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	fbb3 f3f1 	udiv	r3, r3, r1
 8008828:	441a      	add	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	899b      	ldrh	r3, [r3, #12]
 8008838:	461a      	mov	r2, r3
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008840:	fb00 f202 	mul.w	r2, r0, r2
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	18ca      	adds	r2, r1, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b086      	sub	sp, #24
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	3320      	adds	r3, #32
 800886c:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008874:	d302      	bcc.n	800887c <dir_next+0x26>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <dir_next+0x32>
 8008884:	2304      	movs	r3, #4
 8008886:	e088      	b.n	800899a <dir_next+0x144>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	899b      	ldrh	r3, [r3, #12]
 800888c:	461a      	mov	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	fbb3 f1f2 	udiv	r1, r3, r2
 8008894:	fb01 f202 	mul.w	r2, r1, r2
 8008898:	1a9b      	subs	r3, r3, r2
 800889a:	2b00      	cmp	r3, #0
 800889c:	d16a      	bne.n	8008974 <dir_next+0x11e>
		dp->sect++;				/* Next sector */
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10a      	bne.n	80088c6 <dir_next+0x70>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	095b      	lsrs	r3, r3, #5
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	8912      	ldrh	r2, [r2, #8]
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d35b      	bcc.n	8008974 <dir_next+0x11e>
				dp->sect = 0; return FR_NO_FILE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	619a      	str	r2, [r3, #24]
 80088c2:	2304      	movs	r3, #4
 80088c4:	e069      	b.n	800899a <dir_next+0x144>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	899b      	ldrh	r3, [r3, #12]
 80088ca:	461a      	mov	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	8952      	ldrh	r2, [r2, #10]
 80088d6:	3a01      	subs	r2, #1
 80088d8:	4013      	ands	r3, r2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d14a      	bne.n	8008974 <dir_next+0x11e>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	4619      	mov	r1, r3
 80088e6:	4610      	mov	r0, r2
 80088e8:	f7ff fbc1 	bl	800806e <get_fat>
 80088ec:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d801      	bhi.n	80088f8 <dir_next+0xa2>
 80088f4:	2302      	movs	r3, #2
 80088f6:	e050      	b.n	800899a <dir_next+0x144>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fe:	d101      	bne.n	8008904 <dir_next+0xae>
 8008900:	2301      	movs	r3, #1
 8008902:	e04a      	b.n	800899a <dir_next+0x144>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	429a      	cmp	r2, r3
 800890c:	d328      	bcc.n	8008960 <dir_next+0x10a>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d104      	bne.n	800891e <dir_next+0xc8>
						dp->sect = 0; return FR_NO_FILE;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	619a      	str	r2, [r3, #24]
 800891a:	2304      	movs	r3, #4
 800891c:	e03d      	b.n	800899a <dir_next+0x144>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	4619      	mov	r1, r3
 8008926:	4610      	mov	r0, r2
 8008928:	f7ff fdf3 	bl	8008512 <create_chain>
 800892c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <dir_next+0xe2>
 8008934:	2307      	movs	r3, #7
 8008936:	e030      	b.n	800899a <dir_next+0x144>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d101      	bne.n	8008942 <dir_next+0xec>
 800893e:	2302      	movs	r3, #2
 8008940:	e02b      	b.n	800899a <dir_next+0x144>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008948:	d101      	bne.n	800894e <dir_next+0xf8>
 800894a:	2301      	movs	r3, #1
 800894c:	e025      	b.n	800899a <dir_next+0x144>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800894e:	6979      	ldr	r1, [r7, #20]
 8008950:	6938      	ldr	r0, [r7, #16]
 8008952:	f7ff feaf 	bl	80086b4 <dir_clear>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <dir_next+0x10a>
 800895c:	2301      	movs	r3, #1
 800895e:	e01c      	b.n	800899a <dir_next+0x144>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8008966:	6979      	ldr	r1, [r7, #20]
 8008968:	6938      	ldr	r0, [r7, #16]
 800896a:	f7ff fb61 	bl	8008030 <clst2sect>
 800896e:	4602      	mov	r2, r0
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	899b      	ldrh	r3, [r3, #12]
 8008984:	461a      	mov	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	fbb3 f0f2 	udiv	r0, r3, r2
 800898c:	fb00 f202 	mul.w	r2, r0, r2
 8008990:	1a9b      	subs	r3, r3, r2
 8008992:	18ca      	adds	r2, r1, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3718      	adds	r7, #24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b086      	sub	sp, #24
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80089b2:	2100      	movs	r1, #0
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7ff fec5 	bl	8008744 <dir_sdi>
 80089ba:	4603      	mov	r3, r0
 80089bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80089be:	7dfb      	ldrb	r3, [r7, #23]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d12b      	bne.n	8008a1c <dir_alloc+0x7a>
		n = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	4619      	mov	r1, r3
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f7ff fa93 	bl	8007efa <move_window>
 80089d4:	4603      	mov	r3, r0
 80089d6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80089d8:	7dfb      	ldrb	r3, [r7, #23]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d11d      	bne.n	8008a1a <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	2be5      	cmp	r3, #229	@ 0xe5
 80089e6:	d004      	beq.n	80089f2 <dir_alloc+0x50>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	69db      	ldr	r3, [r3, #28]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d107      	bne.n	8008a02 <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	3301      	adds	r3, #1
 80089f6:	613b      	str	r3, [r7, #16]
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d102      	bne.n	8008a06 <dir_alloc+0x64>
 8008a00:	e00c      	b.n	8008a1c <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8008a02:	2300      	movs	r3, #0
 8008a04:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8008a06:	2101      	movs	r1, #1
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff ff24 	bl	8008856 <dir_next>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d0d7      	beq.n	80089c8 <dir_alloc+0x26>
 8008a18:	e000      	b.n	8008a1c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008a1a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d101      	bne.n	8008a26 <dir_alloc+0x84>
 8008a22:	2307      	movs	r3, #7
 8008a24:	75fb      	strb	r3, [r7, #23]
	return res;
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	331a      	adds	r3, #26
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7ff f97a 	bl	8007d38 <ld_word>
 8008a44:	4603      	mov	r3, r0
 8008a46:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d109      	bne.n	8008a64 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	3314      	adds	r3, #20
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7ff f96f 	bl	8007d38 <ld_word>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	041b      	lsls	r3, r3, #16
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008a64:	68fb      	ldr	r3, [r7, #12]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	331a      	adds	r3, #26
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	b292      	uxth	r2, r2
 8008a82:	4611      	mov	r1, r2
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7ff f993 	bl	8007db0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d109      	bne.n	8008aa6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f103 0214 	add.w	r2, r3, #20
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	0c1b      	lsrs	r3, r3, #16
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f7ff f985 	bl	8007db0 <st_word>
	}
}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b086      	sub	sp, #24
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008abc:	2100      	movs	r1, #0
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f7ff fe40 	bl	8008744 <dir_sdi>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <dir_find+0x24>
 8008ace:	7dfb      	ldrb	r3, [r7, #23]
 8008ad0:	e03e      	b.n	8008b50 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6938      	ldr	r0, [r7, #16]
 8008ada:	f7ff fa0e 	bl	8007efa <move_window>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008ae2:	7dfb      	ldrb	r3, [r7, #23]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d12f      	bne.n	8008b48 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d102      	bne.n	8008afc <dir_find+0x4e>
 8008af6:	2304      	movs	r3, #4
 8008af8:	75fb      	strb	r3, [r7, #23]
 8008afa:	e028      	b.n	8008b4e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	69db      	ldr	r3, [r3, #28]
 8008b00:	330b      	adds	r3, #11
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	330b      	adds	r3, #11
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	f003 0308 	and.w	r3, r3, #8
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10a      	bne.n	8008b34 <dir_find+0x86>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	69d8      	ldr	r0, [r3, #28]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3320      	adds	r3, #32
 8008b26:	220b      	movs	r2, #11
 8008b28:	4619      	mov	r1, r3
 8008b2a:	f00d f991 	bl	8015e50 <memcmp>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00b      	beq.n	8008b4c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008b34:	2100      	movs	r1, #0
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7ff fe8d 	bl	8008856 <dir_next>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0c5      	beq.n	8008ad2 <dir_find+0x24>
 8008b46:	e002      	b.n	8008b4e <dir_find+0xa0>
		if (res != FR_OK) break;
 8008b48:	bf00      	nop
 8008b4a:	e000      	b.n	8008b4e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008b4c:	bf00      	nop

	return res;
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3718      	adds	r7, #24
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008b66:	2101      	movs	r1, #1
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f7ff ff1a 	bl	80089a2 <dir_alloc>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d11c      	bne.n	8008bb2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	68b8      	ldr	r0, [r7, #8]
 8008b80:	f7ff f9bb 	bl	8007efa <move_window>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d111      	bne.n	8008bb2 <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	69db      	ldr	r3, [r3, #28]
 8008b92:	2220      	movs	r2, #32
 8008b94:	2100      	movs	r1, #0
 8008b96:	4618      	mov	r0, r3
 8008b98:	f00d f96a 	bl	8015e70 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	69d8      	ldr	r0, [r3, #28]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3320      	adds	r3, #32
 8008ba4:	220b      	movs	r2, #11
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	f00d f9e6 	bl	8015f78 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08a      	sub	sp, #40	@ 0x28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	617b      	str	r3, [r7, #20]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3320      	adds	r3, #32
 8008bd0:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 8008bd2:	220b      	movs	r2, #11
 8008bd4:	2120      	movs	r1, #32
 8008bd6:	6938      	ldr	r0, [r7, #16]
 8008bd8:	f00d f94a 	bl	8015e70 <memset>
	si = i = 0; ni = 8;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	61bb      	str	r3, [r7, #24]
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	61fb      	str	r3, [r7, #28]
 8008be4:	2308      	movs	r3, #8
 8008be6:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	61fa      	str	r2, [r7, #28]
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bfc:	2b20      	cmp	r3, #32
 8008bfe:	f240 8089 	bls.w	8008d14 <create_name+0x158>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8008c02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c06:	2b2f      	cmp	r3, #47	@ 0x2f
 8008c08:	d007      	beq.n	8008c1a <create_name+0x5e>
 8008c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c0e:	2b5c      	cmp	r3, #92	@ 0x5c
 8008c10:	d110      	bne.n	8008c34 <create_name+0x78>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8008c12:	e002      	b.n	8008c1a <create_name+0x5e>
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	3301      	adds	r3, #1
 8008c18:	61fb      	str	r3, [r7, #28]
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	4413      	add	r3, r2
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b2f      	cmp	r3, #47	@ 0x2f
 8008c24:	d0f6      	beq.n	8008c14 <create_name+0x58>
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b5c      	cmp	r3, #92	@ 0x5c
 8008c30:	d0f0      	beq.n	8008c14 <create_name+0x58>
			break;
 8008c32:	e070      	b.n	8008d16 <create_name+0x15a>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8008c34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c38:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c3a:	d003      	beq.n	8008c44 <create_name+0x88>
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d30d      	bcc.n	8008c60 <create_name+0xa4>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8008c44:	6a3b      	ldr	r3, [r7, #32]
 8008c46:	2b0b      	cmp	r3, #11
 8008c48:	d003      	beq.n	8008c52 <create_name+0x96>
 8008c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c50:	d001      	beq.n	8008c56 <create_name+0x9a>
 8008c52:	2306      	movs	r3, #6
 8008c54:	e081      	b.n	8008d5a <create_name+0x19e>
			i = 8; ni = 11;				/* Enter file extension field */
 8008c56:	2308      	movs	r3, #8
 8008c58:	61bb      	str	r3, [r7, #24]
 8008c5a:	230b      	movs	r3, #11
 8008c5c:	623b      	str	r3, [r7, #32]
			continue;
 8008c5e:	e058      	b.n	8008d12 <create_name+0x156>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
 8008c60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	da07      	bge.n	8008c78 <create_name+0xbc>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 8008c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c70:	4a3c      	ldr	r2, [pc, #240]	@ (8008d64 <create_name+0x1a8>)
 8008c72:	5cd3      	ldrb	r3, [r2, r3]
 8008c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8008c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7ff f8de 	bl	8007e3e <dbc_1st>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d024      	beq.n	8008cd2 <create_name+0x116>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	61fa      	str	r2, [r7, #28]
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	4413      	add	r3, r2
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff f8e1 	bl	8007e60 <dbc_2nd>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d004      	beq.n	8008cae <create_name+0xf2>
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d301      	bcc.n	8008cb2 <create_name+0xf6>
 8008cae:	2306      	movs	r3, #6
 8008cb0:	e053      	b.n	8008d5a <create_name+0x19e>
			sfn[i++] = c;
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	1c5a      	adds	r2, r3, #1
 8008cb6:	61ba      	str	r2, [r7, #24]
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008cc0:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	61ba      	str	r2, [r7, #24]
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	4413      	add	r3, r2
 8008ccc:	7bfa      	ldrb	r2, [r7, #15]
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	e78a      	b.n	8008be8 <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	4823      	ldr	r0, [pc, #140]	@ (8008d68 <create_name+0x1ac>)
 8008cda:	f00d f8d1 	bl	8015e80 <strchr>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <create_name+0x12c>
 8008ce4:	2306      	movs	r3, #6
 8008ce6:	e038      	b.n	8008d5a <create_name+0x19e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cec:	2b60      	cmp	r3, #96	@ 0x60
 8008cee:	d908      	bls.n	8008d02 <create_name+0x146>
 8008cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cf4:	2b7a      	cmp	r3, #122	@ 0x7a
 8008cf6:	d804      	bhi.n	8008d02 <create_name+0x146>
 8008cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cfc:	3b20      	subs	r3, #32
 8008cfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			sfn[i++] = c;
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	1c5a      	adds	r2, r3, #1
 8008d06:	61ba      	str	r2, [r7, #24]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008d10:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8008d12:	e769      	b.n	8008be8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008d14:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	441a      	add	r2, r3
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <create_name+0x16e>
 8008d26:	2306      	movs	r3, #6
 8008d28:	e017      	b.n	8008d5a <create_name+0x19e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	2be5      	cmp	r3, #229	@ 0xe5
 8008d30:	d102      	bne.n	8008d38 <create_name+0x17c>
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	2205      	movs	r2, #5
 8008d36:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8008d38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d3c:	2b20      	cmp	r3, #32
 8008d3e:	d905      	bls.n	8008d4c <create_name+0x190>
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	4413      	add	r3, r2
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	2b20      	cmp	r3, #32
 8008d4a:	d801      	bhi.n	8008d50 <create_name+0x194>
 8008d4c:	2204      	movs	r2, #4
 8008d4e:	e000      	b.n	8008d52 <create_name+0x196>
 8008d50:	2200      	movs	r2, #0
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	330b      	adds	r3, #11
 8008d56:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008d58:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3728      	adds	r7, #40	@ 0x28
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	080175d0 	.word	0x080175d0
 8008d68:	0801752c 	.word	0x0801752c

08008d6c <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8008d7c:	e002      	b.n	8008d84 <follow_path+0x18>
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	3301      	adds	r3, #1
 8008d82:	603b      	str	r3, [r7, #0]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d8a:	d0f8      	beq.n	8008d7e <follow_path+0x12>
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	2b5c      	cmp	r3, #92	@ 0x5c
 8008d92:	d0f4      	beq.n	8008d7e <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2b1f      	cmp	r3, #31
 8008da0:	d80a      	bhi.n	8008db8 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2280      	movs	r2, #128	@ 0x80
 8008da6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8008daa:	2100      	movs	r1, #0
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff fcc9 	bl	8008744 <dir_sdi>
 8008db2:	4603      	mov	r3, r0
 8008db4:	75fb      	strb	r3, [r7, #23]
 8008db6:	e048      	b.n	8008e4a <follow_path+0xde>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008db8:	463b      	mov	r3, r7
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff fefd 	bl	8008bbc <create_name>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d139      	bne.n	8008e40 <follow_path+0xd4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff fe6e 	bl	8008aae <dir_find>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8008ddc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00a      	beq.n	8008dfa <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008de4:	7dfb      	ldrb	r3, [r7, #23]
 8008de6:	2b04      	cmp	r3, #4
 8008de8:	d12c      	bne.n	8008e44 <follow_path+0xd8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
 8008dec:	f003 0304 	and.w	r3, r3, #4
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d127      	bne.n	8008e44 <follow_path+0xd8>
 8008df4:	2305      	movs	r3, #5
 8008df6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008df8:	e024      	b.n	8008e44 <follow_path+0xd8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	f003 0304 	and.w	r3, r3, #4
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d121      	bne.n	8008e48 <follow_path+0xdc>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	799b      	ldrb	r3, [r3, #6]
 8008e08:	f003 0310 	and.w	r3, r3, #16
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d102      	bne.n	8008e16 <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8008e10:	2305      	movs	r3, #5
 8008e12:	75fb      	strb	r3, [r7, #23]
 8008e14:	e019      	b.n	8008e4a <follow_path+0xde>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	8992      	ldrh	r2, [r2, #12]
 8008e24:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e28:	fb00 f202 	mul.w	r2, r0, r2
 8008e2c:	1a9b      	subs	r3, r3, r2
 8008e2e:	440b      	add	r3, r1
 8008e30:	4619      	mov	r1, r3
 8008e32:	6938      	ldr	r0, [r7, #16]
 8008e34:	f7ff fdfc 	bl	8008a30 <ld_clust>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e3e:	e7bb      	b.n	8008db8 <follow_path+0x4c>
			if (res != FR_OK) break;
 8008e40:	bf00      	nop
 8008e42:	e002      	b.n	8008e4a <follow_path+0xde>
				break;
 8008e44:	bf00      	nop
 8008e46:	e000      	b.n	8008e4a <follow_path+0xde>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8008e48:	bf00      	nop
			}
		}
	}

	return res;
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3718      	adds	r7, #24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b08b      	sub	sp, #44	@ 0x2c
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 8008e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e60:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6a:	623b      	str	r3, [r7, #32]
	if (!tp) return vol;	/* Invalid path name? */
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <get_ldnumber+0x22>
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	e080      	b.n	8008f78 <get_ldnumber+0x124>
	do {					/* Find a colon in the path */
		tc = *tt++;
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	1c5a      	adds	r2, r3, #1
 8008e7a:	623a      	str	r2, [r7, #32]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	77fb      	strb	r3, [r7, #31]
	} while (!IsTerminator(tc) && tc != ':');
 8008e80:	7ffb      	ldrb	r3, [r7, #31]
 8008e82:	2b20      	cmp	r3, #32
 8008e84:	d902      	bls.n	8008e8c <get_ldnumber+0x38>
 8008e86:	7ffb      	ldrb	r3, [r7, #31]
 8008e88:	2b3a      	cmp	r3, #58	@ 0x3a
 8008e8a:	d1f4      	bne.n	8008e76 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8008e8c:	7ffb      	ldrb	r3, [r7, #31]
 8008e8e:	2b3a      	cmp	r3, #58	@ 0x3a
 8008e90:	d11c      	bne.n	8008ecc <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8008e92:	2302      	movs	r3, #2
 8008e94:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	2b2f      	cmp	r3, #47	@ 0x2f
 8008e9c:	d90c      	bls.n	8008eb8 <get_ldnumber+0x64>
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b39      	cmp	r3, #57	@ 0x39
 8008ea4:	d808      	bhi.n	8008eb8 <get_ldnumber+0x64>
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea8:	3302      	adds	r3, #2
 8008eaa:	6a3a      	ldr	r2, [r7, #32]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d103      	bne.n	8008eb8 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	3b30      	subs	r3, #48	@ 0x30
 8008eb6:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	dc04      	bgt.n	8008ec8 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a3a      	ldr	r2, [r7, #32]
 8008ec6:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	e055      	b.n	8008f78 <get_ldnumber+0x124>
	}
#if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
	if (*tp == '/') {			/* Is there a volume ID? */
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b2f      	cmp	r3, #47	@ 0x2f
 8008ed2:	d14e      	bne.n	8008f72 <get_ldnumber+0x11e>
		while (*(tp + 1) == '/') tp++;	/* Skip duplicated separator */
 8008ed4:	e002      	b.n	8008edc <get_ldnumber+0x88>
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed8:	3301      	adds	r3, #1
 8008eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8008edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ede:	3301      	adds	r3, #1
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	2b2f      	cmp	r3, #47	@ 0x2f
 8008ee4:	d0f7      	beq.n	8008ed6 <get_ldnumber+0x82>
		i = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	61bb      	str	r3, [r7, #24]
		do {
			tt = tp; sp = VolumeStr[i]; /* Path name and this string volume ID */
 8008eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eec:	623b      	str	r3, [r7, #32]
 8008eee:	4a25      	ldr	r2, [pc, #148]	@ (8008f84 <get_ldnumber+0x130>)
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ef6:	613b      	str	r3, [r7, #16]
			do {	/* Compare the volume ID with path name */
				c = *sp++; tc = *(++tt);
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	613a      	str	r2, [r7, #16]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	73fb      	strb	r3, [r7, #15]
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	3301      	adds	r3, #1
 8008f06:	623b      	str	r3, [r7, #32]
 8008f08:	6a3b      	ldr	r3, [r7, #32]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	77fb      	strb	r3, [r7, #31]
				if (IsLower(c)) c -= 0x20;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	2b60      	cmp	r3, #96	@ 0x60
 8008f12:	d905      	bls.n	8008f20 <get_ldnumber+0xcc>
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	2b7a      	cmp	r3, #122	@ 0x7a
 8008f18:	d802      	bhi.n	8008f20 <get_ldnumber+0xcc>
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	3b20      	subs	r3, #32
 8008f1e:	73fb      	strb	r3, [r7, #15]
				if (IsLower(tc)) tc -= 0x20;
 8008f20:	7ffb      	ldrb	r3, [r7, #31]
 8008f22:	2b60      	cmp	r3, #96	@ 0x60
 8008f24:	d905      	bls.n	8008f32 <get_ldnumber+0xde>
 8008f26:	7ffb      	ldrb	r3, [r7, #31]
 8008f28:	2b7a      	cmp	r3, #122	@ 0x7a
 8008f2a:	d802      	bhi.n	8008f32 <get_ldnumber+0xde>
 8008f2c:	7ffb      	ldrb	r3, [r7, #31]
 8008f2e:	3b20      	subs	r3, #32
 8008f30:	77fb      	strb	r3, [r7, #31]
			} while (c && (TCHAR)c == tc);
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d003      	beq.n	8008f40 <get_ldnumber+0xec>
 8008f38:	7bfa      	ldrb	r2, [r7, #15]
 8008f3a:	7ffb      	ldrb	r3, [r7, #31]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d0db      	beq.n	8008ef8 <get_ldnumber+0xa4>
		} while ((c || (tc != '/' && !IsTerminator(tc))) && ++i < FF_VOLUMES);	/* Repeat for each ID until pattern match */
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d105      	bne.n	8008f52 <get_ldnumber+0xfe>
 8008f46:	7ffb      	ldrb	r3, [r7, #31]
 8008f48:	2b2f      	cmp	r3, #47	@ 0x2f
 8008f4a:	d008      	beq.n	8008f5e <get_ldnumber+0x10a>
 8008f4c:	7ffb      	ldrb	r3, [r7, #31]
 8008f4e:	2b20      	cmp	r3, #32
 8008f50:	d905      	bls.n	8008f5e <get_ldnumber+0x10a>
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	3301      	adds	r3, #1
 8008f56:	61bb      	str	r3, [r7, #24]
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	ddc5      	ble.n	8008eea <get_ldnumber+0x96>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	dc04      	bgt.n	8008f6e <get_ldnumber+0x11a>
			vol = i;		/* Drive number */
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a3a      	ldr	r2, [r7, #32]
 8008f6c:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	e002      	b.n	8008f78 <get_ldnumber+0x124>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 8008f72:	2300      	movs	r3, #0
 8008f74:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 8008f76:	697b      	ldr	r3, [r7, #20]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	372c      	adds	r7, #44	@ 0x2c
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	2000016c 	.word	0x2000016c

08008f88 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	711a      	strb	r2, [r3, #4]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7fe ffa9 	bl	8007efa <move_window>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <check_fs+0x2a>
 8008fae:	2304      	movs	r3, #4
 8008fb0:	e088      	b.n	80090c4 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3334      	adds	r3, #52	@ 0x34
 8008fb6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe febc 	bl	8007d38 <ld_word>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008fca:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 8008fcc:	7b7b      	ldrb	r3, [r7, #13]
 8008fce:	2beb      	cmp	r3, #235	@ 0xeb
 8008fd0:	d005      	beq.n	8008fde <check_fs+0x56>
 8008fd2:	7b7b      	ldrb	r3, [r7, #13]
 8008fd4:	2be9      	cmp	r3, #233	@ 0xe9
 8008fd6:	d002      	beq.n	8008fde <check_fs+0x56>
 8008fd8:	7b7b      	ldrb	r3, [r7, #13]
 8008fda:	2be8      	cmp	r3, #232	@ 0xe8
 8008fdc:	d16a      	bne.n	80090b4 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 8008fde:	89fb      	ldrh	r3, [r7, #14]
 8008fe0:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d10c      	bne.n	8009002 <check_fs+0x7a>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	3334      	adds	r3, #52	@ 0x34
 8008fec:	3352      	adds	r3, #82	@ 0x52
 8008fee:	2208      	movs	r2, #8
 8008ff0:	4936      	ldr	r1, [pc, #216]	@ (80090cc <check_fs+0x144>)
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f00c ff2c 	bl	8015e50 <memcmp>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 8008ffe:	2300      	movs	r3, #0
 8009000:	e060      	b.n	80090c4 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	3334      	adds	r3, #52	@ 0x34
 8009006:	330b      	adds	r3, #11
 8009008:	4618      	mov	r0, r3
 800900a:	f7fe fe95 	bl	8007d38 <ld_word>
 800900e:	4603      	mov	r3, r0
 8009010:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009018:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800901a:	897a      	ldrh	r2, [r7, #10]
 800901c:	897b      	ldrh	r3, [r7, #10]
 800901e:	3b01      	subs	r3, #1
 8009020:	4013      	ands	r3, r2
 8009022:	2b00      	cmp	r3, #0
 8009024:	d146      	bne.n	80090b4 <check_fs+0x12c>
 8009026:	897b      	ldrh	r3, [r7, #10]
 8009028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800902c:	d342      	bcc.n	80090b4 <check_fs+0x12c>
 800902e:	897b      	ldrh	r3, [r7, #10]
 8009030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009034:	d83e      	bhi.n	80090b4 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8009036:	7b7b      	ldrb	r3, [r7, #13]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d03b      	beq.n	80090b4 <check_fs+0x12c>
 800903c:	7b7a      	ldrb	r2, [r7, #13]
 800903e:	7b7b      	ldrb	r3, [r7, #13]
 8009040:	3b01      	subs	r3, #1
 8009042:	4013      	ands	r3, r2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d135      	bne.n	80090b4 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	3334      	adds	r3, #52	@ 0x34
 800904c:	330e      	adds	r3, #14
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fe72 	bl	8007d38 <ld_word>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d02c      	beq.n	80090b4 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009060:	3b01      	subs	r3, #1
 8009062:	2b01      	cmp	r3, #1
 8009064:	d826      	bhi.n	80090b4 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3334      	adds	r3, #52	@ 0x34
 800906a:	3311      	adds	r3, #17
 800906c:	4618      	mov	r0, r3
 800906e:	f7fe fe63 	bl	8007d38 <ld_word>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d01d      	beq.n	80090b4 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3334      	adds	r3, #52	@ 0x34
 800907c:	3313      	adds	r3, #19
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe fe5a 	bl	8007d38 <ld_word>
 8009084:	4603      	mov	r3, r0
 8009086:	2b7f      	cmp	r3, #127	@ 0x7f
 8009088:	d809      	bhi.n	800909e <check_fs+0x116>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	3334      	adds	r3, #52	@ 0x34
 800908e:	3320      	adds	r3, #32
 8009090:	4618      	mov	r0, r3
 8009092:	f7fe fe6a 	bl	8007d6a <ld_dword>
 8009096:	4603      	mov	r3, r0
 8009098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800909c:	d30a      	bcc.n	80090b4 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	3334      	adds	r3, #52	@ 0x34
 80090a2:	3316      	adds	r3, #22
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fe fe47 	bl	8007d38 <ld_word>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 80090b0:	2300      	movs	r3, #0
 80090b2:	e007      	b.n	80090c4 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 80090b4:	89fb      	ldrh	r3, [r7, #14]
 80090b6:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d101      	bne.n	80090c2 <check_fs+0x13a>
 80090be:	2302      	movs	r3, #2
 80090c0:	e000      	b.n	80090c4 <check_fs+0x13c>
 80090c2:	2303      	movs	r3, #3
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	0801753c 	.word	0x0801753c

080090d0 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b088      	sub	sp, #32
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 80090da:	2100      	movs	r1, #0
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff ff53 	bl	8008f88 <check_fs>
 80090e2:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d007      	beq.n	80090fa <find_volume+0x2a>
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d802      	bhi.n	80090f6 <find_volume+0x26>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <find_volume+0x2a>
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	e045      	b.n	8009186 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 80090fa:	2300      	movs	r3, #0
 80090fc:	61fb      	str	r3, [r7, #28]
 80090fe:	e014      	b.n	800912a <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	011b      	lsls	r3, r3, #4
 800910a:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 800910e:	4413      	add	r3, r2
 8009110:	4618      	mov	r0, r3
 8009112:	f7fe fe2a 	bl	8007d6a <ld_dword>
 8009116:	4602      	mov	r2, r0
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	3320      	adds	r3, #32
 800911e:	443b      	add	r3, r7
 8009120:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	3301      	adds	r3, #1
 8009128:	61fb      	str	r3, [r7, #28]
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	2b03      	cmp	r3, #3
 800912e:	d9e7      	bls.n	8009100 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <find_volume+0x6c>
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	3b01      	subs	r3, #1
 800913a:	e000      	b.n	800913e <find_volume+0x6e>
 800913c:	2300      	movs	r3, #0
 800913e:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	3320      	adds	r3, #32
 8009146:	443b      	add	r3, r7
 8009148:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00b      	beq.n	8009168 <find_volume+0x98>
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	3320      	adds	r3, #32
 8009156:	443b      	add	r3, r7
 8009158:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7ff ff12 	bl	8008f88 <check_fs>
 8009164:	4603      	mov	r3, r0
 8009166:	e000      	b.n	800916a <find_volume+0x9a>
 8009168:	2303      	movs	r3, #3
 800916a:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d108      	bne.n	8009184 <find_volume+0xb4>
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d905      	bls.n	8009184 <find_volume+0xb4>
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	3301      	adds	r3, #1
 800917c:	61fb      	str	r3, [r7, #28]
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	2b03      	cmp	r3, #3
 8009182:	d9dd      	bls.n	8009140 <find_volume+0x70>
	return fmt;
 8009184:	69bb      	ldr	r3, [r7, #24]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3720      	adds	r7, #32
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
	...

08009190 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b090      	sub	sp, #64	@ 0x40
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	4613      	mov	r3, r2
 800919c:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2200      	movs	r2, #0
 80091a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f7ff fe55 	bl	8008e54 <get_ldnumber>
 80091aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 80091ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	da01      	bge.n	80091b6 <mount_volume+0x26>
 80091b2:	230b      	movs	r3, #11
 80091b4:	e207      	b.n	80095c6 <mount_volume+0x436>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80091b6:	4aa2      	ldr	r2, [pc, #648]	@ (8009440 <mount_volume+0x2b0>)
 80091b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091be:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80091c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <mount_volume+0x3a>
 80091c6:	230c      	movs	r3, #12
 80091c8:	e1fd      	b.n	80095c6 <mount_volume+0x436>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	f023 0301 	bic.w	r3, r3, #1
 80091d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80091d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d01a      	beq.n	8009216 <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 80091e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e2:	785b      	ldrb	r3, [r3, #1]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fe fc6f 	bl	8007ac8 <disk_status>
 80091ea:	4603      	mov	r3, r0
 80091ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80091f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091f4:	f003 0301 	and.w	r3, r3, #1
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10c      	bne.n	8009216 <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d007      	beq.n	8009212 <mount_volume+0x82>
 8009202:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009206:	f003 0304 	and.w	r3, r3, #4
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 800920e:	230a      	movs	r3, #10
 8009210:	e1d9      	b.n	80095c6 <mount_volume+0x436>
			}
			return FR_OK;				/* The filesystem object is already valid */
 8009212:	2300      	movs	r3, #0
 8009214:	e1d7      	b.n	80095c6 <mount_volume+0x436>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 8009216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009218:	2200      	movs	r2, #0
 800921a:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800921c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921e:	785b      	ldrb	r3, [r3, #1]
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe fc79 	bl	8007b18 <disk_initialize>
 8009226:	4603      	mov	r3, r0
 8009228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800922c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009238:	2303      	movs	r3, #3
 800923a:	e1c4      	b.n	80095c6 <mount_volume+0x436>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800923c:	79fb      	ldrb	r3, [r7, #7]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d007      	beq.n	8009252 <mount_volume+0xc2>
 8009242:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009246:	f003 0304 	and.w	r3, r3, #4
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 800924e:	230a      	movs	r3, #10
 8009250:	e1b9      	b.n	80095c6 <mount_volume+0x436>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009254:	7858      	ldrb	r0, [r3, #1]
 8009256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009258:	330c      	adds	r3, #12
 800925a:	461a      	mov	r2, r3
 800925c:	2102      	movs	r1, #2
 800925e:	f7fe fce9 	bl	8007c34 <disk_ioctl>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <mount_volume+0xdc>
 8009268:	2301      	movs	r3, #1
 800926a:	e1ac      	b.n	80095c6 <mount_volume+0x436>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800926c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926e:	899b      	ldrh	r3, [r3, #12]
 8009270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009274:	d80d      	bhi.n	8009292 <mount_volume+0x102>
 8009276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009278:	899b      	ldrh	r3, [r3, #12]
 800927a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800927e:	d308      	bcc.n	8009292 <mount_volume+0x102>
 8009280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009282:	899b      	ldrh	r3, [r3, #12]
 8009284:	461a      	mov	r2, r3
 8009286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009288:	899b      	ldrh	r3, [r3, #12]
 800928a:	3b01      	subs	r3, #1
 800928c:	4013      	ands	r3, r2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <mount_volume+0x106>
 8009292:	2301      	movs	r3, #1
 8009294:	e197      	b.n	80095c6 <mount_volume+0x436>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 8009296:	2100      	movs	r1, #0
 8009298:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800929a:	f7ff ff19 	bl	80090d0 <find_volume>
 800929e:	6338      	str	r0, [r7, #48]	@ 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 80092a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a2:	2b04      	cmp	r3, #4
 80092a4:	d101      	bne.n	80092aa <mount_volume+0x11a>
 80092a6:	2301      	movs	r3, #1
 80092a8:	e18d      	b.n	80095c6 <mount_volume+0x436>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80092aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d901      	bls.n	80092b4 <mount_volume+0x124>
 80092b0:	230d      	movs	r3, #13
 80092b2:	e188      	b.n	80095c6 <mount_volume+0x436>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 80092b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b8:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80092ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092bc:	3334      	adds	r3, #52	@ 0x34
 80092be:	330b      	adds	r3, #11
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fe fd39 	bl	8007d38 <ld_word>
 80092c6:	4603      	mov	r3, r0
 80092c8:	461a      	mov	r2, r3
 80092ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092cc:	899b      	ldrh	r3, [r3, #12]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d001      	beq.n	80092d6 <mount_volume+0x146>
 80092d2:	230d      	movs	r3, #13
 80092d4:	e177      	b.n	80095c6 <mount_volume+0x436>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80092d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d8:	3334      	adds	r3, #52	@ 0x34
 80092da:	3316      	adds	r3, #22
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fe fd2b 	bl	8007d38 <ld_word>
 80092e2:	4603      	mov	r3, r0
 80092e4:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80092e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d106      	bne.n	80092fa <mount_volume+0x16a>
 80092ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ee:	3334      	adds	r3, #52	@ 0x34
 80092f0:	3324      	adds	r3, #36	@ 0x24
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fe fd39 	bl	8007d6a <ld_dword>
 80092f8:	63b8      	str	r0, [r7, #56]	@ 0x38
		fs->fsize = fasize;
 80092fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092fe:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009302:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009308:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800930a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930c:	78db      	ldrb	r3, [r3, #3]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d005      	beq.n	800931e <mount_volume+0x18e>
 8009312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009314:	78db      	ldrb	r3, [r3, #3]
 8009316:	2b02      	cmp	r3, #2
 8009318:	d001      	beq.n	800931e <mount_volume+0x18e>
 800931a:	230d      	movs	r3, #13
 800931c:	e153      	b.n	80095c6 <mount_volume+0x436>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800931e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009320:	78db      	ldrb	r3, [r3, #3]
 8009322:	461a      	mov	r2, r3
 8009324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009326:	fb02 f303 	mul.w	r3, r2, r3
 800932a:	63bb      	str	r3, [r7, #56]	@ 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800932c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009332:	461a      	mov	r2, r3
 8009334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009336:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933a:	895b      	ldrh	r3, [r3, #10]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d008      	beq.n	8009352 <mount_volume+0x1c2>
 8009340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009342:	895b      	ldrh	r3, [r3, #10]
 8009344:	461a      	mov	r2, r3
 8009346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009348:	895b      	ldrh	r3, [r3, #10]
 800934a:	3b01      	subs	r3, #1
 800934c:	4013      	ands	r3, r2
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <mount_volume+0x1c6>
 8009352:	230d      	movs	r3, #13
 8009354:	e137      	b.n	80095c6 <mount_volume+0x436>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009358:	3334      	adds	r3, #52	@ 0x34
 800935a:	3311      	adds	r3, #17
 800935c:	4618      	mov	r0, r3
 800935e:	f7fe fceb 	bl	8007d38 <ld_word>
 8009362:	4603      	mov	r3, r0
 8009364:	461a      	mov	r2, r3
 8009366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009368:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800936a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936c:	891b      	ldrh	r3, [r3, #8]
 800936e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009370:	8992      	ldrh	r2, [r2, #12]
 8009372:	0952      	lsrs	r2, r2, #5
 8009374:	b292      	uxth	r2, r2
 8009376:	fbb3 f1f2 	udiv	r1, r3, r2
 800937a:	fb01 f202 	mul.w	r2, r1, r2
 800937e:	1a9b      	subs	r3, r3, r2
 8009380:	b29b      	uxth	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <mount_volume+0x1fa>
 8009386:	230d      	movs	r3, #13
 8009388:	e11d      	b.n	80095c6 <mount_volume+0x436>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800938a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800938c:	3334      	adds	r3, #52	@ 0x34
 800938e:	3313      	adds	r3, #19
 8009390:	4618      	mov	r0, r3
 8009392:	f7fe fcd1 	bl	8007d38 <ld_word>
 8009396:	4603      	mov	r3, r0
 8009398:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800939a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800939c:	2b00      	cmp	r3, #0
 800939e:	d106      	bne.n	80093ae <mount_volume+0x21e>
 80093a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a2:	3334      	adds	r3, #52	@ 0x34
 80093a4:	3320      	adds	r3, #32
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fe fcdf 	bl	8007d6a <ld_dword>
 80093ac:	63f8      	str	r0, [r7, #60]	@ 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80093ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b0:	3334      	adds	r3, #52	@ 0x34
 80093b2:	330e      	adds	r3, #14
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fe fcbf 	bl	8007d38 <ld_word>
 80093ba:	4603      	mov	r3, r0
 80093bc:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80093be:	8bfb      	ldrh	r3, [r7, #30]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d101      	bne.n	80093c8 <mount_volume+0x238>
 80093c4:	230d      	movs	r3, #13
 80093c6:	e0fe      	b.n	80095c6 <mount_volume+0x436>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80093c8:	8bfa      	ldrh	r2, [r7, #30]
 80093ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093cc:	4413      	add	r3, r2
 80093ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093d0:	8911      	ldrh	r1, [r2, #8]
 80093d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093d4:	8992      	ldrh	r2, [r2, #12]
 80093d6:	0952      	lsrs	r2, r2, #5
 80093d8:	b292      	uxth	r2, r2
 80093da:	fbb1 f2f2 	udiv	r2, r1, r2
 80093de:	b292      	uxth	r2, r2
 80093e0:	4413      	add	r3, r2
 80093e2:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80093e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d201      	bcs.n	80093f0 <mount_volume+0x260>
 80093ec:	230d      	movs	r3, #13
 80093ee:	e0ea      	b.n	80095c6 <mount_volume+0x436>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80093f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093f8:	8952      	ldrh	r2, [r2, #10]
 80093fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80093fe:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d101      	bne.n	800940a <mount_volume+0x27a>
 8009406:	230d      	movs	r3, #13
 8009408:	e0dd      	b.n	80095c6 <mount_volume+0x436>
		fmt = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	4a0c      	ldr	r2, [pc, #48]	@ (8009444 <mount_volume+0x2b4>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d801      	bhi.n	800941a <mount_volume+0x28a>
 8009416:	2303      	movs	r3, #3
 8009418:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009420:	4293      	cmp	r3, r2
 8009422:	d801      	bhi.n	8009428 <mount_volume+0x298>
 8009424:	2302      	movs	r3, #2
 8009426:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800942e:	4293      	cmp	r3, r2
 8009430:	d801      	bhi.n	8009436 <mount_volume+0x2a6>
 8009432:	2301      	movs	r3, #1
 8009434:	633b      	str	r3, [r7, #48]	@ 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8009436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009438:	2b00      	cmp	r3, #0
 800943a:	d105      	bne.n	8009448 <mount_volume+0x2b8>
 800943c:	230d      	movs	r3, #13
 800943e:	e0c2      	b.n	80095c6 <mount_volume+0x436>
 8009440:	20005cfc 	.word	0x20005cfc
 8009444:	0ffffff5 	.word	0x0ffffff5

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	1c9a      	adds	r2, r3, #2
 800944c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009452:	6a3a      	ldr	r2, [r7, #32]
 8009454:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009456:	8bfa      	ldrh	r2, [r7, #30]
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	441a      	add	r2, r3
 800945c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009460:	6a3a      	ldr	r2, [r7, #32]
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	441a      	add	r2, r3
 8009466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009468:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800946a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946c:	2b03      	cmp	r3, #3
 800946e:	d11e      	bne.n	80094ae <mount_volume+0x31e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009472:	3334      	adds	r3, #52	@ 0x34
 8009474:	332a      	adds	r3, #42	@ 0x2a
 8009476:	4618      	mov	r0, r3
 8009478:	f7fe fc5e 	bl	8007d38 <ld_word>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <mount_volume+0x2f6>
 8009482:	230d      	movs	r3, #13
 8009484:	e09f      	b.n	80095c6 <mount_volume+0x436>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009488:	891b      	ldrh	r3, [r3, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <mount_volume+0x302>
 800948e:	230d      	movs	r3, #13
 8009490:	e099      	b.n	80095c6 <mount_volume+0x436>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009494:	3334      	adds	r3, #52	@ 0x34
 8009496:	332c      	adds	r3, #44	@ 0x2c
 8009498:	4618      	mov	r0, r3
 800949a:	f7fe fc66 	bl	8007d6a <ld_dword>
 800949e:	4602      	mov	r2, r0
 80094a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a2:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80094a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ac:	e01e      	b.n	80094ec <mount_volume+0x35c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80094ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b0:	891b      	ldrh	r3, [r3, #8]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <mount_volume+0x32a>
 80094b6:	230d      	movs	r3, #13
 80094b8:	e085      	b.n	80095c6 <mount_volume+0x436>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80094ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c0:	441a      	add	r2, r3
 80094c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c4:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80094c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d103      	bne.n	80094d4 <mount_volume+0x344>
 80094cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	005b      	lsls	r3, r3, #1
 80094d2:	e00a      	b.n	80094ea <mount_volume+0x35a>
 80094d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d6:	699a      	ldr	r2, [r3, #24]
 80094d8:	4613      	mov	r3, r2
 80094da:	005b      	lsls	r3, r3, #1
 80094dc:	4413      	add	r3, r2
 80094de:	085a      	lsrs	r2, r3, #1
 80094e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	f003 0301 	and.w	r3, r3, #1
 80094e8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80094ea:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80094ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ee:	69da      	ldr	r2, [r3, #28]
 80094f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f2:	899b      	ldrh	r3, [r3, #12]
 80094f4:	4619      	mov	r1, r3
 80094f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f8:	440b      	add	r3, r1
 80094fa:	3b01      	subs	r3, #1
 80094fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094fe:	8989      	ldrh	r1, [r1, #12]
 8009500:	fbb3 f3f1 	udiv	r3, r3, r1
 8009504:	429a      	cmp	r2, r3
 8009506:	d201      	bcs.n	800950c <mount_volume+0x37c>
 8009508:	230d      	movs	r3, #13
 800950a:	e05c      	b.n	80095c6 <mount_volume+0x436>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800950c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950e:	f04f 32ff 	mov.w	r2, #4294967295
 8009512:	615a      	str	r2, [r3, #20]
 8009514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009516:	695a      	ldr	r2, [r3, #20]
 8009518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800951c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951e:	2280      	movs	r2, #128	@ 0x80
 8009520:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8009522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009524:	2b03      	cmp	r3, #3
 8009526:	d13f      	bne.n	80095a8 <mount_volume+0x418>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952a:	3334      	adds	r3, #52	@ 0x34
 800952c:	3330      	adds	r3, #48	@ 0x30
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fc02 	bl	8007d38 <ld_word>
 8009534:	4603      	mov	r3, r0
 8009536:	2b01      	cmp	r3, #1
 8009538:	d136      	bne.n	80095a8 <mount_volume+0x418>
			&& move_window(fs, bsect + 1) == FR_OK)
 800953a:	6a3b      	ldr	r3, [r7, #32]
 800953c:	3301      	adds	r3, #1
 800953e:	4619      	mov	r1, r3
 8009540:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009542:	f7fe fcda 	bl	8007efa <move_window>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d12d      	bne.n	80095a8 <mount_volume+0x418>
		{
			fs->fsi_flag = 0;
 800954c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954e:	2200      	movs	r2, #0
 8009550:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8009552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009554:	3334      	adds	r3, #52	@ 0x34
 8009556:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe fbec 	bl	8007d38 <ld_word>
 8009560:	4603      	mov	r3, r0
 8009562:	461a      	mov	r2, r3
 8009564:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009568:	429a      	cmp	r2, r3
 800956a:	d11d      	bne.n	80095a8 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800956c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956e:	3334      	adds	r3, #52	@ 0x34
 8009570:	4618      	mov	r0, r3
 8009572:	f7fe fbfa 	bl	8007d6a <ld_dword>
 8009576:	4603      	mov	r3, r0
 8009578:	4a15      	ldr	r2, [pc, #84]	@ (80095d0 <mount_volume+0x440>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d114      	bne.n	80095a8 <mount_volume+0x418>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800957e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009580:	3334      	adds	r3, #52	@ 0x34
 8009582:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009586:	4618      	mov	r0, r3
 8009588:	f7fe fbef 	bl	8007d6a <ld_dword>
 800958c:	4603      	mov	r3, r0
 800958e:	4a11      	ldr	r2, [pc, #68]	@ (80095d4 <mount_volume+0x444>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d109      	bne.n	80095a8 <mount_volume+0x418>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009596:	3334      	adds	r3, #52	@ 0x34
 8009598:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800959c:	4618      	mov	r0, r3
 800959e:	f7fe fbe4 	bl	8007d6a <ld_dword>
 80095a2:	4602      	mov	r2, r0
 80095a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 80095a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 80095b0:	4b09      	ldr	r3, [pc, #36]	@ (80095d8 <mount_volume+0x448>)
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	3301      	adds	r3, #1
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	4b07      	ldr	r3, [pc, #28]	@ (80095d8 <mount_volume+0x448>)
 80095ba:	801a      	strh	r2, [r3, #0]
 80095bc:	4b06      	ldr	r3, [pc, #24]	@ (80095d8 <mount_volume+0x448>)
 80095be:	881a      	ldrh	r2, [r3, #0]
 80095c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c2:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3740      	adds	r7, #64	@ 0x40
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	41615252 	.word	0x41615252
 80095d4:	61417272 	.word	0x61417272
 80095d8:	20005d04 	.word	0x20005d04

080095dc <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80095e6:	2309      	movs	r3, #9
 80095e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d01c      	beq.n	800962a <validate+0x4e>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d018      	beq.n	800962a <validate+0x4e>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d013      	beq.n	800962a <validate+0x4e>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	889a      	ldrh	r2, [r3, #4]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	88db      	ldrh	r3, [r3, #6]
 800960c:	429a      	cmp	r2, r3
 800960e:	d10c      	bne.n	800962a <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	785b      	ldrb	r3, [r3, #1]
 8009616:	4618      	mov	r0, r3
 8009618:	f7fe fa56 	bl	8007ac8 <disk_status>
 800961c:	4603      	mov	r3, r0
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <validate+0x4e>
			res = FR_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d102      	bne.n	8009636 <validate+0x5a>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	e000      	b.n	8009638 <validate+0x5c>
 8009636:	2300      	movs	r3, #0
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	6013      	str	r3, [r2, #0]
	return res;
 800963c:	7bfb      	ldrb	r3, [r7, #15]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
	...

08009648 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	4613      	mov	r3, r2
 8009654:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800965a:	f107 0310 	add.w	r3, r7, #16
 800965e:	4618      	mov	r0, r3
 8009660:	f7ff fbf8 	bl	8008e54 <get_ldnumber>
 8009664:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	2b00      	cmp	r3, #0
 800966a:	da01      	bge.n	8009670 <f_mount+0x28>
 800966c:	230b      	movs	r3, #11
 800966e:	e02e      	b.n	80096ce <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8009670:	4a19      	ldr	r2, [pc, #100]	@ (80096d8 <f_mount+0x90>)
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009678:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d007      	beq.n	8009690 <f_mount+0x48>
		FatFs[vol] = 0;
 8009680:	4a15      	ldr	r2, [pc, #84]	@ (80096d8 <f_mount+0x90>)
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	2100      	movs	r1, #0
 8009686:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	2200      	movs	r2, #0
 800968e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00b      	beq.n	80096ae <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	69fa      	ldr	r2, [r7, #28]
 800969a:	b2d2      	uxtb	r2, r2
 800969c:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	490c      	ldr	r1, [pc, #48]	@ (80096d8 <f_mount+0x90>)
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 80096ae:	79fb      	ldrb	r3, [r7, #7]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <f_mount+0x70>
 80096b4:	2300      	movs	r3, #0
 80096b6:	e00a      	b.n	80096ce <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 80096b8:	f107 010c 	add.w	r1, r7, #12
 80096bc:	f107 0308 	add.w	r3, r7, #8
 80096c0:	2200      	movs	r2, #0
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7ff fd64 	bl	8009190 <mount_volume>
 80096c8:	4603      	mov	r3, r0
 80096ca:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80096cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3720      	adds	r7, #32
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20005cfc 	.word	0x20005cfc

080096dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b098      	sub	sp, #96	@ 0x60
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	4613      	mov	r3, r2
 80096e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <f_open+0x18>
 80096f0:	2309      	movs	r3, #9
 80096f2:	e184      	b.n	80099fe <f_open+0x322>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80096f4:	79fb      	ldrb	r3, [r7, #7]
 80096f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096fa:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 80096fc:	79fa      	ldrb	r2, [r7, #7]
 80096fe:	f107 0114 	add.w	r1, r7, #20
 8009702:	f107 0308 	add.w	r3, r7, #8
 8009706:	4618      	mov	r0, r3
 8009708:	f7ff fd42 	bl	8009190 <mount_volume>
 800970c:	4603      	mov	r3, r0
 800970e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009712:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009716:	2b00      	cmp	r3, #0
 8009718:	f040 8168 	bne.w	80099ec <f_open+0x310>
		dj.obj.fs = fs;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	f107 0318 	add.w	r3, r7, #24
 8009726:	4611      	mov	r1, r2
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff fb1f 	bl	8008d6c <follow_path>
 800972e:	4603      	mov	r3, r0
 8009730:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8009734:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009738:	2b00      	cmp	r3, #0
 800973a:	d107      	bne.n	800974c <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800973c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009740:	b25b      	sxtb	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	da02      	bge.n	800974c <f_open+0x70>
				res = FR_INVALID_NAME;
 8009746:	2306      	movs	r3, #6
 8009748:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800974c:	79fb      	ldrb	r3, [r7, #7]
 800974e:	f003 031c 	and.w	r3, r3, #28
 8009752:	2b00      	cmp	r3, #0
 8009754:	d077      	beq.n	8009846 <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
 8009756:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800975a:	2b00      	cmp	r3, #0
 800975c:	d010      	beq.n	8009780 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800975e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009762:	2b04      	cmp	r3, #4
 8009764:	d107      	bne.n	8009776 <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8009766:	f107 0318 	add.w	r3, r7, #24
 800976a:	4618      	mov	r0, r3
 800976c:	f7ff f9f4 	bl	8008b58 <dir_register>
 8009770:	4603      	mov	r3, r0
 8009772:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009776:	79fb      	ldrb	r3, [r7, #7]
 8009778:	f043 0308 	orr.w	r3, r3, #8
 800977c:	71fb      	strb	r3, [r7, #7]
 800977e:	e010      	b.n	80097a2 <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009780:	7fbb      	ldrb	r3, [r7, #30]
 8009782:	f003 0311 	and.w	r3, r3, #17
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <f_open+0xb6>
					res = FR_DENIED;
 800978a:	2307      	movs	r3, #7
 800978c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009790:	e007      	b.n	80097a2 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009792:	79fb      	ldrb	r3, [r7, #7]
 8009794:	f003 0304 	and.w	r3, r3, #4
 8009798:	2b00      	cmp	r3, #0
 800979a:	d002      	beq.n	80097a2 <f_open+0xc6>
 800979c:	2308      	movs	r3, #8
 800979e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 80097a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d167      	bne.n	800987a <f_open+0x19e>
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	f003 0308 	and.w	r3, r3, #8
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d062      	beq.n	800987a <f_open+0x19e>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 80097b4:	4b94      	ldr	r3, [pc, #592]	@ (8009a08 <f_open+0x32c>)
 80097b6:	653b      	str	r3, [r7, #80]	@ 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 80097b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ba:	330e      	adds	r3, #14
 80097bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fe fb11 	bl	8007de6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 80097c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c6:	3316      	adds	r3, #22
 80097c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fe fb0b 	bl	8007de6 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097d4:	4611      	mov	r1, r2
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7ff f92a 	bl	8008a30 <ld_clust>
 80097dc:	64f8      	str	r0, [r7, #76]	@ 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80097de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e0:	330b      	adds	r3, #11
 80097e2:	2220      	movs	r2, #32
 80097e4:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80097ea:	2200      	movs	r2, #0
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7ff f93e 	bl	8008a6e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80097f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f4:	331c      	adds	r3, #28
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fe faf4 	bl	8007de6 <st_dword>
					fs->wflag = 1;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	2201      	movs	r2, #1
 8009802:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8009804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009806:	2b00      	cmp	r3, #0
 8009808:	d037      	beq.n	800987a <f_open+0x19e>
						sc = fs->winsect;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800980e:	64bb      	str	r3, [r7, #72]	@ 0x48
						res = remove_chain(&dj.obj, cl, 0);
 8009810:	f107 0318 	add.w	r3, r7, #24
 8009814:	2200      	movs	r2, #0
 8009816:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009818:	4618      	mov	r0, r3
 800981a:	f7fe fe15 	bl	8008448 <remove_chain>
 800981e:	4603      	mov	r3, r0
 8009820:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009824:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009828:	2b00      	cmp	r3, #0
 800982a:	d126      	bne.n	800987a <f_open+0x19e>
							res = move_window(fs, sc);
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009830:	4618      	mov	r0, r3
 8009832:	f7fe fb62 	bl	8007efa <move_window>
 8009836:	4603      	mov	r3, r0
 8009838:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009840:	3a01      	subs	r2, #1
 8009842:	611a      	str	r2, [r3, #16]
 8009844:	e019      	b.n	800987a <f_open+0x19e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8009846:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800984a:	2b00      	cmp	r3, #0
 800984c:	d115      	bne.n	800987a <f_open+0x19e>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800984e:	7fbb      	ldrb	r3, [r7, #30]
 8009850:	f003 0310 	and.w	r3, r3, #16
 8009854:	2b00      	cmp	r3, #0
 8009856:	d003      	beq.n	8009860 <f_open+0x184>
					res = FR_NO_FILE;
 8009858:	2304      	movs	r3, #4
 800985a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800985e:	e00c      	b.n	800987a <f_open+0x19e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b00      	cmp	r3, #0
 8009868:	d007      	beq.n	800987a <f_open+0x19e>
 800986a:	7fbb      	ldrb	r3, [r7, #30]
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	d002      	beq.n	800987a <f_open+0x19e>
						res = FR_DENIED;
 8009874:	2307      	movs	r3, #7
 8009876:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800987a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10f      	bne.n	80098a2 <f_open+0x1c6>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8009882:	79fb      	ldrb	r3, [r7, #7]
 8009884:	f003 0308 	and.w	r3, r3, #8
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <f_open+0x1b8>
 800988c:	79fb      	ldrb	r3, [r7, #7]
 800988e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009892:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 800989c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80098a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f040 80a0 	bne.w	80099ec <f_open+0x310>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098b0:	4611      	mov	r1, r2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7ff f8bc 	bl	8008a30 <ld_clust>
 80098b8:	4602      	mov	r2, r0
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80098be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c0:	331c      	adds	r3, #28
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fe fa51 	bl	8007d6a <ld_dword>
 80098c8:	4602      	mov	r2, r0
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	88da      	ldrh	r2, [r3, #6]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	79fa      	ldrb	r2, [r7, #7]
 80098e0:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3328      	adds	r3, #40	@ 0x28
 80098f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80098fc:	2100      	movs	r1, #0
 80098fe:	4618      	mov	r0, r3
 8009900:	f00c fab6 	bl	8015e70 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	f003 0320 	and.w	r3, r3, #32
 800990a:	2b00      	cmp	r3, #0
 800990c:	d06e      	beq.n	80099ec <f_open+0x310>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d06a      	beq.n	80099ec <f_open+0x310>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	68da      	ldr	r2, [r3, #12]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	895b      	ldrh	r3, [r3, #10]
 8009922:	461a      	mov	r2, r3
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	899b      	ldrh	r3, [r3, #12]
 8009928:	fb02 f303 	mul.w	r3, r2, r3
 800992c:	647b      	str	r3, [r7, #68]	@ 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	657b      	str	r3, [r7, #84]	@ 0x54
 800993a:	e016      	b.n	800996a <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009940:	4618      	mov	r0, r3
 8009942:	f7fe fb94 	bl	800806e <get_fat>
 8009946:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800994a:	2b01      	cmp	r3, #1
 800994c:	d802      	bhi.n	8009954 <f_open+0x278>
 800994e:	2302      	movs	r3, #2
 8009950:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009954:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995a:	d102      	bne.n	8009962 <f_open+0x286>
 800995c:	2301      	movs	r3, #1
 800995e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009962:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	657b      	str	r3, [r7, #84]	@ 0x54
 800996a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800996e:	2b00      	cmp	r3, #0
 8009970:	d103      	bne.n	800997a <f_open+0x29e>
 8009972:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009976:	429a      	cmp	r2, r3
 8009978:	d8e0      	bhi.n	800993c <f_open+0x260>
				}
				fp->clust = clst;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800997e:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009980:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009984:	2b00      	cmp	r3, #0
 8009986:	d131      	bne.n	80099ec <f_open+0x310>
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	899b      	ldrh	r3, [r3, #12]
 800998c:	461a      	mov	r2, r3
 800998e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009990:	fbb3 f1f2 	udiv	r1, r3, r2
 8009994:	fb01 f202 	mul.w	r2, r1, r2
 8009998:	1a9b      	subs	r3, r3, r2
 800999a:	2b00      	cmp	r3, #0
 800999c:	d026      	beq.n	80099ec <f_open+0x310>
					sc = clst2sect(fs, clst);
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fe fb44 	bl	8008030 <clst2sect>
 80099a8:	64b8      	str	r0, [r7, #72]	@ 0x48
					if (sc == 0) {
 80099aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d103      	bne.n	80099b8 <f_open+0x2dc>
						res = FR_INT_ERR;
 80099b0:	2302      	movs	r3, #2
 80099b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80099b6:	e019      	b.n	80099ec <f_open+0x310>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	899b      	ldrh	r3, [r3, #12]
 80099bc:	461a      	mov	r2, r3
 80099be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80099c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099c6:	441a      	add	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	7858      	ldrb	r0, [r3, #1]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	69da      	ldr	r2, [r3, #28]
 80099da:	2301      	movs	r3, #1
 80099dc:	f7fe f8c4 	bl	8007b68 <disk_read>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <f_open+0x310>
 80099e6:	2301      	movs	r3, #1
 80099e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80099ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <f_open+0x31e>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80099fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3760      	adds	r7, #96	@ 0x60
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	54210000 	.word	0x54210000

08009a0c <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b08e      	sub	sp, #56	@ 0x38
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
 8009a18:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f107 0214 	add.w	r2, r7, #20
 8009a2a:	4611      	mov	r1, r2
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7ff fdd5 	bl	80095dc <validate>
 8009a32:	4603      	mov	r3, r0
 8009a34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009a38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d107      	bne.n	8009a50 <f_read+0x44>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	7c5b      	ldrb	r3, [r3, #17]
 8009a44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009a48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d002      	beq.n	8009a56 <f_read+0x4a>
 8009a50:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a54:	e129      	b.n	8009caa <f_read+0x29e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	7c1b      	ldrb	r3, [r3, #16]
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <f_read+0x5a>
 8009a62:	2307      	movs	r3, #7
 8009a64:	e121      	b.n	8009caa <f_read+0x29e>
	remain = fp->obj.objsize - fp->fptr;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	68da      	ldr	r2, [r3, #12]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	695b      	ldr	r3, [r3, #20]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	f240 8112 	bls.w	8009ca0 <f_read+0x294>
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8009a80:	e10e      	b.n	8009ca0 <f_read+0x294>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	8992      	ldrh	r2, [r2, #12]
 8009a8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a8e:	fb01 f202 	mul.w	r2, r1, r2
 8009a92:	1a9b      	subs	r3, r3, r2
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f040 80c9 	bne.w	8009c2c <f_read+0x220>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	8992      	ldrh	r2, [r2, #12]
 8009aa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	8952      	ldrh	r2, [r2, #10]
 8009aaa:	3a01      	subs	r2, #1
 8009aac:	4013      	ands	r3, r2
 8009aae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d123      	bne.n	8009afe <f_read+0xf2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d103      	bne.n	8009ac6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ac4:	e007      	b.n	8009ad6 <f_read+0xca>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	4619      	mov	r1, r3
 8009ace:	4610      	mov	r0, r2
 8009ad0:	f7fe facd 	bl	800806e <get_fat>
 8009ad4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d804      	bhi.n	8009ae6 <f_read+0xda>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2202      	movs	r2, #2
 8009ae0:	745a      	strb	r2, [r3, #17]
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	e0e1      	b.n	8009caa <f_read+0x29e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aec:	d104      	bne.n	8009af8 <f_read+0xec>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2201      	movs	r2, #1
 8009af2:	745a      	strb	r2, [r3, #17]
 8009af4:	2301      	movs	r3, #1
 8009af6:	e0d8      	b.n	8009caa <f_read+0x29e>
				fp->clust = clst;				/* Update current cluster */
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009afc:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	4619      	mov	r1, r3
 8009b06:	4610      	mov	r0, r2
 8009b08:	f7fe fa92 	bl	8008030 <clst2sect>
 8009b0c:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d104      	bne.n	8009b1e <f_read+0x112>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2202      	movs	r2, #2
 8009b18:	745a      	strb	r2, [r3, #17]
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	e0c5      	b.n	8009caa <f_read+0x29e>
			sect += csect;
 8009b1e:	69ba      	ldr	r2, [r7, #24]
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	4413      	add	r3, r2
 8009b24:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	899b      	ldrh	r3, [r3, #12]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b32:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8009b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d041      	beq.n	8009bbe <f_read+0x1b2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009b3a:	69fa      	ldr	r2, [r7, #28]
 8009b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3e:	4413      	add	r3, r2
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	8952      	ldrh	r2, [r2, #10]
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d905      	bls.n	8009b54 <f_read+0x148>
					cc = fs->csize - csect;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	895b      	ldrh	r3, [r3, #10]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	7858      	ldrb	r0, [r3, #1]
 8009b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b5a:	69ba      	ldr	r2, [r7, #24]
 8009b5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b5e:	f7fe f803 	bl	8007b68 <disk_read>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d004      	beq.n	8009b72 <f_read+0x166>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	745a      	strb	r2, [r3, #17]
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e09b      	b.n	8009caa <f_read+0x29e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	7c1b      	ldrb	r3, [r3, #16]
 8009b76:	b25b      	sxtb	r3, r3
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	da18      	bge.n	8009bae <f_read+0x1a2>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	69da      	ldr	r2, [r3, #28]
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d911      	bls.n	8009bae <f_read+0x1a2>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	69da      	ldr	r2, [r3, #28]
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	8992      	ldrh	r2, [r2, #12]
 8009b96:	fb02 f303 	mul.w	r3, r2, r3
 8009b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b9c:	18d0      	adds	r0, r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	899b      	ldrh	r3, [r3, #12]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	f00c f9e5 	bl	8015f78 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	899b      	ldrh	r3, [r3, #12]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb6:	fb02 f303 	mul.w	r3, r2, r3
 8009bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009bbc:	e05c      	b.n	8009c78 <f_read+0x26c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d02e      	beq.n	8009c26 <f_read+0x21a>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	7c1b      	ldrb	r3, [r3, #16]
 8009bcc:	b25b      	sxtb	r3, r3
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	da18      	bge.n	8009c04 <f_read+0x1f8>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	7858      	ldrb	r0, [r3, #1]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	69da      	ldr	r2, [r3, #28]
 8009be0:	2301      	movs	r3, #1
 8009be2:	f7fd fff3 	bl	8007bcc <disk_write>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d004      	beq.n	8009bf6 <f_read+0x1ea>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	745a      	strb	r2, [r3, #17]
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e059      	b.n	8009caa <f_read+0x29e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	7c1b      	ldrb	r3, [r3, #16]
 8009bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	7858      	ldrb	r0, [r3, #1]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009c0e:	2301      	movs	r3, #1
 8009c10:	69ba      	ldr	r2, [r7, #24]
 8009c12:	f7fd ffa9 	bl	8007b68 <disk_read>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d004      	beq.n	8009c26 <f_read+0x21a>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	745a      	strb	r2, [r3, #17]
 8009c22:	2301      	movs	r3, #1
 8009c24:	e041      	b.n	8009caa <f_read+0x29e>
			}
#endif
			fp->sect = sect;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	69ba      	ldr	r2, [r7, #24]
 8009c2a:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	899b      	ldrh	r3, [r3, #12]
 8009c30:	4618      	mov	r0, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	8992      	ldrh	r2, [r2, #12]
 8009c3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c3e:	fb01 f202 	mul.w	r2, r1, r2
 8009c42:	1a9b      	subs	r3, r3, r2
 8009c44:	1ac3      	subs	r3, r0, r3
 8009c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009c48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d901      	bls.n	8009c54 <f_read+0x248>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	8992      	ldrh	r2, [r2, #12]
 8009c62:	fbb3 f0f2 	udiv	r0, r3, r2
 8009c66:	fb00 f202 	mul.w	r2, r0, r2
 8009c6a:	1a9b      	subs	r3, r3, r2
 8009c6c:	440b      	add	r3, r1
 8009c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c70:	4619      	mov	r1, r3
 8009c72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009c74:	f00c f980 	bl	8015f78 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	607b      	str	r3, [r7, #4]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c86:	441a      	add	r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	601a      	str	r2, [r3, #0]
 8009c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c90:	4413      	add	r3, r2
 8009c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	695a      	ldr	r2, [r3, #20]
 8009c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9a:	441a      	add	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	615a      	str	r2, [r3, #20]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f47f aeed 	bne.w	8009a82 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3738      	adds	r7, #56	@ 0x38
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b08c      	sub	sp, #48	@ 0x30
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	60f8      	str	r0, [r7, #12]
 8009cba:	60b9      	str	r1, [r7, #8]
 8009cbc:	607a      	str	r2, [r7, #4]
 8009cbe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f107 0210 	add.w	r2, r7, #16
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7ff fc82 	bl	80095dc <validate>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009cde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d107      	bne.n	8009cf6 <f_write+0x44>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	7c5b      	ldrb	r3, [r3, #17]
 8009cea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d002      	beq.n	8009cfc <f_write+0x4a>
 8009cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009cfa:	e15e      	b.n	8009fba <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	7c1b      	ldrb	r3, [r3, #16]
 8009d00:	f003 0302 	and.w	r3, r3, #2
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d101      	bne.n	8009d0c <f_write+0x5a>
 8009d08:	2307      	movs	r3, #7
 8009d0a:	e156      	b.n	8009fba <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	695a      	ldr	r2, [r3, #20]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	441a      	add	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	695b      	ldr	r3, [r3, #20]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	f080 8140 	bcs.w	8009f9e <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	43db      	mvns	r3, r3
 8009d24:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8009d26:	e13a      	b.n	8009f9e <f_write+0x2ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	695b      	ldr	r3, [r3, #20]
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	8992      	ldrh	r2, [r2, #12]
 8009d30:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d34:	fb01 f202 	mul.w	r2, r1, r2
 8009d38:	1a9b      	subs	r3, r3, r2
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f040 80e5 	bne.w	8009f0a <f_write+0x258>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	695b      	ldr	r3, [r3, #20]
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	8992      	ldrh	r2, [r2, #12]
 8009d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	8952      	ldrh	r2, [r2, #10]
 8009d50:	3a01      	subs	r2, #1
 8009d52:	4013      	ands	r3, r2
 8009d54:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d137      	bne.n	8009dcc <f_write+0x11a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	695b      	ldr	r3, [r3, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10c      	bne.n	8009d7e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10e      	bne.n	8009d8e <f_write+0xdc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2100      	movs	r1, #0
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fe fbcc 	bl	8008512 <create_chain>
 8009d7a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009d7c:	e007      	b.n	8009d8e <f_write+0xdc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	4619      	mov	r1, r3
 8009d86:	4610      	mov	r0, r2
 8009d88:	f7fe fbc3 	bl	8008512 <create_chain>
 8009d8c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 8109 	beq.w	8009fa8 <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d104      	bne.n	8009da6 <f_write+0xf4>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2202      	movs	r2, #2
 8009da0:	745a      	strb	r2, [r3, #17]
 8009da2:	2302      	movs	r3, #2
 8009da4:	e109      	b.n	8009fba <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dac:	d104      	bne.n	8009db8 <f_write+0x106>
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2201      	movs	r2, #1
 8009db2:	745a      	strb	r2, [r3, #17]
 8009db4:	2301      	movs	r3, #1
 8009db6:	e100      	b.n	8009fba <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dbc:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d102      	bne.n	8009dcc <f_write+0x11a>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dca:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	7c1b      	ldrb	r3, [r3, #16]
 8009dd0:	b25b      	sxtb	r3, r3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	da18      	bge.n	8009e08 <f_write+0x156>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	7858      	ldrb	r0, [r3, #1]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	69da      	ldr	r2, [r3, #28]
 8009de4:	2301      	movs	r3, #1
 8009de6:	f7fd fef1 	bl	8007bcc <disk_write>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d004      	beq.n	8009dfa <f_write+0x148>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2201      	movs	r2, #1
 8009df4:	745a      	strb	r2, [r3, #17]
 8009df6:	2301      	movs	r3, #1
 8009df8:	e0df      	b.n	8009fba <f_write+0x308>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	7c1b      	ldrb	r3, [r3, #16]
 8009dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e02:	b2da      	uxtb	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8009e08:	693a      	ldr	r2, [r7, #16]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	4610      	mov	r0, r2
 8009e12:	f7fe f90d 	bl	8008030 <clst2sect>
 8009e16:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d104      	bne.n	8009e28 <f_write+0x176>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2202      	movs	r2, #2
 8009e22:	745a      	strb	r2, [r3, #17]
 8009e24:	2302      	movs	r3, #2
 8009e26:	e0c8      	b.n	8009fba <f_write+0x308>
			sect += csect;
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	899b      	ldrh	r3, [r3, #12]
 8009e34:	461a      	mov	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e3c:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d043      	beq.n	8009ecc <f_write+0x21a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009e44:	69ba      	ldr	r2, [r7, #24]
 8009e46:	6a3b      	ldr	r3, [r7, #32]
 8009e48:	4413      	add	r3, r2
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	8952      	ldrh	r2, [r2, #10]
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d905      	bls.n	8009e5e <f_write+0x1ac>
					cc = fs->csize - csect;
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	895b      	ldrh	r3, [r3, #10]
 8009e56:	461a      	mov	r2, r3
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	7858      	ldrb	r0, [r3, #1]
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	697a      	ldr	r2, [r7, #20]
 8009e66:	69f9      	ldr	r1, [r7, #28]
 8009e68:	f7fd feb0 	bl	8007bcc <disk_write>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d004      	beq.n	8009e7c <f_write+0x1ca>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2201      	movs	r2, #1
 8009e76:	745a      	strb	r2, [r3, #17]
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e09e      	b.n	8009fba <f_write+0x308>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	69da      	ldr	r2, [r3, #28]
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	6a3a      	ldr	r2, [r7, #32]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d918      	bls.n	8009ebc <f_write+0x20a>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	69da      	ldr	r2, [r3, #28]
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	1ad3      	subs	r3, r2, r3
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	8992      	ldrh	r2, [r2, #12]
 8009e9c:	fb02 f303 	mul.w	r3, r2, r3
 8009ea0:	69fa      	ldr	r2, [r7, #28]
 8009ea2:	18d1      	adds	r1, r2, r3
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	899b      	ldrh	r3, [r3, #12]
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	f00c f865 	bl	8015f78 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	7c1b      	ldrb	r3, [r3, #16]
 8009eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eb6:	b2da      	uxtb	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	899b      	ldrh	r3, [r3, #12]
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	fb02 f303 	mul.w	r3, r2, r3
 8009ec8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009eca:	e04b      	b.n	8009f64 <f_write+0x2b2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	69db      	ldr	r3, [r3, #28]
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d016      	beq.n	8009f04 <f_write+0x252>
				fp->fptr < fp->obj.objsize &&
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	695a      	ldr	r2, [r3, #20]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d210      	bcs.n	8009f04 <f_write+0x252>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	7858      	ldrb	r0, [r3, #1]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009eec:	2301      	movs	r3, #1
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	f7fd fe3a 	bl	8007b68 <disk_read>
 8009ef4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d004      	beq.n	8009f04 <f_write+0x252>
					ABORT(fs, FR_DISK_ERR);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	745a      	strb	r2, [r3, #17]
 8009f00:	2301      	movs	r3, #1
 8009f02:	e05a      	b.n	8009fba <f_write+0x308>
			}
#endif
			fp->sect = sect;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	899b      	ldrh	r3, [r3, #12]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	695b      	ldr	r3, [r3, #20]
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	8992      	ldrh	r2, [r2, #12]
 8009f18:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f1c:	fb01 f202 	mul.w	r2, r1, r2
 8009f20:	1a9b      	subs	r3, r3, r2
 8009f22:	1ac3      	subs	r3, r0, r3
 8009f24:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d901      	bls.n	8009f32 <f_write+0x280>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	695b      	ldr	r3, [r3, #20]
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	8992      	ldrh	r2, [r2, #12]
 8009f40:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f44:	fb00 f202 	mul.w	r2, r0, r2
 8009f48:	1a9b      	subs	r3, r3, r2
 8009f4a:	440b      	add	r3, r1
 8009f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f4e:	69f9      	ldr	r1, [r7, #28]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f00c f811 	bl	8015f78 <memcpy>
		fp->flag |= FA_DIRTY;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	7c1b      	ldrb	r3, [r3, #16]
 8009f5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	607b      	str	r3, [r7, #4]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f72:	441a      	add	r2, r3
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	601a      	str	r2, [r3, #0]
 8009f78:	69fa      	ldr	r2, [r7, #28]
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7c:	4413      	add	r3, r2
 8009f7e:	61fb      	str	r3, [r7, #28]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	695a      	ldr	r2, [r3, #20]
 8009f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f86:	441a      	add	r2, r3
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	615a      	str	r2, [r3, #20]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	68da      	ldr	r2, [r3, #12]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	695b      	ldr	r3, [r3, #20]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	bf38      	it	cc
 8009f98:	461a      	movcc	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	60da      	str	r2, [r3, #12]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f47f aec1 	bne.w	8009d28 <f_write+0x76>
 8009fa6:	e000      	b.n	8009faa <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009fa8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	7c1b      	ldrb	r3, [r3, #16]
 8009fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fb2:	b2da      	uxtb	r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3730      	adds	r7, #48	@ 0x30
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b086      	sub	sp, #24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f107 0208 	add.w	r2, r7, #8
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7ff fb01 	bl	80095dc <validate>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009fde:	7dfb      	ldrb	r3, [r7, #23]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d167      	bne.n	800a0b4 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	7c1b      	ldrb	r3, [r3, #16]
 8009fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d061      	beq.n	800a0b4 <f_sync+0xf0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	7c1b      	ldrb	r3, [r3, #16]
 8009ff4:	b25b      	sxtb	r3, r3
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	da15      	bge.n	800a026 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	7858      	ldrb	r0, [r3, #1]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	69da      	ldr	r2, [r3, #28]
 800a008:	2301      	movs	r3, #1
 800a00a:	f7fd fddf 	bl	8007bcc <disk_write>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <f_sync+0x54>
 800a014:	2301      	movs	r3, #1
 800a016:	e04e      	b.n	800a0b6 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	7c1b      	ldrb	r3, [r3, #16]
 800a01c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a020:	b2da      	uxtb	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a026:	4b26      	ldr	r3, [pc, #152]	@ (800a0c0 <f_sync+0xfc>)
 800a028:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a1b      	ldr	r3, [r3, #32]
 800a030:	4619      	mov	r1, r3
 800a032:	4610      	mov	r0, r2
 800a034:	f7fd ff61 	bl	8007efa <move_window>
 800a038:	4603      	mov	r3, r0
 800a03a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a03c:	7dfb      	ldrb	r3, [r7, #23]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d138      	bne.n	800a0b4 <f_sync+0xf0>
					dir = fp->dir_ptr;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a046:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	330b      	adds	r3, #11
 800a04c:	781a      	ldrb	r2, [r3, #0]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	330b      	adds	r3, #11
 800a052:	f042 0220 	orr.w	r2, r2, #32
 800a056:	b2d2      	uxtb	r2, r2
 800a058:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6818      	ldr	r0, [r3, #0]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	461a      	mov	r2, r3
 800a064:	68f9      	ldr	r1, [r7, #12]
 800a066:	f7fe fd02 	bl	8008a6e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f103 021c 	add.w	r2, r3, #28
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	4619      	mov	r1, r3
 800a076:	4610      	mov	r0, r2
 800a078:	f7fd feb5 	bl	8007de6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	3316      	adds	r3, #22
 800a080:	6939      	ldr	r1, [r7, #16]
 800a082:	4618      	mov	r0, r3
 800a084:	f7fd feaf 	bl	8007de6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3312      	adds	r3, #18
 800a08c:	2100      	movs	r1, #0
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fd fe8e 	bl	8007db0 <st_word>
					fs->wflag = 1;
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	2201      	movs	r2, #1
 800a098:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fd ff59 	bl	8007f54 <sync_fs>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	7c1b      	ldrb	r3, [r3, #16]
 800a0aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3718      	adds	r7, #24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	54210000 	.word	0x54210000

0800a0c4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f7ff ff79 	bl	8009fc4 <f_sync>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10e      	bne.n	800a0fa <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f107 0208 	add.w	r2, r7, #8
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7ff fa79 	bl	80095dc <validate>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d102      	bne.n	800a0fa <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08e      	sub	sp, #56	@ 0x38
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60b9      	str	r1, [r7, #8]
 800a10c:	607b      	str	r3, [r7, #4]
 800a10e:	4603      	mov	r3, r0
 800a110:	73fb      	strb	r3, [r7, #15]
 800a112:	4613      	mov	r3, r2
 800a114:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800a116:	f107 0210 	add.w	r2, r7, #16
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
 800a11c:	2101      	movs	r1, #1
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fd fd88 	bl	8007c34 <disk_ioctl>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <create_partition+0x2a>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e108      	b.n	800a340 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800a132:	233f      	movs	r3, #63	@ 0x3f
 800a134:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800a136:	2308      	movs	r3, #8
 800a138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a13c:	e004      	b.n	800a148 <create_partition+0x44>
 800a13e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a142:	005b      	lsls	r3, r3, #1
 800a144:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a148:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00a      	beq.n	800a166 <create_partition+0x62>
 800a150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a154:	6a3a      	ldr	r2, [r7, #32]
 800a156:	fbb2 f2f3 	udiv	r2, r2, r3
 800a15a:	7ffb      	ldrb	r3, [r7, #31]
 800a15c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a160:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a164:	d8eb      	bhi.n	800a13e <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800a166:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d102      	bne.n	800a174 <create_partition+0x70>
 800a16e:	23ff      	movs	r3, #255	@ 0xff
 800a170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800a174:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a178:	2100      	movs	r1, #0
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f00b fe78 	bl	8015e70 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a186:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a188:	2300      	movs	r3, #0
 800a18a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a18c:	7ffb      	ldrb	r3, [r7, #31]
 800a18e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a190:	e0b5      	b.n	800a2fe <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800a192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	4413      	add	r3, r2
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800a19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a0:	2b64      	cmp	r3, #100	@ 0x64
 800a1a2:	d80d      	bhi.n	800a1c0 <create_partition+0xbc>
 800a1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a6:	2b64      	cmp	r3, #100	@ 0x64
 800a1a8:	d008      	beq.n	800a1bc <create_partition+0xb8>
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	4a66      	ldr	r2, [pc, #408]	@ (800a348 <create_partition+0x244>)
 800a1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b2:	095b      	lsrs	r3, r3, #5
 800a1b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1b6:	fb02 f303 	mul.w	r3, r2, r3
 800a1ba:	e000      	b.n	800a1be <create_partition+0xba>
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800a1c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c4:	4413      	add	r3, r2
 800a1c6:	6a3a      	ldr	r2, [r7, #32]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d305      	bcc.n	800a1d8 <create_partition+0xd4>
 800a1cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d0:	4413      	add	r3, r2
 800a1d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d903      	bls.n	800a1e0 <create_partition+0xdc>
 800a1d8:	6a3a      	ldr	r2, [r7, #32]
 800a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1dc:	1ad3      	subs	r3, r2, r3
 800a1de:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f000 8097 	beq.w	800a316 <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800a1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ea:	3308      	adds	r3, #8
 800a1ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fd fdf9 	bl	8007de6 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800a1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f6:	330c      	adds	r3, #12
 800a1f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fd fdf3 	bl	8007de6 <st_dword>
			pte[PTE_System] = sys;					/* System type */
 800a200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a202:	3304      	adds	r3, #4
 800a204:	7bba      	ldrb	r2, [r7, #14]
 800a206:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800a208:	7ffb      	ldrb	r3, [r7, #31]
 800a20a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a20c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a214:	fbb2 f3f3 	udiv	r3, r2, r3
 800a218:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800a21a:	7ffb      	ldrb	r3, [r7, #31]
 800a21c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a21e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a222:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a226:	fbb3 f1f2 	udiv	r1, r3, r2
 800a22a:	fb01 f202 	mul.w	r2, r1, r2
 800a22e:	1a9b      	subs	r3, r3, r2
 800a230:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800a232:	7ffa      	ldrb	r2, [r7, #31]
 800a234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a236:	fbb3 f1f2 	udiv	r1, r3, r2
 800a23a:	fb01 f202 	mul.w	r2, r1, r2
 800a23e:	1a9b      	subs	r3, r3, r2
 800a240:	b2db      	uxtb	r3, r3
 800a242:	3301      	adds	r3, #1
 800a244:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800a246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a248:	3301      	adds	r3, #1
 800a24a:	7dfa      	ldrb	r2, [r7, #23]
 800a24c:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	089b      	lsrs	r3, r3, #2
 800a252:	b2db      	uxtb	r3, r3
 800a254:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a258:	b2d9      	uxtb	r1, r3
 800a25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25c:	3302      	adds	r3, #2
 800a25e:	7dba      	ldrb	r2, [r7, #22]
 800a260:	430a      	orrs	r2, r1
 800a262:	b2d2      	uxtb	r2, r2
 800a264:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800a266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a268:	3303      	adds	r3, #3
 800a26a:	69ba      	ldr	r2, [r7, #24]
 800a26c:	b2d2      	uxtb	r2, r2
 800a26e:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800a270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a274:	4413      	add	r3, r2
 800a276:	1e5a      	subs	r2, r3, #1
 800a278:	7ffb      	ldrb	r3, [r7, #31]
 800a27a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a27e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a282:	fbb2 f3f3 	udiv	r3, r2, r3
 800a286:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800a288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28c:	4413      	add	r3, r2
 800a28e:	1e5a      	subs	r2, r3, #1
 800a290:	7ffb      	ldrb	r3, [r7, #31]
 800a292:	fbb2 f3f3 	udiv	r3, r2, r3
 800a296:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a29a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a29e:	fb01 f202 	mul.w	r2, r1, r2
 800a2a2:	1a9b      	subs	r3, r3, r2
 800a2a4:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800a2a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2aa:	4413      	add	r3, r2
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	7ffa      	ldrb	r2, [r7, #31]
 800a2b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2b4:	fb01 f202 	mul.w	r2, r1, r2
 800a2b8:	1a9b      	subs	r3, r3, r2
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	3301      	adds	r3, #1
 800a2be:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 800a2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c2:	3305      	adds	r3, #5
 800a2c4:	7dfa      	ldrb	r2, [r7, #23]
 800a2c6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	089b      	lsrs	r3, r3, #2
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a2d2:	b2d9      	uxtb	r1, r3
 800a2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d6:	3306      	adds	r3, #6
 800a2d8:	7dba      	ldrb	r2, [r7, #22]
 800a2da:	430a      	orrs	r2, r1
 800a2dc:	b2d2      	uxtb	r2, r2
 800a2de:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 800a2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e2:	3307      	adds	r3, #7
 800a2e4:	69ba      	ldr	r2, [r7, #24]
 800a2e6:	b2d2      	uxtb	r2, r2
 800a2e8:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800a2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ec:	3310      	adds	r3, #16
 800a2ee:	62bb      	str	r3, [r7, #40]	@ 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800a2f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fa:	4413      	add	r3, r2
 800a2fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a300:	2b03      	cmp	r3, #3
 800a302:	d809      	bhi.n	800a318 <create_partition+0x214>
 800a304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a306:	2b00      	cmp	r3, #0
 800a308:	d006      	beq.n	800a318 <create_partition+0x214>
 800a30a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	429a      	cmp	r2, r3
 800a310:	f4ff af3f 	bcc.w	800a192 <create_partition+0x8e>
 800a314:	e000      	b.n	800a318 <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800a316:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a31e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a322:	4618      	mov	r0, r3
 800a324:	f7fd fd44 	bl	8007db0 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800a328:	7bf8      	ldrb	r0, [r7, #15]
 800a32a:	2301      	movs	r3, #1
 800a32c:	2200      	movs	r2, #0
 800a32e:	6879      	ldr	r1, [r7, #4]
 800a330:	f7fd fc4c 	bl	8007bcc <disk_write>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <create_partition+0x23a>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <create_partition+0x23c>
	}

	return FR_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3738      	adds	r7, #56	@ 0x38
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	51eb851f 	.word	0x51eb851f

0800a34c <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b09e      	sub	sp, #120	@ 0x78
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
 800a358:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a35a:	f107 030c 	add.w	r3, r7, #12
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fe fd78 	bl	8008e54 <get_ldnumber>
 800a364:	6478      	str	r0, [r7, #68]	@ 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800a366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a368:	2b00      	cmp	r3, #0
 800a36a:	da02      	bge.n	800a372 <f_mkfs+0x26>
 800a36c:	230b      	movs	r3, #11
 800a36e:	f000 bc39 	b.w	800abe4 <f_mkfs+0x898>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800a372:	4a90      	ldr	r2, [pc, #576]	@ (800a5b4 <f_mkfs+0x268>)
 800a374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d005      	beq.n	800a38a <f_mkfs+0x3e>
 800a37e:	4a8d      	ldr	r2, [pc, #564]	@ (800a5b4 <f_mkfs+0x268>)
 800a380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a386:	2200      	movs	r2, #0
 800a388:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800a38a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a38c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 800a390:	2300      	movs	r3, #0
 800a392:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800a396:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fd fbbc 	bl	8007b18 <disk_initialize>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800a3a6:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a3aa:	f003 0301 	and.w	r3, r3, #1
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <f_mkfs+0x6c>
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	f000 bc16 	b.w	800abe4 <f_mkfs+0x898>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a3b8:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a3bc:	f003 0304 	and.w	r3, r3, #4
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <f_mkfs+0x7e>
 800a3c4:	230a      	movs	r3, #10
 800a3c6:	f000 bc0d 	b.w	800abe4 <f_mkfs+0x898>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d101      	bne.n	800a3d4 <f_mkfs+0x88>
 800a3d0:	4b79      	ldr	r3, [pc, #484]	@ (800a5b8 <f_mkfs+0x26c>)
 800a3d2:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	61fb      	str	r3, [r7, #28]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d107      	bne.n	800a3f0 <f_mkfs+0xa4>
 800a3e0:	f107 021c 	add.w	r2, r7, #28
 800a3e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a3e8:	2103      	movs	r1, #3
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fd fc22 	bl	8007c34 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d009      	beq.n	800a40a <f_mkfs+0xbe>
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3fc:	d805      	bhi.n	800a40a <f_mkfs+0xbe>
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	1e5a      	subs	r2, r3, #1
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	4013      	ands	r3, r2
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <f_mkfs+0xc2>
 800a40a:	2301      	movs	r3, #1
 800a40c:	61fb      	str	r3, [r7, #28]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800a40e:	f107 0220 	add.w	r2, r7, #32
 800a412:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a416:	2102      	movs	r1, #2
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fd fc0b 	bl	8007c34 <disk_ioctl>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <f_mkfs+0xdc>
 800a424:	2301      	movs	r3, #1
 800a426:	e3dd      	b.n	800abe4 <f_mkfs+0x898>
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800a428:	8c3b      	ldrh	r3, [r7, #32]
 800a42a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a42e:	d80a      	bhi.n	800a446 <f_mkfs+0xfa>
 800a430:	8c3b      	ldrh	r3, [r7, #32]
 800a432:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a436:	d306      	bcc.n	800a446 <f_mkfs+0xfa>
 800a438:	8c3b      	ldrh	r3, [r7, #32]
 800a43a:	461a      	mov	r2, r3
 800a43c:	8c3b      	ldrh	r3, [r7, #32]
 800a43e:	3b01      	subs	r3, #1
 800a440:	4013      	ands	r3, r2
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <f_mkfs+0xfe>
 800a446:	2301      	movs	r3, #1
 800a448:	e3cc      	b.n	800abe4 <f_mkfs+0x898>
#else
	ss = FF_MAX_SS;
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	f003 030f 	and.w	r3, r3, #15
 800a452:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	785b      	ldrb	r3, [r3, #1]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d006      	beq.n	800a46c <f_mkfs+0x120>
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	785b      	ldrb	r3, [r3, #1]
 800a462:	2b02      	cmp	r3, #2
 800a464:	d802      	bhi.n	800a46c <f_mkfs+0x120>
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	785b      	ldrb	r3, [r3, #1]
 800a46a:	e000      	b.n	800a46e <f_mkfs+0x122>
 800a46c:	2301      	movs	r3, #1
 800a46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d013      	beq.n	800a4a0 <f_mkfs+0x154>
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a480:	d80e      	bhi.n	800a4a0 <f_mkfs+0x154>
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	8c3a      	ldrh	r2, [r7, #32]
 800a488:	0952      	lsrs	r2, r2, #5
 800a48a:	b292      	uxth	r2, r2
 800a48c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a490:	fb01 f202 	mul.w	r2, r1, r2
 800a494:	1a9b      	subs	r3, r3, r2
 800a496:	2b00      	cmp	r3, #0
 800a498:	d102      	bne.n	800a4a0 <f_mkfs+0x154>
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	e001      	b.n	800a4a4 <f_mkfs+0x158>
 800a4a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4a4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4ae:	d80a      	bhi.n	800a4c6 <f_mkfs+0x17a>
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	68da      	ldr	r2, [r3, #12]
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d102      	bne.n	800a4c6 <f_mkfs+0x17a>
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	e000      	b.n	800a4c8 <f_mkfs+0x17c>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sz_au /= ss;	/* Byte --> Sector */
 800a4ca:	8c3b      	ldrh	r3, [r7, #32]
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800a4d6:	8c3b      	ldrh	r3, [r7, #32]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4e0:	637b      	str	r3, [r7, #52]	@ 0x34
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800a4e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d101      	bne.n	800a4ec <f_mkfs+0x1a0>
 800a4e8:	2311      	movs	r3, #17
 800a4ea:	e37b      	b.n	800abe4 <f_mkfs+0x898>
	buf = (BYTE*)work;		/* Working buffer */
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	633b      	str	r3, [r7, #48]	@ 0x30
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <f_mkfs+0x1ae>
 800a4f6:	2311      	movs	r3, #17
 800a4f8:	e374      	b.n	800abe4 <f_mkfs+0x898>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	61bb      	str	r3, [r7, #24]
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	66fb      	str	r3, [r7, #108]	@ 0x6c
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800a502:	f107 0218 	add.w	r2, r7, #24
 800a506:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a50a:	2101      	movs	r1, #1
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fd fb91 	bl	8007c34 <disk_ioctl>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d001      	beq.n	800a51c <f_mkfs+0x1d0>
 800a518:	2301      	movs	r3, #1
 800a51a:	e363      	b.n	800abe4 <f_mkfs+0x898>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800a51c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a520:	f003 0308 	and.w	r3, r3, #8
 800a524:	2b00      	cmp	r3, #0
 800a526:	d108      	bne.n	800a53a <f_mkfs+0x1ee>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	2b3f      	cmp	r3, #63	@ 0x3f
 800a52c:	d905      	bls.n	800a53a <f_mkfs+0x1ee>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800a52e:	233f      	movs	r3, #63	@ 0x3f
 800a530:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a532:	69ba      	ldr	r2, [r7, #24]
 800a534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	61bb      	str	r3, [r7, #24]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a53e:	d801      	bhi.n	800a544 <f_mkfs+0x1f8>
 800a540:	230e      	movs	r3, #14
 800a542:	e34f      	b.n	800abe4 <f_mkfs+0x898>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800a544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a546:	2b80      	cmp	r3, #128	@ 0x80
 800a548:	d901      	bls.n	800a54e <f_mkfs+0x202>
 800a54a:	2380      	movs	r3, #128	@ 0x80
 800a54c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800a54e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a552:	f003 0302 	and.w	r3, r3, #2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d009      	beq.n	800a56e <f_mkfs+0x222>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800a55a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	2b00      	cmp	r3, #0
 800a564:	d103      	bne.n	800a56e <f_mkfs+0x222>
				fsty = FS_FAT32; break;
 800a566:	2303      	movs	r3, #3
 800a568:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800a56c:	e00a      	b.n	800a584 <f_mkfs+0x238>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800a56e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a572:	f003 0301 	and.w	r3, r3, #1
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <f_mkfs+0x232>
 800a57a:	2313      	movs	r3, #19
 800a57c:	e332      	b.n	800abe4 <f_mkfs+0x898>
		fsty = FS_FAT16;
 800a57e:	2302      	movs	r3, #2
 800a580:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	f103 43a8 	add.w	r3, r3, #1409286144	@ 0x54000000
 800a58a:	f503 1304 	add.w	r3, r3, #2162688	@ 0x210000
 800a58e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 800a590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a592:	663b      	str	r3, [r7, #96]	@ 0x60
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800a594:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a598:	2b03      	cmp	r3, #3
 800a59a:	d141      	bne.n	800a620 <f_mkfs+0x2d4>
				if (pau == 0) {	/* AU auto-selection */
 800a59c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d120      	bne.n	800a5e4 <f_mkfs+0x298>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	0c5b      	lsrs	r3, r3, #17
 800a5a6:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5b0:	e00a      	b.n	800a5c8 <f_mkfs+0x27c>
 800a5b2:	bf00      	nop
 800a5b4:	20005cfc 	.word	0x20005cfc
 800a5b8:	08017650 	.word	0x08017650
 800a5bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5be:	3301      	adds	r3, #1
 800a5c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5c8:	4a95      	ldr	r2, [pc, #596]	@ (800a820 <f_mkfs+0x4d4>)
 800a5ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d007      	beq.n	800a5e4 <f_mkfs+0x298>
 800a5d4:	4a92      	ldr	r2, [pc, #584]	@ (800a820 <f_mkfs+0x4d4>)
 800a5d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d2eb      	bcs.n	800a5bc <f_mkfs+0x270>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800a5e4:	69ba      	ldr	r2, [r7, #24]
 800a5e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a5e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ec:	62bb      	str	r3, [r7, #40]	@ 0x28
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f0:	3302      	adds	r3, #2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	8c3a      	ldrh	r2, [r7, #32]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	8c3a      	ldrh	r2, [r7, #32]
 800a5fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a600:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800a602:	2320      	movs	r3, #32
 800a604:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = 0;		/* No static directory */
 800a606:	2300      	movs	r3, #0
 800a608:	653b      	str	r3, [r7, #80]	@ 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800a60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a610:	4293      	cmp	r3, r2
 800a612:	d903      	bls.n	800a61c <f_mkfs+0x2d0>
 800a614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a616:	4a83      	ldr	r2, [pc, #524]	@ (800a824 <f_mkfs+0x4d8>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d94b      	bls.n	800a6b4 <f_mkfs+0x368>
 800a61c:	230e      	movs	r3, #14
 800a61e:	e2e1      	b.n	800abe4 <f_mkfs+0x898>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800a620:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a622:	2b00      	cmp	r3, #0
 800a624:	d11b      	bne.n	800a65e <f_mkfs+0x312>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	0b1b      	lsrs	r3, r3, #12
 800a62a:	667b      	str	r3, [r7, #100]	@ 0x64
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a62c:	2300      	movs	r3, #0
 800a62e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a630:	2301      	movs	r3, #1
 800a632:	663b      	str	r3, [r7, #96]	@ 0x60
 800a634:	e005      	b.n	800a642 <f_mkfs+0x2f6>
 800a636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a638:	3301      	adds	r3, #1
 800a63a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a63c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a63e:	005b      	lsls	r3, r3, #1
 800a640:	663b      	str	r3, [r7, #96]	@ 0x60
 800a642:	4a79      	ldr	r2, [pc, #484]	@ (800a828 <f_mkfs+0x4dc>)
 800a644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d007      	beq.n	800a65e <f_mkfs+0x312>
 800a64e:	4a76      	ldr	r2, [pc, #472]	@ (800a828 <f_mkfs+0x4dc>)
 800a650:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a656:	461a      	mov	r2, r3
 800a658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d2eb      	bcs.n	800a636 <f_mkfs+0x2ea>
				}
				n_clst = (DWORD)sz_vol / pau;
 800a65e:	69ba      	ldr	r2, [r7, #24]
 800a660:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a662:	fbb2 f3f3 	udiv	r3, r2, r3
 800a666:	62bb      	str	r3, [r7, #40]	@ 0x28
				if (n_clst > MAX_FAT12) {
 800a668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a66e:	4293      	cmp	r3, r2
 800a670:	d904      	bls.n	800a67c <f_mkfs+0x330>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a674:	3302      	adds	r3, #2
 800a676:	005b      	lsls	r3, r3, #1
 800a678:	667b      	str	r3, [r7, #100]	@ 0x64
 800a67a:	e00a      	b.n	800a692 <f_mkfs+0x346>
				} else {
					fsty = FS_FAT12;
 800a67c:	2301      	movs	r3, #1
 800a67e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a682:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a684:	4613      	mov	r3, r2
 800a686:	005b      	lsls	r3, r3, #1
 800a688:	4413      	add	r3, r2
 800a68a:	3301      	adds	r3, #1
 800a68c:	085b      	lsrs	r3, r3, #1
 800a68e:	3303      	adds	r3, #3
 800a690:	667b      	str	r3, [r7, #100]	@ 0x64
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a692:	8c3b      	ldrh	r3, [r7, #32]
 800a694:	461a      	mov	r2, r3
 800a696:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a698:	4413      	add	r3, r2
 800a69a:	3b01      	subs	r3, #1
 800a69c:	8c3a      	ldrh	r2, [r7, #32]
 800a69e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6a2:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	677b      	str	r3, [r7, #116]	@ 0x74
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800a6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6aa:	015b      	lsls	r3, r3, #5
 800a6ac:	8c3a      	ldrh	r2, [r7, #32]
 800a6ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6b2:	653b      	str	r3, [r7, #80]	@ 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800a6b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a6b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6b8:	4413      	add	r3, r2
 800a6ba:	66bb      	str	r3, [r7, #104]	@ 0x68
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800a6bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a6c0:	fb03 f202 	mul.w	r2, r3, r2
 800a6c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6c6:	4413      	add	r3, r2
 800a6c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a6ca:	4413      	add	r3, r2
 800a6cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800a6ce:	69fa      	ldr	r2, [r7, #28]
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d2:	4413      	add	r3, r2
 800a6d4:	1e5a      	subs	r2, r3, #1
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	425b      	negs	r3, r3
 800a6da:	401a      	ands	r2, r3
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	667b      	str	r3, [r7, #100]	@ 0x64
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800a6e2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a6e6:	2b03      	cmp	r3, #3
 800a6e8:	d108      	bne.n	800a6fc <f_mkfs+0x3b0>
				sz_rsv += n; b_fat += n;
 800a6ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a6ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6ee:	4413      	add	r3, r2
 800a6f0:	677b      	str	r3, [r7, #116]	@ 0x74
 800a6f2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a6f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6f6:	4413      	add	r3, r2
 800a6f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a6fa:	e019      	b.n	800a730 <f_mkfs+0x3e4>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800a6fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a700:	fbb3 f2f2 	udiv	r2, r3, r2
 800a704:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a706:	fb01 f202 	mul.w	r2, r1, r2
 800a70a:	1a9b      	subs	r3, r3, r2
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d008      	beq.n	800a722 <f_mkfs+0x3d6>
					n--; sz_rsv++; b_fat++;
 800a710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a712:	3b01      	subs	r3, #1
 800a714:	667b      	str	r3, [r7, #100]	@ 0x64
 800a716:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a718:	3301      	adds	r3, #1
 800a71a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a71c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a71e:	3301      	adds	r3, #1
 800a720:	66bb      	str	r3, [r7, #104]	@ 0x68
				}
				sz_fat += n / n_fat;
 800a722:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a726:	fbb2 f3f3 	udiv	r3, r2, r3
 800a72a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a72c:	4413      	add	r3, r2
 800a72e:	657b      	str	r3, [r7, #84]	@ 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800a730:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a732:	011a      	lsls	r2, r3, #4
 800a734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a736:	441a      	add	r2, r3
 800a738:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a73a:	1ad2      	subs	r2, r2, r3
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d901      	bls.n	800a746 <f_mkfs+0x3fa>
 800a742:	230e      	movs	r3, #14
 800a744:	e24e      	b.n	800abe4 <f_mkfs+0x898>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800a746:	69ba      	ldr	r2, [r7, #24]
 800a748:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a74a:	1ad2      	subs	r2, r2, r3
 800a74c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a74e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a750:	fb01 f303 	mul.w	r3, r1, r3
 800a754:	1ad2      	subs	r2, r2, r3
 800a756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a758:	1ad2      	subs	r2, r2, r3
 800a75a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a75c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a760:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (fsty == FS_FAT32) {
 800a762:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a766:	2b03      	cmp	r3, #3
 800a768:	d10f      	bne.n	800a78a <f_mkfs+0x43e>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800a76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a76c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a770:	4293      	cmp	r3, r2
 800a772:	d80a      	bhi.n	800a78a <f_mkfs+0x43e>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a776:	2b00      	cmp	r3, #0
 800a778:	d105      	bne.n	800a786 <f_mkfs+0x43a>
 800a77a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a77c:	085b      	lsrs	r3, r3, #1
 800a77e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a780:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a782:	2b00      	cmp	r3, #0
 800a784:	d145      	bne.n	800a812 <f_mkfs+0x4c6>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800a786:	230e      	movs	r3, #14
 800a788:	e22c      	b.n	800abe4 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT16) {
 800a78a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d134      	bne.n	800a7fc <f_mkfs+0x4b0>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800a792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a794:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a798:	4293      	cmp	r3, r2
 800a79a:	d91f      	bls.n	800a7dc <f_mkfs+0x490>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800a79c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d107      	bne.n	800a7b2 <f_mkfs+0x466>
 800a7a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7a4:	005b      	lsls	r3, r3, #1
 800a7a6:	2b40      	cmp	r3, #64	@ 0x40
 800a7a8:	d803      	bhi.n	800a7b2 <f_mkfs+0x466>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 800a7aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7ac:	005b      	lsls	r3, r3, #1
 800a7ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7b0:	e034      	b.n	800a81c <f_mkfs+0x4d0>
					}
					if ((fsopt & FM_FAT32)) {
 800a7b2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a7b6:	f003 0302 	and.w	r3, r3, #2
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d003      	beq.n	800a7c6 <f_mkfs+0x47a>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800a7be:	2303      	movs	r3, #3
 800a7c0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800a7c4:	e02a      	b.n	800a81c <f_mkfs+0x4d0>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a7c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d105      	bne.n	800a7d8 <f_mkfs+0x48c>
 800a7cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7ce:	005b      	lsls	r3, r3, #1
 800a7d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7d4:	2b80      	cmp	r3, #128	@ 0x80
 800a7d6:	d91e      	bls.n	800a816 <f_mkfs+0x4ca>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800a7d8:	230e      	movs	r3, #14
 800a7da:	e203      	b.n	800abe4 <f_mkfs+0x898>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800a7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7de:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d80a      	bhi.n	800a7fc <f_mkfs+0x4b0>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a7e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d105      	bne.n	800a7f8 <f_mkfs+0x4ac>
 800a7ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7ee:	005b      	lsls	r3, r3, #1
 800a7f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7f4:	2b80      	cmp	r3, #128	@ 0x80
 800a7f6:	d910      	bls.n	800a81a <f_mkfs+0x4ce>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800a7f8:	230e      	movs	r3, #14
 800a7fa:	e1f3      	b.n	800abe4 <f_mkfs+0x898>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800a7fc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a800:	2b01      	cmp	r3, #1
 800a802:	d113      	bne.n	800a82c <f_mkfs+0x4e0>
 800a804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a806:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d90e      	bls.n	800a82c <f_mkfs+0x4e0>
 800a80e:	230e      	movs	r3, #14
 800a810:	e1e8      	b.n	800abe4 <f_mkfs+0x898>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a812:	bf00      	nop
 800a814:	e6bc      	b.n	800a590 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a816:	bf00      	nop
 800a818:	e6ba      	b.n	800a590 <f_mkfs+0x244>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a81a:	bf00      	nop
			pau = sz_au;
 800a81c:	e6b8      	b.n	800a590 <f_mkfs+0x244>
 800a81e:	bf00      	nop
 800a820:	08017660 	.word	0x08017660
 800a824:	0ffffff5 	.word	0x0ffffff5
 800a828:	08017670 	.word	0x08017670

			/* Ok, it is the valid cluster configuration */
			break;
 800a82c:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800a82e:	8c3b      	ldrh	r3, [r7, #32]
 800a830:	461a      	mov	r2, r3
 800a832:	2100      	movs	r1, #0
 800a834:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a836:	f00b fb1b 	bl	8015e70 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800a83a:	220b      	movs	r2, #11
 800a83c:	49b1      	ldr	r1, [pc, #708]	@ (800ab04 <f_mkfs+0x7b8>)
 800a83e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a840:	f00b fb9a 	bl	8015f78 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800a844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a846:	330b      	adds	r3, #11
 800a848:	8c3a      	ldrh	r2, [r7, #32]
 800a84a:	4611      	mov	r1, r2
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fd faaf 	bl	8007db0 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800a852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a854:	330d      	adds	r3, #13
 800a856:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a858:	b2d2      	uxtb	r2, r2
 800a85a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800a85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85e:	330e      	adds	r3, #14
 800a860:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a862:	b292      	uxth	r2, r2
 800a864:	4611      	mov	r1, r2
 800a866:	4618      	mov	r0, r3
 800a868:	f7fd faa2 	bl	8007db0 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800a86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86e:	3310      	adds	r3, #16
 800a870:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a872:	b2d2      	uxtb	r2, r2
 800a874:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800a876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a878:	f103 0211 	add.w	r2, r3, #17
 800a87c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a880:	2b03      	cmp	r3, #3
 800a882:	d002      	beq.n	800a88a <f_mkfs+0x53e>
 800a884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a886:	b29b      	uxth	r3, r3
 800a888:	e000      	b.n	800a88c <f_mkfs+0x540>
 800a88a:	2300      	movs	r3, #0
 800a88c:	4619      	mov	r1, r3
 800a88e:	4610      	mov	r0, r2
 800a890:	f7fd fa8e 	bl	8007db0 <st_word>
		if (sz_vol < 0x10000) {
 800a894:	69bb      	ldr	r3, [r7, #24]
 800a896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a89a:	d208      	bcs.n	800a8ae <f_mkfs+0x562>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800a89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89e:	3313      	adds	r3, #19
 800a8a0:	69ba      	ldr	r2, [r7, #24]
 800a8a2:	b292      	uxth	r2, r2
 800a8a4:	4611      	mov	r1, r2
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fd fa82 	bl	8007db0 <st_word>
 800a8ac:	e006      	b.n	800a8bc <f_mkfs+0x570>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800a8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b0:	3320      	adds	r3, #32
 800a8b2:	69ba      	ldr	r2, [r7, #24]
 800a8b4:	4611      	mov	r1, r2
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fd fa95 	bl	8007de6 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8be:	3315      	adds	r3, #21
 800a8c0:	22f8      	movs	r2, #248	@ 0xf8
 800a8c2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c6:	3318      	adds	r3, #24
 800a8c8:	213f      	movs	r1, #63	@ 0x3f
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fd fa70 	bl	8007db0 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d2:	331a      	adds	r3, #26
 800a8d4:	21ff      	movs	r1, #255	@ 0xff
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fd fa6a 	bl	8007db0 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8de:	331c      	adds	r3, #28
 800a8e0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fd fa7f 	bl	8007de6 <st_dword>
		if (fsty == FS_FAT32) {
 800a8e8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a8ec:	2b03      	cmp	r3, #3
 800a8ee:	d12d      	bne.n	800a94c <f_mkfs+0x600>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f2:	3343      	adds	r3, #67	@ 0x43
 800a8f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fd fa75 	bl	8007de6 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fe:	3324      	adds	r3, #36	@ 0x24
 800a900:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a902:	4618      	mov	r0, r3
 800a904:	f7fd fa6f 	bl	8007de6 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800a908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a90a:	332c      	adds	r3, #44	@ 0x2c
 800a90c:	2102      	movs	r1, #2
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fd fa69 	bl	8007de6 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800a914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a916:	3330      	adds	r3, #48	@ 0x30
 800a918:	2101      	movs	r1, #1
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fd fa48 	bl	8007db0 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800a920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a922:	3332      	adds	r3, #50	@ 0x32
 800a924:	2106      	movs	r1, #6
 800a926:	4618      	mov	r0, r3
 800a928:	f7fd fa42 	bl	8007db0 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800a92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92e:	3340      	adds	r3, #64	@ 0x40
 800a930:	2280      	movs	r2, #128	@ 0x80
 800a932:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800a934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a936:	3342      	adds	r3, #66	@ 0x42
 800a938:	2229      	movs	r2, #41	@ 0x29
 800a93a:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800a93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a93e:	3347      	adds	r3, #71	@ 0x47
 800a940:	2213      	movs	r2, #19
 800a942:	4971      	ldr	r1, [pc, #452]	@ (800ab08 <f_mkfs+0x7bc>)
 800a944:	4618      	mov	r0, r3
 800a946:	f00b fb17 	bl	8015f78 <memcpy>
 800a94a:	e01c      	b.n	800a986 <f_mkfs+0x63a>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800a94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94e:	3327      	adds	r3, #39	@ 0x27
 800a950:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a952:	4618      	mov	r0, r3
 800a954:	f7fd fa47 	bl	8007de6 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800a958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95a:	3316      	adds	r3, #22
 800a95c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a95e:	b292      	uxth	r2, r2
 800a960:	4611      	mov	r1, r2
 800a962:	4618      	mov	r0, r3
 800a964:	f7fd fa24 	bl	8007db0 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800a968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a96a:	3324      	adds	r3, #36	@ 0x24
 800a96c:	2280      	movs	r2, #128	@ 0x80
 800a96e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800a970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a972:	3326      	adds	r3, #38	@ 0x26
 800a974:	2229      	movs	r2, #41	@ 0x29
 800a976:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97a:	332b      	adds	r3, #43	@ 0x2b
 800a97c:	2213      	movs	r2, #19
 800a97e:	4963      	ldr	r1, [pc, #396]	@ (800ab0c <f_mkfs+0x7c0>)
 800a980:	4618      	mov	r0, r3
 800a982:	f00b faf9 	bl	8015f78 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800a986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a988:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a98c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a990:	4618      	mov	r0, r3
 800a992:	f7fd fa0d 	bl	8007db0 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800a996:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800a99a:	2301      	movs	r3, #1
 800a99c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a99e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a9a0:	f7fd f914 	bl	8007bcc <disk_write>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <f_mkfs+0x662>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e11a      	b.n	800abe4 <f_mkfs+0x898>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800a9ae:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d140      	bne.n	800aa38 <f_mkfs+0x6ec>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800a9b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9b8:	1d9a      	adds	r2, r3, #6
 800a9ba:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800a9be:	2301      	movs	r3, #1
 800a9c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a9c2:	f7fd f903 	bl	8007bcc <disk_write>
			memset(buf, 0, ss);
 800a9c6:	8c3b      	ldrh	r3, [r7, #32]
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9ce:	f00b fa4f 	bl	8015e70 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800a9d2:	494f      	ldr	r1, [pc, #316]	@ (800ab10 <f_mkfs+0x7c4>)
 800a9d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9d6:	f7fd fa06 	bl	8007de6 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800a9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a9e0:	494c      	ldr	r1, [pc, #304]	@ (800ab14 <f_mkfs+0x7c8>)
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fd f9ff 	bl	8007de6 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ea:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	4610      	mov	r0, r2
 800a9f6:	f7fd f9f6 	bl	8007de6 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800aa00:	2102      	movs	r1, #2
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fd f9ef 	bl	8007de6 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800aa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800aa0e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7fd f9cc 	bl	8007db0 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800aa18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa1a:	1dda      	adds	r2, r3, #7
 800aa1c:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800aa20:	2301      	movs	r3, #1
 800aa22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa24:	f7fd f8d2 	bl	8007bcc <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800aa28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa2a:	1c5a      	adds	r2, r3, #1
 800aa2c:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800aa30:	2301      	movs	r3, #1
 800aa32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa34:	f7fd f8ca 	bl	8007bcc <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 800aa38:	8c3b      	ldrh	r3, [r7, #32]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa3e:	fb02 f303 	mul.w	r3, r2, r3
 800aa42:	461a      	mov	r2, r3
 800aa44:	2100      	movs	r1, #0
 800aa46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa48:	f00b fa12 	bl	8015e70 <memset>
		sect = b_fat;		/* FAT start sector */
 800aa4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa4e:	673b      	str	r3, [r7, #112]	@ 0x70
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800aa50:	2300      	movs	r3, #0
 800aa52:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa54:	e04b      	b.n	800aaee <f_mkfs+0x7a2>
			if (fsty == FS_FAT32) {
 800aa56:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d113      	bne.n	800aa86 <f_mkfs+0x73a>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800aa5e:	f06f 0107 	mvn.w	r1, #7
 800aa62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa64:	f7fd f9bf 	bl	8007de6 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 800aa68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	f04f 31ff 	mov.w	r1, #4294967295
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fd f9b8 	bl	8007de6 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800aa76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa78:	3308      	adds	r3, #8
 800aa7a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fd f9b1 	bl	8007de6 <st_dword>
 800aa84:	e00b      	b.n	800aa9e <f_mkfs+0x752>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800aa86:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d101      	bne.n	800aa92 <f_mkfs+0x746>
 800aa8e:	4b22      	ldr	r3, [pc, #136]	@ (800ab18 <f_mkfs+0x7cc>)
 800aa90:	e001      	b.n	800aa96 <f_mkfs+0x74a>
 800aa92:	f06f 0307 	mvn.w	r3, #7
 800aa96:	4619      	mov	r1, r3
 800aa98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa9a:	f7fd f9a4 	bl	8007de6 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800aa9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800aaa2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aaa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	bf28      	it	cs
 800aaaa:	4613      	movcs	r3, r2
 800aaac:	667b      	str	r3, [r7, #100]	@ 0x64
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800aaae:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800aab2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aab4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aab6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aab8:	f7fd f888 	bl	8007bcc <disk_write>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <f_mkfs+0x77a>
 800aac2:	2301      	movs	r3, #1
 800aac4:	e08e      	b.n	800abe4 <f_mkfs+0x898>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800aac6:	8c3b      	ldrh	r3, [r7, #32]
 800aac8:	461a      	mov	r2, r3
 800aaca:	2100      	movs	r1, #0
 800aacc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aace:	f00b f9cf 	bl	8015e70 <memset>
				sect += n; nsect -= n;
 800aad2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aad4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aad6:	4413      	add	r3, r2
 800aad8:	673b      	str	r3, [r7, #112]	@ 0x70
 800aada:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aadc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
			} while (nsect);
 800aae2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1dc      	bne.n	800aaa2 <f_mkfs+0x756>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800aae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aaea:	3301      	adds	r3, #1
 800aaec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aaee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aaf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d3af      	bcc.n	800aa56 <f_mkfs+0x70a>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800aaf6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	d10e      	bne.n	800ab1c <f_mkfs+0x7d0>
 800aafe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab00:	e00d      	b.n	800ab1e <f_mkfs+0x7d2>
 800ab02:	bf00      	nop
 800ab04:	08017548 	.word	0x08017548
 800ab08:	08017554 	.word	0x08017554
 800ab0c:	08017568 	.word	0x08017568
 800ab10:	41615252 	.word	0x41615252
 800ab14:	61417272 	.word	0x61417272
 800ab18:	00fffff8 	.word	0x00fffff8
 800ab1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800ab20:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab24:	4293      	cmp	r3, r2
 800ab26:	bf28      	it	cs
 800ab28:	4613      	movcs	r3, r2
 800ab2a:	667b      	str	r3, [r7, #100]	@ 0x64
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800ab2c:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800ab30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab32:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ab34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab36:	f7fd f849 	bl	8007bcc <disk_write>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <f_mkfs+0x7f8>
 800ab40:	2301      	movs	r3, #1
 800ab42:	e04f      	b.n	800abe4 <f_mkfs+0x898>
			sect += n; nsect -= n;
 800ab44:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ab46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab48:	4413      	add	r3, r2
 800ab4a:	673b      	str	r3, [r7, #112]	@ 0x70
 800ab4c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	65fb      	str	r3, [r7, #92]	@ 0x5c
		} while (nsect);
 800ab54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1e2      	bne.n	800ab20 <f_mkfs+0x7d4>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 800ab5a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ab5e:	2b03      	cmp	r3, #3
 800ab60:	d103      	bne.n	800ab6a <f_mkfs+0x81e>
		sys = 0x0C;		/* FAT32X */
 800ab62:	230c      	movs	r3, #12
 800ab64:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800ab68:	e012      	b.n	800ab90 <f_mkfs+0x844>
	} else if (sz_vol >= 0x10000) {
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab70:	d303      	bcc.n	800ab7a <f_mkfs+0x82e>
		sys = 0x06;		/* FAT12/16 (large) */
 800ab72:	2306      	movs	r3, #6
 800ab74:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800ab78:	e00a      	b.n	800ab90 <f_mkfs+0x844>
	} else if (fsty == FS_FAT16) {
 800ab7a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d103      	bne.n	800ab8a <f_mkfs+0x83e>
		sys = 0x04;		/* FAT16 */
 800ab82:	2304      	movs	r3, #4
 800ab84:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 800ab88:	e002      	b.n	800ab90 <f_mkfs+0x844>
	} else {
		sys = 0x01;		/* FAT12 */
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 800ab90:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ab94:	f003 0308 	and.w	r3, r3, #8
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d116      	bne.n	800abca <f_mkfs+0x87e>
			lba[0] = sz_vol; lba[1] = 0;
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	613b      	str	r3, [r7, #16]
 800aba0:	2300      	movs	r3, #0
 800aba2:	617b      	str	r3, [r7, #20]
			res = create_partition(pdrv, lba, sys, buf);
 800aba4:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800aba8:	f107 0110 	add.w	r1, r7, #16
 800abac:	f897 0043 	ldrb.w	r0, [r7, #67]	@ 0x43
 800abb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb2:	f7ff faa7 	bl	800a104 <create_partition>
 800abb6:	4603      	mov	r3, r0
 800abb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if (res != FR_OK) LEAVE_MKFS(res);
 800abbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d002      	beq.n	800abca <f_mkfs+0x87e>
 800abc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800abc8:	e00c      	b.n	800abe4 <f_mkfs+0x898>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800abca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800abce:	2200      	movs	r2, #0
 800abd0:	2100      	movs	r1, #0
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fd f82e 	bl	8007c34 <disk_ioctl>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d001      	beq.n	800abe2 <f_mkfs+0x896>
 800abde:	2301      	movs	r3, #1
 800abe0:	e000      	b.n	800abe4 <f_mkfs+0x898>

	LEAVE_MKFS(FR_OK);
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3778      	adds	r7, #120	@ 0x78
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800abec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ac24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800abf0:	f7fc ff58 	bl	8007aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800abf4:	480c      	ldr	r0, [pc, #48]	@ (800ac28 <LoopForever+0x6>)
  ldr r1, =_edata
 800abf6:	490d      	ldr	r1, [pc, #52]	@ (800ac2c <LoopForever+0xa>)
  ldr r2, =_sidata
 800abf8:	4a0d      	ldr	r2, [pc, #52]	@ (800ac30 <LoopForever+0xe>)
  movs r3, #0
 800abfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800abfc:	e002      	b.n	800ac04 <LoopCopyDataInit>

0800abfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800abfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ac00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ac02:	3304      	adds	r3, #4

0800ac04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ac04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ac06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ac08:	d3f9      	bcc.n	800abfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ac0a:	4a0a      	ldr	r2, [pc, #40]	@ (800ac34 <LoopForever+0x12>)
  ldr r4, =_ebss
 800ac0c:	4c0a      	ldr	r4, [pc, #40]	@ (800ac38 <LoopForever+0x16>)
  movs r3, #0
 800ac0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ac10:	e001      	b.n	800ac16 <LoopFillZerobss>

0800ac12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ac12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ac14:	3204      	adds	r2, #4

0800ac16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ac16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ac18:	d3fb      	bcc.n	800ac12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ac1a:	f00b f97f 	bl	8015f1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ac1e:	f7f9 fa05 	bl	800402c <main>

0800ac22 <LoopForever>:

LoopForever:
    b LoopForever
 800ac22:	e7fe      	b.n	800ac22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800ac24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800ac28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ac2c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800ac30:	080177e0 	.word	0x080177e0
  ldr r2, =_sbss
 800ac34:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800ac38:	20005e54 	.word	0x20005e54

0800ac3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ac3c:	e7fe      	b.n	800ac3c <ADC1_2_IRQHandler>

0800ac3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b082      	sub	sp, #8
 800ac42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ac48:	2003      	movs	r0, #3
 800ac4a:	f001 fd11 	bl	800c670 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ac4e:	200f      	movs	r0, #15
 800ac50:	f000 f80e 	bl	800ac70 <HAL_InitTick>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	71fb      	strb	r3, [r7, #7]
 800ac5e:	e001      	b.n	800ac64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ac60:	f7fc fa56 	bl	8007110 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ac64:	79fb      	ldrb	r3, [r7, #7]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
	...

0800ac70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800ac7c:	4b17      	ldr	r3, [pc, #92]	@ (800acdc <HAL_InitTick+0x6c>)
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d023      	beq.n	800accc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800ac84:	4b16      	ldr	r3, [pc, #88]	@ (800ace0 <HAL_InitTick+0x70>)
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	4b14      	ldr	r3, [pc, #80]	@ (800acdc <HAL_InitTick+0x6c>)
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ac92:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f001 fd21 	bl	800c6e2 <HAL_SYSTICK_Config>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d10f      	bne.n	800acc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b0f      	cmp	r3, #15
 800acaa:	d809      	bhi.n	800acc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800acac:	2200      	movs	r2, #0
 800acae:	6879      	ldr	r1, [r7, #4]
 800acb0:	f04f 30ff 	mov.w	r0, #4294967295
 800acb4:	f001 fce7 	bl	800c686 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800acb8:	4a0a      	ldr	r2, [pc, #40]	@ (800ace4 <HAL_InitTick+0x74>)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6013      	str	r3, [r2, #0]
 800acbe:	e007      	b.n	800acd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	73fb      	strb	r3, [r7, #15]
 800acc4:	e004      	b.n	800acd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	73fb      	strb	r3, [r7, #15]
 800acca:	e001      	b.n	800acd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800acd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	20000178 	.word	0x20000178
 800ace0:	20000168 	.word	0x20000168
 800ace4:	20000174 	.word	0x20000174

0800ace8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ace8:	b480      	push	{r7}
 800acea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800acec:	4b06      	ldr	r3, [pc, #24]	@ (800ad08 <HAL_IncTick+0x20>)
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	461a      	mov	r2, r3
 800acf2:	4b06      	ldr	r3, [pc, #24]	@ (800ad0c <HAL_IncTick+0x24>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4413      	add	r3, r2
 800acf8:	4a04      	ldr	r2, [pc, #16]	@ (800ad0c <HAL_IncTick+0x24>)
 800acfa:	6013      	str	r3, [r2, #0]
}
 800acfc:	bf00      	nop
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop
 800ad08:	20000178 	.word	0x20000178
 800ad0c:	20005d08 	.word	0x20005d08

0800ad10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ad10:	b480      	push	{r7}
 800ad12:	af00      	add	r7, sp, #0
  return uwTick;
 800ad14:	4b03      	ldr	r3, [pc, #12]	@ (800ad24 <HAL_GetTick+0x14>)
 800ad16:	681b      	ldr	r3, [r3, #0]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	20005d08 	.word	0x20005d08

0800ad28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ad30:	f7ff ffee 	bl	800ad10 <HAL_GetTick>
 800ad34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad40:	d005      	beq.n	800ad4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800ad42:	4b0a      	ldr	r3, [pc, #40]	@ (800ad6c <HAL_Delay+0x44>)
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	461a      	mov	r2, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ad4e:	bf00      	nop
 800ad50:	f7ff ffde 	bl	800ad10 <HAL_GetTick>
 800ad54:	4602      	mov	r2, r0
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d8f7      	bhi.n	800ad50 <HAL_Delay+0x28>
  {
  }
}
 800ad60:	bf00      	nop
 800ad62:	bf00      	nop
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20000178 	.word	0x20000178

0800ad70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	431a      	orrs	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	609a      	str	r2, [r3, #8]
}
 800ad8a:	bf00      	nop
 800ad8c:	370c      	adds	r7, #12
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr

0800ad96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800ad96:	b480      	push	{r7}
 800ad98:	b083      	sub	sp, #12
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	431a      	orrs	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	609a      	str	r2, [r3, #8]
}
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800adcc:	4618      	mov	r0, r3
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800add8:	b480      	push	{r7}
 800adda:	b087      	sub	sp, #28
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
 800ade4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	3360      	adds	r3, #96	@ 0x60
 800adea:	461a      	mov	r2, r3
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	4b08      	ldr	r3, [pc, #32]	@ (800ae1c <LL_ADC_SetOffset+0x44>)
 800adfa:	4013      	ands	r3, r2
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	430a      	orrs	r2, r1
 800ae06:	4313      	orrs	r3, r2
 800ae08:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800ae10:	bf00      	nop
 800ae12:	371c      	adds	r7, #28
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	03fff000 	.word	0x03fff000

0800ae20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3360      	adds	r3, #96	@ 0x60
 800ae2e:	461a      	mov	r2, r3
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3714      	adds	r7, #20
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b087      	sub	sp, #28
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	3360      	adds	r3, #96	@ 0x60
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	431a      	orrs	r2, r3
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800ae76:	bf00      	nop
 800ae78:	371c      	adds	r7, #28
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr

0800ae82 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b083      	sub	sp, #12
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d101      	bne.n	800ae9a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800ae96:	2301      	movs	r3, #1
 800ae98:	e000      	b.n	800ae9c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b087      	sub	sp, #28
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	3330      	adds	r3, #48	@ 0x30
 800aeb8:	461a      	mov	r2, r3
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	0a1b      	lsrs	r3, r3, #8
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	f003 030c 	and.w	r3, r3, #12
 800aec4:	4413      	add	r3, r2
 800aec6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	f003 031f 	and.w	r3, r3, #31
 800aed2:	211f      	movs	r1, #31
 800aed4:	fa01 f303 	lsl.w	r3, r1, r3
 800aed8:	43db      	mvns	r3, r3
 800aeda:	401a      	ands	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	0e9b      	lsrs	r3, r3, #26
 800aee0:	f003 011f 	and.w	r1, r3, #31
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	f003 031f 	and.w	r3, r3, #31
 800aeea:	fa01 f303 	lsl.w	r3, r1, r3
 800aeee:	431a      	orrs	r2, r3
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800aef4:	bf00      	nop
 800aef6:	371c      	adds	r7, #28
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800af00:	b480      	push	{r7}
 800af02:	b087      	sub	sp, #28
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	3314      	adds	r3, #20
 800af10:	461a      	mov	r2, r3
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	0e5b      	lsrs	r3, r3, #25
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	f003 0304 	and.w	r3, r3, #4
 800af1c:	4413      	add	r3, r2
 800af1e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	0d1b      	lsrs	r3, r3, #20
 800af28:	f003 031f 	and.w	r3, r3, #31
 800af2c:	2107      	movs	r1, #7
 800af2e:	fa01 f303 	lsl.w	r3, r1, r3
 800af32:	43db      	mvns	r3, r3
 800af34:	401a      	ands	r2, r3
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	0d1b      	lsrs	r3, r3, #20
 800af3a:	f003 031f 	and.w	r3, r3, #31
 800af3e:	6879      	ldr	r1, [r7, #4]
 800af40:	fa01 f303 	lsl.w	r3, r1, r3
 800af44:	431a      	orrs	r2, r3
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800af4a:	bf00      	nop
 800af4c:	371c      	adds	r7, #28
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
	...

0800af58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af70:	43db      	mvns	r3, r3
 800af72:	401a      	ands	r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f003 0318 	and.w	r3, r3, #24
 800af7a:	4908      	ldr	r1, [pc, #32]	@ (800af9c <LL_ADC_SetChannelSingleDiff+0x44>)
 800af7c:	40d9      	lsrs	r1, r3
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	400b      	ands	r3, r1
 800af82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af86:	431a      	orrs	r2, r3
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800af8e:	bf00      	nop
 800af90:	3714      	adds	r7, #20
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	0007ffff 	.word	0x0007ffff

0800afa0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	f003 031f 	and.w	r3, r3, #31
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800afcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	6093      	str	r3, [r2, #8]
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aff4:	d101      	bne.n	800affa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800aff6:	2301      	movs	r3, #1
 800aff8:	e000      	b.n	800affc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	370c      	adds	r7, #12
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr

0800b008 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800b018:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b01c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b024:	bf00      	nop
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b040:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b044:	d101      	bne.n	800b04a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b046:	2301      	movs	r3, #1
 800b048:	e000      	b.n	800b04c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b068:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b06c:	f043 0201 	orr.w	r2, r3, #1
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b074:	bf00      	nop
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b090:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b094:	f043 0202 	orr.w	r2, r3, #2
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	f003 0301 	and.w	r3, r3, #1
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d101      	bne.n	800b0c0 <LL_ADC_IsEnabled+0x18>
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e000      	b.n	800b0c2 <LL_ADC_IsEnabled+0x1a>
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	370c      	adds	r7, #12
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	b083      	sub	sp, #12
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	f003 0302 	and.w	r3, r3, #2
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d101      	bne.n	800b0e6 <LL_ADC_IsDisableOngoing+0x18>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e000      	b.n	800b0e8 <LL_ADC_IsDisableOngoing+0x1a>
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b104:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b108:	f043 0204 	orr.w	r2, r3, #4
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b110:	bf00      	nop
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b12c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b130:	f043 0210 	orr.w	r2, r3, #16
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800b138:	bf00      	nop
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	f003 0304 	and.w	r3, r3, #4
 800b154:	2b04      	cmp	r3, #4
 800b156:	d101      	bne.n	800b15c <LL_ADC_REG_IsConversionOngoing+0x18>
 800b158:	2301      	movs	r3, #1
 800b15a:	e000      	b.n	800b15e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b083      	sub	sp, #12
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b17a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b17e:	f043 0220 	orr.w	r2, r3, #32
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800b186:	bf00      	nop
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b192:	b480      	push	{r7}
 800b194:	b083      	sub	sp, #12
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	f003 0308 	and.w	r3, r3, #8
 800b1a2:	2b08      	cmp	r3, #8
 800b1a4:	d101      	bne.n	800b1aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e000      	b.n	800b1ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b1b8:	b590      	push	{r4, r7, lr}
 800b1ba:	b089      	sub	sp, #36	@ 0x24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d101      	bne.n	800b1d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e130      	b.n	800b434 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d109      	bne.n	800b1f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7fb ffb9 	bl	8007158 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7ff fef1 	bl	800afe0 <LL_ADC_IsDeepPowerDownEnabled>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d004      	beq.n	800b20e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4618      	mov	r0, r3
 800b20a:	f7ff fed7 	bl	800afbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4618      	mov	r0, r3
 800b214:	f7ff ff0c 	bl	800b030 <LL_ADC_IsInternalRegulatorEnabled>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d115      	bne.n	800b24a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4618      	mov	r0, r3
 800b224:	f7ff fef0 	bl	800b008 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b228:	4b84      	ldr	r3, [pc, #528]	@ (800b43c <HAL_ADC_Init+0x284>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	099b      	lsrs	r3, r3, #6
 800b22e:	4a84      	ldr	r2, [pc, #528]	@ (800b440 <HAL_ADC_Init+0x288>)
 800b230:	fba2 2303 	umull	r2, r3, r2, r3
 800b234:	099b      	lsrs	r3, r3, #6
 800b236:	3301      	adds	r3, #1
 800b238:	005b      	lsls	r3, r3, #1
 800b23a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b23c:	e002      	b.n	800b244 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3b01      	subs	r3, #1
 800b242:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d1f9      	bne.n	800b23e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4618      	mov	r0, r3
 800b250:	f7ff feee 	bl	800b030 <LL_ADC_IsInternalRegulatorEnabled>
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10d      	bne.n	800b276 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b25e:	f043 0210 	orr.w	r2, r3, #16
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b26a:	f043 0201 	orr.w	r2, r3, #1
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7ff ff62 	bl	800b144 <LL_ADC_REG_IsConversionOngoing>
 800b280:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b286:	f003 0310 	and.w	r3, r3, #16
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f040 80c9 	bne.w	800b422 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	2b00      	cmp	r3, #0
 800b294:	f040 80c5 	bne.w	800b422 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b29c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b2a0:	f043 0202 	orr.w	r2, r3, #2
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7ff fefb 	bl	800b0a8 <LL_ADC_IsEnabled>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d115      	bne.n	800b2e4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b2b8:	4862      	ldr	r0, [pc, #392]	@ (800b444 <HAL_ADC_Init+0x28c>)
 800b2ba:	f7ff fef5 	bl	800b0a8 <LL_ADC_IsEnabled>
 800b2be:	4604      	mov	r4, r0
 800b2c0:	4861      	ldr	r0, [pc, #388]	@ (800b448 <HAL_ADC_Init+0x290>)
 800b2c2:	f7ff fef1 	bl	800b0a8 <LL_ADC_IsEnabled>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	431c      	orrs	r4, r3
 800b2ca:	4860      	ldr	r0, [pc, #384]	@ (800b44c <HAL_ADC_Init+0x294>)
 800b2cc:	f7ff feec 	bl	800b0a8 <LL_ADC_IsEnabled>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	4323      	orrs	r3, r4
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d105      	bne.n	800b2e4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	4619      	mov	r1, r3
 800b2de:	485c      	ldr	r0, [pc, #368]	@ (800b450 <HAL_ADC_Init+0x298>)
 800b2e0:	f7ff fd46 	bl	800ad70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	7e5b      	ldrb	r3, [r3, #25]
 800b2e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b2ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800b2f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800b2fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b302:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b304:	4313      	orrs	r3, r2
 800b306:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d106      	bne.n	800b320 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b316:	3b01      	subs	r3, #1
 800b318:	045b      	lsls	r3, r3, #17
 800b31a:	69ba      	ldr	r2, [r7, #24]
 800b31c:	4313      	orrs	r3, r2
 800b31e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b324:	2b00      	cmp	r3, #0
 800b326:	d009      	beq.n	800b33c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b32c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b334:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b336:	69ba      	ldr	r2, [r7, #24]
 800b338:	4313      	orrs	r3, r2
 800b33a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	68da      	ldr	r2, [r3, #12]
 800b342:	4b44      	ldr	r3, [pc, #272]	@ (800b454 <HAL_ADC_Init+0x29c>)
 800b344:	4013      	ands	r3, r2
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	6812      	ldr	r2, [r2, #0]
 800b34a:	69b9      	ldr	r1, [r7, #24]
 800b34c:	430b      	orrs	r3, r1
 800b34e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4618      	mov	r0, r3
 800b356:	f7ff ff1c 	bl	800b192 <LL_ADC_INJ_IsConversionOngoing>
 800b35a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d13d      	bne.n	800b3de <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d13a      	bne.n	800b3de <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b36c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b374:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b376:	4313      	orrs	r3, r2
 800b378:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b384:	f023 0302 	bic.w	r3, r3, #2
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	6812      	ldr	r2, [r2, #0]
 800b38c:	69b9      	ldr	r1, [r7, #24]
 800b38e:	430b      	orrs	r3, r1
 800b390:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d118      	bne.n	800b3ce <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b3a6:	f023 0304 	bic.w	r3, r3, #4
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b3b2:	4311      	orrs	r1, r2
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b3b8:	4311      	orrs	r1, r2
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b3be:	430a      	orrs	r2, r1
 800b3c0:	431a      	orrs	r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f042 0201 	orr.w	r2, r2, #1
 800b3ca:	611a      	str	r2, [r3, #16]
 800b3cc:	e007      	b.n	800b3de <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	691a      	ldr	r2, [r3, #16]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f022 0201 	bic.w	r2, r2, #1
 800b3dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d10c      	bne.n	800b400 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3ec:	f023 010f 	bic.w	r1, r3, #15
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	69db      	ldr	r3, [r3, #28]
 800b3f4:	1e5a      	subs	r2, r3, #1
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	430a      	orrs	r2, r1
 800b3fc:	631a      	str	r2, [r3, #48]	@ 0x30
 800b3fe:	e007      	b.n	800b410 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f022 020f 	bic.w	r2, r2, #15
 800b40e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b414:	f023 0303 	bic.w	r3, r3, #3
 800b418:	f043 0201 	orr.w	r2, r3, #1
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	655a      	str	r2, [r3, #84]	@ 0x54
 800b420:	e007      	b.n	800b432 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b426:	f043 0210 	orr.w	r2, r3, #16
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b432:	7ffb      	ldrb	r3, [r7, #31]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3724      	adds	r7, #36	@ 0x24
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd90      	pop	{r4, r7, pc}
 800b43c:	20000168 	.word	0x20000168
 800b440:	053e2d63 	.word	0x053e2d63
 800b444:	50040000 	.word	0x50040000
 800b448:	50040100 	.word	0x50040100
 800b44c:	50040200 	.word	0x50040200
 800b450:	50040300 	.word	0x50040300
 800b454:	fff0c007 	.word	0xfff0c007

0800b458 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b086      	sub	sp, #24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b464:	4853      	ldr	r0, [pc, #332]	@ (800b5b4 <HAL_ADC_Start_DMA+0x15c>)
 800b466:	f7ff fd9b 	bl	800afa0 <LL_ADC_GetMultimode>
 800b46a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4618      	mov	r0, r3
 800b472:	f7ff fe67 	bl	800b144 <LL_ADC_REG_IsConversionOngoing>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f040 8093 	bne.w	800b5a4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b484:	2b01      	cmp	r3, #1
 800b486:	d101      	bne.n	800b48c <HAL_ADC_Start_DMA+0x34>
 800b488:	2302      	movs	r3, #2
 800b48a:	e08e      	b.n	800b5aa <HAL_ADC_Start_DMA+0x152>
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a47      	ldr	r2, [pc, #284]	@ (800b5b8 <HAL_ADC_Start_DMA+0x160>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d008      	beq.n	800b4b0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d005      	beq.n	800b4b0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	2b05      	cmp	r3, #5
 800b4a8:	d002      	beq.n	800b4b0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	2b09      	cmp	r3, #9
 800b4ae:	d172      	bne.n	800b596 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f000 fda7 	bl	800c004 <ADC_Enable>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b4ba:	7dfb      	ldrb	r3, [r7, #23]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d165      	bne.n	800b58c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b4c8:	f023 0301 	bic.w	r3, r3, #1
 800b4cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a38      	ldr	r2, [pc, #224]	@ (800b5bc <HAL_ADC_Start_DMA+0x164>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d002      	beq.n	800b4e4 <HAL_ADC_Start_DMA+0x8c>
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	e000      	b.n	800b4e6 <HAL_ADC_Start_DMA+0x8e>
 800b4e4:	4b36      	ldr	r3, [pc, #216]	@ (800b5c0 <HAL_ADC_Start_DMA+0x168>)
 800b4e6:	68fa      	ldr	r2, [r7, #12]
 800b4e8:	6812      	ldr	r2, [r2, #0]
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d002      	beq.n	800b4f4 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d105      	bne.n	800b500 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b504:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d006      	beq.n	800b51a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b510:	f023 0206 	bic.w	r2, r3, #6
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	659a      	str	r2, [r3, #88]	@ 0x58
 800b518:	e002      	b.n	800b520 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2200      	movs	r2, #0
 800b51e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b524:	4a27      	ldr	r2, [pc, #156]	@ (800b5c4 <HAL_ADC_Start_DMA+0x16c>)
 800b526:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b52c:	4a26      	ldr	r2, [pc, #152]	@ (800b5c8 <HAL_ADC_Start_DMA+0x170>)
 800b52e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b534:	4a25      	ldr	r2, [pc, #148]	@ (800b5cc <HAL_ADC_Start_DMA+0x174>)
 800b536:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	221c      	movs	r2, #28
 800b53e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2200      	movs	r2, #0
 800b544:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f042 0210 	orr.w	r2, r2, #16
 800b556:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68da      	ldr	r2, [r3, #12]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f042 0201 	orr.w	r2, r2, #1
 800b566:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	3340      	adds	r3, #64	@ 0x40
 800b572:	4619      	mov	r1, r3
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f001 fbb0 	bl	800ccdc <HAL_DMA_Start_IT>
 800b57c:	4603      	mov	r3, r0
 800b57e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4618      	mov	r0, r3
 800b586:	f7ff fdb5 	bl	800b0f4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800b58a:	e00d      	b.n	800b5a8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800b594:	e008      	b.n	800b5a8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800b596:	2301      	movs	r3, #1
 800b598:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2200      	movs	r2, #0
 800b59e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800b5a2:	e001      	b.n	800b5a8 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3718      	adds	r7, #24
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	50040300 	.word	0x50040300
 800b5b8:	50040200 	.word	0x50040200
 800b5bc:	50040100 	.word	0x50040100
 800b5c0:	50040000 	.word	0x50040000
 800b5c4:	0800c1cf 	.word	0x0800c1cf
 800b5c8:	0800c2a7 	.word	0x0800c2a7
 800b5cc:	0800c2c3 	.word	0x0800c2c3

0800b5d0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d101      	bne.n	800b5e6 <HAL_ADC_Stop_DMA+0x16>
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	e051      	b.n	800b68a <HAL_ADC_Stop_DMA+0xba>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800b5ee:	2103      	movs	r1, #3
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 fc4b 	bl	800be8c <ADC_ConversionStop>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800b5fa:	7bfb      	ldrb	r3, [r7, #15]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d13f      	bne.n	800b680 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	68da      	ldr	r2, [r3, #12]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f022 0201 	bic.w	r2, r2, #1
 800b60e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b614:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d10f      	bne.n	800b63e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b622:	4618      	mov	r0, r3
 800b624:	f001 fbba 	bl	800cd9c <HAL_DMA_Abort>
 800b628:	4603      	mov	r3, r0
 800b62a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d005      	beq.n	800b63e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b636:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	685a      	ldr	r2, [r3, #4]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f022 0210 	bic.w	r2, r2, #16
 800b64c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800b64e:	7bfb      	ldrb	r3, [r7, #15]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d105      	bne.n	800b660 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 fd5b 	bl	800c110 <ADC_Disable>
 800b65a:	4603      	mov	r3, r0
 800b65c:	73fb      	strb	r3, [r7, #15]
 800b65e:	e002      	b.n	800b666 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 fd55 	bl	800c110 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800b666:	7bfb      	ldrb	r3, [r7, #15]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d109      	bne.n	800b680 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b670:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b674:	f023 0301 	bic.w	r3, r3, #1
 800b678:	f043 0201 	orr.w	r2, r3, #1
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800b688:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b692:	b480      	push	{r7}
 800b694:	b083      	sub	sp, #12
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800b69a:	bf00      	nop
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
	...

0800b6a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b0b6      	sub	sp, #216	@ 0xd8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d101      	bne.n	800b6ca <HAL_ADC_ConfigChannel+0x22>
 800b6c6:	2302      	movs	r3, #2
 800b6c8:	e3c9      	b.n	800be5e <HAL_ADC_ConfigChannel+0x7b6>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7ff fd34 	bl	800b144 <LL_ADC_REG_IsConversionOngoing>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f040 83aa 	bne.w	800be38 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	2b05      	cmp	r3, #5
 800b6f2:	d824      	bhi.n	800b73e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	3b02      	subs	r3, #2
 800b6fa:	2b03      	cmp	r3, #3
 800b6fc:	d81b      	bhi.n	800b736 <HAL_ADC_ConfigChannel+0x8e>
 800b6fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b704 <HAL_ADC_ConfigChannel+0x5c>)
 800b700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b704:	0800b715 	.word	0x0800b715
 800b708:	0800b71d 	.word	0x0800b71d
 800b70c:	0800b725 	.word	0x0800b725
 800b710:	0800b72d 	.word	0x0800b72d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800b714:	230c      	movs	r3, #12
 800b716:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b71a:	e010      	b.n	800b73e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800b71c:	2312      	movs	r3, #18
 800b71e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b722:	e00c      	b.n	800b73e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800b724:	2318      	movs	r3, #24
 800b726:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b72a:	e008      	b.n	800b73e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800b72c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b730:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b734:	e003      	b.n	800b73e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800b736:	2306      	movs	r3, #6
 800b738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800b73c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6818      	ldr	r0, [r3, #0]
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	461a      	mov	r2, r3
 800b748:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800b74c:	f7ff fbac 	bl	800aea8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4618      	mov	r0, r3
 800b756:	f7ff fcf5 	bl	800b144 <LL_ADC_REG_IsConversionOngoing>
 800b75a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4618      	mov	r0, r3
 800b764:	f7ff fd15 	bl	800b192 <LL_ADC_INJ_IsConversionOngoing>
 800b768:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b76c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b770:	2b00      	cmp	r3, #0
 800b772:	f040 81a4 	bne.w	800babe <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b776:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f040 819f 	bne.w	800babe <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6818      	ldr	r0, [r3, #0]
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	6819      	ldr	r1, [r3, #0]
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	461a      	mov	r2, r3
 800b78e:	f7ff fbb7 	bl	800af00 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	695a      	ldr	r2, [r3, #20]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	08db      	lsrs	r3, r3, #3
 800b79e:	f003 0303 	and.w	r3, r3, #3
 800b7a2:	005b      	lsls	r3, r3, #1
 800b7a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	2b04      	cmp	r3, #4
 800b7b2:	d00a      	beq.n	800b7ca <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6818      	ldr	r0, [r3, #0]
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	6919      	ldr	r1, [r3, #16]
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b7c4:	f7ff fb08 	bl	800add8 <LL_ADC_SetOffset>
 800b7c8:	e179      	b.n	800babe <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7ff fb25 	bl	800ae20 <LL_ADC_GetOffsetChannel>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10a      	bne.n	800b7f6 <HAL_ADC_ConfigChannel+0x14e>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7ff fb1a 	bl	800ae20 <LL_ADC_GetOffsetChannel>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	0e9b      	lsrs	r3, r3, #26
 800b7f0:	f003 021f 	and.w	r2, r3, #31
 800b7f4:	e01e      	b.n	800b834 <HAL_ADC_ConfigChannel+0x18c>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7ff fb0f 	bl	800ae20 <LL_ADC_GetOffsetChannel>
 800b802:	4603      	mov	r3, r0
 800b804:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b808:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b80c:	fa93 f3a3 	rbit	r3, r3
 800b810:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b814:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b81c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800b824:	2320      	movs	r3, #32
 800b826:	e004      	b.n	800b832 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800b828:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b82c:	fab3 f383 	clz	r3, r3
 800b830:	b2db      	uxtb	r3, r3
 800b832:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d105      	bne.n	800b84c <HAL_ADC_ConfigChannel+0x1a4>
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	0e9b      	lsrs	r3, r3, #26
 800b846:	f003 031f 	and.w	r3, r3, #31
 800b84a:	e018      	b.n	800b87e <HAL_ADC_ConfigChannel+0x1d6>
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b858:	fa93 f3a3 	rbit	r3, r3
 800b85c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800b860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800b868:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d101      	bne.n	800b874 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800b870:	2320      	movs	r3, #32
 800b872:	e004      	b.n	800b87e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800b874:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b878:	fab3 f383 	clz	r3, r3
 800b87c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b87e:	429a      	cmp	r2, r3
 800b880:	d106      	bne.n	800b890 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2200      	movs	r2, #0
 800b888:	2100      	movs	r1, #0
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7ff fade 	bl	800ae4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2101      	movs	r1, #1
 800b896:	4618      	mov	r0, r3
 800b898:	f7ff fac2 	bl	800ae20 <LL_ADC_GetOffsetChannel>
 800b89c:	4603      	mov	r3, r0
 800b89e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10a      	bne.n	800b8bc <HAL_ADC_ConfigChannel+0x214>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2101      	movs	r1, #1
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7ff fab7 	bl	800ae20 <LL_ADC_GetOffsetChannel>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	0e9b      	lsrs	r3, r3, #26
 800b8b6:	f003 021f 	and.w	r2, r3, #31
 800b8ba:	e01e      	b.n	800b8fa <HAL_ADC_ConfigChannel+0x252>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7ff faac 	bl	800ae20 <LL_ADC_GetOffsetChannel>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b8d2:	fa93 f3a3 	rbit	r3, r3
 800b8d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800b8da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b8de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800b8e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d101      	bne.n	800b8ee <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800b8ea:	2320      	movs	r3, #32
 800b8ec:	e004      	b.n	800b8f8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800b8ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b8f2:	fab3 f383 	clz	r3, r3
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b902:	2b00      	cmp	r3, #0
 800b904:	d105      	bne.n	800b912 <HAL_ADC_ConfigChannel+0x26a>
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	0e9b      	lsrs	r3, r3, #26
 800b90c:	f003 031f 	and.w	r3, r3, #31
 800b910:	e018      	b.n	800b944 <HAL_ADC_ConfigChannel+0x29c>
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b91a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b91e:	fa93 f3a3 	rbit	r3, r3
 800b922:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800b926:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b92a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800b92e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b932:	2b00      	cmp	r3, #0
 800b934:	d101      	bne.n	800b93a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800b936:	2320      	movs	r3, #32
 800b938:	e004      	b.n	800b944 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800b93a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b93e:	fab3 f383 	clz	r3, r3
 800b942:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b944:	429a      	cmp	r2, r3
 800b946:	d106      	bne.n	800b956 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2200      	movs	r2, #0
 800b94e:	2101      	movs	r1, #1
 800b950:	4618      	mov	r0, r3
 800b952:	f7ff fa7b 	bl	800ae4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2102      	movs	r1, #2
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7ff fa5f 	bl	800ae20 <LL_ADC_GetOffsetChannel>
 800b962:	4603      	mov	r3, r0
 800b964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10a      	bne.n	800b982 <HAL_ADC_ConfigChannel+0x2da>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	2102      	movs	r1, #2
 800b972:	4618      	mov	r0, r3
 800b974:	f7ff fa54 	bl	800ae20 <LL_ADC_GetOffsetChannel>
 800b978:	4603      	mov	r3, r0
 800b97a:	0e9b      	lsrs	r3, r3, #26
 800b97c:	f003 021f 	and.w	r2, r3, #31
 800b980:	e01e      	b.n	800b9c0 <HAL_ADC_ConfigChannel+0x318>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2102      	movs	r1, #2
 800b988:	4618      	mov	r0, r3
 800b98a:	f7ff fa49 	bl	800ae20 <LL_ADC_GetOffsetChannel>
 800b98e:	4603      	mov	r3, r0
 800b990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b994:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b998:	fa93 f3a3 	rbit	r3, r3
 800b99c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800b9a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b9a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800b9a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d101      	bne.n	800b9b4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800b9b0:	2320      	movs	r3, #32
 800b9b2:	e004      	b.n	800b9be <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800b9b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b9b8:	fab3 f383 	clz	r3, r3
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d105      	bne.n	800b9d8 <HAL_ADC_ConfigChannel+0x330>
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	0e9b      	lsrs	r3, r3, #26
 800b9d2:	f003 031f 	and.w	r3, r3, #31
 800b9d6:	e014      	b.n	800ba02 <HAL_ADC_ConfigChannel+0x35a>
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b9e0:	fa93 f3a3 	rbit	r3, r3
 800b9e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800b9e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b9e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800b9ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d101      	bne.n	800b9f8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800b9f4:	2320      	movs	r3, #32
 800b9f6:	e004      	b.n	800ba02 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800b9f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b9fc:	fab3 f383 	clz	r3, r3
 800ba00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d106      	bne.n	800ba14 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	2102      	movs	r1, #2
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7ff fa1c 	bl	800ae4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2103      	movs	r1, #3
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7ff fa00 	bl	800ae20 <LL_ADC_GetOffsetChannel>
 800ba20:	4603      	mov	r3, r0
 800ba22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d10a      	bne.n	800ba40 <HAL_ADC_ConfigChannel+0x398>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2103      	movs	r1, #3
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7ff f9f5 	bl	800ae20 <LL_ADC_GetOffsetChannel>
 800ba36:	4603      	mov	r3, r0
 800ba38:	0e9b      	lsrs	r3, r3, #26
 800ba3a:	f003 021f 	and.w	r2, r3, #31
 800ba3e:	e017      	b.n	800ba70 <HAL_ADC_ConfigChannel+0x3c8>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2103      	movs	r1, #3
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7ff f9ea 	bl	800ae20 <LL_ADC_GetOffsetChannel>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ba52:	fa93 f3a3 	rbit	r3, r3
 800ba56:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800ba58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba5a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800ba5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800ba62:	2320      	movs	r3, #32
 800ba64:	e003      	b.n	800ba6e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800ba66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba68:	fab3 f383 	clz	r3, r3
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d105      	bne.n	800ba88 <HAL_ADC_ConfigChannel+0x3e0>
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	0e9b      	lsrs	r3, r3, #26
 800ba82:	f003 031f 	and.w	r3, r3, #31
 800ba86:	e011      	b.n	800baac <HAL_ADC_ConfigChannel+0x404>
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba90:	fa93 f3a3 	rbit	r3, r3
 800ba94:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800ba96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba98:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800ba9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d101      	bne.n	800baa4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800baa0:	2320      	movs	r3, #32
 800baa2:	e003      	b.n	800baac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800baa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800baa6:	fab3 f383 	clz	r3, r3
 800baaa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800baac:	429a      	cmp	r2, r3
 800baae:	d106      	bne.n	800babe <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2200      	movs	r2, #0
 800bab6:	2103      	movs	r1, #3
 800bab8:	4618      	mov	r0, r3
 800baba:	f7ff f9c7 	bl	800ae4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7ff faf0 	bl	800b0a8 <LL_ADC_IsEnabled>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f040 8140 	bne.w	800bd50 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6818      	ldr	r0, [r3, #0]
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	6819      	ldr	r1, [r3, #0]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	461a      	mov	r2, r3
 800bade:	f7ff fa3b 	bl	800af58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	4a8f      	ldr	r2, [pc, #572]	@ (800bd24 <HAL_ADC_ConfigChannel+0x67c>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	f040 8131 	bne.w	800bd50 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10b      	bne.n	800bb16 <HAL_ADC_ConfigChannel+0x46e>
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	0e9b      	lsrs	r3, r3, #26
 800bb04:	3301      	adds	r3, #1
 800bb06:	f003 031f 	and.w	r3, r3, #31
 800bb0a:	2b09      	cmp	r3, #9
 800bb0c:	bf94      	ite	ls
 800bb0e:	2301      	movls	r3, #1
 800bb10:	2300      	movhi	r3, #0
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	e019      	b.n	800bb4a <HAL_ADC_ConfigChannel+0x4a2>
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb1e:	fa93 f3a3 	rbit	r3, r3
 800bb22:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800bb24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800bb28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d101      	bne.n	800bb32 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800bb2e:	2320      	movs	r3, #32
 800bb30:	e003      	b.n	800bb3a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800bb32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb34:	fab3 f383 	clz	r3, r3
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	f003 031f 	and.w	r3, r3, #31
 800bb40:	2b09      	cmp	r3, #9
 800bb42:	bf94      	ite	ls
 800bb44:	2301      	movls	r3, #1
 800bb46:	2300      	movhi	r3, #0
 800bb48:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d079      	beq.n	800bc42 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d107      	bne.n	800bb6a <HAL_ADC_ConfigChannel+0x4c2>
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	0e9b      	lsrs	r3, r3, #26
 800bb60:	3301      	adds	r3, #1
 800bb62:	069b      	lsls	r3, r3, #26
 800bb64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bb68:	e015      	b.n	800bb96 <HAL_ADC_ConfigChannel+0x4ee>
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb72:	fa93 f3a3 	rbit	r3, r3
 800bb76:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800bb78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb7a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800bb7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d101      	bne.n	800bb86 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800bb82:	2320      	movs	r3, #32
 800bb84:	e003      	b.n	800bb8e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800bb86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb88:	fab3 f383 	clz	r3, r3
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	3301      	adds	r3, #1
 800bb90:	069b      	lsls	r3, r3, #26
 800bb92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d109      	bne.n	800bbb6 <HAL_ADC_ConfigChannel+0x50e>
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	0e9b      	lsrs	r3, r3, #26
 800bba8:	3301      	adds	r3, #1
 800bbaa:	f003 031f 	and.w	r3, r3, #31
 800bbae:	2101      	movs	r1, #1
 800bbb0:	fa01 f303 	lsl.w	r3, r1, r3
 800bbb4:	e017      	b.n	800bbe6 <HAL_ADC_ConfigChannel+0x53e>
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbbe:	fa93 f3a3 	rbit	r3, r3
 800bbc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800bbc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbc6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800bbc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d101      	bne.n	800bbd2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800bbce:	2320      	movs	r3, #32
 800bbd0:	e003      	b.n	800bbda <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800bbd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbd4:	fab3 f383 	clz	r3, r3
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	3301      	adds	r3, #1
 800bbdc:	f003 031f 	and.w	r3, r3, #31
 800bbe0:	2101      	movs	r1, #1
 800bbe2:	fa01 f303 	lsl.w	r3, r1, r3
 800bbe6:	ea42 0103 	orr.w	r1, r2, r3
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d10a      	bne.n	800bc0c <HAL_ADC_ConfigChannel+0x564>
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	0e9b      	lsrs	r3, r3, #26
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	f003 021f 	and.w	r2, r3, #31
 800bc02:	4613      	mov	r3, r2
 800bc04:	005b      	lsls	r3, r3, #1
 800bc06:	4413      	add	r3, r2
 800bc08:	051b      	lsls	r3, r3, #20
 800bc0a:	e018      	b.n	800bc3e <HAL_ADC_ConfigChannel+0x596>
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc14:	fa93 f3a3 	rbit	r3, r3
 800bc18:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800bc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800bc1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800bc24:	2320      	movs	r3, #32
 800bc26:	e003      	b.n	800bc30 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800bc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc2a:	fab3 f383 	clz	r3, r3
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	3301      	adds	r3, #1
 800bc32:	f003 021f 	and.w	r2, r3, #31
 800bc36:	4613      	mov	r3, r2
 800bc38:	005b      	lsls	r3, r3, #1
 800bc3a:	4413      	add	r3, r2
 800bc3c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bc3e:	430b      	orrs	r3, r1
 800bc40:	e081      	b.n	800bd46 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d107      	bne.n	800bc5e <HAL_ADC_ConfigChannel+0x5b6>
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	0e9b      	lsrs	r3, r3, #26
 800bc54:	3301      	adds	r3, #1
 800bc56:	069b      	lsls	r3, r3, #26
 800bc58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bc5c:	e015      	b.n	800bc8a <HAL_ADC_ConfigChannel+0x5e2>
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc66:	fa93 f3a3 	rbit	r3, r3
 800bc6a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800bc70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d101      	bne.n	800bc7a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800bc76:	2320      	movs	r3, #32
 800bc78:	e003      	b.n	800bc82 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800bc7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7c:	fab3 f383 	clz	r3, r3
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	3301      	adds	r3, #1
 800bc84:	069b      	lsls	r3, r3, #26
 800bc86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d109      	bne.n	800bcaa <HAL_ADC_ConfigChannel+0x602>
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	0e9b      	lsrs	r3, r3, #26
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	f003 031f 	and.w	r3, r3, #31
 800bca2:	2101      	movs	r1, #1
 800bca4:	fa01 f303 	lsl.w	r3, r1, r3
 800bca8:	e017      	b.n	800bcda <HAL_ADC_ConfigChannel+0x632>
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcb0:	69fb      	ldr	r3, [r7, #28]
 800bcb2:	fa93 f3a3 	rbit	r3, r3
 800bcb6:	61bb      	str	r3, [r7, #24]
  return result;
 800bcb8:	69bb      	ldr	r3, [r7, #24]
 800bcba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800bcbc:	6a3b      	ldr	r3, [r7, #32]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d101      	bne.n	800bcc6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800bcc2:	2320      	movs	r3, #32
 800bcc4:	e003      	b.n	800bcce <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800bcc6:	6a3b      	ldr	r3, [r7, #32]
 800bcc8:	fab3 f383 	clz	r3, r3
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	3301      	adds	r3, #1
 800bcd0:	f003 031f 	and.w	r3, r3, #31
 800bcd4:	2101      	movs	r1, #1
 800bcd6:	fa01 f303 	lsl.w	r3, r1, r3
 800bcda:	ea42 0103 	orr.w	r1, r2, r3
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10d      	bne.n	800bd06 <HAL_ADC_ConfigChannel+0x65e>
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	0e9b      	lsrs	r3, r3, #26
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	f003 021f 	and.w	r2, r3, #31
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	005b      	lsls	r3, r3, #1
 800bcfa:	4413      	add	r3, r2
 800bcfc:	3b1e      	subs	r3, #30
 800bcfe:	051b      	lsls	r3, r3, #20
 800bd00:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bd04:	e01e      	b.n	800bd44 <HAL_ADC_ConfigChannel+0x69c>
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	fa93 f3a3 	rbit	r3, r3
 800bd12:	60fb      	str	r3, [r7, #12]
  return result;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d104      	bne.n	800bd28 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800bd1e:	2320      	movs	r3, #32
 800bd20:	e006      	b.n	800bd30 <HAL_ADC_ConfigChannel+0x688>
 800bd22:	bf00      	nop
 800bd24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	fab3 f383 	clz	r3, r3
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	3301      	adds	r3, #1
 800bd32:	f003 021f 	and.w	r2, r3, #31
 800bd36:	4613      	mov	r3, r2
 800bd38:	005b      	lsls	r3, r3, #1
 800bd3a:	4413      	add	r3, r2
 800bd3c:	3b1e      	subs	r3, #30
 800bd3e:	051b      	lsls	r3, r3, #20
 800bd40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bd44:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	f7ff f8d8 	bl	800af00 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	4b44      	ldr	r3, [pc, #272]	@ (800be68 <HAL_ADC_ConfigChannel+0x7c0>)
 800bd56:	4013      	ands	r3, r2
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d07a      	beq.n	800be52 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800bd5c:	4843      	ldr	r0, [pc, #268]	@ (800be6c <HAL_ADC_ConfigChannel+0x7c4>)
 800bd5e:	f7ff f82d 	bl	800adbc <LL_ADC_GetCommonPathInternalCh>
 800bd62:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a41      	ldr	r2, [pc, #260]	@ (800be70 <HAL_ADC_ConfigChannel+0x7c8>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d12c      	bne.n	800bdca <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800bd70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bd74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d126      	bne.n	800bdca <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a3c      	ldr	r2, [pc, #240]	@ (800be74 <HAL_ADC_ConfigChannel+0x7cc>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d004      	beq.n	800bd90 <HAL_ADC_ConfigChannel+0x6e8>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a3b      	ldr	r2, [pc, #236]	@ (800be78 <HAL_ADC_ConfigChannel+0x7d0>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d15d      	bne.n	800be4c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bd90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bd94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bd98:	4619      	mov	r1, r3
 800bd9a:	4834      	ldr	r0, [pc, #208]	@ (800be6c <HAL_ADC_ConfigChannel+0x7c4>)
 800bd9c:	f7fe fffb 	bl	800ad96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bda0:	4b36      	ldr	r3, [pc, #216]	@ (800be7c <HAL_ADC_ConfigChannel+0x7d4>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	099b      	lsrs	r3, r3, #6
 800bda6:	4a36      	ldr	r2, [pc, #216]	@ (800be80 <HAL_ADC_ConfigChannel+0x7d8>)
 800bda8:	fba2 2303 	umull	r2, r3, r2, r3
 800bdac:	099b      	lsrs	r3, r3, #6
 800bdae:	1c5a      	adds	r2, r3, #1
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	005b      	lsls	r3, r3, #1
 800bdb4:	4413      	add	r3, r2
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800bdba:	e002      	b.n	800bdc2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d1f9      	bne.n	800bdbc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bdc8:	e040      	b.n	800be4c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a2d      	ldr	r2, [pc, #180]	@ (800be84 <HAL_ADC_ConfigChannel+0x7dc>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d118      	bne.n	800be06 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800bdd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bdd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d112      	bne.n	800be06 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a23      	ldr	r2, [pc, #140]	@ (800be74 <HAL_ADC_ConfigChannel+0x7cc>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d004      	beq.n	800bdf4 <HAL_ADC_ConfigChannel+0x74c>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a22      	ldr	r2, [pc, #136]	@ (800be78 <HAL_ADC_ConfigChannel+0x7d0>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d12d      	bne.n	800be50 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bdf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bdf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	481b      	ldr	r0, [pc, #108]	@ (800be6c <HAL_ADC_ConfigChannel+0x7c4>)
 800be00:	f7fe ffc9 	bl	800ad96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800be04:	e024      	b.n	800be50 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a1f      	ldr	r2, [pc, #124]	@ (800be88 <HAL_ADC_ConfigChannel+0x7e0>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d120      	bne.n	800be52 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800be10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800be14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d11a      	bne.n	800be52 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a14      	ldr	r2, [pc, #80]	@ (800be74 <HAL_ADC_ConfigChannel+0x7cc>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d115      	bne.n	800be52 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800be26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800be2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800be2e:	4619      	mov	r1, r3
 800be30:	480e      	ldr	r0, [pc, #56]	@ (800be6c <HAL_ADC_ConfigChannel+0x7c4>)
 800be32:	f7fe ffb0 	bl	800ad96 <LL_ADC_SetCommonPathInternalCh>
 800be36:	e00c      	b.n	800be52 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be3c:	f043 0220 	orr.w	r2, r3, #32
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800be4a:	e002      	b.n	800be52 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800be4c:	bf00      	nop
 800be4e:	e000      	b.n	800be52 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800be50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800be5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800be5e:	4618      	mov	r0, r3
 800be60:	37d8      	adds	r7, #216	@ 0xd8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	80080000 	.word	0x80080000
 800be6c:	50040300 	.word	0x50040300
 800be70:	c7520000 	.word	0xc7520000
 800be74:	50040000 	.word	0x50040000
 800be78:	50040200 	.word	0x50040200
 800be7c:	20000168 	.word	0x20000168
 800be80:	053e2d63 	.word	0x053e2d63
 800be84:	cb840000 	.word	0xcb840000
 800be88:	80000001 	.word	0x80000001

0800be8c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b088      	sub	sp, #32
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800be96:	2300      	movs	r3, #0
 800be98:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7ff f94e 	bl	800b144 <LL_ADC_REG_IsConversionOngoing>
 800bea8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff f96f 	bl	800b192 <LL_ADC_INJ_IsConversionOngoing>
 800beb4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d103      	bne.n	800bec4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f000 8098 	beq.w	800bff4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d02a      	beq.n	800bf28 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	7e5b      	ldrb	r3, [r3, #25]
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d126      	bne.n	800bf28 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	7e1b      	ldrb	r3, [r3, #24]
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d122      	bne.n	800bf28 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800bee2:	2301      	movs	r3, #1
 800bee4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800bee6:	e014      	b.n	800bf12 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	4a45      	ldr	r2, [pc, #276]	@ (800c000 <ADC_ConversionStop+0x174>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d90d      	bls.n	800bf0c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bef4:	f043 0210 	orr.w	r2, r3, #16
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf00:	f043 0201 	orr.w	r2, r3, #1
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	e074      	b.n	800bff6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf1c:	2b40      	cmp	r3, #64	@ 0x40
 800bf1e:	d1e3      	bne.n	800bee8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2240      	movs	r2, #64	@ 0x40
 800bf26:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	2b02      	cmp	r3, #2
 800bf2c:	d014      	beq.n	800bf58 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7ff f906 	bl	800b144 <LL_ADC_REG_IsConversionOngoing>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d00c      	beq.n	800bf58 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7ff f8c3 	bl	800b0ce <LL_ADC_IsDisableOngoing>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d104      	bne.n	800bf58 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7ff f8e2 	bl	800b11c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d014      	beq.n	800bf88 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7ff f915 	bl	800b192 <LL_ADC_INJ_IsConversionOngoing>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00c      	beq.n	800bf88 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7ff f8ab 	bl	800b0ce <LL_ADC_IsDisableOngoing>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d104      	bne.n	800bf88 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7ff f8f1 	bl	800b16a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d005      	beq.n	800bf9a <ADC_ConversionStop+0x10e>
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	2b03      	cmp	r3, #3
 800bf92:	d105      	bne.n	800bfa0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800bf94:	230c      	movs	r3, #12
 800bf96:	617b      	str	r3, [r7, #20]
        break;
 800bf98:	e005      	b.n	800bfa6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800bf9a:	2308      	movs	r3, #8
 800bf9c:	617b      	str	r3, [r7, #20]
        break;
 800bf9e:	e002      	b.n	800bfa6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800bfa0:	2304      	movs	r3, #4
 800bfa2:	617b      	str	r3, [r7, #20]
        break;
 800bfa4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800bfa6:	f7fe feb3 	bl	800ad10 <HAL_GetTick>
 800bfaa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800bfac:	e01b      	b.n	800bfe6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800bfae:	f7fe feaf 	bl	800ad10 <HAL_GetTick>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	1ad3      	subs	r3, r2, r3
 800bfb8:	2b05      	cmp	r3, #5
 800bfba:	d914      	bls.n	800bfe6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	689a      	ldr	r2, [r3, #8]
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	4013      	ands	r3, r2
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00d      	beq.n	800bfe6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfce:	f043 0210 	orr.w	r2, r3, #16
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfda:	f043 0201 	orr.w	r2, r3, #1
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e007      	b.n	800bff6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	689a      	ldr	r2, [r3, #8]
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	4013      	ands	r3, r2
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1dc      	bne.n	800bfae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800bff4:	2300      	movs	r3, #0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3720      	adds	r7, #32
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	a33fffff 	.word	0xa33fffff

0800c004 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800c00c:	2300      	movs	r3, #0
 800c00e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4618      	mov	r0, r3
 800c016:	f7ff f847 	bl	800b0a8 <LL_ADC_IsEnabled>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d169      	bne.n	800c0f4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	689a      	ldr	r2, [r3, #8]
 800c026:	4b36      	ldr	r3, [pc, #216]	@ (800c100 <ADC_Enable+0xfc>)
 800c028:	4013      	ands	r3, r2
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00d      	beq.n	800c04a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c032:	f043 0210 	orr.w	r2, r3, #16
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c03e:	f043 0201 	orr.w	r2, r3, #1
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	e055      	b.n	800c0f6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4618      	mov	r0, r3
 800c050:	f7ff f802 	bl	800b058 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c054:	482b      	ldr	r0, [pc, #172]	@ (800c104 <ADC_Enable+0x100>)
 800c056:	f7fe feb1 	bl	800adbc <LL_ADC_GetCommonPathInternalCh>
 800c05a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800c05c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c060:	2b00      	cmp	r3, #0
 800c062:	d013      	beq.n	800c08c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c064:	4b28      	ldr	r3, [pc, #160]	@ (800c108 <ADC_Enable+0x104>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	099b      	lsrs	r3, r3, #6
 800c06a:	4a28      	ldr	r2, [pc, #160]	@ (800c10c <ADC_Enable+0x108>)
 800c06c:	fba2 2303 	umull	r2, r3, r2, r3
 800c070:	099b      	lsrs	r3, r3, #6
 800c072:	1c5a      	adds	r2, r3, #1
 800c074:	4613      	mov	r3, r2
 800c076:	005b      	lsls	r3, r3, #1
 800c078:	4413      	add	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c07e:	e002      	b.n	800c086 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	3b01      	subs	r3, #1
 800c084:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d1f9      	bne.n	800c080 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c08c:	f7fe fe40 	bl	800ad10 <HAL_GetTick>
 800c090:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c092:	e028      	b.n	800c0e6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4618      	mov	r0, r3
 800c09a:	f7ff f805 	bl	800b0a8 <LL_ADC_IsEnabled>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d104      	bne.n	800c0ae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fe ffd5 	bl	800b058 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c0ae:	f7fe fe2f 	bl	800ad10 <HAL_GetTick>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	1ad3      	subs	r3, r2, r3
 800c0b8:	2b02      	cmp	r3, #2
 800c0ba:	d914      	bls.n	800c0e6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f003 0301 	and.w	r3, r3, #1
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d00d      	beq.n	800c0e6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0ce:	f043 0210 	orr.w	r2, r3, #16
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0da:	f043 0201 	orr.w	r2, r3, #1
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e007      	b.n	800c0f6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f003 0301 	and.w	r3, r3, #1
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d1cf      	bne.n	800c094 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c0f4:	2300      	movs	r3, #0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3710      	adds	r7, #16
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	8000003f 	.word	0x8000003f
 800c104:	50040300 	.word	0x50040300
 800c108:	20000168 	.word	0x20000168
 800c10c:	053e2d63 	.word	0x053e2d63

0800c110 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fe ffd6 	bl	800b0ce <LL_ADC_IsDisableOngoing>
 800c122:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fe ffbd 	bl	800b0a8 <LL_ADC_IsEnabled>
 800c12e:	4603      	mov	r3, r0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d047      	beq.n	800c1c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d144      	bne.n	800c1c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	f003 030d 	and.w	r3, r3, #13
 800c144:	2b01      	cmp	r3, #1
 800c146:	d10c      	bne.n	800c162 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fe ff97 	bl	800b080 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2203      	movs	r2, #3
 800c158:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c15a:	f7fe fdd9 	bl	800ad10 <HAL_GetTick>
 800c15e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c160:	e029      	b.n	800c1b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c166:	f043 0210 	orr.w	r2, r3, #16
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c172:	f043 0201 	orr.w	r2, r3, #1
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e023      	b.n	800c1c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c17e:	f7fe fdc7 	bl	800ad10 <HAL_GetTick>
 800c182:	4602      	mov	r2, r0
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	1ad3      	subs	r3, r2, r3
 800c188:	2b02      	cmp	r3, #2
 800c18a:	d914      	bls.n	800c1b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	f003 0301 	and.w	r3, r3, #1
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00d      	beq.n	800c1b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c19e:	f043 0210 	orr.w	r2, r3, #16
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1aa:	f043 0201 	orr.w	r2, r3, #1
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e007      	b.n	800c1c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	f003 0301 	and.w	r3, r3, #1
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d1dc      	bne.n	800c17e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b084      	sub	sp, #16
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1da:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1e0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d14b      	bne.n	800c280 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f003 0308 	and.w	r3, r3, #8
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d021      	beq.n	800c246 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4618      	mov	r0, r3
 800c208:	f7fe fe3b 	bl	800ae82 <LL_ADC_REG_IsTriggerSourceSWStart>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d032      	beq.n	800c278 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d12b      	bne.n	800c278 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c224:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c230:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c234:	2b00      	cmp	r3, #0
 800c236:	d11f      	bne.n	800c278 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c23c:	f043 0201 	orr.w	r2, r3, #1
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	655a      	str	r2, [r3, #84]	@ 0x54
 800c244:	e018      	b.n	800c278 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	f003 0302 	and.w	r3, r3, #2
 800c250:	2b00      	cmp	r3, #0
 800c252:	d111      	bne.n	800c278 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c258:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d105      	bne.n	800c278 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c270:	f043 0201 	orr.w	r2, r3, #1
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c278:	68f8      	ldr	r0, [r7, #12]
 800c27a:	f7f6 fb6d 	bl	8002958 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c27e:	e00e      	b.n	800c29e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c284:	f003 0310 	and.w	r3, r3, #16
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800c28c:	68f8      	ldr	r0, [r7, #12]
 800c28e:	f7ff fa00 	bl	800b692 <HAL_ADC_ErrorCallback>
}
 800c292:	e004      	b.n	800c29e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	4798      	blx	r3
}
 800c29e:	bf00      	nop
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b084      	sub	sp, #16
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2b2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f7f6 fb33 	bl	8002920 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c2ba:	bf00      	nop
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b084      	sub	sp, #16
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2e0:	f043 0204 	orr.w	r2, r3, #4
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f7ff f9d2 	bl	800b692 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c2ee:	bf00      	nop
 800c2f0:	3710      	adds	r7, #16
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <LL_ADC_IsEnabled>:
{
 800c2f6:	b480      	push	{r7}
 800c2f8:	b083      	sub	sp, #12
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	f003 0301 	and.w	r3, r3, #1
 800c306:	2b01      	cmp	r3, #1
 800c308:	d101      	bne.n	800c30e <LL_ADC_IsEnabled+0x18>
 800c30a:	2301      	movs	r3, #1
 800c30c:	e000      	b.n	800c310 <LL_ADC_IsEnabled+0x1a>
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <LL_ADC_REG_IsConversionOngoing>:
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	f003 0304 	and.w	r3, r3, #4
 800c32c:	2b04      	cmp	r3, #4
 800c32e:	d101      	bne.n	800c334 <LL_ADC_REG_IsConversionOngoing+0x18>
 800c330:	2301      	movs	r3, #1
 800c332:	e000      	b.n	800c336 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	370c      	adds	r7, #12
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr
	...

0800c344 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800c344:	b590      	push	{r4, r7, lr}
 800c346:	b09f      	sub	sp, #124	@ 0x7c
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c34e:	2300      	movs	r3, #0
 800c350:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d101      	bne.n	800c362 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c35e:	2302      	movs	r3, #2
 800c360:	e093      	b.n	800c48a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2201      	movs	r2, #1
 800c366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800c36a:	2300      	movs	r3, #0
 800c36c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800c36e:	2300      	movs	r3, #0
 800c370:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a47      	ldr	r2, [pc, #284]	@ (800c494 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d102      	bne.n	800c382 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c37c:	4b46      	ldr	r3, [pc, #280]	@ (800c498 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c37e:	60bb      	str	r3, [r7, #8]
 800c380:	e001      	b.n	800c386 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800c382:	2300      	movs	r3, #0
 800c384:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10b      	bne.n	800c3a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c390:	f043 0220 	orr.w	r2, r3, #32
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e072      	b.n	800c48a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff ffb8 	bl	800c31c <LL_ADC_REG_IsConversionOngoing>
 800c3ac:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7ff ffb2 	bl	800c31c <LL_ADC_REG_IsConversionOngoing>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d154      	bne.n	800c468 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800c3be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d151      	bne.n	800c468 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c3c4:	4b35      	ldr	r3, [pc, #212]	@ (800c49c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800c3c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d02c      	beq.n	800c42a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c3d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	6859      	ldr	r1, [r3, #4]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c3e2:	035b      	lsls	r3, r3, #13
 800c3e4:	430b      	orrs	r3, r1
 800c3e6:	431a      	orrs	r2, r3
 800c3e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c3ec:	4829      	ldr	r0, [pc, #164]	@ (800c494 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c3ee:	f7ff ff82 	bl	800c2f6 <LL_ADC_IsEnabled>
 800c3f2:	4604      	mov	r4, r0
 800c3f4:	4828      	ldr	r0, [pc, #160]	@ (800c498 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c3f6:	f7ff ff7e 	bl	800c2f6 <LL_ADC_IsEnabled>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	431c      	orrs	r4, r3
 800c3fe:	4828      	ldr	r0, [pc, #160]	@ (800c4a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c400:	f7ff ff79 	bl	800c2f6 <LL_ADC_IsEnabled>
 800c404:	4603      	mov	r3, r0
 800c406:	4323      	orrs	r3, r4
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d137      	bne.n	800c47c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c40c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c414:	f023 030f 	bic.w	r3, r3, #15
 800c418:	683a      	ldr	r2, [r7, #0]
 800c41a:	6811      	ldr	r1, [r2, #0]
 800c41c:	683a      	ldr	r2, [r7, #0]
 800c41e:	6892      	ldr	r2, [r2, #8]
 800c420:	430a      	orrs	r2, r1
 800c422:	431a      	orrs	r2, r3
 800c424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c426:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c428:	e028      	b.n	800c47c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c42a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c434:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c436:	4817      	ldr	r0, [pc, #92]	@ (800c494 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c438:	f7ff ff5d 	bl	800c2f6 <LL_ADC_IsEnabled>
 800c43c:	4604      	mov	r4, r0
 800c43e:	4816      	ldr	r0, [pc, #88]	@ (800c498 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c440:	f7ff ff59 	bl	800c2f6 <LL_ADC_IsEnabled>
 800c444:	4603      	mov	r3, r0
 800c446:	431c      	orrs	r4, r3
 800c448:	4815      	ldr	r0, [pc, #84]	@ (800c4a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c44a:	f7ff ff54 	bl	800c2f6 <LL_ADC_IsEnabled>
 800c44e:	4603      	mov	r3, r0
 800c450:	4323      	orrs	r3, r4
 800c452:	2b00      	cmp	r3, #0
 800c454:	d112      	bne.n	800c47c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c45e:	f023 030f 	bic.w	r3, r3, #15
 800c462:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c464:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c466:	e009      	b.n	800c47c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c46c:	f043 0220 	orr.w	r2, r3, #32
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800c47a:	e000      	b.n	800c47e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c47c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800c486:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	377c      	adds	r7, #124	@ 0x7c
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd90      	pop	{r4, r7, pc}
 800c492:	bf00      	nop
 800c494:	50040000 	.word	0x50040000
 800c498:	50040100 	.word	0x50040100
 800c49c:	50040300 	.word	0x50040300
 800c4a0:	50040200 	.word	0x50040200

0800c4a4 <__NVIC_SetPriorityGrouping>:
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f003 0307 	and.w	r3, r3, #7
 800c4b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c4b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c4e8 <__NVIC_SetPriorityGrouping+0x44>)
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c4ba:	68ba      	ldr	r2, [r7, #8]
 800c4bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c4cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c4d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c4d6:	4a04      	ldr	r2, [pc, #16]	@ (800c4e8 <__NVIC_SetPriorityGrouping+0x44>)
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	60d3      	str	r3, [r2, #12]
}
 800c4dc:	bf00      	nop
 800c4de:	3714      	adds	r7, #20
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr
 800c4e8:	e000ed00 	.word	0xe000ed00

0800c4ec <__NVIC_GetPriorityGrouping>:
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c4f0:	4b04      	ldr	r3, [pc, #16]	@ (800c504 <__NVIC_GetPriorityGrouping+0x18>)
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	0a1b      	lsrs	r3, r3, #8
 800c4f6:	f003 0307 	and.w	r3, r3, #7
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr
 800c504:	e000ed00 	.word	0xe000ed00

0800c508 <__NVIC_EnableIRQ>:
{
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	4603      	mov	r3, r0
 800c510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c516:	2b00      	cmp	r3, #0
 800c518:	db0b      	blt.n	800c532 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c51a:	79fb      	ldrb	r3, [r7, #7]
 800c51c:	f003 021f 	and.w	r2, r3, #31
 800c520:	4907      	ldr	r1, [pc, #28]	@ (800c540 <__NVIC_EnableIRQ+0x38>)
 800c522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c526:	095b      	lsrs	r3, r3, #5
 800c528:	2001      	movs	r0, #1
 800c52a:	fa00 f202 	lsl.w	r2, r0, r2
 800c52e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c532:	bf00      	nop
 800c534:	370c      	adds	r7, #12
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	e000e100 	.word	0xe000e100

0800c544 <__NVIC_SetPriority>:
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	4603      	mov	r3, r0
 800c54c:	6039      	str	r1, [r7, #0]
 800c54e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c554:	2b00      	cmp	r3, #0
 800c556:	db0a      	blt.n	800c56e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	490c      	ldr	r1, [pc, #48]	@ (800c590 <__NVIC_SetPriority+0x4c>)
 800c55e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c562:	0112      	lsls	r2, r2, #4
 800c564:	b2d2      	uxtb	r2, r2
 800c566:	440b      	add	r3, r1
 800c568:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c56c:	e00a      	b.n	800c584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	b2da      	uxtb	r2, r3
 800c572:	4908      	ldr	r1, [pc, #32]	@ (800c594 <__NVIC_SetPriority+0x50>)
 800c574:	79fb      	ldrb	r3, [r7, #7]
 800c576:	f003 030f 	and.w	r3, r3, #15
 800c57a:	3b04      	subs	r3, #4
 800c57c:	0112      	lsls	r2, r2, #4
 800c57e:	b2d2      	uxtb	r2, r2
 800c580:	440b      	add	r3, r1
 800c582:	761a      	strb	r2, [r3, #24]
}
 800c584:	bf00      	nop
 800c586:	370c      	adds	r7, #12
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr
 800c590:	e000e100 	.word	0xe000e100
 800c594:	e000ed00 	.word	0xe000ed00

0800c598 <NVIC_EncodePriority>:
{
 800c598:	b480      	push	{r7}
 800c59a:	b089      	sub	sp, #36	@ 0x24
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f003 0307 	and.w	r3, r3, #7
 800c5aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	f1c3 0307 	rsb	r3, r3, #7
 800c5b2:	2b04      	cmp	r3, #4
 800c5b4:	bf28      	it	cs
 800c5b6:	2304      	movcs	r3, #4
 800c5b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	3304      	adds	r3, #4
 800c5be:	2b06      	cmp	r3, #6
 800c5c0:	d902      	bls.n	800c5c8 <NVIC_EncodePriority+0x30>
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	3b03      	subs	r3, #3
 800c5c6:	e000      	b.n	800c5ca <NVIC_EncodePriority+0x32>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5d6:	43da      	mvns	r2, r3
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	401a      	ands	r2, r3
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c5e0:	f04f 31ff 	mov.w	r1, #4294967295
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c5ea:	43d9      	mvns	r1, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c5f0:	4313      	orrs	r3, r2
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3724      	adds	r7, #36	@ 0x24
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
	...

0800c600 <__NVIC_SystemReset>:
{
 800c600:	b480      	push	{r7}
 800c602:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800c604:	f3bf 8f4f 	dsb	sy
}
 800c608:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c60a:	4b06      	ldr	r3, [pc, #24]	@ (800c624 <__NVIC_SystemReset+0x24>)
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c612:	4904      	ldr	r1, [pc, #16]	@ (800c624 <__NVIC_SystemReset+0x24>)
 800c614:	4b04      	ldr	r3, [pc, #16]	@ (800c628 <__NVIC_SystemReset+0x28>)
 800c616:	4313      	orrs	r3, r2
 800c618:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c61a:	f3bf 8f4f 	dsb	sy
}
 800c61e:	bf00      	nop
    __NOP();
 800c620:	bf00      	nop
 800c622:	e7fd      	b.n	800c620 <__NVIC_SystemReset+0x20>
 800c624:	e000ed00 	.word	0xe000ed00
 800c628:	05fa0004 	.word	0x05fa0004

0800c62c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	3b01      	subs	r3, #1
 800c638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c63c:	d301      	bcc.n	800c642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c63e:	2301      	movs	r3, #1
 800c640:	e00f      	b.n	800c662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c642:	4a0a      	ldr	r2, [pc, #40]	@ (800c66c <SysTick_Config+0x40>)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	3b01      	subs	r3, #1
 800c648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c64a:	210f      	movs	r1, #15
 800c64c:	f04f 30ff 	mov.w	r0, #4294967295
 800c650:	f7ff ff78 	bl	800c544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c654:	4b05      	ldr	r3, [pc, #20]	@ (800c66c <SysTick_Config+0x40>)
 800c656:	2200      	movs	r2, #0
 800c658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c65a:	4b04      	ldr	r3, [pc, #16]	@ (800c66c <SysTick_Config+0x40>)
 800c65c:	2207      	movs	r2, #7
 800c65e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	e000e010 	.word	0xe000e010

0800c670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff ff13 	bl	800c4a4 <__NVIC_SetPriorityGrouping>
}
 800c67e:	bf00      	nop
 800c680:	3708      	adds	r7, #8
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	b086      	sub	sp, #24
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	4603      	mov	r3, r0
 800c68e:	60b9      	str	r1, [r7, #8]
 800c690:	607a      	str	r2, [r7, #4]
 800c692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c694:	2300      	movs	r3, #0
 800c696:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c698:	f7ff ff28 	bl	800c4ec <__NVIC_GetPriorityGrouping>
 800c69c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	68b9      	ldr	r1, [r7, #8]
 800c6a2:	6978      	ldr	r0, [r7, #20]
 800c6a4:	f7ff ff78 	bl	800c598 <NVIC_EncodePriority>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6ae:	4611      	mov	r1, r2
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7ff ff47 	bl	800c544 <__NVIC_SetPriority>
}
 800c6b6:	bf00      	nop
 800c6b8:	3718      	adds	r7, #24
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}

0800c6be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b082      	sub	sp, #8
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c6c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7ff ff1b 	bl	800c508 <__NVIC_EnableIRQ>
}
 800c6d2:	bf00      	nop
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800c6de:	f7ff ff8f 	bl	800c600 <__NVIC_SystemReset>

0800c6e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b082      	sub	sp, #8
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f7ff ff9e 	bl	800c62c <SysTick_Config>
 800c6f0:	4603      	mov	r3, r0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
	...

0800c6fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d101      	bne.n	800c70e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	e054      	b.n	800c7b8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	7f5b      	ldrb	r3, [r3, #29]
 800c712:	b2db      	uxtb	r3, r3
 800c714:	2b00      	cmp	r3, #0
 800c716:	d105      	bne.n	800c724 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7fa fdb2 	bl	8007288 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2202      	movs	r2, #2
 800c728:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	791b      	ldrb	r3, [r3, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d10c      	bne.n	800c74c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a22      	ldr	r2, [pc, #136]	@ (800c7c0 <HAL_CRC_Init+0xc4>)
 800c738:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	689a      	ldr	r2, [r3, #8]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f022 0218 	bic.w	r2, r2, #24
 800c748:	609a      	str	r2, [r3, #8]
 800c74a:	e00c      	b.n	800c766 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6899      	ldr	r1, [r3, #8]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	68db      	ldr	r3, [r3, #12]
 800c754:	461a      	mov	r2, r3
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f942 	bl	800c9e0 <HAL_CRCEx_Polynomial_Set>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d001      	beq.n	800c766 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800c762:	2301      	movs	r3, #1
 800c764:	e028      	b.n	800c7b8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	795b      	ldrb	r3, [r3, #5]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d105      	bne.n	800c77a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f04f 32ff 	mov.w	r2, #4294967295
 800c776:	611a      	str	r2, [r3, #16]
 800c778:	e004      	b.n	800c784 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	6912      	ldr	r2, [r2, #16]
 800c782:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	695a      	ldr	r2, [r3, #20]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	430a      	orrs	r2, r1
 800c798:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	699a      	ldr	r2, [r3, #24]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	430a      	orrs	r2, r1
 800c7ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	04c11db7 	.word	0x04c11db7

0800c7c4 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b086      	sub	sp, #24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2202      	movs	r2, #2
 800c7d8:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6a1b      	ldr	r3, [r3, #32]
 800c7de:	2b03      	cmp	r3, #3
 800c7e0:	d006      	beq.n	800c7f0 <HAL_CRC_Accumulate+0x2c>
 800c7e2:	2b03      	cmp	r3, #3
 800c7e4:	d829      	bhi.n	800c83a <HAL_CRC_Accumulate+0x76>
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d019      	beq.n	800c81e <HAL_CRC_Accumulate+0x5a>
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	d01e      	beq.n	800c82c <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 800c7ee:	e024      	b.n	800c83a <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	617b      	str	r3, [r7, #20]
 800c7f4:	e00a      	b.n	800c80c <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	68ba      	ldr	r2, [r7, #8]
 800c7fc:	441a      	add	r2, r3
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	6812      	ldr	r2, [r2, #0]
 800c804:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	3301      	adds	r3, #1
 800c80a:	617b      	str	r3, [r7, #20]
 800c80c:	697a      	ldr	r2, [r7, #20]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	429a      	cmp	r2, r3
 800c812:	d3f0      	bcc.n	800c7f6 <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	613b      	str	r3, [r7, #16]
      break;
 800c81c:	e00e      	b.n	800c83c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	68b9      	ldr	r1, [r7, #8]
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	f000 f812 	bl	800c84c <CRC_Handle_8>
 800c828:	6138      	str	r0, [r7, #16]
      break;
 800c82a:	e007      	b.n	800c83c <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	68b9      	ldr	r1, [r7, #8]
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f000 f89b 	bl	800c96c <CRC_Handle_16>
 800c836:	6138      	str	r0, [r7, #16]
      break;
 800c838:	e000      	b.n	800c83c <HAL_CRC_Accumulate+0x78>
      break;
 800c83a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2201      	movs	r2, #1
 800c840:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800c842:	693b      	ldr	r3, [r7, #16]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3718      	adds	r7, #24
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b089      	sub	sp, #36	@ 0x24
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800c858:	2300      	movs	r3, #0
 800c85a:	61fb      	str	r3, [r7, #28]
 800c85c:	e023      	b.n	800c8a6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c85e:	69fb      	ldr	r3, [r7, #28]
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	4413      	add	r3, r2
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	3301      	adds	r3, #1
 800c870:	68b9      	ldr	r1, [r7, #8]
 800c872:	440b      	add	r3, r1
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c878:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800c87a:	69fb      	ldr	r3, [r7, #28]
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	3302      	adds	r3, #2
 800c880:	68b9      	ldr	r1, [r7, #8]
 800c882:	440b      	add	r3, r1
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800c888:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	3303      	adds	r3, #3
 800c890:	68b9      	ldr	r1, [r7, #8]
 800c892:	440b      	add	r3, r1
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800c89c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c89e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	61fb      	str	r3, [r7, #28]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	089b      	lsrs	r3, r3, #2
 800c8aa:	69fa      	ldr	r2, [r7, #28]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d3d6      	bcc.n	800c85e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f003 0303 	and.w	r3, r3, #3
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d04f      	beq.n	800c95a <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f003 0303 	and.w	r3, r3, #3
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d107      	bne.n	800c8d4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	68ba      	ldr	r2, [r7, #8]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	68fa      	ldr	r2, [r7, #12]
 800c8ce:	6812      	ldr	r2, [r2, #0]
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f003 0303 	and.w	r3, r3, #3
 800c8da:	2b02      	cmp	r3, #2
 800c8dc:	d117      	bne.n	800c90e <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	b21b      	sxth	r3, r3
 800c8ea:	021b      	lsls	r3, r3, #8
 800c8ec:	b21a      	sxth	r2, r3
 800c8ee:	69fb      	ldr	r3, [r7, #28]
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	68b9      	ldr	r1, [r7, #8]
 800c8f6:	440b      	add	r3, r1
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	b21b      	sxth	r3, r3
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	b21b      	sxth	r3, r3
 800c900:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	8b7a      	ldrh	r2, [r7, #26]
 800c90c:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f003 0303 	and.w	r3, r3, #3
 800c914:	2b03      	cmp	r3, #3
 800c916:	d120      	bne.n	800c95a <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	68ba      	ldr	r2, [r7, #8]
 800c91e:	4413      	add	r3, r2
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	b21b      	sxth	r3, r3
 800c924:	021b      	lsls	r3, r3, #8
 800c926:	b21a      	sxth	r2, r3
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	3301      	adds	r3, #1
 800c92e:	68b9      	ldr	r1, [r7, #8]
 800c930:	440b      	add	r3, r1
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	b21b      	sxth	r3, r3
 800c936:	4313      	orrs	r3, r2
 800c938:	b21b      	sxth	r3, r3
 800c93a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	8b7a      	ldrh	r2, [r7, #26]
 800c946:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	3302      	adds	r3, #2
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	4413      	add	r3, r2
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	6812      	ldr	r2, [r2, #0]
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	681b      	ldr	r3, [r3, #0]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3724      	adds	r7, #36	@ 0x24
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b087      	sub	sp, #28
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800c978:	2300      	movs	r3, #0
 800c97a:	617b      	str	r3, [r7, #20]
 800c97c:	e013      	b.n	800c9a6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	4413      	add	r3, r2
 800c986:	881b      	ldrh	r3, [r3, #0]
 800c988:	041a      	lsls	r2, r3, #16
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	3302      	adds	r3, #2
 800c990:	68b9      	ldr	r1, [r7, #8]
 800c992:	440b      	add	r3, r1
 800c994:	881b      	ldrh	r3, [r3, #0]
 800c996:	4619      	mov	r1, r3
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	430a      	orrs	r2, r1
 800c99e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	617b      	str	r3, [r7, #20]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	085b      	lsrs	r3, r3, #1
 800c9aa:	697a      	ldr	r2, [r7, #20]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d3e6      	bcc.n	800c97e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f003 0301 	and.w	r3, r3, #1
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d009      	beq.n	800c9ce <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	009b      	lsls	r3, r3, #2
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	881a      	ldrh	r2, [r3, #0]
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	681b      	ldr	r3, [r3, #0]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	371c      	adds	r7, #28
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b087      	sub	sp, #28
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c9f0:	231f      	movs	r3, #31
 800c9f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	f003 0301 	and.w	r3, r3, #1
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d102      	bne.n	800ca04 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	75fb      	strb	r3, [r7, #23]
 800ca02:	e063      	b.n	800cacc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800ca04:	bf00      	nop
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	1e5a      	subs	r2, r3, #1
 800ca0a:	613a      	str	r2, [r7, #16]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d009      	beq.n	800ca24 <HAL_CRCEx_Polynomial_Set+0x44>
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	f003 031f 	and.w	r3, r3, #31
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	fa22 f303 	lsr.w	r3, r2, r3
 800ca1c:	f003 0301 	and.w	r3, r3, #1
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d0f0      	beq.n	800ca06 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2b18      	cmp	r3, #24
 800ca28:	d846      	bhi.n	800cab8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800ca2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ca30 <HAL_CRCEx_Polynomial_Set+0x50>)
 800ca2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca30:	0800cabf 	.word	0x0800cabf
 800ca34:	0800cab9 	.word	0x0800cab9
 800ca38:	0800cab9 	.word	0x0800cab9
 800ca3c:	0800cab9 	.word	0x0800cab9
 800ca40:	0800cab9 	.word	0x0800cab9
 800ca44:	0800cab9 	.word	0x0800cab9
 800ca48:	0800cab9 	.word	0x0800cab9
 800ca4c:	0800cab9 	.word	0x0800cab9
 800ca50:	0800caad 	.word	0x0800caad
 800ca54:	0800cab9 	.word	0x0800cab9
 800ca58:	0800cab9 	.word	0x0800cab9
 800ca5c:	0800cab9 	.word	0x0800cab9
 800ca60:	0800cab9 	.word	0x0800cab9
 800ca64:	0800cab9 	.word	0x0800cab9
 800ca68:	0800cab9 	.word	0x0800cab9
 800ca6c:	0800cab9 	.word	0x0800cab9
 800ca70:	0800caa1 	.word	0x0800caa1
 800ca74:	0800cab9 	.word	0x0800cab9
 800ca78:	0800cab9 	.word	0x0800cab9
 800ca7c:	0800cab9 	.word	0x0800cab9
 800ca80:	0800cab9 	.word	0x0800cab9
 800ca84:	0800cab9 	.word	0x0800cab9
 800ca88:	0800cab9 	.word	0x0800cab9
 800ca8c:	0800cab9 	.word	0x0800cab9
 800ca90:	0800ca95 	.word	0x0800ca95
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	2b06      	cmp	r3, #6
 800ca98:	d913      	bls.n	800cac2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800ca9e:	e010      	b.n	800cac2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	2b07      	cmp	r3, #7
 800caa4:	d90f      	bls.n	800cac6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800caa6:	2301      	movs	r3, #1
 800caa8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800caaa:	e00c      	b.n	800cac6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	2b0f      	cmp	r3, #15
 800cab0:	d90b      	bls.n	800caca <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800cab2:	2301      	movs	r3, #1
 800cab4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800cab6:	e008      	b.n	800caca <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800cab8:	2301      	movs	r3, #1
 800caba:	75fb      	strb	r3, [r7, #23]
        break;
 800cabc:	e006      	b.n	800cacc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cabe:	bf00      	nop
 800cac0:	e004      	b.n	800cacc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cac2:	bf00      	nop
 800cac4:	e002      	b.n	800cacc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cac6:	bf00      	nop
 800cac8:	e000      	b.n	800cacc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800caca:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800cacc:	7dfb      	ldrb	r3, [r7, #23]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d10d      	bne.n	800caee <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68ba      	ldr	r2, [r7, #8]
 800cad8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	689b      	ldr	r3, [r3, #8]
 800cae0:	f023 0118 	bic.w	r1, r3, #24
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	430a      	orrs	r2, r1
 800caec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800caee:	7dfb      	ldrb	r3, [r7, #23]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	371c      	adds	r7, #28
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <HAL_CRCEx_Input_Data_Reverse>:
  *          @arg @ref CRC_INPUTDATA_INVERSION_HALFWORD HalfWord-wise bit reversal
  *          @arg @ref CRC_INPUTDATA_INVERSION_WORD     Word-wise bit reversal
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Input_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t InputReverseMode)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(InputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2202      	movs	r2, #2
 800cb0a:	775a      	strb	r2, [r3, #29]

  /* set input data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, InputReverseMode);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	689b      	ldr	r3, [r3, #8]
 800cb12:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	683a      	ldr	r2, [r7, #0]
 800cb1c:	430a      	orrs	r2, r1
 800cb1e:	609a      	str	r2, [r3, #8]
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2201      	movs	r2, #1
 800cb24:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800cb26:	2300      	movs	r3, #0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <HAL_CRCEx_Output_Data_Reverse>:
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_DISABLE no CRC inversion (default value)
  *          @arg @ref CRC_OUTPUTDATA_INVERSION_ENABLE  bit-level inversion (e.g. for a 8-bit CRC: 0xB5 becomes 0xAD)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Output_Data_Reverse(CRC_HandleTypeDef *hcrc, uint32_t OutputReverseMode)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(OutputReverseMode));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2202      	movs	r2, #2
 800cb42:	775a      	strb	r2, [r3, #29]

  /* set output data inversion mode */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, OutputReverseMode);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	683a      	ldr	r2, [r7, #0]
 800cb54:	430a      	orrs	r2, r1
 800cb56:	609a      	str	r2, [r3, #8]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800cb5e:	2300      	movs	r3, #0
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b085      	sub	sp, #20
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e098      	b.n	800ccb0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	461a      	mov	r2, r3
 800cb84:	4b4d      	ldr	r3, [pc, #308]	@ (800ccbc <HAL_DMA_Init+0x150>)
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d80f      	bhi.n	800cbaa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	461a      	mov	r2, r3
 800cb90:	4b4b      	ldr	r3, [pc, #300]	@ (800ccc0 <HAL_DMA_Init+0x154>)
 800cb92:	4413      	add	r3, r2
 800cb94:	4a4b      	ldr	r2, [pc, #300]	@ (800ccc4 <HAL_DMA_Init+0x158>)
 800cb96:	fba2 2303 	umull	r2, r3, r2, r3
 800cb9a:	091b      	lsrs	r3, r3, #4
 800cb9c:	009a      	lsls	r2, r3, #2
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4a48      	ldr	r2, [pc, #288]	@ (800ccc8 <HAL_DMA_Init+0x15c>)
 800cba6:	641a      	str	r2, [r3, #64]	@ 0x40
 800cba8:	e00e      	b.n	800cbc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	4b46      	ldr	r3, [pc, #280]	@ (800cccc <HAL_DMA_Init+0x160>)
 800cbb2:	4413      	add	r3, r2
 800cbb4:	4a43      	ldr	r2, [pc, #268]	@ (800ccc4 <HAL_DMA_Init+0x158>)
 800cbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbba:	091b      	lsrs	r3, r3, #4
 800cbbc:	009a      	lsls	r2, r3, #2
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4a42      	ldr	r2, [pc, #264]	@ (800ccd0 <HAL_DMA_Init+0x164>)
 800cbc6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2202      	movs	r2, #2
 800cbcc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800cbde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbe2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800cbec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	691b      	ldr	r3, [r3, #16]
 800cbf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cbf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	699b      	ldr	r3, [r3, #24]
 800cbfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cc04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a1b      	ldr	r3, [r3, #32]
 800cc0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	68fa      	ldr	r2, [r7, #12]
 800cc18:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cc22:	d039      	beq.n	800cc98 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc28:	4a27      	ldr	r2, [pc, #156]	@ (800ccc8 <HAL_DMA_Init+0x15c>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d11a      	bne.n	800cc64 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cc2e:	4b29      	ldr	r3, [pc, #164]	@ (800ccd4 <HAL_DMA_Init+0x168>)
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc36:	f003 031c 	and.w	r3, r3, #28
 800cc3a:	210f      	movs	r1, #15
 800cc3c:	fa01 f303 	lsl.w	r3, r1, r3
 800cc40:	43db      	mvns	r3, r3
 800cc42:	4924      	ldr	r1, [pc, #144]	@ (800ccd4 <HAL_DMA_Init+0x168>)
 800cc44:	4013      	ands	r3, r2
 800cc46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cc48:	4b22      	ldr	r3, [pc, #136]	@ (800ccd4 <HAL_DMA_Init+0x168>)
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6859      	ldr	r1, [r3, #4]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc54:	f003 031c 	and.w	r3, r3, #28
 800cc58:	fa01 f303 	lsl.w	r3, r1, r3
 800cc5c:	491d      	ldr	r1, [pc, #116]	@ (800ccd4 <HAL_DMA_Init+0x168>)
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	600b      	str	r3, [r1, #0]
 800cc62:	e019      	b.n	800cc98 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cc64:	4b1c      	ldr	r3, [pc, #112]	@ (800ccd8 <HAL_DMA_Init+0x16c>)
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc6c:	f003 031c 	and.w	r3, r3, #28
 800cc70:	210f      	movs	r1, #15
 800cc72:	fa01 f303 	lsl.w	r3, r1, r3
 800cc76:	43db      	mvns	r3, r3
 800cc78:	4917      	ldr	r1, [pc, #92]	@ (800ccd8 <HAL_DMA_Init+0x16c>)
 800cc7a:	4013      	ands	r3, r2
 800cc7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cc7e:	4b16      	ldr	r3, [pc, #88]	@ (800ccd8 <HAL_DMA_Init+0x16c>)
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6859      	ldr	r1, [r3, #4]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc8a:	f003 031c 	and.w	r3, r3, #28
 800cc8e:	fa01 f303 	lsl.w	r3, r1, r3
 800cc92:	4911      	ldr	r1, [pc, #68]	@ (800ccd8 <HAL_DMA_Init+0x16c>)
 800cc94:	4313      	orrs	r3, r2
 800cc96:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2201      	movs	r2, #1
 800cca2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800ccae:	2300      	movs	r3, #0
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3714      	adds	r7, #20
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	40020407 	.word	0x40020407
 800ccc0:	bffdfff8 	.word	0xbffdfff8
 800ccc4:	cccccccd 	.word	0xcccccccd
 800ccc8:	40020000 	.word	0x40020000
 800cccc:	bffdfbf8 	.word	0xbffdfbf8
 800ccd0:	40020400 	.word	0x40020400
 800ccd4:	400200a8 	.word	0x400200a8
 800ccd8:	400204a8 	.word	0x400204a8

0800ccdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	607a      	str	r2, [r7, #4]
 800cce8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ccea:	2300      	movs	r3, #0
 800ccec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d101      	bne.n	800ccfc <HAL_DMA_Start_IT+0x20>
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	e04b      	b.n	800cd94 <HAL_DMA_Start_IT+0xb8>
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d13a      	bne.n	800cd86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2202      	movs	r2, #2
 800cd14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f022 0201 	bic.w	r2, r2, #1
 800cd2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	68b9      	ldr	r1, [r7, #8]
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f000 f92a 	bl	800cf8e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d008      	beq.n	800cd54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f042 020e 	orr.w	r2, r2, #14
 800cd50:	601a      	str	r2, [r3, #0]
 800cd52:	e00f      	b.n	800cd74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f022 0204 	bic.w	r2, r2, #4
 800cd62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f042 020a 	orr.w	r2, r2, #10
 800cd72:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f042 0201 	orr.w	r2, r2, #1
 800cd82:	601a      	str	r2, [r3, #0]
 800cd84:	e005      	b.n	800cd92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800cd8e:	2302      	movs	r3, #2
 800cd90:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800cd92:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3718      	adds	r7, #24
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b085      	sub	sp, #20
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cda4:	2300      	movs	r3, #0
 800cda6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	2b02      	cmp	r3, #2
 800cdb2:	d008      	beq.n	800cdc6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2204      	movs	r2, #4
 800cdb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e022      	b.n	800ce0c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f022 020e 	bic.w	r2, r2, #14
 800cdd4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f022 0201 	bic.w	r2, r2, #1
 800cde4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdea:	f003 021c 	and.w	r2, r3, #28
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdf2:	2101      	movs	r1, #1
 800cdf4:	fa01 f202 	lsl.w	r2, r1, r2
 800cdf8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800ce0a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3714      	adds	r7, #20
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce34:	f003 031c 	and.w	r3, r3, #28
 800ce38:	2204      	movs	r2, #4
 800ce3a:	409a      	lsls	r2, r3
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	4013      	ands	r3, r2
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d026      	beq.n	800ce92 <HAL_DMA_IRQHandler+0x7a>
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	f003 0304 	and.w	r3, r3, #4
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d021      	beq.n	800ce92 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f003 0320 	and.w	r3, r3, #32
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d107      	bne.n	800ce6c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f022 0204 	bic.w	r2, r2, #4
 800ce6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce70:	f003 021c 	and.w	r2, r3, #28
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce78:	2104      	movs	r1, #4
 800ce7a:	fa01 f202 	lsl.w	r2, r1, r2
 800ce7e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d071      	beq.n	800cf6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800ce90:	e06c      	b.n	800cf6c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce96:	f003 031c 	and.w	r3, r3, #28
 800ce9a:	2202      	movs	r2, #2
 800ce9c:	409a      	lsls	r2, r3
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	4013      	ands	r3, r2
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d02e      	beq.n	800cf04 <HAL_DMA_IRQHandler+0xec>
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	f003 0302 	and.w	r3, r3, #2
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d029      	beq.n	800cf04 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f003 0320 	and.w	r3, r3, #32
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d10b      	bne.n	800ced6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f022 020a 	bic.w	r2, r2, #10
 800cecc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceda:	f003 021c 	and.w	r2, r3, #28
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cee2:	2102      	movs	r1, #2
 800cee4:	fa01 f202 	lsl.w	r2, r1, r2
 800cee8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d038      	beq.n	800cf6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800cf02:	e033      	b.n	800cf6c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf08:	f003 031c 	and.w	r3, r3, #28
 800cf0c:	2208      	movs	r2, #8
 800cf0e:	409a      	lsls	r2, r3
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	4013      	ands	r3, r2
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d02a      	beq.n	800cf6e <HAL_DMA_IRQHandler+0x156>
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	f003 0308 	and.w	r3, r3, #8
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d025      	beq.n	800cf6e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f022 020e 	bic.w	r2, r2, #14
 800cf30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf36:	f003 021c 	and.w	r2, r3, #28
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf3e:	2101      	movs	r1, #1
 800cf40:	fa01 f202 	lsl.w	r2, r1, r2
 800cf44:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2201      	movs	r2, #1
 800cf4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2201      	movs	r2, #1
 800cf50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d004      	beq.n	800cf6e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800cf6c:	bf00      	nop
 800cf6e:	bf00      	nop
}
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}

0800cf76 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800cf76:	b480      	push	{r7}
 800cf78:	b083      	sub	sp, #12
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	370c      	adds	r7, #12
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr

0800cf8e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cf8e:	b480      	push	{r7}
 800cf90:	b085      	sub	sp, #20
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	60f8      	str	r0, [r7, #12]
 800cf96:	60b9      	str	r1, [r7, #8]
 800cf98:	607a      	str	r2, [r7, #4]
 800cf9a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfa0:	f003 021c 	and.w	r2, r3, #28
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfa8:	2101      	movs	r1, #1
 800cfaa:	fa01 f202 	lsl.w	r2, r1, r2
 800cfae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	683a      	ldr	r2, [r7, #0]
 800cfb6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	2b10      	cmp	r3, #16
 800cfbe:	d108      	bne.n	800cfd2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	68ba      	ldr	r2, [r7, #8]
 800cfce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800cfd0:	e007      	b.n	800cfe2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	68ba      	ldr	r2, [r7, #8]
 800cfd8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	60da      	str	r2, [r3, #12]
}
 800cfe2:	bf00      	nop
 800cfe4:	3714      	adds	r7, #20
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
	...

0800cff0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b086      	sub	sp, #24
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800cffe:	2300      	movs	r3, #0
 800d000:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d002:	4b2f      	ldr	r3, [pc, #188]	@ (800d0c0 <HAL_FLASH_Program+0xd0>)
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	2b01      	cmp	r3, #1
 800d008:	d101      	bne.n	800d00e <HAL_FLASH_Program+0x1e>
 800d00a:	2302      	movs	r3, #2
 800d00c:	e053      	b.n	800d0b6 <HAL_FLASH_Program+0xc6>
 800d00e:	4b2c      	ldr	r3, [pc, #176]	@ (800d0c0 <HAL_FLASH_Program+0xd0>)
 800d010:	2201      	movs	r2, #1
 800d012:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d014:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d018:	f000 f8c6 	bl	800d1a8 <FLASH_WaitForLastOperation>
 800d01c:	4603      	mov	r3, r0
 800d01e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800d020:	7dfb      	ldrb	r3, [r7, #23]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d143      	bne.n	800d0ae <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d026:	4b26      	ldr	r3, [pc, #152]	@ (800d0c0 <HAL_FLASH_Program+0xd0>)
 800d028:	2200      	movs	r2, #0
 800d02a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d02c:	4b25      	ldr	r3, [pc, #148]	@ (800d0c4 <HAL_FLASH_Program+0xd4>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d034:	2b00      	cmp	r3, #0
 800d036:	d009      	beq.n	800d04c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d038:	4b22      	ldr	r3, [pc, #136]	@ (800d0c4 <HAL_FLASH_Program+0xd4>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a21      	ldr	r2, [pc, #132]	@ (800d0c4 <HAL_FLASH_Program+0xd4>)
 800d03e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d042:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d044:	4b1e      	ldr	r3, [pc, #120]	@ (800d0c0 <HAL_FLASH_Program+0xd0>)
 800d046:	2202      	movs	r2, #2
 800d048:	771a      	strb	r2, [r3, #28]
 800d04a:	e002      	b.n	800d052 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d04c:	4b1c      	ldr	r3, [pc, #112]	@ (800d0c0 <HAL_FLASH_Program+0xd0>)
 800d04e:	2200      	movs	r2, #0
 800d050:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d107      	bne.n	800d068 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800d058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d05c:	68b8      	ldr	r0, [r7, #8]
 800d05e:	f000 f8f9 	bl	800d254 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800d062:	2301      	movs	r3, #1
 800d064:	613b      	str	r3, [r7, #16]
 800d066:	e010      	b.n	800d08a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d002      	beq.n	800d074 <HAL_FLASH_Program+0x84>
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2b02      	cmp	r3, #2
 800d072:	d10a      	bne.n	800d08a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	4619      	mov	r1, r3
 800d078:	68b8      	ldr	r0, [r7, #8]
 800d07a:	f000 f911 	bl	800d2a0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2b02      	cmp	r3, #2
 800d082:	d102      	bne.n	800d08a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800d084:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d088:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d08a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d08e:	f000 f88b 	bl	800d1a8 <FLASH_WaitForLastOperation>
 800d092:	4603      	mov	r3, r0
 800d094:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d006      	beq.n	800d0aa <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800d09c:	4b09      	ldr	r3, [pc, #36]	@ (800d0c4 <HAL_FLASH_Program+0xd4>)
 800d09e:	695a      	ldr	r2, [r3, #20]
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	43db      	mvns	r3, r3
 800d0a4:	4907      	ldr	r1, [pc, #28]	@ (800d0c4 <HAL_FLASH_Program+0xd4>)
 800d0a6:	4013      	ands	r3, r2
 800d0a8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800d0aa:	f000 fae5 	bl	800d678 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d0ae:	4b04      	ldr	r3, [pc, #16]	@ (800d0c0 <HAL_FLASH_Program+0xd0>)
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	701a      	strb	r2, [r3, #0]

  return status;
 800d0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3718      	adds	r7, #24
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	2000017c 	.word	0x2000017c
 800d0c4:	40022000 	.word	0x40022000

0800d0c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b083      	sub	sp, #12
 800d0cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d0d2:	4b0b      	ldr	r3, [pc, #44]	@ (800d100 <HAL_FLASH_Unlock+0x38>)
 800d0d4:	695b      	ldr	r3, [r3, #20]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	da0b      	bge.n	800d0f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800d0da:	4b09      	ldr	r3, [pc, #36]	@ (800d100 <HAL_FLASH_Unlock+0x38>)
 800d0dc:	4a09      	ldr	r2, [pc, #36]	@ (800d104 <HAL_FLASH_Unlock+0x3c>)
 800d0de:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800d0e0:	4b07      	ldr	r3, [pc, #28]	@ (800d100 <HAL_FLASH_Unlock+0x38>)
 800d0e2:	4a09      	ldr	r2, [pc, #36]	@ (800d108 <HAL_FLASH_Unlock+0x40>)
 800d0e4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d0e6:	4b06      	ldr	r3, [pc, #24]	@ (800d100 <HAL_FLASH_Unlock+0x38>)
 800d0e8:	695b      	ldr	r3, [r3, #20]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	da01      	bge.n	800d0f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800d0f2:	79fb      	ldrb	r3, [r7, #7]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	370c      	adds	r7, #12
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr
 800d100:	40022000 	.word	0x40022000
 800d104:	45670123 	.word	0x45670123
 800d108:	cdef89ab 	.word	0xcdef89ab

0800d10c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800d10c:	b480      	push	{r7}
 800d10e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800d110:	4b05      	ldr	r3, [pc, #20]	@ (800d128 <HAL_FLASH_Lock+0x1c>)
 800d112:	695b      	ldr	r3, [r3, #20]
 800d114:	4a04      	ldr	r2, [pc, #16]	@ (800d128 <HAL_FLASH_Lock+0x1c>)
 800d116:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d11a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800d11c:	2300      	movs	r3, #0
}
 800d11e:	4618      	mov	r0, r3
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr
 800d128:	40022000 	.word	0x40022000

0800d12c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800d12c:	b480      	push	{r7}
 800d12e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800d130:	4b09      	ldr	r3, [pc, #36]	@ (800d158 <HAL_FLASH_OB_Unlock+0x2c>)
 800d132:	695b      	ldr	r3, [r3, #20]
 800d134:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d007      	beq.n	800d14c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800d13c:	4b06      	ldr	r3, [pc, #24]	@ (800d158 <HAL_FLASH_OB_Unlock+0x2c>)
 800d13e:	4a07      	ldr	r2, [pc, #28]	@ (800d15c <HAL_FLASH_OB_Unlock+0x30>)
 800d140:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800d142:	4b05      	ldr	r3, [pc, #20]	@ (800d158 <HAL_FLASH_OB_Unlock+0x2c>)
 800d144:	4a06      	ldr	r2, [pc, #24]	@ (800d160 <HAL_FLASH_OB_Unlock+0x34>)
 800d146:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d148:	2300      	movs	r3, #0
 800d14a:	e000      	b.n	800d14e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800d14c:	2301      	movs	r3, #1
}
 800d14e:	4618      	mov	r0, r3
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr
 800d158:	40022000 	.word	0x40022000
 800d15c:	08192a3b 	.word	0x08192a3b
 800d160:	4c5d6e7f 	.word	0x4c5d6e7f

0800d164 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800d164:	b480      	push	{r7}
 800d166:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800d168:	4b05      	ldr	r3, [pc, #20]	@ (800d180 <HAL_FLASH_OB_Lock+0x1c>)
 800d16a:	695b      	ldr	r3, [r3, #20]
 800d16c:	4a04      	ldr	r2, [pc, #16]	@ (800d180 <HAL_FLASH_OB_Lock+0x1c>)
 800d16e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d172:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr
 800d180:	40022000 	.word	0x40022000

0800d184 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800d188:	4b06      	ldr	r3, [pc, #24]	@ (800d1a4 <HAL_FLASH_OB_Launch+0x20>)
 800d18a:	695b      	ldr	r3, [r3, #20]
 800d18c:	4a05      	ldr	r2, [pc, #20]	@ (800d1a4 <HAL_FLASH_OB_Launch+0x20>)
 800d18e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d192:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 800d194:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d198:	f000 f806 	bl	800d1a8 <FLASH_WaitForLastOperation>
 800d19c:	4603      	mov	r3, r0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	40022000 	.word	0x40022000

0800d1a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800d1b0:	f7fd fdae 	bl	800ad10 <HAL_GetTick>
 800d1b4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d1b6:	e00d      	b.n	800d1d4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1be:	d009      	beq.n	800d1d4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800d1c0:	f7fd fda6 	bl	800ad10 <HAL_GetTick>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	1ad3      	subs	r3, r2, r3
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d801      	bhi.n	800d1d4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800d1d0:	2303      	movs	r3, #3
 800d1d2:	e036      	b.n	800d242 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d1d4:	4b1d      	ldr	r3, [pc, #116]	@ (800d24c <FLASH_WaitForLastOperation+0xa4>)
 800d1d6:	691b      	ldr	r3, [r3, #16]
 800d1d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d1eb      	bne.n	800d1b8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800d1e0:	4b1a      	ldr	r3, [pc, #104]	@ (800d24c <FLASH_WaitForLastOperation+0xa4>)
 800d1e2:	691a      	ldr	r2, [r3, #16]
 800d1e4:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d01d      	beq.n	800d22e <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800d1f2:	4b17      	ldr	r3, [pc, #92]	@ (800d250 <FLASH_WaitForLastOperation+0xa8>)
 800d1f4:	685a      	ldr	r2, [r3, #4]
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	4a15      	ldr	r2, [pc, #84]	@ (800d250 <FLASH_WaitForLastOperation+0xa8>)
 800d1fc:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d204:	d307      	bcc.n	800d216 <FLASH_WaitForLastOperation+0x6e>
 800d206:	4b11      	ldr	r3, [pc, #68]	@ (800d24c <FLASH_WaitForLastOperation+0xa4>)
 800d208:	699a      	ldr	r2, [r3, #24]
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d210:	490e      	ldr	r1, [pc, #56]	@ (800d24c <FLASH_WaitForLastOperation+0xa4>)
 800d212:	4313      	orrs	r3, r2
 800d214:	618b      	str	r3, [r1, #24]
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d004      	beq.n	800d22a <FLASH_WaitForLastOperation+0x82>
 800d220:	4a0a      	ldr	r2, [pc, #40]	@ (800d24c <FLASH_WaitForLastOperation+0xa4>)
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800d228:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	e009      	b.n	800d242 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800d22e:	4b07      	ldr	r3, [pc, #28]	@ (800d24c <FLASH_WaitForLastOperation+0xa4>)
 800d230:	691b      	ldr	r3, [r3, #16]
 800d232:	f003 0301 	and.w	r3, r3, #1
 800d236:	2b00      	cmp	r3, #0
 800d238:	d002      	beq.n	800d240 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d23a:	4b04      	ldr	r3, [pc, #16]	@ (800d24c <FLASH_WaitForLastOperation+0xa4>)
 800d23c:	2201      	movs	r2, #1
 800d23e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
 800d24a:	bf00      	nop
 800d24c:	40022000 	.word	0x40022000
 800d250:	2000017c 	.word	0x2000017c

0800d254 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d254:	b480      	push	{r7}
 800d256:	b085      	sub	sp, #20
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800d260:	4b0e      	ldr	r3, [pc, #56]	@ (800d29c <FLASH_Program_DoubleWord+0x48>)
 800d262:	695b      	ldr	r3, [r3, #20]
 800d264:	4a0d      	ldr	r2, [pc, #52]	@ (800d29c <FLASH_Program_DoubleWord+0x48>)
 800d266:	f043 0301 	orr.w	r3, r3, #1
 800d26a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	683a      	ldr	r2, [r7, #0]
 800d270:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800d272:	f3bf 8f6f 	isb	sy
}
 800d276:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800d278:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d27c:	f04f 0200 	mov.w	r2, #0
 800d280:	f04f 0300 	mov.w	r3, #0
 800d284:	000a      	movs	r2, r1
 800d286:	2300      	movs	r3, #0
 800d288:	68f9      	ldr	r1, [r7, #12]
 800d28a:	3104      	adds	r1, #4
 800d28c:	4613      	mov	r3, r2
 800d28e:	600b      	str	r3, [r1, #0]
}
 800d290:	bf00      	nop
 800d292:	3714      	adds	r7, #20
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr
 800d29c:	40022000 	.word	0x40022000

0800d2a0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b089      	sub	sp, #36	@ 0x24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800d2aa:	2340      	movs	r3, #64	@ 0x40
 800d2ac:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800d2b6:	4b14      	ldr	r3, [pc, #80]	@ (800d308 <FLASH_Program_Fast+0x68>)
 800d2b8:	695b      	ldr	r3, [r3, #20]
 800d2ba:	4a13      	ldr	r2, [pc, #76]	@ (800d308 <FLASH_Program_Fast+0x68>)
 800d2bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d2c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2c2:	f3ef 8310 	mrs	r3, PRIMASK
 800d2c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800d2c8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800d2ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d2cc:	b672      	cpsid	i
}
 800d2ce:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	3304      	adds	r3, #4
 800d2dc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	3304      	adds	r3, #4
 800d2e2:	617b      	str	r3, [r7, #20]
    row_index--;
 800d2e4:	7ffb      	ldrb	r3, [r7, #31]
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800d2ea:	7ffb      	ldrb	r3, [r7, #31]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d1ef      	bne.n	800d2d0 <FLASH_Program_Fast+0x30>
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	f383 8810 	msr	PRIMASK, r3
}
 800d2fa:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800d2fc:	bf00      	nop
 800d2fe:	3724      	adds	r7, #36	@ 0x24
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr
 800d308:	40022000 	.word	0x40022000

0800d30c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d316:	4b49      	ldr	r3, [pc, #292]	@ (800d43c <HAL_FLASHEx_Erase+0x130>)
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d101      	bne.n	800d322 <HAL_FLASHEx_Erase+0x16>
 800d31e:	2302      	movs	r3, #2
 800d320:	e087      	b.n	800d432 <HAL_FLASHEx_Erase+0x126>
 800d322:	4b46      	ldr	r3, [pc, #280]	@ (800d43c <HAL_FLASHEx_Erase+0x130>)
 800d324:	2201      	movs	r2, #1
 800d326:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d328:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d32c:	f7ff ff3c 	bl	800d1a8 <FLASH_WaitForLastOperation>
 800d330:	4603      	mov	r3, r0
 800d332:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800d334:	7bfb      	ldrb	r3, [r7, #15]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d177      	bne.n	800d42a <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d33a:	4b40      	ldr	r3, [pc, #256]	@ (800d43c <HAL_FLASHEx_Erase+0x130>)
 800d33c:	2200      	movs	r2, #0
 800d33e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800d340:	4b3f      	ldr	r3, [pc, #252]	@ (800d440 <HAL_FLASHEx_Erase+0x134>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d013      	beq.n	800d374 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d34c:	4b3c      	ldr	r3, [pc, #240]	@ (800d440 <HAL_FLASHEx_Erase+0x134>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d354:	2b00      	cmp	r3, #0
 800d356:	d009      	beq.n	800d36c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800d358:	4b39      	ldr	r3, [pc, #228]	@ (800d440 <HAL_FLASHEx_Erase+0x134>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a38      	ldr	r2, [pc, #224]	@ (800d440 <HAL_FLASHEx_Erase+0x134>)
 800d35e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d362:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800d364:	4b35      	ldr	r3, [pc, #212]	@ (800d43c <HAL_FLASHEx_Erase+0x130>)
 800d366:	2203      	movs	r2, #3
 800d368:	771a      	strb	r2, [r3, #28]
 800d36a:	e016      	b.n	800d39a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800d36c:	4b33      	ldr	r3, [pc, #204]	@ (800d43c <HAL_FLASHEx_Erase+0x130>)
 800d36e:	2201      	movs	r2, #1
 800d370:	771a      	strb	r2, [r3, #28]
 800d372:	e012      	b.n	800d39a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d374:	4b32      	ldr	r3, [pc, #200]	@ (800d440 <HAL_FLASHEx_Erase+0x134>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d009      	beq.n	800d394 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d380:	4b2f      	ldr	r3, [pc, #188]	@ (800d440 <HAL_FLASHEx_Erase+0x134>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a2e      	ldr	r2, [pc, #184]	@ (800d440 <HAL_FLASHEx_Erase+0x134>)
 800d386:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d38a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d38c:	4b2b      	ldr	r3, [pc, #172]	@ (800d43c <HAL_FLASHEx_Erase+0x130>)
 800d38e:	2202      	movs	r2, #2
 800d390:	771a      	strb	r2, [r3, #28]
 800d392:	e002      	b.n	800d39a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d394:	4b29      	ldr	r3, [pc, #164]	@ (800d43c <HAL_FLASHEx_Erase+0x130>)
 800d396:	2200      	movs	r2, #0
 800d398:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d113      	bne.n	800d3ca <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f000 f908 	bl	800d5bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d3ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d3b0:	f7ff fefa 	bl	800d1a8 <FLASH_WaitForLastOperation>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800d3b8:	4b21      	ldr	r3, [pc, #132]	@ (800d440 <HAL_FLASHEx_Erase+0x134>)
 800d3ba:	695b      	ldr	r3, [r3, #20]
 800d3bc:	4a20      	ldr	r2, [pc, #128]	@ (800d440 <HAL_FLASHEx_Erase+0x134>)
 800d3be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d3c2:	f023 0304 	bic.w	r3, r3, #4
 800d3c6:	6153      	str	r3, [r2, #20]
 800d3c8:	e02d      	b.n	800d426 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d3d0:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	60bb      	str	r3, [r7, #8]
 800d3d8:	e01d      	b.n	800d416 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	4619      	mov	r1, r3
 800d3e0:	68b8      	ldr	r0, [r7, #8]
 800d3e2:	f000 f913 	bl	800d60c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d3e6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d3ea:	f7ff fedd 	bl	800d1a8 <FLASH_WaitForLastOperation>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800d3f2:	4b13      	ldr	r3, [pc, #76]	@ (800d440 <HAL_FLASHEx_Erase+0x134>)
 800d3f4:	695b      	ldr	r3, [r3, #20]
 800d3f6:	4a12      	ldr	r2, [pc, #72]	@ (800d440 <HAL_FLASHEx_Erase+0x134>)
 800d3f8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800d3fc:	f023 0302 	bic.w	r3, r3, #2
 800d400:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800d402:	7bfb      	ldrb	r3, [r7, #15]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d003      	beq.n	800d410 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	68ba      	ldr	r2, [r7, #8]
 800d40c:	601a      	str	r2, [r3, #0]
          break;
 800d40e:	e00a      	b.n	800d426 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	3301      	adds	r3, #1
 800d414:	60bb      	str	r3, [r7, #8]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	689a      	ldr	r2, [r3, #8]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	68db      	ldr	r3, [r3, #12]
 800d41e:	4413      	add	r3, r2
 800d420:	68ba      	ldr	r2, [r7, #8]
 800d422:	429a      	cmp	r2, r3
 800d424:	d3d9      	bcc.n	800d3da <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800d426:	f000 f927 	bl	800d678 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d42a:	4b04      	ldr	r3, [pc, #16]	@ (800d43c <HAL_FLASHEx_Erase+0x130>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	701a      	strb	r2, [r3, #0]

  return status;
 800d430:	7bfb      	ldrb	r3, [r7, #15]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	2000017c 	.word	0x2000017c
 800d440:	40022000 	.word	0x40022000

0800d444 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d44c:	2300      	movs	r3, #0
 800d44e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d450:	4b32      	ldr	r3, [pc, #200]	@ (800d51c <HAL_FLASHEx_OBProgram+0xd8>)
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	2b01      	cmp	r3, #1
 800d456:	d101      	bne.n	800d45c <HAL_FLASHEx_OBProgram+0x18>
 800d458:	2302      	movs	r3, #2
 800d45a:	e05a      	b.n	800d512 <HAL_FLASHEx_OBProgram+0xce>
 800d45c:	4b2f      	ldr	r3, [pc, #188]	@ (800d51c <HAL_FLASHEx_OBProgram+0xd8>)
 800d45e:	2201      	movs	r2, #1
 800d460:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d462:	4b2e      	ldr	r3, [pc, #184]	@ (800d51c <HAL_FLASHEx_OBProgram+0xd8>)
 800d464:	2200      	movs	r2, #0
 800d466:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f003 0301 	and.w	r3, r3, #1
 800d470:	2b00      	cmp	r3, #0
 800d472:	d00d      	beq.n	800d490 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6858      	ldr	r0, [r3, #4]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6899      	ldr	r1, [r3, #8]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	461a      	mov	r2, r3
 800d482:	f000 f943 	bl	800d70c <FLASH_OB_WRPConfig>
 800d486:	4603      	mov	r3, r0
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d001      	beq.n	800d490 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 800d48c:	2301      	movs	r3, #1
 800d48e:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f003 0302 	and.w	r3, r3, #2
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d009      	beq.n	800d4b0 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f000 f997 	bl	800d7d4 <FLASH_OB_RDPConfig>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d001      	beq.n	800d4b0 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f003 0304 	and.w	r3, r3, #4
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00c      	beq.n	800d4d6 <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	695a      	ldr	r2, [r3, #20]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	699b      	ldr	r3, [r3, #24]
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	4610      	mov	r0, r2
 800d4c8:	f000 f9b2 	bl	800d830 <FLASH_OB_UserConfig>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d001      	beq.n	800d4d6 <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f003 0308 	and.w	r3, r3, #8
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d013      	beq.n	800d50a <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6a1a      	ldr	r2, [r3, #32]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d00d      	beq.n	800d50a <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	69d8      	ldr	r0, [r3, #28]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a19      	ldr	r1, [r3, #32]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	f000 fa90 	bl	800da20 <FLASH_OB_PCROPConfig>
 800d500:	4603      	mov	r3, r0
 800d502:	2b00      	cmp	r3, #0
 800d504:	d001      	beq.n	800d50a <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800d506:	2301      	movs	r3, #1
 800d508:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d50a:	4b04      	ldr	r3, [pc, #16]	@ (800d51c <HAL_FLASHEx_OBProgram+0xd8>)
 800d50c:	2200      	movs	r2, #0
 800d50e:	701a      	strb	r2, [r3, #0]

  return status;
 800d510:	7bfb      	ldrb	r3, [r7, #15]
}
 800d512:	4618      	mov	r0, r3
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	2000017c 	.word	0x2000017c

0800d520 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2206      	movs	r2, #6
 800d52c:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00b      	beq.n	800d54e <HAL_FLASHEx_OBGetConfig+0x2e>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d007      	beq.n	800d54e <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800d542:	2b02      	cmp	r3, #2
 800d544:	d003      	beq.n	800d54e <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	2b04      	cmp	r3, #4
 800d54c:	d10f      	bne.n	800d56e <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f043 0201 	orr.w	r2, r3, #1
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6858      	ldr	r0, [r3, #4]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f103 0108 	add.w	r1, r3, #8
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	330c      	adds	r3, #12
 800d568:	461a      	mov	r2, r3
 800d56a:	f000 fb05 	bl	800db78 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800d56e:	f000 fb4d 	bl	800dc0c <FLASH_OB_GetRDP>
 800d572:	4602      	mov	r2, r0
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800d578:	f000 fb62 	bl	800dc40 <FLASH_OB_GetUser>
 800d57c:	4602      	mov	r2, r0
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	69db      	ldr	r3, [r3, #28]
 800d586:	2b01      	cmp	r3, #1
 800d588:	d003      	beq.n	800d592 <HAL_FLASHEx_OBGetConfig+0x72>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	69db      	ldr	r3, [r3, #28]
 800d58e:	2b02      	cmp	r3, #2
 800d590:	d110      	bne.n	800d5b4 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f043 0208 	orr.w	r2, r3, #8
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f103 001c 	add.w	r0, r3, #28
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f103 0120 	add.w	r1, r3, #32
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	3324      	adds	r3, #36	@ 0x24
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	f000 fb5a 	bl	800dc68 <FLASH_OB_GetPCROP>
  }
}
 800d5b4:	bf00      	nop
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f003 0301 	and.w	r3, r3, #1
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d005      	beq.n	800d5da <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800d5ce:	4b0e      	ldr	r3, [pc, #56]	@ (800d608 <FLASH_MassErase+0x4c>)
 800d5d0:	695b      	ldr	r3, [r3, #20]
 800d5d2:	4a0d      	ldr	r2, [pc, #52]	@ (800d608 <FLASH_MassErase+0x4c>)
 800d5d4:	f043 0304 	orr.w	r3, r3, #4
 800d5d8:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f003 0302 	and.w	r3, r3, #2
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d005      	beq.n	800d5f0 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800d5e4:	4b08      	ldr	r3, [pc, #32]	@ (800d608 <FLASH_MassErase+0x4c>)
 800d5e6:	695b      	ldr	r3, [r3, #20]
 800d5e8:	4a07      	ldr	r2, [pc, #28]	@ (800d608 <FLASH_MassErase+0x4c>)
 800d5ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5ee:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d5f0:	4b05      	ldr	r3, [pc, #20]	@ (800d608 <FLASH_MassErase+0x4c>)
 800d5f2:	695b      	ldr	r3, [r3, #20]
 800d5f4:	4a04      	ldr	r2, [pc, #16]	@ (800d608 <FLASH_MassErase+0x4c>)
 800d5f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d5fa:	6153      	str	r3, [r2, #20]
}
 800d5fc:	bf00      	nop
 800d5fe:	370c      	adds	r7, #12
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr
 800d608:	40022000 	.word	0x40022000

0800d60c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b083      	sub	sp, #12
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	f003 0301 	and.w	r3, r3, #1
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d006      	beq.n	800d62e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800d620:	4b14      	ldr	r3, [pc, #80]	@ (800d674 <FLASH_PageErase+0x68>)
 800d622:	695b      	ldr	r3, [r3, #20]
 800d624:	4a13      	ldr	r2, [pc, #76]	@ (800d674 <FLASH_PageErase+0x68>)
 800d626:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d62a:	6153      	str	r3, [r2, #20]
 800d62c:	e005      	b.n	800d63a <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800d62e:	4b11      	ldr	r3, [pc, #68]	@ (800d674 <FLASH_PageErase+0x68>)
 800d630:	695b      	ldr	r3, [r3, #20]
 800d632:	4a10      	ldr	r2, [pc, #64]	@ (800d674 <FLASH_PageErase+0x68>)
 800d634:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d638:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800d63a:	4b0e      	ldr	r3, [pc, #56]	@ (800d674 <FLASH_PageErase+0x68>)
 800d63c:	695b      	ldr	r3, [r3, #20]
 800d63e:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	00db      	lsls	r3, r3, #3
 800d646:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800d64a:	490a      	ldr	r1, [pc, #40]	@ (800d674 <FLASH_PageErase+0x68>)
 800d64c:	4313      	orrs	r3, r2
 800d64e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800d650:	4b08      	ldr	r3, [pc, #32]	@ (800d674 <FLASH_PageErase+0x68>)
 800d652:	695b      	ldr	r3, [r3, #20]
 800d654:	4a07      	ldr	r2, [pc, #28]	@ (800d674 <FLASH_PageErase+0x68>)
 800d656:	f043 0302 	orr.w	r3, r3, #2
 800d65a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d65c:	4b05      	ldr	r3, [pc, #20]	@ (800d674 <FLASH_PageErase+0x68>)
 800d65e:	695b      	ldr	r3, [r3, #20]
 800d660:	4a04      	ldr	r2, [pc, #16]	@ (800d674 <FLASH_PageErase+0x68>)
 800d662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d666:	6153      	str	r3, [r2, #20]
}
 800d668:	bf00      	nop
 800d66a:	370c      	adds	r7, #12
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr
 800d674:	40022000 	.word	0x40022000

0800d678 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800d67e:	4b21      	ldr	r3, [pc, #132]	@ (800d704 <FLASH_FlushCaches+0x8c>)
 800d680:	7f1b      	ldrb	r3, [r3, #28]
 800d682:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800d684:	79fb      	ldrb	r3, [r7, #7]
 800d686:	2b01      	cmp	r3, #1
 800d688:	d002      	beq.n	800d690 <FLASH_FlushCaches+0x18>
 800d68a:	79fb      	ldrb	r3, [r7, #7]
 800d68c:	2b03      	cmp	r3, #3
 800d68e:	d117      	bne.n	800d6c0 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800d690:	4b1d      	ldr	r3, [pc, #116]	@ (800d708 <FLASH_FlushCaches+0x90>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a1c      	ldr	r2, [pc, #112]	@ (800d708 <FLASH_FlushCaches+0x90>)
 800d696:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d69a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800d69c:	4b1a      	ldr	r3, [pc, #104]	@ (800d708 <FLASH_FlushCaches+0x90>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a19      	ldr	r2, [pc, #100]	@ (800d708 <FLASH_FlushCaches+0x90>)
 800d6a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d6a6:	6013      	str	r3, [r2, #0]
 800d6a8:	4b17      	ldr	r3, [pc, #92]	@ (800d708 <FLASH_FlushCaches+0x90>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4a16      	ldr	r2, [pc, #88]	@ (800d708 <FLASH_FlushCaches+0x90>)
 800d6ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d6b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d6b4:	4b14      	ldr	r3, [pc, #80]	@ (800d708 <FLASH_FlushCaches+0x90>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a13      	ldr	r2, [pc, #76]	@ (800d708 <FLASH_FlushCaches+0x90>)
 800d6ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d6be:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800d6c0:	79fb      	ldrb	r3, [r7, #7]
 800d6c2:	2b02      	cmp	r3, #2
 800d6c4:	d002      	beq.n	800d6cc <FLASH_FlushCaches+0x54>
 800d6c6:	79fb      	ldrb	r3, [r7, #7]
 800d6c8:	2b03      	cmp	r3, #3
 800d6ca:	d111      	bne.n	800d6f0 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800d6cc:	4b0e      	ldr	r3, [pc, #56]	@ (800d708 <FLASH_FlushCaches+0x90>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a0d      	ldr	r2, [pc, #52]	@ (800d708 <FLASH_FlushCaches+0x90>)
 800d6d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d6d6:	6013      	str	r3, [r2, #0]
 800d6d8:	4b0b      	ldr	r3, [pc, #44]	@ (800d708 <FLASH_FlushCaches+0x90>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a0a      	ldr	r2, [pc, #40]	@ (800d708 <FLASH_FlushCaches+0x90>)
 800d6de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d6e2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d6e4:	4b08      	ldr	r3, [pc, #32]	@ (800d708 <FLASH_FlushCaches+0x90>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4a07      	ldr	r2, [pc, #28]	@ (800d708 <FLASH_FlushCaches+0x90>)
 800d6ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d6ee:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d6f0:	4b04      	ldr	r3, [pc, #16]	@ (800d704 <FLASH_FlushCaches+0x8c>)
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	771a      	strb	r2, [r3, #28]
}
 800d6f6:	bf00      	nop
 800d6f8:	370c      	adds	r7, #12
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr
 800d702:	bf00      	nop
 800d704:	2000017c 	.word	0x2000017c
 800d708:	40022000 	.word	0x40022000

0800d70c <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d718:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d71c:	f7ff fd44 	bl	800d1a8 <FLASH_WaitForLastOperation>
 800d720:	4603      	mov	r3, r0
 800d722:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800d724:	7dfb      	ldrb	r3, [r7, #23]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d14c      	bne.n	800d7c4 <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10b      	bne.n	800d748 <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 800d730:	4b27      	ldr	r3, [pc, #156]	@ (800d7d0 <FLASH_OB_WRPConfig+0xc4>)
 800d732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d734:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	0419      	lsls	r1, r3, #16
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	430b      	orrs	r3, r1
 800d740:	4923      	ldr	r1, [pc, #140]	@ (800d7d0 <FLASH_OB_WRPConfig+0xc4>)
 800d742:	4313      	orrs	r3, r2
 800d744:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d746:	e02b      	b.n	800d7a0 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d10b      	bne.n	800d766 <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 800d74e:	4b20      	ldr	r3, [pc, #128]	@ (800d7d0 <FLASH_OB_WRPConfig+0xc4>)
 800d750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d752:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	0419      	lsls	r1, r3, #16
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	430b      	orrs	r3, r1
 800d75e:	491c      	ldr	r1, [pc, #112]	@ (800d7d0 <FLASH_OB_WRPConfig+0xc4>)
 800d760:	4313      	orrs	r3, r2
 800d762:	630b      	str	r3, [r1, #48]	@ 0x30
 800d764:	e01c      	b.n	800d7a0 <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d10b      	bne.n	800d784 <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 800d76c:	4b18      	ldr	r3, [pc, #96]	@ (800d7d0 <FLASH_OB_WRPConfig+0xc4>)
 800d76e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d770:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	0419      	lsls	r1, r3, #16
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	430b      	orrs	r3, r1
 800d77c:	4914      	ldr	r1, [pc, #80]	@ (800d7d0 <FLASH_OB_WRPConfig+0xc4>)
 800d77e:	4313      	orrs	r3, r2
 800d780:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800d782:	e00d      	b.n	800d7a0 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2b04      	cmp	r3, #4
 800d788:	d10a      	bne.n	800d7a0 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 800d78a:	4b11      	ldr	r3, [pc, #68]	@ (800d7d0 <FLASH_OB_WRPConfig+0xc4>)
 800d78c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d78e:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	0419      	lsls	r1, r3, #16
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	430b      	orrs	r3, r1
 800d79a:	490d      	ldr	r1, [pc, #52]	@ (800d7d0 <FLASH_OB_WRPConfig+0xc4>)
 800d79c:	4313      	orrs	r3, r2
 800d79e:	650b      	str	r3, [r1, #80]	@ 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d7a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d0 <FLASH_OB_WRPConfig+0xc4>)
 800d7a2:	695b      	ldr	r3, [r3, #20]
 800d7a4:	4a0a      	ldr	r2, [pc, #40]	@ (800d7d0 <FLASH_OB_WRPConfig+0xc4>)
 800d7a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d7aa:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d7ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d7b0:	f7ff fcfa 	bl	800d1a8 <FLASH_WaitForLastOperation>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d7b8:	4b05      	ldr	r3, [pc, #20]	@ (800d7d0 <FLASH_OB_WRPConfig+0xc4>)
 800d7ba:	695b      	ldr	r3, [r3, #20]
 800d7bc:	4a04      	ldr	r2, [pc, #16]	@ (800d7d0 <FLASH_OB_WRPConfig+0xc4>)
 800d7be:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d7c2:	6153      	str	r3, [r2, #20]
  }

  return status;
 800d7c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3718      	adds	r7, #24
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	40022000 	.word	0x40022000

0800d7d4 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d7dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d7e0:	f7ff fce2 	bl	800d1a8 <FLASH_WaitForLastOperation>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d7e8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d119      	bne.n	800d822 <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 800d7ee:	4b0f      	ldr	r3, [pc, #60]	@ (800d82c <FLASH_OB_RDPConfig+0x58>)
 800d7f0:	6a1b      	ldr	r3, [r3, #32]
 800d7f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d7f6:	490d      	ldr	r1, [pc, #52]	@ (800d82c <FLASH_OB_RDPConfig+0x58>)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d7fe:	4b0b      	ldr	r3, [pc, #44]	@ (800d82c <FLASH_OB_RDPConfig+0x58>)
 800d800:	695b      	ldr	r3, [r3, #20]
 800d802:	4a0a      	ldr	r2, [pc, #40]	@ (800d82c <FLASH_OB_RDPConfig+0x58>)
 800d804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d808:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d80a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d80e:	f7ff fccb 	bl	800d1a8 <FLASH_WaitForLastOperation>
 800d812:	4603      	mov	r3, r0
 800d814:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d816:	4b05      	ldr	r3, [pc, #20]	@ (800d82c <FLASH_OB_RDPConfig+0x58>)
 800d818:	695b      	ldr	r3, [r3, #20]
 800d81a:	4a04      	ldr	r2, [pc, #16]	@ (800d82c <FLASH_OB_RDPConfig+0x58>)
 800d81c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d820:	6153      	str	r3, [r2, #20]
  }

  return status;
 800d822:	7bfb      	ldrb	r3, [r7, #15]
}
 800d824:	4618      	mov	r0, r3
 800d826:	3710      	adds	r7, #16
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	40022000 	.word	0x40022000

0800d830 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b086      	sub	sp, #24
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800d83a:	2300      	movs	r3, #0
 800d83c:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 800d83e:	2300      	movs	r3, #0
 800d840:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d842:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d846:	f7ff fcaf 	bl	800d1a8 <FLASH_WaitForLastOperation>
 800d84a:	4603      	mov	r3, r0
 800d84c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800d84e:	7bfb      	ldrb	r3, [r7, #15]
 800d850:	2b00      	cmp	r3, #0
 800d852:	f040 80de 	bne.w	800da12 <FLASH_OB_UserConfig+0x1e2>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f003 0301 	and.w	r3, r3, #1
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d009      	beq.n	800d874 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d866:	697a      	ldr	r2, [r7, #20]
 800d868:	4313      	orrs	r3, r2
 800d86a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d872:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f003 0302 	and.w	r3, r3, #2
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d009      	beq.n	800d892 <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d884:	697a      	ldr	r2, [r7, #20]
 800d886:	4313      	orrs	r3, r2
 800d888:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d890:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f003 0304 	and.w	r3, r3, #4
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d009      	beq.n	800d8b0 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d8a2:	697a      	ldr	r2, [r7, #20]
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d8ae:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d009      	beq.n	800d8ce <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d8c0:	697a      	ldr	r2, [r7, #20]
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d8cc:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f003 0308 	and.w	r3, r3, #8
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d009      	beq.n	800d8ec <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d8de:	697a      	ldr	r2, [r7, #20]
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d8ea:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f003 0310 	and.w	r3, r3, #16
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d009      	beq.n	800d90a <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d8fc:	697a      	ldr	r2, [r7, #20]
 800d8fe:	4313      	orrs	r3, r2
 800d900:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d908:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f003 0320 	and.w	r3, r3, #32
 800d910:	2b00      	cmp	r3, #0
 800d912:	d009      	beq.n	800d928 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d91a:	697a      	ldr	r2, [r7, #20]
 800d91c:	4313      	orrs	r3, r2
 800d91e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d926:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d009      	beq.n	800d946 <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d938:	697a      	ldr	r2, [r7, #20]
 800d93a:	4313      	orrs	r3, r2
 800d93c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d944:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d009      	beq.n	800d964 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d956:	697a      	ldr	r2, [r7, #20]
 800d958:	4313      	orrs	r3, r2
 800d95a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d962:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d009      	beq.n	800d982 <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d974:	697a      	ldr	r2, [r7, #20]
 800d976:	4313      	orrs	r3, r2
 800d978:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d980:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d009      	beq.n	800d9a0 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d992:	697a      	ldr	r2, [r7, #20]
 800d994:	4313      	orrs	r3, r2
 800d996:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d99e:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d009      	beq.n	800d9be <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d9b0:	697a      	ldr	r2, [r7, #20]
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d9bc:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d009      	beq.n	800d9dc <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d9ce:	697a      	ldr	r2, [r7, #20]
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d9da:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 800d9dc:	4b0f      	ldr	r3, [pc, #60]	@ (800da1c <FLASH_OB_UserConfig+0x1ec>)
 800d9de:	6a1a      	ldr	r2, [r3, #32]
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	43db      	mvns	r3, r3
 800d9e4:	401a      	ands	r2, r3
 800d9e6:	490d      	ldr	r1, [pc, #52]	@ (800da1c <FLASH_OB_UserConfig+0x1ec>)
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	4313      	orrs	r3, r2
 800d9ec:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800d9ee:	4b0b      	ldr	r3, [pc, #44]	@ (800da1c <FLASH_OB_UserConfig+0x1ec>)
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	4a0a      	ldr	r2, [pc, #40]	@ (800da1c <FLASH_OB_UserConfig+0x1ec>)
 800d9f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d9f8:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d9fa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d9fe:	f7ff fbd3 	bl	800d1a8 <FLASH_WaitForLastOperation>
 800da02:	4603      	mov	r3, r0
 800da04:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800da06:	4b05      	ldr	r3, [pc, #20]	@ (800da1c <FLASH_OB_UserConfig+0x1ec>)
 800da08:	695b      	ldr	r3, [r3, #20]
 800da0a:	4a04      	ldr	r2, [pc, #16]	@ (800da1c <FLASH_OB_UserConfig+0x1ec>)
 800da0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800da10:	6153      	str	r3, [r2, #20]
  }

  return status;
 800da12:	7bfb      	ldrb	r3, [r7, #15]
}
 800da14:	4618      	mov	r0, r3
 800da16:	3718      	adds	r7, #24
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}
 800da1c:	40022000 	.word	0x40022000

0800da20 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b088      	sub	sp, #32
 800da24:	af00      	add	r7, sp, #0
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800da2c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800da30:	f7ff fbba 	bl	800d1a8 <FLASH_WaitForLastOperation>
 800da34:	4603      	mov	r3, r0
 800da36:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 800da38:	7ffb      	ldrb	r3, [r7, #31]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f040 808c 	bne.w	800db58 <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800da40:	4b48      	ldr	r3, [pc, #288]	@ (800db64 <FLASH_OB_PCROPConfig+0x144>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d115      	bne.n	800da78 <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 800da4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800da50:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800da52:	4b45      	ldr	r3, [pc, #276]	@ (800db68 <FLASH_OB_PCROPConfig+0x148>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	b29b      	uxth	r3, r3
 800da58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d008      	beq.n	800da72 <FLASH_OB_PCROPConfig+0x52>
 800da60:	4b41      	ldr	r3, [pc, #260]	@ (800db68 <FLASH_OB_PCROPConfig+0x148>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	029b      	lsls	r3, r3, #10
 800da66:	085a      	lsrs	r2, r3, #1
 800da68:	4b40      	ldr	r3, [pc, #256]	@ (800db6c <FLASH_OB_PCROPConfig+0x14c>)
 800da6a:	4013      	ands	r3, r2
 800da6c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800da70:	e000      	b.n	800da74 <FLASH_OB_PCROPConfig+0x54>
 800da72:	4b3f      	ldr	r3, [pc, #252]	@ (800db70 <FLASH_OB_PCROPConfig+0x150>)
 800da74:	617b      	str	r3, [r7, #20]
 800da76:	e014      	b.n	800daa2 <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800da78:	4b3b      	ldr	r3, [pc, #236]	@ (800db68 <FLASH_OB_PCROPConfig+0x148>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da82:	4293      	cmp	r3, r2
 800da84:	d008      	beq.n	800da98 <FLASH_OB_PCROPConfig+0x78>
 800da86:	4b38      	ldr	r3, [pc, #224]	@ (800db68 <FLASH_OB_PCROPConfig+0x148>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	029b      	lsls	r3, r3, #10
 800da8c:	085a      	lsrs	r2, r3, #1
 800da8e:	4b37      	ldr	r3, [pc, #220]	@ (800db6c <FLASH_OB_PCROPConfig+0x14c>)
 800da90:	4013      	ands	r3, r2
 800da92:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800da96:	e000      	b.n	800da9a <FLASH_OB_PCROPConfig+0x7a>
 800da98:	4b35      	ldr	r3, [pc, #212]	@ (800db70 <FLASH_OB_PCROPConfig+0x150>)
 800da9a:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 800da9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800daa0:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f003 0303 	and.w	r3, r3, #3
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d11a      	bne.n	800dae2 <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 800daac:	68ba      	ldr	r2, [r7, #8]
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	08db      	lsrs	r3, r3, #3
 800dab4:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 800dab6:	4b2f      	ldr	r3, [pc, #188]	@ (800db74 <FLASH_OB_PCROPConfig+0x154>)
 800dab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daba:	0c1b      	lsrs	r3, r3, #16
 800dabc:	041b      	lsls	r3, r3, #16
 800dabe:	492d      	ldr	r1, [pc, #180]	@ (800db74 <FLASH_OB_PCROPConfig+0x154>)
 800dac0:	693a      	ldr	r2, [r7, #16]
 800dac2:	4313      	orrs	r3, r2
 800dac4:	624b      	str	r3, [r1, #36]	@ 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	08db      	lsrs	r3, r3, #3
 800dace:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 800dad0:	4b28      	ldr	r3, [pc, #160]	@ (800db74 <FLASH_OB_PCROPConfig+0x154>)
 800dad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dad4:	0c1b      	lsrs	r3, r3, #16
 800dad6:	041b      	lsls	r3, r3, #16
 800dad8:	4926      	ldr	r1, [pc, #152]	@ (800db74 <FLASH_OB_PCROPConfig+0x154>)
 800dada:	693a      	ldr	r2, [r7, #16]
 800dadc:	4313      	orrs	r3, r2
 800dade:	628b      	str	r3, [r1, #40]	@ 0x28
 800dae0:	e01e      	b.n	800db20 <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f003 0303 	and.w	r3, r3, #3
 800dae8:	2b02      	cmp	r3, #2
 800daea:	d119      	bne.n	800db20 <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 800daec:	68ba      	ldr	r2, [r7, #8]
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	1ad3      	subs	r3, r2, r3
 800daf2:	08db      	lsrs	r3, r3, #3
 800daf4:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 800daf6:	4b1f      	ldr	r3, [pc, #124]	@ (800db74 <FLASH_OB_PCROPConfig+0x154>)
 800daf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dafa:	0c1b      	lsrs	r3, r3, #16
 800dafc:	041b      	lsls	r3, r3, #16
 800dafe:	491d      	ldr	r1, [pc, #116]	@ (800db74 <FLASH_OB_PCROPConfig+0x154>)
 800db00:	693a      	ldr	r2, [r7, #16]
 800db02:	4313      	orrs	r3, r2
 800db04:	644b      	str	r3, [r1, #68]	@ 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	1ad3      	subs	r3, r2, r3
 800db0c:	08db      	lsrs	r3, r3, #3
 800db0e:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 800db10:	4b18      	ldr	r3, [pc, #96]	@ (800db74 <FLASH_OB_PCROPConfig+0x154>)
 800db12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db14:	0c1b      	lsrs	r3, r3, #16
 800db16:	041b      	lsls	r3, r3, #16
 800db18:	4916      	ldr	r1, [pc, #88]	@ (800db74 <FLASH_OB_PCROPConfig+0x154>)
 800db1a:	693a      	ldr	r2, [r7, #16]
 800db1c:	4313      	orrs	r3, r2
 800db1e:	648b      	str	r3, [r1, #72]	@ 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 800db20:	4b14      	ldr	r3, [pc, #80]	@ (800db74 <FLASH_OB_PCROPConfig+0x154>)
 800db22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800db2e:	4911      	ldr	r1, [pc, #68]	@ (800db74 <FLASH_OB_PCROPConfig+0x154>)
 800db30:	4313      	orrs	r3, r2
 800db32:	628b      	str	r3, [r1, #40]	@ 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800db34:	4b0f      	ldr	r3, [pc, #60]	@ (800db74 <FLASH_OB_PCROPConfig+0x154>)
 800db36:	695b      	ldr	r3, [r3, #20]
 800db38:	4a0e      	ldr	r2, [pc, #56]	@ (800db74 <FLASH_OB_PCROPConfig+0x154>)
 800db3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db3e:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800db40:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800db44:	f7ff fb30 	bl	800d1a8 <FLASH_WaitForLastOperation>
 800db48:	4603      	mov	r3, r0
 800db4a:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800db4c:	4b09      	ldr	r3, [pc, #36]	@ (800db74 <FLASH_OB_PCROPConfig+0x154>)
 800db4e:	695b      	ldr	r3, [r3, #20]
 800db50:	4a08      	ldr	r2, [pc, #32]	@ (800db74 <FLASH_OB_PCROPConfig+0x154>)
 800db52:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800db56:	6153      	str	r3, [r2, #20]
  }

  return status;
 800db58:	7ffb      	ldrb	r3, [r7, #31]
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3720      	adds	r7, #32
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	40010000 	.word	0x40010000
 800db68:	1fff75e0 	.word	0x1fff75e0
 800db6c:	01fffe00 	.word	0x01fffe00
 800db70:	08080000 	.word	0x08080000
 800db74:	40022000 	.word	0x40022000

0800db78 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 800db78:	b480      	push	{r7}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d10b      	bne.n	800dba2 <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800db8a:	4b1f      	ldr	r3, [pc, #124]	@ (800dc08 <FLASH_OB_GetWRP+0x90>)
 800db8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 800db94:	4b1c      	ldr	r3, [pc, #112]	@ (800dc08 <FLASH_OB_GetWRP+0x90>)
 800db96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db98:	0c1b      	lsrs	r3, r3, #16
 800db9a:	b2da      	uxtb	r2, r3
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 800dba0:	e02b      	b.n	800dbfa <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d10b      	bne.n	800dbc0 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800dba8:	4b17      	ldr	r3, [pc, #92]	@ (800dc08 <FLASH_OB_GetWRP+0x90>)
 800dbaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbac:	b2da      	uxtb	r2, r3
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 800dbb2:	4b15      	ldr	r3, [pc, #84]	@ (800dc08 <FLASH_OB_GetWRP+0x90>)
 800dbb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbb6:	0c1b      	lsrs	r3, r3, #16
 800dbb8:	b2da      	uxtb	r2, r3
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	601a      	str	r2, [r3, #0]
}
 800dbbe:	e01c      	b.n	800dbfa <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2b02      	cmp	r3, #2
 800dbc4:	d10b      	bne.n	800dbde <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 800dbc6:	4b10      	ldr	r3, [pc, #64]	@ (800dc08 <FLASH_OB_GetWRP+0x90>)
 800dbc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbca:	b2da      	uxtb	r2, r3
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 800dbd0:	4b0d      	ldr	r3, [pc, #52]	@ (800dc08 <FLASH_OB_GetWRP+0x90>)
 800dbd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbd4:	0c1b      	lsrs	r3, r3, #16
 800dbd6:	b2da      	uxtb	r2, r3
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	601a      	str	r2, [r3, #0]
}
 800dbdc:	e00d      	b.n	800dbfa <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2b04      	cmp	r3, #4
 800dbe2:	d10a      	bne.n	800dbfa <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 800dbe4:	4b08      	ldr	r3, [pc, #32]	@ (800dc08 <FLASH_OB_GetWRP+0x90>)
 800dbe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbe8:	b2da      	uxtb	r2, r3
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 800dbee:	4b06      	ldr	r3, [pc, #24]	@ (800dc08 <FLASH_OB_GetWRP+0x90>)
 800dbf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbf2:	0c1b      	lsrs	r3, r3, #16
 800dbf4:	b2da      	uxtb	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	601a      	str	r2, [r3, #0]
}
 800dbfa:	bf00      	nop
 800dbfc:	3714      	adds	r7, #20
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop
 800dc08:	40022000 	.word	0x40022000

0800dc0c <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800dc12:	4b0a      	ldr	r3, [pc, #40]	@ (800dc3c <FLASH_OB_GetRDP+0x30>)
 800dc14:	6a1b      	ldr	r3, [r3, #32]
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2baa      	cmp	r3, #170	@ 0xaa
 800dc1e:	d004      	beq.n	800dc2a <FLASH_OB_GetRDP+0x1e>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2bcc      	cmp	r3, #204	@ 0xcc
 800dc24:	d001      	beq.n	800dc2a <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800dc26:	23bb      	movs	r3, #187	@ 0xbb
 800dc28:	e002      	b.n	800dc30 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 800dc2a:	4b04      	ldr	r3, [pc, #16]	@ (800dc3c <FLASH_OB_GetRDP+0x30>)
 800dc2c:	6a1b      	ldr	r3, [r3, #32]
 800dc2e:	b2db      	uxtb	r3, r3
  }
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr
 800dc3c:	40022000 	.word	0x40022000

0800dc40 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800dc46:	4b07      	ldr	r3, [pc, #28]	@ (800dc64 <FLASH_OB_GetUser+0x24>)
 800dc48:	6a1b      	ldr	r3, [r3, #32]
 800dc4a:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dc52:	607b      	str	r3, [r7, #4]

  return user_config;
 800dc54:	687b      	ldr	r3, [r7, #4]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	370c      	adds	r7, #12
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr
 800dc62:	bf00      	nop
 800dc64:	40022000 	.word	0x40022000

0800dc68 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b089      	sub	sp, #36	@ 0x24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800dc74:	4b3b      	ldr	r3, [pc, #236]	@ (800dd64 <FLASH_OB_GetPCROP+0xfc>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d115      	bne.n	800dcac <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 800dc80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dc84:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800dc86:	4b38      	ldr	r3, [pc, #224]	@ (800dd68 <FLASH_OB_GetPCROP+0x100>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d008      	beq.n	800dca6 <FLASH_OB_GetPCROP+0x3e>
 800dc94:	4b34      	ldr	r3, [pc, #208]	@ (800dd68 <FLASH_OB_GetPCROP+0x100>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	029b      	lsls	r3, r3, #10
 800dc9a:	085a      	lsrs	r2, r3, #1
 800dc9c:	4b33      	ldr	r3, [pc, #204]	@ (800dd6c <FLASH_OB_GetPCROP+0x104>)
 800dc9e:	4013      	ands	r3, r2
 800dca0:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800dca4:	e000      	b.n	800dca8 <FLASH_OB_GetPCROP+0x40>
 800dca6:	4b32      	ldr	r3, [pc, #200]	@ (800dd70 <FLASH_OB_GetPCROP+0x108>)
 800dca8:	61bb      	str	r3, [r7, #24]
 800dcaa:	e014      	b.n	800dcd6 <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800dcac:	4b2e      	ldr	r3, [pc, #184]	@ (800dd68 <FLASH_OB_GetPCROP+0x100>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d008      	beq.n	800dccc <FLASH_OB_GetPCROP+0x64>
 800dcba:	4b2b      	ldr	r3, [pc, #172]	@ (800dd68 <FLASH_OB_GetPCROP+0x100>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	029b      	lsls	r3, r3, #10
 800dcc0:	085a      	lsrs	r2, r3, #1
 800dcc2:	4b2a      	ldr	r3, [pc, #168]	@ (800dd6c <FLASH_OB_GetPCROP+0x104>)
 800dcc4:	4013      	ands	r3, r2
 800dcc6:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800dcca:	e000      	b.n	800dcce <FLASH_OB_GetPCROP+0x66>
 800dccc:	4b28      	ldr	r3, [pc, #160]	@ (800dd70 <FLASH_OB_GetPCROP+0x108>)
 800dcce:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 800dcd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dcd4:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f003 0303 	and.w	r3, r3, #3
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d115      	bne.n	800dd0e <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800dce2:	4b24      	ldr	r3, [pc, #144]	@ (800dd74 <FLASH_OB_GetPCROP+0x10c>)
 800dce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	00da      	lsls	r2, r3, #3
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	441a      	add	r2, r3
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 800dcf6:	4b1f      	ldr	r3, [pc, #124]	@ (800dd74 <FLASH_OB_GetPCROP+0x10c>)
 800dcf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	00da      	lsls	r2, r3, #3
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	4413      	add	r3, r2
 800dd06:	1dda      	adds	r2, r3, #7
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	601a      	str	r2, [r3, #0]
 800dd0c:	e01a      	b.n	800dd44 <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f003 0303 	and.w	r3, r3, #3
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	d114      	bne.n	800dd44 <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 800dd1a:	4b16      	ldr	r3, [pc, #88]	@ (800dd74 <FLASH_OB_GetPCROP+0x10c>)
 800dd1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	00da      	lsls	r2, r3, #3
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	441a      	add	r2, r3
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 800dd2e:	4b11      	ldr	r3, [pc, #68]	@ (800dd74 <FLASH_OB_GetPCROP+0x10c>)
 800dd30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	00da      	lsls	r2, r3, #3
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	1dda      	adds	r2, r3, #7
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 800dd44:	4b0b      	ldr	r3, [pc, #44]	@ (800dd74 <FLASH_OB_GetPCROP+0x10c>)
 800dd46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd48:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	431a      	orrs	r2, r3
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	601a      	str	r2, [r3, #0]
}
 800dd56:	bf00      	nop
 800dd58:	3724      	adds	r7, #36	@ 0x24
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	40010000 	.word	0x40010000
 800dd68:	1fff75e0 	.word	0x1fff75e0
 800dd6c:	01fffe00 	.word	0x01fffe00
 800dd70:	08080000 	.word	0x08080000
 800dd74:	40022000 	.word	0x40022000

0800dd78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b087      	sub	sp, #28
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800dd82:	2300      	movs	r3, #0
 800dd84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800dd86:	e17f      	b.n	800e088 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	2101      	movs	r1, #1
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	fa01 f303 	lsl.w	r3, r1, r3
 800dd94:	4013      	ands	r3, r2
 800dd96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f000 8171 	beq.w	800e082 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	f003 0303 	and.w	r3, r3, #3
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d005      	beq.n	800ddb8 <HAL_GPIO_Init+0x40>
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	f003 0303 	and.w	r3, r3, #3
 800ddb4:	2b02      	cmp	r3, #2
 800ddb6:	d130      	bne.n	800de1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	005b      	lsls	r3, r3, #1
 800ddc2:	2203      	movs	r2, #3
 800ddc4:	fa02 f303 	lsl.w	r3, r2, r3
 800ddc8:	43db      	mvns	r3, r3
 800ddca:	693a      	ldr	r2, [r7, #16]
 800ddcc:	4013      	ands	r3, r2
 800ddce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	68da      	ldr	r2, [r3, #12]
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	005b      	lsls	r3, r3, #1
 800ddd8:	fa02 f303 	lsl.w	r3, r2, r3
 800dddc:	693a      	ldr	r2, [r7, #16]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	693a      	ldr	r2, [r7, #16]
 800dde6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ddee:	2201      	movs	r2, #1
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	fa02 f303 	lsl.w	r3, r2, r3
 800ddf6:	43db      	mvns	r3, r3
 800ddf8:	693a      	ldr	r2, [r7, #16]
 800ddfa:	4013      	ands	r3, r2
 800ddfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	091b      	lsrs	r3, r3, #4
 800de04:	f003 0201 	and.w	r2, r3, #1
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	fa02 f303 	lsl.w	r3, r2, r3
 800de0e:	693a      	ldr	r2, [r7, #16]
 800de10:	4313      	orrs	r3, r2
 800de12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	693a      	ldr	r2, [r7, #16]
 800de18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	f003 0303 	and.w	r3, r3, #3
 800de22:	2b03      	cmp	r3, #3
 800de24:	d118      	bne.n	800de58 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800de2c:	2201      	movs	r2, #1
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	fa02 f303 	lsl.w	r3, r2, r3
 800de34:	43db      	mvns	r3, r3
 800de36:	693a      	ldr	r2, [r7, #16]
 800de38:	4013      	ands	r3, r2
 800de3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	08db      	lsrs	r3, r3, #3
 800de42:	f003 0201 	and.w	r2, r3, #1
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	fa02 f303 	lsl.w	r3, r2, r3
 800de4c:	693a      	ldr	r2, [r7, #16]
 800de4e:	4313      	orrs	r3, r2
 800de50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	693a      	ldr	r2, [r7, #16]
 800de56:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	f003 0303 	and.w	r3, r3, #3
 800de60:	2b03      	cmp	r3, #3
 800de62:	d017      	beq.n	800de94 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	68db      	ldr	r3, [r3, #12]
 800de68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	005b      	lsls	r3, r3, #1
 800de6e:	2203      	movs	r2, #3
 800de70:	fa02 f303 	lsl.w	r3, r2, r3
 800de74:	43db      	mvns	r3, r3
 800de76:	693a      	ldr	r2, [r7, #16]
 800de78:	4013      	ands	r3, r2
 800de7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	689a      	ldr	r2, [r3, #8]
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	005b      	lsls	r3, r3, #1
 800de84:	fa02 f303 	lsl.w	r3, r2, r3
 800de88:	693a      	ldr	r2, [r7, #16]
 800de8a:	4313      	orrs	r3, r2
 800de8c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	693a      	ldr	r2, [r7, #16]
 800de92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	f003 0303 	and.w	r3, r3, #3
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d123      	bne.n	800dee8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	08da      	lsrs	r2, r3, #3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	3208      	adds	r2, #8
 800dea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	f003 0307 	and.w	r3, r3, #7
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	220f      	movs	r2, #15
 800deb8:	fa02 f303 	lsl.w	r3, r2, r3
 800debc:	43db      	mvns	r3, r3
 800debe:	693a      	ldr	r2, [r7, #16]
 800dec0:	4013      	ands	r3, r2
 800dec2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	691a      	ldr	r2, [r3, #16]
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	f003 0307 	and.w	r3, r3, #7
 800dece:	009b      	lsls	r3, r3, #2
 800ded0:	fa02 f303 	lsl.w	r3, r2, r3
 800ded4:	693a      	ldr	r2, [r7, #16]
 800ded6:	4313      	orrs	r3, r2
 800ded8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	08da      	lsrs	r2, r3, #3
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	3208      	adds	r2, #8
 800dee2:	6939      	ldr	r1, [r7, #16]
 800dee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	005b      	lsls	r3, r3, #1
 800def2:	2203      	movs	r2, #3
 800def4:	fa02 f303 	lsl.w	r3, r2, r3
 800def8:	43db      	mvns	r3, r3
 800defa:	693a      	ldr	r2, [r7, #16]
 800defc:	4013      	ands	r3, r2
 800defe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	f003 0203 	and.w	r2, r3, #3
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	005b      	lsls	r3, r3, #1
 800df0c:	fa02 f303 	lsl.w	r3, r2, r3
 800df10:	693a      	ldr	r2, [r7, #16]
 800df12:	4313      	orrs	r3, r2
 800df14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	693a      	ldr	r2, [r7, #16]
 800df1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800df24:	2b00      	cmp	r3, #0
 800df26:	f000 80ac 	beq.w	800e082 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800df2a:	4b5f      	ldr	r3, [pc, #380]	@ (800e0a8 <HAL_GPIO_Init+0x330>)
 800df2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df2e:	4a5e      	ldr	r2, [pc, #376]	@ (800e0a8 <HAL_GPIO_Init+0x330>)
 800df30:	f043 0301 	orr.w	r3, r3, #1
 800df34:	6613      	str	r3, [r2, #96]	@ 0x60
 800df36:	4b5c      	ldr	r3, [pc, #368]	@ (800e0a8 <HAL_GPIO_Init+0x330>)
 800df38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df3a:	f003 0301 	and.w	r3, r3, #1
 800df3e:	60bb      	str	r3, [r7, #8]
 800df40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800df42:	4a5a      	ldr	r2, [pc, #360]	@ (800e0ac <HAL_GPIO_Init+0x334>)
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	089b      	lsrs	r3, r3, #2
 800df48:	3302      	adds	r3, #2
 800df4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	f003 0303 	and.w	r3, r3, #3
 800df56:	009b      	lsls	r3, r3, #2
 800df58:	220f      	movs	r2, #15
 800df5a:	fa02 f303 	lsl.w	r3, r2, r3
 800df5e:	43db      	mvns	r3, r3
 800df60:	693a      	ldr	r2, [r7, #16]
 800df62:	4013      	ands	r3, r2
 800df64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800df6c:	d025      	beq.n	800dfba <HAL_GPIO_Init+0x242>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	4a4f      	ldr	r2, [pc, #316]	@ (800e0b0 <HAL_GPIO_Init+0x338>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d01f      	beq.n	800dfb6 <HAL_GPIO_Init+0x23e>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	4a4e      	ldr	r2, [pc, #312]	@ (800e0b4 <HAL_GPIO_Init+0x33c>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d019      	beq.n	800dfb2 <HAL_GPIO_Init+0x23a>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	4a4d      	ldr	r2, [pc, #308]	@ (800e0b8 <HAL_GPIO_Init+0x340>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d013      	beq.n	800dfae <HAL_GPIO_Init+0x236>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	4a4c      	ldr	r2, [pc, #304]	@ (800e0bc <HAL_GPIO_Init+0x344>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d00d      	beq.n	800dfaa <HAL_GPIO_Init+0x232>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	4a4b      	ldr	r2, [pc, #300]	@ (800e0c0 <HAL_GPIO_Init+0x348>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d007      	beq.n	800dfa6 <HAL_GPIO_Init+0x22e>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	4a4a      	ldr	r2, [pc, #296]	@ (800e0c4 <HAL_GPIO_Init+0x34c>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d101      	bne.n	800dfa2 <HAL_GPIO_Init+0x22a>
 800df9e:	2306      	movs	r3, #6
 800dfa0:	e00c      	b.n	800dfbc <HAL_GPIO_Init+0x244>
 800dfa2:	2307      	movs	r3, #7
 800dfa4:	e00a      	b.n	800dfbc <HAL_GPIO_Init+0x244>
 800dfa6:	2305      	movs	r3, #5
 800dfa8:	e008      	b.n	800dfbc <HAL_GPIO_Init+0x244>
 800dfaa:	2304      	movs	r3, #4
 800dfac:	e006      	b.n	800dfbc <HAL_GPIO_Init+0x244>
 800dfae:	2303      	movs	r3, #3
 800dfb0:	e004      	b.n	800dfbc <HAL_GPIO_Init+0x244>
 800dfb2:	2302      	movs	r3, #2
 800dfb4:	e002      	b.n	800dfbc <HAL_GPIO_Init+0x244>
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	e000      	b.n	800dfbc <HAL_GPIO_Init+0x244>
 800dfba:	2300      	movs	r3, #0
 800dfbc:	697a      	ldr	r2, [r7, #20]
 800dfbe:	f002 0203 	and.w	r2, r2, #3
 800dfc2:	0092      	lsls	r2, r2, #2
 800dfc4:	4093      	lsls	r3, r2
 800dfc6:	693a      	ldr	r2, [r7, #16]
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800dfcc:	4937      	ldr	r1, [pc, #220]	@ (800e0ac <HAL_GPIO_Init+0x334>)
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	089b      	lsrs	r3, r3, #2
 800dfd2:	3302      	adds	r3, #2
 800dfd4:	693a      	ldr	r2, [r7, #16]
 800dfd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800dfda:	4b3b      	ldr	r3, [pc, #236]	@ (800e0c8 <HAL_GPIO_Init+0x350>)
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	43db      	mvns	r3, r3
 800dfe4:	693a      	ldr	r2, [r7, #16]
 800dfe6:	4013      	ands	r3, r2
 800dfe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d003      	beq.n	800dffe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800dff6:	693a      	ldr	r2, [r7, #16]
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	4313      	orrs	r3, r2
 800dffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800dffe:	4a32      	ldr	r2, [pc, #200]	@ (800e0c8 <HAL_GPIO_Init+0x350>)
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800e004:	4b30      	ldr	r3, [pc, #192]	@ (800e0c8 <HAL_GPIO_Init+0x350>)
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	43db      	mvns	r3, r3
 800e00e:	693a      	ldr	r2, [r7, #16]
 800e010:	4013      	ands	r3, r2
 800e012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d003      	beq.n	800e028 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800e020:	693a      	ldr	r2, [r7, #16]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	4313      	orrs	r3, r2
 800e026:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e028:	4a27      	ldr	r2, [pc, #156]	@ (800e0c8 <HAL_GPIO_Init+0x350>)
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800e02e:	4b26      	ldr	r3, [pc, #152]	@ (800e0c8 <HAL_GPIO_Init+0x350>)
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	43db      	mvns	r3, r3
 800e038:	693a      	ldr	r2, [r7, #16]
 800e03a:	4013      	ands	r3, r2
 800e03c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e046:	2b00      	cmp	r3, #0
 800e048:	d003      	beq.n	800e052 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800e04a:	693a      	ldr	r2, [r7, #16]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	4313      	orrs	r3, r2
 800e050:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800e052:	4a1d      	ldr	r2, [pc, #116]	@ (800e0c8 <HAL_GPIO_Init+0x350>)
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800e058:	4b1b      	ldr	r3, [pc, #108]	@ (800e0c8 <HAL_GPIO_Init+0x350>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	43db      	mvns	r3, r3
 800e062:	693a      	ldr	r2, [r7, #16]
 800e064:	4013      	ands	r3, r2
 800e066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e070:	2b00      	cmp	r3, #0
 800e072:	d003      	beq.n	800e07c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800e074:	693a      	ldr	r2, [r7, #16]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	4313      	orrs	r3, r2
 800e07a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800e07c:	4a12      	ldr	r2, [pc, #72]	@ (800e0c8 <HAL_GPIO_Init+0x350>)
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	3301      	adds	r3, #1
 800e086:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	fa22 f303 	lsr.w	r3, r2, r3
 800e092:	2b00      	cmp	r3, #0
 800e094:	f47f ae78 	bne.w	800dd88 <HAL_GPIO_Init+0x10>
  }
}
 800e098:	bf00      	nop
 800e09a:	bf00      	nop
 800e09c:	371c      	adds	r7, #28
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop
 800e0a8:	40021000 	.word	0x40021000
 800e0ac:	40010000 	.word	0x40010000
 800e0b0:	48000400 	.word	0x48000400
 800e0b4:	48000800 	.word	0x48000800
 800e0b8:	48000c00 	.word	0x48000c00
 800e0bc:	48001000 	.word	0x48001000
 800e0c0:	48001400 	.word	0x48001400
 800e0c4:	48001800 	.word	0x48001800
 800e0c8:	40010400 	.word	0x40010400

0800e0cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	807b      	strh	r3, [r7, #2]
 800e0d8:	4613      	mov	r3, r2
 800e0da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e0dc:	787b      	ldrb	r3, [r7, #1]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d003      	beq.n	800e0ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e0e2:	887a      	ldrh	r2, [r7, #2]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e0e8:	e002      	b.n	800e0f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e0ea:	887a      	ldrh	r2, [r7, #2]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e0f0:	bf00      	nop
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d101      	bne.n	800e10e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e10a:	2301      	movs	r3, #1
 800e10c:	e08d      	b.n	800e22a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e114:	b2db      	uxtb	r3, r3
 800e116:	2b00      	cmp	r3, #0
 800e118:	d106      	bne.n	800e128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f7f9 f8d0 	bl	80072c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2224      	movs	r2, #36	@ 0x24
 800e12c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f022 0201 	bic.w	r2, r2, #1
 800e13e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	685a      	ldr	r2, [r3, #4]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e14c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	689a      	ldr	r2, [r3, #8]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e15c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	2b01      	cmp	r3, #1
 800e164:	d107      	bne.n	800e176 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	689a      	ldr	r2, [r3, #8]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e172:	609a      	str	r2, [r3, #8]
 800e174:	e006      	b.n	800e184 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	689a      	ldr	r2, [r3, #8]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e182:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	68db      	ldr	r3, [r3, #12]
 800e188:	2b02      	cmp	r3, #2
 800e18a:	d108      	bne.n	800e19e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	685a      	ldr	r2, [r3, #4]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e19a:	605a      	str	r2, [r3, #4]
 800e19c:	e007      	b.n	800e1ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	685a      	ldr	r2, [r3, #4]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e1ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	6812      	ldr	r2, [r2, #0]
 800e1b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e1bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	68da      	ldr	r2, [r3, #12]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e1d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	691a      	ldr	r2, [r3, #16]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	695b      	ldr	r3, [r3, #20]
 800e1da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	699b      	ldr	r3, [r3, #24]
 800e1e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	430a      	orrs	r2, r1
 800e1ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	69d9      	ldr	r1, [r3, #28]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6a1a      	ldr	r2, [r3, #32]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	430a      	orrs	r2, r1
 800e1fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f042 0201 	orr.w	r2, r2, #1
 800e20a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2200      	movs	r2, #0
 800e210:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2220      	movs	r2, #32
 800e216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2200      	movs	r2, #0
 800e21e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3708      	adds	r7, #8
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
	...

0800e234 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b088      	sub	sp, #32
 800e238:	af02      	add	r7, sp, #8
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	607a      	str	r2, [r7, #4]
 800e23e:	461a      	mov	r2, r3
 800e240:	460b      	mov	r3, r1
 800e242:	817b      	strh	r3, [r7, #10]
 800e244:	4613      	mov	r3, r2
 800e246:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	2b20      	cmp	r3, #32
 800e252:	f040 80fd 	bne.w	800e450 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d101      	bne.n	800e264 <HAL_I2C_Master_Transmit+0x30>
 800e260:	2302      	movs	r3, #2
 800e262:	e0f6      	b.n	800e452 <HAL_I2C_Master_Transmit+0x21e>
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2201      	movs	r2, #1
 800e268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e26c:	f7fc fd50 	bl	800ad10 <HAL_GetTick>
 800e270:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	9300      	str	r3, [sp, #0]
 800e276:	2319      	movs	r3, #25
 800e278:	2201      	movs	r2, #1
 800e27a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e27e:	68f8      	ldr	r0, [r7, #12]
 800e280:	f000 fa0a 	bl	800e698 <I2C_WaitOnFlagUntilTimeout>
 800e284:	4603      	mov	r3, r0
 800e286:	2b00      	cmp	r3, #0
 800e288:	d001      	beq.n	800e28e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800e28a:	2301      	movs	r3, #1
 800e28c:	e0e1      	b.n	800e452 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2221      	movs	r2, #33	@ 0x21
 800e292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	2210      	movs	r2, #16
 800e29a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	687a      	ldr	r2, [r7, #4]
 800e2a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	893a      	ldrh	r2, [r7, #8]
 800e2ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	2bff      	cmp	r3, #255	@ 0xff
 800e2be:	d906      	bls.n	800e2ce <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	22ff      	movs	r2, #255	@ 0xff
 800e2c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800e2c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e2ca:	617b      	str	r3, [r7, #20]
 800e2cc:	e007      	b.n	800e2de <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2d2:	b29a      	uxth	r2, r3
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800e2d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e2dc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d024      	beq.n	800e330 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2ea:	781a      	ldrb	r2, [r3, #0]
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2f6:	1c5a      	adds	r2, r3, #1
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e300:	b29b      	uxth	r3, r3
 800e302:	3b01      	subs	r3, #1
 800e304:	b29a      	uxth	r2, r3
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e30e:	3b01      	subs	r3, #1
 800e310:	b29a      	uxth	r2, r3
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	3301      	adds	r3, #1
 800e31e:	b2da      	uxtb	r2, r3
 800e320:	8979      	ldrh	r1, [r7, #10]
 800e322:	4b4e      	ldr	r3, [pc, #312]	@ (800e45c <HAL_I2C_Master_Transmit+0x228>)
 800e324:	9300      	str	r3, [sp, #0]
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f000 fc05 	bl	800eb38 <I2C_TransferConfig>
 800e32e:	e066      	b.n	800e3fe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e334:	b2da      	uxtb	r2, r3
 800e336:	8979      	ldrh	r1, [r7, #10]
 800e338:	4b48      	ldr	r3, [pc, #288]	@ (800e45c <HAL_I2C_Master_Transmit+0x228>)
 800e33a:	9300      	str	r3, [sp, #0]
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f000 fbfa 	bl	800eb38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800e344:	e05b      	b.n	800e3fe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e346:	693a      	ldr	r2, [r7, #16]
 800e348:	6a39      	ldr	r1, [r7, #32]
 800e34a:	68f8      	ldr	r0, [r7, #12]
 800e34c:	f000 f9fd 	bl	800e74a <I2C_WaitOnTXISFlagUntilTimeout>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d001      	beq.n	800e35a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800e356:	2301      	movs	r3, #1
 800e358:	e07b      	b.n	800e452 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e35e:	781a      	ldrb	r2, [r3, #0]
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e36a:	1c5a      	adds	r2, r3, #1
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e374:	b29b      	uxth	r3, r3
 800e376:	3b01      	subs	r3, #1
 800e378:	b29a      	uxth	r2, r3
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e382:	3b01      	subs	r3, #1
 800e384:	b29a      	uxth	r2, r3
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e38e:	b29b      	uxth	r3, r3
 800e390:	2b00      	cmp	r3, #0
 800e392:	d034      	beq.n	800e3fe <HAL_I2C_Master_Transmit+0x1ca>
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d130      	bne.n	800e3fe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	9300      	str	r3, [sp, #0]
 800e3a0:	6a3b      	ldr	r3, [r7, #32]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	2180      	movs	r1, #128	@ 0x80
 800e3a6:	68f8      	ldr	r0, [r7, #12]
 800e3a8:	f000 f976 	bl	800e698 <I2C_WaitOnFlagUntilTimeout>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d001      	beq.n	800e3b6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e04d      	b.n	800e452 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	2bff      	cmp	r3, #255	@ 0xff
 800e3be:	d90e      	bls.n	800e3de <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	22ff      	movs	r2, #255	@ 0xff
 800e3c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3ca:	b2da      	uxtb	r2, r3
 800e3cc:	8979      	ldrh	r1, [r7, #10]
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	9300      	str	r3, [sp, #0]
 800e3d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f000 fbae 	bl	800eb38 <I2C_TransferConfig>
 800e3dc:	e00f      	b.n	800e3fe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3e2:	b29a      	uxth	r2, r3
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3ec:	b2da      	uxtb	r2, r3
 800e3ee:	8979      	ldrh	r1, [r7, #10]
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f000 fb9d 	bl	800eb38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e402:	b29b      	uxth	r3, r3
 800e404:	2b00      	cmp	r3, #0
 800e406:	d19e      	bne.n	800e346 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e408:	693a      	ldr	r2, [r7, #16]
 800e40a:	6a39      	ldr	r1, [r7, #32]
 800e40c:	68f8      	ldr	r0, [r7, #12]
 800e40e:	f000 f9e3 	bl	800e7d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d001      	beq.n	800e41c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800e418:	2301      	movs	r3, #1
 800e41a:	e01a      	b.n	800e452 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2220      	movs	r2, #32
 800e422:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	6859      	ldr	r1, [r3, #4]
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	4b0c      	ldr	r3, [pc, #48]	@ (800e460 <HAL_I2C_Master_Transmit+0x22c>)
 800e430:	400b      	ands	r3, r1
 800e432:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2220      	movs	r2, #32
 800e438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2200      	movs	r2, #0
 800e440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2200      	movs	r2, #0
 800e448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e44c:	2300      	movs	r3, #0
 800e44e:	e000      	b.n	800e452 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800e450:	2302      	movs	r3, #2
  }
}
 800e452:	4618      	mov	r0, r3
 800e454:	3718      	adds	r7, #24
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
 800e45a:	bf00      	nop
 800e45c:	80002000 	.word	0x80002000
 800e460:	fe00e800 	.word	0xfe00e800

0800e464 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b088      	sub	sp, #32
 800e468:	af02      	add	r7, sp, #8
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	607a      	str	r2, [r7, #4]
 800e46e:	461a      	mov	r2, r3
 800e470:	460b      	mov	r3, r1
 800e472:	817b      	strh	r3, [r7, #10]
 800e474:	4613      	mov	r3, r2
 800e476:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	2b20      	cmp	r3, #32
 800e482:	f040 80db 	bne.w	800e63c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d101      	bne.n	800e494 <HAL_I2C_Master_Receive+0x30>
 800e490:	2302      	movs	r3, #2
 800e492:	e0d4      	b.n	800e63e <HAL_I2C_Master_Receive+0x1da>
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	2201      	movs	r2, #1
 800e498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e49c:	f7fc fc38 	bl	800ad10 <HAL_GetTick>
 800e4a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	9300      	str	r3, [sp, #0]
 800e4a6:	2319      	movs	r3, #25
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e4ae:	68f8      	ldr	r0, [r7, #12]
 800e4b0:	f000 f8f2 	bl	800e698 <I2C_WaitOnFlagUntilTimeout>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d001      	beq.n	800e4be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	e0bf      	b.n	800e63e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2222      	movs	r2, #34	@ 0x22
 800e4c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2210      	movs	r2, #16
 800e4ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	893a      	ldrh	r2, [r7, #8]
 800e4de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	2bff      	cmp	r3, #255	@ 0xff
 800e4ee:	d90e      	bls.n	800e50e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	8979      	ldrh	r1, [r7, #10]
 800e4fe:	4b52      	ldr	r3, [pc, #328]	@ (800e648 <HAL_I2C_Master_Receive+0x1e4>)
 800e500:	9300      	str	r3, [sp, #0]
 800e502:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	f000 fb16 	bl	800eb38 <I2C_TransferConfig>
 800e50c:	e06d      	b.n	800e5ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e512:	b29a      	uxth	r2, r3
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e51c:	b2da      	uxtb	r2, r3
 800e51e:	8979      	ldrh	r1, [r7, #10]
 800e520:	4b49      	ldr	r3, [pc, #292]	@ (800e648 <HAL_I2C_Master_Receive+0x1e4>)
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	f000 fb05 	bl	800eb38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800e52e:	e05c      	b.n	800e5ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e530:	697a      	ldr	r2, [r7, #20]
 800e532:	6a39      	ldr	r1, [r7, #32]
 800e534:	68f8      	ldr	r0, [r7, #12]
 800e536:	f000 f993 	bl	800e860 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d001      	beq.n	800e544 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800e540:	2301      	movs	r3, #1
 800e542:	e07c      	b.n	800e63e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e54e:	b2d2      	uxtb	r2, r2
 800e550:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e556:	1c5a      	adds	r2, r3, #1
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e560:	3b01      	subs	r3, #1
 800e562:	b29a      	uxth	r2, r3
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	3b01      	subs	r3, #1
 800e570:	b29a      	uxth	r2, r3
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d034      	beq.n	800e5ea <HAL_I2C_Master_Receive+0x186>
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e584:	2b00      	cmp	r3, #0
 800e586:	d130      	bne.n	800e5ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	6a3b      	ldr	r3, [r7, #32]
 800e58e:	2200      	movs	r2, #0
 800e590:	2180      	movs	r1, #128	@ 0x80
 800e592:	68f8      	ldr	r0, [r7, #12]
 800e594:	f000 f880 	bl	800e698 <I2C_WaitOnFlagUntilTimeout>
 800e598:	4603      	mov	r3, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d001      	beq.n	800e5a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	e04d      	b.n	800e63e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	2bff      	cmp	r3, #255	@ 0xff
 800e5aa:	d90e      	bls.n	800e5ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	22ff      	movs	r2, #255	@ 0xff
 800e5b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5b6:	b2da      	uxtb	r2, r3
 800e5b8:	8979      	ldrh	r1, [r7, #10]
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	9300      	str	r3, [sp, #0]
 800e5be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e5c2:	68f8      	ldr	r0, [r7, #12]
 800e5c4:	f000 fab8 	bl	800eb38 <I2C_TransferConfig>
 800e5c8:	e00f      	b.n	800e5ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5ce:	b29a      	uxth	r2, r3
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5d8:	b2da      	uxtb	r2, r3
 800e5da:	8979      	ldrh	r1, [r7, #10]
 800e5dc:	2300      	movs	r3, #0
 800e5de:	9300      	str	r3, [sp, #0]
 800e5e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	f000 faa7 	bl	800eb38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d19d      	bne.n	800e530 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e5f4:	697a      	ldr	r2, [r7, #20]
 800e5f6:	6a39      	ldr	r1, [r7, #32]
 800e5f8:	68f8      	ldr	r0, [r7, #12]
 800e5fa:	f000 f8ed 	bl	800e7d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e5fe:	4603      	mov	r3, r0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d001      	beq.n	800e608 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800e604:	2301      	movs	r3, #1
 800e606:	e01a      	b.n	800e63e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2220      	movs	r2, #32
 800e60e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6859      	ldr	r1, [r3, #4]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	4b0c      	ldr	r3, [pc, #48]	@ (800e64c <HAL_I2C_Master_Receive+0x1e8>)
 800e61c:	400b      	ands	r3, r1
 800e61e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2220      	movs	r2, #32
 800e624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2200      	movs	r2, #0
 800e62c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2200      	movs	r2, #0
 800e634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e638:	2300      	movs	r3, #0
 800e63a:	e000      	b.n	800e63e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800e63c:	2302      	movs	r3, #2
  }
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3718      	adds	r7, #24
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	80002400 	.word	0x80002400
 800e64c:	fe00e800 	.word	0xfe00e800

0800e650 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e650:	b480      	push	{r7}
 800e652:	b083      	sub	sp, #12
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	699b      	ldr	r3, [r3, #24]
 800e65e:	f003 0302 	and.w	r3, r3, #2
 800e662:	2b02      	cmp	r3, #2
 800e664:	d103      	bne.n	800e66e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	2200      	movs	r2, #0
 800e66c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	699b      	ldr	r3, [r3, #24]
 800e674:	f003 0301 	and.w	r3, r3, #1
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d007      	beq.n	800e68c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	699a      	ldr	r2, [r3, #24]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f042 0201 	orr.w	r2, r2, #1
 800e68a:	619a      	str	r2, [r3, #24]
  }
}
 800e68c:	bf00      	nop
 800e68e:	370c      	adds	r7, #12
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr

0800e698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	603b      	str	r3, [r7, #0]
 800e6a4:	4613      	mov	r3, r2
 800e6a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e6a8:	e03b      	b.n	800e722 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e6aa:	69ba      	ldr	r2, [r7, #24]
 800e6ac:	6839      	ldr	r1, [r7, #0]
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f000 f962 	bl	800e978 <I2C_IsErrorOccurred>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d001      	beq.n	800e6be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	e041      	b.n	800e742 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6c4:	d02d      	beq.n	800e722 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6c6:	f7fc fb23 	bl	800ad10 <HAL_GetTick>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	1ad3      	subs	r3, r2, r3
 800e6d0:	683a      	ldr	r2, [r7, #0]
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d302      	bcc.n	800e6dc <I2C_WaitOnFlagUntilTimeout+0x44>
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d122      	bne.n	800e722 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	699a      	ldr	r2, [r3, #24]
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	4013      	ands	r3, r2
 800e6e6:	68ba      	ldr	r2, [r7, #8]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	bf0c      	ite	eq
 800e6ec:	2301      	moveq	r3, #1
 800e6ee:	2300      	movne	r3, #0
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	79fb      	ldrb	r3, [r7, #7]
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d113      	bne.n	800e722 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6fe:	f043 0220 	orr.w	r2, r3, #32
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2220      	movs	r2, #32
 800e70a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2200      	movs	r2, #0
 800e712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2200      	movs	r2, #0
 800e71a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800e71e:	2301      	movs	r3, #1
 800e720:	e00f      	b.n	800e742 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	699a      	ldr	r2, [r3, #24]
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	4013      	ands	r3, r2
 800e72c:	68ba      	ldr	r2, [r7, #8]
 800e72e:	429a      	cmp	r2, r3
 800e730:	bf0c      	ite	eq
 800e732:	2301      	moveq	r3, #1
 800e734:	2300      	movne	r3, #0
 800e736:	b2db      	uxtb	r3, r3
 800e738:	461a      	mov	r2, r3
 800e73a:	79fb      	ldrb	r3, [r7, #7]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d0b4      	beq.n	800e6aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e740:	2300      	movs	r3, #0
}
 800e742:	4618      	mov	r0, r3
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}

0800e74a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e74a:	b580      	push	{r7, lr}
 800e74c:	b084      	sub	sp, #16
 800e74e:	af00      	add	r7, sp, #0
 800e750:	60f8      	str	r0, [r7, #12]
 800e752:	60b9      	str	r1, [r7, #8]
 800e754:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e756:	e033      	b.n	800e7c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e758:	687a      	ldr	r2, [r7, #4]
 800e75a:	68b9      	ldr	r1, [r7, #8]
 800e75c:	68f8      	ldr	r0, [r7, #12]
 800e75e:	f000 f90b 	bl	800e978 <I2C_IsErrorOccurred>
 800e762:	4603      	mov	r3, r0
 800e764:	2b00      	cmp	r3, #0
 800e766:	d001      	beq.n	800e76c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e768:	2301      	movs	r3, #1
 800e76a:	e031      	b.n	800e7d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e772:	d025      	beq.n	800e7c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e774:	f7fc facc 	bl	800ad10 <HAL_GetTick>
 800e778:	4602      	mov	r2, r0
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	1ad3      	subs	r3, r2, r3
 800e77e:	68ba      	ldr	r2, [r7, #8]
 800e780:	429a      	cmp	r2, r3
 800e782:	d302      	bcc.n	800e78a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d11a      	bne.n	800e7c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	699b      	ldr	r3, [r3, #24]
 800e790:	f003 0302 	and.w	r3, r3, #2
 800e794:	2b02      	cmp	r3, #2
 800e796:	d013      	beq.n	800e7c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e79c:	f043 0220 	orr.w	r2, r3, #32
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2220      	movs	r2, #32
 800e7a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e7bc:	2301      	movs	r3, #1
 800e7be:	e007      	b.n	800e7d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	699b      	ldr	r3, [r3, #24]
 800e7c6:	f003 0302 	and.w	r3, r3, #2
 800e7ca:	2b02      	cmp	r3, #2
 800e7cc:	d1c4      	bne.n	800e758 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e7ce:	2300      	movs	r3, #0
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3710      	adds	r7, #16
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e7e4:	e02f      	b.n	800e846 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e7e6:	687a      	ldr	r2, [r7, #4]
 800e7e8:	68b9      	ldr	r1, [r7, #8]
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	f000 f8c4 	bl	800e978 <I2C_IsErrorOccurred>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d001      	beq.n	800e7fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	e02d      	b.n	800e856 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7fa:	f7fc fa89 	bl	800ad10 <HAL_GetTick>
 800e7fe:	4602      	mov	r2, r0
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	1ad3      	subs	r3, r2, r3
 800e804:	68ba      	ldr	r2, [r7, #8]
 800e806:	429a      	cmp	r2, r3
 800e808:	d302      	bcc.n	800e810 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d11a      	bne.n	800e846 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	699b      	ldr	r3, [r3, #24]
 800e816:	f003 0320 	and.w	r3, r3, #32
 800e81a:	2b20      	cmp	r3, #32
 800e81c:	d013      	beq.n	800e846 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e822:	f043 0220 	orr.w	r2, r3, #32
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2220      	movs	r2, #32
 800e82e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2200      	movs	r2, #0
 800e836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2200      	movs	r2, #0
 800e83e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800e842:	2301      	movs	r3, #1
 800e844:	e007      	b.n	800e856 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	699b      	ldr	r3, [r3, #24]
 800e84c:	f003 0320 	and.w	r3, r3, #32
 800e850:	2b20      	cmp	r3, #32
 800e852:	d1c8      	bne.n	800e7e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
	...

0800e860 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b086      	sub	sp, #24
 800e864:	af00      	add	r7, sp, #0
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e86c:	2300      	movs	r3, #0
 800e86e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800e870:	e071      	b.n	800e956 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	68b9      	ldr	r1, [r7, #8]
 800e876:	68f8      	ldr	r0, [r7, #12]
 800e878:	f000 f87e 	bl	800e978 <I2C_IsErrorOccurred>
 800e87c:	4603      	mov	r3, r0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d001      	beq.n	800e886 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800e882:	2301      	movs	r3, #1
 800e884:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	699b      	ldr	r3, [r3, #24]
 800e88c:	f003 0320 	and.w	r3, r3, #32
 800e890:	2b20      	cmp	r3, #32
 800e892:	d13b      	bne.n	800e90c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800e894:	7dfb      	ldrb	r3, [r7, #23]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d138      	bne.n	800e90c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	699b      	ldr	r3, [r3, #24]
 800e8a0:	f003 0304 	and.w	r3, r3, #4
 800e8a4:	2b04      	cmp	r3, #4
 800e8a6:	d105      	bne.n	800e8b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d001      	beq.n	800e8b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	699b      	ldr	r3, [r3, #24]
 800e8ba:	f003 0310 	and.w	r3, r3, #16
 800e8be:	2b10      	cmp	r3, #16
 800e8c0:	d121      	bne.n	800e906 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	2210      	movs	r2, #16
 800e8c8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2204      	movs	r2, #4
 800e8ce:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	2220      	movs	r2, #32
 800e8d6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	6859      	ldr	r1, [r3, #4]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	4b24      	ldr	r3, [pc, #144]	@ (800e974 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800e8e4:	400b      	ands	r3, r1
 800e8e6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2220      	movs	r2, #32
 800e8ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800e900:	2301      	movs	r3, #1
 800e902:	75fb      	strb	r3, [r7, #23]
 800e904:	e002      	b.n	800e90c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2200      	movs	r2, #0
 800e90a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800e90c:	f7fc fa00 	bl	800ad10 <HAL_GetTick>
 800e910:	4602      	mov	r2, r0
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	1ad3      	subs	r3, r2, r3
 800e916:	68ba      	ldr	r2, [r7, #8]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d302      	bcc.n	800e922 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d119      	bne.n	800e956 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800e922:	7dfb      	ldrb	r3, [r7, #23]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d116      	bne.n	800e956 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	699b      	ldr	r3, [r3, #24]
 800e92e:	f003 0304 	and.w	r3, r3, #4
 800e932:	2b04      	cmp	r3, #4
 800e934:	d00f      	beq.n	800e956 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e93a:	f043 0220 	orr.w	r2, r3, #32
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2220      	movs	r2, #32
 800e946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2200      	movs	r2, #0
 800e94e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800e952:	2301      	movs	r3, #1
 800e954:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	699b      	ldr	r3, [r3, #24]
 800e95c:	f003 0304 	and.w	r3, r3, #4
 800e960:	2b04      	cmp	r3, #4
 800e962:	d002      	beq.n	800e96a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800e964:	7dfb      	ldrb	r3, [r7, #23]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d083      	beq.n	800e872 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800e96a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3718      	adds	r7, #24
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	fe00e800 	.word	0xfe00e800

0800e978 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b08a      	sub	sp, #40	@ 0x28
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e984:	2300      	movs	r3, #0
 800e986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	699b      	ldr	r3, [r3, #24]
 800e990:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e992:	2300      	movs	r3, #0
 800e994:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	f003 0310 	and.w	r3, r3, #16
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d068      	beq.n	800ea76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2210      	movs	r2, #16
 800e9aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e9ac:	e049      	b.n	800ea42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9b4:	d045      	beq.n	800ea42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e9b6:	f7fc f9ab 	bl	800ad10 <HAL_GetTick>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	1ad3      	subs	r3, r2, r3
 800e9c0:	68ba      	ldr	r2, [r7, #8]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d302      	bcc.n	800e9cc <I2C_IsErrorOccurred+0x54>
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d13a      	bne.n	800ea42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e9d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e9de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	699b      	ldr	r3, [r3, #24]
 800e9e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e9ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e9ee:	d121      	bne.n	800ea34 <I2C_IsErrorOccurred+0xbc>
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e9f6:	d01d      	beq.n	800ea34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800e9f8:	7cfb      	ldrb	r3, [r7, #19]
 800e9fa:	2b20      	cmp	r3, #32
 800e9fc:	d01a      	beq.n	800ea34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	685a      	ldr	r2, [r3, #4]
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ea0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ea0e:	f7fc f97f 	bl	800ad10 <HAL_GetTick>
 800ea12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ea14:	e00e      	b.n	800ea34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ea16:	f7fc f97b 	bl	800ad10 <HAL_GetTick>
 800ea1a:	4602      	mov	r2, r0
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	1ad3      	subs	r3, r2, r3
 800ea20:	2b19      	cmp	r3, #25
 800ea22:	d907      	bls.n	800ea34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ea24:	6a3b      	ldr	r3, [r7, #32]
 800ea26:	f043 0320 	orr.w	r3, r3, #32
 800ea2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800ea32:	e006      	b.n	800ea42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	699b      	ldr	r3, [r3, #24]
 800ea3a:	f003 0320 	and.w	r3, r3, #32
 800ea3e:	2b20      	cmp	r3, #32
 800ea40:	d1e9      	bne.n	800ea16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	699b      	ldr	r3, [r3, #24]
 800ea48:	f003 0320 	and.w	r3, r3, #32
 800ea4c:	2b20      	cmp	r3, #32
 800ea4e:	d003      	beq.n	800ea58 <I2C_IsErrorOccurred+0xe0>
 800ea50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d0aa      	beq.n	800e9ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ea58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d103      	bne.n	800ea68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	2220      	movs	r2, #32
 800ea66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ea68:	6a3b      	ldr	r3, [r7, #32]
 800ea6a:	f043 0304 	orr.w	r3, r3, #4
 800ea6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ea70:	2301      	movs	r3, #1
 800ea72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	699b      	ldr	r3, [r3, #24]
 800ea7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d00b      	beq.n	800eaa0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ea88:	6a3b      	ldr	r3, [r7, #32]
 800ea8a:	f043 0301 	orr.w	r3, r3, #1
 800ea8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ea98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d00b      	beq.n	800eac2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800eaaa:	6a3b      	ldr	r3, [r7, #32]
 800eaac:	f043 0308 	orr.w	r3, r3, #8
 800eab0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800eaba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800eabc:	2301      	movs	r3, #1
 800eabe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d00b      	beq.n	800eae4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800eacc:	6a3b      	ldr	r3, [r7, #32]
 800eace:	f043 0302 	orr.w	r3, r3, #2
 800ead2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eadc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800eade:	2301      	movs	r3, #1
 800eae0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800eae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d01c      	beq.n	800eb26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800eaec:	68f8      	ldr	r0, [r7, #12]
 800eaee:	f7ff fdaf 	bl	800e650 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	6859      	ldr	r1, [r3, #4]
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	4b0d      	ldr	r3, [pc, #52]	@ (800eb34 <I2C_IsErrorOccurred+0x1bc>)
 800eafe:	400b      	ands	r3, r1
 800eb00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eb06:	6a3b      	ldr	r3, [r7, #32]
 800eb08:	431a      	orrs	r2, r3
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2220      	movs	r2, #32
 800eb12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2200      	movs	r2, #0
 800eb22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800eb26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3728      	adds	r7, #40	@ 0x28
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	fe00e800 	.word	0xfe00e800

0800eb38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b087      	sub	sp, #28
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	607b      	str	r3, [r7, #4]
 800eb42:	460b      	mov	r3, r1
 800eb44:	817b      	strh	r3, [r7, #10]
 800eb46:	4613      	mov	r3, r2
 800eb48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eb4a:	897b      	ldrh	r3, [r7, #10]
 800eb4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800eb50:	7a7b      	ldrb	r3, [r7, #9]
 800eb52:	041b      	lsls	r3, r3, #16
 800eb54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eb58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eb5e:	6a3b      	ldr	r3, [r7, #32]
 800eb60:	4313      	orrs	r3, r2
 800eb62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eb66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	685a      	ldr	r2, [r3, #4]
 800eb6e:	6a3b      	ldr	r3, [r7, #32]
 800eb70:	0d5b      	lsrs	r3, r3, #21
 800eb72:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800eb76:	4b08      	ldr	r3, [pc, #32]	@ (800eb98 <I2C_TransferConfig+0x60>)
 800eb78:	430b      	orrs	r3, r1
 800eb7a:	43db      	mvns	r3, r3
 800eb7c:	ea02 0103 	and.w	r1, r2, r3
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	697a      	ldr	r2, [r7, #20]
 800eb86:	430a      	orrs	r2, r1
 800eb88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800eb8a:	bf00      	nop
 800eb8c:	371c      	adds	r7, #28
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	03ff63ff 	.word	0x03ff63ff

0800eb9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	2b20      	cmp	r3, #32
 800ebb0:	d138      	bne.n	800ec24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d101      	bne.n	800ebc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ebbc:	2302      	movs	r3, #2
 800ebbe:	e032      	b.n	800ec26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2224      	movs	r2, #36	@ 0x24
 800ebcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f022 0201 	bic.w	r2, r2, #1
 800ebde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ebee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	6819      	ldr	r1, [r3, #0]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	683a      	ldr	r2, [r7, #0]
 800ebfc:	430a      	orrs	r2, r1
 800ebfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f042 0201 	orr.w	r2, r2, #1
 800ec0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2220      	movs	r2, #32
 800ec14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ec20:	2300      	movs	r3, #0
 800ec22:	e000      	b.n	800ec26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ec24:	2302      	movs	r3, #2
  }
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	370c      	adds	r7, #12
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr

0800ec32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ec32:	b480      	push	{r7}
 800ec34:	b085      	sub	sp, #20
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6078      	str	r0, [r7, #4]
 800ec3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	2b20      	cmp	r3, #32
 800ec46:	d139      	bne.n	800ecbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d101      	bne.n	800ec56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ec52:	2302      	movs	r3, #2
 800ec54:	e033      	b.n	800ecbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2224      	movs	r2, #36	@ 0x24
 800ec62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f022 0201 	bic.w	r2, r2, #1
 800ec74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ec84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	021b      	lsls	r3, r3, #8
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	4313      	orrs	r3, r2
 800ec8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	68fa      	ldr	r2, [r7, #12]
 800ec96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f042 0201 	orr.w	r2, r2, #1
 800eca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2220      	movs	r2, #32
 800ecac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	e000      	b.n	800ecbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ecbc:	2302      	movs	r3, #2
  }
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3714      	adds	r7, #20
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc8:	4770      	bx	lr
	...

0800eccc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800eccc:	b480      	push	{r7}
 800ecce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ecd0:	4b04      	ldr	r3, [pc, #16]	@ (800ece4 <HAL_PWREx_GetVoltageRange+0x18>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop
 800ece4:	40007000 	.word	0x40007000

0800ece8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b085      	sub	sp, #20
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ecf6:	d130      	bne.n	800ed5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ecf8:	4b23      	ldr	r3, [pc, #140]	@ (800ed88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ed00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ed04:	d038      	beq.n	800ed78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ed06:	4b20      	ldr	r3, [pc, #128]	@ (800ed88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ed0e:	4a1e      	ldr	r2, [pc, #120]	@ (800ed88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ed14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ed16:	4b1d      	ldr	r3, [pc, #116]	@ (800ed8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2232      	movs	r2, #50	@ 0x32
 800ed1c:	fb02 f303 	mul.w	r3, r2, r3
 800ed20:	4a1b      	ldr	r2, [pc, #108]	@ (800ed90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ed22:	fba2 2303 	umull	r2, r3, r2, r3
 800ed26:	0c9b      	lsrs	r3, r3, #18
 800ed28:	3301      	adds	r3, #1
 800ed2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ed2c:	e002      	b.n	800ed34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	3b01      	subs	r3, #1
 800ed32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ed34:	4b14      	ldr	r3, [pc, #80]	@ (800ed88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed36:	695b      	ldr	r3, [r3, #20]
 800ed38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ed3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed40:	d102      	bne.n	800ed48 <HAL_PWREx_ControlVoltageScaling+0x60>
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d1f2      	bne.n	800ed2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ed48:	4b0f      	ldr	r3, [pc, #60]	@ (800ed88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed4a:	695b      	ldr	r3, [r3, #20]
 800ed4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ed50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed54:	d110      	bne.n	800ed78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800ed56:	2303      	movs	r3, #3
 800ed58:	e00f      	b.n	800ed7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ed5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ed88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ed62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed66:	d007      	beq.n	800ed78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ed68:	4b07      	ldr	r3, [pc, #28]	@ (800ed88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ed70:	4a05      	ldr	r2, [pc, #20]	@ (800ed88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ed72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ed76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ed78:	2300      	movs	r3, #0
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3714      	adds	r7, #20
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed84:	4770      	bx	lr
 800ed86:	bf00      	nop
 800ed88:	40007000 	.word	0x40007000
 800ed8c:	20000168 	.word	0x20000168
 800ed90:	431bde83 	.word	0x431bde83

0800ed94 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b086      	sub	sp, #24
 800ed98:	af02      	add	r7, sp, #8
 800ed9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ed9c:	f7fb ffb8 	bl	800ad10 <HAL_GetTick>
 800eda0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d101      	bne.n	800edac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800eda8:	2301      	movs	r3, #1
 800edaa:	e063      	b.n	800ee74 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d10b      	bne.n	800edd0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f7f8 fadf 	bl	8007384 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800edc6:	f241 3188 	movw	r1, #5000	@ 0x1388
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f000 fa68 	bl	800f2a0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	689b      	ldr	r3, [r3, #8]
 800edde:	3b01      	subs	r3, #1
 800ede0:	021a      	lsls	r2, r3, #8
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	430a      	orrs	r2, r1
 800ede8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edee:	9300      	str	r3, [sp, #0]
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2200      	movs	r2, #0
 800edf4:	2120      	movs	r1, #32
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f000 fa60 	bl	800f2bc <QSPI_WaitFlagStateUntilTimeout>
 800edfc:	4603      	mov	r3, r0
 800edfe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800ee00:	7afb      	ldrb	r3, [r7, #11]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d131      	bne.n	800ee6a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ee10:	f023 0310 	bic.w	r3, r3, #16
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	6852      	ldr	r2, [r2, #4]
 800ee18:	0611      	lsls	r1, r2, #24
 800ee1a:	687a      	ldr	r2, [r7, #4]
 800ee1c:	68d2      	ldr	r2, [r2, #12]
 800ee1e:	4311      	orrs	r1, r2
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	6812      	ldr	r2, [r2, #0]
 800ee24:	430b      	orrs	r3, r1
 800ee26:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	685a      	ldr	r2, [r3, #4]
 800ee2e:	4b13      	ldr	r3, [pc, #76]	@ (800ee7c <HAL_QSPI_Init+0xe8>)
 800ee30:	4013      	ands	r3, r2
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	6912      	ldr	r2, [r2, #16]
 800ee36:	0411      	lsls	r1, r2, #16
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	6952      	ldr	r2, [r2, #20]
 800ee3c:	4311      	orrs	r1, r2
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	6992      	ldr	r2, [r2, #24]
 800ee42:	4311      	orrs	r1, r2
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	6812      	ldr	r2, [r2, #0]
 800ee48:	430b      	orrs	r3, r1
 800ee4a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f042 0201 	orr.w	r2, r2, #1
 800ee5a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2201      	movs	r2, #1
 800ee66:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800ee72:	7afb      	ldrb	r3, [r7, #11]
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3710      	adds	r7, #16
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	ffe0f8fe 	.word	0xffe0f8fe

0800ee80 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b088      	sub	sp, #32
 800ee84:	af02      	add	r7, sp, #8
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ee8c:	f7fb ff40 	bl	800ad10 <HAL_GetTick>
 800ee90:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	2b01      	cmp	r3, #1
 800ee9c:	d101      	bne.n	800eea2 <HAL_QSPI_Command+0x22>
 800ee9e:	2302      	movs	r3, #2
 800eea0:	e048      	b.n	800ef34 <HAL_QSPI_Command+0xb4>
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2201      	movs	r2, #1
 800eea6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800eeb0:	b2db      	uxtb	r3, r3
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	d137      	bne.n	800ef26 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2202      	movs	r2, #2
 800eec0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	2200      	movs	r2, #0
 800eecc:	2120      	movs	r1, #32
 800eece:	68f8      	ldr	r0, [r7, #12]
 800eed0:	f000 f9f4 	bl	800f2bc <QSPI_WaitFlagStateUntilTimeout>
 800eed4:	4603      	mov	r3, r0
 800eed6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800eed8:	7dfb      	ldrb	r3, [r7, #23]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d125      	bne.n	800ef2a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800eede:	2200      	movs	r2, #0
 800eee0:	68b9      	ldr	r1, [r7, #8]
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f000 fa21 	bl	800f32a <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d115      	bne.n	800ef1c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	9300      	str	r3, [sp, #0]
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	2201      	movs	r2, #1
 800eef8:	2102      	movs	r1, #2
 800eefa:	68f8      	ldr	r0, [r7, #12]
 800eefc:	f000 f9de 	bl	800f2bc <QSPI_WaitFlagStateUntilTimeout>
 800ef00:	4603      	mov	r3, r0
 800ef02:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800ef04:	7dfb      	ldrb	r3, [r7, #23]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d10f      	bne.n	800ef2a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	2202      	movs	r2, #2
 800ef10:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2201      	movs	r2, #1
 800ef16:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ef1a:	e006      	b.n	800ef2a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ef24:	e001      	b.n	800ef2a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800ef26:	2302      	movs	r3, #2
 800ef28:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800ef32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3718      	adds	r7, #24
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b08a      	sub	sp, #40	@ 0x28
 800ef40:	af02      	add	r7, sp, #8
 800ef42:	60f8      	str	r0, [r7, #12]
 800ef44:	60b9      	str	r1, [r7, #8]
 800ef46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800ef4c:	f7fb fee0 	bl	800ad10 <HAL_GetTick>
 800ef50:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	3320      	adds	r3, #32
 800ef58:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	d101      	bne.n	800ef6a <HAL_QSPI_Transmit+0x2e>
 800ef66:	2302      	movs	r3, #2
 800ef68:	e07b      	b.n	800f062 <HAL_QSPI_Transmit+0x126>
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ef78:	b2db      	uxtb	r3, r3
 800ef7a:	2b01      	cmp	r3, #1
 800ef7c:	d16a      	bne.n	800f054 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2200      	movs	r2, #0
 800ef82:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d05b      	beq.n	800f042 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	2212      	movs	r2, #18
 800ef8e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	691b      	ldr	r3, [r3, #16]
 800ef98:	1c5a      	adds	r2, r3, #1
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	691b      	ldr	r3, [r3, #16]
 800efa4:	1c5a      	adds	r2, r3, #1
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	68ba      	ldr	r2, [r7, #8]
 800efae:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	695a      	ldr	r2, [r3, #20]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800efbe:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800efc0:	e01b      	b.n	800effa <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	9300      	str	r3, [sp, #0]
 800efc6:	69bb      	ldr	r3, [r7, #24]
 800efc8:	2201      	movs	r2, #1
 800efca:	2104      	movs	r1, #4
 800efcc:	68f8      	ldr	r0, [r7, #12]
 800efce:	f000 f975 	bl	800f2bc <QSPI_WaitFlagStateUntilTimeout>
 800efd2:	4603      	mov	r3, r0
 800efd4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800efd6:	7ffb      	ldrb	r3, [r7, #31]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d113      	bne.n	800f004 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	69db      	ldr	r3, [r3, #28]
 800efe0:	781a      	ldrb	r2, [r3, #0]
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	69db      	ldr	r3, [r3, #28]
 800efea:	1c5a      	adds	r2, r3, #1
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eff4:	1e5a      	subs	r2, r3, #1
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800effe:	2b00      	cmp	r3, #0
 800f000:	d1df      	bne.n	800efc2 <HAL_QSPI_Transmit+0x86>
 800f002:	e000      	b.n	800f006 <HAL_QSPI_Transmit+0xca>
          break;
 800f004:	bf00      	nop
      }

      if (status == HAL_OK)
 800f006:	7ffb      	ldrb	r3, [r7, #31]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d115      	bne.n	800f038 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	9300      	str	r3, [sp, #0]
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	2201      	movs	r2, #1
 800f014:	2102      	movs	r1, #2
 800f016:	68f8      	ldr	r0, [r7, #12]
 800f018:	f000 f950 	bl	800f2bc <QSPI_WaitFlagStateUntilTimeout>
 800f01c:	4603      	mov	r3, r0
 800f01e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800f020:	7ffb      	ldrb	r3, [r7, #31]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d108      	bne.n	800f038 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	2202      	movs	r2, #2
 800f02c:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800f02e:	68f8      	ldr	r0, [r7, #12]
 800f030:	f000 f8bd 	bl	800f1ae <HAL_QSPI_Abort>
 800f034:	4603      	mov	r3, r0
 800f036:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2201      	movs	r2, #1
 800f03c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f040:	e00a      	b.n	800f058 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f046:	f043 0208 	orr.w	r2, r3, #8
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800f04e:	2301      	movs	r3, #1
 800f050:	77fb      	strb	r3, [r7, #31]
 800f052:	e001      	b.n	800f058 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f054:	2302      	movs	r3, #2
 800f056:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	2200      	movs	r2, #0
 800f05c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800f060:	7ffb      	ldrb	r3, [r7, #31]
}
 800f062:	4618      	mov	r0, r3
 800f064:	3720      	adds	r7, #32
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f06a:	b580      	push	{r7, lr}
 800f06c:	b08a      	sub	sp, #40	@ 0x28
 800f06e:	af02      	add	r7, sp, #8
 800f070:	60f8      	str	r0, [r7, #12]
 800f072:	60b9      	str	r1, [r7, #8]
 800f074:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f076:	2300      	movs	r3, #0
 800f078:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f07a:	f7fb fe49 	bl	800ad10 <HAL_GetTick>
 800f07e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	699b      	ldr	r3, [r3, #24]
 800f086:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	3320      	adds	r3, #32
 800f08e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f096:	b2db      	uxtb	r3, r3
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d101      	bne.n	800f0a0 <HAL_QSPI_Receive+0x36>
 800f09c:	2302      	movs	r3, #2
 800f09e:	e082      	b.n	800f1a6 <HAL_QSPI_Receive+0x13c>
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	2201      	movs	r2, #1
 800f0a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d171      	bne.n	800f198 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d062      	beq.n	800f186 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2222      	movs	r2, #34	@ 0x22
 800f0c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	691b      	ldr	r3, [r3, #16]
 800f0ce:	1c5a      	adds	r2, r3, #1
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	691b      	ldr	r3, [r3, #16]
 800f0da:	1c5a      	adds	r2, r3, #1
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	68ba      	ldr	r2, [r7, #8]
 800f0e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	695b      	ldr	r3, [r3, #20]
 800f0ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800f0f8:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	697a      	ldr	r2, [r7, #20]
 800f100:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800f102:	e01c      	b.n	800f13e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	9300      	str	r3, [sp, #0]
 800f108:	69bb      	ldr	r3, [r7, #24]
 800f10a:	2201      	movs	r2, #1
 800f10c:	2106      	movs	r1, #6
 800f10e:	68f8      	ldr	r0, [r7, #12]
 800f110:	f000 f8d4 	bl	800f2bc <QSPI_WaitFlagStateUntilTimeout>
 800f114:	4603      	mov	r3, r0
 800f116:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800f118:	7ffb      	ldrb	r3, [r7, #31]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d114      	bne.n	800f148 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f122:	693a      	ldr	r2, [r7, #16]
 800f124:	7812      	ldrb	r2, [r2, #0]
 800f126:	b2d2      	uxtb	r2, r2
 800f128:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f12e:	1c5a      	adds	r2, r3, #1
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f138:	1e5a      	subs	r2, r3, #1
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f142:	2b00      	cmp	r3, #0
 800f144:	d1de      	bne.n	800f104 <HAL_QSPI_Receive+0x9a>
 800f146:	e000      	b.n	800f14a <HAL_QSPI_Receive+0xe0>
          break;
 800f148:	bf00      	nop
      }

      if (status == HAL_OK)
 800f14a:	7ffb      	ldrb	r3, [r7, #31]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d115      	bne.n	800f17c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	9300      	str	r3, [sp, #0]
 800f154:	69bb      	ldr	r3, [r7, #24]
 800f156:	2201      	movs	r2, #1
 800f158:	2102      	movs	r1, #2
 800f15a:	68f8      	ldr	r0, [r7, #12]
 800f15c:	f000 f8ae 	bl	800f2bc <QSPI_WaitFlagStateUntilTimeout>
 800f160:	4603      	mov	r3, r0
 800f162:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800f164:	7ffb      	ldrb	r3, [r7, #31]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d108      	bne.n	800f17c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	2202      	movs	r2, #2
 800f170:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800f172:	68f8      	ldr	r0, [r7, #12]
 800f174:	f000 f81b 	bl	800f1ae <HAL_QSPI_Abort>
 800f178:	4603      	mov	r3, r0
 800f17a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2201      	movs	r2, #1
 800f180:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f184:	e00a      	b.n	800f19c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f18a:	f043 0208 	orr.w	r2, r3, #8
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800f192:	2301      	movs	r3, #1
 800f194:	77fb      	strb	r3, [r7, #31]
 800f196:	e001      	b.n	800f19c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f198:	2302      	movs	r3, #2
 800f19a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800f1a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3720      	adds	r7, #32
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800f1ae:	b580      	push	{r7, lr}
 800f1b0:	b086      	sub	sp, #24
 800f1b2:	af02      	add	r7, sp, #8
 800f1b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800f1ba:	f7fb fda9 	bl	800ad10 <HAL_GetTick>
 800f1be:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f1c6:	b2db      	uxtb	r3, r3
 800f1c8:	f003 0302 	and.w	r3, r3, #2
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d062      	beq.n	800f296 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f003 0304 	and.w	r3, r3, #4
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d017      	beq.n	800f216 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	681a      	ldr	r2, [r3, #0]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	f022 0204 	bic.w	r2, r2, #4
 800f1f4:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7fd fdce 	bl	800cd9c <HAL_DMA_Abort>
 800f200:	4603      	mov	r3, r0
 800f202:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800f204:	7bfb      	ldrb	r3, [r7, #15]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d005      	beq.n	800f216 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f20e:	f043 0204 	orr.w	r2, r3, #4
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	689b      	ldr	r3, [r3, #8]
 800f21c:	f003 0320 	and.w	r3, r3, #32
 800f220:	2b00      	cmp	r3, #0
 800f222:	d034      	beq.n	800f28e <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f042 0202 	orr.w	r2, r2, #2
 800f232:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f238:	9300      	str	r3, [sp, #0]
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	2201      	movs	r2, #1
 800f23e:	2102      	movs	r1, #2
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 f83b 	bl	800f2bc <QSPI_WaitFlagStateUntilTimeout>
 800f246:	4603      	mov	r3, r0
 800f248:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800f24a:	7bfb      	ldrb	r3, [r7, #15]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d10e      	bne.n	800f26e <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	2202      	movs	r2, #2
 800f256:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f25c:	9300      	str	r3, [sp, #0]
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	2200      	movs	r2, #0
 800f262:	2120      	movs	r1, #32
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 f829 	bl	800f2bc <QSPI_WaitFlagStateUntilTimeout>
 800f26a:	4603      	mov	r3, r0
 800f26c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d110      	bne.n	800f296 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	695a      	ldr	r2, [r3, #20]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800f282:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2201      	movs	r2, #1
 800f288:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f28c:	e003      	b.n	800f296 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2201      	movs	r2, #1
 800f292:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 800f296:	7bfb      	ldrb	r3, [r7, #15]
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3710      	adds	r7, #16
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	683a      	ldr	r2, [r7, #0]
 800f2ae:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800f2b0:	bf00      	nop
 800f2b2:	370c      	adds	r7, #12
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr

0800f2bc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	603b      	str	r3, [r7, #0]
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f2cc:	e01a      	b.n	800f304 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f2ce:	69bb      	ldr	r3, [r7, #24]
 800f2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2d4:	d016      	beq.n	800f304 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f2d6:	f7fb fd1b 	bl	800ad10 <HAL_GetTick>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	1ad3      	subs	r3, r2, r3
 800f2e0:	69ba      	ldr	r2, [r7, #24]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d302      	bcc.n	800f2ec <QSPI_WaitFlagStateUntilTimeout+0x30>
 800f2e6:	69bb      	ldr	r3, [r7, #24]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d10b      	bne.n	800f304 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2204      	movs	r2, #4
 800f2f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2f8:	f043 0201 	orr.w	r2, r3, #1
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800f300:	2301      	movs	r3, #1
 800f302:	e00e      	b.n	800f322 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	689a      	ldr	r2, [r3, #8]
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	4013      	ands	r3, r2
 800f30e:	2b00      	cmp	r3, #0
 800f310:	bf14      	ite	ne
 800f312:	2301      	movne	r3, #1
 800f314:	2300      	moveq	r3, #0
 800f316:	b2db      	uxtb	r3, r3
 800f318:	461a      	mov	r2, r3
 800f31a:	79fb      	ldrb	r3, [r7, #7]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d1d6      	bne.n	800f2ce <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f320:	2300      	movs	r3, #0
}
 800f322:	4618      	mov	r0, r3
 800f324:	3710      	adds	r7, #16
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}

0800f32a <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800f32a:	b480      	push	{r7}
 800f32c:	b085      	sub	sp, #20
 800f32e:	af00      	add	r7, sp, #0
 800f330:	60f8      	str	r0, [r7, #12]
 800f332:	60b9      	str	r1, [r7, #8]
 800f334:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d009      	beq.n	800f352 <QSPI_Config+0x28>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f344:	d005      	beq.n	800f352 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	3a01      	subs	r2, #1
 800f350:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	699b      	ldr	r3, [r3, #24]
 800f356:	2b00      	cmp	r3, #0
 800f358:	f000 80c1 	beq.w	800f4de <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	6a1b      	ldr	r3, [r3, #32]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d063      	beq.n	800f42c <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	68ba      	ldr	r2, [r7, #8]
 800f36a:	6892      	ldr	r2, [r2, #8]
 800f36c:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	69db      	ldr	r3, [r3, #28]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d031      	beq.n	800f3da <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f37e:	431a      	orrs	r2, r3
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f384:	431a      	orrs	r2, r3
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f38a:	431a      	orrs	r2, r3
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	695b      	ldr	r3, [r3, #20]
 800f390:	049b      	lsls	r3, r3, #18
 800f392:	431a      	orrs	r2, r3
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	691b      	ldr	r3, [r3, #16]
 800f398:	431a      	orrs	r2, r3
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	6a1b      	ldr	r3, [r3, #32]
 800f39e:	431a      	orrs	r2, r3
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	68db      	ldr	r3, [r3, #12]
 800f3a4:	431a      	orrs	r2, r3
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	69db      	ldr	r3, [r3, #28]
 800f3aa:	431a      	orrs	r2, r3
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	699b      	ldr	r3, [r3, #24]
 800f3b0:	431a      	orrs	r2, r3
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	ea42 0103 	orr.w	r1, r2, r3
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	687a      	ldr	r2, [r7, #4]
 800f3c0:	430a      	orrs	r2, r1
 800f3c2:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f3ca:	f000 813f 	beq.w	800f64c <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	68ba      	ldr	r2, [r7, #8]
 800f3d4:	6852      	ldr	r2, [r2, #4]
 800f3d6:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800f3d8:	e138      	b.n	800f64c <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3e2:	431a      	orrs	r2, r3
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3e8:	431a      	orrs	r2, r3
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3ee:	431a      	orrs	r2, r3
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	695b      	ldr	r3, [r3, #20]
 800f3f4:	049b      	lsls	r3, r3, #18
 800f3f6:	431a      	orrs	r2, r3
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	691b      	ldr	r3, [r3, #16]
 800f3fc:	431a      	orrs	r2, r3
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	6a1b      	ldr	r3, [r3, #32]
 800f402:	431a      	orrs	r2, r3
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	69db      	ldr	r3, [r3, #28]
 800f408:	431a      	orrs	r2, r3
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	699b      	ldr	r3, [r3, #24]
 800f40e:	431a      	orrs	r2, r3
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	ea42 0103 	orr.w	r1, r2, r3
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	430a      	orrs	r2, r1
 800f420:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2200      	movs	r2, #0
 800f428:	619a      	str	r2, [r3, #24]
}
 800f42a:	e10f      	b.n	800f64c <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	69db      	ldr	r3, [r3, #28]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d02e      	beq.n	800f492 <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f43c:	431a      	orrs	r2, r3
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f442:	431a      	orrs	r2, r3
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f448:	431a      	orrs	r2, r3
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	695b      	ldr	r3, [r3, #20]
 800f44e:	049b      	lsls	r3, r3, #18
 800f450:	431a      	orrs	r2, r3
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	6a1b      	ldr	r3, [r3, #32]
 800f456:	431a      	orrs	r2, r3
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	68db      	ldr	r3, [r3, #12]
 800f45c:	431a      	orrs	r2, r3
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	69db      	ldr	r3, [r3, #28]
 800f462:	431a      	orrs	r2, r3
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	699b      	ldr	r3, [r3, #24]
 800f468:	431a      	orrs	r2, r3
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	ea42 0103 	orr.w	r1, r2, r3
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	687a      	ldr	r2, [r7, #4]
 800f478:	430a      	orrs	r2, r1
 800f47a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f482:	f000 80e3 	beq.w	800f64c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	68ba      	ldr	r2, [r7, #8]
 800f48c:	6852      	ldr	r2, [r2, #4]
 800f48e:	619a      	str	r2, [r3, #24]
}
 800f490:	e0dc      	b.n	800f64c <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f49a:	431a      	orrs	r2, r3
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4a0:	431a      	orrs	r2, r3
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4a6:	431a      	orrs	r2, r3
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	695b      	ldr	r3, [r3, #20]
 800f4ac:	049b      	lsls	r3, r3, #18
 800f4ae:	431a      	orrs	r2, r3
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	6a1b      	ldr	r3, [r3, #32]
 800f4b4:	431a      	orrs	r2, r3
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	69db      	ldr	r3, [r3, #28]
 800f4ba:	431a      	orrs	r2, r3
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	699b      	ldr	r3, [r3, #24]
 800f4c0:	431a      	orrs	r2, r3
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	ea42 0103 	orr.w	r1, r2, r3
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	430a      	orrs	r2, r1
 800f4d2:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2200      	movs	r2, #0
 800f4da:	619a      	str	r2, [r3, #24]
}
 800f4dc:	e0b6      	b.n	800f64c <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	6a1b      	ldr	r3, [r3, #32]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d05d      	beq.n	800f5a2 <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	68ba      	ldr	r2, [r7, #8]
 800f4ec:	6892      	ldr	r2, [r2, #8]
 800f4ee:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	69db      	ldr	r3, [r3, #28]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d02e      	beq.n	800f556 <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f500:	431a      	orrs	r2, r3
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f506:	431a      	orrs	r2, r3
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f50c:	431a      	orrs	r2, r3
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	695b      	ldr	r3, [r3, #20]
 800f512:	049b      	lsls	r3, r3, #18
 800f514:	431a      	orrs	r2, r3
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	691b      	ldr	r3, [r3, #16]
 800f51a:	431a      	orrs	r2, r3
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	6a1b      	ldr	r3, [r3, #32]
 800f520:	431a      	orrs	r2, r3
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	68db      	ldr	r3, [r3, #12]
 800f526:	431a      	orrs	r2, r3
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	69db      	ldr	r3, [r3, #28]
 800f52c:	431a      	orrs	r2, r3
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	699b      	ldr	r3, [r3, #24]
 800f532:	ea42 0103 	orr.w	r1, r2, r3
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	687a      	ldr	r2, [r7, #4]
 800f53c:	430a      	orrs	r2, r1
 800f53e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f546:	f000 8081 	beq.w	800f64c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	68ba      	ldr	r2, [r7, #8]
 800f550:	6852      	ldr	r2, [r2, #4]
 800f552:	619a      	str	r2, [r3, #24]
}
 800f554:	e07a      	b.n	800f64c <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f55e:	431a      	orrs	r2, r3
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f564:	431a      	orrs	r2, r3
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f56a:	431a      	orrs	r2, r3
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	695b      	ldr	r3, [r3, #20]
 800f570:	049b      	lsls	r3, r3, #18
 800f572:	431a      	orrs	r2, r3
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	691b      	ldr	r3, [r3, #16]
 800f578:	431a      	orrs	r2, r3
 800f57a:	68bb      	ldr	r3, [r7, #8]
 800f57c:	6a1b      	ldr	r3, [r3, #32]
 800f57e:	431a      	orrs	r2, r3
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	69db      	ldr	r3, [r3, #28]
 800f584:	431a      	orrs	r2, r3
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	699b      	ldr	r3, [r3, #24]
 800f58a:	ea42 0103 	orr.w	r1, r2, r3
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	430a      	orrs	r2, r1
 800f596:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2200      	movs	r2, #0
 800f59e:	619a      	str	r2, [r3, #24]
}
 800f5a0:	e054      	b.n	800f64c <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	69db      	ldr	r3, [r3, #28]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d02a      	beq.n	800f600 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5b2:	431a      	orrs	r2, r3
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5b8:	431a      	orrs	r2, r3
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5be:	431a      	orrs	r2, r3
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	695b      	ldr	r3, [r3, #20]
 800f5c4:	049b      	lsls	r3, r3, #18
 800f5c6:	431a      	orrs	r2, r3
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	6a1b      	ldr	r3, [r3, #32]
 800f5cc:	431a      	orrs	r2, r3
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	68db      	ldr	r3, [r3, #12]
 800f5d2:	431a      	orrs	r2, r3
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	69db      	ldr	r3, [r3, #28]
 800f5d8:	431a      	orrs	r2, r3
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	699b      	ldr	r3, [r3, #24]
 800f5de:	ea42 0103 	orr.w	r1, r2, r3
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	430a      	orrs	r2, r1
 800f5ea:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800f5f2:	d02b      	beq.n	800f64c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	68ba      	ldr	r2, [r7, #8]
 800f5fa:	6852      	ldr	r2, [r2, #4]
 800f5fc:	619a      	str	r2, [r3, #24]
}
 800f5fe:	e025      	b.n	800f64c <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f604:	2b00      	cmp	r3, #0
 800f606:	d021      	beq.n	800f64c <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f610:	431a      	orrs	r2, r3
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f616:	431a      	orrs	r2, r3
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f61c:	431a      	orrs	r2, r3
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	695b      	ldr	r3, [r3, #20]
 800f622:	049b      	lsls	r3, r3, #18
 800f624:	431a      	orrs	r2, r3
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	6a1b      	ldr	r3, [r3, #32]
 800f62a:	431a      	orrs	r2, r3
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	69db      	ldr	r3, [r3, #28]
 800f630:	431a      	orrs	r2, r3
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	699b      	ldr	r3, [r3, #24]
 800f636:	ea42 0103 	orr.w	r1, r2, r3
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	687a      	ldr	r2, [r7, #4]
 800f640:	430a      	orrs	r2, r1
 800f642:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2200      	movs	r2, #0
 800f64a:	619a      	str	r2, [r3, #24]
}
 800f64c:	bf00      	nop
 800f64e:	3714      	adds	r7, #20
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr

0800f658 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b088      	sub	sp, #32
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d101      	bne.n	800f66a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f666:	2301      	movs	r3, #1
 800f668:	e3ca      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f66a:	4b97      	ldr	r3, [pc, #604]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f66c:	689b      	ldr	r3, [r3, #8]
 800f66e:	f003 030c 	and.w	r3, r3, #12
 800f672:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f674:	4b94      	ldr	r3, [pc, #592]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f676:	68db      	ldr	r3, [r3, #12]
 800f678:	f003 0303 	and.w	r3, r3, #3
 800f67c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	f003 0310 	and.w	r3, r3, #16
 800f686:	2b00      	cmp	r3, #0
 800f688:	f000 80e4 	beq.w	800f854 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d007      	beq.n	800f6a2 <HAL_RCC_OscConfig+0x4a>
 800f692:	69bb      	ldr	r3, [r7, #24]
 800f694:	2b0c      	cmp	r3, #12
 800f696:	f040 808b 	bne.w	800f7b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	2b01      	cmp	r3, #1
 800f69e:	f040 8087 	bne.w	800f7b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f6a2:	4b89      	ldr	r3, [pc, #548]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f003 0302 	and.w	r3, r3, #2
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d005      	beq.n	800f6ba <HAL_RCC_OscConfig+0x62>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	699b      	ldr	r3, [r3, #24]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d101      	bne.n	800f6ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	e3a2      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6a1a      	ldr	r2, [r3, #32]
 800f6be:	4b82      	ldr	r3, [pc, #520]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f003 0308 	and.w	r3, r3, #8
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d004      	beq.n	800f6d4 <HAL_RCC_OscConfig+0x7c>
 800f6ca:	4b7f      	ldr	r3, [pc, #508]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f6d2:	e005      	b.n	800f6e0 <HAL_RCC_OscConfig+0x88>
 800f6d4:	4b7c      	ldr	r3, [pc, #496]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f6d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f6da:	091b      	lsrs	r3, r3, #4
 800f6dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d223      	bcs.n	800f72c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6a1b      	ldr	r3, [r3, #32]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f000 fd55 	bl	8010198 <RCC_SetFlashLatencyFromMSIRange>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d001      	beq.n	800f6f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	e383      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f6f8:	4b73      	ldr	r3, [pc, #460]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4a72      	ldr	r2, [pc, #456]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f6fe:	f043 0308 	orr.w	r3, r3, #8
 800f702:	6013      	str	r3, [r2, #0]
 800f704:	4b70      	ldr	r3, [pc, #448]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	6a1b      	ldr	r3, [r3, #32]
 800f710:	496d      	ldr	r1, [pc, #436]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f712:	4313      	orrs	r3, r2
 800f714:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f716:	4b6c      	ldr	r3, [pc, #432]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f718:	685b      	ldr	r3, [r3, #4]
 800f71a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	69db      	ldr	r3, [r3, #28]
 800f722:	021b      	lsls	r3, r3, #8
 800f724:	4968      	ldr	r1, [pc, #416]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f726:	4313      	orrs	r3, r2
 800f728:	604b      	str	r3, [r1, #4]
 800f72a:	e025      	b.n	800f778 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f72c:	4b66      	ldr	r3, [pc, #408]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4a65      	ldr	r2, [pc, #404]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f732:	f043 0308 	orr.w	r3, r3, #8
 800f736:	6013      	str	r3, [r2, #0]
 800f738:	4b63      	ldr	r3, [pc, #396]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6a1b      	ldr	r3, [r3, #32]
 800f744:	4960      	ldr	r1, [pc, #384]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f746:	4313      	orrs	r3, r2
 800f748:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f74a:	4b5f      	ldr	r3, [pc, #380]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	69db      	ldr	r3, [r3, #28]
 800f756:	021b      	lsls	r3, r3, #8
 800f758:	495b      	ldr	r1, [pc, #364]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f75a:	4313      	orrs	r3, r2
 800f75c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f75e:	69bb      	ldr	r3, [r7, #24]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d109      	bne.n	800f778 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6a1b      	ldr	r3, [r3, #32]
 800f768:	4618      	mov	r0, r3
 800f76a:	f000 fd15 	bl	8010198 <RCC_SetFlashLatencyFromMSIRange>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	d001      	beq.n	800f778 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800f774:	2301      	movs	r3, #1
 800f776:	e343      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f778:	f000 fc4a 	bl	8010010 <HAL_RCC_GetSysClockFreq>
 800f77c:	4602      	mov	r2, r0
 800f77e:	4b52      	ldr	r3, [pc, #328]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f780:	689b      	ldr	r3, [r3, #8]
 800f782:	091b      	lsrs	r3, r3, #4
 800f784:	f003 030f 	and.w	r3, r3, #15
 800f788:	4950      	ldr	r1, [pc, #320]	@ (800f8cc <HAL_RCC_OscConfig+0x274>)
 800f78a:	5ccb      	ldrb	r3, [r1, r3]
 800f78c:	f003 031f 	and.w	r3, r3, #31
 800f790:	fa22 f303 	lsr.w	r3, r2, r3
 800f794:	4a4e      	ldr	r2, [pc, #312]	@ (800f8d0 <HAL_RCC_OscConfig+0x278>)
 800f796:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800f798:	4b4e      	ldr	r3, [pc, #312]	@ (800f8d4 <HAL_RCC_OscConfig+0x27c>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7fb fa67 	bl	800ac70 <HAL_InitTick>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800f7a6:	7bfb      	ldrb	r3, [r7, #15]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d052      	beq.n	800f852 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800f7ac:	7bfb      	ldrb	r3, [r7, #15]
 800f7ae:	e327      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	699b      	ldr	r3, [r3, #24]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d032      	beq.n	800f81e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f7b8:	4b43      	ldr	r3, [pc, #268]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4a42      	ldr	r2, [pc, #264]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f7be:	f043 0301 	orr.w	r3, r3, #1
 800f7c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f7c4:	f7fb faa4 	bl	800ad10 <HAL_GetTick>
 800f7c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f7ca:	e008      	b.n	800f7de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f7cc:	f7fb faa0 	bl	800ad10 <HAL_GetTick>
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	2b02      	cmp	r3, #2
 800f7d8:	d901      	bls.n	800f7de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800f7da:	2303      	movs	r3, #3
 800f7dc:	e310      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f7de:	4b3a      	ldr	r3, [pc, #232]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f003 0302 	and.w	r3, r3, #2
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d0f0      	beq.n	800f7cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f7ea:	4b37      	ldr	r3, [pc, #220]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	4a36      	ldr	r2, [pc, #216]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f7f0:	f043 0308 	orr.w	r3, r3, #8
 800f7f4:	6013      	str	r3, [r2, #0]
 800f7f6:	4b34      	ldr	r3, [pc, #208]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6a1b      	ldr	r3, [r3, #32]
 800f802:	4931      	ldr	r1, [pc, #196]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f804:	4313      	orrs	r3, r2
 800f806:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f808:	4b2f      	ldr	r3, [pc, #188]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	69db      	ldr	r3, [r3, #28]
 800f814:	021b      	lsls	r3, r3, #8
 800f816:	492c      	ldr	r1, [pc, #176]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f818:	4313      	orrs	r3, r2
 800f81a:	604b      	str	r3, [r1, #4]
 800f81c:	e01a      	b.n	800f854 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f81e:	4b2a      	ldr	r3, [pc, #168]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	4a29      	ldr	r2, [pc, #164]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f824:	f023 0301 	bic.w	r3, r3, #1
 800f828:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f82a:	f7fb fa71 	bl	800ad10 <HAL_GetTick>
 800f82e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f830:	e008      	b.n	800f844 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f832:	f7fb fa6d 	bl	800ad10 <HAL_GetTick>
 800f836:	4602      	mov	r2, r0
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	1ad3      	subs	r3, r2, r3
 800f83c:	2b02      	cmp	r3, #2
 800f83e:	d901      	bls.n	800f844 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800f840:	2303      	movs	r3, #3
 800f842:	e2dd      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f844:	4b20      	ldr	r3, [pc, #128]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f003 0302 	and.w	r3, r3, #2
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d1f0      	bne.n	800f832 <HAL_RCC_OscConfig+0x1da>
 800f850:	e000      	b.n	800f854 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f852:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f003 0301 	and.w	r3, r3, #1
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d074      	beq.n	800f94a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800f860:	69bb      	ldr	r3, [r7, #24]
 800f862:	2b08      	cmp	r3, #8
 800f864:	d005      	beq.n	800f872 <HAL_RCC_OscConfig+0x21a>
 800f866:	69bb      	ldr	r3, [r7, #24]
 800f868:	2b0c      	cmp	r3, #12
 800f86a:	d10e      	bne.n	800f88a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	2b03      	cmp	r3, #3
 800f870:	d10b      	bne.n	800f88a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f872:	4b15      	ldr	r3, [pc, #84]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d064      	beq.n	800f948 <HAL_RCC_OscConfig+0x2f0>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d160      	bne.n	800f948 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800f886:	2301      	movs	r3, #1
 800f888:	e2ba      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f892:	d106      	bne.n	800f8a2 <HAL_RCC_OscConfig+0x24a>
 800f894:	4b0c      	ldr	r3, [pc, #48]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	4a0b      	ldr	r2, [pc, #44]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f89a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f89e:	6013      	str	r3, [r2, #0]
 800f8a0:	e026      	b.n	800f8f0 <HAL_RCC_OscConfig+0x298>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f8aa:	d115      	bne.n	800f8d8 <HAL_RCC_OscConfig+0x280>
 800f8ac:	4b06      	ldr	r3, [pc, #24]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	4a05      	ldr	r2, [pc, #20]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f8b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f8b6:	6013      	str	r3, [r2, #0]
 800f8b8:	4b03      	ldr	r3, [pc, #12]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	4a02      	ldr	r2, [pc, #8]	@ (800f8c8 <HAL_RCC_OscConfig+0x270>)
 800f8be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f8c2:	6013      	str	r3, [r2, #0]
 800f8c4:	e014      	b.n	800f8f0 <HAL_RCC_OscConfig+0x298>
 800f8c6:	bf00      	nop
 800f8c8:	40021000 	.word	0x40021000
 800f8cc:	08017588 	.word	0x08017588
 800f8d0:	20000168 	.word	0x20000168
 800f8d4:	20000174 	.word	0x20000174
 800f8d8:	4ba0      	ldr	r3, [pc, #640]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4a9f      	ldr	r2, [pc, #636]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f8de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f8e2:	6013      	str	r3, [r2, #0]
 800f8e4:	4b9d      	ldr	r3, [pc, #628]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	4a9c      	ldr	r2, [pc, #624]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f8ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f8ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	685b      	ldr	r3, [r3, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d013      	beq.n	800f920 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f8f8:	f7fb fa0a 	bl	800ad10 <HAL_GetTick>
 800f8fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f8fe:	e008      	b.n	800f912 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f900:	f7fb fa06 	bl	800ad10 <HAL_GetTick>
 800f904:	4602      	mov	r2, r0
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	1ad3      	subs	r3, r2, r3
 800f90a:	2b64      	cmp	r3, #100	@ 0x64
 800f90c:	d901      	bls.n	800f912 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800f90e:	2303      	movs	r3, #3
 800f910:	e276      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f912:	4b92      	ldr	r3, [pc, #584]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d0f0      	beq.n	800f900 <HAL_RCC_OscConfig+0x2a8>
 800f91e:	e014      	b.n	800f94a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f920:	f7fb f9f6 	bl	800ad10 <HAL_GetTick>
 800f924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f926:	e008      	b.n	800f93a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f928:	f7fb f9f2 	bl	800ad10 <HAL_GetTick>
 800f92c:	4602      	mov	r2, r0
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	1ad3      	subs	r3, r2, r3
 800f932:	2b64      	cmp	r3, #100	@ 0x64
 800f934:	d901      	bls.n	800f93a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800f936:	2303      	movs	r3, #3
 800f938:	e262      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f93a:	4b88      	ldr	r3, [pc, #544]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f942:	2b00      	cmp	r3, #0
 800f944:	d1f0      	bne.n	800f928 <HAL_RCC_OscConfig+0x2d0>
 800f946:	e000      	b.n	800f94a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f003 0302 	and.w	r3, r3, #2
 800f952:	2b00      	cmp	r3, #0
 800f954:	d060      	beq.n	800fa18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800f956:	69bb      	ldr	r3, [r7, #24]
 800f958:	2b04      	cmp	r3, #4
 800f95a:	d005      	beq.n	800f968 <HAL_RCC_OscConfig+0x310>
 800f95c:	69bb      	ldr	r3, [r7, #24]
 800f95e:	2b0c      	cmp	r3, #12
 800f960:	d119      	bne.n	800f996 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	2b02      	cmp	r3, #2
 800f966:	d116      	bne.n	800f996 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f968:	4b7c      	ldr	r3, [pc, #496]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f970:	2b00      	cmp	r3, #0
 800f972:	d005      	beq.n	800f980 <HAL_RCC_OscConfig+0x328>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	68db      	ldr	r3, [r3, #12]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d101      	bne.n	800f980 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800f97c:	2301      	movs	r3, #1
 800f97e:	e23f      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f980:	4b76      	ldr	r3, [pc, #472]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	691b      	ldr	r3, [r3, #16]
 800f98c:	061b      	lsls	r3, r3, #24
 800f98e:	4973      	ldr	r1, [pc, #460]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f990:	4313      	orrs	r3, r2
 800f992:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f994:	e040      	b.n	800fa18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d023      	beq.n	800f9e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f99e:	4b6f      	ldr	r3, [pc, #444]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	4a6e      	ldr	r2, [pc, #440]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f9a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f9a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f9aa:	f7fb f9b1 	bl	800ad10 <HAL_GetTick>
 800f9ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f9b0:	e008      	b.n	800f9c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f9b2:	f7fb f9ad 	bl	800ad10 <HAL_GetTick>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	1ad3      	subs	r3, r2, r3
 800f9bc:	2b02      	cmp	r3, #2
 800f9be:	d901      	bls.n	800f9c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800f9c0:	2303      	movs	r3, #3
 800f9c2:	e21d      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f9c4:	4b65      	ldr	r3, [pc, #404]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d0f0      	beq.n	800f9b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f9d0:	4b62      	ldr	r3, [pc, #392]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	691b      	ldr	r3, [r3, #16]
 800f9dc:	061b      	lsls	r3, r3, #24
 800f9de:	495f      	ldr	r1, [pc, #380]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	604b      	str	r3, [r1, #4]
 800f9e4:	e018      	b.n	800fa18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f9e6:	4b5d      	ldr	r3, [pc, #372]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	4a5c      	ldr	r2, [pc, #368]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800f9ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f9f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f9f2:	f7fb f98d 	bl	800ad10 <HAL_GetTick>
 800f9f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f9f8:	e008      	b.n	800fa0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f9fa:	f7fb f989 	bl	800ad10 <HAL_GetTick>
 800f9fe:	4602      	mov	r2, r0
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	1ad3      	subs	r3, r2, r3
 800fa04:	2b02      	cmp	r3, #2
 800fa06:	d901      	bls.n	800fa0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800fa08:	2303      	movs	r3, #3
 800fa0a:	e1f9      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fa0c:	4b53      	ldr	r3, [pc, #332]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d1f0      	bne.n	800f9fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f003 0308 	and.w	r3, r3, #8
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d03c      	beq.n	800fa9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	695b      	ldr	r3, [r3, #20]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d01c      	beq.n	800fa66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fa2c:	4b4b      	ldr	r3, [pc, #300]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fa2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa32:	4a4a      	ldr	r2, [pc, #296]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fa34:	f043 0301 	orr.w	r3, r3, #1
 800fa38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa3c:	f7fb f968 	bl	800ad10 <HAL_GetTick>
 800fa40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fa42:	e008      	b.n	800fa56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fa44:	f7fb f964 	bl	800ad10 <HAL_GetTick>
 800fa48:	4602      	mov	r2, r0
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	1ad3      	subs	r3, r2, r3
 800fa4e:	2b02      	cmp	r3, #2
 800fa50:	d901      	bls.n	800fa56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800fa52:	2303      	movs	r3, #3
 800fa54:	e1d4      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fa56:	4b41      	ldr	r3, [pc, #260]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fa58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa5c:	f003 0302 	and.w	r3, r3, #2
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d0ef      	beq.n	800fa44 <HAL_RCC_OscConfig+0x3ec>
 800fa64:	e01b      	b.n	800fa9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fa66:	4b3d      	ldr	r3, [pc, #244]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fa68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa6c:	4a3b      	ldr	r2, [pc, #236]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fa6e:	f023 0301 	bic.w	r3, r3, #1
 800fa72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa76:	f7fb f94b 	bl	800ad10 <HAL_GetTick>
 800fa7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fa7c:	e008      	b.n	800fa90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fa7e:	f7fb f947 	bl	800ad10 <HAL_GetTick>
 800fa82:	4602      	mov	r2, r0
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	1ad3      	subs	r3, r2, r3
 800fa88:	2b02      	cmp	r3, #2
 800fa8a:	d901      	bls.n	800fa90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800fa8c:	2303      	movs	r3, #3
 800fa8e:	e1b7      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fa90:	4b32      	ldr	r3, [pc, #200]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fa92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa96:	f003 0302 	and.w	r3, r3, #2
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d1ef      	bne.n	800fa7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	f003 0304 	and.w	r3, r3, #4
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	f000 80a6 	beq.w	800fbf8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800faac:	2300      	movs	r3, #0
 800faae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800fab0:	4b2a      	ldr	r3, [pc, #168]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d10d      	bne.n	800fad8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fabc:	4b27      	ldr	r3, [pc, #156]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fabe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fac0:	4a26      	ldr	r2, [pc, #152]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fac6:	6593      	str	r3, [r2, #88]	@ 0x58
 800fac8:	4b24      	ldr	r3, [pc, #144]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800faca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800facc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fad0:	60bb      	str	r3, [r7, #8]
 800fad2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fad4:	2301      	movs	r3, #1
 800fad6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fad8:	4b21      	ldr	r3, [pc, #132]	@ (800fb60 <HAL_RCC_OscConfig+0x508>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d118      	bne.n	800fb16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fae4:	4b1e      	ldr	r3, [pc, #120]	@ (800fb60 <HAL_RCC_OscConfig+0x508>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	4a1d      	ldr	r2, [pc, #116]	@ (800fb60 <HAL_RCC_OscConfig+0x508>)
 800faea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800faee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800faf0:	f7fb f90e 	bl	800ad10 <HAL_GetTick>
 800faf4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800faf6:	e008      	b.n	800fb0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800faf8:	f7fb f90a 	bl	800ad10 <HAL_GetTick>
 800fafc:	4602      	mov	r2, r0
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	1ad3      	subs	r3, r2, r3
 800fb02:	2b02      	cmp	r3, #2
 800fb04:	d901      	bls.n	800fb0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800fb06:	2303      	movs	r3, #3
 800fb08:	e17a      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fb0a:	4b15      	ldr	r3, [pc, #84]	@ (800fb60 <HAL_RCC_OscConfig+0x508>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d0f0      	beq.n	800faf8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	689b      	ldr	r3, [r3, #8]
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d108      	bne.n	800fb30 <HAL_RCC_OscConfig+0x4d8>
 800fb1e:	4b0f      	ldr	r3, [pc, #60]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fb20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb24:	4a0d      	ldr	r2, [pc, #52]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fb26:	f043 0301 	orr.w	r3, r3, #1
 800fb2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fb2e:	e029      	b.n	800fb84 <HAL_RCC_OscConfig+0x52c>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	689b      	ldr	r3, [r3, #8]
 800fb34:	2b05      	cmp	r3, #5
 800fb36:	d115      	bne.n	800fb64 <HAL_RCC_OscConfig+0x50c>
 800fb38:	4b08      	ldr	r3, [pc, #32]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fb3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb3e:	4a07      	ldr	r2, [pc, #28]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fb40:	f043 0304 	orr.w	r3, r3, #4
 800fb44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fb48:	4b04      	ldr	r3, [pc, #16]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fb4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb4e:	4a03      	ldr	r2, [pc, #12]	@ (800fb5c <HAL_RCC_OscConfig+0x504>)
 800fb50:	f043 0301 	orr.w	r3, r3, #1
 800fb54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fb58:	e014      	b.n	800fb84 <HAL_RCC_OscConfig+0x52c>
 800fb5a:	bf00      	nop
 800fb5c:	40021000 	.word	0x40021000
 800fb60:	40007000 	.word	0x40007000
 800fb64:	4b9c      	ldr	r3, [pc, #624]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fb66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb6a:	4a9b      	ldr	r2, [pc, #620]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fb6c:	f023 0301 	bic.w	r3, r3, #1
 800fb70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800fb74:	4b98      	ldr	r3, [pc, #608]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fb76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb7a:	4a97      	ldr	r2, [pc, #604]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fb7c:	f023 0304 	bic.w	r3, r3, #4
 800fb80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	689b      	ldr	r3, [r3, #8]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d016      	beq.n	800fbba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fb8c:	f7fb f8c0 	bl	800ad10 <HAL_GetTick>
 800fb90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fb92:	e00a      	b.n	800fbaa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fb94:	f7fb f8bc 	bl	800ad10 <HAL_GetTick>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	1ad3      	subs	r3, r2, r3
 800fb9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d901      	bls.n	800fbaa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800fba6:	2303      	movs	r3, #3
 800fba8:	e12a      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fbaa:	4b8b      	ldr	r3, [pc, #556]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fbac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fbb0:	f003 0302 	and.w	r3, r3, #2
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d0ed      	beq.n	800fb94 <HAL_RCC_OscConfig+0x53c>
 800fbb8:	e015      	b.n	800fbe6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fbba:	f7fb f8a9 	bl	800ad10 <HAL_GetTick>
 800fbbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fbc0:	e00a      	b.n	800fbd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fbc2:	f7fb f8a5 	bl	800ad10 <HAL_GetTick>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	1ad3      	subs	r3, r2, r3
 800fbcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d901      	bls.n	800fbd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800fbd4:	2303      	movs	r3, #3
 800fbd6:	e113      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fbd8:	4b7f      	ldr	r3, [pc, #508]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fbda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fbde:	f003 0302 	and.w	r3, r3, #2
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d1ed      	bne.n	800fbc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fbe6:	7ffb      	ldrb	r3, [r7, #31]
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d105      	bne.n	800fbf8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fbec:	4b7a      	ldr	r3, [pc, #488]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fbee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbf0:	4a79      	ldr	r2, [pc, #484]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fbf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fbf6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f000 80fe 	beq.w	800fdfe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc06:	2b02      	cmp	r3, #2
 800fc08:	f040 80d0 	bne.w	800fdac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800fc0c:	4b72      	ldr	r3, [pc, #456]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	f003 0203 	and.w	r2, r3, #3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc1c:	429a      	cmp	r2, r3
 800fc1e:	d130      	bne.n	800fc82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc2a:	3b01      	subs	r3, #1
 800fc2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d127      	bne.n	800fc82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	d11f      	bne.n	800fc82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800fc4c:	2a07      	cmp	r2, #7
 800fc4e:	bf14      	ite	ne
 800fc50:	2201      	movne	r2, #1
 800fc52:	2200      	moveq	r2, #0
 800fc54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d113      	bne.n	800fc82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc64:	085b      	lsrs	r3, r3, #1
 800fc66:	3b01      	subs	r3, #1
 800fc68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d109      	bne.n	800fc82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc78:	085b      	lsrs	r3, r3, #1
 800fc7a:	3b01      	subs	r3, #1
 800fc7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d06e      	beq.n	800fd60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fc82:	69bb      	ldr	r3, [r7, #24]
 800fc84:	2b0c      	cmp	r3, #12
 800fc86:	d069      	beq.n	800fd5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800fc88:	4b53      	ldr	r3, [pc, #332]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d105      	bne.n	800fca0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800fc94:	4b50      	ldr	r3, [pc, #320]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d001      	beq.n	800fca4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800fca0:	2301      	movs	r3, #1
 800fca2:	e0ad      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800fca4:	4b4c      	ldr	r3, [pc, #304]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	4a4b      	ldr	r2, [pc, #300]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fcaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fcae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fcb0:	f7fb f82e 	bl	800ad10 <HAL_GetTick>
 800fcb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fcb6:	e008      	b.n	800fcca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fcb8:	f7fb f82a 	bl	800ad10 <HAL_GetTick>
 800fcbc:	4602      	mov	r2, r0
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	1ad3      	subs	r3, r2, r3
 800fcc2:	2b02      	cmp	r3, #2
 800fcc4:	d901      	bls.n	800fcca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800fcc6:	2303      	movs	r3, #3
 800fcc8:	e09a      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fcca:	4b43      	ldr	r3, [pc, #268]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d1f0      	bne.n	800fcb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fcd6:	4b40      	ldr	r3, [pc, #256]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fcd8:	68da      	ldr	r2, [r3, #12]
 800fcda:	4b40      	ldr	r3, [pc, #256]	@ (800fddc <HAL_RCC_OscConfig+0x784>)
 800fcdc:	4013      	ands	r3, r2
 800fcde:	687a      	ldr	r2, [r7, #4]
 800fce0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800fce2:	687a      	ldr	r2, [r7, #4]
 800fce4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fce6:	3a01      	subs	r2, #1
 800fce8:	0112      	lsls	r2, r2, #4
 800fcea:	4311      	orrs	r1, r2
 800fcec:	687a      	ldr	r2, [r7, #4]
 800fcee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800fcf0:	0212      	lsls	r2, r2, #8
 800fcf2:	4311      	orrs	r1, r2
 800fcf4:	687a      	ldr	r2, [r7, #4]
 800fcf6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800fcf8:	0852      	lsrs	r2, r2, #1
 800fcfa:	3a01      	subs	r2, #1
 800fcfc:	0552      	lsls	r2, r2, #21
 800fcfe:	4311      	orrs	r1, r2
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800fd04:	0852      	lsrs	r2, r2, #1
 800fd06:	3a01      	subs	r2, #1
 800fd08:	0652      	lsls	r2, r2, #25
 800fd0a:	4311      	orrs	r1, r2
 800fd0c:	687a      	ldr	r2, [r7, #4]
 800fd0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800fd10:	0912      	lsrs	r2, r2, #4
 800fd12:	0452      	lsls	r2, r2, #17
 800fd14:	430a      	orrs	r2, r1
 800fd16:	4930      	ldr	r1, [pc, #192]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fd18:	4313      	orrs	r3, r2
 800fd1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800fd1c:	4b2e      	ldr	r3, [pc, #184]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4a2d      	ldr	r2, [pc, #180]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fd22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fd26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fd28:	4b2b      	ldr	r3, [pc, #172]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fd2a:	68db      	ldr	r3, [r3, #12]
 800fd2c:	4a2a      	ldr	r2, [pc, #168]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fd2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fd32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fd34:	f7fa ffec 	bl	800ad10 <HAL_GetTick>
 800fd38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd3a:	e008      	b.n	800fd4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fd3c:	f7fa ffe8 	bl	800ad10 <HAL_GetTick>
 800fd40:	4602      	mov	r2, r0
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	1ad3      	subs	r3, r2, r3
 800fd46:	2b02      	cmp	r3, #2
 800fd48:	d901      	bls.n	800fd4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800fd4a:	2303      	movs	r3, #3
 800fd4c:	e058      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd4e:	4b22      	ldr	r3, [pc, #136]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d0f0      	beq.n	800fd3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fd5a:	e050      	b.n	800fdfe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	e04f      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd60:	4b1d      	ldr	r3, [pc, #116]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d148      	bne.n	800fdfe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800fd6c:	4b1a      	ldr	r3, [pc, #104]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a19      	ldr	r2, [pc, #100]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fd72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fd76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fd78:	4b17      	ldr	r3, [pc, #92]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fd7a:	68db      	ldr	r3, [r3, #12]
 800fd7c:	4a16      	ldr	r2, [pc, #88]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fd7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fd82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800fd84:	f7fa ffc4 	bl	800ad10 <HAL_GetTick>
 800fd88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd8a:	e008      	b.n	800fd9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fd8c:	f7fa ffc0 	bl	800ad10 <HAL_GetTick>
 800fd90:	4602      	mov	r2, r0
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	1ad3      	subs	r3, r2, r3
 800fd96:	2b02      	cmp	r3, #2
 800fd98:	d901      	bls.n	800fd9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800fd9a:	2303      	movs	r3, #3
 800fd9c:	e030      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd9e:	4b0e      	ldr	r3, [pc, #56]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d0f0      	beq.n	800fd8c <HAL_RCC_OscConfig+0x734>
 800fdaa:	e028      	b.n	800fdfe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fdac:	69bb      	ldr	r3, [r7, #24]
 800fdae:	2b0c      	cmp	r3, #12
 800fdb0:	d023      	beq.n	800fdfa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fdb2:	4b09      	ldr	r3, [pc, #36]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4a08      	ldr	r2, [pc, #32]	@ (800fdd8 <HAL_RCC_OscConfig+0x780>)
 800fdb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fdbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fdbe:	f7fa ffa7 	bl	800ad10 <HAL_GetTick>
 800fdc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fdc4:	e00c      	b.n	800fde0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fdc6:	f7fa ffa3 	bl	800ad10 <HAL_GetTick>
 800fdca:	4602      	mov	r2, r0
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	1ad3      	subs	r3, r2, r3
 800fdd0:	2b02      	cmp	r3, #2
 800fdd2:	d905      	bls.n	800fde0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800fdd4:	2303      	movs	r3, #3
 800fdd6:	e013      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
 800fdd8:	40021000 	.word	0x40021000
 800fddc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fde0:	4b09      	ldr	r3, [pc, #36]	@ (800fe08 <HAL_RCC_OscConfig+0x7b0>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d1ec      	bne.n	800fdc6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800fdec:	4b06      	ldr	r3, [pc, #24]	@ (800fe08 <HAL_RCC_OscConfig+0x7b0>)
 800fdee:	68da      	ldr	r2, [r3, #12]
 800fdf0:	4905      	ldr	r1, [pc, #20]	@ (800fe08 <HAL_RCC_OscConfig+0x7b0>)
 800fdf2:	4b06      	ldr	r3, [pc, #24]	@ (800fe0c <HAL_RCC_OscConfig+0x7b4>)
 800fdf4:	4013      	ands	r3, r2
 800fdf6:	60cb      	str	r3, [r1, #12]
 800fdf8:	e001      	b.n	800fdfe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	e000      	b.n	800fe00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800fdfe:	2300      	movs	r3, #0
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3720      	adds	r7, #32
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	40021000 	.word	0x40021000
 800fe0c:	feeefffc 	.word	0xfeeefffc

0800fe10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d101      	bne.n	800fe24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fe20:	2301      	movs	r3, #1
 800fe22:	e0e7      	b.n	800fff4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fe24:	4b75      	ldr	r3, [pc, #468]	@ (800fffc <HAL_RCC_ClockConfig+0x1ec>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f003 0307 	and.w	r3, r3, #7
 800fe2c:	683a      	ldr	r2, [r7, #0]
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d910      	bls.n	800fe54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fe32:	4b72      	ldr	r3, [pc, #456]	@ (800fffc <HAL_RCC_ClockConfig+0x1ec>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	f023 0207 	bic.w	r2, r3, #7
 800fe3a:	4970      	ldr	r1, [pc, #448]	@ (800fffc <HAL_RCC_ClockConfig+0x1ec>)
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	4313      	orrs	r3, r2
 800fe40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fe42:	4b6e      	ldr	r3, [pc, #440]	@ (800fffc <HAL_RCC_ClockConfig+0x1ec>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	f003 0307 	and.w	r3, r3, #7
 800fe4a:	683a      	ldr	r2, [r7, #0]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d001      	beq.n	800fe54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800fe50:	2301      	movs	r3, #1
 800fe52:	e0cf      	b.n	800fff4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	f003 0302 	and.w	r3, r3, #2
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d010      	beq.n	800fe82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	689a      	ldr	r2, [r3, #8]
 800fe64:	4b66      	ldr	r3, [pc, #408]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800fe66:	689b      	ldr	r3, [r3, #8]
 800fe68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d908      	bls.n	800fe82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fe70:	4b63      	ldr	r3, [pc, #396]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800fe72:	689b      	ldr	r3, [r3, #8]
 800fe74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	689b      	ldr	r3, [r3, #8]
 800fe7c:	4960      	ldr	r1, [pc, #384]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800fe7e:	4313      	orrs	r3, r2
 800fe80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f003 0301 	and.w	r3, r3, #1
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d04c      	beq.n	800ff28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	2b03      	cmp	r3, #3
 800fe94:	d107      	bne.n	800fea6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fe96:	4b5a      	ldr	r3, [pc, #360]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d121      	bne.n	800fee6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800fea2:	2301      	movs	r3, #1
 800fea4:	e0a6      	b.n	800fff4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	685b      	ldr	r3, [r3, #4]
 800feaa:	2b02      	cmp	r3, #2
 800feac:	d107      	bne.n	800febe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800feae:	4b54      	ldr	r3, [pc, #336]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d115      	bne.n	800fee6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800feba:	2301      	movs	r3, #1
 800febc:	e09a      	b.n	800fff4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d107      	bne.n	800fed6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fec6:	4b4e      	ldr	r3, [pc, #312]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	f003 0302 	and.w	r3, r3, #2
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d109      	bne.n	800fee6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800fed2:	2301      	movs	r3, #1
 800fed4:	e08e      	b.n	800fff4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fed6:	4b4a      	ldr	r3, [pc, #296]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d101      	bne.n	800fee6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800fee2:	2301      	movs	r3, #1
 800fee4:	e086      	b.n	800fff4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fee6:	4b46      	ldr	r3, [pc, #280]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800fee8:	689b      	ldr	r3, [r3, #8]
 800feea:	f023 0203 	bic.w	r2, r3, #3
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	4943      	ldr	r1, [pc, #268]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800fef4:	4313      	orrs	r3, r2
 800fef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fef8:	f7fa ff0a 	bl	800ad10 <HAL_GetTick>
 800fefc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fefe:	e00a      	b.n	800ff16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ff00:	f7fa ff06 	bl	800ad10 <HAL_GetTick>
 800ff04:	4602      	mov	r2, r0
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff0e:	4293      	cmp	r3, r2
 800ff10:	d901      	bls.n	800ff16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800ff12:	2303      	movs	r3, #3
 800ff14:	e06e      	b.n	800fff4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ff16:	4b3a      	ldr	r3, [pc, #232]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800ff18:	689b      	ldr	r3, [r3, #8]
 800ff1a:	f003 020c 	and.w	r2, r3, #12
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	009b      	lsls	r3, r3, #2
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d1eb      	bne.n	800ff00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f003 0302 	and.w	r3, r3, #2
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d010      	beq.n	800ff56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	689a      	ldr	r2, [r3, #8]
 800ff38:	4b31      	ldr	r3, [pc, #196]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800ff3a:	689b      	ldr	r3, [r3, #8]
 800ff3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d208      	bcs.n	800ff56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ff44:	4b2e      	ldr	r3, [pc, #184]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800ff46:	689b      	ldr	r3, [r3, #8]
 800ff48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	689b      	ldr	r3, [r3, #8]
 800ff50:	492b      	ldr	r1, [pc, #172]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800ff52:	4313      	orrs	r3, r2
 800ff54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ff56:	4b29      	ldr	r3, [pc, #164]	@ (800fffc <HAL_RCC_ClockConfig+0x1ec>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	f003 0307 	and.w	r3, r3, #7
 800ff5e:	683a      	ldr	r2, [r7, #0]
 800ff60:	429a      	cmp	r2, r3
 800ff62:	d210      	bcs.n	800ff86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ff64:	4b25      	ldr	r3, [pc, #148]	@ (800fffc <HAL_RCC_ClockConfig+0x1ec>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f023 0207 	bic.w	r2, r3, #7
 800ff6c:	4923      	ldr	r1, [pc, #140]	@ (800fffc <HAL_RCC_ClockConfig+0x1ec>)
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	4313      	orrs	r3, r2
 800ff72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ff74:	4b21      	ldr	r3, [pc, #132]	@ (800fffc <HAL_RCC_ClockConfig+0x1ec>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f003 0307 	and.w	r3, r3, #7
 800ff7c:	683a      	ldr	r2, [r7, #0]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d001      	beq.n	800ff86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800ff82:	2301      	movs	r3, #1
 800ff84:	e036      	b.n	800fff4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f003 0304 	and.w	r3, r3, #4
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d008      	beq.n	800ffa4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ff92:	4b1b      	ldr	r3, [pc, #108]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800ff94:	689b      	ldr	r3, [r3, #8]
 800ff96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	68db      	ldr	r3, [r3, #12]
 800ff9e:	4918      	ldr	r1, [pc, #96]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800ffa0:	4313      	orrs	r3, r2
 800ffa2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	f003 0308 	and.w	r3, r3, #8
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d009      	beq.n	800ffc4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ffb0:	4b13      	ldr	r3, [pc, #76]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800ffb2:	689b      	ldr	r3, [r3, #8]
 800ffb4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	691b      	ldr	r3, [r3, #16]
 800ffbc:	00db      	lsls	r3, r3, #3
 800ffbe:	4910      	ldr	r1, [pc, #64]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800ffc0:	4313      	orrs	r3, r2
 800ffc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ffc4:	f000 f824 	bl	8010010 <HAL_RCC_GetSysClockFreq>
 800ffc8:	4602      	mov	r2, r0
 800ffca:	4b0d      	ldr	r3, [pc, #52]	@ (8010000 <HAL_RCC_ClockConfig+0x1f0>)
 800ffcc:	689b      	ldr	r3, [r3, #8]
 800ffce:	091b      	lsrs	r3, r3, #4
 800ffd0:	f003 030f 	and.w	r3, r3, #15
 800ffd4:	490b      	ldr	r1, [pc, #44]	@ (8010004 <HAL_RCC_ClockConfig+0x1f4>)
 800ffd6:	5ccb      	ldrb	r3, [r1, r3]
 800ffd8:	f003 031f 	and.w	r3, r3, #31
 800ffdc:	fa22 f303 	lsr.w	r3, r2, r3
 800ffe0:	4a09      	ldr	r2, [pc, #36]	@ (8010008 <HAL_RCC_ClockConfig+0x1f8>)
 800ffe2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ffe4:	4b09      	ldr	r3, [pc, #36]	@ (801000c <HAL_RCC_ClockConfig+0x1fc>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7fa fe41 	bl	800ac70 <HAL_InitTick>
 800ffee:	4603      	mov	r3, r0
 800fff0:	72fb      	strb	r3, [r7, #11]

  return status;
 800fff2:	7afb      	ldrb	r3, [r7, #11]
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3710      	adds	r7, #16
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	40022000 	.word	0x40022000
 8010000:	40021000 	.word	0x40021000
 8010004:	08017588 	.word	0x08017588
 8010008:	20000168 	.word	0x20000168
 801000c:	20000174 	.word	0x20000174

08010010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010010:	b480      	push	{r7}
 8010012:	b089      	sub	sp, #36	@ 0x24
 8010014:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8010016:	2300      	movs	r3, #0
 8010018:	61fb      	str	r3, [r7, #28]
 801001a:	2300      	movs	r3, #0
 801001c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801001e:	4b3e      	ldr	r3, [pc, #248]	@ (8010118 <HAL_RCC_GetSysClockFreq+0x108>)
 8010020:	689b      	ldr	r3, [r3, #8]
 8010022:	f003 030c 	and.w	r3, r3, #12
 8010026:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010028:	4b3b      	ldr	r3, [pc, #236]	@ (8010118 <HAL_RCC_GetSysClockFreq+0x108>)
 801002a:	68db      	ldr	r3, [r3, #12]
 801002c:	f003 0303 	and.w	r3, r3, #3
 8010030:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d005      	beq.n	8010044 <HAL_RCC_GetSysClockFreq+0x34>
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	2b0c      	cmp	r3, #12
 801003c:	d121      	bne.n	8010082 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2b01      	cmp	r3, #1
 8010042:	d11e      	bne.n	8010082 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8010044:	4b34      	ldr	r3, [pc, #208]	@ (8010118 <HAL_RCC_GetSysClockFreq+0x108>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f003 0308 	and.w	r3, r3, #8
 801004c:	2b00      	cmp	r3, #0
 801004e:	d107      	bne.n	8010060 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8010050:	4b31      	ldr	r3, [pc, #196]	@ (8010118 <HAL_RCC_GetSysClockFreq+0x108>)
 8010052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010056:	0a1b      	lsrs	r3, r3, #8
 8010058:	f003 030f 	and.w	r3, r3, #15
 801005c:	61fb      	str	r3, [r7, #28]
 801005e:	e005      	b.n	801006c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8010060:	4b2d      	ldr	r3, [pc, #180]	@ (8010118 <HAL_RCC_GetSysClockFreq+0x108>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	091b      	lsrs	r3, r3, #4
 8010066:	f003 030f 	and.w	r3, r3, #15
 801006a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 801006c:	4a2b      	ldr	r2, [pc, #172]	@ (801011c <HAL_RCC_GetSysClockFreq+0x10c>)
 801006e:	69fb      	ldr	r3, [r7, #28]
 8010070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010074:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d10d      	bne.n	8010098 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 801007c:	69fb      	ldr	r3, [r7, #28]
 801007e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010080:	e00a      	b.n	8010098 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	2b04      	cmp	r3, #4
 8010086:	d102      	bne.n	801008e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8010088:	4b25      	ldr	r3, [pc, #148]	@ (8010120 <HAL_RCC_GetSysClockFreq+0x110>)
 801008a:	61bb      	str	r3, [r7, #24]
 801008c:	e004      	b.n	8010098 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	2b08      	cmp	r3, #8
 8010092:	d101      	bne.n	8010098 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8010094:	4b23      	ldr	r3, [pc, #140]	@ (8010124 <HAL_RCC_GetSysClockFreq+0x114>)
 8010096:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	2b0c      	cmp	r3, #12
 801009c:	d134      	bne.n	8010108 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801009e:	4b1e      	ldr	r3, [pc, #120]	@ (8010118 <HAL_RCC_GetSysClockFreq+0x108>)
 80100a0:	68db      	ldr	r3, [r3, #12]
 80100a2:	f003 0303 	and.w	r3, r3, #3
 80100a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	2b02      	cmp	r3, #2
 80100ac:	d003      	beq.n	80100b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	2b03      	cmp	r3, #3
 80100b2:	d003      	beq.n	80100bc <HAL_RCC_GetSysClockFreq+0xac>
 80100b4:	e005      	b.n	80100c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80100b6:	4b1a      	ldr	r3, [pc, #104]	@ (8010120 <HAL_RCC_GetSysClockFreq+0x110>)
 80100b8:	617b      	str	r3, [r7, #20]
      break;
 80100ba:	e005      	b.n	80100c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80100bc:	4b19      	ldr	r3, [pc, #100]	@ (8010124 <HAL_RCC_GetSysClockFreq+0x114>)
 80100be:	617b      	str	r3, [r7, #20]
      break;
 80100c0:	e002      	b.n	80100c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80100c2:	69fb      	ldr	r3, [r7, #28]
 80100c4:	617b      	str	r3, [r7, #20]
      break;
 80100c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80100c8:	4b13      	ldr	r3, [pc, #76]	@ (8010118 <HAL_RCC_GetSysClockFreq+0x108>)
 80100ca:	68db      	ldr	r3, [r3, #12]
 80100cc:	091b      	lsrs	r3, r3, #4
 80100ce:	f003 0307 	and.w	r3, r3, #7
 80100d2:	3301      	adds	r3, #1
 80100d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80100d6:	4b10      	ldr	r3, [pc, #64]	@ (8010118 <HAL_RCC_GetSysClockFreq+0x108>)
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	0a1b      	lsrs	r3, r3, #8
 80100dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80100e0:	697a      	ldr	r2, [r7, #20]
 80100e2:	fb03 f202 	mul.w	r2, r3, r2
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80100ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80100ee:	4b0a      	ldr	r3, [pc, #40]	@ (8010118 <HAL_RCC_GetSysClockFreq+0x108>)
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	0e5b      	lsrs	r3, r3, #25
 80100f4:	f003 0303 	and.w	r3, r3, #3
 80100f8:	3301      	adds	r3, #1
 80100fa:	005b      	lsls	r3, r3, #1
 80100fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80100fe:	697a      	ldr	r2, [r7, #20]
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	fbb2 f3f3 	udiv	r3, r2, r3
 8010106:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8010108:	69bb      	ldr	r3, [r7, #24]
}
 801010a:	4618      	mov	r0, r3
 801010c:	3724      	adds	r7, #36	@ 0x24
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	40021000 	.word	0x40021000
 801011c:	080175a0 	.word	0x080175a0
 8010120:	00f42400 	.word	0x00f42400
 8010124:	007a1200 	.word	0x007a1200

08010128 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010128:	b480      	push	{r7}
 801012a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801012c:	4b03      	ldr	r3, [pc, #12]	@ (801013c <HAL_RCC_GetHCLKFreq+0x14>)
 801012e:	681b      	ldr	r3, [r3, #0]
}
 8010130:	4618      	mov	r0, r3
 8010132:	46bd      	mov	sp, r7
 8010134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop
 801013c:	20000168 	.word	0x20000168

08010140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8010144:	f7ff fff0 	bl	8010128 <HAL_RCC_GetHCLKFreq>
 8010148:	4602      	mov	r2, r0
 801014a:	4b06      	ldr	r3, [pc, #24]	@ (8010164 <HAL_RCC_GetPCLK1Freq+0x24>)
 801014c:	689b      	ldr	r3, [r3, #8]
 801014e:	0a1b      	lsrs	r3, r3, #8
 8010150:	f003 0307 	and.w	r3, r3, #7
 8010154:	4904      	ldr	r1, [pc, #16]	@ (8010168 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010156:	5ccb      	ldrb	r3, [r1, r3]
 8010158:	f003 031f 	and.w	r3, r3, #31
 801015c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010160:	4618      	mov	r0, r3
 8010162:	bd80      	pop	{r7, pc}
 8010164:	40021000 	.word	0x40021000
 8010168:	08017598 	.word	0x08017598

0801016c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8010170:	f7ff ffda 	bl	8010128 <HAL_RCC_GetHCLKFreq>
 8010174:	4602      	mov	r2, r0
 8010176:	4b06      	ldr	r3, [pc, #24]	@ (8010190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010178:	689b      	ldr	r3, [r3, #8]
 801017a:	0adb      	lsrs	r3, r3, #11
 801017c:	f003 0307 	and.w	r3, r3, #7
 8010180:	4904      	ldr	r1, [pc, #16]	@ (8010194 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010182:	5ccb      	ldrb	r3, [r1, r3]
 8010184:	f003 031f 	and.w	r3, r3, #31
 8010188:	fa22 f303 	lsr.w	r3, r2, r3
}
 801018c:	4618      	mov	r0, r3
 801018e:	bd80      	pop	{r7, pc}
 8010190:	40021000 	.word	0x40021000
 8010194:	08017598 	.word	0x08017598

08010198 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b086      	sub	sp, #24
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80101a0:	2300      	movs	r3, #0
 80101a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80101a4:	4b2a      	ldr	r3, [pc, #168]	@ (8010250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80101a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80101a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d003      	beq.n	80101b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80101b0:	f7fe fd8c 	bl	800eccc <HAL_PWREx_GetVoltageRange>
 80101b4:	6178      	str	r0, [r7, #20]
 80101b6:	e014      	b.n	80101e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80101b8:	4b25      	ldr	r3, [pc, #148]	@ (8010250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80101ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80101bc:	4a24      	ldr	r2, [pc, #144]	@ (8010250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80101be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80101c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80101c4:	4b22      	ldr	r3, [pc, #136]	@ (8010250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80101c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80101c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80101cc:	60fb      	str	r3, [r7, #12]
 80101ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80101d0:	f7fe fd7c 	bl	800eccc <HAL_PWREx_GetVoltageRange>
 80101d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80101d6:	4b1e      	ldr	r3, [pc, #120]	@ (8010250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80101d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80101da:	4a1d      	ldr	r2, [pc, #116]	@ (8010250 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80101dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80101e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80101e8:	d10b      	bne.n	8010202 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2b80      	cmp	r3, #128	@ 0x80
 80101ee:	d919      	bls.n	8010224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80101f4:	d902      	bls.n	80101fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80101f6:	2302      	movs	r3, #2
 80101f8:	613b      	str	r3, [r7, #16]
 80101fa:	e013      	b.n	8010224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80101fc:	2301      	movs	r3, #1
 80101fe:	613b      	str	r3, [r7, #16]
 8010200:	e010      	b.n	8010224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2b80      	cmp	r3, #128	@ 0x80
 8010206:	d902      	bls.n	801020e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8010208:	2303      	movs	r3, #3
 801020a:	613b      	str	r3, [r7, #16]
 801020c:	e00a      	b.n	8010224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2b80      	cmp	r3, #128	@ 0x80
 8010212:	d102      	bne.n	801021a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010214:	2302      	movs	r3, #2
 8010216:	613b      	str	r3, [r7, #16]
 8010218:	e004      	b.n	8010224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2b70      	cmp	r3, #112	@ 0x70
 801021e:	d101      	bne.n	8010224 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010220:	2301      	movs	r3, #1
 8010222:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010224:	4b0b      	ldr	r3, [pc, #44]	@ (8010254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	f023 0207 	bic.w	r2, r3, #7
 801022c:	4909      	ldr	r1, [pc, #36]	@ (8010254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	4313      	orrs	r3, r2
 8010232:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8010234:	4b07      	ldr	r3, [pc, #28]	@ (8010254 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f003 0307 	and.w	r3, r3, #7
 801023c:	693a      	ldr	r2, [r7, #16]
 801023e:	429a      	cmp	r2, r3
 8010240:	d001      	beq.n	8010246 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8010242:	2301      	movs	r3, #1
 8010244:	e000      	b.n	8010248 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8010246:	2300      	movs	r3, #0
}
 8010248:	4618      	mov	r0, r3
 801024a:	3718      	adds	r7, #24
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	40021000 	.word	0x40021000
 8010254:	40022000 	.word	0x40022000

08010258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b086      	sub	sp, #24
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010260:	2300      	movs	r3, #0
 8010262:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010264:	2300      	movs	r3, #0
 8010266:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010270:	2b00      	cmp	r3, #0
 8010272:	d041      	beq.n	80102f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010278:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 801027c:	d02a      	beq.n	80102d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801027e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8010282:	d824      	bhi.n	80102ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010284:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010288:	d008      	beq.n	801029c <HAL_RCCEx_PeriphCLKConfig+0x44>
 801028a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801028e:	d81e      	bhi.n	80102ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010290:	2b00      	cmp	r3, #0
 8010292:	d00a      	beq.n	80102aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8010294:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010298:	d010      	beq.n	80102bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 801029a:	e018      	b.n	80102ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801029c:	4b86      	ldr	r3, [pc, #536]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801029e:	68db      	ldr	r3, [r3, #12]
 80102a0:	4a85      	ldr	r2, [pc, #532]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80102a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80102a8:	e015      	b.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	3304      	adds	r3, #4
 80102ae:	2100      	movs	r1, #0
 80102b0:	4618      	mov	r0, r3
 80102b2:	f000 fabb 	bl	801082c <RCCEx_PLLSAI1_Config>
 80102b6:	4603      	mov	r3, r0
 80102b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80102ba:	e00c      	b.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	3320      	adds	r3, #32
 80102c0:	2100      	movs	r1, #0
 80102c2:	4618      	mov	r0, r3
 80102c4:	f000 fba6 	bl	8010a14 <RCCEx_PLLSAI2_Config>
 80102c8:	4603      	mov	r3, r0
 80102ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80102cc:	e003      	b.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80102ce:	2301      	movs	r3, #1
 80102d0:	74fb      	strb	r3, [r7, #19]
      break;
 80102d2:	e000      	b.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80102d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80102d6:	7cfb      	ldrb	r3, [r7, #19]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d10b      	bne.n	80102f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80102dc:	4b76      	ldr	r3, [pc, #472]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80102e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80102ea:	4973      	ldr	r1, [pc, #460]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102ec:	4313      	orrs	r3, r2
 80102ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80102f2:	e001      	b.n	80102f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102f4:	7cfb      	ldrb	r3, [r7, #19]
 80102f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010300:	2b00      	cmp	r3, #0
 8010302:	d041      	beq.n	8010388 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010308:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801030c:	d02a      	beq.n	8010364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 801030e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010312:	d824      	bhi.n	801035e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010314:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010318:	d008      	beq.n	801032c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801031a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801031e:	d81e      	bhi.n	801035e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010320:	2b00      	cmp	r3, #0
 8010322:	d00a      	beq.n	801033a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8010324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010328:	d010      	beq.n	801034c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 801032a:	e018      	b.n	801035e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801032c:	4b62      	ldr	r3, [pc, #392]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801032e:	68db      	ldr	r3, [r3, #12]
 8010330:	4a61      	ldr	r2, [pc, #388]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010336:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010338:	e015      	b.n	8010366 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	3304      	adds	r3, #4
 801033e:	2100      	movs	r1, #0
 8010340:	4618      	mov	r0, r3
 8010342:	f000 fa73 	bl	801082c <RCCEx_PLLSAI1_Config>
 8010346:	4603      	mov	r3, r0
 8010348:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801034a:	e00c      	b.n	8010366 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	3320      	adds	r3, #32
 8010350:	2100      	movs	r1, #0
 8010352:	4618      	mov	r0, r3
 8010354:	f000 fb5e 	bl	8010a14 <RCCEx_PLLSAI2_Config>
 8010358:	4603      	mov	r3, r0
 801035a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801035c:	e003      	b.n	8010366 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801035e:	2301      	movs	r3, #1
 8010360:	74fb      	strb	r3, [r7, #19]
      break;
 8010362:	e000      	b.n	8010366 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8010364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010366:	7cfb      	ldrb	r3, [r7, #19]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d10b      	bne.n	8010384 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801036c:	4b52      	ldr	r3, [pc, #328]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801036e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010372:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801037a:	494f      	ldr	r1, [pc, #316]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801037c:	4313      	orrs	r3, r2
 801037e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8010382:	e001      	b.n	8010388 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010384:	7cfb      	ldrb	r3, [r7, #19]
 8010386:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010390:	2b00      	cmp	r3, #0
 8010392:	f000 80a0 	beq.w	80104d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010396:	2300      	movs	r3, #0
 8010398:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801039a:	4b47      	ldr	r3, [pc, #284]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801039c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801039e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d101      	bne.n	80103aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80103a6:	2301      	movs	r3, #1
 80103a8:	e000      	b.n	80103ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80103aa:	2300      	movs	r3, #0
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d00d      	beq.n	80103cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80103b0:	4b41      	ldr	r3, [pc, #260]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80103b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80103b4:	4a40      	ldr	r2, [pc, #256]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80103b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80103ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80103bc:	4b3e      	ldr	r3, [pc, #248]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80103be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80103c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80103c4:	60bb      	str	r3, [r7, #8]
 80103c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80103c8:	2301      	movs	r3, #1
 80103ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80103cc:	4b3b      	ldr	r3, [pc, #236]	@ (80104bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	4a3a      	ldr	r2, [pc, #232]	@ (80104bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80103d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80103d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80103d8:	f7fa fc9a 	bl	800ad10 <HAL_GetTick>
 80103dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80103de:	e009      	b.n	80103f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80103e0:	f7fa fc96 	bl	800ad10 <HAL_GetTick>
 80103e4:	4602      	mov	r2, r0
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	1ad3      	subs	r3, r2, r3
 80103ea:	2b02      	cmp	r3, #2
 80103ec:	d902      	bls.n	80103f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80103ee:	2303      	movs	r3, #3
 80103f0:	74fb      	strb	r3, [r7, #19]
        break;
 80103f2:	e005      	b.n	8010400 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80103f4:	4b31      	ldr	r3, [pc, #196]	@ (80104bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d0ef      	beq.n	80103e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8010400:	7cfb      	ldrb	r3, [r7, #19]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d15c      	bne.n	80104c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8010406:	4b2c      	ldr	r3, [pc, #176]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801040c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010410:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d01f      	beq.n	8010458 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801041e:	697a      	ldr	r2, [r7, #20]
 8010420:	429a      	cmp	r2, r3
 8010422:	d019      	beq.n	8010458 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010424:	4b24      	ldr	r3, [pc, #144]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801042a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801042e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010430:	4b21      	ldr	r3, [pc, #132]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010436:	4a20      	ldr	r2, [pc, #128]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801043c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010440:	4b1d      	ldr	r3, [pc, #116]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010446:	4a1c      	ldr	r2, [pc, #112]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801044c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010450:	4a19      	ldr	r2, [pc, #100]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8010458:	697b      	ldr	r3, [r7, #20]
 801045a:	f003 0301 	and.w	r3, r3, #1
 801045e:	2b00      	cmp	r3, #0
 8010460:	d016      	beq.n	8010490 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010462:	f7fa fc55 	bl	800ad10 <HAL_GetTick>
 8010466:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010468:	e00b      	b.n	8010482 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801046a:	f7fa fc51 	bl	800ad10 <HAL_GetTick>
 801046e:	4602      	mov	r2, r0
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	1ad3      	subs	r3, r2, r3
 8010474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010478:	4293      	cmp	r3, r2
 801047a:	d902      	bls.n	8010482 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 801047c:	2303      	movs	r3, #3
 801047e:	74fb      	strb	r3, [r7, #19]
            break;
 8010480:	e006      	b.n	8010490 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010482:	4b0d      	ldr	r3, [pc, #52]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010488:	f003 0302 	and.w	r3, r3, #2
 801048c:	2b00      	cmp	r3, #0
 801048e:	d0ec      	beq.n	801046a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8010490:	7cfb      	ldrb	r3, [r7, #19]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d10c      	bne.n	80104b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010496:	4b08      	ldr	r3, [pc, #32]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801049c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80104a6:	4904      	ldr	r1, [pc, #16]	@ (80104b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80104a8:	4313      	orrs	r3, r2
 80104aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80104ae:	e009      	b.n	80104c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80104b0:	7cfb      	ldrb	r3, [r7, #19]
 80104b2:	74bb      	strb	r3, [r7, #18]
 80104b4:	e006      	b.n	80104c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80104b6:	bf00      	nop
 80104b8:	40021000 	.word	0x40021000
 80104bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80104c0:	7cfb      	ldrb	r3, [r7, #19]
 80104c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80104c4:	7c7b      	ldrb	r3, [r7, #17]
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d105      	bne.n	80104d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80104ca:	4b9e      	ldr	r3, [pc, #632]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104ce:	4a9d      	ldr	r2, [pc, #628]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80104d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	f003 0301 	and.w	r3, r3, #1
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d00a      	beq.n	80104f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80104e2:	4b98      	ldr	r3, [pc, #608]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80104e8:	f023 0203 	bic.w	r2, r3, #3
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104f0:	4994      	ldr	r1, [pc, #592]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104f2:	4313      	orrs	r3, r2
 80104f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	f003 0302 	and.w	r3, r3, #2
 8010500:	2b00      	cmp	r3, #0
 8010502:	d00a      	beq.n	801051a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010504:	4b8f      	ldr	r3, [pc, #572]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801050a:	f023 020c 	bic.w	r2, r3, #12
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010512:	498c      	ldr	r1, [pc, #560]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010514:	4313      	orrs	r3, r2
 8010516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f003 0304 	and.w	r3, r3, #4
 8010522:	2b00      	cmp	r3, #0
 8010524:	d00a      	beq.n	801053c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010526:	4b87      	ldr	r3, [pc, #540]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801052c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010534:	4983      	ldr	r1, [pc, #524]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010536:	4313      	orrs	r3, r2
 8010538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	f003 0308 	and.w	r3, r3, #8
 8010544:	2b00      	cmp	r3, #0
 8010546:	d00a      	beq.n	801055e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8010548:	4b7e      	ldr	r3, [pc, #504]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801054a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801054e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010556:	497b      	ldr	r1, [pc, #492]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010558:	4313      	orrs	r3, r2
 801055a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f003 0310 	and.w	r3, r3, #16
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00a      	beq.n	8010580 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801056a:	4b76      	ldr	r3, [pc, #472]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801056c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010570:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010578:	4972      	ldr	r1, [pc, #456]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801057a:	4313      	orrs	r3, r2
 801057c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	f003 0320 	and.w	r3, r3, #32
 8010588:	2b00      	cmp	r3, #0
 801058a:	d00a      	beq.n	80105a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801058c:	4b6d      	ldr	r3, [pc, #436]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801058e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010592:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801059a:	496a      	ldr	r1, [pc, #424]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801059c:	4313      	orrs	r3, r2
 801059e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d00a      	beq.n	80105c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80105ae:	4b65      	ldr	r3, [pc, #404]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80105b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80105bc:	4961      	ldr	r1, [pc, #388]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105be:	4313      	orrs	r3, r2
 80105c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d00a      	beq.n	80105e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80105d0:	4b5c      	ldr	r3, [pc, #368]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80105d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80105de:	4959      	ldr	r1, [pc, #356]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105e0:	4313      	orrs	r3, r2
 80105e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00a      	beq.n	8010608 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80105f2:	4b54      	ldr	r3, [pc, #336]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80105f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010600:	4950      	ldr	r1, [pc, #320]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010602:	4313      	orrs	r3, r2
 8010604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010610:	2b00      	cmp	r3, #0
 8010612:	d00a      	beq.n	801062a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8010614:	4b4b      	ldr	r3, [pc, #300]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801061a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010622:	4948      	ldr	r1, [pc, #288]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010624:	4313      	orrs	r3, r2
 8010626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010632:	2b00      	cmp	r3, #0
 8010634:	d00a      	beq.n	801064c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010636:	4b43      	ldr	r3, [pc, #268]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801063c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010644:	493f      	ldr	r1, [pc, #252]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010646:	4313      	orrs	r3, r2
 8010648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010654:	2b00      	cmp	r3, #0
 8010656:	d028      	beq.n	80106aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010658:	4b3a      	ldr	r3, [pc, #232]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801065a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801065e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010666:	4937      	ldr	r1, [pc, #220]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010668:	4313      	orrs	r3, r2
 801066a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010672:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010676:	d106      	bne.n	8010686 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010678:	4b32      	ldr	r3, [pc, #200]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801067a:	68db      	ldr	r3, [r3, #12]
 801067c:	4a31      	ldr	r2, [pc, #196]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801067e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010682:	60d3      	str	r3, [r2, #12]
 8010684:	e011      	b.n	80106aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801068a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801068e:	d10c      	bne.n	80106aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	3304      	adds	r3, #4
 8010694:	2101      	movs	r1, #1
 8010696:	4618      	mov	r0, r3
 8010698:	f000 f8c8 	bl	801082c <RCCEx_PLLSAI1_Config>
 801069c:	4603      	mov	r3, r0
 801069e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80106a0:	7cfb      	ldrb	r3, [r7, #19]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d001      	beq.n	80106aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80106a6:	7cfb      	ldrb	r3, [r7, #19]
 80106a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d028      	beq.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80106b6:	4b23      	ldr	r3, [pc, #140]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80106bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106c4:	491f      	ldr	r1, [pc, #124]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106c6:	4313      	orrs	r3, r2
 80106c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80106d4:	d106      	bne.n	80106e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80106d6:	4b1b      	ldr	r3, [pc, #108]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	4a1a      	ldr	r2, [pc, #104]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80106e0:	60d3      	str	r3, [r2, #12]
 80106e2:	e011      	b.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80106ec:	d10c      	bne.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	3304      	adds	r3, #4
 80106f2:	2101      	movs	r1, #1
 80106f4:	4618      	mov	r0, r3
 80106f6:	f000 f899 	bl	801082c <RCCEx_PLLSAI1_Config>
 80106fa:	4603      	mov	r3, r0
 80106fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80106fe:	7cfb      	ldrb	r3, [r7, #19]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d001      	beq.n	8010708 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8010704:	7cfb      	ldrb	r3, [r7, #19]
 8010706:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010710:	2b00      	cmp	r3, #0
 8010712:	d02b      	beq.n	801076c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010714:	4b0b      	ldr	r3, [pc, #44]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801071a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010722:	4908      	ldr	r1, [pc, #32]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010724:	4313      	orrs	r3, r2
 8010726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801072e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010732:	d109      	bne.n	8010748 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010734:	4b03      	ldr	r3, [pc, #12]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010736:	68db      	ldr	r3, [r3, #12]
 8010738:	4a02      	ldr	r2, [pc, #8]	@ (8010744 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801073a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801073e:	60d3      	str	r3, [r2, #12]
 8010740:	e014      	b.n	801076c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8010742:	bf00      	nop
 8010744:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801074c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010750:	d10c      	bne.n	801076c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	3304      	adds	r3, #4
 8010756:	2101      	movs	r1, #1
 8010758:	4618      	mov	r0, r3
 801075a:	f000 f867 	bl	801082c <RCCEx_PLLSAI1_Config>
 801075e:	4603      	mov	r3, r0
 8010760:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010762:	7cfb      	ldrb	r3, [r7, #19]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d001      	beq.n	801076c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8010768:	7cfb      	ldrb	r3, [r7, #19]
 801076a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010774:	2b00      	cmp	r3, #0
 8010776:	d02f      	beq.n	80107d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010778:	4b2b      	ldr	r3, [pc, #172]	@ (8010828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801077a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801077e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010786:	4928      	ldr	r1, [pc, #160]	@ (8010828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010788:	4313      	orrs	r3, r2
 801078a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010792:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010796:	d10d      	bne.n	80107b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	3304      	adds	r3, #4
 801079c:	2102      	movs	r1, #2
 801079e:	4618      	mov	r0, r3
 80107a0:	f000 f844 	bl	801082c <RCCEx_PLLSAI1_Config>
 80107a4:	4603      	mov	r3, r0
 80107a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80107a8:	7cfb      	ldrb	r3, [r7, #19]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d014      	beq.n	80107d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80107ae:	7cfb      	ldrb	r3, [r7, #19]
 80107b0:	74bb      	strb	r3, [r7, #18]
 80107b2:	e011      	b.n	80107d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80107b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80107bc:	d10c      	bne.n	80107d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	3320      	adds	r3, #32
 80107c2:	2102      	movs	r1, #2
 80107c4:	4618      	mov	r0, r3
 80107c6:	f000 f925 	bl	8010a14 <RCCEx_PLLSAI2_Config>
 80107ca:	4603      	mov	r3, r0
 80107cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80107ce:	7cfb      	ldrb	r3, [r7, #19]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d001      	beq.n	80107d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80107d4:	7cfb      	ldrb	r3, [r7, #19]
 80107d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d00a      	beq.n	80107fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80107e4:	4b10      	ldr	r3, [pc, #64]	@ (8010828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80107e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80107ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80107f2:	490d      	ldr	r1, [pc, #52]	@ (8010828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80107f4:	4313      	orrs	r3, r2
 80107f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010802:	2b00      	cmp	r3, #0
 8010804:	d00b      	beq.n	801081e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010806:	4b08      	ldr	r3, [pc, #32]	@ (8010828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801080c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010816:	4904      	ldr	r1, [pc, #16]	@ (8010828 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8010818:	4313      	orrs	r3, r2
 801081a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 801081e:	7cbb      	ldrb	r3, [r7, #18]
}
 8010820:	4618      	mov	r0, r3
 8010822:	3718      	adds	r7, #24
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	40021000 	.word	0x40021000

0801082c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010836:	2300      	movs	r3, #0
 8010838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801083a:	4b75      	ldr	r3, [pc, #468]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 801083c:	68db      	ldr	r3, [r3, #12]
 801083e:	f003 0303 	and.w	r3, r3, #3
 8010842:	2b00      	cmp	r3, #0
 8010844:	d018      	beq.n	8010878 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8010846:	4b72      	ldr	r3, [pc, #456]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010848:	68db      	ldr	r3, [r3, #12]
 801084a:	f003 0203 	and.w	r2, r3, #3
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	429a      	cmp	r2, r3
 8010854:	d10d      	bne.n	8010872 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
       ||
 801085a:	2b00      	cmp	r3, #0
 801085c:	d009      	beq.n	8010872 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801085e:	4b6c      	ldr	r3, [pc, #432]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010860:	68db      	ldr	r3, [r3, #12]
 8010862:	091b      	lsrs	r3, r3, #4
 8010864:	f003 0307 	and.w	r3, r3, #7
 8010868:	1c5a      	adds	r2, r3, #1
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	685b      	ldr	r3, [r3, #4]
       ||
 801086e:	429a      	cmp	r2, r3
 8010870:	d047      	beq.n	8010902 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8010872:	2301      	movs	r3, #1
 8010874:	73fb      	strb	r3, [r7, #15]
 8010876:	e044      	b.n	8010902 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	2b03      	cmp	r3, #3
 801087e:	d018      	beq.n	80108b2 <RCCEx_PLLSAI1_Config+0x86>
 8010880:	2b03      	cmp	r3, #3
 8010882:	d825      	bhi.n	80108d0 <RCCEx_PLLSAI1_Config+0xa4>
 8010884:	2b01      	cmp	r3, #1
 8010886:	d002      	beq.n	801088e <RCCEx_PLLSAI1_Config+0x62>
 8010888:	2b02      	cmp	r3, #2
 801088a:	d009      	beq.n	80108a0 <RCCEx_PLLSAI1_Config+0x74>
 801088c:	e020      	b.n	80108d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801088e:	4b60      	ldr	r3, [pc, #384]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f003 0302 	and.w	r3, r3, #2
 8010896:	2b00      	cmp	r3, #0
 8010898:	d11d      	bne.n	80108d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 801089a:	2301      	movs	r3, #1
 801089c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801089e:	e01a      	b.n	80108d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80108a0:	4b5b      	ldr	r3, [pc, #364]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d116      	bne.n	80108da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80108ac:	2301      	movs	r3, #1
 80108ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80108b0:	e013      	b.n	80108da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80108b2:	4b57      	ldr	r3, [pc, #348]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d10f      	bne.n	80108de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80108be:	4b54      	ldr	r3, [pc, #336]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d109      	bne.n	80108de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80108ca:	2301      	movs	r3, #1
 80108cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80108ce:	e006      	b.n	80108de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80108d0:	2301      	movs	r3, #1
 80108d2:	73fb      	strb	r3, [r7, #15]
      break;
 80108d4:	e004      	b.n	80108e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80108d6:	bf00      	nop
 80108d8:	e002      	b.n	80108e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80108da:	bf00      	nop
 80108dc:	e000      	b.n	80108e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80108de:	bf00      	nop
    }

    if(status == HAL_OK)
 80108e0:	7bfb      	ldrb	r3, [r7, #15]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d10d      	bne.n	8010902 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80108e6:	4b4a      	ldr	r3, [pc, #296]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80108e8:	68db      	ldr	r3, [r3, #12]
 80108ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6819      	ldr	r1, [r3, #0]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	3b01      	subs	r3, #1
 80108f8:	011b      	lsls	r3, r3, #4
 80108fa:	430b      	orrs	r3, r1
 80108fc:	4944      	ldr	r1, [pc, #272]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80108fe:	4313      	orrs	r3, r2
 8010900:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010902:	7bfb      	ldrb	r3, [r7, #15]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d17d      	bne.n	8010a04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8010908:	4b41      	ldr	r3, [pc, #260]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	4a40      	ldr	r2, [pc, #256]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 801090e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010914:	f7fa f9fc 	bl	800ad10 <HAL_GetTick>
 8010918:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801091a:	e009      	b.n	8010930 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801091c:	f7fa f9f8 	bl	800ad10 <HAL_GetTick>
 8010920:	4602      	mov	r2, r0
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	1ad3      	subs	r3, r2, r3
 8010926:	2b02      	cmp	r3, #2
 8010928:	d902      	bls.n	8010930 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801092a:	2303      	movs	r3, #3
 801092c:	73fb      	strb	r3, [r7, #15]
        break;
 801092e:	e005      	b.n	801093c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010930:	4b37      	ldr	r3, [pc, #220]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010938:	2b00      	cmp	r3, #0
 801093a:	d1ef      	bne.n	801091c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 801093c:	7bfb      	ldrb	r3, [r7, #15]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d160      	bne.n	8010a04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d111      	bne.n	801096c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010948:	4b31      	ldr	r3, [pc, #196]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 801094a:	691b      	ldr	r3, [r3, #16]
 801094c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8010950:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	6892      	ldr	r2, [r2, #8]
 8010958:	0211      	lsls	r1, r2, #8
 801095a:	687a      	ldr	r2, [r7, #4]
 801095c:	68d2      	ldr	r2, [r2, #12]
 801095e:	0912      	lsrs	r2, r2, #4
 8010960:	0452      	lsls	r2, r2, #17
 8010962:	430a      	orrs	r2, r1
 8010964:	492a      	ldr	r1, [pc, #168]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010966:	4313      	orrs	r3, r2
 8010968:	610b      	str	r3, [r1, #16]
 801096a:	e027      	b.n	80109bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	2b01      	cmp	r3, #1
 8010970:	d112      	bne.n	8010998 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010972:	4b27      	ldr	r3, [pc, #156]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010974:	691b      	ldr	r3, [r3, #16]
 8010976:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 801097a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801097e:	687a      	ldr	r2, [r7, #4]
 8010980:	6892      	ldr	r2, [r2, #8]
 8010982:	0211      	lsls	r1, r2, #8
 8010984:	687a      	ldr	r2, [r7, #4]
 8010986:	6912      	ldr	r2, [r2, #16]
 8010988:	0852      	lsrs	r2, r2, #1
 801098a:	3a01      	subs	r2, #1
 801098c:	0552      	lsls	r2, r2, #21
 801098e:	430a      	orrs	r2, r1
 8010990:	491f      	ldr	r1, [pc, #124]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010992:	4313      	orrs	r3, r2
 8010994:	610b      	str	r3, [r1, #16]
 8010996:	e011      	b.n	80109bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010998:	4b1d      	ldr	r3, [pc, #116]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 801099a:	691b      	ldr	r3, [r3, #16]
 801099c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80109a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80109a4:	687a      	ldr	r2, [r7, #4]
 80109a6:	6892      	ldr	r2, [r2, #8]
 80109a8:	0211      	lsls	r1, r2, #8
 80109aa:	687a      	ldr	r2, [r7, #4]
 80109ac:	6952      	ldr	r2, [r2, #20]
 80109ae:	0852      	lsrs	r2, r2, #1
 80109b0:	3a01      	subs	r2, #1
 80109b2:	0652      	lsls	r2, r2, #25
 80109b4:	430a      	orrs	r2, r1
 80109b6:	4916      	ldr	r1, [pc, #88]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109b8:	4313      	orrs	r3, r2
 80109ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80109bc:	4b14      	ldr	r3, [pc, #80]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	4a13      	ldr	r2, [pc, #76]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80109c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80109c8:	f7fa f9a2 	bl	800ad10 <HAL_GetTick>
 80109cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80109ce:	e009      	b.n	80109e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80109d0:	f7fa f99e 	bl	800ad10 <HAL_GetTick>
 80109d4:	4602      	mov	r2, r0
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	1ad3      	subs	r3, r2, r3
 80109da:	2b02      	cmp	r3, #2
 80109dc:	d902      	bls.n	80109e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80109de:	2303      	movs	r3, #3
 80109e0:	73fb      	strb	r3, [r7, #15]
          break;
 80109e2:	e005      	b.n	80109f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80109e4:	4b0a      	ldr	r3, [pc, #40]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d0ef      	beq.n	80109d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80109f0:	7bfb      	ldrb	r3, [r7, #15]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d106      	bne.n	8010a04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80109f6:	4b06      	ldr	r3, [pc, #24]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109f8:	691a      	ldr	r2, [r3, #16]
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	699b      	ldr	r3, [r3, #24]
 80109fe:	4904      	ldr	r1, [pc, #16]	@ (8010a10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010a00:	4313      	orrs	r3, r2
 8010a02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8010a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3710      	adds	r7, #16
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	40021000 	.word	0x40021000

08010a14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b084      	sub	sp, #16
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
 8010a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010a22:	4b6a      	ldr	r3, [pc, #424]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a24:	68db      	ldr	r3, [r3, #12]
 8010a26:	f003 0303 	and.w	r3, r3, #3
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d018      	beq.n	8010a60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8010a2e:	4b67      	ldr	r3, [pc, #412]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a30:	68db      	ldr	r3, [r3, #12]
 8010a32:	f003 0203 	and.w	r2, r3, #3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d10d      	bne.n	8010a5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
       ||
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d009      	beq.n	8010a5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8010a46:	4b61      	ldr	r3, [pc, #388]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a48:	68db      	ldr	r3, [r3, #12]
 8010a4a:	091b      	lsrs	r3, r3, #4
 8010a4c:	f003 0307 	and.w	r3, r3, #7
 8010a50:	1c5a      	adds	r2, r3, #1
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	685b      	ldr	r3, [r3, #4]
       ||
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d047      	beq.n	8010aea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	73fb      	strb	r3, [r7, #15]
 8010a5e:	e044      	b.n	8010aea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2b03      	cmp	r3, #3
 8010a66:	d018      	beq.n	8010a9a <RCCEx_PLLSAI2_Config+0x86>
 8010a68:	2b03      	cmp	r3, #3
 8010a6a:	d825      	bhi.n	8010ab8 <RCCEx_PLLSAI2_Config+0xa4>
 8010a6c:	2b01      	cmp	r3, #1
 8010a6e:	d002      	beq.n	8010a76 <RCCEx_PLLSAI2_Config+0x62>
 8010a70:	2b02      	cmp	r3, #2
 8010a72:	d009      	beq.n	8010a88 <RCCEx_PLLSAI2_Config+0x74>
 8010a74:	e020      	b.n	8010ab8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010a76:	4b55      	ldr	r3, [pc, #340]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	f003 0302 	and.w	r3, r3, #2
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d11d      	bne.n	8010abe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8010a82:	2301      	movs	r3, #1
 8010a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010a86:	e01a      	b.n	8010abe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010a88:	4b50      	ldr	r3, [pc, #320]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d116      	bne.n	8010ac2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8010a94:	2301      	movs	r3, #1
 8010a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010a98:	e013      	b.n	8010ac2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010a9a:	4b4c      	ldr	r3, [pc, #304]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d10f      	bne.n	8010ac6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010aa6:	4b49      	ldr	r3, [pc, #292]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d109      	bne.n	8010ac6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010ab6:	e006      	b.n	8010ac6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8010ab8:	2301      	movs	r3, #1
 8010aba:	73fb      	strb	r3, [r7, #15]
      break;
 8010abc:	e004      	b.n	8010ac8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010abe:	bf00      	nop
 8010ac0:	e002      	b.n	8010ac8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010ac2:	bf00      	nop
 8010ac4:	e000      	b.n	8010ac8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010ac6:	bf00      	nop
    }

    if(status == HAL_OK)
 8010ac8:	7bfb      	ldrb	r3, [r7, #15]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d10d      	bne.n	8010aea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8010ace:	4b3f      	ldr	r3, [pc, #252]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ad0:	68db      	ldr	r3, [r3, #12]
 8010ad2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6819      	ldr	r1, [r3, #0]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	3b01      	subs	r3, #1
 8010ae0:	011b      	lsls	r3, r3, #4
 8010ae2:	430b      	orrs	r3, r1
 8010ae4:	4939      	ldr	r1, [pc, #228]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010aea:	7bfb      	ldrb	r3, [r7, #15]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d167      	bne.n	8010bc0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8010af0:	4b36      	ldr	r3, [pc, #216]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	4a35      	ldr	r2, [pc, #212]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010afc:	f7fa f908 	bl	800ad10 <HAL_GetTick>
 8010b00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010b02:	e009      	b.n	8010b18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010b04:	f7fa f904 	bl	800ad10 <HAL_GetTick>
 8010b08:	4602      	mov	r2, r0
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	1ad3      	subs	r3, r2, r3
 8010b0e:	2b02      	cmp	r3, #2
 8010b10:	d902      	bls.n	8010b18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8010b12:	2303      	movs	r3, #3
 8010b14:	73fb      	strb	r3, [r7, #15]
        break;
 8010b16:	e005      	b.n	8010b24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010b18:	4b2c      	ldr	r3, [pc, #176]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d1ef      	bne.n	8010b04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010b24:	7bfb      	ldrb	r3, [r7, #15]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d14a      	bne.n	8010bc0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d111      	bne.n	8010b54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010b30:	4b26      	ldr	r3, [pc, #152]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b32:	695b      	ldr	r3, [r3, #20]
 8010b34:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8010b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010b3c:	687a      	ldr	r2, [r7, #4]
 8010b3e:	6892      	ldr	r2, [r2, #8]
 8010b40:	0211      	lsls	r1, r2, #8
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	68d2      	ldr	r2, [r2, #12]
 8010b46:	0912      	lsrs	r2, r2, #4
 8010b48:	0452      	lsls	r2, r2, #17
 8010b4a:	430a      	orrs	r2, r1
 8010b4c:	491f      	ldr	r1, [pc, #124]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b4e:	4313      	orrs	r3, r2
 8010b50:	614b      	str	r3, [r1, #20]
 8010b52:	e011      	b.n	8010b78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010b54:	4b1d      	ldr	r3, [pc, #116]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b56:	695b      	ldr	r3, [r3, #20]
 8010b58:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8010b5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	6892      	ldr	r2, [r2, #8]
 8010b64:	0211      	lsls	r1, r2, #8
 8010b66:	687a      	ldr	r2, [r7, #4]
 8010b68:	6912      	ldr	r2, [r2, #16]
 8010b6a:	0852      	lsrs	r2, r2, #1
 8010b6c:	3a01      	subs	r2, #1
 8010b6e:	0652      	lsls	r2, r2, #25
 8010b70:	430a      	orrs	r2, r1
 8010b72:	4916      	ldr	r1, [pc, #88]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b74:	4313      	orrs	r3, r2
 8010b76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8010b78:	4b14      	ldr	r3, [pc, #80]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	4a13      	ldr	r2, [pc, #76]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010b82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010b84:	f7fa f8c4 	bl	800ad10 <HAL_GetTick>
 8010b88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010b8a:	e009      	b.n	8010ba0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010b8c:	f7fa f8c0 	bl	800ad10 <HAL_GetTick>
 8010b90:	4602      	mov	r2, r0
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	1ad3      	subs	r3, r2, r3
 8010b96:	2b02      	cmp	r3, #2
 8010b98:	d902      	bls.n	8010ba0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8010b9a:	2303      	movs	r3, #3
 8010b9c:	73fb      	strb	r3, [r7, #15]
          break;
 8010b9e:	e005      	b.n	8010bac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d0ef      	beq.n	8010b8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8010bac:	7bfb      	ldrb	r3, [r7, #15]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d106      	bne.n	8010bc0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8010bb2:	4b06      	ldr	r3, [pc, #24]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010bb4:	695a      	ldr	r2, [r3, #20]
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	695b      	ldr	r3, [r3, #20]
 8010bba:	4904      	ldr	r1, [pc, #16]	@ (8010bcc <RCCEx_PLLSAI2_Config+0x1b8>)
 8010bbc:	4313      	orrs	r3, r2
 8010bbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8010bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3710      	adds	r7, #16
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	bf00      	nop
 8010bcc:	40021000 	.word	0x40021000

08010bd0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b084      	sub	sp, #16
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010bd8:	2301      	movs	r3, #1
 8010bda:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d079      	beq.n	8010cd6 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d106      	bne.n	8010bfc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f7f6 fc26 	bl	8007448 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2202      	movs	r2, #2
 8010c00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	f003 0310 	and.w	r3, r3, #16
 8010c0e:	2b10      	cmp	r3, #16
 8010c10:	d058      	beq.n	8010cc4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	22ca      	movs	r2, #202	@ 0xca
 8010c18:	625a      	str	r2, [r3, #36]	@ 0x24
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	2253      	movs	r2, #83	@ 0x53
 8010c20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f000 fb82 	bl	801132c <RTC_EnterInitMode>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010c2c:	7bfb      	ldrb	r3, [r7, #15]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d127      	bne.n	8010c82 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	689b      	ldr	r3, [r3, #8]
 8010c38:	687a      	ldr	r2, [r7, #4]
 8010c3a:	6812      	ldr	r2, [r2, #0]
 8010c3c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010c40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c44:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	6899      	ldr	r1, [r3, #8]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	685a      	ldr	r2, [r3, #4]
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	691b      	ldr	r3, [r3, #16]
 8010c54:	431a      	orrs	r2, r3
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	699b      	ldr	r3, [r3, #24]
 8010c5a:	431a      	orrs	r2, r3
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	430a      	orrs	r2, r1
 8010c62:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	687a      	ldr	r2, [r7, #4]
 8010c6a:	68d2      	ldr	r2, [r2, #12]
 8010c6c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	6919      	ldr	r1, [r3, #16]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	689b      	ldr	r3, [r3, #8]
 8010c78:	041a      	lsls	r2, r3, #16
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	430a      	orrs	r2, r1
 8010c80:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f000 fb86 	bl	8011394 <RTC_ExitInitMode>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010c8c:	7bfb      	ldrb	r3, [r7, #15]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d113      	bne.n	8010cba <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	f022 0203 	bic.w	r2, r2, #3
 8010ca0:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	69da      	ldr	r2, [r3, #28]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	695b      	ldr	r3, [r3, #20]
 8010cb0:	431a      	orrs	r2, r3
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	430a      	orrs	r2, r1
 8010cb8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	22ff      	movs	r2, #255	@ 0xff
 8010cc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8010cc2:	e001      	b.n	8010cc8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8010cc8:	7bfb      	ldrb	r3, [r7, #15]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d103      	bne.n	8010cd6 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2201      	movs	r2, #1
 8010cd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8010cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3710      	adds	r7, #16
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010ce0:	b590      	push	{r4, r7, lr}
 8010ce2:	b087      	sub	sp, #28
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	60f8      	str	r0, [r7, #12]
 8010ce8:	60b9      	str	r1, [r7, #8]
 8010cea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010cf2:	2b01      	cmp	r3, #1
 8010cf4:	d101      	bne.n	8010cfa <HAL_RTC_SetTime+0x1a>
 8010cf6:	2302      	movs	r3, #2
 8010cf8:	e08b      	b.n	8010e12 <HAL_RTC_SetTime+0x132>
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	2201      	movs	r2, #1
 8010cfe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	2202      	movs	r2, #2
 8010d06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	22ca      	movs	r2, #202	@ 0xca
 8010d10:	625a      	str	r2, [r3, #36]	@ 0x24
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	2253      	movs	r2, #83	@ 0x53
 8010d18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010d1a:	68f8      	ldr	r0, [r7, #12]
 8010d1c:	f000 fb06 	bl	801132c <RTC_EnterInitMode>
 8010d20:	4603      	mov	r3, r0
 8010d22:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010d24:	7cfb      	ldrb	r3, [r7, #19]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d163      	bne.n	8010df2 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d126      	bne.n	8010d7e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	689b      	ldr	r3, [r3, #8]
 8010d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d102      	bne.n	8010d44 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	2200      	movs	r2, #0
 8010d42:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f000 fb61 	bl	8011410 <RTC_ByteToBcd2>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	785b      	ldrb	r3, [r3, #1]
 8010d56:	4618      	mov	r0, r3
 8010d58:	f000 fb5a 	bl	8011410 <RTC_ByteToBcd2>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010d60:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	789b      	ldrb	r3, [r3, #2]
 8010d66:	4618      	mov	r0, r3
 8010d68:	f000 fb52 	bl	8011410 <RTC_ByteToBcd2>
 8010d6c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010d6e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	78db      	ldrb	r3, [r3, #3]
 8010d76:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010d78:	4313      	orrs	r3, r2
 8010d7a:	617b      	str	r3, [r7, #20]
 8010d7c:	e018      	b.n	8010db0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	689b      	ldr	r3, [r3, #8]
 8010d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d102      	bne.n	8010d92 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	785b      	ldrb	r3, [r3, #1]
 8010d9c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010d9e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8010da0:	68ba      	ldr	r2, [r7, #8]
 8010da2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010da4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	78db      	ldrb	r3, [r3, #3]
 8010daa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010dac:	4313      	orrs	r3, r2
 8010dae:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	681a      	ldr	r2, [r3, #0]
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8010dba:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8010dbe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	689a      	ldr	r2, [r3, #8]
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8010dce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	6899      	ldr	r1, [r3, #8]
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	68da      	ldr	r2, [r3, #12]
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	691b      	ldr	r3, [r3, #16]
 8010dde:	431a      	orrs	r2, r3
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	430a      	orrs	r2, r1
 8010de6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010de8:	68f8      	ldr	r0, [r7, #12]
 8010dea:	f000 fad3 	bl	8011394 <RTC_ExitInitMode>
 8010dee:	4603      	mov	r3, r0
 8010df0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	22ff      	movs	r2, #255	@ 0xff
 8010df8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8010dfa:	7cfb      	ldrb	r3, [r7, #19]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d103      	bne.n	8010e08 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	2201      	movs	r2, #1
 8010e04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010e10:	7cfb      	ldrb	r3, [r7, #19]
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	371c      	adds	r7, #28
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd90      	pop	{r4, r7, pc}

08010e1a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010e1a:	b580      	push	{r7, lr}
 8010e1c:	b086      	sub	sp, #24
 8010e1e:	af00      	add	r7, sp, #0
 8010e20:	60f8      	str	r0, [r7, #12]
 8010e22:	60b9      	str	r1, [r7, #8]
 8010e24:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	691b      	ldr	r3, [r3, #16]
 8010e36:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8010e48:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8010e4c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	0c1b      	lsrs	r3, r3, #16
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010e58:	b2da      	uxtb	r2, r3
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	0a1b      	lsrs	r3, r3, #8
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e68:	b2da      	uxtb	r2, r3
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	b2db      	uxtb	r3, r3
 8010e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e76:	b2da      	uxtb	r2, r3
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	0d9b      	lsrs	r3, r3, #22
 8010e80:	b2db      	uxtb	r3, r3
 8010e82:	f003 0301 	and.w	r3, r3, #1
 8010e86:	b2da      	uxtb	r2, r3
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d11a      	bne.n	8010ec8 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	781b      	ldrb	r3, [r3, #0]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f000 fada 	bl	8011450 <RTC_Bcd2ToByte>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	785b      	ldrb	r3, [r3, #1]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f000 fad1 	bl	8011450 <RTC_Bcd2ToByte>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	789b      	ldrb	r3, [r3, #2]
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f000 fac8 	bl	8011450 <RTC_Bcd2ToByte>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8010ec8:	2300      	movs	r3, #0
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3718      	adds	r7, #24
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}

08010ed2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010ed2:	b590      	push	{r4, r7, lr}
 8010ed4:	b087      	sub	sp, #28
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	60f8      	str	r0, [r7, #12]
 8010eda:	60b9      	str	r1, [r7, #8]
 8010edc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ee4:	2b01      	cmp	r3, #1
 8010ee6:	d101      	bne.n	8010eec <HAL_RTC_SetDate+0x1a>
 8010ee8:	2302      	movs	r3, #2
 8010eea:	e075      	b.n	8010fd8 <HAL_RTC_SetDate+0x106>
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2201      	movs	r2, #1
 8010ef0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	2202      	movs	r2, #2
 8010ef8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d10e      	bne.n	8010f20 <HAL_RTC_SetDate+0x4e>
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	785b      	ldrb	r3, [r3, #1]
 8010f06:	f003 0310 	and.w	r3, r3, #16
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d008      	beq.n	8010f20 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	785b      	ldrb	r3, [r3, #1]
 8010f12:	f023 0310 	bic.w	r3, r3, #16
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	330a      	adds	r3, #10
 8010f1a:	b2da      	uxtb	r2, r3
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d11c      	bne.n	8010f60 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	78db      	ldrb	r3, [r3, #3]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f000 fa70 	bl	8011410 <RTC_ByteToBcd2>
 8010f30:	4603      	mov	r3, r0
 8010f32:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	785b      	ldrb	r3, [r3, #1]
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f000 fa69 	bl	8011410 <RTC_ByteToBcd2>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010f42:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	789b      	ldrb	r3, [r3, #2]
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f000 fa61 	bl	8011410 <RTC_ByteToBcd2>
 8010f4e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010f50:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010f5a:	4313      	orrs	r3, r2
 8010f5c:	617b      	str	r3, [r7, #20]
 8010f5e:	e00e      	b.n	8010f7e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	78db      	ldrb	r3, [r3, #3]
 8010f64:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	785b      	ldrb	r3, [r3, #1]
 8010f6a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010f6c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8010f6e:	68ba      	ldr	r2, [r7, #8]
 8010f70:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8010f72:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	781b      	ldrb	r3, [r3, #0]
 8010f78:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010f7a:	4313      	orrs	r3, r2
 8010f7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	22ca      	movs	r2, #202	@ 0xca
 8010f84:	625a      	str	r2, [r3, #36]	@ 0x24
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	2253      	movs	r2, #83	@ 0x53
 8010f8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010f8e:	68f8      	ldr	r0, [r7, #12]
 8010f90:	f000 f9cc 	bl	801132c <RTC_EnterInitMode>
 8010f94:	4603      	mov	r3, r0
 8010f96:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010f98:	7cfb      	ldrb	r3, [r7, #19]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d10c      	bne.n	8010fb8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	681a      	ldr	r2, [r3, #0]
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010fa8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010fac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010fae:	68f8      	ldr	r0, [r7, #12]
 8010fb0:	f000 f9f0 	bl	8011394 <RTC_ExitInitMode>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	22ff      	movs	r2, #255	@ 0xff
 8010fbe:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8010fc0:	7cfb      	ldrb	r3, [r7, #19]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d103      	bne.n	8010fce <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	2201      	movs	r2, #1
 8010fca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8010fd6:	7cfb      	ldrb	r3, [r7, #19]
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	371c      	adds	r7, #28
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd90      	pop	{r4, r7, pc}

08010fe0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8010fe0:	b590      	push	{r4, r7, lr}
 8010fe2:	b089      	sub	sp, #36	@ 0x24
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	60f8      	str	r0, [r7, #12]
 8010fe8:	60b9      	str	r1, [r7, #8]
 8010fea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ff2:	2b01      	cmp	r3, #1
 8010ff4:	d101      	bne.n	8010ffa <HAL_RTC_SetAlarm_IT+0x1a>
 8010ff6:	2302      	movs	r3, #2
 8010ff8:	e127      	b.n	801124a <HAL_RTC_SetAlarm_IT+0x26a>
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	2202      	movs	r2, #2
 8011006:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d137      	bne.n	8011080 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	689b      	ldr	r3, [r3, #8]
 8011016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801101a:	2b00      	cmp	r3, #0
 801101c:	d102      	bne.n	8011024 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	2200      	movs	r2, #0
 8011022:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	4618      	mov	r0, r3
 801102a:	f000 f9f1 	bl	8011410 <RTC_ByteToBcd2>
 801102e:	4603      	mov	r3, r0
 8011030:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	785b      	ldrb	r3, [r3, #1]
 8011036:	4618      	mov	r0, r3
 8011038:	f000 f9ea 	bl	8011410 <RTC_ByteToBcd2>
 801103c:	4603      	mov	r3, r0
 801103e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011040:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	789b      	ldrb	r3, [r3, #2]
 8011046:	4618      	mov	r0, r3
 8011048:	f000 f9e2 	bl	8011410 <RTC_ByteToBcd2>
 801104c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801104e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	78db      	ldrb	r3, [r3, #3]
 8011056:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8011058:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011062:	4618      	mov	r0, r3
 8011064:	f000 f9d4 	bl	8011410 <RTC_ByteToBcd2>
 8011068:	4603      	mov	r3, r0
 801106a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 801106c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8011074:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8011076:	68bb      	ldr	r3, [r7, #8]
 8011078:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801107a:	4313      	orrs	r3, r2
 801107c:	61fb      	str	r3, [r7, #28]
 801107e:	e023      	b.n	80110c8 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	689b      	ldr	r3, [r3, #8]
 8011086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801108a:	2b00      	cmp	r3, #0
 801108c:	d102      	bne.n	8011094 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	2200      	movs	r2, #0
 8011092:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	785b      	ldrb	r3, [r3, #1]
 801109e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80110a0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80110a2:	68ba      	ldr	r2, [r7, #8]
 80110a4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80110a6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	78db      	ldrb	r3, [r3, #3]
 80110ac:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80110ae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80110b6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80110b8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80110be:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80110c4:	4313      	orrs	r3, r2
 80110c6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	685a      	ldr	r2, [r3, #4]
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	69db      	ldr	r3, [r3, #28]
 80110d0:	4313      	orrs	r3, r2
 80110d2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	22ca      	movs	r2, #202	@ 0xca
 80110da:	625a      	str	r2, [r3, #36]	@ 0x24
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	2253      	movs	r2, #83	@ 0x53
 80110e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80110ec:	d14a      	bne.n	8011184 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	689a      	ldr	r2, [r3, #8]
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80110fc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	b2da      	uxtb	r2, r3
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 801110e:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8011110:	f7f9 fdfe 	bl	800ad10 <HAL_GetTick>
 8011114:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8011116:	e015      	b.n	8011144 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011118:	f7f9 fdfa 	bl	800ad10 <HAL_GetTick>
 801111c:	4602      	mov	r2, r0
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	1ad3      	subs	r3, r2, r3
 8011122:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011126:	d90d      	bls.n	8011144 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	22ff      	movs	r2, #255	@ 0xff
 801112e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2203      	movs	r2, #3
 8011134:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2200      	movs	r2, #0
 801113c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8011140:	2303      	movs	r3, #3
 8011142:	e082      	b.n	801124a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	68db      	ldr	r3, [r3, #12]
 801114a:	f003 0301 	and.w	r3, r3, #1
 801114e:	2b00      	cmp	r3, #0
 8011150:	d0e2      	beq.n	8011118 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	69fa      	ldr	r2, [r7, #28]
 8011158:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	69ba      	ldr	r2, [r7, #24]
 8011160:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	689a      	ldr	r2, [r3, #8]
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011170:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	689a      	ldr	r2, [r3, #8]
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011180:	609a      	str	r2, [r3, #8]
 8011182:	e049      	b.n	8011218 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	689a      	ldr	r2, [r3, #8]
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8011192:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	68db      	ldr	r3, [r3, #12]
 801119a:	b2da      	uxtb	r2, r3
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80111a4:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80111a6:	f7f9 fdb3 	bl	800ad10 <HAL_GetTick>
 80111aa:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80111ac:	e015      	b.n	80111da <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80111ae:	f7f9 fdaf 	bl	800ad10 <HAL_GetTick>
 80111b2:	4602      	mov	r2, r0
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	1ad3      	subs	r3, r2, r3
 80111b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80111bc:	d90d      	bls.n	80111da <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	22ff      	movs	r2, #255	@ 0xff
 80111c4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	2203      	movs	r2, #3
 80111ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2200      	movs	r2, #0
 80111d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80111d6:	2303      	movs	r3, #3
 80111d8:	e037      	b.n	801124a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	68db      	ldr	r3, [r3, #12]
 80111e0:	f003 0302 	and.w	r3, r3, #2
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d0e2      	beq.n	80111ae <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	69fa      	ldr	r2, [r7, #28]
 80111ee:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	69ba      	ldr	r2, [r7, #24]
 80111f6:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	689a      	ldr	r2, [r3, #8]
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011206:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	689a      	ldr	r2, [r3, #8]
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8011216:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8011218:	4b0e      	ldr	r3, [pc, #56]	@ (8011254 <HAL_RTC_SetAlarm_IT+0x274>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	4a0d      	ldr	r2, [pc, #52]	@ (8011254 <HAL_RTC_SetAlarm_IT+0x274>)
 801121e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011222:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8011224:	4b0b      	ldr	r3, [pc, #44]	@ (8011254 <HAL_RTC_SetAlarm_IT+0x274>)
 8011226:	689b      	ldr	r3, [r3, #8]
 8011228:	4a0a      	ldr	r2, [pc, #40]	@ (8011254 <HAL_RTC_SetAlarm_IT+0x274>)
 801122a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801122e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	22ff      	movs	r2, #255	@ 0xff
 8011236:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	2201      	movs	r2, #1
 801123c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	2200      	movs	r2, #0
 8011244:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8011248:	2300      	movs	r3, #0
}
 801124a:	4618      	mov	r0, r3
 801124c:	3724      	adds	r7, #36	@ 0x24
 801124e:	46bd      	mov	sp, r7
 8011250:	bd90      	pop	{r4, r7, pc}
 8011252:	bf00      	nop
 8011254:	40010400 	.word	0x40010400

08011258 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8011260:	4b1f      	ldr	r3, [pc, #124]	@ (80112e0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8011262:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011266:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	689b      	ldr	r3, [r3, #8]
 801126e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011272:	2b00      	cmp	r3, #0
 8011274:	d012      	beq.n	801129c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	68db      	ldr	r3, [r3, #12]
 801127c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011280:	2b00      	cmp	r3, #0
 8011282:	d00b      	beq.n	801129c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	68db      	ldr	r3, [r3, #12]
 801128a:	b2da      	uxtb	r2, r3
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8011294:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8011296:	6878      	ldr	r0, [r7, #4]
 8011298:	f7f1 fb7a 	bl	8002990 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	689b      	ldr	r3, [r3, #8]
 80112a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d012      	beq.n	80112d0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	68db      	ldr	r3, [r3, #12]
 80112b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d00b      	beq.n	80112d0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	68db      	ldr	r3, [r3, #12]
 80112be:	b2da      	uxtb	r2, r3
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80112c8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f000 f8da 	bl	8011484 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2201      	movs	r2, #1
 80112d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80112d8:	bf00      	nop
 80112da:	3708      	adds	r7, #8
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}
 80112e0:	40010400 	.word	0x40010400

080112e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b084      	sub	sp, #16
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	4a0d      	ldr	r2, [pc, #52]	@ (8011328 <HAL_RTC_WaitForSynchro+0x44>)
 80112f2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80112f4:	f7f9 fd0c 	bl	800ad10 <HAL_GetTick>
 80112f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80112fa:	e009      	b.n	8011310 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80112fc:	f7f9 fd08 	bl	800ad10 <HAL_GetTick>
 8011300:	4602      	mov	r2, r0
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	1ad3      	subs	r3, r2, r3
 8011306:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801130a:	d901      	bls.n	8011310 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 801130c:	2303      	movs	r3, #3
 801130e:	e007      	b.n	8011320 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	f003 0320 	and.w	r3, r3, #32
 801131a:	2b00      	cmp	r3, #0
 801131c:	d0ee      	beq.n	80112fc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 801131e:	2300      	movs	r3, #0
}
 8011320:	4618      	mov	r0, r3
 8011322:	3710      	adds	r7, #16
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	0003ff5f 	.word	0x0003ff5f

0801132c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b084      	sub	sp, #16
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011334:	2300      	movs	r3, #0
 8011336:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	68db      	ldr	r3, [r3, #12]
 801133e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011342:	2b00      	cmp	r3, #0
 8011344:	d120      	bne.n	8011388 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f04f 32ff 	mov.w	r2, #4294967295
 801134e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011350:	f7f9 fcde 	bl	800ad10 <HAL_GetTick>
 8011354:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011356:	e00d      	b.n	8011374 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011358:	f7f9 fcda 	bl	800ad10 <HAL_GetTick>
 801135c:	4602      	mov	r2, r0
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	1ad3      	subs	r3, r2, r3
 8011362:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011366:	d905      	bls.n	8011374 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011368:	2303      	movs	r3, #3
 801136a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2203      	movs	r2, #3
 8011370:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801137e:	2b00      	cmp	r3, #0
 8011380:	d102      	bne.n	8011388 <RTC_EnterInitMode+0x5c>
 8011382:	7bfb      	ldrb	r3, [r7, #15]
 8011384:	2b03      	cmp	r3, #3
 8011386:	d1e7      	bne.n	8011358 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8011388:	7bfb      	ldrb	r3, [r7, #15]
}
 801138a:	4618      	mov	r0, r3
 801138c:	3710      	adds	r7, #16
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
	...

08011394 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b084      	sub	sp, #16
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801139c:	2300      	movs	r3, #0
 801139e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80113a0:	4b1a      	ldr	r3, [pc, #104]	@ (801140c <RTC_ExitInitMode+0x78>)
 80113a2:	68db      	ldr	r3, [r3, #12]
 80113a4:	4a19      	ldr	r2, [pc, #100]	@ (801140c <RTC_ExitInitMode+0x78>)
 80113a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80113aa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80113ac:	4b17      	ldr	r3, [pc, #92]	@ (801140c <RTC_ExitInitMode+0x78>)
 80113ae:	689b      	ldr	r3, [r3, #8]
 80113b0:	f003 0320 	and.w	r3, r3, #32
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d10c      	bne.n	80113d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f7ff ff93 	bl	80112e4 <HAL_RTC_WaitForSynchro>
 80113be:	4603      	mov	r3, r0
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d01e      	beq.n	8011402 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2203      	movs	r2, #3
 80113c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80113cc:	2303      	movs	r3, #3
 80113ce:	73fb      	strb	r3, [r7, #15]
 80113d0:	e017      	b.n	8011402 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80113d2:	4b0e      	ldr	r3, [pc, #56]	@ (801140c <RTC_ExitInitMode+0x78>)
 80113d4:	689b      	ldr	r3, [r3, #8]
 80113d6:	4a0d      	ldr	r2, [pc, #52]	@ (801140c <RTC_ExitInitMode+0x78>)
 80113d8:	f023 0320 	bic.w	r3, r3, #32
 80113dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f7ff ff80 	bl	80112e4 <HAL_RTC_WaitForSynchro>
 80113e4:	4603      	mov	r3, r0
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d005      	beq.n	80113f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2203      	movs	r2, #3
 80113ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80113f2:	2303      	movs	r3, #3
 80113f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80113f6:	4b05      	ldr	r3, [pc, #20]	@ (801140c <RTC_ExitInitMode+0x78>)
 80113f8:	689b      	ldr	r3, [r3, #8]
 80113fa:	4a04      	ldr	r2, [pc, #16]	@ (801140c <RTC_ExitInitMode+0x78>)
 80113fc:	f043 0320 	orr.w	r3, r3, #32
 8011400:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011402:	7bfb      	ldrb	r3, [r7, #15]
}
 8011404:	4618      	mov	r0, r3
 8011406:	3710      	adds	r7, #16
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}
 801140c:	40002800 	.word	0x40002800

08011410 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011410:	b480      	push	{r7}
 8011412:	b085      	sub	sp, #20
 8011414:	af00      	add	r7, sp, #0
 8011416:	4603      	mov	r3, r0
 8011418:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 801141a:	2300      	movs	r3, #0
 801141c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 801141e:	79fb      	ldrb	r3, [r7, #7]
 8011420:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8011422:	e005      	b.n	8011430 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	3301      	adds	r3, #1
 8011428:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 801142a:	7afb      	ldrb	r3, [r7, #11]
 801142c:	3b0a      	subs	r3, #10
 801142e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8011430:	7afb      	ldrb	r3, [r7, #11]
 8011432:	2b09      	cmp	r3, #9
 8011434:	d8f6      	bhi.n	8011424 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	b2db      	uxtb	r3, r3
 801143a:	011b      	lsls	r3, r3, #4
 801143c:	b2da      	uxtb	r2, r3
 801143e:	7afb      	ldrb	r3, [r7, #11]
 8011440:	4313      	orrs	r3, r2
 8011442:	b2db      	uxtb	r3, r3
}
 8011444:	4618      	mov	r0, r3
 8011446:	3714      	adds	r7, #20
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr

08011450 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011450:	b480      	push	{r7}
 8011452:	b085      	sub	sp, #20
 8011454:	af00      	add	r7, sp, #0
 8011456:	4603      	mov	r3, r0
 8011458:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 801145a:	79fb      	ldrb	r3, [r7, #7]
 801145c:	091b      	lsrs	r3, r3, #4
 801145e:	b2db      	uxtb	r3, r3
 8011460:	461a      	mov	r2, r3
 8011462:	0092      	lsls	r2, r2, #2
 8011464:	4413      	add	r3, r2
 8011466:	005b      	lsls	r3, r3, #1
 8011468:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 801146a:	79fb      	ldrb	r3, [r7, #7]
 801146c:	f003 030f 	and.w	r3, r3, #15
 8011470:	b2da      	uxtb	r2, r3
 8011472:	7bfb      	ldrb	r3, [r7, #15]
 8011474:	4413      	add	r3, r2
 8011476:	b2db      	uxtb	r3, r3
}
 8011478:	4618      	mov	r0, r3
 801147a:	3714      	adds	r7, #20
 801147c:	46bd      	mov	sp, r7
 801147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011482:	4770      	bx	lr

08011484 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8011484:	b480      	push	{r7}
 8011486:	b083      	sub	sp, #12
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 801148c:	bf00      	nop
 801148e:	370c      	adds	r7, #12
 8011490:	46bd      	mov	sp, r7
 8011492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011496:	4770      	bx	lr

08011498 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d101      	bne.n	80114aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80114a6:	2301      	movs	r3, #1
 80114a8:	e095      	b.n	80115d6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d108      	bne.n	80114c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	685b      	ldr	r3, [r3, #4]
 80114b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80114ba:	d009      	beq.n	80114d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2200      	movs	r2, #0
 80114c0:	61da      	str	r2, [r3, #28]
 80114c2:	e005      	b.n	80114d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2200      	movs	r2, #0
 80114c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2200      	movs	r2, #0
 80114ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2200      	movs	r2, #0
 80114d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80114dc:	b2db      	uxtb	r3, r3
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d106      	bne.n	80114f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2200      	movs	r2, #0
 80114e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	f7f5 ffe6 	bl	80074bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2202      	movs	r2, #2
 80114f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	681a      	ldr	r2, [r3, #0]
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011506:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	68db      	ldr	r3, [r3, #12]
 801150c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011510:	d902      	bls.n	8011518 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8011512:	2300      	movs	r3, #0
 8011514:	60fb      	str	r3, [r7, #12]
 8011516:	e002      	b.n	801151e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8011518:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801151c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	68db      	ldr	r3, [r3, #12]
 8011522:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8011526:	d007      	beq.n	8011538 <HAL_SPI_Init+0xa0>
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	68db      	ldr	r3, [r3, #12]
 801152c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011530:	d002      	beq.n	8011538 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	2200      	movs	r2, #0
 8011536:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	689b      	ldr	r3, [r3, #8]
 8011544:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8011548:	431a      	orrs	r2, r3
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	691b      	ldr	r3, [r3, #16]
 801154e:	f003 0302 	and.w	r3, r3, #2
 8011552:	431a      	orrs	r2, r3
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	695b      	ldr	r3, [r3, #20]
 8011558:	f003 0301 	and.w	r3, r3, #1
 801155c:	431a      	orrs	r2, r3
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	699b      	ldr	r3, [r3, #24]
 8011562:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011566:	431a      	orrs	r2, r3
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	69db      	ldr	r3, [r3, #28]
 801156c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011570:	431a      	orrs	r2, r3
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6a1b      	ldr	r3, [r3, #32]
 8011576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801157a:	ea42 0103 	orr.w	r1, r2, r3
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011582:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	430a      	orrs	r2, r1
 801158c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	699b      	ldr	r3, [r3, #24]
 8011592:	0c1b      	lsrs	r3, r3, #16
 8011594:	f003 0204 	and.w	r2, r3, #4
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801159c:	f003 0310 	and.w	r3, r3, #16
 80115a0:	431a      	orrs	r2, r3
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80115a6:	f003 0308 	and.w	r3, r3, #8
 80115aa:	431a      	orrs	r2, r3
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	68db      	ldr	r3, [r3, #12]
 80115b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80115b4:	ea42 0103 	orr.w	r1, r2, r3
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	430a      	orrs	r2, r1
 80115c4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2200      	movs	r2, #0
 80115ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2201      	movs	r2, #1
 80115d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80115d4:	2300      	movs	r3, #0
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	3710      	adds	r7, #16
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}

080115de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80115de:	b580      	push	{r7, lr}
 80115e0:	b088      	sub	sp, #32
 80115e2:	af00      	add	r7, sp, #0
 80115e4:	60f8      	str	r0, [r7, #12]
 80115e6:	60b9      	str	r1, [r7, #8]
 80115e8:	603b      	str	r3, [r7, #0]
 80115ea:	4613      	mov	r3, r2
 80115ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80115ee:	f7f9 fb8f 	bl	800ad10 <HAL_GetTick>
 80115f2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80115f4:	88fb      	ldrh	r3, [r7, #6]
 80115f6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80115fe:	b2db      	uxtb	r3, r3
 8011600:	2b01      	cmp	r3, #1
 8011602:	d001      	beq.n	8011608 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8011604:	2302      	movs	r3, #2
 8011606:	e15c      	b.n	80118c2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d002      	beq.n	8011614 <HAL_SPI_Transmit+0x36>
 801160e:	88fb      	ldrh	r3, [r7, #6]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d101      	bne.n	8011618 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8011614:	2301      	movs	r3, #1
 8011616:	e154      	b.n	80118c2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 801161e:	2b01      	cmp	r3, #1
 8011620:	d101      	bne.n	8011626 <HAL_SPI_Transmit+0x48>
 8011622:	2302      	movs	r3, #2
 8011624:	e14d      	b.n	80118c2 <HAL_SPI_Transmit+0x2e4>
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	2201      	movs	r2, #1
 801162a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	2203      	movs	r2, #3
 8011632:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	2200      	movs	r2, #0
 801163a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	68ba      	ldr	r2, [r7, #8]
 8011640:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	88fa      	ldrh	r2, [r7, #6]
 8011646:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	88fa      	ldrh	r2, [r7, #6]
 801164c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	2200      	movs	r2, #0
 8011652:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	2200      	movs	r2, #0
 8011658:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	2200      	movs	r2, #0
 8011660:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	2200      	movs	r2, #0
 8011668:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	2200      	movs	r2, #0
 801166e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	689b      	ldr	r3, [r3, #8]
 8011674:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011678:	d10f      	bne.n	801169a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	681a      	ldr	r2, [r3, #0]
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011688:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	681a      	ldr	r2, [r3, #0]
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011698:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80116a4:	2b40      	cmp	r3, #64	@ 0x40
 80116a6:	d007      	beq.n	80116b8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	681a      	ldr	r2, [r3, #0]
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80116b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	68db      	ldr	r3, [r3, #12]
 80116bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80116c0:	d952      	bls.n	8011768 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	685b      	ldr	r3, [r3, #4]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d002      	beq.n	80116d0 <HAL_SPI_Transmit+0xf2>
 80116ca:	8b7b      	ldrh	r3, [r7, #26]
 80116cc:	2b01      	cmp	r3, #1
 80116ce:	d145      	bne.n	801175c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116d4:	881a      	ldrh	r2, [r3, #0]
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116e0:	1c9a      	adds	r2, r3, #2
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80116ea:	b29b      	uxth	r3, r3
 80116ec:	3b01      	subs	r3, #1
 80116ee:	b29a      	uxth	r2, r3
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80116f4:	e032      	b.n	801175c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	689b      	ldr	r3, [r3, #8]
 80116fc:	f003 0302 	and.w	r3, r3, #2
 8011700:	2b02      	cmp	r3, #2
 8011702:	d112      	bne.n	801172a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011708:	881a      	ldrh	r2, [r3, #0]
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011714:	1c9a      	adds	r2, r3, #2
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801171e:	b29b      	uxth	r3, r3
 8011720:	3b01      	subs	r3, #1
 8011722:	b29a      	uxth	r2, r3
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011728:	e018      	b.n	801175c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801172a:	f7f9 faf1 	bl	800ad10 <HAL_GetTick>
 801172e:	4602      	mov	r2, r0
 8011730:	69fb      	ldr	r3, [r7, #28]
 8011732:	1ad3      	subs	r3, r2, r3
 8011734:	683a      	ldr	r2, [r7, #0]
 8011736:	429a      	cmp	r2, r3
 8011738:	d803      	bhi.n	8011742 <HAL_SPI_Transmit+0x164>
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011740:	d102      	bne.n	8011748 <HAL_SPI_Transmit+0x16a>
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d109      	bne.n	801175c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	2201      	movs	r2, #1
 801174c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	2200      	movs	r2, #0
 8011754:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011758:	2303      	movs	r3, #3
 801175a:	e0b2      	b.n	80118c2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011760:	b29b      	uxth	r3, r3
 8011762:	2b00      	cmp	r3, #0
 8011764:	d1c7      	bne.n	80116f6 <HAL_SPI_Transmit+0x118>
 8011766:	e083      	b.n	8011870 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	685b      	ldr	r3, [r3, #4]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d002      	beq.n	8011776 <HAL_SPI_Transmit+0x198>
 8011770:	8b7b      	ldrh	r3, [r7, #26]
 8011772:	2b01      	cmp	r3, #1
 8011774:	d177      	bne.n	8011866 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801177a:	b29b      	uxth	r3, r3
 801177c:	2b01      	cmp	r3, #1
 801177e:	d912      	bls.n	80117a6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011784:	881a      	ldrh	r2, [r3, #0]
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011790:	1c9a      	adds	r2, r3, #2
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801179a:	b29b      	uxth	r3, r3
 801179c:	3b02      	subs	r3, #2
 801179e:	b29a      	uxth	r2, r3
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80117a4:	e05f      	b.n	8011866 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	330c      	adds	r3, #12
 80117b0:	7812      	ldrb	r2, [r2, #0]
 80117b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117b8:	1c5a      	adds	r2, r3, #1
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80117c2:	b29b      	uxth	r3, r3
 80117c4:	3b01      	subs	r3, #1
 80117c6:	b29a      	uxth	r2, r3
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80117cc:	e04b      	b.n	8011866 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	689b      	ldr	r3, [r3, #8]
 80117d4:	f003 0302 	and.w	r3, r3, #2
 80117d8:	2b02      	cmp	r3, #2
 80117da:	d12b      	bne.n	8011834 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80117e0:	b29b      	uxth	r3, r3
 80117e2:	2b01      	cmp	r3, #1
 80117e4:	d912      	bls.n	801180c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117ea:	881a      	ldrh	r2, [r3, #0]
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117f6:	1c9a      	adds	r2, r3, #2
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011800:	b29b      	uxth	r3, r3
 8011802:	3b02      	subs	r3, #2
 8011804:	b29a      	uxth	r2, r3
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801180a:	e02c      	b.n	8011866 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	330c      	adds	r3, #12
 8011816:	7812      	ldrb	r2, [r2, #0]
 8011818:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801181e:	1c5a      	adds	r2, r3, #1
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011828:	b29b      	uxth	r3, r3
 801182a:	3b01      	subs	r3, #1
 801182c:	b29a      	uxth	r2, r3
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011832:	e018      	b.n	8011866 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011834:	f7f9 fa6c 	bl	800ad10 <HAL_GetTick>
 8011838:	4602      	mov	r2, r0
 801183a:	69fb      	ldr	r3, [r7, #28]
 801183c:	1ad3      	subs	r3, r2, r3
 801183e:	683a      	ldr	r2, [r7, #0]
 8011840:	429a      	cmp	r2, r3
 8011842:	d803      	bhi.n	801184c <HAL_SPI_Transmit+0x26e>
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	f1b3 3fff 	cmp.w	r3, #4294967295
 801184a:	d102      	bne.n	8011852 <HAL_SPI_Transmit+0x274>
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d109      	bne.n	8011866 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	2201      	movs	r2, #1
 8011856:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	2200      	movs	r2, #0
 801185e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011862:	2303      	movs	r3, #3
 8011864:	e02d      	b.n	80118c2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801186a:	b29b      	uxth	r3, r3
 801186c:	2b00      	cmp	r3, #0
 801186e:	d1ae      	bne.n	80117ce <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011870:	69fa      	ldr	r2, [r7, #28]
 8011872:	6839      	ldr	r1, [r7, #0]
 8011874:	68f8      	ldr	r0, [r7, #12]
 8011876:	f000 fcf5 	bl	8012264 <SPI_EndRxTxTransaction>
 801187a:	4603      	mov	r3, r0
 801187c:	2b00      	cmp	r3, #0
 801187e:	d002      	beq.n	8011886 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	2220      	movs	r2, #32
 8011884:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	689b      	ldr	r3, [r3, #8]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d10a      	bne.n	80118a4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801188e:	2300      	movs	r3, #0
 8011890:	617b      	str	r3, [r7, #20]
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	68db      	ldr	r3, [r3, #12]
 8011898:	617b      	str	r3, [r7, #20]
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	689b      	ldr	r3, [r3, #8]
 80118a0:	617b      	str	r3, [r7, #20]
 80118a2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	2201      	movs	r2, #1
 80118a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	2200      	movs	r2, #0
 80118b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d001      	beq.n	80118c0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80118bc:	2301      	movs	r3, #1
 80118be:	e000      	b.n	80118c2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80118c0:	2300      	movs	r3, #0
  }
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3720      	adds	r7, #32
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}

080118ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80118ca:	b580      	push	{r7, lr}
 80118cc:	b088      	sub	sp, #32
 80118ce:	af02      	add	r7, sp, #8
 80118d0:	60f8      	str	r0, [r7, #12]
 80118d2:	60b9      	str	r1, [r7, #8]
 80118d4:	603b      	str	r3, [r7, #0]
 80118d6:	4613      	mov	r3, r2
 80118d8:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80118e0:	b2db      	uxtb	r3, r3
 80118e2:	2b01      	cmp	r3, #1
 80118e4:	d001      	beq.n	80118ea <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80118e6:	2302      	movs	r3, #2
 80118e8:	e123      	b.n	8011b32 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80118f2:	d112      	bne.n	801191a <HAL_SPI_Receive+0x50>
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	689b      	ldr	r3, [r3, #8]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d10e      	bne.n	801191a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	2204      	movs	r2, #4
 8011900:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8011904:	88fa      	ldrh	r2, [r7, #6]
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	9300      	str	r3, [sp, #0]
 801190a:	4613      	mov	r3, r2
 801190c:	68ba      	ldr	r2, [r7, #8]
 801190e:	68b9      	ldr	r1, [r7, #8]
 8011910:	68f8      	ldr	r0, [r7, #12]
 8011912:	f000 f912 	bl	8011b3a <HAL_SPI_TransmitReceive>
 8011916:	4603      	mov	r3, r0
 8011918:	e10b      	b.n	8011b32 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801191a:	f7f9 f9f9 	bl	800ad10 <HAL_GetTick>
 801191e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d002      	beq.n	801192c <HAL_SPI_Receive+0x62>
 8011926:	88fb      	ldrh	r3, [r7, #6]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d101      	bne.n	8011930 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 801192c:	2301      	movs	r3, #1
 801192e:	e100      	b.n	8011b32 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011936:	2b01      	cmp	r3, #1
 8011938:	d101      	bne.n	801193e <HAL_SPI_Receive+0x74>
 801193a:	2302      	movs	r3, #2
 801193c:	e0f9      	b.n	8011b32 <HAL_SPI_Receive+0x268>
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2201      	movs	r2, #1
 8011942:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	2204      	movs	r2, #4
 801194a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	2200      	movs	r2, #0
 8011952:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	68ba      	ldr	r2, [r7, #8]
 8011958:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	88fa      	ldrh	r2, [r7, #6]
 801195e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	88fa      	ldrh	r2, [r7, #6]
 8011966:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	2200      	movs	r2, #0
 801196e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	2200      	movs	r2, #0
 8011974:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	2200      	movs	r2, #0
 801197a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	2200      	movs	r2, #0
 8011980:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	2200      	movs	r2, #0
 8011986:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	68db      	ldr	r3, [r3, #12]
 801198c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011990:	d908      	bls.n	80119a4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	685a      	ldr	r2, [r3, #4]
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80119a0:	605a      	str	r2, [r3, #4]
 80119a2:	e007      	b.n	80119b4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	685a      	ldr	r2, [r3, #4]
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80119b2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	689b      	ldr	r3, [r3, #8]
 80119b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80119bc:	d10f      	bne.n	80119de <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	681a      	ldr	r2, [r3, #0]
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80119cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80119dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119e8:	2b40      	cmp	r3, #64	@ 0x40
 80119ea:	d007      	beq.n	80119fc <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	681a      	ldr	r2, [r3, #0]
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80119fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	68db      	ldr	r3, [r3, #12]
 8011a00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011a04:	d875      	bhi.n	8011af2 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8011a06:	e037      	b.n	8011a78 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	689b      	ldr	r3, [r3, #8]
 8011a0e:	f003 0301 	and.w	r3, r3, #1
 8011a12:	2b01      	cmp	r3, #1
 8011a14:	d117      	bne.n	8011a46 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	f103 020c 	add.w	r2, r3, #12
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a22:	7812      	ldrb	r2, [r2, #0]
 8011a24:	b2d2      	uxtb	r2, r2
 8011a26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a2c:	1c5a      	adds	r2, r3, #1
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	3b01      	subs	r3, #1
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8011a44:	e018      	b.n	8011a78 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011a46:	f7f9 f963 	bl	800ad10 <HAL_GetTick>
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	1ad3      	subs	r3, r2, r3
 8011a50:	683a      	ldr	r2, [r7, #0]
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d803      	bhi.n	8011a5e <HAL_SPI_Receive+0x194>
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a5c:	d102      	bne.n	8011a64 <HAL_SPI_Receive+0x19a>
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d109      	bne.n	8011a78 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	2201      	movs	r2, #1
 8011a68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	2200      	movs	r2, #0
 8011a70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011a74:	2303      	movs	r3, #3
 8011a76:	e05c      	b.n	8011b32 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d1c1      	bne.n	8011a08 <HAL_SPI_Receive+0x13e>
 8011a84:	e03b      	b.n	8011afe <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	689b      	ldr	r3, [r3, #8]
 8011a8c:	f003 0301 	and.w	r3, r3, #1
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	d115      	bne.n	8011ac0 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	68da      	ldr	r2, [r3, #12]
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a9e:	b292      	uxth	r2, r2
 8011aa0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011aa6:	1c9a      	adds	r2, r3, #2
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	3b01      	subs	r3, #1
 8011ab6:	b29a      	uxth	r2, r3
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8011abe:	e018      	b.n	8011af2 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011ac0:	f7f9 f926 	bl	800ad10 <HAL_GetTick>
 8011ac4:	4602      	mov	r2, r0
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	1ad3      	subs	r3, r2, r3
 8011aca:	683a      	ldr	r2, [r7, #0]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d803      	bhi.n	8011ad8 <HAL_SPI_Receive+0x20e>
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ad6:	d102      	bne.n	8011ade <HAL_SPI_Receive+0x214>
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d109      	bne.n	8011af2 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8011aee:	2303      	movs	r3, #3
 8011af0:	e01f      	b.n	8011b32 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d1c3      	bne.n	8011a86 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011afe:	697a      	ldr	r2, [r7, #20]
 8011b00:	6839      	ldr	r1, [r7, #0]
 8011b02:	68f8      	ldr	r0, [r7, #12]
 8011b04:	f000 fb56 	bl	80121b4 <SPI_EndRxTransaction>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d002      	beq.n	8011b14 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	2220      	movs	r2, #32
 8011b12:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	2201      	movs	r2, #1
 8011b18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d001      	beq.n	8011b30 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	e000      	b.n	8011b32 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8011b30:	2300      	movs	r3, #0
  }
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	3718      	adds	r7, #24
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}

08011b3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8011b3a:	b580      	push	{r7, lr}
 8011b3c:	b08a      	sub	sp, #40	@ 0x28
 8011b3e:	af00      	add	r7, sp, #0
 8011b40:	60f8      	str	r0, [r7, #12]
 8011b42:	60b9      	str	r1, [r7, #8]
 8011b44:	607a      	str	r2, [r7, #4]
 8011b46:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011b48:	2301      	movs	r3, #1
 8011b4a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011b4c:	f7f9 f8e0 	bl	800ad10 <HAL_GetTick>
 8011b50:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011b58:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	685b      	ldr	r3, [r3, #4]
 8011b5e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8011b60:	887b      	ldrh	r3, [r7, #2]
 8011b62:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8011b64:	887b      	ldrh	r3, [r7, #2]
 8011b66:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011b68:	7ffb      	ldrb	r3, [r7, #31]
 8011b6a:	2b01      	cmp	r3, #1
 8011b6c:	d00c      	beq.n	8011b88 <HAL_SPI_TransmitReceive+0x4e>
 8011b6e:	69bb      	ldr	r3, [r7, #24]
 8011b70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011b74:	d106      	bne.n	8011b84 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	689b      	ldr	r3, [r3, #8]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d102      	bne.n	8011b84 <HAL_SPI_TransmitReceive+0x4a>
 8011b7e:	7ffb      	ldrb	r3, [r7, #31]
 8011b80:	2b04      	cmp	r3, #4
 8011b82:	d001      	beq.n	8011b88 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8011b84:	2302      	movs	r3, #2
 8011b86:	e1f3      	b.n	8011f70 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d005      	beq.n	8011b9a <HAL_SPI_TransmitReceive+0x60>
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d002      	beq.n	8011b9a <HAL_SPI_TransmitReceive+0x60>
 8011b94:	887b      	ldrh	r3, [r7, #2]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d101      	bne.n	8011b9e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	e1e8      	b.n	8011f70 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8011ba4:	2b01      	cmp	r3, #1
 8011ba6:	d101      	bne.n	8011bac <HAL_SPI_TransmitReceive+0x72>
 8011ba8:	2302      	movs	r3, #2
 8011baa:	e1e1      	b.n	8011f70 <HAL_SPI_TransmitReceive+0x436>
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	2201      	movs	r2, #1
 8011bb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8011bba:	b2db      	uxtb	r3, r3
 8011bbc:	2b04      	cmp	r3, #4
 8011bbe:	d003      	beq.n	8011bc8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	2205      	movs	r2, #5
 8011bc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	687a      	ldr	r2, [r7, #4]
 8011bd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	887a      	ldrh	r2, [r7, #2]
 8011bd8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	887a      	ldrh	r2, [r7, #2]
 8011be0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	68ba      	ldr	r2, [r7, #8]
 8011be8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	887a      	ldrh	r2, [r7, #2]
 8011bee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	887a      	ldrh	r2, [r7, #2]
 8011bf4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	68db      	ldr	r3, [r3, #12]
 8011c06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011c0a:	d802      	bhi.n	8011c12 <HAL_SPI_TransmitReceive+0xd8>
 8011c0c:	8abb      	ldrh	r3, [r7, #20]
 8011c0e:	2b01      	cmp	r3, #1
 8011c10:	d908      	bls.n	8011c24 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	685a      	ldr	r2, [r3, #4]
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011c20:	605a      	str	r2, [r3, #4]
 8011c22:	e007      	b.n	8011c34 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	685a      	ldr	r2, [r3, #4]
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011c32:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c3e:	2b40      	cmp	r3, #64	@ 0x40
 8011c40:	d007      	beq.n	8011c52 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011c50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	68db      	ldr	r3, [r3, #12]
 8011c56:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8011c5a:	f240 8083 	bls.w	8011d64 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d002      	beq.n	8011c6c <HAL_SPI_TransmitReceive+0x132>
 8011c66:	8afb      	ldrh	r3, [r7, #22]
 8011c68:	2b01      	cmp	r3, #1
 8011c6a:	d16f      	bne.n	8011d4c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c70:	881a      	ldrh	r2, [r3, #0]
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c7c:	1c9a      	adds	r2, r3, #2
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	3b01      	subs	r3, #1
 8011c8a:	b29a      	uxth	r2, r3
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011c90:	e05c      	b.n	8011d4c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	689b      	ldr	r3, [r3, #8]
 8011c98:	f003 0302 	and.w	r3, r3, #2
 8011c9c:	2b02      	cmp	r3, #2
 8011c9e:	d11b      	bne.n	8011cd8 <HAL_SPI_TransmitReceive+0x19e>
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011ca4:	b29b      	uxth	r3, r3
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d016      	beq.n	8011cd8 <HAL_SPI_TransmitReceive+0x19e>
 8011caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d113      	bne.n	8011cd8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cb4:	881a      	ldrh	r2, [r3, #0]
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cc0:	1c9a      	adds	r2, r3, #2
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	3b01      	subs	r3, #1
 8011cce:	b29a      	uxth	r2, r3
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	689b      	ldr	r3, [r3, #8]
 8011cde:	f003 0301 	and.w	r3, r3, #1
 8011ce2:	2b01      	cmp	r3, #1
 8011ce4:	d11c      	bne.n	8011d20 <HAL_SPI_TransmitReceive+0x1e6>
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d016      	beq.n	8011d20 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	68da      	ldr	r2, [r3, #12]
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011cfc:	b292      	uxth	r2, r2
 8011cfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d04:	1c9a      	adds	r2, r3, #2
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011d10:	b29b      	uxth	r3, r3
 8011d12:	3b01      	subs	r3, #1
 8011d14:	b29a      	uxth	r2, r3
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011d20:	f7f8 fff6 	bl	800ad10 <HAL_GetTick>
 8011d24:	4602      	mov	r2, r0
 8011d26:	6a3b      	ldr	r3, [r7, #32]
 8011d28:	1ad3      	subs	r3, r2, r3
 8011d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	d80d      	bhi.n	8011d4c <HAL_SPI_TransmitReceive+0x212>
 8011d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d36:	d009      	beq.n	8011d4c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	2201      	movs	r2, #1
 8011d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	2200      	movs	r2, #0
 8011d44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8011d48:	2303      	movs	r3, #3
 8011d4a:	e111      	b.n	8011f70 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d50:	b29b      	uxth	r3, r3
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d19d      	bne.n	8011c92 <HAL_SPI_TransmitReceive+0x158>
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011d5c:	b29b      	uxth	r3, r3
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d197      	bne.n	8011c92 <HAL_SPI_TransmitReceive+0x158>
 8011d62:	e0e5      	b.n	8011f30 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	685b      	ldr	r3, [r3, #4]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d003      	beq.n	8011d74 <HAL_SPI_TransmitReceive+0x23a>
 8011d6c:	8afb      	ldrh	r3, [r7, #22]
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	f040 80d1 	bne.w	8011f16 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d78:	b29b      	uxth	r3, r3
 8011d7a:	2b01      	cmp	r3, #1
 8011d7c:	d912      	bls.n	8011da4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d82:	881a      	ldrh	r2, [r3, #0]
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d8e:	1c9a      	adds	r2, r3, #2
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	3b02      	subs	r3, #2
 8011d9c:	b29a      	uxth	r2, r3
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011da2:	e0b8      	b.n	8011f16 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	330c      	adds	r3, #12
 8011dae:	7812      	ldrb	r2, [r2, #0]
 8011db0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011db6:	1c5a      	adds	r2, r3, #1
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	3b01      	subs	r3, #1
 8011dc4:	b29a      	uxth	r2, r3
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011dca:	e0a4      	b.n	8011f16 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	689b      	ldr	r3, [r3, #8]
 8011dd2:	f003 0302 	and.w	r3, r3, #2
 8011dd6:	2b02      	cmp	r3, #2
 8011dd8:	d134      	bne.n	8011e44 <HAL_SPI_TransmitReceive+0x30a>
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011dde:	b29b      	uxth	r3, r3
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d02f      	beq.n	8011e44 <HAL_SPI_TransmitReceive+0x30a>
 8011de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011de6:	2b01      	cmp	r3, #1
 8011de8:	d12c      	bne.n	8011e44 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011dee:	b29b      	uxth	r3, r3
 8011df0:	2b01      	cmp	r3, #1
 8011df2:	d912      	bls.n	8011e1a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011df8:	881a      	ldrh	r2, [r3, #0]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e04:	1c9a      	adds	r2, r3, #2
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011e0e:	b29b      	uxth	r3, r3
 8011e10:	3b02      	subs	r3, #2
 8011e12:	b29a      	uxth	r2, r3
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8011e18:	e012      	b.n	8011e40 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	330c      	adds	r3, #12
 8011e24:	7812      	ldrb	r2, [r2, #0]
 8011e26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e2c:	1c5a      	adds	r2, r3, #1
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011e36:	b29b      	uxth	r3, r3
 8011e38:	3b01      	subs	r3, #1
 8011e3a:	b29a      	uxth	r2, r3
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011e40:	2300      	movs	r3, #0
 8011e42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	689b      	ldr	r3, [r3, #8]
 8011e4a:	f003 0301 	and.w	r3, r3, #1
 8011e4e:	2b01      	cmp	r3, #1
 8011e50:	d148      	bne.n	8011ee4 <HAL_SPI_TransmitReceive+0x3aa>
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011e58:	b29b      	uxth	r3, r3
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d042      	beq.n	8011ee4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011e64:	b29b      	uxth	r3, r3
 8011e66:	2b01      	cmp	r3, #1
 8011e68:	d923      	bls.n	8011eb2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	68da      	ldr	r2, [r3, #12]
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e74:	b292      	uxth	r2, r2
 8011e76:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e7c:	1c9a      	adds	r2, r3, #2
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011e88:	b29b      	uxth	r3, r3
 8011e8a:	3b02      	subs	r3, #2
 8011e8c:	b29a      	uxth	r2, r3
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011e9a:	b29b      	uxth	r3, r3
 8011e9c:	2b01      	cmp	r3, #1
 8011e9e:	d81f      	bhi.n	8011ee0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	685a      	ldr	r2, [r3, #4]
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011eae:	605a      	str	r2, [r3, #4]
 8011eb0:	e016      	b.n	8011ee0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f103 020c 	add.w	r2, r3, #12
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ebe:	7812      	ldrb	r2, [r2, #0]
 8011ec0:	b2d2      	uxtb	r2, r2
 8011ec2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ec8:	1c5a      	adds	r2, r3, #1
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	3b01      	subs	r3, #1
 8011ed8:	b29a      	uxth	r2, r3
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011ee4:	f7f8 ff14 	bl	800ad10 <HAL_GetTick>
 8011ee8:	4602      	mov	r2, r0
 8011eea:	6a3b      	ldr	r3, [r7, #32]
 8011eec:	1ad3      	subs	r3, r2, r3
 8011eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	d803      	bhi.n	8011efc <HAL_SPI_TransmitReceive+0x3c2>
 8011ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011efa:	d102      	bne.n	8011f02 <HAL_SPI_TransmitReceive+0x3c8>
 8011efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d109      	bne.n	8011f16 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	2201      	movs	r2, #1
 8011f06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8011f12:	2303      	movs	r3, #3
 8011f14:	e02c      	b.n	8011f70 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011f1a:	b29b      	uxth	r3, r3
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	f47f af55 	bne.w	8011dcc <HAL_SPI_TransmitReceive+0x292>
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8011f28:	b29b      	uxth	r3, r3
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	f47f af4e 	bne.w	8011dcc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011f30:	6a3a      	ldr	r2, [r7, #32]
 8011f32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011f34:	68f8      	ldr	r0, [r7, #12]
 8011f36:	f000 f995 	bl	8012264 <SPI_EndRxTxTransaction>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d008      	beq.n	8011f52 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2220      	movs	r2, #32
 8011f44:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8011f4e:	2301      	movs	r3, #1
 8011f50:	e00e      	b.n	8011f70 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	2201      	movs	r2, #1
 8011f56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d001      	beq.n	8011f6e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	e000      	b.n	8011f70 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8011f6e:	2300      	movs	r3, #0
  }
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	3728      	adds	r7, #40	@ 0x28
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b088      	sub	sp, #32
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	60f8      	str	r0, [r7, #12]
 8011f80:	60b9      	str	r1, [r7, #8]
 8011f82:	603b      	str	r3, [r7, #0]
 8011f84:	4613      	mov	r3, r2
 8011f86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011f88:	f7f8 fec2 	bl	800ad10 <HAL_GetTick>
 8011f8c:	4602      	mov	r2, r0
 8011f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f90:	1a9b      	subs	r3, r3, r2
 8011f92:	683a      	ldr	r2, [r7, #0]
 8011f94:	4413      	add	r3, r2
 8011f96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011f98:	f7f8 feba 	bl	800ad10 <HAL_GetTick>
 8011f9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011f9e:	4b39      	ldr	r3, [pc, #228]	@ (8012084 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	015b      	lsls	r3, r3, #5
 8011fa4:	0d1b      	lsrs	r3, r3, #20
 8011fa6:	69fa      	ldr	r2, [r7, #28]
 8011fa8:	fb02 f303 	mul.w	r3, r2, r3
 8011fac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011fae:	e054      	b.n	801205a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fb6:	d050      	beq.n	801205a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011fb8:	f7f8 feaa 	bl	800ad10 <HAL_GetTick>
 8011fbc:	4602      	mov	r2, r0
 8011fbe:	69bb      	ldr	r3, [r7, #24]
 8011fc0:	1ad3      	subs	r3, r2, r3
 8011fc2:	69fa      	ldr	r2, [r7, #28]
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d902      	bls.n	8011fce <SPI_WaitFlagStateUntilTimeout+0x56>
 8011fc8:	69fb      	ldr	r3, [r7, #28]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d13d      	bne.n	801204a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	685a      	ldr	r2, [r3, #4]
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8011fdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8011fe6:	d111      	bne.n	801200c <SPI_WaitFlagStateUntilTimeout+0x94>
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	689b      	ldr	r3, [r3, #8]
 8011fec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011ff0:	d004      	beq.n	8011ffc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	689b      	ldr	r3, [r3, #8]
 8011ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011ffa:	d107      	bne.n	801200c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	681a      	ldr	r2, [r3, #0]
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801200a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012014:	d10f      	bne.n	8012036 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	681a      	ldr	r2, [r3, #0]
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8012024:	601a      	str	r2, [r3, #0]
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	681a      	ldr	r2, [r3, #0]
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8012034:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	2201      	movs	r2, #1
 801203a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	2200      	movs	r2, #0
 8012042:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8012046:	2303      	movs	r3, #3
 8012048:	e017      	b.n	801207a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d101      	bne.n	8012054 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8012050:	2300      	movs	r3, #0
 8012052:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	3b01      	subs	r3, #1
 8012058:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	689a      	ldr	r2, [r3, #8]
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	4013      	ands	r3, r2
 8012064:	68ba      	ldr	r2, [r7, #8]
 8012066:	429a      	cmp	r2, r3
 8012068:	bf0c      	ite	eq
 801206a:	2301      	moveq	r3, #1
 801206c:	2300      	movne	r3, #0
 801206e:	b2db      	uxtb	r3, r3
 8012070:	461a      	mov	r2, r3
 8012072:	79fb      	ldrb	r3, [r7, #7]
 8012074:	429a      	cmp	r2, r3
 8012076:	d19b      	bne.n	8011fb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8012078:	2300      	movs	r3, #0
}
 801207a:	4618      	mov	r0, r3
 801207c:	3720      	adds	r7, #32
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}
 8012082:	bf00      	nop
 8012084:	20000168 	.word	0x20000168

08012088 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b08a      	sub	sp, #40	@ 0x28
 801208c:	af00      	add	r7, sp, #0
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	60b9      	str	r1, [r7, #8]
 8012092:	607a      	str	r2, [r7, #4]
 8012094:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8012096:	2300      	movs	r3, #0
 8012098:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801209a:	f7f8 fe39 	bl	800ad10 <HAL_GetTick>
 801209e:	4602      	mov	r2, r0
 80120a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120a2:	1a9b      	subs	r3, r3, r2
 80120a4:	683a      	ldr	r2, [r7, #0]
 80120a6:	4413      	add	r3, r2
 80120a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80120aa:	f7f8 fe31 	bl	800ad10 <HAL_GetTick>
 80120ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	330c      	adds	r3, #12
 80120b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80120b8:	4b3d      	ldr	r3, [pc, #244]	@ (80121b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80120ba:	681a      	ldr	r2, [r3, #0]
 80120bc:	4613      	mov	r3, r2
 80120be:	009b      	lsls	r3, r3, #2
 80120c0:	4413      	add	r3, r2
 80120c2:	00da      	lsls	r2, r3, #3
 80120c4:	1ad3      	subs	r3, r2, r3
 80120c6:	0d1b      	lsrs	r3, r3, #20
 80120c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120ca:	fb02 f303 	mul.w	r3, r2, r3
 80120ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80120d0:	e060      	b.n	8012194 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80120d8:	d107      	bne.n	80120ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d104      	bne.n	80120ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80120e0:	69fb      	ldr	r3, [r7, #28]
 80120e2:	781b      	ldrb	r3, [r3, #0]
 80120e4:	b2db      	uxtb	r3, r3
 80120e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80120e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120f0:	d050      	beq.n	8012194 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80120f2:	f7f8 fe0d 	bl	800ad10 <HAL_GetTick>
 80120f6:	4602      	mov	r2, r0
 80120f8:	6a3b      	ldr	r3, [r7, #32]
 80120fa:	1ad3      	subs	r3, r2, r3
 80120fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120fe:	429a      	cmp	r2, r3
 8012100:	d902      	bls.n	8012108 <SPI_WaitFifoStateUntilTimeout+0x80>
 8012102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012104:	2b00      	cmp	r3, #0
 8012106:	d13d      	bne.n	8012184 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	685a      	ldr	r2, [r3, #4]
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8012116:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	685b      	ldr	r3, [r3, #4]
 801211c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8012120:	d111      	bne.n	8012146 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	689b      	ldr	r3, [r3, #8]
 8012126:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801212a:	d004      	beq.n	8012136 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	689b      	ldr	r3, [r3, #8]
 8012130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012134:	d107      	bne.n	8012146 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	681a      	ldr	r2, [r3, #0]
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012144:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801214a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801214e:	d10f      	bne.n	8012170 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	681a      	ldr	r2, [r3, #0]
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801215e:	601a      	str	r2, [r3, #0]
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	681a      	ldr	r2, [r3, #0]
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801216e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	2201      	movs	r2, #1
 8012174:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	2200      	movs	r2, #0
 801217c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8012180:	2303      	movs	r3, #3
 8012182:	e010      	b.n	80121a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8012184:	69bb      	ldr	r3, [r7, #24]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d101      	bne.n	801218e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801218a:	2300      	movs	r3, #0
 801218c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 801218e:	69bb      	ldr	r3, [r7, #24]
 8012190:	3b01      	subs	r3, #1
 8012192:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	689a      	ldr	r2, [r3, #8]
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	4013      	ands	r3, r2
 801219e:	687a      	ldr	r2, [r7, #4]
 80121a0:	429a      	cmp	r2, r3
 80121a2:	d196      	bne.n	80120d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80121a4:	2300      	movs	r3, #0
}
 80121a6:	4618      	mov	r0, r3
 80121a8:	3728      	adds	r7, #40	@ 0x28
 80121aa:	46bd      	mov	sp, r7
 80121ac:	bd80      	pop	{r7, pc}
 80121ae:	bf00      	nop
 80121b0:	20000168 	.word	0x20000168

080121b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b086      	sub	sp, #24
 80121b8:	af02      	add	r7, sp, #8
 80121ba:	60f8      	str	r0, [r7, #12]
 80121bc:	60b9      	str	r1, [r7, #8]
 80121be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80121c8:	d111      	bne.n	80121ee <SPI_EndRxTransaction+0x3a>
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	689b      	ldr	r3, [r3, #8]
 80121ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80121d2:	d004      	beq.n	80121de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	689b      	ldr	r3, [r3, #8]
 80121d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80121dc:	d107      	bne.n	80121ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	681a      	ldr	r2, [r3, #0]
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80121ec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	9300      	str	r3, [sp, #0]
 80121f2:	68bb      	ldr	r3, [r7, #8]
 80121f4:	2200      	movs	r2, #0
 80121f6:	2180      	movs	r1, #128	@ 0x80
 80121f8:	68f8      	ldr	r0, [r7, #12]
 80121fa:	f7ff febd 	bl	8011f78 <SPI_WaitFlagStateUntilTimeout>
 80121fe:	4603      	mov	r3, r0
 8012200:	2b00      	cmp	r3, #0
 8012202:	d007      	beq.n	8012214 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012208:	f043 0220 	orr.w	r2, r3, #32
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012210:	2303      	movs	r3, #3
 8012212:	e023      	b.n	801225c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	685b      	ldr	r3, [r3, #4]
 8012218:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801221c:	d11d      	bne.n	801225a <SPI_EndRxTransaction+0xa6>
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	689b      	ldr	r3, [r3, #8]
 8012222:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012226:	d004      	beq.n	8012232 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	689b      	ldr	r3, [r3, #8]
 801222c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012230:	d113      	bne.n	801225a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	9300      	str	r3, [sp, #0]
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	2200      	movs	r2, #0
 801223a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 801223e:	68f8      	ldr	r0, [r7, #12]
 8012240:	f7ff ff22 	bl	8012088 <SPI_WaitFifoStateUntilTimeout>
 8012244:	4603      	mov	r3, r0
 8012246:	2b00      	cmp	r3, #0
 8012248:	d007      	beq.n	801225a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801224e:	f043 0220 	orr.w	r2, r3, #32
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8012256:	2303      	movs	r3, #3
 8012258:	e000      	b.n	801225c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801225a:	2300      	movs	r3, #0
}
 801225c:	4618      	mov	r0, r3
 801225e:	3710      	adds	r7, #16
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}

08012264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b086      	sub	sp, #24
 8012268:	af02      	add	r7, sp, #8
 801226a:	60f8      	str	r0, [r7, #12]
 801226c:	60b9      	str	r1, [r7, #8]
 801226e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	9300      	str	r3, [sp, #0]
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	2200      	movs	r2, #0
 8012278:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801227c:	68f8      	ldr	r0, [r7, #12]
 801227e:	f7ff ff03 	bl	8012088 <SPI_WaitFifoStateUntilTimeout>
 8012282:	4603      	mov	r3, r0
 8012284:	2b00      	cmp	r3, #0
 8012286:	d007      	beq.n	8012298 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801228c:	f043 0220 	orr.w	r2, r3, #32
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8012294:	2303      	movs	r3, #3
 8012296:	e027      	b.n	80122e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	9300      	str	r3, [sp, #0]
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	2200      	movs	r2, #0
 80122a0:	2180      	movs	r1, #128	@ 0x80
 80122a2:	68f8      	ldr	r0, [r7, #12]
 80122a4:	f7ff fe68 	bl	8011f78 <SPI_WaitFlagStateUntilTimeout>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d007      	beq.n	80122be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80122b2:	f043 0220 	orr.w	r2, r3, #32
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80122ba:	2303      	movs	r3, #3
 80122bc:	e014      	b.n	80122e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	9300      	str	r3, [sp, #0]
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	2200      	movs	r2, #0
 80122c6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80122ca:	68f8      	ldr	r0, [r7, #12]
 80122cc:	f7ff fedc 	bl	8012088 <SPI_WaitFifoStateUntilTimeout>
 80122d0:	4603      	mov	r3, r0
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d007      	beq.n	80122e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80122da:	f043 0220 	orr.w	r2, r3, #32
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80122e2:	2303      	movs	r3, #3
 80122e4:	e000      	b.n	80122e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80122e6:	2300      	movs	r3, #0
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	3710      	adds	r7, #16
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}

080122f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d101      	bne.n	8012302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80122fe:	2301      	movs	r3, #1
 8012300:	e049      	b.n	8012396 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012308:	b2db      	uxtb	r3, r3
 801230a:	2b00      	cmp	r3, #0
 801230c:	d106      	bne.n	801231c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2200      	movs	r2, #0
 8012312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f7f5 f9a8 	bl	800766c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2202      	movs	r2, #2
 8012320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681a      	ldr	r2, [r3, #0]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	3304      	adds	r3, #4
 801232c:	4619      	mov	r1, r3
 801232e:	4610      	mov	r0, r2
 8012330:	f001 fa58 	bl	80137e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2201      	movs	r2, #1
 8012338:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2201      	movs	r2, #1
 8012340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2201      	movs	r2, #1
 8012348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2201      	movs	r2, #1
 8012350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2201      	movs	r2, #1
 8012358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2201      	movs	r2, #1
 8012360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2201      	movs	r2, #1
 8012368:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2201      	movs	r2, #1
 8012370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2201      	movs	r2, #1
 8012378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2201      	movs	r2, #1
 8012380:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	2201      	movs	r2, #1
 8012388:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2201      	movs	r2, #1
 8012390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012394:	2300      	movs	r3, #0
}
 8012396:	4618      	mov	r0, r3
 8012398:	3708      	adds	r7, #8
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}

0801239e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 801239e:	b580      	push	{r7, lr}
 80123a0:	b082      	sub	sp, #8
 80123a2:	af00      	add	r7, sp, #0
 80123a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d101      	bne.n	80123b0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80123ac:	2301      	movs	r3, #1
 80123ae:	e049      	b.n	8012444 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80123b6:	b2db      	uxtb	r3, r3
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d106      	bne.n	80123ca <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2200      	movs	r2, #0
 80123c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f7f5 f8f1 	bl	80075ac <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2202      	movs	r2, #2
 80123ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681a      	ldr	r2, [r3, #0]
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	3304      	adds	r3, #4
 80123da:	4619      	mov	r1, r3
 80123dc:	4610      	mov	r0, r2
 80123de:	f001 fa01 	bl	80137e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2201      	movs	r2, #1
 80123e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2201      	movs	r2, #1
 80123ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2201      	movs	r2, #1
 80123f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2201      	movs	r2, #1
 80123fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	2201      	movs	r2, #1
 8012406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2201      	movs	r2, #1
 801240e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2201      	movs	r2, #1
 8012416:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2201      	movs	r2, #1
 801241e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2201      	movs	r2, #1
 8012426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	2201      	movs	r2, #1
 801242e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2201      	movs	r2, #1
 8012436:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2201      	movs	r2, #1
 801243e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012442:	2300      	movs	r3, #0
}
 8012444:	4618      	mov	r0, r3
 8012446:	3708      	adds	r7, #8
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}

0801244c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b084      	sub	sp, #16
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012456:	2300      	movs	r3, #0
 8012458:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d109      	bne.n	8012474 <HAL_TIM_OC_Start_IT+0x28>
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012466:	b2db      	uxtb	r3, r3
 8012468:	2b01      	cmp	r3, #1
 801246a:	bf14      	ite	ne
 801246c:	2301      	movne	r3, #1
 801246e:	2300      	moveq	r3, #0
 8012470:	b2db      	uxtb	r3, r3
 8012472:	e03c      	b.n	80124ee <HAL_TIM_OC_Start_IT+0xa2>
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	2b04      	cmp	r3, #4
 8012478:	d109      	bne.n	801248e <HAL_TIM_OC_Start_IT+0x42>
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012480:	b2db      	uxtb	r3, r3
 8012482:	2b01      	cmp	r3, #1
 8012484:	bf14      	ite	ne
 8012486:	2301      	movne	r3, #1
 8012488:	2300      	moveq	r3, #0
 801248a:	b2db      	uxtb	r3, r3
 801248c:	e02f      	b.n	80124ee <HAL_TIM_OC_Start_IT+0xa2>
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	2b08      	cmp	r3, #8
 8012492:	d109      	bne.n	80124a8 <HAL_TIM_OC_Start_IT+0x5c>
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801249a:	b2db      	uxtb	r3, r3
 801249c:	2b01      	cmp	r3, #1
 801249e:	bf14      	ite	ne
 80124a0:	2301      	movne	r3, #1
 80124a2:	2300      	moveq	r3, #0
 80124a4:	b2db      	uxtb	r3, r3
 80124a6:	e022      	b.n	80124ee <HAL_TIM_OC_Start_IT+0xa2>
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	2b0c      	cmp	r3, #12
 80124ac:	d109      	bne.n	80124c2 <HAL_TIM_OC_Start_IT+0x76>
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80124b4:	b2db      	uxtb	r3, r3
 80124b6:	2b01      	cmp	r3, #1
 80124b8:	bf14      	ite	ne
 80124ba:	2301      	movne	r3, #1
 80124bc:	2300      	moveq	r3, #0
 80124be:	b2db      	uxtb	r3, r3
 80124c0:	e015      	b.n	80124ee <HAL_TIM_OC_Start_IT+0xa2>
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	2b10      	cmp	r3, #16
 80124c6:	d109      	bne.n	80124dc <HAL_TIM_OC_Start_IT+0x90>
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80124ce:	b2db      	uxtb	r3, r3
 80124d0:	2b01      	cmp	r3, #1
 80124d2:	bf14      	ite	ne
 80124d4:	2301      	movne	r3, #1
 80124d6:	2300      	moveq	r3, #0
 80124d8:	b2db      	uxtb	r3, r3
 80124da:	e008      	b.n	80124ee <HAL_TIM_OC_Start_IT+0xa2>
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80124e2:	b2db      	uxtb	r3, r3
 80124e4:	2b01      	cmp	r3, #1
 80124e6:	bf14      	ite	ne
 80124e8:	2301      	movne	r3, #1
 80124ea:	2300      	moveq	r3, #0
 80124ec:	b2db      	uxtb	r3, r3
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d001      	beq.n	80124f6 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80124f2:	2301      	movs	r3, #1
 80124f4:	e0e7      	b.n	80126c6 <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d104      	bne.n	8012506 <HAL_TIM_OC_Start_IT+0xba>
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2202      	movs	r2, #2
 8012500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012504:	e023      	b.n	801254e <HAL_TIM_OC_Start_IT+0x102>
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	2b04      	cmp	r3, #4
 801250a:	d104      	bne.n	8012516 <HAL_TIM_OC_Start_IT+0xca>
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2202      	movs	r2, #2
 8012510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012514:	e01b      	b.n	801254e <HAL_TIM_OC_Start_IT+0x102>
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	2b08      	cmp	r3, #8
 801251a:	d104      	bne.n	8012526 <HAL_TIM_OC_Start_IT+0xda>
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2202      	movs	r2, #2
 8012520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012524:	e013      	b.n	801254e <HAL_TIM_OC_Start_IT+0x102>
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	2b0c      	cmp	r3, #12
 801252a:	d104      	bne.n	8012536 <HAL_TIM_OC_Start_IT+0xea>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2202      	movs	r2, #2
 8012530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012534:	e00b      	b.n	801254e <HAL_TIM_OC_Start_IT+0x102>
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	2b10      	cmp	r3, #16
 801253a:	d104      	bne.n	8012546 <HAL_TIM_OC_Start_IT+0xfa>
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2202      	movs	r2, #2
 8012540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012544:	e003      	b.n	801254e <HAL_TIM_OC_Start_IT+0x102>
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2202      	movs	r2, #2
 801254a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	2b0c      	cmp	r3, #12
 8012552:	d841      	bhi.n	80125d8 <HAL_TIM_OC_Start_IT+0x18c>
 8012554:	a201      	add	r2, pc, #4	@ (adr r2, 801255c <HAL_TIM_OC_Start_IT+0x110>)
 8012556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801255a:	bf00      	nop
 801255c:	08012591 	.word	0x08012591
 8012560:	080125d9 	.word	0x080125d9
 8012564:	080125d9 	.word	0x080125d9
 8012568:	080125d9 	.word	0x080125d9
 801256c:	080125a3 	.word	0x080125a3
 8012570:	080125d9 	.word	0x080125d9
 8012574:	080125d9 	.word	0x080125d9
 8012578:	080125d9 	.word	0x080125d9
 801257c:	080125b5 	.word	0x080125b5
 8012580:	080125d9 	.word	0x080125d9
 8012584:	080125d9 	.word	0x080125d9
 8012588:	080125d9 	.word	0x080125d9
 801258c:	080125c7 	.word	0x080125c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	68da      	ldr	r2, [r3, #12]
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	f042 0202 	orr.w	r2, r2, #2
 801259e:	60da      	str	r2, [r3, #12]
      break;
 80125a0:	e01d      	b.n	80125de <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	68da      	ldr	r2, [r3, #12]
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	f042 0204 	orr.w	r2, r2, #4
 80125b0:	60da      	str	r2, [r3, #12]
      break;
 80125b2:	e014      	b.n	80125de <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	68da      	ldr	r2, [r3, #12]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	f042 0208 	orr.w	r2, r2, #8
 80125c2:	60da      	str	r2, [r3, #12]
      break;
 80125c4:	e00b      	b.n	80125de <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	68da      	ldr	r2, [r3, #12]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	f042 0210 	orr.w	r2, r2, #16
 80125d4:	60da      	str	r2, [r3, #12]
      break;
 80125d6:	e002      	b.n	80125de <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80125d8:	2301      	movs	r3, #1
 80125da:	73fb      	strb	r3, [r7, #15]
      break;
 80125dc:	bf00      	nop
  }

  if (status == HAL_OK)
 80125de:	7bfb      	ldrb	r3, [r7, #15]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d16f      	bne.n	80126c4 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	2201      	movs	r2, #1
 80125ea:	6839      	ldr	r1, [r7, #0]
 80125ec:	4618      	mov	r0, r3
 80125ee:	f001 fec7 	bl	8014380 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	4a36      	ldr	r2, [pc, #216]	@ (80126d0 <HAL_TIM_OC_Start_IT+0x284>)
 80125f8:	4293      	cmp	r3, r2
 80125fa:	d013      	beq.n	8012624 <HAL_TIM_OC_Start_IT+0x1d8>
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	4a34      	ldr	r2, [pc, #208]	@ (80126d4 <HAL_TIM_OC_Start_IT+0x288>)
 8012602:	4293      	cmp	r3, r2
 8012604:	d00e      	beq.n	8012624 <HAL_TIM_OC_Start_IT+0x1d8>
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	4a33      	ldr	r2, [pc, #204]	@ (80126d8 <HAL_TIM_OC_Start_IT+0x28c>)
 801260c:	4293      	cmp	r3, r2
 801260e:	d009      	beq.n	8012624 <HAL_TIM_OC_Start_IT+0x1d8>
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	4a31      	ldr	r2, [pc, #196]	@ (80126dc <HAL_TIM_OC_Start_IT+0x290>)
 8012616:	4293      	cmp	r3, r2
 8012618:	d004      	beq.n	8012624 <HAL_TIM_OC_Start_IT+0x1d8>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	4a30      	ldr	r2, [pc, #192]	@ (80126e0 <HAL_TIM_OC_Start_IT+0x294>)
 8012620:	4293      	cmp	r3, r2
 8012622:	d101      	bne.n	8012628 <HAL_TIM_OC_Start_IT+0x1dc>
 8012624:	2301      	movs	r3, #1
 8012626:	e000      	b.n	801262a <HAL_TIM_OC_Start_IT+0x1de>
 8012628:	2300      	movs	r3, #0
 801262a:	2b00      	cmp	r3, #0
 801262c:	d007      	beq.n	801263e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801263c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	4a23      	ldr	r2, [pc, #140]	@ (80126d0 <HAL_TIM_OC_Start_IT+0x284>)
 8012644:	4293      	cmp	r3, r2
 8012646:	d01d      	beq.n	8012684 <HAL_TIM_OC_Start_IT+0x238>
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012650:	d018      	beq.n	8012684 <HAL_TIM_OC_Start_IT+0x238>
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	4a23      	ldr	r2, [pc, #140]	@ (80126e4 <HAL_TIM_OC_Start_IT+0x298>)
 8012658:	4293      	cmp	r3, r2
 801265a:	d013      	beq.n	8012684 <HAL_TIM_OC_Start_IT+0x238>
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	4a21      	ldr	r2, [pc, #132]	@ (80126e8 <HAL_TIM_OC_Start_IT+0x29c>)
 8012662:	4293      	cmp	r3, r2
 8012664:	d00e      	beq.n	8012684 <HAL_TIM_OC_Start_IT+0x238>
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	4a20      	ldr	r2, [pc, #128]	@ (80126ec <HAL_TIM_OC_Start_IT+0x2a0>)
 801266c:	4293      	cmp	r3, r2
 801266e:	d009      	beq.n	8012684 <HAL_TIM_OC_Start_IT+0x238>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	4a17      	ldr	r2, [pc, #92]	@ (80126d4 <HAL_TIM_OC_Start_IT+0x288>)
 8012676:	4293      	cmp	r3, r2
 8012678:	d004      	beq.n	8012684 <HAL_TIM_OC_Start_IT+0x238>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	4a16      	ldr	r2, [pc, #88]	@ (80126d8 <HAL_TIM_OC_Start_IT+0x28c>)
 8012680:	4293      	cmp	r3, r2
 8012682:	d115      	bne.n	80126b0 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	689a      	ldr	r2, [r3, #8]
 801268a:	4b19      	ldr	r3, [pc, #100]	@ (80126f0 <HAL_TIM_OC_Start_IT+0x2a4>)
 801268c:	4013      	ands	r3, r2
 801268e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	2b06      	cmp	r3, #6
 8012694:	d015      	beq.n	80126c2 <HAL_TIM_OC_Start_IT+0x276>
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801269c:	d011      	beq.n	80126c2 <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	681a      	ldr	r2, [r3, #0]
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	f042 0201 	orr.w	r2, r2, #1
 80126ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80126ae:	e008      	b.n	80126c2 <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	681a      	ldr	r2, [r3, #0]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	f042 0201 	orr.w	r2, r2, #1
 80126be:	601a      	str	r2, [r3, #0]
 80126c0:	e000      	b.n	80126c4 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80126c2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80126c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3710      	adds	r7, #16
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}
 80126ce:	bf00      	nop
 80126d0:	40012c00 	.word	0x40012c00
 80126d4:	40013400 	.word	0x40013400
 80126d8:	40014000 	.word	0x40014000
 80126dc:	40014400 	.word	0x40014400
 80126e0:	40014800 	.word	0x40014800
 80126e4:	40000400 	.word	0x40000400
 80126e8:	40000800 	.word	0x40000800
 80126ec:	40000c00 	.word	0x40000c00
 80126f0:	00010007 	.word	0x00010007

080126f4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b084      	sub	sp, #16
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
 80126fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80126fe:	2300      	movs	r3, #0
 8012700:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	2b0c      	cmp	r3, #12
 8012706:	d841      	bhi.n	801278c <HAL_TIM_OC_Stop_IT+0x98>
 8012708:	a201      	add	r2, pc, #4	@ (adr r2, 8012710 <HAL_TIM_OC_Stop_IT+0x1c>)
 801270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801270e:	bf00      	nop
 8012710:	08012745 	.word	0x08012745
 8012714:	0801278d 	.word	0x0801278d
 8012718:	0801278d 	.word	0x0801278d
 801271c:	0801278d 	.word	0x0801278d
 8012720:	08012757 	.word	0x08012757
 8012724:	0801278d 	.word	0x0801278d
 8012728:	0801278d 	.word	0x0801278d
 801272c:	0801278d 	.word	0x0801278d
 8012730:	08012769 	.word	0x08012769
 8012734:	0801278d 	.word	0x0801278d
 8012738:	0801278d 	.word	0x0801278d
 801273c:	0801278d 	.word	0x0801278d
 8012740:	0801277b 	.word	0x0801277b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	68da      	ldr	r2, [r3, #12]
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	f022 0202 	bic.w	r2, r2, #2
 8012752:	60da      	str	r2, [r3, #12]
      break;
 8012754:	e01d      	b.n	8012792 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	68da      	ldr	r2, [r3, #12]
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	f022 0204 	bic.w	r2, r2, #4
 8012764:	60da      	str	r2, [r3, #12]
      break;
 8012766:	e014      	b.n	8012792 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	68da      	ldr	r2, [r3, #12]
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	f022 0208 	bic.w	r2, r2, #8
 8012776:	60da      	str	r2, [r3, #12]
      break;
 8012778:	e00b      	b.n	8012792 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	68da      	ldr	r2, [r3, #12]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	f022 0210 	bic.w	r2, r2, #16
 8012788:	60da      	str	r2, [r3, #12]
      break;
 801278a:	e002      	b.n	8012792 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 801278c:	2301      	movs	r3, #1
 801278e:	73fb      	strb	r3, [r7, #15]
      break;
 8012790:	bf00      	nop
  }

  if (status == HAL_OK)
 8012792:	7bfb      	ldrb	r3, [r7, #15]
 8012794:	2b00      	cmp	r3, #0
 8012796:	f040 8081 	bne.w	801289c <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2200      	movs	r2, #0
 80127a0:	6839      	ldr	r1, [r7, #0]
 80127a2:	4618      	mov	r0, r3
 80127a4:	f001 fdec 	bl	8014380 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	4a3e      	ldr	r2, [pc, #248]	@ (80128a8 <HAL_TIM_OC_Stop_IT+0x1b4>)
 80127ae:	4293      	cmp	r3, r2
 80127b0:	d013      	beq.n	80127da <HAL_TIM_OC_Stop_IT+0xe6>
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	4a3d      	ldr	r2, [pc, #244]	@ (80128ac <HAL_TIM_OC_Stop_IT+0x1b8>)
 80127b8:	4293      	cmp	r3, r2
 80127ba:	d00e      	beq.n	80127da <HAL_TIM_OC_Stop_IT+0xe6>
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	4a3b      	ldr	r2, [pc, #236]	@ (80128b0 <HAL_TIM_OC_Stop_IT+0x1bc>)
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d009      	beq.n	80127da <HAL_TIM_OC_Stop_IT+0xe6>
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	4a3a      	ldr	r2, [pc, #232]	@ (80128b4 <HAL_TIM_OC_Stop_IT+0x1c0>)
 80127cc:	4293      	cmp	r3, r2
 80127ce:	d004      	beq.n	80127da <HAL_TIM_OC_Stop_IT+0xe6>
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	4a38      	ldr	r2, [pc, #224]	@ (80128b8 <HAL_TIM_OC_Stop_IT+0x1c4>)
 80127d6:	4293      	cmp	r3, r2
 80127d8:	d101      	bne.n	80127de <HAL_TIM_OC_Stop_IT+0xea>
 80127da:	2301      	movs	r3, #1
 80127dc:	e000      	b.n	80127e0 <HAL_TIM_OC_Stop_IT+0xec>
 80127de:	2300      	movs	r3, #0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d017      	beq.n	8012814 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	6a1a      	ldr	r2, [r3, #32]
 80127ea:	f241 1311 	movw	r3, #4369	@ 0x1111
 80127ee:	4013      	ands	r3, r2
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d10f      	bne.n	8012814 <HAL_TIM_OC_Stop_IT+0x120>
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	6a1a      	ldr	r2, [r3, #32]
 80127fa:	f240 4344 	movw	r3, #1092	@ 0x444
 80127fe:	4013      	ands	r3, r2
 8012800:	2b00      	cmp	r3, #0
 8012802:	d107      	bne.n	8012814 <HAL_TIM_OC_Stop_IT+0x120>
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012812:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	6a1a      	ldr	r2, [r3, #32]
 801281a:	f241 1311 	movw	r3, #4369	@ 0x1111
 801281e:	4013      	ands	r3, r2
 8012820:	2b00      	cmp	r3, #0
 8012822:	d10f      	bne.n	8012844 <HAL_TIM_OC_Stop_IT+0x150>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	6a1a      	ldr	r2, [r3, #32]
 801282a:	f240 4344 	movw	r3, #1092	@ 0x444
 801282e:	4013      	ands	r3, r2
 8012830:	2b00      	cmp	r3, #0
 8012832:	d107      	bne.n	8012844 <HAL_TIM_OC_Stop_IT+0x150>
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	681a      	ldr	r2, [r3, #0]
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	f022 0201 	bic.w	r2, r2, #1
 8012842:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d104      	bne.n	8012854 <HAL_TIM_OC_Stop_IT+0x160>
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	2201      	movs	r2, #1
 801284e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012852:	e023      	b.n	801289c <HAL_TIM_OC_Stop_IT+0x1a8>
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	2b04      	cmp	r3, #4
 8012858:	d104      	bne.n	8012864 <HAL_TIM_OC_Stop_IT+0x170>
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	2201      	movs	r2, #1
 801285e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012862:	e01b      	b.n	801289c <HAL_TIM_OC_Stop_IT+0x1a8>
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	2b08      	cmp	r3, #8
 8012868:	d104      	bne.n	8012874 <HAL_TIM_OC_Stop_IT+0x180>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2201      	movs	r2, #1
 801286e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012872:	e013      	b.n	801289c <HAL_TIM_OC_Stop_IT+0x1a8>
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	2b0c      	cmp	r3, #12
 8012878:	d104      	bne.n	8012884 <HAL_TIM_OC_Stop_IT+0x190>
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	2201      	movs	r2, #1
 801287e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012882:	e00b      	b.n	801289c <HAL_TIM_OC_Stop_IT+0x1a8>
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	2b10      	cmp	r3, #16
 8012888:	d104      	bne.n	8012894 <HAL_TIM_OC_Stop_IT+0x1a0>
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	2201      	movs	r2, #1
 801288e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012892:	e003      	b.n	801289c <HAL_TIM_OC_Stop_IT+0x1a8>
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2201      	movs	r2, #1
 8012898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 801289c:	7bfb      	ldrb	r3, [r7, #15]
}
 801289e:	4618      	mov	r0, r3
 80128a0:	3710      	adds	r7, #16
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}
 80128a6:	bf00      	nop
 80128a8:	40012c00 	.word	0x40012c00
 80128ac:	40013400 	.word	0x40013400
 80128b0:	40014000 	.word	0x40014000
 80128b4:	40014400 	.word	0x40014400
 80128b8:	40014800 	.word	0x40014800

080128bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d101      	bne.n	80128ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80128ca:	2301      	movs	r3, #1
 80128cc:	e049      	b.n	8012962 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80128d4:	b2db      	uxtb	r3, r3
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d106      	bne.n	80128e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2200      	movs	r2, #0
 80128de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f000 f841 	bl	801296a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2202      	movs	r2, #2
 80128ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681a      	ldr	r2, [r3, #0]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	3304      	adds	r3, #4
 80128f8:	4619      	mov	r1, r3
 80128fa:	4610      	mov	r0, r2
 80128fc:	f000 ff72 	bl	80137e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2201      	movs	r2, #1
 8012904:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2201      	movs	r2, #1
 801290c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2201      	movs	r2, #1
 8012914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	2201      	movs	r2, #1
 801291c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2201      	movs	r2, #1
 8012924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2201      	movs	r2, #1
 801292c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2201      	movs	r2, #1
 8012934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2201      	movs	r2, #1
 801293c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2201      	movs	r2, #1
 8012944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2201      	movs	r2, #1
 801294c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2201      	movs	r2, #1
 8012954:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2201      	movs	r2, #1
 801295c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012960:	2300      	movs	r3, #0
}
 8012962:	4618      	mov	r0, r3
 8012964:	3708      	adds	r7, #8
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}

0801296a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801296a:	b480      	push	{r7}
 801296c:	b083      	sub	sp, #12
 801296e:	af00      	add	r7, sp, #0
 8012970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012972:	bf00      	nop
 8012974:	370c      	adds	r7, #12
 8012976:	46bd      	mov	sp, r7
 8012978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297c:	4770      	bx	lr
	...

08012980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b084      	sub	sp, #16
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
 8012988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d109      	bne.n	80129a4 <HAL_TIM_PWM_Start+0x24>
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012996:	b2db      	uxtb	r3, r3
 8012998:	2b01      	cmp	r3, #1
 801299a:	bf14      	ite	ne
 801299c:	2301      	movne	r3, #1
 801299e:	2300      	moveq	r3, #0
 80129a0:	b2db      	uxtb	r3, r3
 80129a2:	e03c      	b.n	8012a1e <HAL_TIM_PWM_Start+0x9e>
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	2b04      	cmp	r3, #4
 80129a8:	d109      	bne.n	80129be <HAL_TIM_PWM_Start+0x3e>
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80129b0:	b2db      	uxtb	r3, r3
 80129b2:	2b01      	cmp	r3, #1
 80129b4:	bf14      	ite	ne
 80129b6:	2301      	movne	r3, #1
 80129b8:	2300      	moveq	r3, #0
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	e02f      	b.n	8012a1e <HAL_TIM_PWM_Start+0x9e>
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	2b08      	cmp	r3, #8
 80129c2:	d109      	bne.n	80129d8 <HAL_TIM_PWM_Start+0x58>
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80129ca:	b2db      	uxtb	r3, r3
 80129cc:	2b01      	cmp	r3, #1
 80129ce:	bf14      	ite	ne
 80129d0:	2301      	movne	r3, #1
 80129d2:	2300      	moveq	r3, #0
 80129d4:	b2db      	uxtb	r3, r3
 80129d6:	e022      	b.n	8012a1e <HAL_TIM_PWM_Start+0x9e>
 80129d8:	683b      	ldr	r3, [r7, #0]
 80129da:	2b0c      	cmp	r3, #12
 80129dc:	d109      	bne.n	80129f2 <HAL_TIM_PWM_Start+0x72>
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80129e4:	b2db      	uxtb	r3, r3
 80129e6:	2b01      	cmp	r3, #1
 80129e8:	bf14      	ite	ne
 80129ea:	2301      	movne	r3, #1
 80129ec:	2300      	moveq	r3, #0
 80129ee:	b2db      	uxtb	r3, r3
 80129f0:	e015      	b.n	8012a1e <HAL_TIM_PWM_Start+0x9e>
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	2b10      	cmp	r3, #16
 80129f6:	d109      	bne.n	8012a0c <HAL_TIM_PWM_Start+0x8c>
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80129fe:	b2db      	uxtb	r3, r3
 8012a00:	2b01      	cmp	r3, #1
 8012a02:	bf14      	ite	ne
 8012a04:	2301      	movne	r3, #1
 8012a06:	2300      	moveq	r3, #0
 8012a08:	b2db      	uxtb	r3, r3
 8012a0a:	e008      	b.n	8012a1e <HAL_TIM_PWM_Start+0x9e>
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012a12:	b2db      	uxtb	r3, r3
 8012a14:	2b01      	cmp	r3, #1
 8012a16:	bf14      	ite	ne
 8012a18:	2301      	movne	r3, #1
 8012a1a:	2300      	moveq	r3, #0
 8012a1c:	b2db      	uxtb	r3, r3
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d001      	beq.n	8012a26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8012a22:	2301      	movs	r3, #1
 8012a24:	e09c      	b.n	8012b60 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d104      	bne.n	8012a36 <HAL_TIM_PWM_Start+0xb6>
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2202      	movs	r2, #2
 8012a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012a34:	e023      	b.n	8012a7e <HAL_TIM_PWM_Start+0xfe>
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	2b04      	cmp	r3, #4
 8012a3a:	d104      	bne.n	8012a46 <HAL_TIM_PWM_Start+0xc6>
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2202      	movs	r2, #2
 8012a40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012a44:	e01b      	b.n	8012a7e <HAL_TIM_PWM_Start+0xfe>
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	2b08      	cmp	r3, #8
 8012a4a:	d104      	bne.n	8012a56 <HAL_TIM_PWM_Start+0xd6>
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2202      	movs	r2, #2
 8012a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012a54:	e013      	b.n	8012a7e <HAL_TIM_PWM_Start+0xfe>
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	2b0c      	cmp	r3, #12
 8012a5a:	d104      	bne.n	8012a66 <HAL_TIM_PWM_Start+0xe6>
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2202      	movs	r2, #2
 8012a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012a64:	e00b      	b.n	8012a7e <HAL_TIM_PWM_Start+0xfe>
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	2b10      	cmp	r3, #16
 8012a6a:	d104      	bne.n	8012a76 <HAL_TIM_PWM_Start+0xf6>
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2202      	movs	r2, #2
 8012a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012a74:	e003      	b.n	8012a7e <HAL_TIM_PWM_Start+0xfe>
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2202      	movs	r2, #2
 8012a7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2201      	movs	r2, #1
 8012a84:	6839      	ldr	r1, [r7, #0]
 8012a86:	4618      	mov	r0, r3
 8012a88:	f001 fc7a 	bl	8014380 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	4a35      	ldr	r2, [pc, #212]	@ (8012b68 <HAL_TIM_PWM_Start+0x1e8>)
 8012a92:	4293      	cmp	r3, r2
 8012a94:	d013      	beq.n	8012abe <HAL_TIM_PWM_Start+0x13e>
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	4a34      	ldr	r2, [pc, #208]	@ (8012b6c <HAL_TIM_PWM_Start+0x1ec>)
 8012a9c:	4293      	cmp	r3, r2
 8012a9e:	d00e      	beq.n	8012abe <HAL_TIM_PWM_Start+0x13e>
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	4a32      	ldr	r2, [pc, #200]	@ (8012b70 <HAL_TIM_PWM_Start+0x1f0>)
 8012aa6:	4293      	cmp	r3, r2
 8012aa8:	d009      	beq.n	8012abe <HAL_TIM_PWM_Start+0x13e>
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	4a31      	ldr	r2, [pc, #196]	@ (8012b74 <HAL_TIM_PWM_Start+0x1f4>)
 8012ab0:	4293      	cmp	r3, r2
 8012ab2:	d004      	beq.n	8012abe <HAL_TIM_PWM_Start+0x13e>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	4a2f      	ldr	r2, [pc, #188]	@ (8012b78 <HAL_TIM_PWM_Start+0x1f8>)
 8012aba:	4293      	cmp	r3, r2
 8012abc:	d101      	bne.n	8012ac2 <HAL_TIM_PWM_Start+0x142>
 8012abe:	2301      	movs	r3, #1
 8012ac0:	e000      	b.n	8012ac4 <HAL_TIM_PWM_Start+0x144>
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d007      	beq.n	8012ad8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012ad6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	4a22      	ldr	r2, [pc, #136]	@ (8012b68 <HAL_TIM_PWM_Start+0x1e8>)
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	d01d      	beq.n	8012b1e <HAL_TIM_PWM_Start+0x19e>
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012aea:	d018      	beq.n	8012b1e <HAL_TIM_PWM_Start+0x19e>
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	4a22      	ldr	r2, [pc, #136]	@ (8012b7c <HAL_TIM_PWM_Start+0x1fc>)
 8012af2:	4293      	cmp	r3, r2
 8012af4:	d013      	beq.n	8012b1e <HAL_TIM_PWM_Start+0x19e>
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	4a21      	ldr	r2, [pc, #132]	@ (8012b80 <HAL_TIM_PWM_Start+0x200>)
 8012afc:	4293      	cmp	r3, r2
 8012afe:	d00e      	beq.n	8012b1e <HAL_TIM_PWM_Start+0x19e>
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	4a1f      	ldr	r2, [pc, #124]	@ (8012b84 <HAL_TIM_PWM_Start+0x204>)
 8012b06:	4293      	cmp	r3, r2
 8012b08:	d009      	beq.n	8012b1e <HAL_TIM_PWM_Start+0x19e>
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	4a17      	ldr	r2, [pc, #92]	@ (8012b6c <HAL_TIM_PWM_Start+0x1ec>)
 8012b10:	4293      	cmp	r3, r2
 8012b12:	d004      	beq.n	8012b1e <HAL_TIM_PWM_Start+0x19e>
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	4a15      	ldr	r2, [pc, #84]	@ (8012b70 <HAL_TIM_PWM_Start+0x1f0>)
 8012b1a:	4293      	cmp	r3, r2
 8012b1c:	d115      	bne.n	8012b4a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	689a      	ldr	r2, [r3, #8]
 8012b24:	4b18      	ldr	r3, [pc, #96]	@ (8012b88 <HAL_TIM_PWM_Start+0x208>)
 8012b26:	4013      	ands	r3, r2
 8012b28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	2b06      	cmp	r3, #6
 8012b2e:	d015      	beq.n	8012b5c <HAL_TIM_PWM_Start+0x1dc>
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b36:	d011      	beq.n	8012b5c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	681a      	ldr	r2, [r3, #0]
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	f042 0201 	orr.w	r2, r2, #1
 8012b46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b48:	e008      	b.n	8012b5c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	681a      	ldr	r2, [r3, #0]
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	f042 0201 	orr.w	r2, r2, #1
 8012b58:	601a      	str	r2, [r3, #0]
 8012b5a:	e000      	b.n	8012b5e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012b5e:	2300      	movs	r3, #0
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3710      	adds	r7, #16
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}
 8012b68:	40012c00 	.word	0x40012c00
 8012b6c:	40013400 	.word	0x40013400
 8012b70:	40014000 	.word	0x40014000
 8012b74:	40014400 	.word	0x40014400
 8012b78:	40014800 	.word	0x40014800
 8012b7c:	40000400 	.word	0x40000400
 8012b80:	40000800 	.word	0x40000800
 8012b84:	40000c00 	.word	0x40000c00
 8012b88:	00010007 	.word	0x00010007

08012b8c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b082      	sub	sp, #8
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
 8012b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	6839      	ldr	r1, [r7, #0]
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f001 fbee 	bl	8014380 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	4a3e      	ldr	r2, [pc, #248]	@ (8012ca4 <HAL_TIM_PWM_Stop+0x118>)
 8012baa:	4293      	cmp	r3, r2
 8012bac:	d013      	beq.n	8012bd6 <HAL_TIM_PWM_Stop+0x4a>
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	4a3d      	ldr	r2, [pc, #244]	@ (8012ca8 <HAL_TIM_PWM_Stop+0x11c>)
 8012bb4:	4293      	cmp	r3, r2
 8012bb6:	d00e      	beq.n	8012bd6 <HAL_TIM_PWM_Stop+0x4a>
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	4a3b      	ldr	r2, [pc, #236]	@ (8012cac <HAL_TIM_PWM_Stop+0x120>)
 8012bbe:	4293      	cmp	r3, r2
 8012bc0:	d009      	beq.n	8012bd6 <HAL_TIM_PWM_Stop+0x4a>
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	4a3a      	ldr	r2, [pc, #232]	@ (8012cb0 <HAL_TIM_PWM_Stop+0x124>)
 8012bc8:	4293      	cmp	r3, r2
 8012bca:	d004      	beq.n	8012bd6 <HAL_TIM_PWM_Stop+0x4a>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	4a38      	ldr	r2, [pc, #224]	@ (8012cb4 <HAL_TIM_PWM_Stop+0x128>)
 8012bd2:	4293      	cmp	r3, r2
 8012bd4:	d101      	bne.n	8012bda <HAL_TIM_PWM_Stop+0x4e>
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	e000      	b.n	8012bdc <HAL_TIM_PWM_Stop+0x50>
 8012bda:	2300      	movs	r3, #0
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d017      	beq.n	8012c10 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	6a1a      	ldr	r2, [r3, #32]
 8012be6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012bea:	4013      	ands	r3, r2
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d10f      	bne.n	8012c10 <HAL_TIM_PWM_Stop+0x84>
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	6a1a      	ldr	r2, [r3, #32]
 8012bf6:	f240 4344 	movw	r3, #1092	@ 0x444
 8012bfa:	4013      	ands	r3, r2
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d107      	bne.n	8012c10 <HAL_TIM_PWM_Stop+0x84>
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012c0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	6a1a      	ldr	r2, [r3, #32]
 8012c16:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012c1a:	4013      	ands	r3, r2
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d10f      	bne.n	8012c40 <HAL_TIM_PWM_Stop+0xb4>
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	6a1a      	ldr	r2, [r3, #32]
 8012c26:	f240 4344 	movw	r3, #1092	@ 0x444
 8012c2a:	4013      	ands	r3, r2
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d107      	bne.n	8012c40 <HAL_TIM_PWM_Stop+0xb4>
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	681a      	ldr	r2, [r3, #0]
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	f022 0201 	bic.w	r2, r2, #1
 8012c3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d104      	bne.n	8012c50 <HAL_TIM_PWM_Stop+0xc4>
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2201      	movs	r2, #1
 8012c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012c4e:	e023      	b.n	8012c98 <HAL_TIM_PWM_Stop+0x10c>
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	2b04      	cmp	r3, #4
 8012c54:	d104      	bne.n	8012c60 <HAL_TIM_PWM_Stop+0xd4>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2201      	movs	r2, #1
 8012c5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012c5e:	e01b      	b.n	8012c98 <HAL_TIM_PWM_Stop+0x10c>
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	2b08      	cmp	r3, #8
 8012c64:	d104      	bne.n	8012c70 <HAL_TIM_PWM_Stop+0xe4>
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2201      	movs	r2, #1
 8012c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012c6e:	e013      	b.n	8012c98 <HAL_TIM_PWM_Stop+0x10c>
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	2b0c      	cmp	r3, #12
 8012c74:	d104      	bne.n	8012c80 <HAL_TIM_PWM_Stop+0xf4>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2201      	movs	r2, #1
 8012c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012c7e:	e00b      	b.n	8012c98 <HAL_TIM_PWM_Stop+0x10c>
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	2b10      	cmp	r3, #16
 8012c84:	d104      	bne.n	8012c90 <HAL_TIM_PWM_Stop+0x104>
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	2201      	movs	r2, #1
 8012c8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012c8e:	e003      	b.n	8012c98 <HAL_TIM_PWM_Stop+0x10c>
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2201      	movs	r2, #1
 8012c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8012c98:	2300      	movs	r3, #0
}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3708      	adds	r7, #8
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}
 8012ca2:	bf00      	nop
 8012ca4:	40012c00 	.word	0x40012c00
 8012ca8:	40013400 	.word	0x40013400
 8012cac:	40014000 	.word	0x40014000
 8012cb0:	40014400 	.word	0x40014400
 8012cb4:	40014800 	.word	0x40014800

08012cb8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d101      	bne.n	8012cca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8012cc6:	2301      	movs	r3, #1
 8012cc8:	e049      	b.n	8012d5e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012cd0:	b2db      	uxtb	r3, r3
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d106      	bne.n	8012ce4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f7f4 fc84 	bl	80075ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2202      	movs	r2, #2
 8012ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681a      	ldr	r2, [r3, #0]
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	3304      	adds	r3, #4
 8012cf4:	4619      	mov	r1, r3
 8012cf6:	4610      	mov	r0, r2
 8012cf8:	f000 fd74 	bl	80137e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2201      	movs	r2, #1
 8012d00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2201      	movs	r2, #1
 8012d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2201      	movs	r2, #1
 8012d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2201      	movs	r2, #1
 8012d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2201      	movs	r2, #1
 8012d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2201      	movs	r2, #1
 8012d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2201      	movs	r2, #1
 8012d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2201      	movs	r2, #1
 8012d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2201      	movs	r2, #1
 8012d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2201      	movs	r2, #1
 8012d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2201      	movs	r2, #1
 8012d50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	2201      	movs	r2, #1
 8012d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8012d5c:	2300      	movs	r3, #0
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3708      	adds	r7, #8
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}
	...

08012d68 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
 8012d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012d72:	2300      	movs	r3, #0
 8012d74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d104      	bne.n	8012d86 <HAL_TIM_IC_Start_IT+0x1e>
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	e023      	b.n	8012dce <HAL_TIM_IC_Start_IT+0x66>
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	2b04      	cmp	r3, #4
 8012d8a:	d104      	bne.n	8012d96 <HAL_TIM_IC_Start_IT+0x2e>
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8012d92:	b2db      	uxtb	r3, r3
 8012d94:	e01b      	b.n	8012dce <HAL_TIM_IC_Start_IT+0x66>
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	2b08      	cmp	r3, #8
 8012d9a:	d104      	bne.n	8012da6 <HAL_TIM_IC_Start_IT+0x3e>
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012da2:	b2db      	uxtb	r3, r3
 8012da4:	e013      	b.n	8012dce <HAL_TIM_IC_Start_IT+0x66>
 8012da6:	683b      	ldr	r3, [r7, #0]
 8012da8:	2b0c      	cmp	r3, #12
 8012daa:	d104      	bne.n	8012db6 <HAL_TIM_IC_Start_IT+0x4e>
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8012db2:	b2db      	uxtb	r3, r3
 8012db4:	e00b      	b.n	8012dce <HAL_TIM_IC_Start_IT+0x66>
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	2b10      	cmp	r3, #16
 8012dba:	d104      	bne.n	8012dc6 <HAL_TIM_IC_Start_IT+0x5e>
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012dc2:	b2db      	uxtb	r3, r3
 8012dc4:	e003      	b.n	8012dce <HAL_TIM_IC_Start_IT+0x66>
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012dcc:	b2db      	uxtb	r3, r3
 8012dce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d104      	bne.n	8012de0 <HAL_TIM_IC_Start_IT+0x78>
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012ddc:	b2db      	uxtb	r3, r3
 8012dde:	e013      	b.n	8012e08 <HAL_TIM_IC_Start_IT+0xa0>
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	2b04      	cmp	r3, #4
 8012de4:	d104      	bne.n	8012df0 <HAL_TIM_IC_Start_IT+0x88>
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012dec:	b2db      	uxtb	r3, r3
 8012dee:	e00b      	b.n	8012e08 <HAL_TIM_IC_Start_IT+0xa0>
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	2b08      	cmp	r3, #8
 8012df4:	d104      	bne.n	8012e00 <HAL_TIM_IC_Start_IT+0x98>
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	e003      	b.n	8012e08 <HAL_TIM_IC_Start_IT+0xa0>
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8012e06:	b2db      	uxtb	r3, r3
 8012e08:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8012e0a:	7bbb      	ldrb	r3, [r7, #14]
 8012e0c:	2b01      	cmp	r3, #1
 8012e0e:	d102      	bne.n	8012e16 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8012e10:	7b7b      	ldrb	r3, [r7, #13]
 8012e12:	2b01      	cmp	r3, #1
 8012e14:	d001      	beq.n	8012e1a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8012e16:	2301      	movs	r3, #1
 8012e18:	e0dd      	b.n	8012fd6 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d104      	bne.n	8012e2a <HAL_TIM_IC_Start_IT+0xc2>
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2202      	movs	r2, #2
 8012e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8012e28:	e023      	b.n	8012e72 <HAL_TIM_IC_Start_IT+0x10a>
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	2b04      	cmp	r3, #4
 8012e2e:	d104      	bne.n	8012e3a <HAL_TIM_IC_Start_IT+0xd2>
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	2202      	movs	r2, #2
 8012e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8012e38:	e01b      	b.n	8012e72 <HAL_TIM_IC_Start_IT+0x10a>
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	2b08      	cmp	r3, #8
 8012e3e:	d104      	bne.n	8012e4a <HAL_TIM_IC_Start_IT+0xe2>
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2202      	movs	r2, #2
 8012e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8012e48:	e013      	b.n	8012e72 <HAL_TIM_IC_Start_IT+0x10a>
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	2b0c      	cmp	r3, #12
 8012e4e:	d104      	bne.n	8012e5a <HAL_TIM_IC_Start_IT+0xf2>
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2202      	movs	r2, #2
 8012e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8012e58:	e00b      	b.n	8012e72 <HAL_TIM_IC_Start_IT+0x10a>
 8012e5a:	683b      	ldr	r3, [r7, #0]
 8012e5c:	2b10      	cmp	r3, #16
 8012e5e:	d104      	bne.n	8012e6a <HAL_TIM_IC_Start_IT+0x102>
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	2202      	movs	r2, #2
 8012e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8012e68:	e003      	b.n	8012e72 <HAL_TIM_IC_Start_IT+0x10a>
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	2202      	movs	r2, #2
 8012e6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d104      	bne.n	8012e82 <HAL_TIM_IC_Start_IT+0x11a>
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2202      	movs	r2, #2
 8012e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012e80:	e013      	b.n	8012eaa <HAL_TIM_IC_Start_IT+0x142>
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	2b04      	cmp	r3, #4
 8012e86:	d104      	bne.n	8012e92 <HAL_TIM_IC_Start_IT+0x12a>
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	2202      	movs	r2, #2
 8012e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012e90:	e00b      	b.n	8012eaa <HAL_TIM_IC_Start_IT+0x142>
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	2b08      	cmp	r3, #8
 8012e96:	d104      	bne.n	8012ea2 <HAL_TIM_IC_Start_IT+0x13a>
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2202      	movs	r2, #2
 8012e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8012ea0:	e003      	b.n	8012eaa <HAL_TIM_IC_Start_IT+0x142>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2202      	movs	r2, #2
 8012ea6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	2b0c      	cmp	r3, #12
 8012eae:	d841      	bhi.n	8012f34 <HAL_TIM_IC_Start_IT+0x1cc>
 8012eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8012eb8 <HAL_TIM_IC_Start_IT+0x150>)
 8012eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eb6:	bf00      	nop
 8012eb8:	08012eed 	.word	0x08012eed
 8012ebc:	08012f35 	.word	0x08012f35
 8012ec0:	08012f35 	.word	0x08012f35
 8012ec4:	08012f35 	.word	0x08012f35
 8012ec8:	08012eff 	.word	0x08012eff
 8012ecc:	08012f35 	.word	0x08012f35
 8012ed0:	08012f35 	.word	0x08012f35
 8012ed4:	08012f35 	.word	0x08012f35
 8012ed8:	08012f11 	.word	0x08012f11
 8012edc:	08012f35 	.word	0x08012f35
 8012ee0:	08012f35 	.word	0x08012f35
 8012ee4:	08012f35 	.word	0x08012f35
 8012ee8:	08012f23 	.word	0x08012f23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	68da      	ldr	r2, [r3, #12]
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	f042 0202 	orr.w	r2, r2, #2
 8012efa:	60da      	str	r2, [r3, #12]
      break;
 8012efc:	e01d      	b.n	8012f3a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	68da      	ldr	r2, [r3, #12]
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	f042 0204 	orr.w	r2, r2, #4
 8012f0c:	60da      	str	r2, [r3, #12]
      break;
 8012f0e:	e014      	b.n	8012f3a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	68da      	ldr	r2, [r3, #12]
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	f042 0208 	orr.w	r2, r2, #8
 8012f1e:	60da      	str	r2, [r3, #12]
      break;
 8012f20:	e00b      	b.n	8012f3a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	68da      	ldr	r2, [r3, #12]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	f042 0210 	orr.w	r2, r2, #16
 8012f30:	60da      	str	r2, [r3, #12]
      break;
 8012f32:	e002      	b.n	8012f3a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8012f34:	2301      	movs	r3, #1
 8012f36:	73fb      	strb	r3, [r7, #15]
      break;
 8012f38:	bf00      	nop
  }

  if (status == HAL_OK)
 8012f3a:	7bfb      	ldrb	r3, [r7, #15]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d149      	bne.n	8012fd4 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	2201      	movs	r2, #1
 8012f46:	6839      	ldr	r1, [r7, #0]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f001 fa19 	bl	8014380 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	4a23      	ldr	r2, [pc, #140]	@ (8012fe0 <HAL_TIM_IC_Start_IT+0x278>)
 8012f54:	4293      	cmp	r3, r2
 8012f56:	d01d      	beq.n	8012f94 <HAL_TIM_IC_Start_IT+0x22c>
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012f60:	d018      	beq.n	8012f94 <HAL_TIM_IC_Start_IT+0x22c>
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	4a1f      	ldr	r2, [pc, #124]	@ (8012fe4 <HAL_TIM_IC_Start_IT+0x27c>)
 8012f68:	4293      	cmp	r3, r2
 8012f6a:	d013      	beq.n	8012f94 <HAL_TIM_IC_Start_IT+0x22c>
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	4a1d      	ldr	r2, [pc, #116]	@ (8012fe8 <HAL_TIM_IC_Start_IT+0x280>)
 8012f72:	4293      	cmp	r3, r2
 8012f74:	d00e      	beq.n	8012f94 <HAL_TIM_IC_Start_IT+0x22c>
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8012fec <HAL_TIM_IC_Start_IT+0x284>)
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	d009      	beq.n	8012f94 <HAL_TIM_IC_Start_IT+0x22c>
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	4a1a      	ldr	r2, [pc, #104]	@ (8012ff0 <HAL_TIM_IC_Start_IT+0x288>)
 8012f86:	4293      	cmp	r3, r2
 8012f88:	d004      	beq.n	8012f94 <HAL_TIM_IC_Start_IT+0x22c>
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	4a19      	ldr	r2, [pc, #100]	@ (8012ff4 <HAL_TIM_IC_Start_IT+0x28c>)
 8012f90:	4293      	cmp	r3, r2
 8012f92:	d115      	bne.n	8012fc0 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	689a      	ldr	r2, [r3, #8]
 8012f9a:	4b17      	ldr	r3, [pc, #92]	@ (8012ff8 <HAL_TIM_IC_Start_IT+0x290>)
 8012f9c:	4013      	ands	r3, r2
 8012f9e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	2b06      	cmp	r3, #6
 8012fa4:	d015      	beq.n	8012fd2 <HAL_TIM_IC_Start_IT+0x26a>
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012fac:	d011      	beq.n	8012fd2 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	681a      	ldr	r2, [r3, #0]
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	f042 0201 	orr.w	r2, r2, #1
 8012fbc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fbe:	e008      	b.n	8012fd2 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	681a      	ldr	r2, [r3, #0]
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	f042 0201 	orr.w	r2, r2, #1
 8012fce:	601a      	str	r2, [r3, #0]
 8012fd0:	e000      	b.n	8012fd4 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fd2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	3710      	adds	r7, #16
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}
 8012fde:	bf00      	nop
 8012fe0:	40012c00 	.word	0x40012c00
 8012fe4:	40000400 	.word	0x40000400
 8012fe8:	40000800 	.word	0x40000800
 8012fec:	40000c00 	.word	0x40000c00
 8012ff0:	40013400 	.word	0x40013400
 8012ff4:	40014000 	.word	0x40014000
 8012ff8:	00010007 	.word	0x00010007

08012ffc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b084      	sub	sp, #16
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013006:	2300      	movs	r3, #0
 8013008:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	2b0c      	cmp	r3, #12
 801300e:	d841      	bhi.n	8013094 <HAL_TIM_IC_Stop_IT+0x98>
 8013010:	a201      	add	r2, pc, #4	@ (adr r2, 8013018 <HAL_TIM_IC_Stop_IT+0x1c>)
 8013012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013016:	bf00      	nop
 8013018:	0801304d 	.word	0x0801304d
 801301c:	08013095 	.word	0x08013095
 8013020:	08013095 	.word	0x08013095
 8013024:	08013095 	.word	0x08013095
 8013028:	0801305f 	.word	0x0801305f
 801302c:	08013095 	.word	0x08013095
 8013030:	08013095 	.word	0x08013095
 8013034:	08013095 	.word	0x08013095
 8013038:	08013071 	.word	0x08013071
 801303c:	08013095 	.word	0x08013095
 8013040:	08013095 	.word	0x08013095
 8013044:	08013095 	.word	0x08013095
 8013048:	08013083 	.word	0x08013083
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	68da      	ldr	r2, [r3, #12]
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	f022 0202 	bic.w	r2, r2, #2
 801305a:	60da      	str	r2, [r3, #12]
      break;
 801305c:	e01d      	b.n	801309a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	68da      	ldr	r2, [r3, #12]
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	f022 0204 	bic.w	r2, r2, #4
 801306c:	60da      	str	r2, [r3, #12]
      break;
 801306e:	e014      	b.n	801309a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	68da      	ldr	r2, [r3, #12]
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	f022 0208 	bic.w	r2, r2, #8
 801307e:	60da      	str	r2, [r3, #12]
      break;
 8013080:	e00b      	b.n	801309a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	68da      	ldr	r2, [r3, #12]
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	f022 0210 	bic.w	r2, r2, #16
 8013090:	60da      	str	r2, [r3, #12]
      break;
 8013092:	e002      	b.n	801309a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8013094:	2301      	movs	r3, #1
 8013096:	73fb      	strb	r3, [r7, #15]
      break;
 8013098:	bf00      	nop
  }

  if (status == HAL_OK)
 801309a:	7bfb      	ldrb	r3, [r7, #15]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d166      	bne.n	801316e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	2200      	movs	r2, #0
 80130a6:	6839      	ldr	r1, [r7, #0]
 80130a8:	4618      	mov	r0, r3
 80130aa:	f001 f969 	bl	8014380 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	6a1a      	ldr	r2, [r3, #32]
 80130b4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80130b8:	4013      	ands	r3, r2
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d10f      	bne.n	80130de <HAL_TIM_IC_Stop_IT+0xe2>
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	6a1a      	ldr	r2, [r3, #32]
 80130c4:	f240 4344 	movw	r3, #1092	@ 0x444
 80130c8:	4013      	ands	r3, r2
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d107      	bne.n	80130de <HAL_TIM_IC_Stop_IT+0xe2>
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	681a      	ldr	r2, [r3, #0]
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	f022 0201 	bic.w	r2, r2, #1
 80130dc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d104      	bne.n	80130ee <HAL_TIM_IC_Stop_IT+0xf2>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2201      	movs	r2, #1
 80130e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80130ec:	e023      	b.n	8013136 <HAL_TIM_IC_Stop_IT+0x13a>
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	2b04      	cmp	r3, #4
 80130f2:	d104      	bne.n	80130fe <HAL_TIM_IC_Stop_IT+0x102>
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	2201      	movs	r2, #1
 80130f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80130fc:	e01b      	b.n	8013136 <HAL_TIM_IC_Stop_IT+0x13a>
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	2b08      	cmp	r3, #8
 8013102:	d104      	bne.n	801310e <HAL_TIM_IC_Stop_IT+0x112>
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	2201      	movs	r2, #1
 8013108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801310c:	e013      	b.n	8013136 <HAL_TIM_IC_Stop_IT+0x13a>
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	2b0c      	cmp	r3, #12
 8013112:	d104      	bne.n	801311e <HAL_TIM_IC_Stop_IT+0x122>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	2201      	movs	r2, #1
 8013118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801311c:	e00b      	b.n	8013136 <HAL_TIM_IC_Stop_IT+0x13a>
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	2b10      	cmp	r3, #16
 8013122:	d104      	bne.n	801312e <HAL_TIM_IC_Stop_IT+0x132>
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2201      	movs	r2, #1
 8013128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801312c:	e003      	b.n	8013136 <HAL_TIM_IC_Stop_IT+0x13a>
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2201      	movs	r2, #1
 8013132:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013136:	683b      	ldr	r3, [r7, #0]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d104      	bne.n	8013146 <HAL_TIM_IC_Stop_IT+0x14a>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2201      	movs	r2, #1
 8013140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013144:	e013      	b.n	801316e <HAL_TIM_IC_Stop_IT+0x172>
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	2b04      	cmp	r3, #4
 801314a:	d104      	bne.n	8013156 <HAL_TIM_IC_Stop_IT+0x15a>
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2201      	movs	r2, #1
 8013150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013154:	e00b      	b.n	801316e <HAL_TIM_IC_Stop_IT+0x172>
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	2b08      	cmp	r3, #8
 801315a:	d104      	bne.n	8013166 <HAL_TIM_IC_Stop_IT+0x16a>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2201      	movs	r2, #1
 8013160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8013164:	e003      	b.n	801316e <HAL_TIM_IC_Stop_IT+0x172>
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2201      	movs	r2, #1
 801316a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 801316e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013170:	4618      	mov	r0, r3
 8013172:	3710      	adds	r7, #16
 8013174:	46bd      	mov	sp, r7
 8013176:	bd80      	pop	{r7, pc}

08013178 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b086      	sub	sp, #24
 801317c:	af00      	add	r7, sp, #0
 801317e:	60f8      	str	r0, [r7, #12]
 8013180:	60b9      	str	r1, [r7, #8]
 8013182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013184:	2300      	movs	r3, #0
 8013186:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801318e:	2b01      	cmp	r3, #1
 8013190:	d101      	bne.n	8013196 <HAL_TIM_OC_ConfigChannel+0x1e>
 8013192:	2302      	movs	r3, #2
 8013194:	e066      	b.n	8013264 <HAL_TIM_OC_ConfigChannel+0xec>
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	2201      	movs	r2, #1
 801319a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	2b14      	cmp	r3, #20
 80131a2:	d857      	bhi.n	8013254 <HAL_TIM_OC_ConfigChannel+0xdc>
 80131a4:	a201      	add	r2, pc, #4	@ (adr r2, 80131ac <HAL_TIM_OC_ConfigChannel+0x34>)
 80131a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131aa:	bf00      	nop
 80131ac:	08013201 	.word	0x08013201
 80131b0:	08013255 	.word	0x08013255
 80131b4:	08013255 	.word	0x08013255
 80131b8:	08013255 	.word	0x08013255
 80131bc:	0801320f 	.word	0x0801320f
 80131c0:	08013255 	.word	0x08013255
 80131c4:	08013255 	.word	0x08013255
 80131c8:	08013255 	.word	0x08013255
 80131cc:	0801321d 	.word	0x0801321d
 80131d0:	08013255 	.word	0x08013255
 80131d4:	08013255 	.word	0x08013255
 80131d8:	08013255 	.word	0x08013255
 80131dc:	0801322b 	.word	0x0801322b
 80131e0:	08013255 	.word	0x08013255
 80131e4:	08013255 	.word	0x08013255
 80131e8:	08013255 	.word	0x08013255
 80131ec:	08013239 	.word	0x08013239
 80131f0:	08013255 	.word	0x08013255
 80131f4:	08013255 	.word	0x08013255
 80131f8:	08013255 	.word	0x08013255
 80131fc:	08013247 	.word	0x08013247
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	68b9      	ldr	r1, [r7, #8]
 8013206:	4618      	mov	r0, r3
 8013208:	f000 fb92 	bl	8013930 <TIM_OC1_SetConfig>
      break;
 801320c:	e025      	b.n	801325a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	68b9      	ldr	r1, [r7, #8]
 8013214:	4618      	mov	r0, r3
 8013216:	f000 fc1b 	bl	8013a50 <TIM_OC2_SetConfig>
      break;
 801321a:	e01e      	b.n	801325a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	68b9      	ldr	r1, [r7, #8]
 8013222:	4618      	mov	r0, r3
 8013224:	f000 fc9e 	bl	8013b64 <TIM_OC3_SetConfig>
      break;
 8013228:	e017      	b.n	801325a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	68b9      	ldr	r1, [r7, #8]
 8013230:	4618      	mov	r0, r3
 8013232:	f000 fd1f 	bl	8013c74 <TIM_OC4_SetConfig>
      break;
 8013236:	e010      	b.n	801325a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	68b9      	ldr	r1, [r7, #8]
 801323e:	4618      	mov	r0, r3
 8013240:	f000 fd82 	bl	8013d48 <TIM_OC5_SetConfig>
      break;
 8013244:	e009      	b.n	801325a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	68b9      	ldr	r1, [r7, #8]
 801324c:	4618      	mov	r0, r3
 801324e:	f000 fddf 	bl	8013e10 <TIM_OC6_SetConfig>
      break;
 8013252:	e002      	b.n	801325a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8013254:	2301      	movs	r3, #1
 8013256:	75fb      	strb	r3, [r7, #23]
      break;
 8013258:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	2200      	movs	r2, #0
 801325e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013262:	7dfb      	ldrb	r3, [r7, #23]
}
 8013264:	4618      	mov	r0, r3
 8013266:	3718      	adds	r7, #24
 8013268:	46bd      	mov	sp, r7
 801326a:	bd80      	pop	{r7, pc}

0801326c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b086      	sub	sp, #24
 8013270:	af00      	add	r7, sp, #0
 8013272:	60f8      	str	r0, [r7, #12]
 8013274:	60b9      	str	r1, [r7, #8]
 8013276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013278:	2300      	movs	r3, #0
 801327a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013282:	2b01      	cmp	r3, #1
 8013284:	d101      	bne.n	801328a <HAL_TIM_IC_ConfigChannel+0x1e>
 8013286:	2302      	movs	r3, #2
 8013288:	e088      	b.n	801339c <HAL_TIM_IC_ConfigChannel+0x130>
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	2201      	movs	r2, #1
 801328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d11b      	bne.n	80132d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80132a8:	f000 feac 	bl	8014004 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	699a      	ldr	r2, [r3, #24]
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	f022 020c 	bic.w	r2, r2, #12
 80132ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	6999      	ldr	r1, [r3, #24]
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	689a      	ldr	r2, [r3, #8]
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	430a      	orrs	r2, r1
 80132cc:	619a      	str	r2, [r3, #24]
 80132ce:	e060      	b.n	8013392 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2b04      	cmp	r3, #4
 80132d4:	d11c      	bne.n	8013310 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80132e6:	f000 ff2a 	bl	801413e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	699a      	ldr	r2, [r3, #24]
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80132f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	6999      	ldr	r1, [r3, #24]
 8013300:	68bb      	ldr	r3, [r7, #8]
 8013302:	689b      	ldr	r3, [r3, #8]
 8013304:	021a      	lsls	r2, r3, #8
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	430a      	orrs	r2, r1
 801330c:	619a      	str	r2, [r3, #24]
 801330e:	e040      	b.n	8013392 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2b08      	cmp	r3, #8
 8013314:	d11b      	bne.n	801334e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013322:	68bb      	ldr	r3, [r7, #8]
 8013324:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8013326:	f000 ff77 	bl	8014218 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	69da      	ldr	r2, [r3, #28]
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	f022 020c 	bic.w	r2, r2, #12
 8013338:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	69d9      	ldr	r1, [r3, #28]
 8013340:	68bb      	ldr	r3, [r7, #8]
 8013342:	689a      	ldr	r2, [r3, #8]
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	430a      	orrs	r2, r1
 801334a:	61da      	str	r2, [r3, #28]
 801334c:	e021      	b.n	8013392 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2b0c      	cmp	r3, #12
 8013352:	d11c      	bne.n	801338e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8013364:	f000 ff94 	bl	8014290 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	69da      	ldr	r2, [r3, #28]
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8013376:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	69d9      	ldr	r1, [r3, #28]
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	689b      	ldr	r3, [r3, #8]
 8013382:	021a      	lsls	r2, r3, #8
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	430a      	orrs	r2, r1
 801338a:	61da      	str	r2, [r3, #28]
 801338c:	e001      	b.n	8013392 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801338e:	2301      	movs	r3, #1
 8013390:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	2200      	movs	r2, #0
 8013396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801339a:	7dfb      	ldrb	r3, [r7, #23]
}
 801339c:	4618      	mov	r0, r3
 801339e:	3718      	adds	r7, #24
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bd80      	pop	{r7, pc}

080133a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b086      	sub	sp, #24
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80133b0:	2300      	movs	r3, #0
 80133b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	d101      	bne.n	80133c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80133be:	2302      	movs	r3, #2
 80133c0:	e0ff      	b.n	80135c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	2201      	movs	r2, #1
 80133c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2b14      	cmp	r3, #20
 80133ce:	f200 80f0 	bhi.w	80135b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80133d2:	a201      	add	r2, pc, #4	@ (adr r2, 80133d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80133d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133d8:	0801342d 	.word	0x0801342d
 80133dc:	080135b3 	.word	0x080135b3
 80133e0:	080135b3 	.word	0x080135b3
 80133e4:	080135b3 	.word	0x080135b3
 80133e8:	0801346d 	.word	0x0801346d
 80133ec:	080135b3 	.word	0x080135b3
 80133f0:	080135b3 	.word	0x080135b3
 80133f4:	080135b3 	.word	0x080135b3
 80133f8:	080134af 	.word	0x080134af
 80133fc:	080135b3 	.word	0x080135b3
 8013400:	080135b3 	.word	0x080135b3
 8013404:	080135b3 	.word	0x080135b3
 8013408:	080134ef 	.word	0x080134ef
 801340c:	080135b3 	.word	0x080135b3
 8013410:	080135b3 	.word	0x080135b3
 8013414:	080135b3 	.word	0x080135b3
 8013418:	08013531 	.word	0x08013531
 801341c:	080135b3 	.word	0x080135b3
 8013420:	080135b3 	.word	0x080135b3
 8013424:	080135b3 	.word	0x080135b3
 8013428:	08013571 	.word	0x08013571
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	68b9      	ldr	r1, [r7, #8]
 8013432:	4618      	mov	r0, r3
 8013434:	f000 fa7c 	bl	8013930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	699a      	ldr	r2, [r3, #24]
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	f042 0208 	orr.w	r2, r2, #8
 8013446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	699a      	ldr	r2, [r3, #24]
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	f022 0204 	bic.w	r2, r2, #4
 8013456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	6999      	ldr	r1, [r3, #24]
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	691a      	ldr	r2, [r3, #16]
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	430a      	orrs	r2, r1
 8013468:	619a      	str	r2, [r3, #24]
      break;
 801346a:	e0a5      	b.n	80135b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	68b9      	ldr	r1, [r7, #8]
 8013472:	4618      	mov	r0, r3
 8013474:	f000 faec 	bl	8013a50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	699a      	ldr	r2, [r3, #24]
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	699a      	ldr	r2, [r3, #24]
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	6999      	ldr	r1, [r3, #24]
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	691b      	ldr	r3, [r3, #16]
 80134a2:	021a      	lsls	r2, r3, #8
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	430a      	orrs	r2, r1
 80134aa:	619a      	str	r2, [r3, #24]
      break;
 80134ac:	e084      	b.n	80135b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	68b9      	ldr	r1, [r7, #8]
 80134b4:	4618      	mov	r0, r3
 80134b6:	f000 fb55 	bl	8013b64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	69da      	ldr	r2, [r3, #28]
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	f042 0208 	orr.w	r2, r2, #8
 80134c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	69da      	ldr	r2, [r3, #28]
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	f022 0204 	bic.w	r2, r2, #4
 80134d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	69d9      	ldr	r1, [r3, #28]
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	691a      	ldr	r2, [r3, #16]
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	430a      	orrs	r2, r1
 80134ea:	61da      	str	r2, [r3, #28]
      break;
 80134ec:	e064      	b.n	80135b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	68b9      	ldr	r1, [r7, #8]
 80134f4:	4618      	mov	r0, r3
 80134f6:	f000 fbbd 	bl	8013c74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	69da      	ldr	r2, [r3, #28]
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8013508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	69da      	ldr	r2, [r3, #28]
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8013518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	69d9      	ldr	r1, [r3, #28]
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	691b      	ldr	r3, [r3, #16]
 8013524:	021a      	lsls	r2, r3, #8
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	430a      	orrs	r2, r1
 801352c:	61da      	str	r2, [r3, #28]
      break;
 801352e:	e043      	b.n	80135b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	68b9      	ldr	r1, [r7, #8]
 8013536:	4618      	mov	r0, r3
 8013538:	f000 fc06 	bl	8013d48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	f042 0208 	orr.w	r2, r2, #8
 801354a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	f022 0204 	bic.w	r2, r2, #4
 801355a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	691a      	ldr	r2, [r3, #16]
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	430a      	orrs	r2, r1
 801356c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801356e:	e023      	b.n	80135b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	68b9      	ldr	r1, [r7, #8]
 8013576:	4618      	mov	r0, r3
 8013578:	f000 fc4a 	bl	8013e10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801358a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801359a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80135a2:	68bb      	ldr	r3, [r7, #8]
 80135a4:	691b      	ldr	r3, [r3, #16]
 80135a6:	021a      	lsls	r2, r3, #8
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	430a      	orrs	r2, r1
 80135ae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80135b0:	e002      	b.n	80135b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80135b2:	2301      	movs	r3, #1
 80135b4:	75fb      	strb	r3, [r7, #23]
      break;
 80135b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	2200      	movs	r2, #0
 80135bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80135c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3718      	adds	r7, #24
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
 80135ca:	bf00      	nop

080135cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b084      	sub	sp, #16
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
 80135d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80135d6:	2300      	movs	r3, #0
 80135d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80135e0:	2b01      	cmp	r3, #1
 80135e2:	d101      	bne.n	80135e8 <HAL_TIM_ConfigClockSource+0x1c>
 80135e4:	2302      	movs	r3, #2
 80135e6:	e0b6      	b.n	8013756 <HAL_TIM_ConfigClockSource+0x18a>
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2201      	movs	r2, #1
 80135ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2202      	movs	r2, #2
 80135f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	689b      	ldr	r3, [r3, #8]
 80135fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013606:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 801360a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801360c:	68bb      	ldr	r3, [r7, #8]
 801360e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013612:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	68ba      	ldr	r2, [r7, #8]
 801361a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013624:	d03e      	beq.n	80136a4 <HAL_TIM_ConfigClockSource+0xd8>
 8013626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801362a:	f200 8087 	bhi.w	801373c <HAL_TIM_ConfigClockSource+0x170>
 801362e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013632:	f000 8086 	beq.w	8013742 <HAL_TIM_ConfigClockSource+0x176>
 8013636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801363a:	d87f      	bhi.n	801373c <HAL_TIM_ConfigClockSource+0x170>
 801363c:	2b70      	cmp	r3, #112	@ 0x70
 801363e:	d01a      	beq.n	8013676 <HAL_TIM_ConfigClockSource+0xaa>
 8013640:	2b70      	cmp	r3, #112	@ 0x70
 8013642:	d87b      	bhi.n	801373c <HAL_TIM_ConfigClockSource+0x170>
 8013644:	2b60      	cmp	r3, #96	@ 0x60
 8013646:	d050      	beq.n	80136ea <HAL_TIM_ConfigClockSource+0x11e>
 8013648:	2b60      	cmp	r3, #96	@ 0x60
 801364a:	d877      	bhi.n	801373c <HAL_TIM_ConfigClockSource+0x170>
 801364c:	2b50      	cmp	r3, #80	@ 0x50
 801364e:	d03c      	beq.n	80136ca <HAL_TIM_ConfigClockSource+0xfe>
 8013650:	2b50      	cmp	r3, #80	@ 0x50
 8013652:	d873      	bhi.n	801373c <HAL_TIM_ConfigClockSource+0x170>
 8013654:	2b40      	cmp	r3, #64	@ 0x40
 8013656:	d058      	beq.n	801370a <HAL_TIM_ConfigClockSource+0x13e>
 8013658:	2b40      	cmp	r3, #64	@ 0x40
 801365a:	d86f      	bhi.n	801373c <HAL_TIM_ConfigClockSource+0x170>
 801365c:	2b30      	cmp	r3, #48	@ 0x30
 801365e:	d064      	beq.n	801372a <HAL_TIM_ConfigClockSource+0x15e>
 8013660:	2b30      	cmp	r3, #48	@ 0x30
 8013662:	d86b      	bhi.n	801373c <HAL_TIM_ConfigClockSource+0x170>
 8013664:	2b20      	cmp	r3, #32
 8013666:	d060      	beq.n	801372a <HAL_TIM_ConfigClockSource+0x15e>
 8013668:	2b20      	cmp	r3, #32
 801366a:	d867      	bhi.n	801373c <HAL_TIM_ConfigClockSource+0x170>
 801366c:	2b00      	cmp	r3, #0
 801366e:	d05c      	beq.n	801372a <HAL_TIM_ConfigClockSource+0x15e>
 8013670:	2b10      	cmp	r3, #16
 8013672:	d05a      	beq.n	801372a <HAL_TIM_ConfigClockSource+0x15e>
 8013674:	e062      	b.n	801373c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8013686:	f000 fe5b 	bl	8014340 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	689b      	ldr	r3, [r3, #8]
 8013690:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8013698:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	68ba      	ldr	r2, [r7, #8]
 80136a0:	609a      	str	r2, [r3, #8]
      break;
 80136a2:	e04f      	b.n	8013744 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80136b0:	683b      	ldr	r3, [r7, #0]
 80136b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80136b4:	f000 fe44 	bl	8014340 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	689a      	ldr	r2, [r3, #8]
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80136c6:	609a      	str	r2, [r3, #8]
      break;
 80136c8:	e03c      	b.n	8013744 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80136d6:	461a      	mov	r2, r3
 80136d8:	f000 fd02 	bl	80140e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	2150      	movs	r1, #80	@ 0x50
 80136e2:	4618      	mov	r0, r3
 80136e4:	f000 fe11 	bl	801430a <TIM_ITRx_SetConfig>
      break;
 80136e8:	e02c      	b.n	8013744 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80136f6:	461a      	mov	r2, r3
 80136f8:	f000 fd5e 	bl	80141b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	2160      	movs	r1, #96	@ 0x60
 8013702:	4618      	mov	r0, r3
 8013704:	f000 fe01 	bl	801430a <TIM_ITRx_SetConfig>
      break;
 8013708:	e01c      	b.n	8013744 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013712:	683b      	ldr	r3, [r7, #0]
 8013714:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013716:	461a      	mov	r2, r3
 8013718:	f000 fce2 	bl	80140e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	2140      	movs	r1, #64	@ 0x40
 8013722:	4618      	mov	r0, r3
 8013724:	f000 fdf1 	bl	801430a <TIM_ITRx_SetConfig>
      break;
 8013728:	e00c      	b.n	8013744 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681a      	ldr	r2, [r3, #0]
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	4619      	mov	r1, r3
 8013734:	4610      	mov	r0, r2
 8013736:	f000 fde8 	bl	801430a <TIM_ITRx_SetConfig>
      break;
 801373a:	e003      	b.n	8013744 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801373c:	2301      	movs	r3, #1
 801373e:	73fb      	strb	r3, [r7, #15]
      break;
 8013740:	e000      	b.n	8013744 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8013742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2201      	movs	r2, #1
 8013748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2200      	movs	r2, #0
 8013750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013754:	7bfb      	ldrb	r3, [r7, #15]
}
 8013756:	4618      	mov	r0, r3
 8013758:	3710      	adds	r7, #16
 801375a:	46bd      	mov	sp, r7
 801375c:	bd80      	pop	{r7, pc}

0801375e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 801375e:	b580      	push	{r7, lr}
 8013760:	b082      	sub	sp, #8
 8013762:	af00      	add	r7, sp, #0
 8013764:	6078      	str	r0, [r7, #4]
 8013766:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801376e:	2b01      	cmp	r3, #1
 8013770:	d101      	bne.n	8013776 <HAL_TIM_SlaveConfigSynchro+0x18>
 8013772:	2302      	movs	r3, #2
 8013774:	e031      	b.n	80137da <HAL_TIM_SlaveConfigSynchro+0x7c>
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	2201      	movs	r2, #1
 801377a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2202      	movs	r2, #2
 8013782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8013786:	6839      	ldr	r1, [r7, #0]
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	f000 fba7 	bl	8013edc <TIM_SlaveTimer_SetConfig>
 801378e:	4603      	mov	r3, r0
 8013790:	2b00      	cmp	r3, #0
 8013792:	d009      	beq.n	80137a8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	2201      	movs	r2, #1
 8013798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2200      	movs	r2, #0
 80137a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80137a4:	2301      	movs	r3, #1
 80137a6:	e018      	b.n	80137da <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	68da      	ldr	r2, [r3, #12]
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80137b6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	68da      	ldr	r2, [r3, #12]
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80137c6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	2201      	movs	r2, #1
 80137cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2200      	movs	r2, #0
 80137d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80137d8:	2300      	movs	r3, #0
}
 80137da:	4618      	mov	r0, r3
 80137dc:	3708      	adds	r7, #8
 80137de:	46bd      	mov	sp, r7
 80137e0:	bd80      	pop	{r7, pc}
	...

080137e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80137e4:	b480      	push	{r7}
 80137e6:	b085      	sub	sp, #20
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
 80137ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	4a46      	ldr	r2, [pc, #280]	@ (8013910 <TIM_Base_SetConfig+0x12c>)
 80137f8:	4293      	cmp	r3, r2
 80137fa:	d013      	beq.n	8013824 <TIM_Base_SetConfig+0x40>
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013802:	d00f      	beq.n	8013824 <TIM_Base_SetConfig+0x40>
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	4a43      	ldr	r2, [pc, #268]	@ (8013914 <TIM_Base_SetConfig+0x130>)
 8013808:	4293      	cmp	r3, r2
 801380a:	d00b      	beq.n	8013824 <TIM_Base_SetConfig+0x40>
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	4a42      	ldr	r2, [pc, #264]	@ (8013918 <TIM_Base_SetConfig+0x134>)
 8013810:	4293      	cmp	r3, r2
 8013812:	d007      	beq.n	8013824 <TIM_Base_SetConfig+0x40>
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	4a41      	ldr	r2, [pc, #260]	@ (801391c <TIM_Base_SetConfig+0x138>)
 8013818:	4293      	cmp	r3, r2
 801381a:	d003      	beq.n	8013824 <TIM_Base_SetConfig+0x40>
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	4a40      	ldr	r2, [pc, #256]	@ (8013920 <TIM_Base_SetConfig+0x13c>)
 8013820:	4293      	cmp	r3, r2
 8013822:	d108      	bne.n	8013836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801382a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	685b      	ldr	r3, [r3, #4]
 8013830:	68fa      	ldr	r2, [r7, #12]
 8013832:	4313      	orrs	r3, r2
 8013834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	4a35      	ldr	r2, [pc, #212]	@ (8013910 <TIM_Base_SetConfig+0x12c>)
 801383a:	4293      	cmp	r3, r2
 801383c:	d01f      	beq.n	801387e <TIM_Base_SetConfig+0x9a>
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013844:	d01b      	beq.n	801387e <TIM_Base_SetConfig+0x9a>
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	4a32      	ldr	r2, [pc, #200]	@ (8013914 <TIM_Base_SetConfig+0x130>)
 801384a:	4293      	cmp	r3, r2
 801384c:	d017      	beq.n	801387e <TIM_Base_SetConfig+0x9a>
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	4a31      	ldr	r2, [pc, #196]	@ (8013918 <TIM_Base_SetConfig+0x134>)
 8013852:	4293      	cmp	r3, r2
 8013854:	d013      	beq.n	801387e <TIM_Base_SetConfig+0x9a>
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	4a30      	ldr	r2, [pc, #192]	@ (801391c <TIM_Base_SetConfig+0x138>)
 801385a:	4293      	cmp	r3, r2
 801385c:	d00f      	beq.n	801387e <TIM_Base_SetConfig+0x9a>
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	4a2f      	ldr	r2, [pc, #188]	@ (8013920 <TIM_Base_SetConfig+0x13c>)
 8013862:	4293      	cmp	r3, r2
 8013864:	d00b      	beq.n	801387e <TIM_Base_SetConfig+0x9a>
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	4a2e      	ldr	r2, [pc, #184]	@ (8013924 <TIM_Base_SetConfig+0x140>)
 801386a:	4293      	cmp	r3, r2
 801386c:	d007      	beq.n	801387e <TIM_Base_SetConfig+0x9a>
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	4a2d      	ldr	r2, [pc, #180]	@ (8013928 <TIM_Base_SetConfig+0x144>)
 8013872:	4293      	cmp	r3, r2
 8013874:	d003      	beq.n	801387e <TIM_Base_SetConfig+0x9a>
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	4a2c      	ldr	r2, [pc, #176]	@ (801392c <TIM_Base_SetConfig+0x148>)
 801387a:	4293      	cmp	r3, r2
 801387c:	d108      	bne.n	8013890 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	68db      	ldr	r3, [r3, #12]
 801388a:	68fa      	ldr	r2, [r7, #12]
 801388c:	4313      	orrs	r3, r2
 801388e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	695b      	ldr	r3, [r3, #20]
 801389a:	4313      	orrs	r3, r2
 801389c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	68fa      	ldr	r2, [r7, #12]
 80138a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	689a      	ldr	r2, [r3, #8]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	681a      	ldr	r2, [r3, #0]
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	4a16      	ldr	r2, [pc, #88]	@ (8013910 <TIM_Base_SetConfig+0x12c>)
 80138b8:	4293      	cmp	r3, r2
 80138ba:	d00f      	beq.n	80138dc <TIM_Base_SetConfig+0xf8>
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	4a18      	ldr	r2, [pc, #96]	@ (8013920 <TIM_Base_SetConfig+0x13c>)
 80138c0:	4293      	cmp	r3, r2
 80138c2:	d00b      	beq.n	80138dc <TIM_Base_SetConfig+0xf8>
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	4a17      	ldr	r2, [pc, #92]	@ (8013924 <TIM_Base_SetConfig+0x140>)
 80138c8:	4293      	cmp	r3, r2
 80138ca:	d007      	beq.n	80138dc <TIM_Base_SetConfig+0xf8>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	4a16      	ldr	r2, [pc, #88]	@ (8013928 <TIM_Base_SetConfig+0x144>)
 80138d0:	4293      	cmp	r3, r2
 80138d2:	d003      	beq.n	80138dc <TIM_Base_SetConfig+0xf8>
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	4a15      	ldr	r2, [pc, #84]	@ (801392c <TIM_Base_SetConfig+0x148>)
 80138d8:	4293      	cmp	r3, r2
 80138da:	d103      	bne.n	80138e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	691a      	ldr	r2, [r3, #16]
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	2201      	movs	r2, #1
 80138e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	691b      	ldr	r3, [r3, #16]
 80138ee:	f003 0301 	and.w	r3, r3, #1
 80138f2:	2b01      	cmp	r3, #1
 80138f4:	d105      	bne.n	8013902 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	691b      	ldr	r3, [r3, #16]
 80138fa:	f023 0201 	bic.w	r2, r3, #1
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	611a      	str	r2, [r3, #16]
  }
}
 8013902:	bf00      	nop
 8013904:	3714      	adds	r7, #20
 8013906:	46bd      	mov	sp, r7
 8013908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390c:	4770      	bx	lr
 801390e:	bf00      	nop
 8013910:	40012c00 	.word	0x40012c00
 8013914:	40000400 	.word	0x40000400
 8013918:	40000800 	.word	0x40000800
 801391c:	40000c00 	.word	0x40000c00
 8013920:	40013400 	.word	0x40013400
 8013924:	40014000 	.word	0x40014000
 8013928:	40014400 	.word	0x40014400
 801392c:	40014800 	.word	0x40014800

08013930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013930:	b480      	push	{r7}
 8013932:	b087      	sub	sp, #28
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
 8013938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	6a1b      	ldr	r3, [r3, #32]
 801393e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	6a1b      	ldr	r3, [r3, #32]
 8013944:	f023 0201 	bic.w	r2, r3, #1
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	685b      	ldr	r3, [r3, #4]
 8013950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	699b      	ldr	r3, [r3, #24]
 8013956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801395e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	f023 0303 	bic.w	r3, r3, #3
 801396a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801396c:	683b      	ldr	r3, [r7, #0]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	68fa      	ldr	r2, [r7, #12]
 8013972:	4313      	orrs	r3, r2
 8013974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	f023 0302 	bic.w	r3, r3, #2
 801397c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	689b      	ldr	r3, [r3, #8]
 8013982:	697a      	ldr	r2, [r7, #20]
 8013984:	4313      	orrs	r3, r2
 8013986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	4a2c      	ldr	r2, [pc, #176]	@ (8013a3c <TIM_OC1_SetConfig+0x10c>)
 801398c:	4293      	cmp	r3, r2
 801398e:	d00f      	beq.n	80139b0 <TIM_OC1_SetConfig+0x80>
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	4a2b      	ldr	r2, [pc, #172]	@ (8013a40 <TIM_OC1_SetConfig+0x110>)
 8013994:	4293      	cmp	r3, r2
 8013996:	d00b      	beq.n	80139b0 <TIM_OC1_SetConfig+0x80>
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	4a2a      	ldr	r2, [pc, #168]	@ (8013a44 <TIM_OC1_SetConfig+0x114>)
 801399c:	4293      	cmp	r3, r2
 801399e:	d007      	beq.n	80139b0 <TIM_OC1_SetConfig+0x80>
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	4a29      	ldr	r2, [pc, #164]	@ (8013a48 <TIM_OC1_SetConfig+0x118>)
 80139a4:	4293      	cmp	r3, r2
 80139a6:	d003      	beq.n	80139b0 <TIM_OC1_SetConfig+0x80>
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	4a28      	ldr	r2, [pc, #160]	@ (8013a4c <TIM_OC1_SetConfig+0x11c>)
 80139ac:	4293      	cmp	r3, r2
 80139ae:	d10c      	bne.n	80139ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80139b0:	697b      	ldr	r3, [r7, #20]
 80139b2:	f023 0308 	bic.w	r3, r3, #8
 80139b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	68db      	ldr	r3, [r3, #12]
 80139bc:	697a      	ldr	r2, [r7, #20]
 80139be:	4313      	orrs	r3, r2
 80139c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80139c2:	697b      	ldr	r3, [r7, #20]
 80139c4:	f023 0304 	bic.w	r3, r3, #4
 80139c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	4a1b      	ldr	r2, [pc, #108]	@ (8013a3c <TIM_OC1_SetConfig+0x10c>)
 80139ce:	4293      	cmp	r3, r2
 80139d0:	d00f      	beq.n	80139f2 <TIM_OC1_SetConfig+0xc2>
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	4a1a      	ldr	r2, [pc, #104]	@ (8013a40 <TIM_OC1_SetConfig+0x110>)
 80139d6:	4293      	cmp	r3, r2
 80139d8:	d00b      	beq.n	80139f2 <TIM_OC1_SetConfig+0xc2>
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	4a19      	ldr	r2, [pc, #100]	@ (8013a44 <TIM_OC1_SetConfig+0x114>)
 80139de:	4293      	cmp	r3, r2
 80139e0:	d007      	beq.n	80139f2 <TIM_OC1_SetConfig+0xc2>
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	4a18      	ldr	r2, [pc, #96]	@ (8013a48 <TIM_OC1_SetConfig+0x118>)
 80139e6:	4293      	cmp	r3, r2
 80139e8:	d003      	beq.n	80139f2 <TIM_OC1_SetConfig+0xc2>
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	4a17      	ldr	r2, [pc, #92]	@ (8013a4c <TIM_OC1_SetConfig+0x11c>)
 80139ee:	4293      	cmp	r3, r2
 80139f0:	d111      	bne.n	8013a16 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80139f2:	693b      	ldr	r3, [r7, #16]
 80139f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80139f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80139fa:	693b      	ldr	r3, [r7, #16]
 80139fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	695b      	ldr	r3, [r3, #20]
 8013a06:	693a      	ldr	r2, [r7, #16]
 8013a08:	4313      	orrs	r3, r2
 8013a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013a0c:	683b      	ldr	r3, [r7, #0]
 8013a0e:	699b      	ldr	r3, [r3, #24]
 8013a10:	693a      	ldr	r2, [r7, #16]
 8013a12:	4313      	orrs	r3, r2
 8013a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	693a      	ldr	r2, [r7, #16]
 8013a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	68fa      	ldr	r2, [r7, #12]
 8013a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013a22:	683b      	ldr	r3, [r7, #0]
 8013a24:	685a      	ldr	r2, [r3, #4]
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	697a      	ldr	r2, [r7, #20]
 8013a2e:	621a      	str	r2, [r3, #32]
}
 8013a30:	bf00      	nop
 8013a32:	371c      	adds	r7, #28
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr
 8013a3c:	40012c00 	.word	0x40012c00
 8013a40:	40013400 	.word	0x40013400
 8013a44:	40014000 	.word	0x40014000
 8013a48:	40014400 	.word	0x40014400
 8013a4c:	40014800 	.word	0x40014800

08013a50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013a50:	b480      	push	{r7}
 8013a52:	b087      	sub	sp, #28
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
 8013a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	6a1b      	ldr	r3, [r3, #32]
 8013a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	6a1b      	ldr	r3, [r3, #32]
 8013a64:	f023 0210 	bic.w	r2, r3, #16
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	685b      	ldr	r3, [r3, #4]
 8013a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	699b      	ldr	r3, [r3, #24]
 8013a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013a7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	021b      	lsls	r3, r3, #8
 8013a92:	68fa      	ldr	r2, [r7, #12]
 8013a94:	4313      	orrs	r3, r2
 8013a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013a98:	697b      	ldr	r3, [r7, #20]
 8013a9a:	f023 0320 	bic.w	r3, r3, #32
 8013a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013aa0:	683b      	ldr	r3, [r7, #0]
 8013aa2:	689b      	ldr	r3, [r3, #8]
 8013aa4:	011b      	lsls	r3, r3, #4
 8013aa6:	697a      	ldr	r2, [r7, #20]
 8013aa8:	4313      	orrs	r3, r2
 8013aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	4a28      	ldr	r2, [pc, #160]	@ (8013b50 <TIM_OC2_SetConfig+0x100>)
 8013ab0:	4293      	cmp	r3, r2
 8013ab2:	d003      	beq.n	8013abc <TIM_OC2_SetConfig+0x6c>
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	4a27      	ldr	r2, [pc, #156]	@ (8013b54 <TIM_OC2_SetConfig+0x104>)
 8013ab8:	4293      	cmp	r3, r2
 8013aba:	d10d      	bne.n	8013ad8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013abc:	697b      	ldr	r3, [r7, #20]
 8013abe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	68db      	ldr	r3, [r3, #12]
 8013ac8:	011b      	lsls	r3, r3, #4
 8013aca:	697a      	ldr	r2, [r7, #20]
 8013acc:	4313      	orrs	r3, r2
 8013ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013ad0:	697b      	ldr	r3, [r7, #20]
 8013ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013ad6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	4a1d      	ldr	r2, [pc, #116]	@ (8013b50 <TIM_OC2_SetConfig+0x100>)
 8013adc:	4293      	cmp	r3, r2
 8013ade:	d00f      	beq.n	8013b00 <TIM_OC2_SetConfig+0xb0>
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8013b54 <TIM_OC2_SetConfig+0x104>)
 8013ae4:	4293      	cmp	r3, r2
 8013ae6:	d00b      	beq.n	8013b00 <TIM_OC2_SetConfig+0xb0>
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	4a1b      	ldr	r2, [pc, #108]	@ (8013b58 <TIM_OC2_SetConfig+0x108>)
 8013aec:	4293      	cmp	r3, r2
 8013aee:	d007      	beq.n	8013b00 <TIM_OC2_SetConfig+0xb0>
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	4a1a      	ldr	r2, [pc, #104]	@ (8013b5c <TIM_OC2_SetConfig+0x10c>)
 8013af4:	4293      	cmp	r3, r2
 8013af6:	d003      	beq.n	8013b00 <TIM_OC2_SetConfig+0xb0>
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	4a19      	ldr	r2, [pc, #100]	@ (8013b60 <TIM_OC2_SetConfig+0x110>)
 8013afc:	4293      	cmp	r3, r2
 8013afe:	d113      	bne.n	8013b28 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013b00:	693b      	ldr	r3, [r7, #16]
 8013b02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013b06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013b08:	693b      	ldr	r3, [r7, #16]
 8013b0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013b10:	683b      	ldr	r3, [r7, #0]
 8013b12:	695b      	ldr	r3, [r3, #20]
 8013b14:	009b      	lsls	r3, r3, #2
 8013b16:	693a      	ldr	r2, [r7, #16]
 8013b18:	4313      	orrs	r3, r2
 8013b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013b1c:	683b      	ldr	r3, [r7, #0]
 8013b1e:	699b      	ldr	r3, [r3, #24]
 8013b20:	009b      	lsls	r3, r3, #2
 8013b22:	693a      	ldr	r2, [r7, #16]
 8013b24:	4313      	orrs	r3, r2
 8013b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	693a      	ldr	r2, [r7, #16]
 8013b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	68fa      	ldr	r2, [r7, #12]
 8013b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	685a      	ldr	r2, [r3, #4]
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	697a      	ldr	r2, [r7, #20]
 8013b40:	621a      	str	r2, [r3, #32]
}
 8013b42:	bf00      	nop
 8013b44:	371c      	adds	r7, #28
 8013b46:	46bd      	mov	sp, r7
 8013b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4c:	4770      	bx	lr
 8013b4e:	bf00      	nop
 8013b50:	40012c00 	.word	0x40012c00
 8013b54:	40013400 	.word	0x40013400
 8013b58:	40014000 	.word	0x40014000
 8013b5c:	40014400 	.word	0x40014400
 8013b60:	40014800 	.word	0x40014800

08013b64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013b64:	b480      	push	{r7}
 8013b66:	b087      	sub	sp, #28
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
 8013b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	6a1b      	ldr	r3, [r3, #32]
 8013b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	6a1b      	ldr	r3, [r3, #32]
 8013b78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	685b      	ldr	r3, [r3, #4]
 8013b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	69db      	ldr	r3, [r3, #28]
 8013b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	f023 0303 	bic.w	r3, r3, #3
 8013b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	68fa      	ldr	r2, [r7, #12]
 8013ba6:	4313      	orrs	r3, r2
 8013ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013baa:	697b      	ldr	r3, [r7, #20]
 8013bac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	689b      	ldr	r3, [r3, #8]
 8013bb6:	021b      	lsls	r3, r3, #8
 8013bb8:	697a      	ldr	r2, [r7, #20]
 8013bba:	4313      	orrs	r3, r2
 8013bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	4a27      	ldr	r2, [pc, #156]	@ (8013c60 <TIM_OC3_SetConfig+0xfc>)
 8013bc2:	4293      	cmp	r3, r2
 8013bc4:	d003      	beq.n	8013bce <TIM_OC3_SetConfig+0x6a>
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	4a26      	ldr	r2, [pc, #152]	@ (8013c64 <TIM_OC3_SetConfig+0x100>)
 8013bca:	4293      	cmp	r3, r2
 8013bcc:	d10d      	bne.n	8013bea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013bce:	697b      	ldr	r3, [r7, #20]
 8013bd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013bd6:	683b      	ldr	r3, [r7, #0]
 8013bd8:	68db      	ldr	r3, [r3, #12]
 8013bda:	021b      	lsls	r3, r3, #8
 8013bdc:	697a      	ldr	r2, [r7, #20]
 8013bde:	4313      	orrs	r3, r2
 8013be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	4a1c      	ldr	r2, [pc, #112]	@ (8013c60 <TIM_OC3_SetConfig+0xfc>)
 8013bee:	4293      	cmp	r3, r2
 8013bf0:	d00f      	beq.n	8013c12 <TIM_OC3_SetConfig+0xae>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8013c64 <TIM_OC3_SetConfig+0x100>)
 8013bf6:	4293      	cmp	r3, r2
 8013bf8:	d00b      	beq.n	8013c12 <TIM_OC3_SetConfig+0xae>
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8013c68 <TIM_OC3_SetConfig+0x104>)
 8013bfe:	4293      	cmp	r3, r2
 8013c00:	d007      	beq.n	8013c12 <TIM_OC3_SetConfig+0xae>
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	4a19      	ldr	r2, [pc, #100]	@ (8013c6c <TIM_OC3_SetConfig+0x108>)
 8013c06:	4293      	cmp	r3, r2
 8013c08:	d003      	beq.n	8013c12 <TIM_OC3_SetConfig+0xae>
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	4a18      	ldr	r2, [pc, #96]	@ (8013c70 <TIM_OC3_SetConfig+0x10c>)
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	d113      	bne.n	8013c3a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013c1a:	693b      	ldr	r3, [r7, #16]
 8013c1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	695b      	ldr	r3, [r3, #20]
 8013c26:	011b      	lsls	r3, r3, #4
 8013c28:	693a      	ldr	r2, [r7, #16]
 8013c2a:	4313      	orrs	r3, r2
 8013c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	699b      	ldr	r3, [r3, #24]
 8013c32:	011b      	lsls	r3, r3, #4
 8013c34:	693a      	ldr	r2, [r7, #16]
 8013c36:	4313      	orrs	r3, r2
 8013c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	693a      	ldr	r2, [r7, #16]
 8013c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	68fa      	ldr	r2, [r7, #12]
 8013c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	685a      	ldr	r2, [r3, #4]
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	697a      	ldr	r2, [r7, #20]
 8013c52:	621a      	str	r2, [r3, #32]
}
 8013c54:	bf00      	nop
 8013c56:	371c      	adds	r7, #28
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5e:	4770      	bx	lr
 8013c60:	40012c00 	.word	0x40012c00
 8013c64:	40013400 	.word	0x40013400
 8013c68:	40014000 	.word	0x40014000
 8013c6c:	40014400 	.word	0x40014400
 8013c70:	40014800 	.word	0x40014800

08013c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013c74:	b480      	push	{r7}
 8013c76:	b087      	sub	sp, #28
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
 8013c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	6a1b      	ldr	r3, [r3, #32]
 8013c82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	6a1b      	ldr	r3, [r3, #32]
 8013c88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	685b      	ldr	r3, [r3, #4]
 8013c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	69db      	ldr	r3, [r3, #28]
 8013c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013cb0:	683b      	ldr	r3, [r7, #0]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	021b      	lsls	r3, r3, #8
 8013cb6:	68fa      	ldr	r2, [r7, #12]
 8013cb8:	4313      	orrs	r3, r2
 8013cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013cbc:	693b      	ldr	r3, [r7, #16]
 8013cbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013cc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	689b      	ldr	r3, [r3, #8]
 8013cc8:	031b      	lsls	r3, r3, #12
 8013cca:	693a      	ldr	r2, [r7, #16]
 8013ccc:	4313      	orrs	r3, r2
 8013cce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	4a18      	ldr	r2, [pc, #96]	@ (8013d34 <TIM_OC4_SetConfig+0xc0>)
 8013cd4:	4293      	cmp	r3, r2
 8013cd6:	d00f      	beq.n	8013cf8 <TIM_OC4_SetConfig+0x84>
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	4a17      	ldr	r2, [pc, #92]	@ (8013d38 <TIM_OC4_SetConfig+0xc4>)
 8013cdc:	4293      	cmp	r3, r2
 8013cde:	d00b      	beq.n	8013cf8 <TIM_OC4_SetConfig+0x84>
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	4a16      	ldr	r2, [pc, #88]	@ (8013d3c <TIM_OC4_SetConfig+0xc8>)
 8013ce4:	4293      	cmp	r3, r2
 8013ce6:	d007      	beq.n	8013cf8 <TIM_OC4_SetConfig+0x84>
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	4a15      	ldr	r2, [pc, #84]	@ (8013d40 <TIM_OC4_SetConfig+0xcc>)
 8013cec:	4293      	cmp	r3, r2
 8013cee:	d003      	beq.n	8013cf8 <TIM_OC4_SetConfig+0x84>
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	4a14      	ldr	r2, [pc, #80]	@ (8013d44 <TIM_OC4_SetConfig+0xd0>)
 8013cf4:	4293      	cmp	r3, r2
 8013cf6:	d109      	bne.n	8013d0c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	695b      	ldr	r3, [r3, #20]
 8013d04:	019b      	lsls	r3, r3, #6
 8013d06:	697a      	ldr	r2, [r7, #20]
 8013d08:	4313      	orrs	r3, r2
 8013d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	697a      	ldr	r2, [r7, #20]
 8013d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	68fa      	ldr	r2, [r7, #12]
 8013d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013d18:	683b      	ldr	r3, [r7, #0]
 8013d1a:	685a      	ldr	r2, [r3, #4]
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	693a      	ldr	r2, [r7, #16]
 8013d24:	621a      	str	r2, [r3, #32]
}
 8013d26:	bf00      	nop
 8013d28:	371c      	adds	r7, #28
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d30:	4770      	bx	lr
 8013d32:	bf00      	nop
 8013d34:	40012c00 	.word	0x40012c00
 8013d38:	40013400 	.word	0x40013400
 8013d3c:	40014000 	.word	0x40014000
 8013d40:	40014400 	.word	0x40014400
 8013d44:	40014800 	.word	0x40014800

08013d48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013d48:	b480      	push	{r7}
 8013d4a:	b087      	sub	sp, #28
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
 8013d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	6a1b      	ldr	r3, [r3, #32]
 8013d56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	6a1b      	ldr	r3, [r3, #32]
 8013d5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	685b      	ldr	r3, [r3, #4]
 8013d68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013d7c:	683b      	ldr	r3, [r7, #0]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	68fa      	ldr	r2, [r7, #12]
 8013d82:	4313      	orrs	r3, r2
 8013d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013d86:	693b      	ldr	r3, [r7, #16]
 8013d88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8013d8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013d8e:	683b      	ldr	r3, [r7, #0]
 8013d90:	689b      	ldr	r3, [r3, #8]
 8013d92:	041b      	lsls	r3, r3, #16
 8013d94:	693a      	ldr	r2, [r7, #16]
 8013d96:	4313      	orrs	r3, r2
 8013d98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	4a17      	ldr	r2, [pc, #92]	@ (8013dfc <TIM_OC5_SetConfig+0xb4>)
 8013d9e:	4293      	cmp	r3, r2
 8013da0:	d00f      	beq.n	8013dc2 <TIM_OC5_SetConfig+0x7a>
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	4a16      	ldr	r2, [pc, #88]	@ (8013e00 <TIM_OC5_SetConfig+0xb8>)
 8013da6:	4293      	cmp	r3, r2
 8013da8:	d00b      	beq.n	8013dc2 <TIM_OC5_SetConfig+0x7a>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	4a15      	ldr	r2, [pc, #84]	@ (8013e04 <TIM_OC5_SetConfig+0xbc>)
 8013dae:	4293      	cmp	r3, r2
 8013db0:	d007      	beq.n	8013dc2 <TIM_OC5_SetConfig+0x7a>
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	4a14      	ldr	r2, [pc, #80]	@ (8013e08 <TIM_OC5_SetConfig+0xc0>)
 8013db6:	4293      	cmp	r3, r2
 8013db8:	d003      	beq.n	8013dc2 <TIM_OC5_SetConfig+0x7a>
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	4a13      	ldr	r2, [pc, #76]	@ (8013e0c <TIM_OC5_SetConfig+0xc4>)
 8013dbe:	4293      	cmp	r3, r2
 8013dc0:	d109      	bne.n	8013dd6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013dc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	695b      	ldr	r3, [r3, #20]
 8013dce:	021b      	lsls	r3, r3, #8
 8013dd0:	697a      	ldr	r2, [r7, #20]
 8013dd2:	4313      	orrs	r3, r2
 8013dd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	697a      	ldr	r2, [r7, #20]
 8013dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	68fa      	ldr	r2, [r7, #12]
 8013de0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013de2:	683b      	ldr	r3, [r7, #0]
 8013de4:	685a      	ldr	r2, [r3, #4]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	693a      	ldr	r2, [r7, #16]
 8013dee:	621a      	str	r2, [r3, #32]
}
 8013df0:	bf00      	nop
 8013df2:	371c      	adds	r7, #28
 8013df4:	46bd      	mov	sp, r7
 8013df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfa:	4770      	bx	lr
 8013dfc:	40012c00 	.word	0x40012c00
 8013e00:	40013400 	.word	0x40013400
 8013e04:	40014000 	.word	0x40014000
 8013e08:	40014400 	.word	0x40014400
 8013e0c:	40014800 	.word	0x40014800

08013e10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013e10:	b480      	push	{r7}
 8013e12:	b087      	sub	sp, #28
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
 8013e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	6a1b      	ldr	r3, [r3, #32]
 8013e1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	6a1b      	ldr	r3, [r3, #32]
 8013e24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	685b      	ldr	r3, [r3, #4]
 8013e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8013e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8013e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	021b      	lsls	r3, r3, #8
 8013e4a:	68fa      	ldr	r2, [r7, #12]
 8013e4c:	4313      	orrs	r3, r2
 8013e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013e50:	693b      	ldr	r3, [r7, #16]
 8013e52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8013e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	689b      	ldr	r3, [r3, #8]
 8013e5c:	051b      	lsls	r3, r3, #20
 8013e5e:	693a      	ldr	r2, [r7, #16]
 8013e60:	4313      	orrs	r3, r2
 8013e62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	4a18      	ldr	r2, [pc, #96]	@ (8013ec8 <TIM_OC6_SetConfig+0xb8>)
 8013e68:	4293      	cmp	r3, r2
 8013e6a:	d00f      	beq.n	8013e8c <TIM_OC6_SetConfig+0x7c>
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	4a17      	ldr	r2, [pc, #92]	@ (8013ecc <TIM_OC6_SetConfig+0xbc>)
 8013e70:	4293      	cmp	r3, r2
 8013e72:	d00b      	beq.n	8013e8c <TIM_OC6_SetConfig+0x7c>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	4a16      	ldr	r2, [pc, #88]	@ (8013ed0 <TIM_OC6_SetConfig+0xc0>)
 8013e78:	4293      	cmp	r3, r2
 8013e7a:	d007      	beq.n	8013e8c <TIM_OC6_SetConfig+0x7c>
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	4a15      	ldr	r2, [pc, #84]	@ (8013ed4 <TIM_OC6_SetConfig+0xc4>)
 8013e80:	4293      	cmp	r3, r2
 8013e82:	d003      	beq.n	8013e8c <TIM_OC6_SetConfig+0x7c>
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	4a14      	ldr	r2, [pc, #80]	@ (8013ed8 <TIM_OC6_SetConfig+0xc8>)
 8013e88:	4293      	cmp	r3, r2
 8013e8a:	d109      	bne.n	8013ea0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013e8c:	697b      	ldr	r3, [r7, #20]
 8013e8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013e92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	695b      	ldr	r3, [r3, #20]
 8013e98:	029b      	lsls	r3, r3, #10
 8013e9a:	697a      	ldr	r2, [r7, #20]
 8013e9c:	4313      	orrs	r3, r2
 8013e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	697a      	ldr	r2, [r7, #20]
 8013ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	68fa      	ldr	r2, [r7, #12]
 8013eaa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013eac:	683b      	ldr	r3, [r7, #0]
 8013eae:	685a      	ldr	r2, [r3, #4]
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	693a      	ldr	r2, [r7, #16]
 8013eb8:	621a      	str	r2, [r3, #32]
}
 8013eba:	bf00      	nop
 8013ebc:	371c      	adds	r7, #28
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec4:	4770      	bx	lr
 8013ec6:	bf00      	nop
 8013ec8:	40012c00 	.word	0x40012c00
 8013ecc:	40013400 	.word	0x40013400
 8013ed0:	40014000 	.word	0x40014000
 8013ed4:	40014400 	.word	0x40014400
 8013ed8:	40014800 	.word	0x40014800

08013edc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b086      	sub	sp, #24
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
 8013ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	689b      	ldr	r3, [r3, #8]
 8013ef0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013ef8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	685b      	ldr	r3, [r3, #4]
 8013efe:	693a      	ldr	r2, [r7, #16]
 8013f00:	4313      	orrs	r3, r2
 8013f02:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8013f04:	693b      	ldr	r3, [r7, #16]
 8013f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013f0a:	f023 0307 	bic.w	r3, r3, #7
 8013f0e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8013f10:	683b      	ldr	r3, [r7, #0]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	693a      	ldr	r2, [r7, #16]
 8013f16:	4313      	orrs	r3, r2
 8013f18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	693a      	ldr	r2, [r7, #16]
 8013f20:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8013f22:	683b      	ldr	r3, [r7, #0]
 8013f24:	685b      	ldr	r3, [r3, #4]
 8013f26:	2b70      	cmp	r3, #112	@ 0x70
 8013f28:	d01a      	beq.n	8013f60 <TIM_SlaveTimer_SetConfig+0x84>
 8013f2a:	2b70      	cmp	r3, #112	@ 0x70
 8013f2c:	d860      	bhi.n	8013ff0 <TIM_SlaveTimer_SetConfig+0x114>
 8013f2e:	2b60      	cmp	r3, #96	@ 0x60
 8013f30:	d054      	beq.n	8013fdc <TIM_SlaveTimer_SetConfig+0x100>
 8013f32:	2b60      	cmp	r3, #96	@ 0x60
 8013f34:	d85c      	bhi.n	8013ff0 <TIM_SlaveTimer_SetConfig+0x114>
 8013f36:	2b50      	cmp	r3, #80	@ 0x50
 8013f38:	d046      	beq.n	8013fc8 <TIM_SlaveTimer_SetConfig+0xec>
 8013f3a:	2b50      	cmp	r3, #80	@ 0x50
 8013f3c:	d858      	bhi.n	8013ff0 <TIM_SlaveTimer_SetConfig+0x114>
 8013f3e:	2b40      	cmp	r3, #64	@ 0x40
 8013f40:	d019      	beq.n	8013f76 <TIM_SlaveTimer_SetConfig+0x9a>
 8013f42:	2b40      	cmp	r3, #64	@ 0x40
 8013f44:	d854      	bhi.n	8013ff0 <TIM_SlaveTimer_SetConfig+0x114>
 8013f46:	2b30      	cmp	r3, #48	@ 0x30
 8013f48:	d055      	beq.n	8013ff6 <TIM_SlaveTimer_SetConfig+0x11a>
 8013f4a:	2b30      	cmp	r3, #48	@ 0x30
 8013f4c:	d850      	bhi.n	8013ff0 <TIM_SlaveTimer_SetConfig+0x114>
 8013f4e:	2b20      	cmp	r3, #32
 8013f50:	d051      	beq.n	8013ff6 <TIM_SlaveTimer_SetConfig+0x11a>
 8013f52:	2b20      	cmp	r3, #32
 8013f54:	d84c      	bhi.n	8013ff0 <TIM_SlaveTimer_SetConfig+0x114>
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d04d      	beq.n	8013ff6 <TIM_SlaveTimer_SetConfig+0x11a>
 8013f5a:	2b10      	cmp	r3, #16
 8013f5c:	d04b      	beq.n	8013ff6 <TIM_SlaveTimer_SetConfig+0x11a>
 8013f5e:	e047      	b.n	8013ff0 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8013f70:	f000 f9e6 	bl	8014340 <TIM_ETR_SetConfig>
      break;
 8013f74:	e040      	b.n	8013ff8 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	2b05      	cmp	r3, #5
 8013f7c:	d101      	bne.n	8013f82 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8013f7e:	2301      	movs	r3, #1
 8013f80:	e03b      	b.n	8013ffa <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	6a1b      	ldr	r3, [r3, #32]
 8013f88:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	6a1a      	ldr	r2, [r3, #32]
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	f022 0201 	bic.w	r2, r2, #1
 8013f98:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	699b      	ldr	r3, [r3, #24]
 8013fa0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013fa2:	68bb      	ldr	r3, [r7, #8]
 8013fa4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8013fa8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	691b      	ldr	r3, [r3, #16]
 8013fae:	011b      	lsls	r3, r3, #4
 8013fb0:	68ba      	ldr	r2, [r7, #8]
 8013fb2:	4313      	orrs	r3, r2
 8013fb4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	68ba      	ldr	r2, [r7, #8]
 8013fbc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	68fa      	ldr	r2, [r7, #12]
 8013fc4:	621a      	str	r2, [r3, #32]
      break;
 8013fc6:	e017      	b.n	8013ff8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013fd4:	461a      	mov	r2, r3
 8013fd6:	f000 f883 	bl	80140e0 <TIM_TI1_ConfigInputStage>
      break;
 8013fda:	e00d      	b.n	8013ff8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8013fe0:	683b      	ldr	r3, [r7, #0]
 8013fe2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013fe8:	461a      	mov	r2, r3
 8013fea:	f000 f8e5 	bl	80141b8 <TIM_TI2_ConfigInputStage>
      break;
 8013fee:	e003      	b.n	8013ff8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8013ff0:	2301      	movs	r3, #1
 8013ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8013ff4:	e000      	b.n	8013ff8 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8013ff6:	bf00      	nop
  }

  return status;
 8013ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	3718      	adds	r7, #24
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}
	...

08014004 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8014004:	b480      	push	{r7}
 8014006:	b087      	sub	sp, #28
 8014008:	af00      	add	r7, sp, #0
 801400a:	60f8      	str	r0, [r7, #12]
 801400c:	60b9      	str	r1, [r7, #8]
 801400e:	607a      	str	r2, [r7, #4]
 8014010:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	6a1b      	ldr	r3, [r3, #32]
 8014016:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	6a1b      	ldr	r3, [r3, #32]
 801401c:	f023 0201 	bic.w	r2, r3, #1
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	699b      	ldr	r3, [r3, #24]
 8014028:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	4a26      	ldr	r2, [pc, #152]	@ (80140c8 <TIM_TI1_SetConfig+0xc4>)
 801402e:	4293      	cmp	r3, r2
 8014030:	d017      	beq.n	8014062 <TIM_TI1_SetConfig+0x5e>
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014038:	d013      	beq.n	8014062 <TIM_TI1_SetConfig+0x5e>
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	4a23      	ldr	r2, [pc, #140]	@ (80140cc <TIM_TI1_SetConfig+0xc8>)
 801403e:	4293      	cmp	r3, r2
 8014040:	d00f      	beq.n	8014062 <TIM_TI1_SetConfig+0x5e>
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	4a22      	ldr	r2, [pc, #136]	@ (80140d0 <TIM_TI1_SetConfig+0xcc>)
 8014046:	4293      	cmp	r3, r2
 8014048:	d00b      	beq.n	8014062 <TIM_TI1_SetConfig+0x5e>
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	4a21      	ldr	r2, [pc, #132]	@ (80140d4 <TIM_TI1_SetConfig+0xd0>)
 801404e:	4293      	cmp	r3, r2
 8014050:	d007      	beq.n	8014062 <TIM_TI1_SetConfig+0x5e>
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	4a20      	ldr	r2, [pc, #128]	@ (80140d8 <TIM_TI1_SetConfig+0xd4>)
 8014056:	4293      	cmp	r3, r2
 8014058:	d003      	beq.n	8014062 <TIM_TI1_SetConfig+0x5e>
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	4a1f      	ldr	r2, [pc, #124]	@ (80140dc <TIM_TI1_SetConfig+0xd8>)
 801405e:	4293      	cmp	r3, r2
 8014060:	d101      	bne.n	8014066 <TIM_TI1_SetConfig+0x62>
 8014062:	2301      	movs	r3, #1
 8014064:	e000      	b.n	8014068 <TIM_TI1_SetConfig+0x64>
 8014066:	2300      	movs	r3, #0
 8014068:	2b00      	cmp	r3, #0
 801406a:	d008      	beq.n	801407e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	f023 0303 	bic.w	r3, r3, #3
 8014072:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8014074:	697a      	ldr	r2, [r7, #20]
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	4313      	orrs	r3, r2
 801407a:	617b      	str	r3, [r7, #20]
 801407c:	e003      	b.n	8014086 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	f043 0301 	orr.w	r3, r3, #1
 8014084:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801408c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	011b      	lsls	r3, r3, #4
 8014092:	b2db      	uxtb	r3, r3
 8014094:	697a      	ldr	r2, [r7, #20]
 8014096:	4313      	orrs	r3, r2
 8014098:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801409a:	693b      	ldr	r3, [r7, #16]
 801409c:	f023 030a 	bic.w	r3, r3, #10
 80140a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	f003 030a 	and.w	r3, r3, #10
 80140a8:	693a      	ldr	r2, [r7, #16]
 80140aa:	4313      	orrs	r3, r2
 80140ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	697a      	ldr	r2, [r7, #20]
 80140b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	693a      	ldr	r2, [r7, #16]
 80140b8:	621a      	str	r2, [r3, #32]
}
 80140ba:	bf00      	nop
 80140bc:	371c      	adds	r7, #28
 80140be:	46bd      	mov	sp, r7
 80140c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c4:	4770      	bx	lr
 80140c6:	bf00      	nop
 80140c8:	40012c00 	.word	0x40012c00
 80140cc:	40000400 	.word	0x40000400
 80140d0:	40000800 	.word	0x40000800
 80140d4:	40000c00 	.word	0x40000c00
 80140d8:	40013400 	.word	0x40013400
 80140dc:	40014000 	.word	0x40014000

080140e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80140e0:	b480      	push	{r7}
 80140e2:	b087      	sub	sp, #28
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	60f8      	str	r0, [r7, #12]
 80140e8:	60b9      	str	r1, [r7, #8]
 80140ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	6a1b      	ldr	r3, [r3, #32]
 80140f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	6a1b      	ldr	r3, [r3, #32]
 80140f6:	f023 0201 	bic.w	r2, r3, #1
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	699b      	ldr	r3, [r3, #24]
 8014102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014104:	693b      	ldr	r3, [r7, #16]
 8014106:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801410a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	011b      	lsls	r3, r3, #4
 8014110:	693a      	ldr	r2, [r7, #16]
 8014112:	4313      	orrs	r3, r2
 8014114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	f023 030a 	bic.w	r3, r3, #10
 801411c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801411e:	697a      	ldr	r2, [r7, #20]
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	4313      	orrs	r3, r2
 8014124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	693a      	ldr	r2, [r7, #16]
 801412a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	697a      	ldr	r2, [r7, #20]
 8014130:	621a      	str	r2, [r3, #32]
}
 8014132:	bf00      	nop
 8014134:	371c      	adds	r7, #28
 8014136:	46bd      	mov	sp, r7
 8014138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413c:	4770      	bx	lr

0801413e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801413e:	b480      	push	{r7}
 8014140:	b087      	sub	sp, #28
 8014142:	af00      	add	r7, sp, #0
 8014144:	60f8      	str	r0, [r7, #12]
 8014146:	60b9      	str	r1, [r7, #8]
 8014148:	607a      	str	r2, [r7, #4]
 801414a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	6a1b      	ldr	r3, [r3, #32]
 8014150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	6a1b      	ldr	r3, [r3, #32]
 8014156:	f023 0210 	bic.w	r2, r3, #16
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	699b      	ldr	r3, [r3, #24]
 8014162:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8014164:	693b      	ldr	r3, [r7, #16]
 8014166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801416a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	021b      	lsls	r3, r3, #8
 8014170:	693a      	ldr	r2, [r7, #16]
 8014172:	4313      	orrs	r3, r2
 8014174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014176:	693b      	ldr	r3, [r7, #16]
 8014178:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801417c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	031b      	lsls	r3, r3, #12
 8014182:	b29b      	uxth	r3, r3
 8014184:	693a      	ldr	r2, [r7, #16]
 8014186:	4313      	orrs	r3, r2
 8014188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801418a:	697b      	ldr	r3, [r7, #20]
 801418c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8014190:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	011b      	lsls	r3, r3, #4
 8014196:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801419a:	697a      	ldr	r2, [r7, #20]
 801419c:	4313      	orrs	r3, r2
 801419e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	693a      	ldr	r2, [r7, #16]
 80141a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	697a      	ldr	r2, [r7, #20]
 80141aa:	621a      	str	r2, [r3, #32]
}
 80141ac:	bf00      	nop
 80141ae:	371c      	adds	r7, #28
 80141b0:	46bd      	mov	sp, r7
 80141b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b6:	4770      	bx	lr

080141b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80141b8:	b480      	push	{r7}
 80141ba:	b087      	sub	sp, #28
 80141bc:	af00      	add	r7, sp, #0
 80141be:	60f8      	str	r0, [r7, #12]
 80141c0:	60b9      	str	r1, [r7, #8]
 80141c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	6a1b      	ldr	r3, [r3, #32]
 80141c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	6a1b      	ldr	r3, [r3, #32]
 80141ce:	f023 0210 	bic.w	r2, r3, #16
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	699b      	ldr	r3, [r3, #24]
 80141da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80141dc:	693b      	ldr	r3, [r7, #16]
 80141de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80141e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	031b      	lsls	r3, r3, #12
 80141e8:	693a      	ldr	r2, [r7, #16]
 80141ea:	4313      	orrs	r3, r2
 80141ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80141f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80141f6:	68bb      	ldr	r3, [r7, #8]
 80141f8:	011b      	lsls	r3, r3, #4
 80141fa:	697a      	ldr	r2, [r7, #20]
 80141fc:	4313      	orrs	r3, r2
 80141fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	693a      	ldr	r2, [r7, #16]
 8014204:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	697a      	ldr	r2, [r7, #20]
 801420a:	621a      	str	r2, [r3, #32]
}
 801420c:	bf00      	nop
 801420e:	371c      	adds	r7, #28
 8014210:	46bd      	mov	sp, r7
 8014212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014216:	4770      	bx	lr

08014218 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014218:	b480      	push	{r7}
 801421a:	b087      	sub	sp, #28
 801421c:	af00      	add	r7, sp, #0
 801421e:	60f8      	str	r0, [r7, #12]
 8014220:	60b9      	str	r1, [r7, #8]
 8014222:	607a      	str	r2, [r7, #4]
 8014224:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	6a1b      	ldr	r3, [r3, #32]
 801422a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	6a1b      	ldr	r3, [r3, #32]
 8014230:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	69db      	ldr	r3, [r3, #28]
 801423c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801423e:	693b      	ldr	r3, [r7, #16]
 8014240:	f023 0303 	bic.w	r3, r3, #3
 8014244:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8014246:	693a      	ldr	r2, [r7, #16]
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	4313      	orrs	r3, r2
 801424c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801424e:	693b      	ldr	r3, [r7, #16]
 8014250:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014254:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	011b      	lsls	r3, r3, #4
 801425a:	b2db      	uxtb	r3, r3
 801425c:	693a      	ldr	r2, [r7, #16]
 801425e:	4313      	orrs	r3, r2
 8014260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8014262:	697b      	ldr	r3, [r7, #20]
 8014264:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8014268:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	021b      	lsls	r3, r3, #8
 801426e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8014272:	697a      	ldr	r2, [r7, #20]
 8014274:	4313      	orrs	r3, r2
 8014276:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	693a      	ldr	r2, [r7, #16]
 801427c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	697a      	ldr	r2, [r7, #20]
 8014282:	621a      	str	r2, [r3, #32]
}
 8014284:	bf00      	nop
 8014286:	371c      	adds	r7, #28
 8014288:	46bd      	mov	sp, r7
 801428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428e:	4770      	bx	lr

08014290 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8014290:	b480      	push	{r7}
 8014292:	b087      	sub	sp, #28
 8014294:	af00      	add	r7, sp, #0
 8014296:	60f8      	str	r0, [r7, #12]
 8014298:	60b9      	str	r1, [r7, #8]
 801429a:	607a      	str	r2, [r7, #4]
 801429c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	6a1b      	ldr	r3, [r3, #32]
 80142a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	6a1b      	ldr	r3, [r3, #32]
 80142a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	69db      	ldr	r3, [r3, #28]
 80142b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80142b6:	693b      	ldr	r3, [r7, #16]
 80142b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80142bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	021b      	lsls	r3, r3, #8
 80142c2:	693a      	ldr	r2, [r7, #16]
 80142c4:	4313      	orrs	r3, r2
 80142c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80142c8:	693b      	ldr	r3, [r7, #16]
 80142ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80142ce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	031b      	lsls	r3, r3, #12
 80142d4:	b29b      	uxth	r3, r3
 80142d6:	693a      	ldr	r2, [r7, #16]
 80142d8:	4313      	orrs	r3, r2
 80142da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80142dc:	697b      	ldr	r3, [r7, #20]
 80142de:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80142e2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	031b      	lsls	r3, r3, #12
 80142e8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80142ec:	697a      	ldr	r2, [r7, #20]
 80142ee:	4313      	orrs	r3, r2
 80142f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	693a      	ldr	r2, [r7, #16]
 80142f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	697a      	ldr	r2, [r7, #20]
 80142fc:	621a      	str	r2, [r3, #32]
}
 80142fe:	bf00      	nop
 8014300:	371c      	adds	r7, #28
 8014302:	46bd      	mov	sp, r7
 8014304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014308:	4770      	bx	lr

0801430a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801430a:	b480      	push	{r7}
 801430c:	b085      	sub	sp, #20
 801430e:	af00      	add	r7, sp, #0
 8014310:	6078      	str	r0, [r7, #4]
 8014312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	689b      	ldr	r3, [r3, #8]
 8014318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014320:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014322:	683a      	ldr	r2, [r7, #0]
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	4313      	orrs	r3, r2
 8014328:	f043 0307 	orr.w	r3, r3, #7
 801432c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	68fa      	ldr	r2, [r7, #12]
 8014332:	609a      	str	r2, [r3, #8]
}
 8014334:	bf00      	nop
 8014336:	3714      	adds	r7, #20
 8014338:	46bd      	mov	sp, r7
 801433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433e:	4770      	bx	lr

08014340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014340:	b480      	push	{r7}
 8014342:	b087      	sub	sp, #28
 8014344:	af00      	add	r7, sp, #0
 8014346:	60f8      	str	r0, [r7, #12]
 8014348:	60b9      	str	r1, [r7, #8]
 801434a:	607a      	str	r2, [r7, #4]
 801434c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	689b      	ldr	r3, [r3, #8]
 8014352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014354:	697b      	ldr	r3, [r7, #20]
 8014356:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801435a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	021a      	lsls	r2, r3, #8
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	431a      	orrs	r2, r3
 8014364:	68bb      	ldr	r3, [r7, #8]
 8014366:	4313      	orrs	r3, r2
 8014368:	697a      	ldr	r2, [r7, #20]
 801436a:	4313      	orrs	r3, r2
 801436c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	697a      	ldr	r2, [r7, #20]
 8014372:	609a      	str	r2, [r3, #8]
}
 8014374:	bf00      	nop
 8014376:	371c      	adds	r7, #28
 8014378:	46bd      	mov	sp, r7
 801437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437e:	4770      	bx	lr

08014380 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014380:	b480      	push	{r7}
 8014382:	b087      	sub	sp, #28
 8014384:	af00      	add	r7, sp, #0
 8014386:	60f8      	str	r0, [r7, #12]
 8014388:	60b9      	str	r1, [r7, #8]
 801438a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	f003 031f 	and.w	r3, r3, #31
 8014392:	2201      	movs	r2, #1
 8014394:	fa02 f303 	lsl.w	r3, r2, r3
 8014398:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	6a1a      	ldr	r2, [r3, #32]
 801439e:	697b      	ldr	r3, [r7, #20]
 80143a0:	43db      	mvns	r3, r3
 80143a2:	401a      	ands	r2, r3
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	6a1a      	ldr	r2, [r3, #32]
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	f003 031f 	and.w	r3, r3, #31
 80143b2:	6879      	ldr	r1, [r7, #4]
 80143b4:	fa01 f303 	lsl.w	r3, r1, r3
 80143b8:	431a      	orrs	r2, r3
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	621a      	str	r2, [r3, #32]
}
 80143be:	bf00      	nop
 80143c0:	371c      	adds	r7, #28
 80143c2:	46bd      	mov	sp, r7
 80143c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c8:	4770      	bx	lr
	...

080143cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80143cc:	b480      	push	{r7}
 80143ce:	b085      	sub	sp, #20
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80143dc:	2b01      	cmp	r3, #1
 80143de:	d101      	bne.n	80143e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80143e0:	2302      	movs	r3, #2
 80143e2:	e068      	b.n	80144b6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2201      	movs	r2, #1
 80143e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	2202      	movs	r2, #2
 80143f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	685b      	ldr	r3, [r3, #4]
 80143fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	689b      	ldr	r3, [r3, #8]
 8014402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	4a2e      	ldr	r2, [pc, #184]	@ (80144c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801440a:	4293      	cmp	r3, r2
 801440c:	d004      	beq.n	8014418 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	4a2d      	ldr	r2, [pc, #180]	@ (80144c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8014414:	4293      	cmp	r3, r2
 8014416:	d108      	bne.n	801442a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801441e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014420:	683b      	ldr	r3, [r7, #0]
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	68fa      	ldr	r2, [r7, #12]
 8014426:	4313      	orrs	r3, r2
 8014428:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014430:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	68fa      	ldr	r2, [r7, #12]
 8014438:	4313      	orrs	r3, r2
 801443a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	68fa      	ldr	r2, [r7, #12]
 8014442:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	4a1e      	ldr	r2, [pc, #120]	@ (80144c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801444a:	4293      	cmp	r3, r2
 801444c:	d01d      	beq.n	801448a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014456:	d018      	beq.n	801448a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	4a1b      	ldr	r2, [pc, #108]	@ (80144cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801445e:	4293      	cmp	r3, r2
 8014460:	d013      	beq.n	801448a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	4a1a      	ldr	r2, [pc, #104]	@ (80144d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8014468:	4293      	cmp	r3, r2
 801446a:	d00e      	beq.n	801448a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	4a18      	ldr	r2, [pc, #96]	@ (80144d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8014472:	4293      	cmp	r3, r2
 8014474:	d009      	beq.n	801448a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	4a13      	ldr	r2, [pc, #76]	@ (80144c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801447c:	4293      	cmp	r3, r2
 801447e:	d004      	beq.n	801448a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	4a14      	ldr	r2, [pc, #80]	@ (80144d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8014486:	4293      	cmp	r3, r2
 8014488:	d10c      	bne.n	80144a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014492:	683b      	ldr	r3, [r7, #0]
 8014494:	689b      	ldr	r3, [r3, #8]
 8014496:	68ba      	ldr	r2, [r7, #8]
 8014498:	4313      	orrs	r3, r2
 801449a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	68ba      	ldr	r2, [r7, #8]
 80144a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	2201      	movs	r2, #1
 80144a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	2200      	movs	r2, #0
 80144b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80144b4:	2300      	movs	r3, #0
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	3714      	adds	r7, #20
 80144ba:	46bd      	mov	sp, r7
 80144bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c0:	4770      	bx	lr
 80144c2:	bf00      	nop
 80144c4:	40012c00 	.word	0x40012c00
 80144c8:	40013400 	.word	0x40013400
 80144cc:	40000400 	.word	0x40000400
 80144d0:	40000800 	.word	0x40000800
 80144d4:	40000c00 	.word	0x40000c00
 80144d8:	40014000 	.word	0x40014000

080144dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80144dc:	b480      	push	{r7}
 80144de:	b085      	sub	sp, #20
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
 80144e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80144e6:	2300      	movs	r3, #0
 80144e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80144f0:	2b01      	cmp	r3, #1
 80144f2:	d101      	bne.n	80144f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80144f4:	2302      	movs	r3, #2
 80144f6:	e065      	b.n	80145c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2201      	movs	r2, #1
 80144fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8014506:	683b      	ldr	r3, [r7, #0]
 8014508:	68db      	ldr	r3, [r3, #12]
 801450a:	4313      	orrs	r3, r2
 801450c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8014514:	683b      	ldr	r3, [r7, #0]
 8014516:	689b      	ldr	r3, [r3, #8]
 8014518:	4313      	orrs	r3, r2
 801451a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8014522:	683b      	ldr	r3, [r7, #0]
 8014524:	685b      	ldr	r3, [r3, #4]
 8014526:	4313      	orrs	r3, r2
 8014528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	4313      	orrs	r3, r2
 8014536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801453e:	683b      	ldr	r3, [r7, #0]
 8014540:	691b      	ldr	r3, [r3, #16]
 8014542:	4313      	orrs	r3, r2
 8014544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	695b      	ldr	r3, [r3, #20]
 8014550:	4313      	orrs	r3, r2
 8014552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 801455a:	683b      	ldr	r3, [r7, #0]
 801455c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801455e:	4313      	orrs	r3, r2
 8014560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	699b      	ldr	r3, [r3, #24]
 801456c:	041b      	lsls	r3, r3, #16
 801456e:	4313      	orrs	r3, r2
 8014570:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	4a16      	ldr	r2, [pc, #88]	@ (80145d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8014578:	4293      	cmp	r3, r2
 801457a:	d004      	beq.n	8014586 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	4a14      	ldr	r2, [pc, #80]	@ (80145d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8014582:	4293      	cmp	r3, r2
 8014584:	d115      	bne.n	80145b2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 801458c:	683b      	ldr	r3, [r7, #0]
 801458e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014590:	051b      	lsls	r3, r3, #20
 8014592:	4313      	orrs	r3, r2
 8014594:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	69db      	ldr	r3, [r3, #28]
 80145a0:	4313      	orrs	r3, r2
 80145a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	6a1b      	ldr	r3, [r3, #32]
 80145ae:	4313      	orrs	r3, r2
 80145b0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	68fa      	ldr	r2, [r7, #12]
 80145b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	2200      	movs	r2, #0
 80145be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80145c2:	2300      	movs	r3, #0
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3714      	adds	r7, #20
 80145c8:	46bd      	mov	sp, r7
 80145ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ce:	4770      	bx	lr
 80145d0:	40012c00 	.word	0x40012c00
 80145d4:	40013400 	.word	0x40013400

080145d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b082      	sub	sp, #8
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d101      	bne.n	80145ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80145e6:	2301      	movs	r3, #1
 80145e8:	e040      	b.n	801466c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d106      	bne.n	8014600 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	2200      	movs	r2, #0
 80145f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	f7f3 f8c8 	bl	8007790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	2224      	movs	r2, #36	@ 0x24
 8014604:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	681a      	ldr	r2, [r3, #0]
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	f022 0201 	bic.w	r2, r2, #1
 8014614:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801461a:	2b00      	cmp	r3, #0
 801461c:	d002      	beq.n	8014624 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	f000 fdb4 	bl	801518c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014624:	6878      	ldr	r0, [r7, #4]
 8014626:	f000 faf9 	bl	8014c1c <UART_SetConfig>
 801462a:	4603      	mov	r3, r0
 801462c:	2b01      	cmp	r3, #1
 801462e:	d101      	bne.n	8014634 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8014630:	2301      	movs	r3, #1
 8014632:	e01b      	b.n	801466c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	685a      	ldr	r2, [r3, #4]
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8014642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	689a      	ldr	r2, [r3, #8]
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8014652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	681a      	ldr	r2, [r3, #0]
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	f042 0201 	orr.w	r2, r2, #1
 8014662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014664:	6878      	ldr	r0, [r7, #4]
 8014666:	f000 fe33 	bl	80152d0 <UART_CheckIdleState>
 801466a:	4603      	mov	r3, r0
}
 801466c:	4618      	mov	r0, r3
 801466e:	3708      	adds	r7, #8
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}

08014674 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b082      	sub	sp, #8
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d101      	bne.n	8014686 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8014682:	2301      	movs	r3, #1
 8014684:	e048      	b.n	8014718 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801468a:	2b00      	cmp	r3, #0
 801468c:	d106      	bne.n	801469c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	2200      	movs	r2, #0
 8014692:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014696:	6878      	ldr	r0, [r7, #4]
 8014698:	f7f3 f87a 	bl	8007790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2224      	movs	r2, #36	@ 0x24
 80146a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	681a      	ldr	r2, [r3, #0]
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	f022 0201 	bic.w	r2, r2, #1
 80146b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d002      	beq.n	80146c0 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f000 fd66 	bl	801518c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80146c0:	6878      	ldr	r0, [r7, #4]
 80146c2:	f000 faab 	bl	8014c1c <UART_SetConfig>
 80146c6:	4603      	mov	r3, r0
 80146c8:	2b01      	cmp	r3, #1
 80146ca:	d101      	bne.n	80146d0 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 80146cc:	2301      	movs	r3, #1
 80146ce:	e023      	b.n	8014718 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	685a      	ldr	r2, [r3, #4]
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80146de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	689a      	ldr	r2, [r3, #8]
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80146ee:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	689a      	ldr	r2, [r3, #8]
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	f042 0208 	orr.w	r2, r2, #8
 80146fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	681a      	ldr	r2, [r3, #0]
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	f042 0201 	orr.w	r2, r2, #1
 801470e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f000 fddd 	bl	80152d0 <UART_CheckIdleState>
 8014716:	4603      	mov	r3, r0
}
 8014718:	4618      	mov	r0, r3
 801471a:	3708      	adds	r7, #8
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}

08014720 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b08a      	sub	sp, #40	@ 0x28
 8014724:	af02      	add	r7, sp, #8
 8014726:	60f8      	str	r0, [r7, #12]
 8014728:	60b9      	str	r1, [r7, #8]
 801472a:	603b      	str	r3, [r7, #0]
 801472c:	4613      	mov	r3, r2
 801472e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014734:	2b20      	cmp	r3, #32
 8014736:	d177      	bne.n	8014828 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8014738:	68bb      	ldr	r3, [r7, #8]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d002      	beq.n	8014744 <HAL_UART_Transmit+0x24>
 801473e:	88fb      	ldrh	r3, [r7, #6]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d101      	bne.n	8014748 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8014744:	2301      	movs	r3, #1
 8014746:	e070      	b.n	801482a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	2200      	movs	r2, #0
 801474c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	2221      	movs	r2, #33	@ 0x21
 8014754:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014756:	f7f6 fadb 	bl	800ad10 <HAL_GetTick>
 801475a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	88fa      	ldrh	r2, [r7, #6]
 8014760:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	88fa      	ldrh	r2, [r7, #6]
 8014768:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	689b      	ldr	r3, [r3, #8]
 8014770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014774:	d108      	bne.n	8014788 <HAL_UART_Transmit+0x68>
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	691b      	ldr	r3, [r3, #16]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d104      	bne.n	8014788 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801477e:	2300      	movs	r3, #0
 8014780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	61bb      	str	r3, [r7, #24]
 8014786:	e003      	b.n	8014790 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801478c:	2300      	movs	r3, #0
 801478e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014790:	e02f      	b.n	80147f2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	9300      	str	r3, [sp, #0]
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	2200      	movs	r2, #0
 801479a:	2180      	movs	r1, #128	@ 0x80
 801479c:	68f8      	ldr	r0, [r7, #12]
 801479e:	f000 fe3f 	bl	8015420 <UART_WaitOnFlagUntilTimeout>
 80147a2:	4603      	mov	r3, r0
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d004      	beq.n	80147b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	2220      	movs	r2, #32
 80147ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80147ae:	2303      	movs	r3, #3
 80147b0:	e03b      	b.n	801482a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80147b2:	69fb      	ldr	r3, [r7, #28]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d10b      	bne.n	80147d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80147b8:	69bb      	ldr	r3, [r7, #24]
 80147ba:	881a      	ldrh	r2, [r3, #0]
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80147c4:	b292      	uxth	r2, r2
 80147c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80147c8:	69bb      	ldr	r3, [r7, #24]
 80147ca:	3302      	adds	r3, #2
 80147cc:	61bb      	str	r3, [r7, #24]
 80147ce:	e007      	b.n	80147e0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80147d0:	69fb      	ldr	r3, [r7, #28]
 80147d2:	781a      	ldrb	r2, [r3, #0]
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80147da:	69fb      	ldr	r3, [r7, #28]
 80147dc:	3301      	adds	r3, #1
 80147de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80147e6:	b29b      	uxth	r3, r3
 80147e8:	3b01      	subs	r3, #1
 80147ea:	b29a      	uxth	r2, r3
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80147f8:	b29b      	uxth	r3, r3
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d1c9      	bne.n	8014792 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	9300      	str	r3, [sp, #0]
 8014802:	697b      	ldr	r3, [r7, #20]
 8014804:	2200      	movs	r2, #0
 8014806:	2140      	movs	r1, #64	@ 0x40
 8014808:	68f8      	ldr	r0, [r7, #12]
 801480a:	f000 fe09 	bl	8015420 <UART_WaitOnFlagUntilTimeout>
 801480e:	4603      	mov	r3, r0
 8014810:	2b00      	cmp	r3, #0
 8014812:	d004      	beq.n	801481e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	2220      	movs	r2, #32
 8014818:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801481a:	2303      	movs	r3, #3
 801481c:	e005      	b.n	801482a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	2220      	movs	r2, #32
 8014822:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8014824:	2300      	movs	r3, #0
 8014826:	e000      	b.n	801482a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8014828:	2302      	movs	r3, #2
  }
}
 801482a:	4618      	mov	r0, r3
 801482c:	3720      	adds	r7, #32
 801482e:	46bd      	mov	sp, r7
 8014830:	bd80      	pop	{r7, pc}

08014832 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014832:	b580      	push	{r7, lr}
 8014834:	b08a      	sub	sp, #40	@ 0x28
 8014836:	af02      	add	r7, sp, #8
 8014838:	60f8      	str	r0, [r7, #12]
 801483a:	60b9      	str	r1, [r7, #8]
 801483c:	603b      	str	r3, [r7, #0]
 801483e:	4613      	mov	r3, r2
 8014840:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014848:	2b20      	cmp	r3, #32
 801484a:	f040 80b6 	bne.w	80149ba <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d002      	beq.n	801485a <HAL_UART_Receive+0x28>
 8014854:	88fb      	ldrh	r3, [r7, #6]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d101      	bne.n	801485e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801485a:	2301      	movs	r3, #1
 801485c:	e0ae      	b.n	80149bc <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	2200      	movs	r2, #0
 8014862:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	2222      	movs	r2, #34	@ 0x22
 801486a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	2200      	movs	r2, #0
 8014872:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014874:	f7f6 fa4c 	bl	800ad10 <HAL_GetTick>
 8014878:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	88fa      	ldrh	r2, [r7, #6]
 801487e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	88fa      	ldrh	r2, [r7, #6]
 8014886:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	689b      	ldr	r3, [r3, #8]
 801488e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014892:	d10e      	bne.n	80148b2 <HAL_UART_Receive+0x80>
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	691b      	ldr	r3, [r3, #16]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d105      	bne.n	80148a8 <HAL_UART_Receive+0x76>
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80148a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80148a6:	e02d      	b.n	8014904 <HAL_UART_Receive+0xd2>
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	22ff      	movs	r2, #255	@ 0xff
 80148ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80148b0:	e028      	b.n	8014904 <HAL_UART_Receive+0xd2>
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	689b      	ldr	r3, [r3, #8]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d10d      	bne.n	80148d6 <HAL_UART_Receive+0xa4>
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	691b      	ldr	r3, [r3, #16]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d104      	bne.n	80148cc <HAL_UART_Receive+0x9a>
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	22ff      	movs	r2, #255	@ 0xff
 80148c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80148ca:	e01b      	b.n	8014904 <HAL_UART_Receive+0xd2>
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	227f      	movs	r2, #127	@ 0x7f
 80148d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80148d4:	e016      	b.n	8014904 <HAL_UART_Receive+0xd2>
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	689b      	ldr	r3, [r3, #8]
 80148da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80148de:	d10d      	bne.n	80148fc <HAL_UART_Receive+0xca>
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	691b      	ldr	r3, [r3, #16]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d104      	bne.n	80148f2 <HAL_UART_Receive+0xc0>
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	227f      	movs	r2, #127	@ 0x7f
 80148ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80148f0:	e008      	b.n	8014904 <HAL_UART_Receive+0xd2>
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	223f      	movs	r2, #63	@ 0x3f
 80148f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80148fa:	e003      	b.n	8014904 <HAL_UART_Receive+0xd2>
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	2200      	movs	r2, #0
 8014900:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801490a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	689b      	ldr	r3, [r3, #8]
 8014910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014914:	d108      	bne.n	8014928 <HAL_UART_Receive+0xf6>
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	691b      	ldr	r3, [r3, #16]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d104      	bne.n	8014928 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 801491e:	2300      	movs	r3, #0
 8014920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	61bb      	str	r3, [r7, #24]
 8014926:	e003      	b.n	8014930 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801492c:	2300      	movs	r3, #0
 801492e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014930:	e037      	b.n	80149a2 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	9300      	str	r3, [sp, #0]
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	2200      	movs	r2, #0
 801493a:	2120      	movs	r1, #32
 801493c:	68f8      	ldr	r0, [r7, #12]
 801493e:	f000 fd6f 	bl	8015420 <UART_WaitOnFlagUntilTimeout>
 8014942:	4603      	mov	r3, r0
 8014944:	2b00      	cmp	r3, #0
 8014946:	d005      	beq.n	8014954 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	2220      	movs	r2, #32
 801494c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8014950:	2303      	movs	r3, #3
 8014952:	e033      	b.n	80149bc <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8014954:	69fb      	ldr	r3, [r7, #28]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d10c      	bne.n	8014974 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014960:	b29a      	uxth	r2, r3
 8014962:	8a7b      	ldrh	r3, [r7, #18]
 8014964:	4013      	ands	r3, r2
 8014966:	b29a      	uxth	r2, r3
 8014968:	69bb      	ldr	r3, [r7, #24]
 801496a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801496c:	69bb      	ldr	r3, [r7, #24]
 801496e:	3302      	adds	r3, #2
 8014970:	61bb      	str	r3, [r7, #24]
 8014972:	e00d      	b.n	8014990 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801497a:	b29b      	uxth	r3, r3
 801497c:	b2da      	uxtb	r2, r3
 801497e:	8a7b      	ldrh	r3, [r7, #18]
 8014980:	b2db      	uxtb	r3, r3
 8014982:	4013      	ands	r3, r2
 8014984:	b2da      	uxtb	r2, r3
 8014986:	69fb      	ldr	r3, [r7, #28]
 8014988:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801498a:	69fb      	ldr	r3, [r7, #28]
 801498c:	3301      	adds	r3, #1
 801498e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8014996:	b29b      	uxth	r3, r3
 8014998:	3b01      	subs	r3, #1
 801499a:	b29a      	uxth	r2, r3
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80149a8:	b29b      	uxth	r3, r3
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d1c1      	bne.n	8014932 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	2220      	movs	r2, #32
 80149b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80149b6:	2300      	movs	r3, #0
 80149b8:	e000      	b.n	80149bc <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80149ba:	2302      	movs	r3, #2
  }
}
 80149bc:	4618      	mov	r0, r3
 80149be:	3720      	adds	r7, #32
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}

080149c4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b08a      	sub	sp, #40	@ 0x28
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	60f8      	str	r0, [r7, #12]
 80149cc:	60b9      	str	r1, [r7, #8]
 80149ce:	4613      	mov	r3, r2
 80149d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80149d6:	2b20      	cmp	r3, #32
 80149d8:	d165      	bne.n	8014aa6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d002      	beq.n	80149e6 <HAL_UART_Transmit_DMA+0x22>
 80149e0:	88fb      	ldrh	r3, [r7, #6]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d101      	bne.n	80149ea <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80149e6:	2301      	movs	r3, #1
 80149e8:	e05e      	b.n	8014aa8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	68ba      	ldr	r2, [r7, #8]
 80149ee:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	88fa      	ldrh	r2, [r7, #6]
 80149f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	88fa      	ldrh	r2, [r7, #6]
 80149fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	2200      	movs	r2, #0
 8014a04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	2221      	movs	r2, #33	@ 0x21
 8014a0c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d027      	beq.n	8014a66 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a1a:	4a25      	ldr	r2, [pc, #148]	@ (8014ab0 <HAL_UART_Transmit_DMA+0xec>)
 8014a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a22:	4a24      	ldr	r2, [pc, #144]	@ (8014ab4 <HAL_UART_Transmit_DMA+0xf0>)
 8014a24:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a2a:	4a23      	ldr	r2, [pc, #140]	@ (8014ab8 <HAL_UART_Transmit_DMA+0xf4>)
 8014a2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a32:	2200      	movs	r2, #0
 8014a34:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a3e:	4619      	mov	r1, r3
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	3328      	adds	r3, #40	@ 0x28
 8014a46:	461a      	mov	r2, r3
 8014a48:	88fb      	ldrh	r3, [r7, #6]
 8014a4a:	f7f8 f947 	bl	800ccdc <HAL_DMA_Start_IT>
 8014a4e:	4603      	mov	r3, r0
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d008      	beq.n	8014a66 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	2210      	movs	r2, #16
 8014a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	2220      	movs	r2, #32
 8014a60:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8014a62:	2301      	movs	r3, #1
 8014a64:	e020      	b.n	8014aa8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	2240      	movs	r2, #64	@ 0x40
 8014a6c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	3308      	adds	r3, #8
 8014a74:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	e853 3f00 	ldrex	r3, [r3]
 8014a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8014a7e:	693b      	ldr	r3, [r7, #16]
 8014a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	3308      	adds	r3, #8
 8014a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014a8e:	623a      	str	r2, [r7, #32]
 8014a90:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a92:	69f9      	ldr	r1, [r7, #28]
 8014a94:	6a3a      	ldr	r2, [r7, #32]
 8014a96:	e841 2300 	strex	r3, r2, [r1]
 8014a9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8014a9c:	69bb      	ldr	r3, [r7, #24]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d1e5      	bne.n	8014a6e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	e000      	b.n	8014aa8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8014aa6:	2302      	movs	r3, #2
  }
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3728      	adds	r7, #40	@ 0x28
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}
 8014ab0:	08015751 	.word	0x08015751
 8014ab4:	080157eb 	.word	0x080157eb
 8014ab8:	08015971 	.word	0x08015971

08014abc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b090      	sub	sp, #64	@ 0x40
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014ad0:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	689b      	ldr	r3, [r3, #8]
 8014ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014adc:	2b80      	cmp	r3, #128	@ 0x80
 8014ade:	d139      	bne.n	8014b54 <HAL_UART_DMAStop+0x98>
 8014ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014ae2:	2b21      	cmp	r3, #33	@ 0x21
 8014ae4:	d136      	bne.n	8014b54 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	3308      	adds	r3, #8
 8014aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014aee:	6a3b      	ldr	r3, [r7, #32]
 8014af0:	e853 3f00 	ldrex	r3, [r3]
 8014af4:	61fb      	str	r3, [r7, #28]
   return(result);
 8014af6:	69fb      	ldr	r3, [r7, #28]
 8014af8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	3308      	adds	r3, #8
 8014b04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014b06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8014b08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014b0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014b0e:	e841 2300 	strex	r3, r2, [r1]
 8014b12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8014b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d1e5      	bne.n	8014ae6 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d015      	beq.n	8014b4e <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b26:	4618      	mov	r0, r3
 8014b28:	f7f8 f938 	bl	800cd9c <HAL_DMA_Abort>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d00d      	beq.n	8014b4e <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b36:	4618      	mov	r0, r3
 8014b38:	f7f8 fa1d 	bl	800cf76 <HAL_DMA_GetError>
 8014b3c:	4603      	mov	r3, r0
 8014b3e:	2b20      	cmp	r3, #32
 8014b40:	d105      	bne.n	8014b4e <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	2210      	movs	r2, #16
 8014b46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014b4a:	2303      	movs	r3, #3
 8014b4c:	e044      	b.n	8014bd8 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8014b4e:	6878      	ldr	r0, [r7, #4]
 8014b50:	f000 fd74 	bl	801563c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	689b      	ldr	r3, [r3, #8]
 8014b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014b5e:	2b40      	cmp	r3, #64	@ 0x40
 8014b60:	d139      	bne.n	8014bd6 <HAL_UART_DMAStop+0x11a>
 8014b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b64:	2b22      	cmp	r3, #34	@ 0x22
 8014b66:	d136      	bne.n	8014bd6 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	3308      	adds	r3, #8
 8014b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	e853 3f00 	ldrex	r3, [r3]
 8014b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8014b78:	68bb      	ldr	r3, [r7, #8]
 8014b7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014b7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	3308      	adds	r3, #8
 8014b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014b88:	61ba      	str	r2, [r7, #24]
 8014b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b8c:	6979      	ldr	r1, [r7, #20]
 8014b8e:	69ba      	ldr	r2, [r7, #24]
 8014b90:	e841 2300 	strex	r3, r2, [r1]
 8014b94:	613b      	str	r3, [r7, #16]
   return(result);
 8014b96:	693b      	ldr	r3, [r7, #16]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d1e5      	bne.n	8014b68 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d015      	beq.n	8014bd0 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f7f8 f8f7 	bl	800cd9c <HAL_DMA_Abort>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d00d      	beq.n	8014bd0 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f7f8 f9dc 	bl	800cf76 <HAL_DMA_GetError>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	2b20      	cmp	r3, #32
 8014bc2:	d105      	bne.n	8014bd0 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2210      	movs	r2, #16
 8014bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8014bcc:	2303      	movs	r3, #3
 8014bce:	e003      	b.n	8014bd8 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f000 fd59 	bl	8015688 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8014bd6:	2300      	movs	r3, #0
}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	3740      	adds	r7, #64	@ 0x40
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}

08014be0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014be0:	b480      	push	{r7}
 8014be2:	b083      	sub	sp, #12
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8014be8:	bf00      	nop
 8014bea:	370c      	adds	r7, #12
 8014bec:	46bd      	mov	sp, r7
 8014bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf2:	4770      	bx	lr

08014bf4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014bf4:	b480      	push	{r7}
 8014bf6:	b083      	sub	sp, #12
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8014bfc:	bf00      	nop
 8014bfe:	370c      	adds	r7, #12
 8014c00:	46bd      	mov	sp, r7
 8014c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c06:	4770      	bx	lr

08014c08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014c08:	b480      	push	{r7}
 8014c0a:	b083      	sub	sp, #12
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014c10:	bf00      	nop
 8014c12:	370c      	adds	r7, #12
 8014c14:	46bd      	mov	sp, r7
 8014c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1a:	4770      	bx	lr

08014c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014c20:	b08a      	sub	sp, #40	@ 0x28
 8014c22:	af00      	add	r7, sp, #0
 8014c24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014c26:	2300      	movs	r3, #0
 8014c28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	689a      	ldr	r2, [r3, #8]
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	691b      	ldr	r3, [r3, #16]
 8014c34:	431a      	orrs	r2, r3
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	695b      	ldr	r3, [r3, #20]
 8014c3a:	431a      	orrs	r2, r3
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	69db      	ldr	r3, [r3, #28]
 8014c40:	4313      	orrs	r3, r2
 8014c42:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	681a      	ldr	r2, [r3, #0]
 8014c4a:	4ba4      	ldr	r3, [pc, #656]	@ (8014edc <UART_SetConfig+0x2c0>)
 8014c4c:	4013      	ands	r3, r2
 8014c4e:	68fa      	ldr	r2, [r7, #12]
 8014c50:	6812      	ldr	r2, [r2, #0]
 8014c52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014c54:	430b      	orrs	r3, r1
 8014c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	685b      	ldr	r3, [r3, #4]
 8014c5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	68da      	ldr	r2, [r3, #12]
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	430a      	orrs	r2, r1
 8014c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	699b      	ldr	r3, [r3, #24]
 8014c72:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	4a99      	ldr	r2, [pc, #612]	@ (8014ee0 <UART_SetConfig+0x2c4>)
 8014c7a:	4293      	cmp	r3, r2
 8014c7c:	d004      	beq.n	8014c88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	6a1b      	ldr	r3, [r3, #32]
 8014c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014c84:	4313      	orrs	r3, r2
 8014c86:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	689b      	ldr	r3, [r3, #8]
 8014c8e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014c98:	430a      	orrs	r2, r1
 8014c9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	4a90      	ldr	r2, [pc, #576]	@ (8014ee4 <UART_SetConfig+0x2c8>)
 8014ca2:	4293      	cmp	r3, r2
 8014ca4:	d126      	bne.n	8014cf4 <UART_SetConfig+0xd8>
 8014ca6:	4b90      	ldr	r3, [pc, #576]	@ (8014ee8 <UART_SetConfig+0x2cc>)
 8014ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014cac:	f003 0303 	and.w	r3, r3, #3
 8014cb0:	2b03      	cmp	r3, #3
 8014cb2:	d81b      	bhi.n	8014cec <UART_SetConfig+0xd0>
 8014cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8014cbc <UART_SetConfig+0xa0>)
 8014cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cba:	bf00      	nop
 8014cbc:	08014ccd 	.word	0x08014ccd
 8014cc0:	08014cdd 	.word	0x08014cdd
 8014cc4:	08014cd5 	.word	0x08014cd5
 8014cc8:	08014ce5 	.word	0x08014ce5
 8014ccc:	2301      	movs	r3, #1
 8014cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014cd2:	e116      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014cd4:	2302      	movs	r3, #2
 8014cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014cda:	e112      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014cdc:	2304      	movs	r3, #4
 8014cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014ce2:	e10e      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014ce4:	2308      	movs	r3, #8
 8014ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014cea:	e10a      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014cec:	2310      	movs	r3, #16
 8014cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014cf2:	e106      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	4a7c      	ldr	r2, [pc, #496]	@ (8014eec <UART_SetConfig+0x2d0>)
 8014cfa:	4293      	cmp	r3, r2
 8014cfc:	d138      	bne.n	8014d70 <UART_SetConfig+0x154>
 8014cfe:	4b7a      	ldr	r3, [pc, #488]	@ (8014ee8 <UART_SetConfig+0x2cc>)
 8014d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014d04:	f003 030c 	and.w	r3, r3, #12
 8014d08:	2b0c      	cmp	r3, #12
 8014d0a:	d82d      	bhi.n	8014d68 <UART_SetConfig+0x14c>
 8014d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8014d14 <UART_SetConfig+0xf8>)
 8014d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d12:	bf00      	nop
 8014d14:	08014d49 	.word	0x08014d49
 8014d18:	08014d69 	.word	0x08014d69
 8014d1c:	08014d69 	.word	0x08014d69
 8014d20:	08014d69 	.word	0x08014d69
 8014d24:	08014d59 	.word	0x08014d59
 8014d28:	08014d69 	.word	0x08014d69
 8014d2c:	08014d69 	.word	0x08014d69
 8014d30:	08014d69 	.word	0x08014d69
 8014d34:	08014d51 	.word	0x08014d51
 8014d38:	08014d69 	.word	0x08014d69
 8014d3c:	08014d69 	.word	0x08014d69
 8014d40:	08014d69 	.word	0x08014d69
 8014d44:	08014d61 	.word	0x08014d61
 8014d48:	2300      	movs	r3, #0
 8014d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d4e:	e0d8      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014d50:	2302      	movs	r3, #2
 8014d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d56:	e0d4      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014d58:	2304      	movs	r3, #4
 8014d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d5e:	e0d0      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014d60:	2308      	movs	r3, #8
 8014d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d66:	e0cc      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014d68:	2310      	movs	r3, #16
 8014d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014d6e:	e0c8      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	4a5e      	ldr	r2, [pc, #376]	@ (8014ef0 <UART_SetConfig+0x2d4>)
 8014d76:	4293      	cmp	r3, r2
 8014d78:	d125      	bne.n	8014dc6 <UART_SetConfig+0x1aa>
 8014d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8014ee8 <UART_SetConfig+0x2cc>)
 8014d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014d80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8014d84:	2b30      	cmp	r3, #48	@ 0x30
 8014d86:	d016      	beq.n	8014db6 <UART_SetConfig+0x19a>
 8014d88:	2b30      	cmp	r3, #48	@ 0x30
 8014d8a:	d818      	bhi.n	8014dbe <UART_SetConfig+0x1a2>
 8014d8c:	2b20      	cmp	r3, #32
 8014d8e:	d00a      	beq.n	8014da6 <UART_SetConfig+0x18a>
 8014d90:	2b20      	cmp	r3, #32
 8014d92:	d814      	bhi.n	8014dbe <UART_SetConfig+0x1a2>
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d002      	beq.n	8014d9e <UART_SetConfig+0x182>
 8014d98:	2b10      	cmp	r3, #16
 8014d9a:	d008      	beq.n	8014dae <UART_SetConfig+0x192>
 8014d9c:	e00f      	b.n	8014dbe <UART_SetConfig+0x1a2>
 8014d9e:	2300      	movs	r3, #0
 8014da0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014da4:	e0ad      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014da6:	2302      	movs	r3, #2
 8014da8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014dac:	e0a9      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014dae:	2304      	movs	r3, #4
 8014db0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014db4:	e0a5      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014db6:	2308      	movs	r3, #8
 8014db8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014dbc:	e0a1      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014dbe:	2310      	movs	r3, #16
 8014dc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014dc4:	e09d      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	4a4a      	ldr	r2, [pc, #296]	@ (8014ef4 <UART_SetConfig+0x2d8>)
 8014dcc:	4293      	cmp	r3, r2
 8014dce:	d125      	bne.n	8014e1c <UART_SetConfig+0x200>
 8014dd0:	4b45      	ldr	r3, [pc, #276]	@ (8014ee8 <UART_SetConfig+0x2cc>)
 8014dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014dd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014dda:	2bc0      	cmp	r3, #192	@ 0xc0
 8014ddc:	d016      	beq.n	8014e0c <UART_SetConfig+0x1f0>
 8014dde:	2bc0      	cmp	r3, #192	@ 0xc0
 8014de0:	d818      	bhi.n	8014e14 <UART_SetConfig+0x1f8>
 8014de2:	2b80      	cmp	r3, #128	@ 0x80
 8014de4:	d00a      	beq.n	8014dfc <UART_SetConfig+0x1e0>
 8014de6:	2b80      	cmp	r3, #128	@ 0x80
 8014de8:	d814      	bhi.n	8014e14 <UART_SetConfig+0x1f8>
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d002      	beq.n	8014df4 <UART_SetConfig+0x1d8>
 8014dee:	2b40      	cmp	r3, #64	@ 0x40
 8014df0:	d008      	beq.n	8014e04 <UART_SetConfig+0x1e8>
 8014df2:	e00f      	b.n	8014e14 <UART_SetConfig+0x1f8>
 8014df4:	2300      	movs	r3, #0
 8014df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014dfa:	e082      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014dfc:	2302      	movs	r3, #2
 8014dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e02:	e07e      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014e04:	2304      	movs	r3, #4
 8014e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e0a:	e07a      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014e0c:	2308      	movs	r3, #8
 8014e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e12:	e076      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014e14:	2310      	movs	r3, #16
 8014e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e1a:	e072      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	4a35      	ldr	r2, [pc, #212]	@ (8014ef8 <UART_SetConfig+0x2dc>)
 8014e22:	4293      	cmp	r3, r2
 8014e24:	d12a      	bne.n	8014e7c <UART_SetConfig+0x260>
 8014e26:	4b30      	ldr	r3, [pc, #192]	@ (8014ee8 <UART_SetConfig+0x2cc>)
 8014e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014e2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8014e30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014e34:	d01a      	beq.n	8014e6c <UART_SetConfig+0x250>
 8014e36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014e3a:	d81b      	bhi.n	8014e74 <UART_SetConfig+0x258>
 8014e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e40:	d00c      	beq.n	8014e5c <UART_SetConfig+0x240>
 8014e42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e46:	d815      	bhi.n	8014e74 <UART_SetConfig+0x258>
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d003      	beq.n	8014e54 <UART_SetConfig+0x238>
 8014e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014e50:	d008      	beq.n	8014e64 <UART_SetConfig+0x248>
 8014e52:	e00f      	b.n	8014e74 <UART_SetConfig+0x258>
 8014e54:	2300      	movs	r3, #0
 8014e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e5a:	e052      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014e5c:	2302      	movs	r3, #2
 8014e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e62:	e04e      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014e64:	2304      	movs	r3, #4
 8014e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e6a:	e04a      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014e6c:	2308      	movs	r3, #8
 8014e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e72:	e046      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014e74:	2310      	movs	r3, #16
 8014e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014e7a:	e042      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	4a17      	ldr	r2, [pc, #92]	@ (8014ee0 <UART_SetConfig+0x2c4>)
 8014e82:	4293      	cmp	r3, r2
 8014e84:	d13a      	bne.n	8014efc <UART_SetConfig+0x2e0>
 8014e86:	4b18      	ldr	r3, [pc, #96]	@ (8014ee8 <UART_SetConfig+0x2cc>)
 8014e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014e8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8014e90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014e94:	d01a      	beq.n	8014ecc <UART_SetConfig+0x2b0>
 8014e96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014e9a:	d81b      	bhi.n	8014ed4 <UART_SetConfig+0x2b8>
 8014e9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014ea0:	d00c      	beq.n	8014ebc <UART_SetConfig+0x2a0>
 8014ea2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014ea6:	d815      	bhi.n	8014ed4 <UART_SetConfig+0x2b8>
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d003      	beq.n	8014eb4 <UART_SetConfig+0x298>
 8014eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014eb0:	d008      	beq.n	8014ec4 <UART_SetConfig+0x2a8>
 8014eb2:	e00f      	b.n	8014ed4 <UART_SetConfig+0x2b8>
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014eba:	e022      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014ebc:	2302      	movs	r3, #2
 8014ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014ec2:	e01e      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014ec4:	2304      	movs	r3, #4
 8014ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014eca:	e01a      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014ecc:	2308      	movs	r3, #8
 8014ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014ed2:	e016      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014ed4:	2310      	movs	r3, #16
 8014ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014eda:	e012      	b.n	8014f02 <UART_SetConfig+0x2e6>
 8014edc:	efff69f3 	.word	0xefff69f3
 8014ee0:	40008000 	.word	0x40008000
 8014ee4:	40013800 	.word	0x40013800
 8014ee8:	40021000 	.word	0x40021000
 8014eec:	40004400 	.word	0x40004400
 8014ef0:	40004800 	.word	0x40004800
 8014ef4:	40004c00 	.word	0x40004c00
 8014ef8:	40005000 	.word	0x40005000
 8014efc:	2310      	movs	r3, #16
 8014efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	4a9f      	ldr	r2, [pc, #636]	@ (8015184 <UART_SetConfig+0x568>)
 8014f08:	4293      	cmp	r3, r2
 8014f0a:	d17a      	bne.n	8015002 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014f10:	2b08      	cmp	r3, #8
 8014f12:	d824      	bhi.n	8014f5e <UART_SetConfig+0x342>
 8014f14:	a201      	add	r2, pc, #4	@ (adr r2, 8014f1c <UART_SetConfig+0x300>)
 8014f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f1a:	bf00      	nop
 8014f1c:	08014f41 	.word	0x08014f41
 8014f20:	08014f5f 	.word	0x08014f5f
 8014f24:	08014f49 	.word	0x08014f49
 8014f28:	08014f5f 	.word	0x08014f5f
 8014f2c:	08014f4f 	.word	0x08014f4f
 8014f30:	08014f5f 	.word	0x08014f5f
 8014f34:	08014f5f 	.word	0x08014f5f
 8014f38:	08014f5f 	.word	0x08014f5f
 8014f3c:	08014f57 	.word	0x08014f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014f40:	f7fb f8fe 	bl	8010140 <HAL_RCC_GetPCLK1Freq>
 8014f44:	61f8      	str	r0, [r7, #28]
        break;
 8014f46:	e010      	b.n	8014f6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8014f48:	4b8f      	ldr	r3, [pc, #572]	@ (8015188 <UART_SetConfig+0x56c>)
 8014f4a:	61fb      	str	r3, [r7, #28]
        break;
 8014f4c:	e00d      	b.n	8014f6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014f4e:	f7fb f85f 	bl	8010010 <HAL_RCC_GetSysClockFreq>
 8014f52:	61f8      	str	r0, [r7, #28]
        break;
 8014f54:	e009      	b.n	8014f6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014f5a:	61fb      	str	r3, [r7, #28]
        break;
 8014f5c:	e005      	b.n	8014f6a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8014f62:	2301      	movs	r3, #1
 8014f64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8014f68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014f6a:	69fb      	ldr	r3, [r7, #28]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	f000 80fb 	beq.w	8015168 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	685a      	ldr	r2, [r3, #4]
 8014f76:	4613      	mov	r3, r2
 8014f78:	005b      	lsls	r3, r3, #1
 8014f7a:	4413      	add	r3, r2
 8014f7c:	69fa      	ldr	r2, [r7, #28]
 8014f7e:	429a      	cmp	r2, r3
 8014f80:	d305      	bcc.n	8014f8e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	685b      	ldr	r3, [r3, #4]
 8014f86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014f88:	69fa      	ldr	r2, [r7, #28]
 8014f8a:	429a      	cmp	r2, r3
 8014f8c:	d903      	bls.n	8014f96 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8014f8e:	2301      	movs	r3, #1
 8014f90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014f94:	e0e8      	b.n	8015168 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8014f96:	69fb      	ldr	r3, [r7, #28]
 8014f98:	2200      	movs	r2, #0
 8014f9a:	461c      	mov	r4, r3
 8014f9c:	4615      	mov	r5, r2
 8014f9e:	f04f 0200 	mov.w	r2, #0
 8014fa2:	f04f 0300 	mov.w	r3, #0
 8014fa6:	022b      	lsls	r3, r5, #8
 8014fa8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8014fac:	0222      	lsls	r2, r4, #8
 8014fae:	68f9      	ldr	r1, [r7, #12]
 8014fb0:	6849      	ldr	r1, [r1, #4]
 8014fb2:	0849      	lsrs	r1, r1, #1
 8014fb4:	2000      	movs	r0, #0
 8014fb6:	4688      	mov	r8, r1
 8014fb8:	4681      	mov	r9, r0
 8014fba:	eb12 0a08 	adds.w	sl, r2, r8
 8014fbe:	eb43 0b09 	adc.w	fp, r3, r9
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	685b      	ldr	r3, [r3, #4]
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	603b      	str	r3, [r7, #0]
 8014fca:	607a      	str	r2, [r7, #4]
 8014fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014fd0:	4650      	mov	r0, sl
 8014fd2:	4659      	mov	r1, fp
 8014fd4:	f7eb fd52 	bl	8000a7c <__aeabi_uldivmod>
 8014fd8:	4602      	mov	r2, r0
 8014fda:	460b      	mov	r3, r1
 8014fdc:	4613      	mov	r3, r2
 8014fde:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014fe0:	69bb      	ldr	r3, [r7, #24]
 8014fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014fe6:	d308      	bcc.n	8014ffa <UART_SetConfig+0x3de>
 8014fe8:	69bb      	ldr	r3, [r7, #24]
 8014fea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014fee:	d204      	bcs.n	8014ffa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	69ba      	ldr	r2, [r7, #24]
 8014ff6:	60da      	str	r2, [r3, #12]
 8014ff8:	e0b6      	b.n	8015168 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015000:	e0b2      	b.n	8015168 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	69db      	ldr	r3, [r3, #28]
 8015006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801500a:	d15e      	bne.n	80150ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 801500c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015010:	2b08      	cmp	r3, #8
 8015012:	d828      	bhi.n	8015066 <UART_SetConfig+0x44a>
 8015014:	a201      	add	r2, pc, #4	@ (adr r2, 801501c <UART_SetConfig+0x400>)
 8015016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801501a:	bf00      	nop
 801501c:	08015041 	.word	0x08015041
 8015020:	08015049 	.word	0x08015049
 8015024:	08015051 	.word	0x08015051
 8015028:	08015067 	.word	0x08015067
 801502c:	08015057 	.word	0x08015057
 8015030:	08015067 	.word	0x08015067
 8015034:	08015067 	.word	0x08015067
 8015038:	08015067 	.word	0x08015067
 801503c:	0801505f 	.word	0x0801505f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015040:	f7fb f87e 	bl	8010140 <HAL_RCC_GetPCLK1Freq>
 8015044:	61f8      	str	r0, [r7, #28]
        break;
 8015046:	e014      	b.n	8015072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015048:	f7fb f890 	bl	801016c <HAL_RCC_GetPCLK2Freq>
 801504c:	61f8      	str	r0, [r7, #28]
        break;
 801504e:	e010      	b.n	8015072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8015050:	4b4d      	ldr	r3, [pc, #308]	@ (8015188 <UART_SetConfig+0x56c>)
 8015052:	61fb      	str	r3, [r7, #28]
        break;
 8015054:	e00d      	b.n	8015072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015056:	f7fa ffdb 	bl	8010010 <HAL_RCC_GetSysClockFreq>
 801505a:	61f8      	str	r0, [r7, #28]
        break;
 801505c:	e009      	b.n	8015072 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801505e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015062:	61fb      	str	r3, [r7, #28]
        break;
 8015064:	e005      	b.n	8015072 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8015066:	2300      	movs	r3, #0
 8015068:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801506a:	2301      	movs	r3, #1
 801506c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8015070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015072:	69fb      	ldr	r3, [r7, #28]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d077      	beq.n	8015168 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8015078:	69fb      	ldr	r3, [r7, #28]
 801507a:	005a      	lsls	r2, r3, #1
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	685b      	ldr	r3, [r3, #4]
 8015080:	085b      	lsrs	r3, r3, #1
 8015082:	441a      	add	r2, r3
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	685b      	ldr	r3, [r3, #4]
 8015088:	fbb2 f3f3 	udiv	r3, r2, r3
 801508c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801508e:	69bb      	ldr	r3, [r7, #24]
 8015090:	2b0f      	cmp	r3, #15
 8015092:	d916      	bls.n	80150c2 <UART_SetConfig+0x4a6>
 8015094:	69bb      	ldr	r3, [r7, #24]
 8015096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801509a:	d212      	bcs.n	80150c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801509c:	69bb      	ldr	r3, [r7, #24]
 801509e:	b29b      	uxth	r3, r3
 80150a0:	f023 030f 	bic.w	r3, r3, #15
 80150a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80150a6:	69bb      	ldr	r3, [r7, #24]
 80150a8:	085b      	lsrs	r3, r3, #1
 80150aa:	b29b      	uxth	r3, r3
 80150ac:	f003 0307 	and.w	r3, r3, #7
 80150b0:	b29a      	uxth	r2, r3
 80150b2:	8afb      	ldrh	r3, [r7, #22]
 80150b4:	4313      	orrs	r3, r2
 80150b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	8afa      	ldrh	r2, [r7, #22]
 80150be:	60da      	str	r2, [r3, #12]
 80150c0:	e052      	b.n	8015168 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80150c2:	2301      	movs	r3, #1
 80150c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80150c8:	e04e      	b.n	8015168 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80150ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80150ce:	2b08      	cmp	r3, #8
 80150d0:	d827      	bhi.n	8015122 <UART_SetConfig+0x506>
 80150d2:	a201      	add	r2, pc, #4	@ (adr r2, 80150d8 <UART_SetConfig+0x4bc>)
 80150d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150d8:	080150fd 	.word	0x080150fd
 80150dc:	08015105 	.word	0x08015105
 80150e0:	0801510d 	.word	0x0801510d
 80150e4:	08015123 	.word	0x08015123
 80150e8:	08015113 	.word	0x08015113
 80150ec:	08015123 	.word	0x08015123
 80150f0:	08015123 	.word	0x08015123
 80150f4:	08015123 	.word	0x08015123
 80150f8:	0801511b 	.word	0x0801511b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80150fc:	f7fb f820 	bl	8010140 <HAL_RCC_GetPCLK1Freq>
 8015100:	61f8      	str	r0, [r7, #28]
        break;
 8015102:	e014      	b.n	801512e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015104:	f7fb f832 	bl	801016c <HAL_RCC_GetPCLK2Freq>
 8015108:	61f8      	str	r0, [r7, #28]
        break;
 801510a:	e010      	b.n	801512e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801510c:	4b1e      	ldr	r3, [pc, #120]	@ (8015188 <UART_SetConfig+0x56c>)
 801510e:	61fb      	str	r3, [r7, #28]
        break;
 8015110:	e00d      	b.n	801512e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015112:	f7fa ff7d 	bl	8010010 <HAL_RCC_GetSysClockFreq>
 8015116:	61f8      	str	r0, [r7, #28]
        break;
 8015118:	e009      	b.n	801512e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801511a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801511e:	61fb      	str	r3, [r7, #28]
        break;
 8015120:	e005      	b.n	801512e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8015122:	2300      	movs	r3, #0
 8015124:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8015126:	2301      	movs	r3, #1
 8015128:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801512c:	bf00      	nop
    }

    if (pclk != 0U)
 801512e:	69fb      	ldr	r3, [r7, #28]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d019      	beq.n	8015168 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	685b      	ldr	r3, [r3, #4]
 8015138:	085a      	lsrs	r2, r3, #1
 801513a:	69fb      	ldr	r3, [r7, #28]
 801513c:	441a      	add	r2, r3
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	685b      	ldr	r3, [r3, #4]
 8015142:	fbb2 f3f3 	udiv	r3, r2, r3
 8015146:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015148:	69bb      	ldr	r3, [r7, #24]
 801514a:	2b0f      	cmp	r3, #15
 801514c:	d909      	bls.n	8015162 <UART_SetConfig+0x546>
 801514e:	69bb      	ldr	r3, [r7, #24]
 8015150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015154:	d205      	bcs.n	8015162 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015156:	69bb      	ldr	r3, [r7, #24]
 8015158:	b29a      	uxth	r2, r3
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	60da      	str	r2, [r3, #12]
 8015160:	e002      	b.n	8015168 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8015162:	2301      	movs	r3, #1
 8015164:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	2200      	movs	r2, #0
 801516c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	2200      	movs	r2, #0
 8015172:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8015174:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8015178:	4618      	mov	r0, r3
 801517a:	3728      	adds	r7, #40	@ 0x28
 801517c:	46bd      	mov	sp, r7
 801517e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015182:	bf00      	nop
 8015184:	40008000 	.word	0x40008000
 8015188:	00f42400 	.word	0x00f42400

0801518c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801518c:	b480      	push	{r7}
 801518e:	b083      	sub	sp, #12
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015198:	f003 0308 	and.w	r3, r3, #8
 801519c:	2b00      	cmp	r3, #0
 801519e:	d00a      	beq.n	80151b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	685b      	ldr	r3, [r3, #4]
 80151a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	430a      	orrs	r2, r1
 80151b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151ba:	f003 0301 	and.w	r3, r3, #1
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d00a      	beq.n	80151d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	685b      	ldr	r3, [r3, #4]
 80151c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	430a      	orrs	r2, r1
 80151d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151dc:	f003 0302 	and.w	r3, r3, #2
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d00a      	beq.n	80151fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	685b      	ldr	r3, [r3, #4]
 80151ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	430a      	orrs	r2, r1
 80151f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151fe:	f003 0304 	and.w	r3, r3, #4
 8015202:	2b00      	cmp	r3, #0
 8015204:	d00a      	beq.n	801521c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	685b      	ldr	r3, [r3, #4]
 801520c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	430a      	orrs	r2, r1
 801521a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015220:	f003 0310 	and.w	r3, r3, #16
 8015224:	2b00      	cmp	r3, #0
 8015226:	d00a      	beq.n	801523e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	689b      	ldr	r3, [r3, #8]
 801522e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	430a      	orrs	r2, r1
 801523c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015242:	f003 0320 	and.w	r3, r3, #32
 8015246:	2b00      	cmp	r3, #0
 8015248:	d00a      	beq.n	8015260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	689b      	ldr	r3, [r3, #8]
 8015250:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	430a      	orrs	r2, r1
 801525e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015268:	2b00      	cmp	r3, #0
 801526a:	d01a      	beq.n	80152a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	685b      	ldr	r3, [r3, #4]
 8015272:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	430a      	orrs	r2, r1
 8015280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801528a:	d10a      	bne.n	80152a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	685b      	ldr	r3, [r3, #4]
 8015292:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	430a      	orrs	r2, r1
 80152a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d00a      	beq.n	80152c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	685b      	ldr	r3, [r3, #4]
 80152b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	430a      	orrs	r2, r1
 80152c2:	605a      	str	r2, [r3, #4]
  }
}
 80152c4:	bf00      	nop
 80152c6:	370c      	adds	r7, #12
 80152c8:	46bd      	mov	sp, r7
 80152ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ce:	4770      	bx	lr

080152d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b098      	sub	sp, #96	@ 0x60
 80152d4:	af02      	add	r7, sp, #8
 80152d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	2200      	movs	r2, #0
 80152dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80152e0:	f7f5 fd16 	bl	800ad10 <HAL_GetTick>
 80152e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	f003 0308 	and.w	r3, r3, #8
 80152f0:	2b08      	cmp	r3, #8
 80152f2:	d12e      	bne.n	8015352 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80152f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80152f8:	9300      	str	r3, [sp, #0]
 80152fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80152fc:	2200      	movs	r2, #0
 80152fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8015302:	6878      	ldr	r0, [r7, #4]
 8015304:	f000 f88c 	bl	8015420 <UART_WaitOnFlagUntilTimeout>
 8015308:	4603      	mov	r3, r0
 801530a:	2b00      	cmp	r3, #0
 801530c:	d021      	beq.n	8015352 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015316:	e853 3f00 	ldrex	r3, [r3]
 801531a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801531c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801531e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015322:	653b      	str	r3, [r7, #80]	@ 0x50
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	461a      	mov	r2, r3
 801532a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801532c:	647b      	str	r3, [r7, #68]	@ 0x44
 801532e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015330:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015334:	e841 2300 	strex	r3, r2, [r1]
 8015338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801533a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801533c:	2b00      	cmp	r3, #0
 801533e:	d1e6      	bne.n	801530e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	2220      	movs	r2, #32
 8015344:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	2200      	movs	r2, #0
 801534a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801534e:	2303      	movs	r3, #3
 8015350:	e062      	b.n	8015418 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	f003 0304 	and.w	r3, r3, #4
 801535c:	2b04      	cmp	r3, #4
 801535e:	d149      	bne.n	80153f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015360:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015364:	9300      	str	r3, [sp, #0]
 8015366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015368:	2200      	movs	r2, #0
 801536a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801536e:	6878      	ldr	r0, [r7, #4]
 8015370:	f000 f856 	bl	8015420 <UART_WaitOnFlagUntilTimeout>
 8015374:	4603      	mov	r3, r0
 8015376:	2b00      	cmp	r3, #0
 8015378:	d03c      	beq.n	80153f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015382:	e853 3f00 	ldrex	r3, [r3]
 8015386:	623b      	str	r3, [r7, #32]
   return(result);
 8015388:	6a3b      	ldr	r3, [r7, #32]
 801538a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801538e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	461a      	mov	r2, r3
 8015396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015398:	633b      	str	r3, [r7, #48]	@ 0x30
 801539a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801539c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801539e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80153a0:	e841 2300 	strex	r3, r2, [r1]
 80153a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80153a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d1e6      	bne.n	801537a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	3308      	adds	r3, #8
 80153b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153b4:	693b      	ldr	r3, [r7, #16]
 80153b6:	e853 3f00 	ldrex	r3, [r3]
 80153ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	f023 0301 	bic.w	r3, r3, #1
 80153c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	3308      	adds	r3, #8
 80153ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80153cc:	61fa      	str	r2, [r7, #28]
 80153ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153d0:	69b9      	ldr	r1, [r7, #24]
 80153d2:	69fa      	ldr	r2, [r7, #28]
 80153d4:	e841 2300 	strex	r3, r2, [r1]
 80153d8:	617b      	str	r3, [r7, #20]
   return(result);
 80153da:	697b      	ldr	r3, [r7, #20]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d1e5      	bne.n	80153ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	2220      	movs	r2, #32
 80153e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	2200      	movs	r2, #0
 80153ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80153f0:	2303      	movs	r3, #3
 80153f2:	e011      	b.n	8015418 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2220      	movs	r2, #32
 80153f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	2220      	movs	r2, #32
 80153fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	2200      	movs	r2, #0
 8015406:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2200      	movs	r2, #0
 801540c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	2200      	movs	r2, #0
 8015412:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8015416:	2300      	movs	r3, #0
}
 8015418:	4618      	mov	r0, r3
 801541a:	3758      	adds	r7, #88	@ 0x58
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}

08015420 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b084      	sub	sp, #16
 8015424:	af00      	add	r7, sp, #0
 8015426:	60f8      	str	r0, [r7, #12]
 8015428:	60b9      	str	r1, [r7, #8]
 801542a:	603b      	str	r3, [r7, #0]
 801542c:	4613      	mov	r3, r2
 801542e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015430:	e04f      	b.n	80154d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015432:	69bb      	ldr	r3, [r7, #24]
 8015434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015438:	d04b      	beq.n	80154d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801543a:	f7f5 fc69 	bl	800ad10 <HAL_GetTick>
 801543e:	4602      	mov	r2, r0
 8015440:	683b      	ldr	r3, [r7, #0]
 8015442:	1ad3      	subs	r3, r2, r3
 8015444:	69ba      	ldr	r2, [r7, #24]
 8015446:	429a      	cmp	r2, r3
 8015448:	d302      	bcc.n	8015450 <UART_WaitOnFlagUntilTimeout+0x30>
 801544a:	69bb      	ldr	r3, [r7, #24]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d101      	bne.n	8015454 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015450:	2303      	movs	r3, #3
 8015452:	e04e      	b.n	80154f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	f003 0304 	and.w	r3, r3, #4
 801545e:	2b00      	cmp	r3, #0
 8015460:	d037      	beq.n	80154d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015462:	68bb      	ldr	r3, [r7, #8]
 8015464:	2b80      	cmp	r3, #128	@ 0x80
 8015466:	d034      	beq.n	80154d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	2b40      	cmp	r3, #64	@ 0x40
 801546c:	d031      	beq.n	80154d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	69db      	ldr	r3, [r3, #28]
 8015474:	f003 0308 	and.w	r3, r3, #8
 8015478:	2b08      	cmp	r3, #8
 801547a:	d110      	bne.n	801549e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	2208      	movs	r2, #8
 8015482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015484:	68f8      	ldr	r0, [r7, #12]
 8015486:	f000 f8ff 	bl	8015688 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	2208      	movs	r2, #8
 801548e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	2200      	movs	r2, #0
 8015496:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 801549a:	2301      	movs	r3, #1
 801549c:	e029      	b.n	80154f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	69db      	ldr	r3, [r3, #28]
 80154a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80154a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80154ac:	d111      	bne.n	80154d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80154b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80154b8:	68f8      	ldr	r0, [r7, #12]
 80154ba:	f000 f8e5 	bl	8015688 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	2220      	movs	r2, #32
 80154c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	2200      	movs	r2, #0
 80154ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80154ce:	2303      	movs	r3, #3
 80154d0:	e00f      	b.n	80154f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	69da      	ldr	r2, [r3, #28]
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	4013      	ands	r3, r2
 80154dc:	68ba      	ldr	r2, [r7, #8]
 80154de:	429a      	cmp	r2, r3
 80154e0:	bf0c      	ite	eq
 80154e2:	2301      	moveq	r3, #1
 80154e4:	2300      	movne	r3, #0
 80154e6:	b2db      	uxtb	r3, r3
 80154e8:	461a      	mov	r2, r3
 80154ea:	79fb      	ldrb	r3, [r7, #7]
 80154ec:	429a      	cmp	r2, r3
 80154ee:	d0a0      	beq.n	8015432 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80154f0:	2300      	movs	r3, #0
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3710      	adds	r7, #16
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}
	...

080154fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b096      	sub	sp, #88	@ 0x58
 8015500:	af00      	add	r7, sp, #0
 8015502:	60f8      	str	r0, [r7, #12]
 8015504:	60b9      	str	r1, [r7, #8]
 8015506:	4613      	mov	r3, r2
 8015508:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	68ba      	ldr	r2, [r7, #8]
 801550e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	88fa      	ldrh	r2, [r7, #6]
 8015514:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	2200      	movs	r2, #0
 801551c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	2222      	movs	r2, #34	@ 0x22
 8015524:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801552c:	2b00      	cmp	r3, #0
 801552e:	d028      	beq.n	8015582 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015534:	4a3e      	ldr	r2, [pc, #248]	@ (8015630 <UART_Start_Receive_DMA+0x134>)
 8015536:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801553c:	4a3d      	ldr	r2, [pc, #244]	@ (8015634 <UART_Start_Receive_DMA+0x138>)
 801553e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015544:	4a3c      	ldr	r2, [pc, #240]	@ (8015638 <UART_Start_Receive_DMA+0x13c>)
 8015546:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801554c:	2200      	movs	r2, #0
 801554e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	3324      	adds	r3, #36	@ 0x24
 801555a:	4619      	mov	r1, r3
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015560:	461a      	mov	r2, r3
 8015562:	88fb      	ldrh	r3, [r7, #6]
 8015564:	f7f7 fbba 	bl	800ccdc <HAL_DMA_Start_IT>
 8015568:	4603      	mov	r3, r0
 801556a:	2b00      	cmp	r3, #0
 801556c:	d009      	beq.n	8015582 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	2210      	movs	r2, #16
 8015572:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	2220      	movs	r2, #32
 801557a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 801557e:	2301      	movs	r3, #1
 8015580:	e051      	b.n	8015626 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	691b      	ldr	r3, [r3, #16]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d018      	beq.n	80155bc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015592:	e853 3f00 	ldrex	r3, [r3]
 8015596:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801559a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801559e:	657b      	str	r3, [r7, #84]	@ 0x54
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	461a      	mov	r2, r3
 80155a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80155a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80155aa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80155ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80155b0:	e841 2300 	strex	r3, r2, [r1]
 80155b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80155b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d1e6      	bne.n	801558a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	3308      	adds	r3, #8
 80155c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155c6:	e853 3f00 	ldrex	r3, [r3]
 80155ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80155cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155ce:	f043 0301 	orr.w	r3, r3, #1
 80155d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	3308      	adds	r3, #8
 80155da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80155dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80155de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80155e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80155e4:	e841 2300 	strex	r3, r2, [r1]
 80155e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80155ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d1e5      	bne.n	80155bc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	3308      	adds	r3, #8
 80155f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155f8:	697b      	ldr	r3, [r7, #20]
 80155fa:	e853 3f00 	ldrex	r3, [r3]
 80155fe:	613b      	str	r3, [r7, #16]
   return(result);
 8015600:	693b      	ldr	r3, [r7, #16]
 8015602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	3308      	adds	r3, #8
 801560e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015610:	623a      	str	r2, [r7, #32]
 8015612:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015614:	69f9      	ldr	r1, [r7, #28]
 8015616:	6a3a      	ldr	r2, [r7, #32]
 8015618:	e841 2300 	strex	r3, r2, [r1]
 801561c:	61bb      	str	r3, [r7, #24]
   return(result);
 801561e:	69bb      	ldr	r3, [r7, #24]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d1e5      	bne.n	80155f0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8015624:	2300      	movs	r3, #0
}
 8015626:	4618      	mov	r0, r3
 8015628:	3758      	adds	r7, #88	@ 0x58
 801562a:	46bd      	mov	sp, r7
 801562c:	bd80      	pop	{r7, pc}
 801562e:	bf00      	nop
 8015630:	08015807 	.word	0x08015807
 8015634:	08015933 	.word	0x08015933
 8015638:	08015971 	.word	0x08015971

0801563c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801563c:	b480      	push	{r7}
 801563e:	b089      	sub	sp, #36	@ 0x24
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	e853 3f00 	ldrex	r3, [r3]
 8015650:	60bb      	str	r3, [r7, #8]
   return(result);
 8015652:	68bb      	ldr	r3, [r7, #8]
 8015654:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8015658:	61fb      	str	r3, [r7, #28]
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	461a      	mov	r2, r3
 8015660:	69fb      	ldr	r3, [r7, #28]
 8015662:	61bb      	str	r3, [r7, #24]
 8015664:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015666:	6979      	ldr	r1, [r7, #20]
 8015668:	69ba      	ldr	r2, [r7, #24]
 801566a:	e841 2300 	strex	r3, r2, [r1]
 801566e:	613b      	str	r3, [r7, #16]
   return(result);
 8015670:	693b      	ldr	r3, [r7, #16]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d1e6      	bne.n	8015644 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	2220      	movs	r2, #32
 801567a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801567c:	bf00      	nop
 801567e:	3724      	adds	r7, #36	@ 0x24
 8015680:	46bd      	mov	sp, r7
 8015682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015686:	4770      	bx	lr

08015688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015688:	b480      	push	{r7}
 801568a:	b095      	sub	sp, #84	@ 0x54
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015698:	e853 3f00 	ldrex	r3, [r3]
 801569c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801569e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80156a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	461a      	mov	r2, r3
 80156ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80156ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80156b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80156b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80156b6:	e841 2300 	strex	r3, r2, [r1]
 80156ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80156bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d1e6      	bne.n	8015690 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	3308      	adds	r3, #8
 80156c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156ca:	6a3b      	ldr	r3, [r7, #32]
 80156cc:	e853 3f00 	ldrex	r3, [r3]
 80156d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80156d2:	69fb      	ldr	r3, [r7, #28]
 80156d4:	f023 0301 	bic.w	r3, r3, #1
 80156d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	3308      	adds	r3, #8
 80156e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80156e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80156e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80156e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80156ea:	e841 2300 	strex	r3, r2, [r1]
 80156ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80156f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d1e5      	bne.n	80156c2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80156fa:	2b01      	cmp	r3, #1
 80156fc:	d118      	bne.n	8015730 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	e853 3f00 	ldrex	r3, [r3]
 801570a:	60bb      	str	r3, [r7, #8]
   return(result);
 801570c:	68bb      	ldr	r3, [r7, #8]
 801570e:	f023 0310 	bic.w	r3, r3, #16
 8015712:	647b      	str	r3, [r7, #68]	@ 0x44
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	461a      	mov	r2, r3
 801571a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801571c:	61bb      	str	r3, [r7, #24]
 801571e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015720:	6979      	ldr	r1, [r7, #20]
 8015722:	69ba      	ldr	r2, [r7, #24]
 8015724:	e841 2300 	strex	r3, r2, [r1]
 8015728:	613b      	str	r3, [r7, #16]
   return(result);
 801572a:	693b      	ldr	r3, [r7, #16]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d1e6      	bne.n	80156fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2220      	movs	r2, #32
 8015734:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2200      	movs	r2, #0
 801573c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	2200      	movs	r2, #0
 8015742:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8015744:	bf00      	nop
 8015746:	3754      	adds	r7, #84	@ 0x54
 8015748:	46bd      	mov	sp, r7
 801574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574e:	4770      	bx	lr

08015750 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b090      	sub	sp, #64	@ 0x40
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801575c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	f003 0320 	and.w	r3, r3, #32
 8015768:	2b00      	cmp	r3, #0
 801576a:	d137      	bne.n	80157dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 801576c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801576e:	2200      	movs	r2, #0
 8015770:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	3308      	adds	r3, #8
 801577a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801577e:	e853 3f00 	ldrex	r3, [r3]
 8015782:	623b      	str	r3, [r7, #32]
   return(result);
 8015784:	6a3b      	ldr	r3, [r7, #32]
 8015786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801578a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801578c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	3308      	adds	r3, #8
 8015792:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015794:	633a      	str	r2, [r7, #48]	@ 0x30
 8015796:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801579a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801579c:	e841 2300 	strex	r3, r2, [r1]
 80157a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80157a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d1e5      	bne.n	8015774 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80157a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157ae:	693b      	ldr	r3, [r7, #16]
 80157b0:	e853 3f00 	ldrex	r3, [r3]
 80157b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80157bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80157be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	461a      	mov	r2, r3
 80157c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157c6:	61fb      	str	r3, [r7, #28]
 80157c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157ca:	69b9      	ldr	r1, [r7, #24]
 80157cc:	69fa      	ldr	r2, [r7, #28]
 80157ce:	e841 2300 	strex	r3, r2, [r1]
 80157d2:	617b      	str	r3, [r7, #20]
   return(result);
 80157d4:	697b      	ldr	r3, [r7, #20]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d1e6      	bne.n	80157a8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80157da:	e002      	b.n	80157e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80157dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80157de:	f7ed f895 	bl	800290c <HAL_UART_TxCpltCallback>
}
 80157e2:	bf00      	nop
 80157e4:	3740      	adds	r7, #64	@ 0x40
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}

080157ea <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80157ea:	b580      	push	{r7, lr}
 80157ec:	b084      	sub	sp, #16
 80157ee:	af00      	add	r7, sp, #0
 80157f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80157f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80157f8:	68f8      	ldr	r0, [r7, #12]
 80157fa:	f7ff f9f1 	bl	8014be0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80157fe:	bf00      	nop
 8015800:	3710      	adds	r7, #16
 8015802:	46bd      	mov	sp, r7
 8015804:	bd80      	pop	{r7, pc}

08015806 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015806:	b580      	push	{r7, lr}
 8015808:	b09c      	sub	sp, #112	@ 0x70
 801580a:	af00      	add	r7, sp, #0
 801580c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015812:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	f003 0320 	and.w	r3, r3, #32
 801581e:	2b00      	cmp	r3, #0
 8015820:	d171      	bne.n	8015906 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8015822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015824:	2200      	movs	r2, #0
 8015826:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801582a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015832:	e853 3f00 	ldrex	r3, [r3]
 8015836:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8015838:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801583a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801583e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	461a      	mov	r2, r3
 8015846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015848:	65bb      	str	r3, [r7, #88]	@ 0x58
 801584a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801584c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801584e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8015850:	e841 2300 	strex	r3, r2, [r1]
 8015854:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8015856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015858:	2b00      	cmp	r3, #0
 801585a:	d1e6      	bne.n	801582a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801585c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	3308      	adds	r3, #8
 8015862:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015866:	e853 3f00 	ldrex	r3, [r3]
 801586a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801586c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801586e:	f023 0301 	bic.w	r3, r3, #1
 8015872:	667b      	str	r3, [r7, #100]	@ 0x64
 8015874:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	3308      	adds	r3, #8
 801587a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801587c:	647a      	str	r2, [r7, #68]	@ 0x44
 801587e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015880:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015882:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015884:	e841 2300 	strex	r3, r2, [r1]
 8015888:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801588a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801588c:	2b00      	cmp	r3, #0
 801588e:	d1e5      	bne.n	801585c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	3308      	adds	r3, #8
 8015896:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801589a:	e853 3f00 	ldrex	r3, [r3]
 801589e:	623b      	str	r3, [r7, #32]
   return(result);
 80158a0:	6a3b      	ldr	r3, [r7, #32]
 80158a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80158a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80158a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	3308      	adds	r3, #8
 80158ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80158b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80158b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80158b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80158b8:	e841 2300 	strex	r3, r2, [r1]
 80158bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80158be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d1e5      	bne.n	8015890 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80158c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80158c6:	2220      	movs	r2, #32
 80158c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80158cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80158ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80158d0:	2b01      	cmp	r3, #1
 80158d2:	d118      	bne.n	8015906 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80158d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158da:	693b      	ldr	r3, [r7, #16]
 80158dc:	e853 3f00 	ldrex	r3, [r3]
 80158e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	f023 0310 	bic.w	r3, r3, #16
 80158e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80158ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	461a      	mov	r2, r3
 80158f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80158f2:	61fb      	str	r3, [r7, #28]
 80158f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158f6:	69b9      	ldr	r1, [r7, #24]
 80158f8:	69fa      	ldr	r2, [r7, #28]
 80158fa:	e841 2300 	strex	r3, r2, [r1]
 80158fe:	617b      	str	r3, [r7, #20]
   return(result);
 8015900:	697b      	ldr	r3, [r7, #20]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d1e6      	bne.n	80158d4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015906:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015908:	2200      	movs	r2, #0
 801590a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801590c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801590e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015910:	2b01      	cmp	r3, #1
 8015912:	d107      	bne.n	8015924 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015916:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801591a:	4619      	mov	r1, r3
 801591c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801591e:	f7ec ff6d 	bl	80027fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015922:	e002      	b.n	801592a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8015924:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015926:	f7ec ffe7 	bl	80028f8 <HAL_UART_RxCpltCallback>
}
 801592a:	bf00      	nop
 801592c:	3770      	adds	r7, #112	@ 0x70
 801592e:	46bd      	mov	sp, r7
 8015930:	bd80      	pop	{r7, pc}

08015932 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015932:	b580      	push	{r7, lr}
 8015934:	b084      	sub	sp, #16
 8015936:	af00      	add	r7, sp, #0
 8015938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801593e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	2201      	movs	r2, #1
 8015944:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801594a:	2b01      	cmp	r3, #1
 801594c:	d109      	bne.n	8015962 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8015954:	085b      	lsrs	r3, r3, #1
 8015956:	b29b      	uxth	r3, r3
 8015958:	4619      	mov	r1, r3
 801595a:	68f8      	ldr	r0, [r7, #12]
 801595c:	f7ec ff4e 	bl	80027fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015960:	e002      	b.n	8015968 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8015962:	68f8      	ldr	r0, [r7, #12]
 8015964:	f7ff f946 	bl	8014bf4 <HAL_UART_RxHalfCpltCallback>
}
 8015968:	bf00      	nop
 801596a:	3710      	adds	r7, #16
 801596c:	46bd      	mov	sp, r7
 801596e:	bd80      	pop	{r7, pc}

08015970 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8015970:	b580      	push	{r7, lr}
 8015972:	b086      	sub	sp, #24
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801597c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801597e:	697b      	ldr	r3, [r7, #20]
 8015980:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015982:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8015984:	697b      	ldr	r3, [r7, #20]
 8015986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801598a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801598c:	697b      	ldr	r3, [r7, #20]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	689b      	ldr	r3, [r3, #8]
 8015992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015996:	2b80      	cmp	r3, #128	@ 0x80
 8015998:	d109      	bne.n	80159ae <UART_DMAError+0x3e>
 801599a:	693b      	ldr	r3, [r7, #16]
 801599c:	2b21      	cmp	r3, #33	@ 0x21
 801599e:	d106      	bne.n	80159ae <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	2200      	movs	r2, #0
 80159a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80159a8:	6978      	ldr	r0, [r7, #20]
 80159aa:	f7ff fe47 	bl	801563c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80159ae:	697b      	ldr	r3, [r7, #20]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	689b      	ldr	r3, [r3, #8]
 80159b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80159b8:	2b40      	cmp	r3, #64	@ 0x40
 80159ba:	d109      	bne.n	80159d0 <UART_DMAError+0x60>
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	2b22      	cmp	r3, #34	@ 0x22
 80159c0:	d106      	bne.n	80159d0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80159c2:	697b      	ldr	r3, [r7, #20]
 80159c4:	2200      	movs	r2, #0
 80159c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80159ca:	6978      	ldr	r0, [r7, #20]
 80159cc:	f7ff fe5c 	bl	8015688 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80159d0:	697b      	ldr	r3, [r7, #20]
 80159d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159d6:	f043 0210 	orr.w	r2, r3, #16
 80159da:	697b      	ldr	r3, [r7, #20]
 80159dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80159e0:	6978      	ldr	r0, [r7, #20]
 80159e2:	f7ff f911 	bl	8014c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80159e6:	bf00      	nop
 80159e8:	3718      	adds	r7, #24
 80159ea:	46bd      	mov	sp, r7
 80159ec:	bd80      	pop	{r7, pc}

080159ee <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 80159ee:	b580      	push	{r7, lr}
 80159f0:	b088      	sub	sp, #32
 80159f2:	af00      	add	r7, sp, #0
 80159f4:	60f8      	str	r0, [r7, #12]
 80159f6:	60b9      	str	r1, [r7, #8]
 80159f8:	603b      	str	r3, [r7, #0]
 80159fa:	4613      	mov	r3, r2
 80159fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015a04:	2b20      	cmp	r3, #32
 8015a06:	f040 80f0 	bne.w	8015bea <HAL_UARTEx_ReceiveToIdle+0x1fc>
  {
    if ((pData == NULL) || (Size == 0U))
 8015a0a:	68bb      	ldr	r3, [r7, #8]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d002      	beq.n	8015a16 <HAL_UARTEx_ReceiveToIdle+0x28>
 8015a10:	88fb      	ldrh	r3, [r7, #6]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d101      	bne.n	8015a1a <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 8015a16:	2301      	movs	r3, #1
 8015a18:	e0e8      	b.n	8015bec <HAL_UARTEx_ReceiveToIdle+0x1fe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	2222      	movs	r2, #34	@ 0x22
 8015a26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	2201      	movs	r2, #1
 8015a2e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	2200      	movs	r2, #0
 8015a34:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015a36:	f7f5 f96b 	bl	800ad10 <HAL_GetTick>
 8015a3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	88fa      	ldrh	r2, [r7, #6]
 8015a40:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	88fa      	ldrh	r2, [r7, #6]
 8015a48:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	689b      	ldr	r3, [r3, #8]
 8015a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015a54:	d10e      	bne.n	8015a74 <HAL_UARTEx_ReceiveToIdle+0x86>
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	691b      	ldr	r3, [r3, #16]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d105      	bne.n	8015a6a <HAL_UARTEx_ReceiveToIdle+0x7c>
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8015a64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015a68:	e02d      	b.n	8015ac6 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	22ff      	movs	r2, #255	@ 0xff
 8015a6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015a72:	e028      	b.n	8015ac6 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	689b      	ldr	r3, [r3, #8]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d10d      	bne.n	8015a98 <HAL_UARTEx_ReceiveToIdle+0xaa>
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	691b      	ldr	r3, [r3, #16]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d104      	bne.n	8015a8e <HAL_UARTEx_ReceiveToIdle+0xa0>
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	22ff      	movs	r2, #255	@ 0xff
 8015a88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015a8c:	e01b      	b.n	8015ac6 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	227f      	movs	r2, #127	@ 0x7f
 8015a92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015a96:	e016      	b.n	8015ac6 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	689b      	ldr	r3, [r3, #8]
 8015a9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015aa0:	d10d      	bne.n	8015abe <HAL_UARTEx_ReceiveToIdle+0xd0>
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	691b      	ldr	r3, [r3, #16]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d104      	bne.n	8015ab4 <HAL_UARTEx_ReceiveToIdle+0xc6>
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	227f      	movs	r2, #127	@ 0x7f
 8015aae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015ab2:	e008      	b.n	8015ac6 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	223f      	movs	r2, #63	@ 0x3f
 8015ab8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8015abc:	e003      	b.n	8015ac6 <HAL_UARTEx_ReceiveToIdle+0xd8>
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8015acc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	689b      	ldr	r3, [r3, #8]
 8015ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015ad6:	d108      	bne.n	8015aea <HAL_UARTEx_ReceiveToIdle+0xfc>
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	691b      	ldr	r3, [r3, #16]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d104      	bne.n	8015aea <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	61bb      	str	r3, [r7, #24]
 8015ae8:	e003      	b.n	8015af2 <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 8015aea:	68bb      	ldr	r3, [r7, #8]
 8015aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015aee:	2300      	movs	r3, #0
 8015af0:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8015af2:	683b      	ldr	r3, [r7, #0]
 8015af4:	2200      	movs	r2, #0
 8015af6:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8015af8:	e060      	b.n	8015bbc <HAL_UARTEx_ReceiveToIdle+0x1ce>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	69db      	ldr	r3, [r3, #28]
 8015b00:	f003 0310 	and.w	r3, r3, #16
 8015b04:	2b10      	cmp	r3, #16
 8015b06:	d110      	bne.n	8015b2a <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	2210      	movs	r2, #16
 8015b0e:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8015b10:	683b      	ldr	r3, [r7, #0]
 8015b12:	881b      	ldrh	r3, [r3, #0]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d008      	beq.n	8015b2a <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	2202      	movs	r2, #2
 8015b1c:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	2220      	movs	r2, #32
 8015b22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_OK;
 8015b26:	2300      	movs	r3, #0
 8015b28:	e060      	b.n	8015bec <HAL_UARTEx_ReceiveToIdle+0x1fe>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	69db      	ldr	r3, [r3, #28]
 8015b30:	f003 0320 	and.w	r3, r3, #32
 8015b34:	2b20      	cmp	r3, #32
 8015b36:	d12c      	bne.n	8015b92 <HAL_UARTEx_ReceiveToIdle+0x1a4>
      {
        if (pdata8bits == NULL)
 8015b38:	69fb      	ldr	r3, [r7, #28]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d10c      	bne.n	8015b58 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015b44:	b29a      	uxth	r2, r3
 8015b46:	8a7b      	ldrh	r3, [r7, #18]
 8015b48:	4013      	ands	r3, r2
 8015b4a:	b29a      	uxth	r2, r3
 8015b4c:	69bb      	ldr	r3, [r7, #24]
 8015b4e:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8015b50:	69bb      	ldr	r3, [r7, #24]
 8015b52:	3302      	adds	r3, #2
 8015b54:	61bb      	str	r3, [r7, #24]
 8015b56:	e00d      	b.n	8015b74 <HAL_UARTEx_ReceiveToIdle+0x186>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015b5e:	b29b      	uxth	r3, r3
 8015b60:	b2da      	uxtb	r2, r3
 8015b62:	8a7b      	ldrh	r3, [r7, #18]
 8015b64:	b2db      	uxtb	r3, r3
 8015b66:	4013      	ands	r3, r2
 8015b68:	b2da      	uxtb	r2, r3
 8015b6a:	69fb      	ldr	r3, [r7, #28]
 8015b6c:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8015b6e:	69fb      	ldr	r3, [r7, #28]
 8015b70:	3301      	adds	r3, #1
 8015b72:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8015b74:	683b      	ldr	r3, [r7, #0]
 8015b76:	881b      	ldrh	r3, [r3, #0]
 8015b78:	3301      	adds	r3, #1
 8015b7a:	b29a      	uxth	r2, r3
 8015b7c:	683b      	ldr	r3, [r7, #0]
 8015b7e:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015b86:	b29b      	uxth	r3, r3
 8015b88:	3b01      	subs	r3, #1
 8015b8a:	b29a      	uxth	r2, r3
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8015b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b98:	d010      	beq.n	8015bbc <HAL_UARTEx_ReceiveToIdle+0x1ce>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015b9a:	f7f5 f8b9 	bl	800ad10 <HAL_GetTick>
 8015b9e:	4602      	mov	r2, r0
 8015ba0:	697b      	ldr	r3, [r7, #20]
 8015ba2:	1ad3      	subs	r3, r2, r3
 8015ba4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ba6:	429a      	cmp	r2, r3
 8015ba8:	d302      	bcc.n	8015bb0 <HAL_UARTEx_ReceiveToIdle+0x1c2>
 8015baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d105      	bne.n	8015bbc <HAL_UARTEx_ReceiveToIdle+0x1ce>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	2220      	movs	r2, #32
 8015bb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8015bb8:	2303      	movs	r3, #3
 8015bba:	e017      	b.n	8015bec <HAL_UARTEx_ReceiveToIdle+0x1fe>
    while (huart->RxXferCount > 0U)
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015bc2:	b29b      	uxth	r3, r3
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d198      	bne.n	8015afa <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8015bd4:	b29b      	uxth	r3, r3
 8015bd6:	1ad3      	subs	r3, r2, r3
 8015bd8:	b29a      	uxth	r2, r3
 8015bda:	683b      	ldr	r3, [r7, #0]
 8015bdc:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	2220      	movs	r2, #32
 8015be2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8015be6:	2300      	movs	r3, #0
 8015be8:	e000      	b.n	8015bec <HAL_UARTEx_ReceiveToIdle+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8015bea:	2302      	movs	r3, #2
  }
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	3720      	adds	r7, #32
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd80      	pop	{r7, pc}

08015bf4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b08c      	sub	sp, #48	@ 0x30
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	60f8      	str	r0, [r7, #12]
 8015bfc:	60b9      	str	r1, [r7, #8]
 8015bfe:	4613      	mov	r3, r2
 8015c00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015c08:	2b20      	cmp	r3, #32
 8015c0a:	d142      	bne.n	8015c92 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8015c0c:	68bb      	ldr	r3, [r7, #8]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d002      	beq.n	8015c18 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8015c12:	88fb      	ldrh	r3, [r7, #6]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d101      	bne.n	8015c1c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8015c18:	2301      	movs	r3, #1
 8015c1a:	e03b      	b.n	8015c94 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	2201      	movs	r2, #1
 8015c20:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	2200      	movs	r2, #0
 8015c26:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8015c28:	88fb      	ldrh	r3, [r7, #6]
 8015c2a:	461a      	mov	r2, r3
 8015c2c:	68b9      	ldr	r1, [r7, #8]
 8015c2e:	68f8      	ldr	r0, [r7, #12]
 8015c30:	f7ff fc64 	bl	80154fc <UART_Start_Receive_DMA>
 8015c34:	4603      	mov	r3, r0
 8015c36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8015c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d124      	bne.n	8015c8c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015c46:	2b01      	cmp	r3, #1
 8015c48:	d11d      	bne.n	8015c86 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	2210      	movs	r2, #16
 8015c50:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c58:	69bb      	ldr	r3, [r7, #24]
 8015c5a:	e853 3f00 	ldrex	r3, [r3]
 8015c5e:	617b      	str	r3, [r7, #20]
   return(result);
 8015c60:	697b      	ldr	r3, [r7, #20]
 8015c62:	f043 0310 	orr.w	r3, r3, #16
 8015c66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	461a      	mov	r2, r3
 8015c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8015c72:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c74:	6a39      	ldr	r1, [r7, #32]
 8015c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015c78:	e841 2300 	strex	r3, r2, [r1]
 8015c7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8015c7e:	69fb      	ldr	r3, [r7, #28]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d1e6      	bne.n	8015c52 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8015c84:	e002      	b.n	8015c8c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8015c86:	2301      	movs	r3, #1
 8015c88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8015c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015c90:	e000      	b.n	8015c94 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8015c92:	2302      	movs	r3, #2
  }
}
 8015c94:	4618      	mov	r0, r3
 8015c96:	3730      	adds	r7, #48	@ 0x30
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	bd80      	pop	{r7, pc}

08015c9c <atoi>:
 8015c9c:	220a      	movs	r2, #10
 8015c9e:	2100      	movs	r1, #0
 8015ca0:	f000 b87c 	b.w	8015d9c <strtol>

08015ca4 <_strtol_l.isra.0>:
 8015ca4:	2b24      	cmp	r3, #36	@ 0x24
 8015ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015caa:	4686      	mov	lr, r0
 8015cac:	4690      	mov	r8, r2
 8015cae:	d801      	bhi.n	8015cb4 <_strtol_l.isra.0+0x10>
 8015cb0:	2b01      	cmp	r3, #1
 8015cb2:	d106      	bne.n	8015cc2 <_strtol_l.isra.0+0x1e>
 8015cb4:	f000 f92c 	bl	8015f10 <__errno>
 8015cb8:	2316      	movs	r3, #22
 8015cba:	6003      	str	r3, [r0, #0]
 8015cbc:	2000      	movs	r0, #0
 8015cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cc2:	4834      	ldr	r0, [pc, #208]	@ (8015d94 <_strtol_l.isra.0+0xf0>)
 8015cc4:	460d      	mov	r5, r1
 8015cc6:	462a      	mov	r2, r5
 8015cc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015ccc:	5d06      	ldrb	r6, [r0, r4]
 8015cce:	f016 0608 	ands.w	r6, r6, #8
 8015cd2:	d1f8      	bne.n	8015cc6 <_strtol_l.isra.0+0x22>
 8015cd4:	2c2d      	cmp	r4, #45	@ 0x2d
 8015cd6:	d110      	bne.n	8015cfa <_strtol_l.isra.0+0x56>
 8015cd8:	782c      	ldrb	r4, [r5, #0]
 8015cda:	2601      	movs	r6, #1
 8015cdc:	1c95      	adds	r5, r2, #2
 8015cde:	f033 0210 	bics.w	r2, r3, #16
 8015ce2:	d115      	bne.n	8015d10 <_strtol_l.isra.0+0x6c>
 8015ce4:	2c30      	cmp	r4, #48	@ 0x30
 8015ce6:	d10d      	bne.n	8015d04 <_strtol_l.isra.0+0x60>
 8015ce8:	782a      	ldrb	r2, [r5, #0]
 8015cea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015cee:	2a58      	cmp	r2, #88	@ 0x58
 8015cf0:	d108      	bne.n	8015d04 <_strtol_l.isra.0+0x60>
 8015cf2:	786c      	ldrb	r4, [r5, #1]
 8015cf4:	3502      	adds	r5, #2
 8015cf6:	2310      	movs	r3, #16
 8015cf8:	e00a      	b.n	8015d10 <_strtol_l.isra.0+0x6c>
 8015cfa:	2c2b      	cmp	r4, #43	@ 0x2b
 8015cfc:	bf04      	itt	eq
 8015cfe:	782c      	ldrbeq	r4, [r5, #0]
 8015d00:	1c95      	addeq	r5, r2, #2
 8015d02:	e7ec      	b.n	8015cde <_strtol_l.isra.0+0x3a>
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d1f6      	bne.n	8015cf6 <_strtol_l.isra.0+0x52>
 8015d08:	2c30      	cmp	r4, #48	@ 0x30
 8015d0a:	bf14      	ite	ne
 8015d0c:	230a      	movne	r3, #10
 8015d0e:	2308      	moveq	r3, #8
 8015d10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015d14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015d18:	2200      	movs	r2, #0
 8015d1a:	fbbc f9f3 	udiv	r9, ip, r3
 8015d1e:	4610      	mov	r0, r2
 8015d20:	fb03 ca19 	mls	sl, r3, r9, ip
 8015d24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8015d28:	2f09      	cmp	r7, #9
 8015d2a:	d80f      	bhi.n	8015d4c <_strtol_l.isra.0+0xa8>
 8015d2c:	463c      	mov	r4, r7
 8015d2e:	42a3      	cmp	r3, r4
 8015d30:	dd1b      	ble.n	8015d6a <_strtol_l.isra.0+0xc6>
 8015d32:	1c57      	adds	r7, r2, #1
 8015d34:	d007      	beq.n	8015d46 <_strtol_l.isra.0+0xa2>
 8015d36:	4581      	cmp	r9, r0
 8015d38:	d314      	bcc.n	8015d64 <_strtol_l.isra.0+0xc0>
 8015d3a:	d101      	bne.n	8015d40 <_strtol_l.isra.0+0x9c>
 8015d3c:	45a2      	cmp	sl, r4
 8015d3e:	db11      	blt.n	8015d64 <_strtol_l.isra.0+0xc0>
 8015d40:	fb00 4003 	mla	r0, r0, r3, r4
 8015d44:	2201      	movs	r2, #1
 8015d46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015d4a:	e7eb      	b.n	8015d24 <_strtol_l.isra.0+0x80>
 8015d4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015d50:	2f19      	cmp	r7, #25
 8015d52:	d801      	bhi.n	8015d58 <_strtol_l.isra.0+0xb4>
 8015d54:	3c37      	subs	r4, #55	@ 0x37
 8015d56:	e7ea      	b.n	8015d2e <_strtol_l.isra.0+0x8a>
 8015d58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8015d5c:	2f19      	cmp	r7, #25
 8015d5e:	d804      	bhi.n	8015d6a <_strtol_l.isra.0+0xc6>
 8015d60:	3c57      	subs	r4, #87	@ 0x57
 8015d62:	e7e4      	b.n	8015d2e <_strtol_l.isra.0+0x8a>
 8015d64:	f04f 32ff 	mov.w	r2, #4294967295
 8015d68:	e7ed      	b.n	8015d46 <_strtol_l.isra.0+0xa2>
 8015d6a:	1c53      	adds	r3, r2, #1
 8015d6c:	d108      	bne.n	8015d80 <_strtol_l.isra.0+0xdc>
 8015d6e:	2322      	movs	r3, #34	@ 0x22
 8015d70:	f8ce 3000 	str.w	r3, [lr]
 8015d74:	4660      	mov	r0, ip
 8015d76:	f1b8 0f00 	cmp.w	r8, #0
 8015d7a:	d0a0      	beq.n	8015cbe <_strtol_l.isra.0+0x1a>
 8015d7c:	1e69      	subs	r1, r5, #1
 8015d7e:	e006      	b.n	8015d8e <_strtol_l.isra.0+0xea>
 8015d80:	b106      	cbz	r6, 8015d84 <_strtol_l.isra.0+0xe0>
 8015d82:	4240      	negs	r0, r0
 8015d84:	f1b8 0f00 	cmp.w	r8, #0
 8015d88:	d099      	beq.n	8015cbe <_strtol_l.isra.0+0x1a>
 8015d8a:	2a00      	cmp	r2, #0
 8015d8c:	d1f6      	bne.n	8015d7c <_strtol_l.isra.0+0xd8>
 8015d8e:	f8c8 1000 	str.w	r1, [r8]
 8015d92:	e794      	b.n	8015cbe <_strtol_l.isra.0+0x1a>
 8015d94:	0801767f 	.word	0x0801767f

08015d98 <_strtol_r>:
 8015d98:	f7ff bf84 	b.w	8015ca4 <_strtol_l.isra.0>

08015d9c <strtol>:
 8015d9c:	4613      	mov	r3, r2
 8015d9e:	460a      	mov	r2, r1
 8015da0:	4601      	mov	r1, r0
 8015da2:	4802      	ldr	r0, [pc, #8]	@ (8015dac <strtol+0x10>)
 8015da4:	6800      	ldr	r0, [r0, #0]
 8015da6:	f7ff bf7d 	b.w	8015ca4 <_strtol_l.isra.0>
 8015daa:	bf00      	nop
 8015dac:	2000019c 	.word	0x2000019c

08015db0 <siprintf>:
 8015db0:	b40e      	push	{r1, r2, r3}
 8015db2:	b510      	push	{r4, lr}
 8015db4:	b09d      	sub	sp, #116	@ 0x74
 8015db6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015db8:	9002      	str	r0, [sp, #8]
 8015dba:	9006      	str	r0, [sp, #24]
 8015dbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015dc0:	480a      	ldr	r0, [pc, #40]	@ (8015dec <siprintf+0x3c>)
 8015dc2:	9107      	str	r1, [sp, #28]
 8015dc4:	9104      	str	r1, [sp, #16]
 8015dc6:	490a      	ldr	r1, [pc, #40]	@ (8015df0 <siprintf+0x40>)
 8015dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dcc:	9105      	str	r1, [sp, #20]
 8015dce:	2400      	movs	r4, #0
 8015dd0:	a902      	add	r1, sp, #8
 8015dd2:	6800      	ldr	r0, [r0, #0]
 8015dd4:	9301      	str	r3, [sp, #4]
 8015dd6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015dd8:	f000 fa30 	bl	801623c <_svfiprintf_r>
 8015ddc:	9b02      	ldr	r3, [sp, #8]
 8015dde:	701c      	strb	r4, [r3, #0]
 8015de0:	b01d      	add	sp, #116	@ 0x74
 8015de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015de6:	b003      	add	sp, #12
 8015de8:	4770      	bx	lr
 8015dea:	bf00      	nop
 8015dec:	2000019c 	.word	0x2000019c
 8015df0:	ffff0208 	.word	0xffff0208

08015df4 <siscanf>:
 8015df4:	b40e      	push	{r1, r2, r3}
 8015df6:	b570      	push	{r4, r5, r6, lr}
 8015df8:	b09d      	sub	sp, #116	@ 0x74
 8015dfa:	ac21      	add	r4, sp, #132	@ 0x84
 8015dfc:	2500      	movs	r5, #0
 8015dfe:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8015e02:	f854 6b04 	ldr.w	r6, [r4], #4
 8015e06:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015e0a:	951b      	str	r5, [sp, #108]	@ 0x6c
 8015e0c:	9002      	str	r0, [sp, #8]
 8015e0e:	9006      	str	r0, [sp, #24]
 8015e10:	f7ea f9e8 	bl	80001e4 <strlen>
 8015e14:	4b0b      	ldr	r3, [pc, #44]	@ (8015e44 <siscanf+0x50>)
 8015e16:	9003      	str	r0, [sp, #12]
 8015e18:	9007      	str	r0, [sp, #28]
 8015e1a:	480b      	ldr	r0, [pc, #44]	@ (8015e48 <siscanf+0x54>)
 8015e1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015e1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015e22:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015e26:	4632      	mov	r2, r6
 8015e28:	4623      	mov	r3, r4
 8015e2a:	a902      	add	r1, sp, #8
 8015e2c:	6800      	ldr	r0, [r0, #0]
 8015e2e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8015e30:	9514      	str	r5, [sp, #80]	@ 0x50
 8015e32:	9401      	str	r4, [sp, #4]
 8015e34:	f000 fb58 	bl	80164e8 <__ssvfiscanf_r>
 8015e38:	b01d      	add	sp, #116	@ 0x74
 8015e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e3e:	b003      	add	sp, #12
 8015e40:	4770      	bx	lr
 8015e42:	bf00      	nop
 8015e44:	08015e4d 	.word	0x08015e4d
 8015e48:	2000019c 	.word	0x2000019c

08015e4c <__seofread>:
 8015e4c:	2000      	movs	r0, #0
 8015e4e:	4770      	bx	lr

08015e50 <memcmp>:
 8015e50:	b510      	push	{r4, lr}
 8015e52:	3901      	subs	r1, #1
 8015e54:	4402      	add	r2, r0
 8015e56:	4290      	cmp	r0, r2
 8015e58:	d101      	bne.n	8015e5e <memcmp+0xe>
 8015e5a:	2000      	movs	r0, #0
 8015e5c:	e005      	b.n	8015e6a <memcmp+0x1a>
 8015e5e:	7803      	ldrb	r3, [r0, #0]
 8015e60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015e64:	42a3      	cmp	r3, r4
 8015e66:	d001      	beq.n	8015e6c <memcmp+0x1c>
 8015e68:	1b18      	subs	r0, r3, r4
 8015e6a:	bd10      	pop	{r4, pc}
 8015e6c:	3001      	adds	r0, #1
 8015e6e:	e7f2      	b.n	8015e56 <memcmp+0x6>

08015e70 <memset>:
 8015e70:	4402      	add	r2, r0
 8015e72:	4603      	mov	r3, r0
 8015e74:	4293      	cmp	r3, r2
 8015e76:	d100      	bne.n	8015e7a <memset+0xa>
 8015e78:	4770      	bx	lr
 8015e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8015e7e:	e7f9      	b.n	8015e74 <memset+0x4>

08015e80 <strchr>:
 8015e80:	b2c9      	uxtb	r1, r1
 8015e82:	4603      	mov	r3, r0
 8015e84:	4618      	mov	r0, r3
 8015e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e8a:	b112      	cbz	r2, 8015e92 <strchr+0x12>
 8015e8c:	428a      	cmp	r2, r1
 8015e8e:	d1f9      	bne.n	8015e84 <strchr+0x4>
 8015e90:	4770      	bx	lr
 8015e92:	2900      	cmp	r1, #0
 8015e94:	bf18      	it	ne
 8015e96:	2000      	movne	r0, #0
 8015e98:	4770      	bx	lr

08015e9a <strncmp>:
 8015e9a:	b510      	push	{r4, lr}
 8015e9c:	b16a      	cbz	r2, 8015eba <strncmp+0x20>
 8015e9e:	3901      	subs	r1, #1
 8015ea0:	1884      	adds	r4, r0, r2
 8015ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ea6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015eaa:	429a      	cmp	r2, r3
 8015eac:	d103      	bne.n	8015eb6 <strncmp+0x1c>
 8015eae:	42a0      	cmp	r0, r4
 8015eb0:	d001      	beq.n	8015eb6 <strncmp+0x1c>
 8015eb2:	2a00      	cmp	r2, #0
 8015eb4:	d1f5      	bne.n	8015ea2 <strncmp+0x8>
 8015eb6:	1ad0      	subs	r0, r2, r3
 8015eb8:	bd10      	pop	{r4, pc}
 8015eba:	4610      	mov	r0, r2
 8015ebc:	e7fc      	b.n	8015eb8 <strncmp+0x1e>

08015ebe <strncpy>:
 8015ebe:	b510      	push	{r4, lr}
 8015ec0:	3901      	subs	r1, #1
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	b132      	cbz	r2, 8015ed4 <strncpy+0x16>
 8015ec6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015eca:	f803 4b01 	strb.w	r4, [r3], #1
 8015ece:	3a01      	subs	r2, #1
 8015ed0:	2c00      	cmp	r4, #0
 8015ed2:	d1f7      	bne.n	8015ec4 <strncpy+0x6>
 8015ed4:	441a      	add	r2, r3
 8015ed6:	2100      	movs	r1, #0
 8015ed8:	4293      	cmp	r3, r2
 8015eda:	d100      	bne.n	8015ede <strncpy+0x20>
 8015edc:	bd10      	pop	{r4, pc}
 8015ede:	f803 1b01 	strb.w	r1, [r3], #1
 8015ee2:	e7f9      	b.n	8015ed8 <strncpy+0x1a>

08015ee4 <strstr>:
 8015ee4:	780a      	ldrb	r2, [r1, #0]
 8015ee6:	b570      	push	{r4, r5, r6, lr}
 8015ee8:	b96a      	cbnz	r2, 8015f06 <strstr+0x22>
 8015eea:	bd70      	pop	{r4, r5, r6, pc}
 8015eec:	429a      	cmp	r2, r3
 8015eee:	d109      	bne.n	8015f04 <strstr+0x20>
 8015ef0:	460c      	mov	r4, r1
 8015ef2:	4605      	mov	r5, r0
 8015ef4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d0f6      	beq.n	8015eea <strstr+0x6>
 8015efc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015f00:	429e      	cmp	r6, r3
 8015f02:	d0f7      	beq.n	8015ef4 <strstr+0x10>
 8015f04:	3001      	adds	r0, #1
 8015f06:	7803      	ldrb	r3, [r0, #0]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d1ef      	bne.n	8015eec <strstr+0x8>
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	e7ec      	b.n	8015eea <strstr+0x6>

08015f10 <__errno>:
 8015f10:	4b01      	ldr	r3, [pc, #4]	@ (8015f18 <__errno+0x8>)
 8015f12:	6818      	ldr	r0, [r3, #0]
 8015f14:	4770      	bx	lr
 8015f16:	bf00      	nop
 8015f18:	2000019c 	.word	0x2000019c

08015f1c <__libc_init_array>:
 8015f1c:	b570      	push	{r4, r5, r6, lr}
 8015f1e:	4d0d      	ldr	r5, [pc, #52]	@ (8015f54 <__libc_init_array+0x38>)
 8015f20:	4c0d      	ldr	r4, [pc, #52]	@ (8015f58 <__libc_init_array+0x3c>)
 8015f22:	1b64      	subs	r4, r4, r5
 8015f24:	10a4      	asrs	r4, r4, #2
 8015f26:	2600      	movs	r6, #0
 8015f28:	42a6      	cmp	r6, r4
 8015f2a:	d109      	bne.n	8015f40 <__libc_init_array+0x24>
 8015f2c:	4d0b      	ldr	r5, [pc, #44]	@ (8015f5c <__libc_init_array+0x40>)
 8015f2e:	4c0c      	ldr	r4, [pc, #48]	@ (8015f60 <__libc_init_array+0x44>)
 8015f30:	f001 f86e 	bl	8017010 <_init>
 8015f34:	1b64      	subs	r4, r4, r5
 8015f36:	10a4      	asrs	r4, r4, #2
 8015f38:	2600      	movs	r6, #0
 8015f3a:	42a6      	cmp	r6, r4
 8015f3c:	d105      	bne.n	8015f4a <__libc_init_array+0x2e>
 8015f3e:	bd70      	pop	{r4, r5, r6, pc}
 8015f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f44:	4798      	blx	r3
 8015f46:	3601      	adds	r6, #1
 8015f48:	e7ee      	b.n	8015f28 <__libc_init_array+0xc>
 8015f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f4e:	4798      	blx	r3
 8015f50:	3601      	adds	r6, #1
 8015f52:	e7f2      	b.n	8015f3a <__libc_init_array+0x1e>
 8015f54:	080177d8 	.word	0x080177d8
 8015f58:	080177d8 	.word	0x080177d8
 8015f5c:	080177d8 	.word	0x080177d8
 8015f60:	080177dc 	.word	0x080177dc

08015f64 <__retarget_lock_acquire_recursive>:
 8015f64:	4770      	bx	lr

08015f66 <__retarget_lock_release_recursive>:
 8015f66:	4770      	bx	lr

08015f68 <strcpy>:
 8015f68:	4603      	mov	r3, r0
 8015f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f6e:	f803 2b01 	strb.w	r2, [r3], #1
 8015f72:	2a00      	cmp	r2, #0
 8015f74:	d1f9      	bne.n	8015f6a <strcpy+0x2>
 8015f76:	4770      	bx	lr

08015f78 <memcpy>:
 8015f78:	440a      	add	r2, r1
 8015f7a:	4291      	cmp	r1, r2
 8015f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8015f80:	d100      	bne.n	8015f84 <memcpy+0xc>
 8015f82:	4770      	bx	lr
 8015f84:	b510      	push	{r4, lr}
 8015f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015f8e:	4291      	cmp	r1, r2
 8015f90:	d1f9      	bne.n	8015f86 <memcpy+0xe>
 8015f92:	bd10      	pop	{r4, pc}

08015f94 <_free_r>:
 8015f94:	b538      	push	{r3, r4, r5, lr}
 8015f96:	4605      	mov	r5, r0
 8015f98:	2900      	cmp	r1, #0
 8015f9a:	d041      	beq.n	8016020 <_free_r+0x8c>
 8015f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015fa0:	1f0c      	subs	r4, r1, #4
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	bfb8      	it	lt
 8015fa6:	18e4      	addlt	r4, r4, r3
 8015fa8:	f000 f8e0 	bl	801616c <__malloc_lock>
 8015fac:	4a1d      	ldr	r2, [pc, #116]	@ (8016024 <_free_r+0x90>)
 8015fae:	6813      	ldr	r3, [r2, #0]
 8015fb0:	b933      	cbnz	r3, 8015fc0 <_free_r+0x2c>
 8015fb2:	6063      	str	r3, [r4, #4]
 8015fb4:	6014      	str	r4, [r2, #0]
 8015fb6:	4628      	mov	r0, r5
 8015fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015fbc:	f000 b8dc 	b.w	8016178 <__malloc_unlock>
 8015fc0:	42a3      	cmp	r3, r4
 8015fc2:	d908      	bls.n	8015fd6 <_free_r+0x42>
 8015fc4:	6820      	ldr	r0, [r4, #0]
 8015fc6:	1821      	adds	r1, r4, r0
 8015fc8:	428b      	cmp	r3, r1
 8015fca:	bf01      	itttt	eq
 8015fcc:	6819      	ldreq	r1, [r3, #0]
 8015fce:	685b      	ldreq	r3, [r3, #4]
 8015fd0:	1809      	addeq	r1, r1, r0
 8015fd2:	6021      	streq	r1, [r4, #0]
 8015fd4:	e7ed      	b.n	8015fb2 <_free_r+0x1e>
 8015fd6:	461a      	mov	r2, r3
 8015fd8:	685b      	ldr	r3, [r3, #4]
 8015fda:	b10b      	cbz	r3, 8015fe0 <_free_r+0x4c>
 8015fdc:	42a3      	cmp	r3, r4
 8015fde:	d9fa      	bls.n	8015fd6 <_free_r+0x42>
 8015fe0:	6811      	ldr	r1, [r2, #0]
 8015fe2:	1850      	adds	r0, r2, r1
 8015fe4:	42a0      	cmp	r0, r4
 8015fe6:	d10b      	bne.n	8016000 <_free_r+0x6c>
 8015fe8:	6820      	ldr	r0, [r4, #0]
 8015fea:	4401      	add	r1, r0
 8015fec:	1850      	adds	r0, r2, r1
 8015fee:	4283      	cmp	r3, r0
 8015ff0:	6011      	str	r1, [r2, #0]
 8015ff2:	d1e0      	bne.n	8015fb6 <_free_r+0x22>
 8015ff4:	6818      	ldr	r0, [r3, #0]
 8015ff6:	685b      	ldr	r3, [r3, #4]
 8015ff8:	6053      	str	r3, [r2, #4]
 8015ffa:	4408      	add	r0, r1
 8015ffc:	6010      	str	r0, [r2, #0]
 8015ffe:	e7da      	b.n	8015fb6 <_free_r+0x22>
 8016000:	d902      	bls.n	8016008 <_free_r+0x74>
 8016002:	230c      	movs	r3, #12
 8016004:	602b      	str	r3, [r5, #0]
 8016006:	e7d6      	b.n	8015fb6 <_free_r+0x22>
 8016008:	6820      	ldr	r0, [r4, #0]
 801600a:	1821      	adds	r1, r4, r0
 801600c:	428b      	cmp	r3, r1
 801600e:	bf04      	itt	eq
 8016010:	6819      	ldreq	r1, [r3, #0]
 8016012:	685b      	ldreq	r3, [r3, #4]
 8016014:	6063      	str	r3, [r4, #4]
 8016016:	bf04      	itt	eq
 8016018:	1809      	addeq	r1, r1, r0
 801601a:	6021      	streq	r1, [r4, #0]
 801601c:	6054      	str	r4, [r2, #4]
 801601e:	e7ca      	b.n	8015fb6 <_free_r+0x22>
 8016020:	bd38      	pop	{r3, r4, r5, pc}
 8016022:	bf00      	nop
 8016024:	20005e50 	.word	0x20005e50

08016028 <sbrk_aligned>:
 8016028:	b570      	push	{r4, r5, r6, lr}
 801602a:	4e0f      	ldr	r6, [pc, #60]	@ (8016068 <sbrk_aligned+0x40>)
 801602c:	460c      	mov	r4, r1
 801602e:	6831      	ldr	r1, [r6, #0]
 8016030:	4605      	mov	r5, r0
 8016032:	b911      	cbnz	r1, 801603a <sbrk_aligned+0x12>
 8016034:	f000 ff36 	bl	8016ea4 <_sbrk_r>
 8016038:	6030      	str	r0, [r6, #0]
 801603a:	4621      	mov	r1, r4
 801603c:	4628      	mov	r0, r5
 801603e:	f000 ff31 	bl	8016ea4 <_sbrk_r>
 8016042:	1c43      	adds	r3, r0, #1
 8016044:	d103      	bne.n	801604e <sbrk_aligned+0x26>
 8016046:	f04f 34ff 	mov.w	r4, #4294967295
 801604a:	4620      	mov	r0, r4
 801604c:	bd70      	pop	{r4, r5, r6, pc}
 801604e:	1cc4      	adds	r4, r0, #3
 8016050:	f024 0403 	bic.w	r4, r4, #3
 8016054:	42a0      	cmp	r0, r4
 8016056:	d0f8      	beq.n	801604a <sbrk_aligned+0x22>
 8016058:	1a21      	subs	r1, r4, r0
 801605a:	4628      	mov	r0, r5
 801605c:	f000 ff22 	bl	8016ea4 <_sbrk_r>
 8016060:	3001      	adds	r0, #1
 8016062:	d1f2      	bne.n	801604a <sbrk_aligned+0x22>
 8016064:	e7ef      	b.n	8016046 <sbrk_aligned+0x1e>
 8016066:	bf00      	nop
 8016068:	20005e4c 	.word	0x20005e4c

0801606c <_malloc_r>:
 801606c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016070:	1ccd      	adds	r5, r1, #3
 8016072:	f025 0503 	bic.w	r5, r5, #3
 8016076:	3508      	adds	r5, #8
 8016078:	2d0c      	cmp	r5, #12
 801607a:	bf38      	it	cc
 801607c:	250c      	movcc	r5, #12
 801607e:	2d00      	cmp	r5, #0
 8016080:	4606      	mov	r6, r0
 8016082:	db01      	blt.n	8016088 <_malloc_r+0x1c>
 8016084:	42a9      	cmp	r1, r5
 8016086:	d904      	bls.n	8016092 <_malloc_r+0x26>
 8016088:	230c      	movs	r3, #12
 801608a:	6033      	str	r3, [r6, #0]
 801608c:	2000      	movs	r0, #0
 801608e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016092:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016168 <_malloc_r+0xfc>
 8016096:	f000 f869 	bl	801616c <__malloc_lock>
 801609a:	f8d8 3000 	ldr.w	r3, [r8]
 801609e:	461c      	mov	r4, r3
 80160a0:	bb44      	cbnz	r4, 80160f4 <_malloc_r+0x88>
 80160a2:	4629      	mov	r1, r5
 80160a4:	4630      	mov	r0, r6
 80160a6:	f7ff ffbf 	bl	8016028 <sbrk_aligned>
 80160aa:	1c43      	adds	r3, r0, #1
 80160ac:	4604      	mov	r4, r0
 80160ae:	d158      	bne.n	8016162 <_malloc_r+0xf6>
 80160b0:	f8d8 4000 	ldr.w	r4, [r8]
 80160b4:	4627      	mov	r7, r4
 80160b6:	2f00      	cmp	r7, #0
 80160b8:	d143      	bne.n	8016142 <_malloc_r+0xd6>
 80160ba:	2c00      	cmp	r4, #0
 80160bc:	d04b      	beq.n	8016156 <_malloc_r+0xea>
 80160be:	6823      	ldr	r3, [r4, #0]
 80160c0:	4639      	mov	r1, r7
 80160c2:	4630      	mov	r0, r6
 80160c4:	eb04 0903 	add.w	r9, r4, r3
 80160c8:	f000 feec 	bl	8016ea4 <_sbrk_r>
 80160cc:	4581      	cmp	r9, r0
 80160ce:	d142      	bne.n	8016156 <_malloc_r+0xea>
 80160d0:	6821      	ldr	r1, [r4, #0]
 80160d2:	1a6d      	subs	r5, r5, r1
 80160d4:	4629      	mov	r1, r5
 80160d6:	4630      	mov	r0, r6
 80160d8:	f7ff ffa6 	bl	8016028 <sbrk_aligned>
 80160dc:	3001      	adds	r0, #1
 80160de:	d03a      	beq.n	8016156 <_malloc_r+0xea>
 80160e0:	6823      	ldr	r3, [r4, #0]
 80160e2:	442b      	add	r3, r5
 80160e4:	6023      	str	r3, [r4, #0]
 80160e6:	f8d8 3000 	ldr.w	r3, [r8]
 80160ea:	685a      	ldr	r2, [r3, #4]
 80160ec:	bb62      	cbnz	r2, 8016148 <_malloc_r+0xdc>
 80160ee:	f8c8 7000 	str.w	r7, [r8]
 80160f2:	e00f      	b.n	8016114 <_malloc_r+0xa8>
 80160f4:	6822      	ldr	r2, [r4, #0]
 80160f6:	1b52      	subs	r2, r2, r5
 80160f8:	d420      	bmi.n	801613c <_malloc_r+0xd0>
 80160fa:	2a0b      	cmp	r2, #11
 80160fc:	d917      	bls.n	801612e <_malloc_r+0xc2>
 80160fe:	1961      	adds	r1, r4, r5
 8016100:	42a3      	cmp	r3, r4
 8016102:	6025      	str	r5, [r4, #0]
 8016104:	bf18      	it	ne
 8016106:	6059      	strne	r1, [r3, #4]
 8016108:	6863      	ldr	r3, [r4, #4]
 801610a:	bf08      	it	eq
 801610c:	f8c8 1000 	streq.w	r1, [r8]
 8016110:	5162      	str	r2, [r4, r5]
 8016112:	604b      	str	r3, [r1, #4]
 8016114:	4630      	mov	r0, r6
 8016116:	f000 f82f 	bl	8016178 <__malloc_unlock>
 801611a:	f104 000b 	add.w	r0, r4, #11
 801611e:	1d23      	adds	r3, r4, #4
 8016120:	f020 0007 	bic.w	r0, r0, #7
 8016124:	1ac2      	subs	r2, r0, r3
 8016126:	bf1c      	itt	ne
 8016128:	1a1b      	subne	r3, r3, r0
 801612a:	50a3      	strne	r3, [r4, r2]
 801612c:	e7af      	b.n	801608e <_malloc_r+0x22>
 801612e:	6862      	ldr	r2, [r4, #4]
 8016130:	42a3      	cmp	r3, r4
 8016132:	bf0c      	ite	eq
 8016134:	f8c8 2000 	streq.w	r2, [r8]
 8016138:	605a      	strne	r2, [r3, #4]
 801613a:	e7eb      	b.n	8016114 <_malloc_r+0xa8>
 801613c:	4623      	mov	r3, r4
 801613e:	6864      	ldr	r4, [r4, #4]
 8016140:	e7ae      	b.n	80160a0 <_malloc_r+0x34>
 8016142:	463c      	mov	r4, r7
 8016144:	687f      	ldr	r7, [r7, #4]
 8016146:	e7b6      	b.n	80160b6 <_malloc_r+0x4a>
 8016148:	461a      	mov	r2, r3
 801614a:	685b      	ldr	r3, [r3, #4]
 801614c:	42a3      	cmp	r3, r4
 801614e:	d1fb      	bne.n	8016148 <_malloc_r+0xdc>
 8016150:	2300      	movs	r3, #0
 8016152:	6053      	str	r3, [r2, #4]
 8016154:	e7de      	b.n	8016114 <_malloc_r+0xa8>
 8016156:	230c      	movs	r3, #12
 8016158:	6033      	str	r3, [r6, #0]
 801615a:	4630      	mov	r0, r6
 801615c:	f000 f80c 	bl	8016178 <__malloc_unlock>
 8016160:	e794      	b.n	801608c <_malloc_r+0x20>
 8016162:	6005      	str	r5, [r0, #0]
 8016164:	e7d6      	b.n	8016114 <_malloc_r+0xa8>
 8016166:	bf00      	nop
 8016168:	20005e50 	.word	0x20005e50

0801616c <__malloc_lock>:
 801616c:	4801      	ldr	r0, [pc, #4]	@ (8016174 <__malloc_lock+0x8>)
 801616e:	f7ff bef9 	b.w	8015f64 <__retarget_lock_acquire_recursive>
 8016172:	bf00      	nop
 8016174:	20005e48 	.word	0x20005e48

08016178 <__malloc_unlock>:
 8016178:	4801      	ldr	r0, [pc, #4]	@ (8016180 <__malloc_unlock+0x8>)
 801617a:	f7ff bef4 	b.w	8015f66 <__retarget_lock_release_recursive>
 801617e:	bf00      	nop
 8016180:	20005e48 	.word	0x20005e48

08016184 <__ssputs_r>:
 8016184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016188:	688e      	ldr	r6, [r1, #8]
 801618a:	461f      	mov	r7, r3
 801618c:	42be      	cmp	r6, r7
 801618e:	680b      	ldr	r3, [r1, #0]
 8016190:	4682      	mov	sl, r0
 8016192:	460c      	mov	r4, r1
 8016194:	4690      	mov	r8, r2
 8016196:	d82d      	bhi.n	80161f4 <__ssputs_r+0x70>
 8016198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801619c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80161a0:	d026      	beq.n	80161f0 <__ssputs_r+0x6c>
 80161a2:	6965      	ldr	r5, [r4, #20]
 80161a4:	6909      	ldr	r1, [r1, #16]
 80161a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80161aa:	eba3 0901 	sub.w	r9, r3, r1
 80161ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80161b2:	1c7b      	adds	r3, r7, #1
 80161b4:	444b      	add	r3, r9
 80161b6:	106d      	asrs	r5, r5, #1
 80161b8:	429d      	cmp	r5, r3
 80161ba:	bf38      	it	cc
 80161bc:	461d      	movcc	r5, r3
 80161be:	0553      	lsls	r3, r2, #21
 80161c0:	d527      	bpl.n	8016212 <__ssputs_r+0x8e>
 80161c2:	4629      	mov	r1, r5
 80161c4:	f7ff ff52 	bl	801606c <_malloc_r>
 80161c8:	4606      	mov	r6, r0
 80161ca:	b360      	cbz	r0, 8016226 <__ssputs_r+0xa2>
 80161cc:	6921      	ldr	r1, [r4, #16]
 80161ce:	464a      	mov	r2, r9
 80161d0:	f7ff fed2 	bl	8015f78 <memcpy>
 80161d4:	89a3      	ldrh	r3, [r4, #12]
 80161d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80161da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80161de:	81a3      	strh	r3, [r4, #12]
 80161e0:	6126      	str	r6, [r4, #16]
 80161e2:	6165      	str	r5, [r4, #20]
 80161e4:	444e      	add	r6, r9
 80161e6:	eba5 0509 	sub.w	r5, r5, r9
 80161ea:	6026      	str	r6, [r4, #0]
 80161ec:	60a5      	str	r5, [r4, #8]
 80161ee:	463e      	mov	r6, r7
 80161f0:	42be      	cmp	r6, r7
 80161f2:	d900      	bls.n	80161f6 <__ssputs_r+0x72>
 80161f4:	463e      	mov	r6, r7
 80161f6:	6820      	ldr	r0, [r4, #0]
 80161f8:	4632      	mov	r2, r6
 80161fa:	4641      	mov	r1, r8
 80161fc:	f000 fe37 	bl	8016e6e <memmove>
 8016200:	68a3      	ldr	r3, [r4, #8]
 8016202:	1b9b      	subs	r3, r3, r6
 8016204:	60a3      	str	r3, [r4, #8]
 8016206:	6823      	ldr	r3, [r4, #0]
 8016208:	4433      	add	r3, r6
 801620a:	6023      	str	r3, [r4, #0]
 801620c:	2000      	movs	r0, #0
 801620e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016212:	462a      	mov	r2, r5
 8016214:	f000 fe56 	bl	8016ec4 <_realloc_r>
 8016218:	4606      	mov	r6, r0
 801621a:	2800      	cmp	r0, #0
 801621c:	d1e0      	bne.n	80161e0 <__ssputs_r+0x5c>
 801621e:	6921      	ldr	r1, [r4, #16]
 8016220:	4650      	mov	r0, sl
 8016222:	f7ff feb7 	bl	8015f94 <_free_r>
 8016226:	230c      	movs	r3, #12
 8016228:	f8ca 3000 	str.w	r3, [sl]
 801622c:	89a3      	ldrh	r3, [r4, #12]
 801622e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016232:	81a3      	strh	r3, [r4, #12]
 8016234:	f04f 30ff 	mov.w	r0, #4294967295
 8016238:	e7e9      	b.n	801620e <__ssputs_r+0x8a>
	...

0801623c <_svfiprintf_r>:
 801623c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016240:	4698      	mov	r8, r3
 8016242:	898b      	ldrh	r3, [r1, #12]
 8016244:	061b      	lsls	r3, r3, #24
 8016246:	b09d      	sub	sp, #116	@ 0x74
 8016248:	4607      	mov	r7, r0
 801624a:	460d      	mov	r5, r1
 801624c:	4614      	mov	r4, r2
 801624e:	d510      	bpl.n	8016272 <_svfiprintf_r+0x36>
 8016250:	690b      	ldr	r3, [r1, #16]
 8016252:	b973      	cbnz	r3, 8016272 <_svfiprintf_r+0x36>
 8016254:	2140      	movs	r1, #64	@ 0x40
 8016256:	f7ff ff09 	bl	801606c <_malloc_r>
 801625a:	6028      	str	r0, [r5, #0]
 801625c:	6128      	str	r0, [r5, #16]
 801625e:	b930      	cbnz	r0, 801626e <_svfiprintf_r+0x32>
 8016260:	230c      	movs	r3, #12
 8016262:	603b      	str	r3, [r7, #0]
 8016264:	f04f 30ff 	mov.w	r0, #4294967295
 8016268:	b01d      	add	sp, #116	@ 0x74
 801626a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801626e:	2340      	movs	r3, #64	@ 0x40
 8016270:	616b      	str	r3, [r5, #20]
 8016272:	2300      	movs	r3, #0
 8016274:	9309      	str	r3, [sp, #36]	@ 0x24
 8016276:	2320      	movs	r3, #32
 8016278:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801627c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016280:	2330      	movs	r3, #48	@ 0x30
 8016282:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016420 <_svfiprintf_r+0x1e4>
 8016286:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801628a:	f04f 0901 	mov.w	r9, #1
 801628e:	4623      	mov	r3, r4
 8016290:	469a      	mov	sl, r3
 8016292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016296:	b10a      	cbz	r2, 801629c <_svfiprintf_r+0x60>
 8016298:	2a25      	cmp	r2, #37	@ 0x25
 801629a:	d1f9      	bne.n	8016290 <_svfiprintf_r+0x54>
 801629c:	ebba 0b04 	subs.w	fp, sl, r4
 80162a0:	d00b      	beq.n	80162ba <_svfiprintf_r+0x7e>
 80162a2:	465b      	mov	r3, fp
 80162a4:	4622      	mov	r2, r4
 80162a6:	4629      	mov	r1, r5
 80162a8:	4638      	mov	r0, r7
 80162aa:	f7ff ff6b 	bl	8016184 <__ssputs_r>
 80162ae:	3001      	adds	r0, #1
 80162b0:	f000 80a7 	beq.w	8016402 <_svfiprintf_r+0x1c6>
 80162b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80162b6:	445a      	add	r2, fp
 80162b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80162ba:	f89a 3000 	ldrb.w	r3, [sl]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	f000 809f 	beq.w	8016402 <_svfiprintf_r+0x1c6>
 80162c4:	2300      	movs	r3, #0
 80162c6:	f04f 32ff 	mov.w	r2, #4294967295
 80162ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162ce:	f10a 0a01 	add.w	sl, sl, #1
 80162d2:	9304      	str	r3, [sp, #16]
 80162d4:	9307      	str	r3, [sp, #28]
 80162d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80162da:	931a      	str	r3, [sp, #104]	@ 0x68
 80162dc:	4654      	mov	r4, sl
 80162de:	2205      	movs	r2, #5
 80162e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162e4:	484e      	ldr	r0, [pc, #312]	@ (8016420 <_svfiprintf_r+0x1e4>)
 80162e6:	f7e9 ff8b 	bl	8000200 <memchr>
 80162ea:	9a04      	ldr	r2, [sp, #16]
 80162ec:	b9d8      	cbnz	r0, 8016326 <_svfiprintf_r+0xea>
 80162ee:	06d0      	lsls	r0, r2, #27
 80162f0:	bf44      	itt	mi
 80162f2:	2320      	movmi	r3, #32
 80162f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80162f8:	0711      	lsls	r1, r2, #28
 80162fa:	bf44      	itt	mi
 80162fc:	232b      	movmi	r3, #43	@ 0x2b
 80162fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016302:	f89a 3000 	ldrb.w	r3, [sl]
 8016306:	2b2a      	cmp	r3, #42	@ 0x2a
 8016308:	d015      	beq.n	8016336 <_svfiprintf_r+0xfa>
 801630a:	9a07      	ldr	r2, [sp, #28]
 801630c:	4654      	mov	r4, sl
 801630e:	2000      	movs	r0, #0
 8016310:	f04f 0c0a 	mov.w	ip, #10
 8016314:	4621      	mov	r1, r4
 8016316:	f811 3b01 	ldrb.w	r3, [r1], #1
 801631a:	3b30      	subs	r3, #48	@ 0x30
 801631c:	2b09      	cmp	r3, #9
 801631e:	d94b      	bls.n	80163b8 <_svfiprintf_r+0x17c>
 8016320:	b1b0      	cbz	r0, 8016350 <_svfiprintf_r+0x114>
 8016322:	9207      	str	r2, [sp, #28]
 8016324:	e014      	b.n	8016350 <_svfiprintf_r+0x114>
 8016326:	eba0 0308 	sub.w	r3, r0, r8
 801632a:	fa09 f303 	lsl.w	r3, r9, r3
 801632e:	4313      	orrs	r3, r2
 8016330:	9304      	str	r3, [sp, #16]
 8016332:	46a2      	mov	sl, r4
 8016334:	e7d2      	b.n	80162dc <_svfiprintf_r+0xa0>
 8016336:	9b03      	ldr	r3, [sp, #12]
 8016338:	1d19      	adds	r1, r3, #4
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	9103      	str	r1, [sp, #12]
 801633e:	2b00      	cmp	r3, #0
 8016340:	bfbb      	ittet	lt
 8016342:	425b      	neglt	r3, r3
 8016344:	f042 0202 	orrlt.w	r2, r2, #2
 8016348:	9307      	strge	r3, [sp, #28]
 801634a:	9307      	strlt	r3, [sp, #28]
 801634c:	bfb8      	it	lt
 801634e:	9204      	strlt	r2, [sp, #16]
 8016350:	7823      	ldrb	r3, [r4, #0]
 8016352:	2b2e      	cmp	r3, #46	@ 0x2e
 8016354:	d10a      	bne.n	801636c <_svfiprintf_r+0x130>
 8016356:	7863      	ldrb	r3, [r4, #1]
 8016358:	2b2a      	cmp	r3, #42	@ 0x2a
 801635a:	d132      	bne.n	80163c2 <_svfiprintf_r+0x186>
 801635c:	9b03      	ldr	r3, [sp, #12]
 801635e:	1d1a      	adds	r2, r3, #4
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	9203      	str	r2, [sp, #12]
 8016364:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016368:	3402      	adds	r4, #2
 801636a:	9305      	str	r3, [sp, #20]
 801636c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016430 <_svfiprintf_r+0x1f4>
 8016370:	7821      	ldrb	r1, [r4, #0]
 8016372:	2203      	movs	r2, #3
 8016374:	4650      	mov	r0, sl
 8016376:	f7e9 ff43 	bl	8000200 <memchr>
 801637a:	b138      	cbz	r0, 801638c <_svfiprintf_r+0x150>
 801637c:	9b04      	ldr	r3, [sp, #16]
 801637e:	eba0 000a 	sub.w	r0, r0, sl
 8016382:	2240      	movs	r2, #64	@ 0x40
 8016384:	4082      	lsls	r2, r0
 8016386:	4313      	orrs	r3, r2
 8016388:	3401      	adds	r4, #1
 801638a:	9304      	str	r3, [sp, #16]
 801638c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016390:	4824      	ldr	r0, [pc, #144]	@ (8016424 <_svfiprintf_r+0x1e8>)
 8016392:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016396:	2206      	movs	r2, #6
 8016398:	f7e9 ff32 	bl	8000200 <memchr>
 801639c:	2800      	cmp	r0, #0
 801639e:	d036      	beq.n	801640e <_svfiprintf_r+0x1d2>
 80163a0:	4b21      	ldr	r3, [pc, #132]	@ (8016428 <_svfiprintf_r+0x1ec>)
 80163a2:	bb1b      	cbnz	r3, 80163ec <_svfiprintf_r+0x1b0>
 80163a4:	9b03      	ldr	r3, [sp, #12]
 80163a6:	3307      	adds	r3, #7
 80163a8:	f023 0307 	bic.w	r3, r3, #7
 80163ac:	3308      	adds	r3, #8
 80163ae:	9303      	str	r3, [sp, #12]
 80163b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80163b2:	4433      	add	r3, r6
 80163b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80163b6:	e76a      	b.n	801628e <_svfiprintf_r+0x52>
 80163b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80163bc:	460c      	mov	r4, r1
 80163be:	2001      	movs	r0, #1
 80163c0:	e7a8      	b.n	8016314 <_svfiprintf_r+0xd8>
 80163c2:	2300      	movs	r3, #0
 80163c4:	3401      	adds	r4, #1
 80163c6:	9305      	str	r3, [sp, #20]
 80163c8:	4619      	mov	r1, r3
 80163ca:	f04f 0c0a 	mov.w	ip, #10
 80163ce:	4620      	mov	r0, r4
 80163d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163d4:	3a30      	subs	r2, #48	@ 0x30
 80163d6:	2a09      	cmp	r2, #9
 80163d8:	d903      	bls.n	80163e2 <_svfiprintf_r+0x1a6>
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d0c6      	beq.n	801636c <_svfiprintf_r+0x130>
 80163de:	9105      	str	r1, [sp, #20]
 80163e0:	e7c4      	b.n	801636c <_svfiprintf_r+0x130>
 80163e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80163e6:	4604      	mov	r4, r0
 80163e8:	2301      	movs	r3, #1
 80163ea:	e7f0      	b.n	80163ce <_svfiprintf_r+0x192>
 80163ec:	ab03      	add	r3, sp, #12
 80163ee:	9300      	str	r3, [sp, #0]
 80163f0:	462a      	mov	r2, r5
 80163f2:	4b0e      	ldr	r3, [pc, #56]	@ (801642c <_svfiprintf_r+0x1f0>)
 80163f4:	a904      	add	r1, sp, #16
 80163f6:	4638      	mov	r0, r7
 80163f8:	f3af 8000 	nop.w
 80163fc:	1c42      	adds	r2, r0, #1
 80163fe:	4606      	mov	r6, r0
 8016400:	d1d6      	bne.n	80163b0 <_svfiprintf_r+0x174>
 8016402:	89ab      	ldrh	r3, [r5, #12]
 8016404:	065b      	lsls	r3, r3, #25
 8016406:	f53f af2d 	bmi.w	8016264 <_svfiprintf_r+0x28>
 801640a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801640c:	e72c      	b.n	8016268 <_svfiprintf_r+0x2c>
 801640e:	ab03      	add	r3, sp, #12
 8016410:	9300      	str	r3, [sp, #0]
 8016412:	462a      	mov	r2, r5
 8016414:	4b05      	ldr	r3, [pc, #20]	@ (801642c <_svfiprintf_r+0x1f0>)
 8016416:	a904      	add	r1, sp, #16
 8016418:	4638      	mov	r0, r7
 801641a:	f000 fa49 	bl	80168b0 <_printf_i>
 801641e:	e7ed      	b.n	80163fc <_svfiprintf_r+0x1c0>
 8016420:	0801777f 	.word	0x0801777f
 8016424:	08017789 	.word	0x08017789
 8016428:	00000000 	.word	0x00000000
 801642c:	08016185 	.word	0x08016185
 8016430:	08017785 	.word	0x08017785

08016434 <_sungetc_r>:
 8016434:	b538      	push	{r3, r4, r5, lr}
 8016436:	1c4b      	adds	r3, r1, #1
 8016438:	4614      	mov	r4, r2
 801643a:	d103      	bne.n	8016444 <_sungetc_r+0x10>
 801643c:	f04f 35ff 	mov.w	r5, #4294967295
 8016440:	4628      	mov	r0, r5
 8016442:	bd38      	pop	{r3, r4, r5, pc}
 8016444:	8993      	ldrh	r3, [r2, #12]
 8016446:	f023 0320 	bic.w	r3, r3, #32
 801644a:	8193      	strh	r3, [r2, #12]
 801644c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801644e:	6852      	ldr	r2, [r2, #4]
 8016450:	b2cd      	uxtb	r5, r1
 8016452:	b18b      	cbz	r3, 8016478 <_sungetc_r+0x44>
 8016454:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8016456:	4293      	cmp	r3, r2
 8016458:	dd08      	ble.n	801646c <_sungetc_r+0x38>
 801645a:	6823      	ldr	r3, [r4, #0]
 801645c:	1e5a      	subs	r2, r3, #1
 801645e:	6022      	str	r2, [r4, #0]
 8016460:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016464:	6863      	ldr	r3, [r4, #4]
 8016466:	3301      	adds	r3, #1
 8016468:	6063      	str	r3, [r4, #4]
 801646a:	e7e9      	b.n	8016440 <_sungetc_r+0xc>
 801646c:	4621      	mov	r1, r4
 801646e:	f000 fcc4 	bl	8016dfa <__submore>
 8016472:	2800      	cmp	r0, #0
 8016474:	d0f1      	beq.n	801645a <_sungetc_r+0x26>
 8016476:	e7e1      	b.n	801643c <_sungetc_r+0x8>
 8016478:	6921      	ldr	r1, [r4, #16]
 801647a:	6823      	ldr	r3, [r4, #0]
 801647c:	b151      	cbz	r1, 8016494 <_sungetc_r+0x60>
 801647e:	4299      	cmp	r1, r3
 8016480:	d208      	bcs.n	8016494 <_sungetc_r+0x60>
 8016482:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016486:	42a9      	cmp	r1, r5
 8016488:	d104      	bne.n	8016494 <_sungetc_r+0x60>
 801648a:	3b01      	subs	r3, #1
 801648c:	3201      	adds	r2, #1
 801648e:	6023      	str	r3, [r4, #0]
 8016490:	6062      	str	r2, [r4, #4]
 8016492:	e7d5      	b.n	8016440 <_sungetc_r+0xc>
 8016494:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8016498:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801649c:	6363      	str	r3, [r4, #52]	@ 0x34
 801649e:	2303      	movs	r3, #3
 80164a0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80164a2:	4623      	mov	r3, r4
 80164a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80164a8:	6023      	str	r3, [r4, #0]
 80164aa:	2301      	movs	r3, #1
 80164ac:	e7dc      	b.n	8016468 <_sungetc_r+0x34>

080164ae <__ssrefill_r>:
 80164ae:	b510      	push	{r4, lr}
 80164b0:	460c      	mov	r4, r1
 80164b2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80164b4:	b169      	cbz	r1, 80164d2 <__ssrefill_r+0x24>
 80164b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80164ba:	4299      	cmp	r1, r3
 80164bc:	d001      	beq.n	80164c2 <__ssrefill_r+0x14>
 80164be:	f7ff fd69 	bl	8015f94 <_free_r>
 80164c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80164c4:	6063      	str	r3, [r4, #4]
 80164c6:	2000      	movs	r0, #0
 80164c8:	6360      	str	r0, [r4, #52]	@ 0x34
 80164ca:	b113      	cbz	r3, 80164d2 <__ssrefill_r+0x24>
 80164cc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80164ce:	6023      	str	r3, [r4, #0]
 80164d0:	bd10      	pop	{r4, pc}
 80164d2:	6923      	ldr	r3, [r4, #16]
 80164d4:	6023      	str	r3, [r4, #0]
 80164d6:	2300      	movs	r3, #0
 80164d8:	6063      	str	r3, [r4, #4]
 80164da:	89a3      	ldrh	r3, [r4, #12]
 80164dc:	f043 0320 	orr.w	r3, r3, #32
 80164e0:	81a3      	strh	r3, [r4, #12]
 80164e2:	f04f 30ff 	mov.w	r0, #4294967295
 80164e6:	e7f3      	b.n	80164d0 <__ssrefill_r+0x22>

080164e8 <__ssvfiscanf_r>:
 80164e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164ec:	460c      	mov	r4, r1
 80164ee:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80164f2:	2100      	movs	r1, #0
 80164f4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80164f8:	49a6      	ldr	r1, [pc, #664]	@ (8016794 <__ssvfiscanf_r+0x2ac>)
 80164fa:	91a0      	str	r1, [sp, #640]	@ 0x280
 80164fc:	f10d 0804 	add.w	r8, sp, #4
 8016500:	49a5      	ldr	r1, [pc, #660]	@ (8016798 <__ssvfiscanf_r+0x2b0>)
 8016502:	4fa6      	ldr	r7, [pc, #664]	@ (801679c <__ssvfiscanf_r+0x2b4>)
 8016504:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8016508:	4606      	mov	r6, r0
 801650a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801650c:	9300      	str	r3, [sp, #0]
 801650e:	f892 9000 	ldrb.w	r9, [r2]
 8016512:	f1b9 0f00 	cmp.w	r9, #0
 8016516:	f000 8158 	beq.w	80167ca <__ssvfiscanf_r+0x2e2>
 801651a:	f817 3009 	ldrb.w	r3, [r7, r9]
 801651e:	f013 0308 	ands.w	r3, r3, #8
 8016522:	f102 0501 	add.w	r5, r2, #1
 8016526:	d019      	beq.n	801655c <__ssvfiscanf_r+0x74>
 8016528:	6863      	ldr	r3, [r4, #4]
 801652a:	2b00      	cmp	r3, #0
 801652c:	dd0f      	ble.n	801654e <__ssvfiscanf_r+0x66>
 801652e:	6823      	ldr	r3, [r4, #0]
 8016530:	781a      	ldrb	r2, [r3, #0]
 8016532:	5cba      	ldrb	r2, [r7, r2]
 8016534:	0712      	lsls	r2, r2, #28
 8016536:	d401      	bmi.n	801653c <__ssvfiscanf_r+0x54>
 8016538:	462a      	mov	r2, r5
 801653a:	e7e8      	b.n	801650e <__ssvfiscanf_r+0x26>
 801653c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801653e:	3201      	adds	r2, #1
 8016540:	9245      	str	r2, [sp, #276]	@ 0x114
 8016542:	6862      	ldr	r2, [r4, #4]
 8016544:	3301      	adds	r3, #1
 8016546:	3a01      	subs	r2, #1
 8016548:	6062      	str	r2, [r4, #4]
 801654a:	6023      	str	r3, [r4, #0]
 801654c:	e7ec      	b.n	8016528 <__ssvfiscanf_r+0x40>
 801654e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016550:	4621      	mov	r1, r4
 8016552:	4630      	mov	r0, r6
 8016554:	4798      	blx	r3
 8016556:	2800      	cmp	r0, #0
 8016558:	d0e9      	beq.n	801652e <__ssvfiscanf_r+0x46>
 801655a:	e7ed      	b.n	8016538 <__ssvfiscanf_r+0x50>
 801655c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8016560:	f040 8085 	bne.w	801666e <__ssvfiscanf_r+0x186>
 8016564:	9341      	str	r3, [sp, #260]	@ 0x104
 8016566:	9343      	str	r3, [sp, #268]	@ 0x10c
 8016568:	7853      	ldrb	r3, [r2, #1]
 801656a:	2b2a      	cmp	r3, #42	@ 0x2a
 801656c:	bf02      	ittt	eq
 801656e:	2310      	moveq	r3, #16
 8016570:	1c95      	addeq	r5, r2, #2
 8016572:	9341      	streq	r3, [sp, #260]	@ 0x104
 8016574:	220a      	movs	r2, #10
 8016576:	46aa      	mov	sl, r5
 8016578:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801657c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8016580:	2b09      	cmp	r3, #9
 8016582:	d91e      	bls.n	80165c2 <__ssvfiscanf_r+0xda>
 8016584:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80167a0 <__ssvfiscanf_r+0x2b8>
 8016588:	2203      	movs	r2, #3
 801658a:	4658      	mov	r0, fp
 801658c:	f7e9 fe38 	bl	8000200 <memchr>
 8016590:	b138      	cbz	r0, 80165a2 <__ssvfiscanf_r+0xba>
 8016592:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016594:	eba0 000b 	sub.w	r0, r0, fp
 8016598:	2301      	movs	r3, #1
 801659a:	4083      	lsls	r3, r0
 801659c:	4313      	orrs	r3, r2
 801659e:	9341      	str	r3, [sp, #260]	@ 0x104
 80165a0:	4655      	mov	r5, sl
 80165a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80165a6:	2b78      	cmp	r3, #120	@ 0x78
 80165a8:	d806      	bhi.n	80165b8 <__ssvfiscanf_r+0xd0>
 80165aa:	2b57      	cmp	r3, #87	@ 0x57
 80165ac:	d810      	bhi.n	80165d0 <__ssvfiscanf_r+0xe8>
 80165ae:	2b25      	cmp	r3, #37	@ 0x25
 80165b0:	d05d      	beq.n	801666e <__ssvfiscanf_r+0x186>
 80165b2:	d857      	bhi.n	8016664 <__ssvfiscanf_r+0x17c>
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d075      	beq.n	80166a4 <__ssvfiscanf_r+0x1bc>
 80165b8:	2303      	movs	r3, #3
 80165ba:	9347      	str	r3, [sp, #284]	@ 0x11c
 80165bc:	230a      	movs	r3, #10
 80165be:	9342      	str	r3, [sp, #264]	@ 0x108
 80165c0:	e088      	b.n	80166d4 <__ssvfiscanf_r+0x1ec>
 80165c2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80165c4:	fb02 1103 	mla	r1, r2, r3, r1
 80165c8:	3930      	subs	r1, #48	@ 0x30
 80165ca:	9143      	str	r1, [sp, #268]	@ 0x10c
 80165cc:	4655      	mov	r5, sl
 80165ce:	e7d2      	b.n	8016576 <__ssvfiscanf_r+0x8e>
 80165d0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80165d4:	2a20      	cmp	r2, #32
 80165d6:	d8ef      	bhi.n	80165b8 <__ssvfiscanf_r+0xd0>
 80165d8:	a101      	add	r1, pc, #4	@ (adr r1, 80165e0 <__ssvfiscanf_r+0xf8>)
 80165da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80165de:	bf00      	nop
 80165e0:	080166b3 	.word	0x080166b3
 80165e4:	080165b9 	.word	0x080165b9
 80165e8:	080165b9 	.word	0x080165b9
 80165ec:	0801670d 	.word	0x0801670d
 80165f0:	080165b9 	.word	0x080165b9
 80165f4:	080165b9 	.word	0x080165b9
 80165f8:	080165b9 	.word	0x080165b9
 80165fc:	080165b9 	.word	0x080165b9
 8016600:	080165b9 	.word	0x080165b9
 8016604:	080165b9 	.word	0x080165b9
 8016608:	080165b9 	.word	0x080165b9
 801660c:	08016723 	.word	0x08016723
 8016610:	08016709 	.word	0x08016709
 8016614:	0801666b 	.word	0x0801666b
 8016618:	0801666b 	.word	0x0801666b
 801661c:	0801666b 	.word	0x0801666b
 8016620:	080165b9 	.word	0x080165b9
 8016624:	080166c5 	.word	0x080166c5
 8016628:	080165b9 	.word	0x080165b9
 801662c:	080165b9 	.word	0x080165b9
 8016630:	080165b9 	.word	0x080165b9
 8016634:	080165b9 	.word	0x080165b9
 8016638:	08016733 	.word	0x08016733
 801663c:	080166cd 	.word	0x080166cd
 8016640:	080166ab 	.word	0x080166ab
 8016644:	080165b9 	.word	0x080165b9
 8016648:	080165b9 	.word	0x080165b9
 801664c:	0801672f 	.word	0x0801672f
 8016650:	080165b9 	.word	0x080165b9
 8016654:	08016709 	.word	0x08016709
 8016658:	080165b9 	.word	0x080165b9
 801665c:	080165b9 	.word	0x080165b9
 8016660:	080166b3 	.word	0x080166b3
 8016664:	3b45      	subs	r3, #69	@ 0x45
 8016666:	2b02      	cmp	r3, #2
 8016668:	d8a6      	bhi.n	80165b8 <__ssvfiscanf_r+0xd0>
 801666a:	2305      	movs	r3, #5
 801666c:	e031      	b.n	80166d2 <__ssvfiscanf_r+0x1ea>
 801666e:	6863      	ldr	r3, [r4, #4]
 8016670:	2b00      	cmp	r3, #0
 8016672:	dd0d      	ble.n	8016690 <__ssvfiscanf_r+0x1a8>
 8016674:	6823      	ldr	r3, [r4, #0]
 8016676:	781a      	ldrb	r2, [r3, #0]
 8016678:	454a      	cmp	r2, r9
 801667a:	f040 80a6 	bne.w	80167ca <__ssvfiscanf_r+0x2e2>
 801667e:	3301      	adds	r3, #1
 8016680:	6862      	ldr	r2, [r4, #4]
 8016682:	6023      	str	r3, [r4, #0]
 8016684:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8016686:	3a01      	subs	r2, #1
 8016688:	3301      	adds	r3, #1
 801668a:	6062      	str	r2, [r4, #4]
 801668c:	9345      	str	r3, [sp, #276]	@ 0x114
 801668e:	e753      	b.n	8016538 <__ssvfiscanf_r+0x50>
 8016690:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016692:	4621      	mov	r1, r4
 8016694:	4630      	mov	r0, r6
 8016696:	4798      	blx	r3
 8016698:	2800      	cmp	r0, #0
 801669a:	d0eb      	beq.n	8016674 <__ssvfiscanf_r+0x18c>
 801669c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801669e:	2800      	cmp	r0, #0
 80166a0:	f040 808b 	bne.w	80167ba <__ssvfiscanf_r+0x2d2>
 80166a4:	f04f 30ff 	mov.w	r0, #4294967295
 80166a8:	e08b      	b.n	80167c2 <__ssvfiscanf_r+0x2da>
 80166aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80166ac:	f042 0220 	orr.w	r2, r2, #32
 80166b0:	9241      	str	r2, [sp, #260]	@ 0x104
 80166b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80166b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80166b8:	9241      	str	r2, [sp, #260]	@ 0x104
 80166ba:	2210      	movs	r2, #16
 80166bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80166be:	9242      	str	r2, [sp, #264]	@ 0x108
 80166c0:	d902      	bls.n	80166c8 <__ssvfiscanf_r+0x1e0>
 80166c2:	e005      	b.n	80166d0 <__ssvfiscanf_r+0x1e8>
 80166c4:	2300      	movs	r3, #0
 80166c6:	9342      	str	r3, [sp, #264]	@ 0x108
 80166c8:	2303      	movs	r3, #3
 80166ca:	e002      	b.n	80166d2 <__ssvfiscanf_r+0x1ea>
 80166cc:	2308      	movs	r3, #8
 80166ce:	9342      	str	r3, [sp, #264]	@ 0x108
 80166d0:	2304      	movs	r3, #4
 80166d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80166d4:	6863      	ldr	r3, [r4, #4]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	dd39      	ble.n	801674e <__ssvfiscanf_r+0x266>
 80166da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80166dc:	0659      	lsls	r1, r3, #25
 80166de:	d404      	bmi.n	80166ea <__ssvfiscanf_r+0x202>
 80166e0:	6823      	ldr	r3, [r4, #0]
 80166e2:	781a      	ldrb	r2, [r3, #0]
 80166e4:	5cba      	ldrb	r2, [r7, r2]
 80166e6:	0712      	lsls	r2, r2, #28
 80166e8:	d438      	bmi.n	801675c <__ssvfiscanf_r+0x274>
 80166ea:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80166ec:	2b02      	cmp	r3, #2
 80166ee:	dc47      	bgt.n	8016780 <__ssvfiscanf_r+0x298>
 80166f0:	466b      	mov	r3, sp
 80166f2:	4622      	mov	r2, r4
 80166f4:	a941      	add	r1, sp, #260	@ 0x104
 80166f6:	4630      	mov	r0, r6
 80166f8:	f000 f9f8 	bl	8016aec <_scanf_chars>
 80166fc:	2801      	cmp	r0, #1
 80166fe:	d064      	beq.n	80167ca <__ssvfiscanf_r+0x2e2>
 8016700:	2802      	cmp	r0, #2
 8016702:	f47f af19 	bne.w	8016538 <__ssvfiscanf_r+0x50>
 8016706:	e7c9      	b.n	801669c <__ssvfiscanf_r+0x1b4>
 8016708:	220a      	movs	r2, #10
 801670a:	e7d7      	b.n	80166bc <__ssvfiscanf_r+0x1d4>
 801670c:	4629      	mov	r1, r5
 801670e:	4640      	mov	r0, r8
 8016710:	f000 fb3a 	bl	8016d88 <__sccl>
 8016714:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801671a:	9341      	str	r3, [sp, #260]	@ 0x104
 801671c:	4605      	mov	r5, r0
 801671e:	2301      	movs	r3, #1
 8016720:	e7d7      	b.n	80166d2 <__ssvfiscanf_r+0x1ea>
 8016722:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016728:	9341      	str	r3, [sp, #260]	@ 0x104
 801672a:	2300      	movs	r3, #0
 801672c:	e7d1      	b.n	80166d2 <__ssvfiscanf_r+0x1ea>
 801672e:	2302      	movs	r3, #2
 8016730:	e7cf      	b.n	80166d2 <__ssvfiscanf_r+0x1ea>
 8016732:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8016734:	06c3      	lsls	r3, r0, #27
 8016736:	f53f aeff 	bmi.w	8016538 <__ssvfiscanf_r+0x50>
 801673a:	9b00      	ldr	r3, [sp, #0]
 801673c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801673e:	1d19      	adds	r1, r3, #4
 8016740:	9100      	str	r1, [sp, #0]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	07c0      	lsls	r0, r0, #31
 8016746:	bf4c      	ite	mi
 8016748:	801a      	strhmi	r2, [r3, #0]
 801674a:	601a      	strpl	r2, [r3, #0]
 801674c:	e6f4      	b.n	8016538 <__ssvfiscanf_r+0x50>
 801674e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016750:	4621      	mov	r1, r4
 8016752:	4630      	mov	r0, r6
 8016754:	4798      	blx	r3
 8016756:	2800      	cmp	r0, #0
 8016758:	d0bf      	beq.n	80166da <__ssvfiscanf_r+0x1f2>
 801675a:	e79f      	b.n	801669c <__ssvfiscanf_r+0x1b4>
 801675c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801675e:	3201      	adds	r2, #1
 8016760:	9245      	str	r2, [sp, #276]	@ 0x114
 8016762:	6862      	ldr	r2, [r4, #4]
 8016764:	3a01      	subs	r2, #1
 8016766:	2a00      	cmp	r2, #0
 8016768:	6062      	str	r2, [r4, #4]
 801676a:	dd02      	ble.n	8016772 <__ssvfiscanf_r+0x28a>
 801676c:	3301      	adds	r3, #1
 801676e:	6023      	str	r3, [r4, #0]
 8016770:	e7b6      	b.n	80166e0 <__ssvfiscanf_r+0x1f8>
 8016772:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016774:	4621      	mov	r1, r4
 8016776:	4630      	mov	r0, r6
 8016778:	4798      	blx	r3
 801677a:	2800      	cmp	r0, #0
 801677c:	d0b0      	beq.n	80166e0 <__ssvfiscanf_r+0x1f8>
 801677e:	e78d      	b.n	801669c <__ssvfiscanf_r+0x1b4>
 8016780:	2b04      	cmp	r3, #4
 8016782:	dc0f      	bgt.n	80167a4 <__ssvfiscanf_r+0x2bc>
 8016784:	466b      	mov	r3, sp
 8016786:	4622      	mov	r2, r4
 8016788:	a941      	add	r1, sp, #260	@ 0x104
 801678a:	4630      	mov	r0, r6
 801678c:	f000 fa08 	bl	8016ba0 <_scanf_i>
 8016790:	e7b4      	b.n	80166fc <__ssvfiscanf_r+0x214>
 8016792:	bf00      	nop
 8016794:	08016435 	.word	0x08016435
 8016798:	080164af 	.word	0x080164af
 801679c:	0801767f 	.word	0x0801767f
 80167a0:	08017785 	.word	0x08017785
 80167a4:	4b0a      	ldr	r3, [pc, #40]	@ (80167d0 <__ssvfiscanf_r+0x2e8>)
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	f43f aec6 	beq.w	8016538 <__ssvfiscanf_r+0x50>
 80167ac:	466b      	mov	r3, sp
 80167ae:	4622      	mov	r2, r4
 80167b0:	a941      	add	r1, sp, #260	@ 0x104
 80167b2:	4630      	mov	r0, r6
 80167b4:	f3af 8000 	nop.w
 80167b8:	e7a0      	b.n	80166fc <__ssvfiscanf_r+0x214>
 80167ba:	89a3      	ldrh	r3, [r4, #12]
 80167bc:	065b      	lsls	r3, r3, #25
 80167be:	f53f af71 	bmi.w	80166a4 <__ssvfiscanf_r+0x1bc>
 80167c2:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80167c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ca:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80167cc:	e7f9      	b.n	80167c2 <__ssvfiscanf_r+0x2da>
 80167ce:	bf00      	nop
 80167d0:	00000000 	.word	0x00000000

080167d4 <_printf_common>:
 80167d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167d8:	4616      	mov	r6, r2
 80167da:	4698      	mov	r8, r3
 80167dc:	688a      	ldr	r2, [r1, #8]
 80167de:	690b      	ldr	r3, [r1, #16]
 80167e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80167e4:	4293      	cmp	r3, r2
 80167e6:	bfb8      	it	lt
 80167e8:	4613      	movlt	r3, r2
 80167ea:	6033      	str	r3, [r6, #0]
 80167ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80167f0:	4607      	mov	r7, r0
 80167f2:	460c      	mov	r4, r1
 80167f4:	b10a      	cbz	r2, 80167fa <_printf_common+0x26>
 80167f6:	3301      	adds	r3, #1
 80167f8:	6033      	str	r3, [r6, #0]
 80167fa:	6823      	ldr	r3, [r4, #0]
 80167fc:	0699      	lsls	r1, r3, #26
 80167fe:	bf42      	ittt	mi
 8016800:	6833      	ldrmi	r3, [r6, #0]
 8016802:	3302      	addmi	r3, #2
 8016804:	6033      	strmi	r3, [r6, #0]
 8016806:	6825      	ldr	r5, [r4, #0]
 8016808:	f015 0506 	ands.w	r5, r5, #6
 801680c:	d106      	bne.n	801681c <_printf_common+0x48>
 801680e:	f104 0a19 	add.w	sl, r4, #25
 8016812:	68e3      	ldr	r3, [r4, #12]
 8016814:	6832      	ldr	r2, [r6, #0]
 8016816:	1a9b      	subs	r3, r3, r2
 8016818:	42ab      	cmp	r3, r5
 801681a:	dc26      	bgt.n	801686a <_printf_common+0x96>
 801681c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016820:	6822      	ldr	r2, [r4, #0]
 8016822:	3b00      	subs	r3, #0
 8016824:	bf18      	it	ne
 8016826:	2301      	movne	r3, #1
 8016828:	0692      	lsls	r2, r2, #26
 801682a:	d42b      	bmi.n	8016884 <_printf_common+0xb0>
 801682c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016830:	4641      	mov	r1, r8
 8016832:	4638      	mov	r0, r7
 8016834:	47c8      	blx	r9
 8016836:	3001      	adds	r0, #1
 8016838:	d01e      	beq.n	8016878 <_printf_common+0xa4>
 801683a:	6823      	ldr	r3, [r4, #0]
 801683c:	6922      	ldr	r2, [r4, #16]
 801683e:	f003 0306 	and.w	r3, r3, #6
 8016842:	2b04      	cmp	r3, #4
 8016844:	bf02      	ittt	eq
 8016846:	68e5      	ldreq	r5, [r4, #12]
 8016848:	6833      	ldreq	r3, [r6, #0]
 801684a:	1aed      	subeq	r5, r5, r3
 801684c:	68a3      	ldr	r3, [r4, #8]
 801684e:	bf0c      	ite	eq
 8016850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016854:	2500      	movne	r5, #0
 8016856:	4293      	cmp	r3, r2
 8016858:	bfc4      	itt	gt
 801685a:	1a9b      	subgt	r3, r3, r2
 801685c:	18ed      	addgt	r5, r5, r3
 801685e:	2600      	movs	r6, #0
 8016860:	341a      	adds	r4, #26
 8016862:	42b5      	cmp	r5, r6
 8016864:	d11a      	bne.n	801689c <_printf_common+0xc8>
 8016866:	2000      	movs	r0, #0
 8016868:	e008      	b.n	801687c <_printf_common+0xa8>
 801686a:	2301      	movs	r3, #1
 801686c:	4652      	mov	r2, sl
 801686e:	4641      	mov	r1, r8
 8016870:	4638      	mov	r0, r7
 8016872:	47c8      	blx	r9
 8016874:	3001      	adds	r0, #1
 8016876:	d103      	bne.n	8016880 <_printf_common+0xac>
 8016878:	f04f 30ff 	mov.w	r0, #4294967295
 801687c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016880:	3501      	adds	r5, #1
 8016882:	e7c6      	b.n	8016812 <_printf_common+0x3e>
 8016884:	18e1      	adds	r1, r4, r3
 8016886:	1c5a      	adds	r2, r3, #1
 8016888:	2030      	movs	r0, #48	@ 0x30
 801688a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801688e:	4422      	add	r2, r4
 8016890:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016894:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016898:	3302      	adds	r3, #2
 801689a:	e7c7      	b.n	801682c <_printf_common+0x58>
 801689c:	2301      	movs	r3, #1
 801689e:	4622      	mov	r2, r4
 80168a0:	4641      	mov	r1, r8
 80168a2:	4638      	mov	r0, r7
 80168a4:	47c8      	blx	r9
 80168a6:	3001      	adds	r0, #1
 80168a8:	d0e6      	beq.n	8016878 <_printf_common+0xa4>
 80168aa:	3601      	adds	r6, #1
 80168ac:	e7d9      	b.n	8016862 <_printf_common+0x8e>
	...

080168b0 <_printf_i>:
 80168b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80168b4:	7e0f      	ldrb	r7, [r1, #24]
 80168b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80168b8:	2f78      	cmp	r7, #120	@ 0x78
 80168ba:	4691      	mov	r9, r2
 80168bc:	4680      	mov	r8, r0
 80168be:	460c      	mov	r4, r1
 80168c0:	469a      	mov	sl, r3
 80168c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80168c6:	d807      	bhi.n	80168d8 <_printf_i+0x28>
 80168c8:	2f62      	cmp	r7, #98	@ 0x62
 80168ca:	d80a      	bhi.n	80168e2 <_printf_i+0x32>
 80168cc:	2f00      	cmp	r7, #0
 80168ce:	f000 80d1 	beq.w	8016a74 <_printf_i+0x1c4>
 80168d2:	2f58      	cmp	r7, #88	@ 0x58
 80168d4:	f000 80b8 	beq.w	8016a48 <_printf_i+0x198>
 80168d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80168dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80168e0:	e03a      	b.n	8016958 <_printf_i+0xa8>
 80168e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80168e6:	2b15      	cmp	r3, #21
 80168e8:	d8f6      	bhi.n	80168d8 <_printf_i+0x28>
 80168ea:	a101      	add	r1, pc, #4	@ (adr r1, 80168f0 <_printf_i+0x40>)
 80168ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80168f0:	08016949 	.word	0x08016949
 80168f4:	0801695d 	.word	0x0801695d
 80168f8:	080168d9 	.word	0x080168d9
 80168fc:	080168d9 	.word	0x080168d9
 8016900:	080168d9 	.word	0x080168d9
 8016904:	080168d9 	.word	0x080168d9
 8016908:	0801695d 	.word	0x0801695d
 801690c:	080168d9 	.word	0x080168d9
 8016910:	080168d9 	.word	0x080168d9
 8016914:	080168d9 	.word	0x080168d9
 8016918:	080168d9 	.word	0x080168d9
 801691c:	08016a5b 	.word	0x08016a5b
 8016920:	08016987 	.word	0x08016987
 8016924:	08016a15 	.word	0x08016a15
 8016928:	080168d9 	.word	0x080168d9
 801692c:	080168d9 	.word	0x080168d9
 8016930:	08016a7d 	.word	0x08016a7d
 8016934:	080168d9 	.word	0x080168d9
 8016938:	08016987 	.word	0x08016987
 801693c:	080168d9 	.word	0x080168d9
 8016940:	080168d9 	.word	0x080168d9
 8016944:	08016a1d 	.word	0x08016a1d
 8016948:	6833      	ldr	r3, [r6, #0]
 801694a:	1d1a      	adds	r2, r3, #4
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	6032      	str	r2, [r6, #0]
 8016950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016954:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016958:	2301      	movs	r3, #1
 801695a:	e09c      	b.n	8016a96 <_printf_i+0x1e6>
 801695c:	6833      	ldr	r3, [r6, #0]
 801695e:	6820      	ldr	r0, [r4, #0]
 8016960:	1d19      	adds	r1, r3, #4
 8016962:	6031      	str	r1, [r6, #0]
 8016964:	0606      	lsls	r6, r0, #24
 8016966:	d501      	bpl.n	801696c <_printf_i+0xbc>
 8016968:	681d      	ldr	r5, [r3, #0]
 801696a:	e003      	b.n	8016974 <_printf_i+0xc4>
 801696c:	0645      	lsls	r5, r0, #25
 801696e:	d5fb      	bpl.n	8016968 <_printf_i+0xb8>
 8016970:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016974:	2d00      	cmp	r5, #0
 8016976:	da03      	bge.n	8016980 <_printf_i+0xd0>
 8016978:	232d      	movs	r3, #45	@ 0x2d
 801697a:	426d      	negs	r5, r5
 801697c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016980:	4858      	ldr	r0, [pc, #352]	@ (8016ae4 <_printf_i+0x234>)
 8016982:	230a      	movs	r3, #10
 8016984:	e011      	b.n	80169aa <_printf_i+0xfa>
 8016986:	6821      	ldr	r1, [r4, #0]
 8016988:	6833      	ldr	r3, [r6, #0]
 801698a:	0608      	lsls	r0, r1, #24
 801698c:	f853 5b04 	ldr.w	r5, [r3], #4
 8016990:	d402      	bmi.n	8016998 <_printf_i+0xe8>
 8016992:	0649      	lsls	r1, r1, #25
 8016994:	bf48      	it	mi
 8016996:	b2ad      	uxthmi	r5, r5
 8016998:	2f6f      	cmp	r7, #111	@ 0x6f
 801699a:	4852      	ldr	r0, [pc, #328]	@ (8016ae4 <_printf_i+0x234>)
 801699c:	6033      	str	r3, [r6, #0]
 801699e:	bf14      	ite	ne
 80169a0:	230a      	movne	r3, #10
 80169a2:	2308      	moveq	r3, #8
 80169a4:	2100      	movs	r1, #0
 80169a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80169aa:	6866      	ldr	r6, [r4, #4]
 80169ac:	60a6      	str	r6, [r4, #8]
 80169ae:	2e00      	cmp	r6, #0
 80169b0:	db05      	blt.n	80169be <_printf_i+0x10e>
 80169b2:	6821      	ldr	r1, [r4, #0]
 80169b4:	432e      	orrs	r6, r5
 80169b6:	f021 0104 	bic.w	r1, r1, #4
 80169ba:	6021      	str	r1, [r4, #0]
 80169bc:	d04b      	beq.n	8016a56 <_printf_i+0x1a6>
 80169be:	4616      	mov	r6, r2
 80169c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80169c4:	fb03 5711 	mls	r7, r3, r1, r5
 80169c8:	5dc7      	ldrb	r7, [r0, r7]
 80169ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80169ce:	462f      	mov	r7, r5
 80169d0:	42bb      	cmp	r3, r7
 80169d2:	460d      	mov	r5, r1
 80169d4:	d9f4      	bls.n	80169c0 <_printf_i+0x110>
 80169d6:	2b08      	cmp	r3, #8
 80169d8:	d10b      	bne.n	80169f2 <_printf_i+0x142>
 80169da:	6823      	ldr	r3, [r4, #0]
 80169dc:	07df      	lsls	r7, r3, #31
 80169de:	d508      	bpl.n	80169f2 <_printf_i+0x142>
 80169e0:	6923      	ldr	r3, [r4, #16]
 80169e2:	6861      	ldr	r1, [r4, #4]
 80169e4:	4299      	cmp	r1, r3
 80169e6:	bfde      	ittt	le
 80169e8:	2330      	movle	r3, #48	@ 0x30
 80169ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80169ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80169f2:	1b92      	subs	r2, r2, r6
 80169f4:	6122      	str	r2, [r4, #16]
 80169f6:	f8cd a000 	str.w	sl, [sp]
 80169fa:	464b      	mov	r3, r9
 80169fc:	aa03      	add	r2, sp, #12
 80169fe:	4621      	mov	r1, r4
 8016a00:	4640      	mov	r0, r8
 8016a02:	f7ff fee7 	bl	80167d4 <_printf_common>
 8016a06:	3001      	adds	r0, #1
 8016a08:	d14a      	bne.n	8016aa0 <_printf_i+0x1f0>
 8016a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8016a0e:	b004      	add	sp, #16
 8016a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a14:	6823      	ldr	r3, [r4, #0]
 8016a16:	f043 0320 	orr.w	r3, r3, #32
 8016a1a:	6023      	str	r3, [r4, #0]
 8016a1c:	4832      	ldr	r0, [pc, #200]	@ (8016ae8 <_printf_i+0x238>)
 8016a1e:	2778      	movs	r7, #120	@ 0x78
 8016a20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016a24:	6823      	ldr	r3, [r4, #0]
 8016a26:	6831      	ldr	r1, [r6, #0]
 8016a28:	061f      	lsls	r7, r3, #24
 8016a2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8016a2e:	d402      	bmi.n	8016a36 <_printf_i+0x186>
 8016a30:	065f      	lsls	r7, r3, #25
 8016a32:	bf48      	it	mi
 8016a34:	b2ad      	uxthmi	r5, r5
 8016a36:	6031      	str	r1, [r6, #0]
 8016a38:	07d9      	lsls	r1, r3, #31
 8016a3a:	bf44      	itt	mi
 8016a3c:	f043 0320 	orrmi.w	r3, r3, #32
 8016a40:	6023      	strmi	r3, [r4, #0]
 8016a42:	b11d      	cbz	r5, 8016a4c <_printf_i+0x19c>
 8016a44:	2310      	movs	r3, #16
 8016a46:	e7ad      	b.n	80169a4 <_printf_i+0xf4>
 8016a48:	4826      	ldr	r0, [pc, #152]	@ (8016ae4 <_printf_i+0x234>)
 8016a4a:	e7e9      	b.n	8016a20 <_printf_i+0x170>
 8016a4c:	6823      	ldr	r3, [r4, #0]
 8016a4e:	f023 0320 	bic.w	r3, r3, #32
 8016a52:	6023      	str	r3, [r4, #0]
 8016a54:	e7f6      	b.n	8016a44 <_printf_i+0x194>
 8016a56:	4616      	mov	r6, r2
 8016a58:	e7bd      	b.n	80169d6 <_printf_i+0x126>
 8016a5a:	6833      	ldr	r3, [r6, #0]
 8016a5c:	6825      	ldr	r5, [r4, #0]
 8016a5e:	6961      	ldr	r1, [r4, #20]
 8016a60:	1d18      	adds	r0, r3, #4
 8016a62:	6030      	str	r0, [r6, #0]
 8016a64:	062e      	lsls	r6, r5, #24
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	d501      	bpl.n	8016a6e <_printf_i+0x1be>
 8016a6a:	6019      	str	r1, [r3, #0]
 8016a6c:	e002      	b.n	8016a74 <_printf_i+0x1c4>
 8016a6e:	0668      	lsls	r0, r5, #25
 8016a70:	d5fb      	bpl.n	8016a6a <_printf_i+0x1ba>
 8016a72:	8019      	strh	r1, [r3, #0]
 8016a74:	2300      	movs	r3, #0
 8016a76:	6123      	str	r3, [r4, #16]
 8016a78:	4616      	mov	r6, r2
 8016a7a:	e7bc      	b.n	80169f6 <_printf_i+0x146>
 8016a7c:	6833      	ldr	r3, [r6, #0]
 8016a7e:	1d1a      	adds	r2, r3, #4
 8016a80:	6032      	str	r2, [r6, #0]
 8016a82:	681e      	ldr	r6, [r3, #0]
 8016a84:	6862      	ldr	r2, [r4, #4]
 8016a86:	2100      	movs	r1, #0
 8016a88:	4630      	mov	r0, r6
 8016a8a:	f7e9 fbb9 	bl	8000200 <memchr>
 8016a8e:	b108      	cbz	r0, 8016a94 <_printf_i+0x1e4>
 8016a90:	1b80      	subs	r0, r0, r6
 8016a92:	6060      	str	r0, [r4, #4]
 8016a94:	6863      	ldr	r3, [r4, #4]
 8016a96:	6123      	str	r3, [r4, #16]
 8016a98:	2300      	movs	r3, #0
 8016a9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016a9e:	e7aa      	b.n	80169f6 <_printf_i+0x146>
 8016aa0:	6923      	ldr	r3, [r4, #16]
 8016aa2:	4632      	mov	r2, r6
 8016aa4:	4649      	mov	r1, r9
 8016aa6:	4640      	mov	r0, r8
 8016aa8:	47d0      	blx	sl
 8016aaa:	3001      	adds	r0, #1
 8016aac:	d0ad      	beq.n	8016a0a <_printf_i+0x15a>
 8016aae:	6823      	ldr	r3, [r4, #0]
 8016ab0:	079b      	lsls	r3, r3, #30
 8016ab2:	d413      	bmi.n	8016adc <_printf_i+0x22c>
 8016ab4:	68e0      	ldr	r0, [r4, #12]
 8016ab6:	9b03      	ldr	r3, [sp, #12]
 8016ab8:	4298      	cmp	r0, r3
 8016aba:	bfb8      	it	lt
 8016abc:	4618      	movlt	r0, r3
 8016abe:	e7a6      	b.n	8016a0e <_printf_i+0x15e>
 8016ac0:	2301      	movs	r3, #1
 8016ac2:	4632      	mov	r2, r6
 8016ac4:	4649      	mov	r1, r9
 8016ac6:	4640      	mov	r0, r8
 8016ac8:	47d0      	blx	sl
 8016aca:	3001      	adds	r0, #1
 8016acc:	d09d      	beq.n	8016a0a <_printf_i+0x15a>
 8016ace:	3501      	adds	r5, #1
 8016ad0:	68e3      	ldr	r3, [r4, #12]
 8016ad2:	9903      	ldr	r1, [sp, #12]
 8016ad4:	1a5b      	subs	r3, r3, r1
 8016ad6:	42ab      	cmp	r3, r5
 8016ad8:	dcf2      	bgt.n	8016ac0 <_printf_i+0x210>
 8016ada:	e7eb      	b.n	8016ab4 <_printf_i+0x204>
 8016adc:	2500      	movs	r5, #0
 8016ade:	f104 0619 	add.w	r6, r4, #25
 8016ae2:	e7f5      	b.n	8016ad0 <_printf_i+0x220>
 8016ae4:	08017790 	.word	0x08017790
 8016ae8:	080177a1 	.word	0x080177a1

08016aec <_scanf_chars>:
 8016aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016af0:	4615      	mov	r5, r2
 8016af2:	688a      	ldr	r2, [r1, #8]
 8016af4:	4680      	mov	r8, r0
 8016af6:	460c      	mov	r4, r1
 8016af8:	b932      	cbnz	r2, 8016b08 <_scanf_chars+0x1c>
 8016afa:	698a      	ldr	r2, [r1, #24]
 8016afc:	2a00      	cmp	r2, #0
 8016afe:	bf14      	ite	ne
 8016b00:	f04f 32ff 	movne.w	r2, #4294967295
 8016b04:	2201      	moveq	r2, #1
 8016b06:	608a      	str	r2, [r1, #8]
 8016b08:	6822      	ldr	r2, [r4, #0]
 8016b0a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8016b9c <_scanf_chars+0xb0>
 8016b0e:	06d1      	lsls	r1, r2, #27
 8016b10:	bf5f      	itttt	pl
 8016b12:	681a      	ldrpl	r2, [r3, #0]
 8016b14:	1d11      	addpl	r1, r2, #4
 8016b16:	6019      	strpl	r1, [r3, #0]
 8016b18:	6816      	ldrpl	r6, [r2, #0]
 8016b1a:	2700      	movs	r7, #0
 8016b1c:	69a0      	ldr	r0, [r4, #24]
 8016b1e:	b188      	cbz	r0, 8016b44 <_scanf_chars+0x58>
 8016b20:	2801      	cmp	r0, #1
 8016b22:	d107      	bne.n	8016b34 <_scanf_chars+0x48>
 8016b24:	682b      	ldr	r3, [r5, #0]
 8016b26:	781a      	ldrb	r2, [r3, #0]
 8016b28:	6963      	ldr	r3, [r4, #20]
 8016b2a:	5c9b      	ldrb	r3, [r3, r2]
 8016b2c:	b953      	cbnz	r3, 8016b44 <_scanf_chars+0x58>
 8016b2e:	2f00      	cmp	r7, #0
 8016b30:	d031      	beq.n	8016b96 <_scanf_chars+0xaa>
 8016b32:	e022      	b.n	8016b7a <_scanf_chars+0x8e>
 8016b34:	2802      	cmp	r0, #2
 8016b36:	d120      	bne.n	8016b7a <_scanf_chars+0x8e>
 8016b38:	682b      	ldr	r3, [r5, #0]
 8016b3a:	781b      	ldrb	r3, [r3, #0]
 8016b3c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8016b40:	071b      	lsls	r3, r3, #28
 8016b42:	d41a      	bmi.n	8016b7a <_scanf_chars+0x8e>
 8016b44:	6823      	ldr	r3, [r4, #0]
 8016b46:	06da      	lsls	r2, r3, #27
 8016b48:	bf5e      	ittt	pl
 8016b4a:	682b      	ldrpl	r3, [r5, #0]
 8016b4c:	781b      	ldrbpl	r3, [r3, #0]
 8016b4e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016b52:	682a      	ldr	r2, [r5, #0]
 8016b54:	686b      	ldr	r3, [r5, #4]
 8016b56:	3201      	adds	r2, #1
 8016b58:	602a      	str	r2, [r5, #0]
 8016b5a:	68a2      	ldr	r2, [r4, #8]
 8016b5c:	3b01      	subs	r3, #1
 8016b5e:	3a01      	subs	r2, #1
 8016b60:	606b      	str	r3, [r5, #4]
 8016b62:	3701      	adds	r7, #1
 8016b64:	60a2      	str	r2, [r4, #8]
 8016b66:	b142      	cbz	r2, 8016b7a <_scanf_chars+0x8e>
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	dcd7      	bgt.n	8016b1c <_scanf_chars+0x30>
 8016b6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016b70:	4629      	mov	r1, r5
 8016b72:	4640      	mov	r0, r8
 8016b74:	4798      	blx	r3
 8016b76:	2800      	cmp	r0, #0
 8016b78:	d0d0      	beq.n	8016b1c <_scanf_chars+0x30>
 8016b7a:	6823      	ldr	r3, [r4, #0]
 8016b7c:	f013 0310 	ands.w	r3, r3, #16
 8016b80:	d105      	bne.n	8016b8e <_scanf_chars+0xa2>
 8016b82:	68e2      	ldr	r2, [r4, #12]
 8016b84:	3201      	adds	r2, #1
 8016b86:	60e2      	str	r2, [r4, #12]
 8016b88:	69a2      	ldr	r2, [r4, #24]
 8016b8a:	b102      	cbz	r2, 8016b8e <_scanf_chars+0xa2>
 8016b8c:	7033      	strb	r3, [r6, #0]
 8016b8e:	6923      	ldr	r3, [r4, #16]
 8016b90:	443b      	add	r3, r7
 8016b92:	6123      	str	r3, [r4, #16]
 8016b94:	2000      	movs	r0, #0
 8016b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b9a:	bf00      	nop
 8016b9c:	0801767f 	.word	0x0801767f

08016ba0 <_scanf_i>:
 8016ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ba4:	4698      	mov	r8, r3
 8016ba6:	4b74      	ldr	r3, [pc, #464]	@ (8016d78 <_scanf_i+0x1d8>)
 8016ba8:	460c      	mov	r4, r1
 8016baa:	4682      	mov	sl, r0
 8016bac:	4616      	mov	r6, r2
 8016bae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016bb2:	b087      	sub	sp, #28
 8016bb4:	ab03      	add	r3, sp, #12
 8016bb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016bba:	4b70      	ldr	r3, [pc, #448]	@ (8016d7c <_scanf_i+0x1dc>)
 8016bbc:	69a1      	ldr	r1, [r4, #24]
 8016bbe:	4a70      	ldr	r2, [pc, #448]	@ (8016d80 <_scanf_i+0x1e0>)
 8016bc0:	2903      	cmp	r1, #3
 8016bc2:	bf08      	it	eq
 8016bc4:	461a      	moveq	r2, r3
 8016bc6:	68a3      	ldr	r3, [r4, #8]
 8016bc8:	9201      	str	r2, [sp, #4]
 8016bca:	1e5a      	subs	r2, r3, #1
 8016bcc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8016bd0:	bf88      	it	hi
 8016bd2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8016bd6:	4627      	mov	r7, r4
 8016bd8:	bf82      	ittt	hi
 8016bda:	eb03 0905 	addhi.w	r9, r3, r5
 8016bde:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8016be2:	60a3      	strhi	r3, [r4, #8]
 8016be4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016be8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8016bec:	bf98      	it	ls
 8016bee:	f04f 0900 	movls.w	r9, #0
 8016bf2:	6023      	str	r3, [r4, #0]
 8016bf4:	463d      	mov	r5, r7
 8016bf6:	f04f 0b00 	mov.w	fp, #0
 8016bfa:	6831      	ldr	r1, [r6, #0]
 8016bfc:	ab03      	add	r3, sp, #12
 8016bfe:	7809      	ldrb	r1, [r1, #0]
 8016c00:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016c04:	2202      	movs	r2, #2
 8016c06:	f7e9 fafb 	bl	8000200 <memchr>
 8016c0a:	b328      	cbz	r0, 8016c58 <_scanf_i+0xb8>
 8016c0c:	f1bb 0f01 	cmp.w	fp, #1
 8016c10:	d159      	bne.n	8016cc6 <_scanf_i+0x126>
 8016c12:	6862      	ldr	r2, [r4, #4]
 8016c14:	b92a      	cbnz	r2, 8016c22 <_scanf_i+0x82>
 8016c16:	6822      	ldr	r2, [r4, #0]
 8016c18:	2108      	movs	r1, #8
 8016c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016c1e:	6061      	str	r1, [r4, #4]
 8016c20:	6022      	str	r2, [r4, #0]
 8016c22:	6822      	ldr	r2, [r4, #0]
 8016c24:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8016c28:	6022      	str	r2, [r4, #0]
 8016c2a:	68a2      	ldr	r2, [r4, #8]
 8016c2c:	1e51      	subs	r1, r2, #1
 8016c2e:	60a1      	str	r1, [r4, #8]
 8016c30:	b192      	cbz	r2, 8016c58 <_scanf_i+0xb8>
 8016c32:	6832      	ldr	r2, [r6, #0]
 8016c34:	1c51      	adds	r1, r2, #1
 8016c36:	6031      	str	r1, [r6, #0]
 8016c38:	7812      	ldrb	r2, [r2, #0]
 8016c3a:	f805 2b01 	strb.w	r2, [r5], #1
 8016c3e:	6872      	ldr	r2, [r6, #4]
 8016c40:	3a01      	subs	r2, #1
 8016c42:	2a00      	cmp	r2, #0
 8016c44:	6072      	str	r2, [r6, #4]
 8016c46:	dc07      	bgt.n	8016c58 <_scanf_i+0xb8>
 8016c48:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8016c4c:	4631      	mov	r1, r6
 8016c4e:	4650      	mov	r0, sl
 8016c50:	4790      	blx	r2
 8016c52:	2800      	cmp	r0, #0
 8016c54:	f040 8085 	bne.w	8016d62 <_scanf_i+0x1c2>
 8016c58:	f10b 0b01 	add.w	fp, fp, #1
 8016c5c:	f1bb 0f03 	cmp.w	fp, #3
 8016c60:	d1cb      	bne.n	8016bfa <_scanf_i+0x5a>
 8016c62:	6863      	ldr	r3, [r4, #4]
 8016c64:	b90b      	cbnz	r3, 8016c6a <_scanf_i+0xca>
 8016c66:	230a      	movs	r3, #10
 8016c68:	6063      	str	r3, [r4, #4]
 8016c6a:	6863      	ldr	r3, [r4, #4]
 8016c6c:	4945      	ldr	r1, [pc, #276]	@ (8016d84 <_scanf_i+0x1e4>)
 8016c6e:	6960      	ldr	r0, [r4, #20]
 8016c70:	1ac9      	subs	r1, r1, r3
 8016c72:	f000 f889 	bl	8016d88 <__sccl>
 8016c76:	f04f 0b00 	mov.w	fp, #0
 8016c7a:	68a3      	ldr	r3, [r4, #8]
 8016c7c:	6822      	ldr	r2, [r4, #0]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d03d      	beq.n	8016cfe <_scanf_i+0x15e>
 8016c82:	6831      	ldr	r1, [r6, #0]
 8016c84:	6960      	ldr	r0, [r4, #20]
 8016c86:	f891 c000 	ldrb.w	ip, [r1]
 8016c8a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	d035      	beq.n	8016cfe <_scanf_i+0x15e>
 8016c92:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8016c96:	d124      	bne.n	8016ce2 <_scanf_i+0x142>
 8016c98:	0510      	lsls	r0, r2, #20
 8016c9a:	d522      	bpl.n	8016ce2 <_scanf_i+0x142>
 8016c9c:	f10b 0b01 	add.w	fp, fp, #1
 8016ca0:	f1b9 0f00 	cmp.w	r9, #0
 8016ca4:	d003      	beq.n	8016cae <_scanf_i+0x10e>
 8016ca6:	3301      	adds	r3, #1
 8016ca8:	f109 39ff 	add.w	r9, r9, #4294967295
 8016cac:	60a3      	str	r3, [r4, #8]
 8016cae:	6873      	ldr	r3, [r6, #4]
 8016cb0:	3b01      	subs	r3, #1
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	6073      	str	r3, [r6, #4]
 8016cb6:	dd1b      	ble.n	8016cf0 <_scanf_i+0x150>
 8016cb8:	6833      	ldr	r3, [r6, #0]
 8016cba:	3301      	adds	r3, #1
 8016cbc:	6033      	str	r3, [r6, #0]
 8016cbe:	68a3      	ldr	r3, [r4, #8]
 8016cc0:	3b01      	subs	r3, #1
 8016cc2:	60a3      	str	r3, [r4, #8]
 8016cc4:	e7d9      	b.n	8016c7a <_scanf_i+0xda>
 8016cc6:	f1bb 0f02 	cmp.w	fp, #2
 8016cca:	d1ae      	bne.n	8016c2a <_scanf_i+0x8a>
 8016ccc:	6822      	ldr	r2, [r4, #0]
 8016cce:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8016cd2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8016cd6:	d1c4      	bne.n	8016c62 <_scanf_i+0xc2>
 8016cd8:	2110      	movs	r1, #16
 8016cda:	6061      	str	r1, [r4, #4]
 8016cdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016ce0:	e7a2      	b.n	8016c28 <_scanf_i+0x88>
 8016ce2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8016ce6:	6022      	str	r2, [r4, #0]
 8016ce8:	780b      	ldrb	r3, [r1, #0]
 8016cea:	f805 3b01 	strb.w	r3, [r5], #1
 8016cee:	e7de      	b.n	8016cae <_scanf_i+0x10e>
 8016cf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016cf4:	4631      	mov	r1, r6
 8016cf6:	4650      	mov	r0, sl
 8016cf8:	4798      	blx	r3
 8016cfa:	2800      	cmp	r0, #0
 8016cfc:	d0df      	beq.n	8016cbe <_scanf_i+0x11e>
 8016cfe:	6823      	ldr	r3, [r4, #0]
 8016d00:	05d9      	lsls	r1, r3, #23
 8016d02:	d50d      	bpl.n	8016d20 <_scanf_i+0x180>
 8016d04:	42bd      	cmp	r5, r7
 8016d06:	d909      	bls.n	8016d1c <_scanf_i+0x17c>
 8016d08:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016d0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016d10:	4632      	mov	r2, r6
 8016d12:	4650      	mov	r0, sl
 8016d14:	4798      	blx	r3
 8016d16:	f105 39ff 	add.w	r9, r5, #4294967295
 8016d1a:	464d      	mov	r5, r9
 8016d1c:	42bd      	cmp	r5, r7
 8016d1e:	d028      	beq.n	8016d72 <_scanf_i+0x1d2>
 8016d20:	6822      	ldr	r2, [r4, #0]
 8016d22:	f012 0210 	ands.w	r2, r2, #16
 8016d26:	d113      	bne.n	8016d50 <_scanf_i+0x1b0>
 8016d28:	702a      	strb	r2, [r5, #0]
 8016d2a:	6863      	ldr	r3, [r4, #4]
 8016d2c:	9e01      	ldr	r6, [sp, #4]
 8016d2e:	4639      	mov	r1, r7
 8016d30:	4650      	mov	r0, sl
 8016d32:	47b0      	blx	r6
 8016d34:	f8d8 3000 	ldr.w	r3, [r8]
 8016d38:	6821      	ldr	r1, [r4, #0]
 8016d3a:	1d1a      	adds	r2, r3, #4
 8016d3c:	f8c8 2000 	str.w	r2, [r8]
 8016d40:	f011 0f20 	tst.w	r1, #32
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	d00f      	beq.n	8016d68 <_scanf_i+0x1c8>
 8016d48:	6018      	str	r0, [r3, #0]
 8016d4a:	68e3      	ldr	r3, [r4, #12]
 8016d4c:	3301      	adds	r3, #1
 8016d4e:	60e3      	str	r3, [r4, #12]
 8016d50:	6923      	ldr	r3, [r4, #16]
 8016d52:	1bed      	subs	r5, r5, r7
 8016d54:	445d      	add	r5, fp
 8016d56:	442b      	add	r3, r5
 8016d58:	6123      	str	r3, [r4, #16]
 8016d5a:	2000      	movs	r0, #0
 8016d5c:	b007      	add	sp, #28
 8016d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d62:	f04f 0b00 	mov.w	fp, #0
 8016d66:	e7ca      	b.n	8016cfe <_scanf_i+0x15e>
 8016d68:	07ca      	lsls	r2, r1, #31
 8016d6a:	bf4c      	ite	mi
 8016d6c:	8018      	strhmi	r0, [r3, #0]
 8016d6e:	6018      	strpl	r0, [r3, #0]
 8016d70:	e7eb      	b.n	8016d4a <_scanf_i+0x1aa>
 8016d72:	2001      	movs	r0, #1
 8016d74:	e7f2      	b.n	8016d5c <_scanf_i+0x1bc>
 8016d76:	bf00      	nop
 8016d78:	0801757c 	.word	0x0801757c
 8016d7c:	08015d99 	.word	0x08015d99
 8016d80:	08016ffd 	.word	0x08016ffd
 8016d84:	080177c2 	.word	0x080177c2

08016d88 <__sccl>:
 8016d88:	b570      	push	{r4, r5, r6, lr}
 8016d8a:	780b      	ldrb	r3, [r1, #0]
 8016d8c:	4604      	mov	r4, r0
 8016d8e:	2b5e      	cmp	r3, #94	@ 0x5e
 8016d90:	bf0b      	itete	eq
 8016d92:	784b      	ldrbeq	r3, [r1, #1]
 8016d94:	1c4a      	addne	r2, r1, #1
 8016d96:	1c8a      	addeq	r2, r1, #2
 8016d98:	2100      	movne	r1, #0
 8016d9a:	bf08      	it	eq
 8016d9c:	2101      	moveq	r1, #1
 8016d9e:	3801      	subs	r0, #1
 8016da0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8016da4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8016da8:	42a8      	cmp	r0, r5
 8016daa:	d1fb      	bne.n	8016da4 <__sccl+0x1c>
 8016dac:	b90b      	cbnz	r3, 8016db2 <__sccl+0x2a>
 8016dae:	1e50      	subs	r0, r2, #1
 8016db0:	bd70      	pop	{r4, r5, r6, pc}
 8016db2:	f081 0101 	eor.w	r1, r1, #1
 8016db6:	54e1      	strb	r1, [r4, r3]
 8016db8:	4610      	mov	r0, r2
 8016dba:	4602      	mov	r2, r0
 8016dbc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016dc0:	2d2d      	cmp	r5, #45	@ 0x2d
 8016dc2:	d005      	beq.n	8016dd0 <__sccl+0x48>
 8016dc4:	2d5d      	cmp	r5, #93	@ 0x5d
 8016dc6:	d016      	beq.n	8016df6 <__sccl+0x6e>
 8016dc8:	2d00      	cmp	r5, #0
 8016dca:	d0f1      	beq.n	8016db0 <__sccl+0x28>
 8016dcc:	462b      	mov	r3, r5
 8016dce:	e7f2      	b.n	8016db6 <__sccl+0x2e>
 8016dd0:	7846      	ldrb	r6, [r0, #1]
 8016dd2:	2e5d      	cmp	r6, #93	@ 0x5d
 8016dd4:	d0fa      	beq.n	8016dcc <__sccl+0x44>
 8016dd6:	42b3      	cmp	r3, r6
 8016dd8:	dcf8      	bgt.n	8016dcc <__sccl+0x44>
 8016dda:	3002      	adds	r0, #2
 8016ddc:	461a      	mov	r2, r3
 8016dde:	3201      	adds	r2, #1
 8016de0:	4296      	cmp	r6, r2
 8016de2:	54a1      	strb	r1, [r4, r2]
 8016de4:	dcfb      	bgt.n	8016dde <__sccl+0x56>
 8016de6:	1af2      	subs	r2, r6, r3
 8016de8:	3a01      	subs	r2, #1
 8016dea:	1c5d      	adds	r5, r3, #1
 8016dec:	42b3      	cmp	r3, r6
 8016dee:	bfa8      	it	ge
 8016df0:	2200      	movge	r2, #0
 8016df2:	18ab      	adds	r3, r5, r2
 8016df4:	e7e1      	b.n	8016dba <__sccl+0x32>
 8016df6:	4610      	mov	r0, r2
 8016df8:	e7da      	b.n	8016db0 <__sccl+0x28>

08016dfa <__submore>:
 8016dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dfe:	460c      	mov	r4, r1
 8016e00:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016e02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016e06:	4299      	cmp	r1, r3
 8016e08:	d11d      	bne.n	8016e46 <__submore+0x4c>
 8016e0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8016e0e:	f7ff f92d 	bl	801606c <_malloc_r>
 8016e12:	b918      	cbnz	r0, 8016e1c <__submore+0x22>
 8016e14:	f04f 30ff 	mov.w	r0, #4294967295
 8016e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016e20:	63a3      	str	r3, [r4, #56]	@ 0x38
 8016e22:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8016e26:	6360      	str	r0, [r4, #52]	@ 0x34
 8016e28:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8016e2c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8016e30:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8016e34:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8016e38:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8016e3c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8016e40:	6020      	str	r0, [r4, #0]
 8016e42:	2000      	movs	r0, #0
 8016e44:	e7e8      	b.n	8016e18 <__submore+0x1e>
 8016e46:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8016e48:	0077      	lsls	r7, r6, #1
 8016e4a:	463a      	mov	r2, r7
 8016e4c:	f000 f83a 	bl	8016ec4 <_realloc_r>
 8016e50:	4605      	mov	r5, r0
 8016e52:	2800      	cmp	r0, #0
 8016e54:	d0de      	beq.n	8016e14 <__submore+0x1a>
 8016e56:	eb00 0806 	add.w	r8, r0, r6
 8016e5a:	4601      	mov	r1, r0
 8016e5c:	4632      	mov	r2, r6
 8016e5e:	4640      	mov	r0, r8
 8016e60:	f7ff f88a 	bl	8015f78 <memcpy>
 8016e64:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8016e68:	f8c4 8000 	str.w	r8, [r4]
 8016e6c:	e7e9      	b.n	8016e42 <__submore+0x48>

08016e6e <memmove>:
 8016e6e:	4288      	cmp	r0, r1
 8016e70:	b510      	push	{r4, lr}
 8016e72:	eb01 0402 	add.w	r4, r1, r2
 8016e76:	d902      	bls.n	8016e7e <memmove+0x10>
 8016e78:	4284      	cmp	r4, r0
 8016e7a:	4623      	mov	r3, r4
 8016e7c:	d807      	bhi.n	8016e8e <memmove+0x20>
 8016e7e:	1e43      	subs	r3, r0, #1
 8016e80:	42a1      	cmp	r1, r4
 8016e82:	d008      	beq.n	8016e96 <memmove+0x28>
 8016e84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016e88:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016e8c:	e7f8      	b.n	8016e80 <memmove+0x12>
 8016e8e:	4402      	add	r2, r0
 8016e90:	4601      	mov	r1, r0
 8016e92:	428a      	cmp	r2, r1
 8016e94:	d100      	bne.n	8016e98 <memmove+0x2a>
 8016e96:	bd10      	pop	{r4, pc}
 8016e98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016e9c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016ea0:	e7f7      	b.n	8016e92 <memmove+0x24>
	...

08016ea4 <_sbrk_r>:
 8016ea4:	b538      	push	{r3, r4, r5, lr}
 8016ea6:	4d06      	ldr	r5, [pc, #24]	@ (8016ec0 <_sbrk_r+0x1c>)
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	4604      	mov	r4, r0
 8016eac:	4608      	mov	r0, r1
 8016eae:	602b      	str	r3, [r5, #0]
 8016eb0:	f7f0 fdc2 	bl	8007a38 <_sbrk>
 8016eb4:	1c43      	adds	r3, r0, #1
 8016eb6:	d102      	bne.n	8016ebe <_sbrk_r+0x1a>
 8016eb8:	682b      	ldr	r3, [r5, #0]
 8016eba:	b103      	cbz	r3, 8016ebe <_sbrk_r+0x1a>
 8016ebc:	6023      	str	r3, [r4, #0]
 8016ebe:	bd38      	pop	{r3, r4, r5, pc}
 8016ec0:	20005e44 	.word	0x20005e44

08016ec4 <_realloc_r>:
 8016ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ec8:	4607      	mov	r7, r0
 8016eca:	4614      	mov	r4, r2
 8016ecc:	460d      	mov	r5, r1
 8016ece:	b921      	cbnz	r1, 8016eda <_realloc_r+0x16>
 8016ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ed4:	4611      	mov	r1, r2
 8016ed6:	f7ff b8c9 	b.w	801606c <_malloc_r>
 8016eda:	b92a      	cbnz	r2, 8016ee8 <_realloc_r+0x24>
 8016edc:	f7ff f85a 	bl	8015f94 <_free_r>
 8016ee0:	4625      	mov	r5, r4
 8016ee2:	4628      	mov	r0, r5
 8016ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ee8:	f000 f88a 	bl	8017000 <_malloc_usable_size_r>
 8016eec:	4284      	cmp	r4, r0
 8016eee:	4606      	mov	r6, r0
 8016ef0:	d802      	bhi.n	8016ef8 <_realloc_r+0x34>
 8016ef2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016ef6:	d8f4      	bhi.n	8016ee2 <_realloc_r+0x1e>
 8016ef8:	4621      	mov	r1, r4
 8016efa:	4638      	mov	r0, r7
 8016efc:	f7ff f8b6 	bl	801606c <_malloc_r>
 8016f00:	4680      	mov	r8, r0
 8016f02:	b908      	cbnz	r0, 8016f08 <_realloc_r+0x44>
 8016f04:	4645      	mov	r5, r8
 8016f06:	e7ec      	b.n	8016ee2 <_realloc_r+0x1e>
 8016f08:	42b4      	cmp	r4, r6
 8016f0a:	4622      	mov	r2, r4
 8016f0c:	4629      	mov	r1, r5
 8016f0e:	bf28      	it	cs
 8016f10:	4632      	movcs	r2, r6
 8016f12:	f7ff f831 	bl	8015f78 <memcpy>
 8016f16:	4629      	mov	r1, r5
 8016f18:	4638      	mov	r0, r7
 8016f1a:	f7ff f83b 	bl	8015f94 <_free_r>
 8016f1e:	e7f1      	b.n	8016f04 <_realloc_r+0x40>

08016f20 <_strtoul_l.isra.0>:
 8016f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f24:	4e34      	ldr	r6, [pc, #208]	@ (8016ff8 <_strtoul_l.isra.0+0xd8>)
 8016f26:	4686      	mov	lr, r0
 8016f28:	460d      	mov	r5, r1
 8016f2a:	4628      	mov	r0, r5
 8016f2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f30:	5d37      	ldrb	r7, [r6, r4]
 8016f32:	f017 0708 	ands.w	r7, r7, #8
 8016f36:	d1f8      	bne.n	8016f2a <_strtoul_l.isra.0+0xa>
 8016f38:	2c2d      	cmp	r4, #45	@ 0x2d
 8016f3a:	d110      	bne.n	8016f5e <_strtoul_l.isra.0+0x3e>
 8016f3c:	782c      	ldrb	r4, [r5, #0]
 8016f3e:	2701      	movs	r7, #1
 8016f40:	1c85      	adds	r5, r0, #2
 8016f42:	f033 0010 	bics.w	r0, r3, #16
 8016f46:	d115      	bne.n	8016f74 <_strtoul_l.isra.0+0x54>
 8016f48:	2c30      	cmp	r4, #48	@ 0x30
 8016f4a:	d10d      	bne.n	8016f68 <_strtoul_l.isra.0+0x48>
 8016f4c:	7828      	ldrb	r0, [r5, #0]
 8016f4e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016f52:	2858      	cmp	r0, #88	@ 0x58
 8016f54:	d108      	bne.n	8016f68 <_strtoul_l.isra.0+0x48>
 8016f56:	786c      	ldrb	r4, [r5, #1]
 8016f58:	3502      	adds	r5, #2
 8016f5a:	2310      	movs	r3, #16
 8016f5c:	e00a      	b.n	8016f74 <_strtoul_l.isra.0+0x54>
 8016f5e:	2c2b      	cmp	r4, #43	@ 0x2b
 8016f60:	bf04      	itt	eq
 8016f62:	782c      	ldrbeq	r4, [r5, #0]
 8016f64:	1c85      	addeq	r5, r0, #2
 8016f66:	e7ec      	b.n	8016f42 <_strtoul_l.isra.0+0x22>
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d1f6      	bne.n	8016f5a <_strtoul_l.isra.0+0x3a>
 8016f6c:	2c30      	cmp	r4, #48	@ 0x30
 8016f6e:	bf14      	ite	ne
 8016f70:	230a      	movne	r3, #10
 8016f72:	2308      	moveq	r3, #8
 8016f74:	f04f 38ff 	mov.w	r8, #4294967295
 8016f78:	2600      	movs	r6, #0
 8016f7a:	fbb8 f8f3 	udiv	r8, r8, r3
 8016f7e:	fb03 f908 	mul.w	r9, r3, r8
 8016f82:	ea6f 0909 	mvn.w	r9, r9
 8016f86:	4630      	mov	r0, r6
 8016f88:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016f8c:	f1bc 0f09 	cmp.w	ip, #9
 8016f90:	d810      	bhi.n	8016fb4 <_strtoul_l.isra.0+0x94>
 8016f92:	4664      	mov	r4, ip
 8016f94:	42a3      	cmp	r3, r4
 8016f96:	dd1e      	ble.n	8016fd6 <_strtoul_l.isra.0+0xb6>
 8016f98:	f1b6 3fff 	cmp.w	r6, #4294967295
 8016f9c:	d007      	beq.n	8016fae <_strtoul_l.isra.0+0x8e>
 8016f9e:	4580      	cmp	r8, r0
 8016fa0:	d316      	bcc.n	8016fd0 <_strtoul_l.isra.0+0xb0>
 8016fa2:	d101      	bne.n	8016fa8 <_strtoul_l.isra.0+0x88>
 8016fa4:	45a1      	cmp	r9, r4
 8016fa6:	db13      	blt.n	8016fd0 <_strtoul_l.isra.0+0xb0>
 8016fa8:	fb00 4003 	mla	r0, r0, r3, r4
 8016fac:	2601      	movs	r6, #1
 8016fae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016fb2:	e7e9      	b.n	8016f88 <_strtoul_l.isra.0+0x68>
 8016fb4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016fb8:	f1bc 0f19 	cmp.w	ip, #25
 8016fbc:	d801      	bhi.n	8016fc2 <_strtoul_l.isra.0+0xa2>
 8016fbe:	3c37      	subs	r4, #55	@ 0x37
 8016fc0:	e7e8      	b.n	8016f94 <_strtoul_l.isra.0+0x74>
 8016fc2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016fc6:	f1bc 0f19 	cmp.w	ip, #25
 8016fca:	d804      	bhi.n	8016fd6 <_strtoul_l.isra.0+0xb6>
 8016fcc:	3c57      	subs	r4, #87	@ 0x57
 8016fce:	e7e1      	b.n	8016f94 <_strtoul_l.isra.0+0x74>
 8016fd0:	f04f 36ff 	mov.w	r6, #4294967295
 8016fd4:	e7eb      	b.n	8016fae <_strtoul_l.isra.0+0x8e>
 8016fd6:	1c73      	adds	r3, r6, #1
 8016fd8:	d106      	bne.n	8016fe8 <_strtoul_l.isra.0+0xc8>
 8016fda:	2322      	movs	r3, #34	@ 0x22
 8016fdc:	f8ce 3000 	str.w	r3, [lr]
 8016fe0:	4630      	mov	r0, r6
 8016fe2:	b932      	cbnz	r2, 8016ff2 <_strtoul_l.isra.0+0xd2>
 8016fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fe8:	b107      	cbz	r7, 8016fec <_strtoul_l.isra.0+0xcc>
 8016fea:	4240      	negs	r0, r0
 8016fec:	2a00      	cmp	r2, #0
 8016fee:	d0f9      	beq.n	8016fe4 <_strtoul_l.isra.0+0xc4>
 8016ff0:	b106      	cbz	r6, 8016ff4 <_strtoul_l.isra.0+0xd4>
 8016ff2:	1e69      	subs	r1, r5, #1
 8016ff4:	6011      	str	r1, [r2, #0]
 8016ff6:	e7f5      	b.n	8016fe4 <_strtoul_l.isra.0+0xc4>
 8016ff8:	0801767f 	.word	0x0801767f

08016ffc <_strtoul_r>:
 8016ffc:	f7ff bf90 	b.w	8016f20 <_strtoul_l.isra.0>

08017000 <_malloc_usable_size_r>:
 8017000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017004:	1f18      	subs	r0, r3, #4
 8017006:	2b00      	cmp	r3, #0
 8017008:	bfbc      	itt	lt
 801700a:	580b      	ldrlt	r3, [r1, r0]
 801700c:	18c0      	addlt	r0, r0, r3
 801700e:	4770      	bx	lr

08017010 <_init>:
 8017010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017012:	bf00      	nop
 8017014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017016:	bc08      	pop	{r3}
 8017018:	469e      	mov	lr, r3
 801701a:	4770      	bx	lr

0801701c <_fini>:
 801701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801701e:	bf00      	nop
 8017020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017022:	bc08      	pop	{r3}
 8017024:	469e      	mov	lr, r3
 8017026:	4770      	bx	lr
